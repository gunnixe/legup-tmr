###############################################
# Configurations that you may want to change:
###############################################

# targer Processor and cache
PROC := MIPS
CACHE := TIGER

# set the processor and cache directory for the new flow
ifeq ($(PROC),MIPS)
	PROC_DIR_NF := $(LEVEL)/../ip/processors/mipsI
endif
ifeq ($(CACHE),TIGER)
	DCACHE_DIR := $(LEVEL)/../ip/memory/tiger_dcache
	ICACHE_DIR := $(LEVEL)/../ip/memory/tiger_icache
endif

# Run the LLVM profile as part of regular "make"
# Make sure to also set_parameter LLVM_PROFILE 1 in legup.tcl
# LLVM_PROFILE := 0

# Add profiling function calls to the program. This is only valid when
# compiling for ARM since ARM performance counters are used.
# Options: 1 = on, 0 = off
ARM_PROFILE := 0

# If MULTICYLE_CONSTRAINTS is set then "make p" will
# create a .sdc file with multicycle constraints
MULTICYCLE_CONSTRAINTS := 0

# If TIMING_ANALYSIS_DATAPATH_ONLY is set then "make p" 
# will create a .sdc file which makes false path constraints 
# to the memory controller / other critical paths outside 
# of the datapath
TIMING_ANALYSIS_DATAPATH_ONLY := 0


# unroll flags
#UNROLL := -unroll-threshold=192 -debug 
#UNROLL := -unroll-allow-partial -unroll-threshold=192 -debug 
#UNROLL := -unroll-threshold=50000 -debug 
#UNROLL := -unroll-allow-partial -unroll-threshold=1000

# inline flags
#CFLAG += -mllvm -inline-threshold=10000

# local config.tcl file for benchmark specific parameters
#LOCAL_CONFIG := -legup-config=config.tcl

# suppresses harmless warning:
# ** Warning: (vopt-2009) At least one design unit was compiled with optimization level -O0 or -O1.
#VSIMFLAG += -note 2009

VSIM_WAVE_CONFIG := configure wave -signalnamewidth 2; \
                   configure wave -namecolwidth 300; \
                   configure wave -gridoffset 10000; \
                   update; WaveRestoreZoom {0 ps} {400 ns}; 

# if running on Scinet, set path to Scinet directory
ifdef USE_SCINET
	#LEVEL=$(SCINET_EXAMPLES_DIR)
	#EXPECT := /home/j/janders/jchoi/expect5.45/expect
	EXPECT := /home/j/janders/jchoi/tcl8.5.8/bin/expect

	# for gnu/stubs-32.h
	CFLAG += -I/home/j/janders/jchoi/legup_binaries/
endif

# whether using Release or Debug LLVM build
ifndef LLVM_BUILD
	LLVM_BUILD := Release+Asserts
#	LLVM_BUILD := Debug+Asserts
endif

# path to front-end, such as llvm-gcc, clang or llvm-g++
ifndef FRONT_END
#FRONT_END := clang
#TODO: This is temporary for buildbot, and really any time when it is necessary
# to run both 'master' branch (LLVM 2.9) and 'llvm-3.5' branch at the same time 
# since they requrie different versions of clang
	FRONT_END := clang-3.5
	FRONT_END_PP := clang-3.5++
endif

# prefix of arm gcc
ARM_PREFIX := $(LEVEL)/../swtools/binutils/bin/arm-altera-eabi-
# arm's gcc linker script
ARM_LD_SCRIPT := $(LEVEL)/../swtools/arm/linkerscripts/altera-socfpga-unhosted-as.ld
ARM_SIM_LD_SCRIPT := $(LEVEL)/../swtools/arm/linkerscripts/sim_arm.ld

# prefix of mipsel gcc
MIPS_PREFIX := $(LEVEL)/../swtools/binutils/bin/mipsel-elf-

# use oldtestmips if using gxemul 0.6, testmips if using gxemul 0.4.7.2
ifndef GXEMUL_OPT
#GXEMUL_OPT := oldtestmips
	GXEMUL_OPT := testmips
endif
GXEMUL_MEM_START:=0x80030000

# make sure for loops fail properly in the makefile
SHELL := /bin/bash -e

ifndef EXPECT
	EXPECT := /usr/bin/expect
endif

ifndef DRAGONEGG
	DRAGONEGG := gcc-4.8 -fplugin=$(LEVEL)/../dragonegg/dragonegg.so -S -fplugin-arg-dragonegg-emit-ir -U_FORTIFY_SOURCE
endif

###############################################
# Configurations that shouldn't change:
###############################################

# suppress warnings like:
# sha.c:52: warning: conflicting types for built-in function ‘memset’
CFLAG += -fno-builtin -I $(LEVEL)/lib/include/
# do not generate llvm IR with zeroinitializer and insertelement
CFLAG += -m32

# for ubuntu 11.10 header files
CFLAG += -I /usr/include/i386-linux-gnu

# for clang to link to crt1.o and crti.o, used in pcie flow
LBITS := $(shell getconf LONG_BIT)
ifeq ($(LBITS),64)
        # do 64 bit stuff here
	PCIE_CFLAG := $(subst -m32,,$(CFLAG)) -fno-slp-vectorize -fno-vectorize
	PCIE_LDFLAG := -B/usr/lib/x86_64-linux-gnu -B/usr/lib/gcc/x86_64-linux-gnu/`gcc -dumpversion`/ -L/usr/lib/gcc/x86_64-linux-gnu/`gcc -dumpversion`/
else
        # do 32 bit stuff here
        PCIE_LDFLAG := -B/usr/lib/i386-linux-gnu/ -B/usr/lib/gcc/i686-linux-gnu/`gcc -dumpversion`/ -L/usr/lib/gcc/i686-linux-gnu/`gcc -dumpversion`/
endif

ifdef DEBUG_PCIE
      PCIE_CFLAG += -g
endif

# location of arm libraries
ARM_LIB := $(LEVEL)/../swtools/arm/lib

# location of mips libraries
#MIPS_LIB := $(LEVEL)/../tiger/linux_tools/lib
MIPS_LIB := $(LEVEL)/../swtools/mips/lib
MIPS_TOOLS := $(LEVEL)/../swtools/mips

# location of profiling code - marks's -- not used in current version
PROF_LIB := $(LEVEL)/../tiger/tool_source/Profiling

# location of profiling tools
PROF_TOOLS := $(LEVEL)/../tiger/tool_source/profiling_tools

# enable profiling
#PROFILER_ON := true

# parameters for profiling in simulation
# default: hierarchical profiling of execution cycle
CNT_INC := 00010
DO_HIER := 1
# parameters for profiling on board
# sof file to program the board in pure sw mode
PGM_SOF := $(PROF_TOOLS)/tiger_leap.sof
# profiling target
INSTR_PROF  := 0x00000001
CYCLE_PROF  := 0x00000002
STALL_PROF  := 0x00000004
ISTALL_PROF := 0x00000008
DSTALL_PROF := 0x00000010
# profiling type
HIER_PROF := 0x00000001
FLAT_PROF := 0x00000000

# Functions that have percentage greater than this number will be predicted
MIN_PERCENTAGE_TO_PREDICT := 5
# Name of the accelerating function
ACCELERATOR_NAME := $(shell grep '^set_accelerator_function "' config.tcl 2> /dev/null | sed 's/set_accelerator_function //' | sed 's/"//g')

# parameters for profiling - by mark.. not used in current version
NUM_FUNCTIONS := 16
LOG_NUM_FUNCTIONS := 4
RESULTS_CONVERT := convertPowerResults #convertFuncResults		# convertFuncResults or convertPowerResults
COUNTER_WIDTH := 32

# ie. for chstone/jpeg this would be jpeg
PWD := $(shell pwd)

# location of tiger mips processor
# PROC_PROF_DIR := $(LEVEL)/../tiger/processor/tiger_hybrid_pipelined_with_leap
PROC_HY_PROF_DIR := $(LEVEL)/../tiger/processor/tiger_hybrid/simulation

# location of pcie code
PCIE_DIR := $(LEVEL)/../pcie
PCIE_SHARED_MEM_DIR:=$(PCIE_DIR)/shared_mem
PCIE_RIFFA_DIR:=$(PCIE_DIR)/riffa_driver
PCIE_SCHEDULER_DIR:=$(PCIE_DIR)/scheduler
PCIE_LIBRARY_PATH:=$(PCIE_DIR)/lib

# location of hybrid circuits
HYBRID_DIR := $(LEVEL)/../tiger/hybrid/

# ie. for chstone/jpeg this would be jpeg
BASENAME := $(shell basename $(PWD))

# directory of debugger files
DBG_DIR := $(LEVEL)/../dbg/

# define modelsim base directory
MODEL_HOME := ${shell which vsim}/../..

# path to llvm executables such as opt and llc (keep trailing /)
LLVM_HOME := $(LEVEL)/../llvm/$(LLVM_BUILD)/bin/

# path to mips llc using llvm 2.9 (keep trailing /)
MIPS_LLC_DIR := $(LEVEL)/../llvm-2.9_mips/$(LLVM_BUILD)/bin/

# path to llvm libraries such as shared libraries used for opt (keep trailing /)
LIB_DIR := $(LEVEL)/../llvm/$(LLVM_BUILD)/lib/

POLLY_LIB_DIR := $(LEVEL)/../llvm/tools/polly/$(LLVM_BUILD)/lib/
CLOOG_DIR := $(LEVEL)/../cloog/install/lib/

LEGUP_TCL_FILES := -legup-config=$(LEVEL)/legup.tcl

# NOTE: To change the board, please edit legup.tcl
# The board can also be overridden by specifying a OVERRIDE_BOARD environment
# variable (used by buildbot)
ifdef OVERRIDE_BOARD
	# override the default board in legup.tcl - but NOT the local config.tcl
	# we still want some benchmarks to target specific boards
	#echo $(OVERRIDE_BOARD)
	LEGUP_TCL_FILES += -legup-config=$(LEVEL)/$(OVERRIDE_BOARD).tcl
endif

LEGUP_TCL_FILES += $(LOCAL_CONFIG)

ifdef LEGUP_EXTRA_TCL_FILE
	LEGUP_TCL_FILES += -legup-config=$(LEGUP_EXTRA_TCL_FILE)
endif

# include polly libraries, LLVM libraries, and global configuration
#OPT_FLAGS := -load=$(CLOOG_DIR)libisl.so -load=$(CLOOG_DIR)libcloog-isl.so \
#            -load=$(POLLY_LIB_DIR)LLVMPolly.so -load=$(LIB_DIR)LLVMLegUp.so 
OPT_FLAGS := -load=$(LIB_DIR)LLVMLegUp.so \
			$(LEGUP_TCL_FILES)

# path to llvm-ar libraries, such as LLVM intrinsics
AR_DIR := $(LEVEL)/lib/llvm

# include area information and global settings
LLC_FLAGS := $(LEGUP_TCL_FILES)

# name of Verilog file
VFILE := $(NAME).v

# create work directory if necessary
ifeq ($(wildcard work),) 
	VLIB := vsim $(VSIMFLAG) -c -do "vlib work; exit;" 
else
	VLIB :=
endif

# CFLAG optimization level switch
ifeq ($(NO_OPT),1) 
	CFLAG += -O0
else
	CFLAG += -O3
endif

# disable vectorization since LegUp does not yet support this feature of LLVM
# NOTE: this must be after -Ox flag, otherwise it will be ignored
CLANG_FLAG += -fno-vectorize -fno-slp-vectorize

# link time optimization switch
ifeq ($(NO_INLINE),1)
#LDFLAG += -disable-inlining -disable-opt # LLVM 3.4 update: no longer needed since linking does not do any optimizaiton now.  Add to OPT_FLAGS instead
	#OPT_FLAGS += -disable-inlining -disable-opt
	OPT_FLAGS += -disable-inlining
	CFLAG += -mllvm -inline-threshold=-100 -fno-inline
endif

ifdef PRINTF_OFF
	CFLAG += -I $(LEVEL)/../tiger/tool_source/lib
endif

# detect the output path from the .tcl config files
OUTPUT_PATH_CMD := $(LLVM_HOME)opt $(OPT_FLAGS) -legup-tcl-cmds="puts [get_legup_output_path]" /dev/null
OUTPUT_PATH := $(shell $(OUTPUT_PATH_CMD) 2> /dev/null)
# define the full path name of intermediate files. 
FULLNAME := $(OUTPUT_PATH)/$(NAME)


# detect custom verilog from the .tcl config files
CUSTOM_VERILOG_FUNCTIONS_CMD:=$(LLVM_HOME)opt $(OPT_FLAGS) -legup-tcl-cmds="puts [atleast_one_custom_verilog]" /dev/null
CUSTOM_VERILOG_FUNCTIONS := $(shell $(CUSTOM_VERILOG_FUNCTIONS_CMD) 2> /dev/null)

# detect the test bench name from the .tcl config files
TEST_BENCH_CMD:=$(LLVM_HOME)opt $(OPT_FLAGS) -legup-tcl-cmds="puts [get_test_bench_name]" /dev/null
TEST_BENCH := $(shell $(TEST_BENCH_CMD) 2> /dev/null)

# detect the board/family from their .tcl configuration files
FPGA_BOARD_CMD := $(LLVM_HOME)opt $(OPT_FLAGS) -legup-tcl-cmds="puts [get_board]" /dev/null
FAMILY_CMD := $(LLVM_HOME)opt $(OPT_FLAGS) -legup-tcl-cmds="puts [get_device_family]" /dev/null
PROJECT_NAME_CMD := $(LLVM_HOME)opt $(OPT_FLAGS) -legup-tcl-cmds="puts [get_parameter SYSTEM_PROJECT_NAME]" /dev/null
TOP_LEVEL_MODULE_CMD:=$(LLVM_HOME)opt $(OPT_FLAGS) -legup-tcl-cmds="puts [get_top_level_module]" /dev/null
ACCEL_CMD = $(LLVM_HOME)opt $(OPT_FLAGS) -legup-config=config.tcl -legup-config=parallelaccels.tcl -legup-tcl-cmds="puts [get_accelerator_function]" /dev/null

# commands to determine the appropriate jtag cable
DE1_SoC_JTAG_CABLE_CMD := jtagconfig 2> /dev/null | grep "DE-SoC" | head -n 1 | cut -c 4-
DE2_JTAG_CABLE_CMD := jtagconfig 2> /dev/null | grep "EP2C35" -B1 | grep USB-Blaster | head -n 1 | cut -c 4-
SoCKit_JTAG_CABLE_CMD := jtagconfig 2> /dev/null | grep "SoCKit" | head -n 1 | cut -c 4-

FPGA_BOARD := $(shell $(FPGA_BOARD_CMD) 2> /dev/null)
FAMILY := $(shell $(FAMILY_CMD) 2> /dev/null)
PROJECT := $(shell $(PROJECT_NAME_CMD) 2> /dev/null)
TOP_LEVEL_MODULE := $(shell $(TOP_LEVEL_MODULE_CMD) 2> /dev/null)
ACCELS = $(shell $(ACCEL_CMD) 2> /dev/null)

PROJECT_SOURCE_DIR := ../boards/$(FAMILY)/$(FPGA_BOARD)/$(PROJECT)

# detect the system settings from the .tcl configuration file
PROC_ARCH_CMD	:= $(LLVM_HOME)opt $(OPT_FLAGS) -legup-tcl-cmds="puts [get_parameter SYSTEM_PROCESSOR_ARCHITECTURE]" /dev/null
PROC_ARCH		:= $(shell $(PROC_ARCH_CMD) 2> /dev/null)

LEGUP_QUARTUS_64BIT :=

ifeq ($(FPGA_BOARD),DE2)
	DEVICE_FAMILY := "Cyclone II"
	DEVICE := EP2C35F672C6
	SYS_DIR := $(LEVEL)/../dev_kits/DE2
	JTAG_CABLE := $(shell $(DE2_JTAG_CABLE_CMD) 2> /dev/null)
endif
ifeq ($(FPGA_BOARD),DE4-530)
	DEVICE_FAMILY := "Stratix IV"
	DEVICE := EP4SGX530KH40C2
	SYS_DIR := $(LEVEL)/../dev_kits/DE4
	LEGUP_QUARTUS_64BIT := "--64bit"	
endif
ifeq ($(FPGA_BOARD),DE2-115)
	DEVICE_FAMILY := "Cyclone IV"
	DEVICE := EP4CE115F29C7
	SYS_DIR := $(LEVEL)/../dev_kits/DE2-115
endif
ifeq ($(FPGA_BOARD),DE1-SoC)
	DEVICE_FAMILY := "Cyclone V"
	DEVICE := 5CSEMA5F31C6
	LEGUP_QUARTUS_64BIT := "--64bit"
	JTAG_CABLE := $(shell $(DE1_SoC_JTAG_CABLE_CMD) 2> /dev/null)
endif
ifeq ($(FPGA_BOARD),DE5-Net)
	DEVICE_FAMILY := "Stratix V"
	DEVICE := 5SGXEA7N2F45C2
	LEGUP_QUARTUS_64BIT := "--64bit"
endif
ifeq ($(FPGA_BOARD),CycloneIIAuto)
	DEVICE_FAMILY := "Cyclone II"
	DEVICE := AUTO
	SYS_DIR := $(LEVEL)/../dev_kits/DE2
endif
ifeq ($(FPGA_BOARD),ML605)
	DEVICE_FAMILY := "Virtex6"
	DEVICE := xc6vlx240t
endif
ifeq ($(FPGA_BOARD),NexysVideo)
	DEVICE_FAMILY := "Artix7"
	DEVICE := 7a200tsbg484-1
endif
ifeq ($(FPGA_BOARD),SoCKit)
	DEVICE_FAMILY := "Cyclone V"
	DEVICE :=
	LEGUP_QUARTUS_64BIT := "--64bit"
	JTAG_CABLE := $(shell $(SoCKit_JTAG_CABLE_CMD) 2> /dev/null)
endif

# Allow overriding the JTAG_CABLE.  Used by buildbot.
ifdef OVERRIDE_JTAG_CABLE
	JTAG_CABLE := $(OVERRIDE_JTAG_CABLE)
endif

# command to determine in which position the FPGA is, for a given JTAG_CABLE
# ie. is it before or after SOCVHPS?
FPGA_PLACE_IN_JTAG_CHAIN_CMD := jtagconfig 2> /dev/null | grep -F "$(JTAG_CABLE)" -A1 | grep SOCVHPS
FPGA_PLACE_IN_JTAG_CHAIN := $(if $(shell $(FPGA_PLACE_IN_JTAG_CHAIN_CMD)),2,1)

#processor locations
ifeq ($(FPGA_BOARD),DE2)
	# location of tiger mips processor
	PROC_DIR := $(LEVEL)/../tiger/processor/tiger_DE2
	# location of hybrid processor
	HYBRID_PROC := $(LEVEL)/../tiger/processor/tiger_DE2
endif # end of DE2

ifeq ($(FPGA_BOARD),CycloneIIAuto)
	# location of tiger mips processor
	PROC_DIR := $(LEVEL)/../tiger/processor/tiger_DE2
	# location of hybrid processor
	HYBRID_PROC := $(LEVEL)/../tiger/processor/tiger_DE2
endif # end of CycloneIIAuto

#processor locations
ifeq ($(FPGA_BOARD),DE2-115)
	# location of tiger mips processor
	PROC_DIR := $(LEVEL)/../tiger/processor/tiger_DE2
	# location of hybrid processor
	HYBRID_PROC := $(LEVEL)/../tiger/processor/tiger_DE2
endif # end of DE2-115

ifeq ($(FPGA_BOARD),DE4-230)
	# location of tiger mips processor
	PROC_DIR := $(LEVEL)/../tiger/processor/tiger_DE4
	# location of hybrid processor
	HYBRID_PROC := $(LEVEL)/../tiger/processor/tiger_DE4
endif # end of DE4

ifeq ($(FPGA_BOARD),DE4-530)
	# location of tiger mips processor
	PROC_DIR := $(LEVEL)/../tiger/processor/tiger_DE4
	# location of hybrid processor
	HYBRID_PROC := $(LEVEL)/../tiger/processor/tiger_DE4
endif # end of DE4

#processor locations
ifeq ($(FPGA_BOARD),DE1-SoC)
	# location of tiger mips processor
	PROC_DIR := $(LEVEL)/../tiger/processor/tiger_DE2
	# location of hybrid processor
	HYBRID_PROC := $(LEVEL)/../tiger/processor/tiger_DE2
endif # end of DE1-SoC

#processor locations
ifeq ($(FPGA_BOARD),DE5-Net)
	# location of tiger mips processor
	PROC_DIR := $(LEVEL)/../tiger/processor/tiger_DE2
	# location of hybrid processor
	HYBRID_PROC := $(LEVEL)/../tiger/processor/tiger_DE2
endif # end of DE5-Net


# detect the memory settings from their .tcl configuration files
MEMORY_BASE_ADDRESS_CMD := $(LLVM_HOME)opt $(OPT_FLAGS) -legup-tcl-cmds="puts [get_parameter SYSTEM_MEMORY_BASE_ADDRESS]" /dev/null
MEMORY_SIZE_CMD := $(LLVM_HOME)opt $(OPT_FLAGS) -legup-tcl-cmds="puts [get_parameter SYSTEM_MEMORY_SIZE]" /dev/null
MEMORY_WIDTH_CMD := $(LLVM_HOME)opt $(OPT_FLAGS) -legup-tcl-cmds="puts [get_parameter SYSTEM_MEMORY_WIDTH]" /dev/null
#MEMORY_SIM_INIT_FILE_TYPE_CMD := $(LLVM_HOME)opt $(OPT_FLAGS) -legup-tcl-cmds="puts [get_parameter SYSTEM_MEMORY_SIM_INIT_FILE_TYPE]" /dev/null
MEMORY_SIM_INIT_FILE_NAME_CMD := $(LLVM_HOME)opt $(OPT_FLAGS) -legup-tcl-cmds="puts [get_parameter SYSTEM_MEMORY_SIM_INIT_FILE_NAME]" /dev/null

MEMORY_BASE_ADDRESS := $(shell $(MEMORY_BASE_ADDRESS_CMD) 2> /dev/null)
MEMORY_SIZE := $(shell $(MEMORY_SIZE_CMD) 2> /dev/null)
MEMORY_WIDTH := $(shell $(MEMORY_WIDTH_CMD) 2> /dev/null)
#MEMORY_SIM_INIT_FILE_TYPE := $(shell $(MEMORY_SIM_INIT_FILE_TYPE_CMD) 2> /dev/null)
MEMORY_SIM_INIT_FILE_NAME := $(shell $(MEMORY_SIM_INIT_FILE_NAME_CMD) 2> /dev/null)

#BF: 2015-04-13: this should be based on a TCL param
#MIPSI_PROG_START_ADDRESS := 0x00800020
MIPSI_PROG_START_ADDRESS := 0x40000020

ELF2SDRAM_PARAM := $(MEMORY_BASE_ADDRESS) $(MEMORY_SIZE) $(MEMORY_WIDTH) # <MEM_START> <MEM_SIZE> <MEM_WIDTH> <elf_file_in> <sdram_file_out>

#
# set the binaries according to FPGA baord
PROG_LINK := UNDEFINED_PROG_LINK
PERF_COUNTER := performance_counter.o
SIMFILE := sdram.dat
ifeq ($(FPGA_BOARD),DE2)
	PROG_LINK := prog_link.ld
	SIMFILE := sdram.dat
endif
ifeq ($(FPGA_BOARD),DE4-530)
	PROG_LINK := prog_link_DE4.ld
	SIMFILE := ddr2.dat
endif
ifeq ($(FPGA_BOARD),DE4-230)
	PROG_LINK := prog_link_DE4.ld
	SIMFILE := ddr2.dat
endif
ifeq ($(FPGA_BOARD),CycloneIIAuto)
	PROG_LINK := prog_link.ld
	SIMFILE := sdram.dat
endif

# Space separated array of paths to board specific
# top level module files.  This environment variable
# is used in VerilogWriter.cpp.  Please don't remove
# it.
BOARD_TOPS_CMD := find $(LEVEL)/../boards -maxdepth 3 -name "top.v"
export BOARD_TOPS = $(shell $(BOARD_TOPS_CMD))

# Space separated array of paths to utility verilog
# modules that will be the same regardless of C code.
BOARD_UTILITIES_CMD := find $(LEVEL)/../boards -name "utils.v"
export BOARD_UTILITIES = $(shell $(BOARD_TOPS_CMD))

# Space separated array of paths to board specific
# QSF files.  This environment variable is used in
# VerilogWriter.cpp.  Please don't remove it.
BOARD_QSF_FILE_PATHS_CMD := find $(LEVEL)/../boards -name "*.qsf"
export BOARD_QSF_FILE_PATHS = $(shell $(BOARD_TOPS_CMD))

#Inspect
ifeq ($(DEBUG_G_FLAG), 1)
CFLAG += -g
endif

#Combine Basic Blocks
COMBINE_BB_CMD := $(LLVM_HOME)opt $(OPT_FLAGS) -legup-tcl-cmds="puts [get_combine_basicblock]" /dev/null
COMBINE_BB := $(shell $(COMBINE_BB_CMD) 2> /dev/null)
@echo "Combine BB = $(COMBINE_BB)"
ifeq ($(COMBINE_BB), 1)
COMBINE_BB_PASS := -legup-combine-bb -combine-bb=1 -loops-only=0
else ifeq ($(COMBINE_BB), 2)
COMBINE_BB_PASS := -legup-combine-bb -combine-bb=1 -loops-only=1
endif

###############################################
# Configuration Settings for Simulation 
###############################################
# directory of files that Quartus should include
ALTERA_SIM_LIBS_DIR := $(LEVEL)/../ip/libs/altera

GENERIC_LIBS_DIR := $(LEVEL)/../ip/libs/generic

# files that modelsim should include
VERILOG_LIBS := $(ALTERA_SIM_LIBS_DIR)/220model.v \
		$(ALTERA_SIM_LIBS_DIR)/altera_mf.v \
		$(ALTERA_SIM_LIBS_DIR)/altera_primitives.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_adder_14.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_adder64_14.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_subtractor_14.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_subtractor64_14.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_multiplier_11.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_multiplier64_11.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_divider_33.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_divider64_61.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_compare32_1.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_compare64_1.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_truncate_3.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_extend_2.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_sitofp32_6.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_sitofp64_6.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_fptosi32_6.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_fptosi64_6.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_adder_13.v \
		$(ALTERA_SIM_LIBS_DIR)/altfp_adder64_13.v \
		$(ALTERA_SIM_LIBS_DIR)/sgate.v \
		$(GENERIC_LIBS_DIR)/div_unsigned.v \
		$(GENERIC_LIBS_DIR)/div_signed.v 

SYSTEMVERILOG_LIBS := $(ALTERA_SIM_LIBS_DIR)/altera_lnsim.sv

# Add files that modelsim should include based on the device family
ifeq ($(FAMILY),CycloneII)
VERILOG_LIBS +=	$(ALTERA_SIM_LIBS_DIR)/cycloneii_atoms.v
endif
ifeq ($(FAMILY),CycloneIV)
VERILOG_LIBS +=	$(ALTERA_SIM_LIBS_DIR)/cycloneiv_atoms.v \
				$(ALTERA_SIM_LIBS_DIR)/cycloneiv_hssi_atoms.v \
				$(ALTERA_SIM_LIBS_DIR)/cycloneiv_pcie_hip_atoms.v
endif
ifeq ($(FAMILY),CycloneV)
VERILOG_LIBS +=	$(ALTERA_SIM_LIBS_DIR)/cyclonev_atoms.v \
				$(ALTERA_SIM_LIBS_DIR)/cyclonev_hssi_atoms.v \
				$(ALTERA_SIM_LIBS_DIR)/cyclonev_pcie_hip_atoms.v
SYSTEMVERILOG_LIBS += $(ALTERA_SIM_LIBS_DIR)/cyclonev_hps_atoms.sv
endif
ifeq ($(FAMILY),StratixIV)
VERILOG_LIBS +=	$(ALTERA_SIM_LIBS_DIR)/stratixiv_atoms.v \
				$(ALTERA_SIM_LIBS_DIR)/stratixiv_hssi_atoms.v \
				$(ALTERA_SIM_LIBS_DIR)/stratixiv_pcie_hip_atoms.v
endif
ifeq ($(FAMILY),StratixV)
VERILOG_LIBS +=	$(ALTERA_SIM_LIBS_DIR)/stratixv_atoms_ncrypt.v \
				$(ALTERA_SIM_LIBS_DIR)/stratixv_atoms.v \
				$(ALTERA_SIM_LIBS_DIR)/stratixv_hssi_atoms_ncrypt.v \
				$(ALTERA_SIM_LIBS_DIR)/stratixv_hssi_atoms.v \
				$(ALTERA_SIM_LIBS_DIR)/stratixv_pcie_hip_atoms_ncrypt.v \
				$(ALTERA_SIM_LIBS_DIR)/stratixv_pcie_hip_atoms.v
endif


# Add files that modelsim should include if using the debugger
ifeq ($(DEBUGGER), 1)
VERILOG_LIBS +=	$(DBG_DIR)/rtl/trace.v \
		$(DBG_DIR)/rtl/trigger.v \
		$(DBG_DIR)/rtl/comm.v \
		$(DBG_DIR)/rtl/hlsd.v \
		$(DBG_DIR)/rtl/uart_control.v \
		$(DBG_DIR)/rtl/rams_altera.v \
		$(DBG_DIR)/rtl/uart_altera.v
ifeq ($(FAMILY),CycloneII)
VERILOG_LIBS +=	$(DBG_DIR)/rtl/clockbuf_cycloneii.v 
endif
ifeq ($(FAMILY),StratixIV)
VERILOG_LIBS +=	$(DBG_DIR)/rtl/clockbuf_stratixiv.v 
endif
endif #DEBUGGER


# targets to make
TARGETS := all watch v p q f tiger tiger_prof tigersim tigersim_prof gprof emul emulwatch emultest emultrace hierarchy cleantiger clean cleanall functionslist hybrid pcie dbg_sim_trace dbg_trace_analyze dbg_area dbg_database

