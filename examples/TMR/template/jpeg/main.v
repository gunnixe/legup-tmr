//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Fri Nov 25 00:05:27 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Nov 25 14:59:29 2016
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 55
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @CurHuffReadBuf = internal unnamed_addr global i8* null, align 4
`define TAG_g_CurHuffReadBuf `MEMORY_CONTROLLER_TAG_SIZE'd12
`define TAG_g_CurHuffReadBuf_a {`TAG_g_CurHuffReadBuf, 23'd0}
// @JpegFileBuf = internal global [5310 x i8] zeroinitializer, align 1
`define TAG_g_JpegFileBuf `MEMORY_CONTROLLER_TAG_SIZE'd27
`define TAG_g_JpegFileBuf_a {`TAG_g_JpegFileBuf, 23'd0}
// @OutData_comp_buf = internal global [3 x [5310 x i8]] zeroinitializer, align 1
`define TAG_g_OutData_comp_buf `MEMORY_CONTROLLER_TAG_SIZE'd13
`define TAG_g_OutData_comp_buf_a {`TAG_g_OutData_comp_buf, 23'd0}
// @OutData_comp_hpos = internal global [3 x i32] zeroinitializer, align 4
`define TAG_g_OutData_comp_hpos `MEMORY_CONTROLLER_TAG_SIZE'd26
`define TAG_g_OutData_comp_hpos_a {`TAG_g_OutData_comp_hpos, 23'd0}
// @OutData_comp_vpos = internal global [3 x i32] zeroinitializer, align 4
`define TAG_g_OutData_comp_vpos `MEMORY_CONTROLLER_TAG_SIZE'd25
`define TAG_g_OutData_comp_vpos_a {`TAG_g_OutData_comp_vpos, 23'd0}
// @bit_set_mask = internal unnamed_addr constant [32 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128, i32 256, i32 512, i32 1024, i32 2048, i32 4096, i32 8192, i32 16384, i32 32768, ...
`define TAG_g_bit_set_mask `MEMORY_CONTROLLER_TAG_SIZE'd14
`define TAG_g_bit_set_mask_a {`TAG_g_bit_set_mask, 23'd0}
// @current_read_byte = internal unnamed_addr global i32 0, align 4
`define TAG_g_current_read_byte `MEMORY_CONTROLLER_TAG_SIZE'd16
`define TAG_g_current_read_byte_a {`TAG_g_current_read_byte, 23'd0}
// @main_result = internal unnamed_addr global i32 0, align 4
`define TAG_g_main_result `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_main_result_a {`TAG_g_main_result, 23'd0}
// @p_jinfo_MCUWidth = internal unnamed_addr global i32 0, align 4
`define TAG_g_p_jinfo_MCUWidth `MEMORY_CONTROLLER_TAG_SIZE'd10
`define TAG_g_p_jinfo_MCUWidth_a {`TAG_g_p_jinfo_MCUWidth, 23'd0}
// @p_jinfo_ac_dhuff_tbl_maxcode = internal global [2 x [36 x i32]] zeroinitializer, align 4
`define TAG_g_p_jinfo_ac_dhuff_tbl_maxcode `MEMORY_CONTROLLER_TAG_SIZE'd22
`define TAG_g_p_jinfo_ac_dhuff_tbl_maxcode_a {`TAG_g_p_jinfo_ac_dhuff_tbl_maxcode, 23'd0}
// @p_jinfo_ac_dhuff_tbl_mincode = internal global [2 x [36 x i32]] zeroinitializer, align 4
`define TAG_g_p_jinfo_ac_dhuff_tbl_mincode `MEMORY_CONTROLLER_TAG_SIZE'd23
`define TAG_g_p_jinfo_ac_dhuff_tbl_mincode_a {`TAG_g_p_jinfo_ac_dhuff_tbl_mincode, 23'd0}
// @p_jinfo_ac_dhuff_tbl_ml = internal unnamed_addr global [2 x i32] zeroinitializer, align 4
`define TAG_g_p_jinfo_ac_dhuff_tbl_ml `MEMORY_CONTROLLER_TAG_SIZE'd21
`define TAG_g_p_jinfo_ac_dhuff_tbl_ml_a {`TAG_g_p_jinfo_ac_dhuff_tbl_ml, 23'd0}
// @p_jinfo_ac_dhuff_tbl_valptr = internal global [2 x [36 x i32]] zeroinitializer, align 4
`define TAG_g_p_jinfo_ac_dhuff_tbl_valptr `MEMORY_CONTROLLER_TAG_SIZE'd24
`define TAG_g_p_jinfo_ac_dhuff_tbl_valptr_a {`TAG_g_p_jinfo_ac_dhuff_tbl_valptr, 23'd0}
// @p_jinfo_ac_xhuff_tbl_bits = internal global [2 x [36 x i32]] zeroinitializer, align 4
`define TAG_g_p_jinfo_ac_xhuff_tbl_bits `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_g_p_jinfo_ac_xhuff_tbl_bits_a {`TAG_g_p_jinfo_ac_xhuff_tbl_bits, 23'd0}
// @p_jinfo_ac_xhuff_tbl_huffval = internal global [2 x [257 x i32]] zeroinitializer, align 4
`define TAG_g_p_jinfo_ac_xhuff_tbl_huffval `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_g_p_jinfo_ac_xhuff_tbl_huffval_a {`TAG_g_p_jinfo_ac_xhuff_tbl_huffval, 23'd0}
// @p_jinfo_comps_info_dc_tbl_no = internal unnamed_addr global [3 x i8] zeroinitializer, align 1
`define TAG_g_p_jinfo_comps_info_dc_tbl_no `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_p_jinfo_comps_info_dc_tbl_no_a {`TAG_g_p_jinfo_comps_info_dc_tbl_no, 23'd0}
// @p_jinfo_dc_dhuff_tbl_maxcode = internal global [2 x [36 x i32]] zeroinitializer, align 4
`define TAG_g_p_jinfo_dc_dhuff_tbl_maxcode `MEMORY_CONTROLLER_TAG_SIZE'd18
`define TAG_g_p_jinfo_dc_dhuff_tbl_maxcode_a {`TAG_g_p_jinfo_dc_dhuff_tbl_maxcode, 23'd0}
// @p_jinfo_dc_dhuff_tbl_mincode = internal global [2 x [36 x i32]] zeroinitializer, align 4
`define TAG_g_p_jinfo_dc_dhuff_tbl_mincode `MEMORY_CONTROLLER_TAG_SIZE'd19
`define TAG_g_p_jinfo_dc_dhuff_tbl_mincode_a {`TAG_g_p_jinfo_dc_dhuff_tbl_mincode, 23'd0}
// @p_jinfo_dc_dhuff_tbl_ml = internal unnamed_addr global [2 x i32] zeroinitializer, align 4
`define TAG_g_p_jinfo_dc_dhuff_tbl_ml `MEMORY_CONTROLLER_TAG_SIZE'd17
`define TAG_g_p_jinfo_dc_dhuff_tbl_ml_a {`TAG_g_p_jinfo_dc_dhuff_tbl_ml, 23'd0}
// @p_jinfo_dc_dhuff_tbl_valptr = internal global [2 x [36 x i32]] zeroinitializer, align 4
`define TAG_g_p_jinfo_dc_dhuff_tbl_valptr `MEMORY_CONTROLLER_TAG_SIZE'd20
`define TAG_g_p_jinfo_dc_dhuff_tbl_valptr_a {`TAG_g_p_jinfo_dc_dhuff_tbl_valptr, 23'd0}
// @p_jinfo_dc_xhuff_tbl_bits = internal global [2 x [36 x i32]] zeroinitializer, align 4
`define TAG_g_p_jinfo_dc_xhuff_tbl_bits `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_g_p_jinfo_dc_xhuff_tbl_bits_a {`TAG_g_p_jinfo_dc_xhuff_tbl_bits, 23'd0}
// @p_jinfo_dc_xhuff_tbl_huffval = internal global [2 x [257 x i32]] zeroinitializer, align 4
`define TAG_g_p_jinfo_dc_xhuff_tbl_huffval `MEMORY_CONTROLLER_TAG_SIZE'd9
`define TAG_g_p_jinfo_dc_xhuff_tbl_huffval_a {`TAG_g_p_jinfo_dc_xhuff_tbl_huffval, 23'd0}
// @p_jinfo_image_height = internal unnamed_addr global i16 0, align 2
`define TAG_g_p_jinfo_image_height `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_p_jinfo_image_height_a {`TAG_g_p_jinfo_image_height, 23'd0}
// @p_jinfo_image_width = internal unnamed_addr global i16 0, align 2
`define TAG_g_p_jinfo_image_width `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_p_jinfo_image_width_a {`TAG_g_p_jinfo_image_width, 23'd0}
// @read_position = internal unnamed_addr global i32 -1, align 4
`define TAG_g_read_position `MEMORY_CONTROLLER_TAG_SIZE'd15
`define TAG_g_read_position_a {`TAG_g_read_position, 23'd0}
// @rgb_buf = internal global [4 x [3 x [64 x i32]]] zeroinitializer, align 4
`define TAG_g_rgb_buf `MEMORY_CONTROLLER_TAG_SIZE'd11
`define TAG_g_rgb_buf_a {`TAG_g_rgb_buf, 23'd0}
//   %HuffBuff.i.i = alloca [3 x [64 x i32]], align 4
`define TAG_main_0_HuffBuffii `MEMORY_CONTROLLER_TAG_SIZE'd29
`define TAG_main_0_HuffBuffii_a {`TAG_main_0_HuffBuffii, 23'd0}
//   %IDCTBuff.i.i = alloca [6 x [64 x i32]], align 4
`define TAG_main_0_IDCTBuffii `MEMORY_CONTROLLER_TAG_SIZE'd30
`define TAG_main_0_IDCTBuffii_a {`TAG_main_0_IDCTBuffii, 23'd0}
//   %QuantBuff.i.i.i = alloca [64 x i32], align 4
`define TAG_main_0_QuantBuffiii `MEMORY_CONTROLLER_TAG_SIZE'd28
`define TAG_main_0_QuantBuffiii_a {`TAG_main_0_QuantBuffiii, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [0:0] main_result_address_a;
reg [0:0] main_result_address_b;
reg main_result_write_enable_a;
reg main_result_write_enable_b;
reg [31:0] main_result_in_a;
reg [31:0] main_result_in_b;
wire [31:0] main_result_out_a;
wire [31:0] main_result_out_b;

// @main_result = internal unnamed_addr global i32 0, align 4
ram_dual_port main_result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_result_address_a ),
	.address_b( main_result_address_b ),
	.wren_a( main_result_write_enable_a ),
	.wren_b( main_result_write_enable_b ),
	.data_a( main_result_in_a ),
	.data_b( main_result_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_result_out_a ),
	.q_b( main_result_out_b )
);
defparam main_result.width_a = 32;
defparam main_result.width_b = 32;
defparam main_result.widthad_a = 1;
defparam main_result.widthad_b = 1;
defparam main_result.width_be_a = 1;
defparam main_result.width_be_b = 1;
defparam main_result.numwords_a = 1;
defparam main_result.numwords_b = 1;
defparam main_result.latency = ram_latency;
defparam main_result.init_file = "main_result.mif";

reg [0:0] p_jinfo_image_height_address_a;
reg [0:0] p_jinfo_image_height_address_b;
reg p_jinfo_image_height_write_enable_a;
reg p_jinfo_image_height_write_enable_b;
reg [15:0] p_jinfo_image_height_in_a;
reg [15:0] p_jinfo_image_height_in_b;
wire [15:0] p_jinfo_image_height_out_a;
wire [15:0] p_jinfo_image_height_out_b;

// @p_jinfo_image_height = internal unnamed_addr global i16 0, align 2
ram_dual_port p_jinfo_image_height (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_image_height_address_a ),
	.address_b( p_jinfo_image_height_address_b ),
	.wren_a( p_jinfo_image_height_write_enable_a ),
	.wren_b( p_jinfo_image_height_write_enable_b ),
	.data_a( p_jinfo_image_height_in_a ),
	.data_b( p_jinfo_image_height_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_image_height_out_a ),
	.q_b( p_jinfo_image_height_out_b )
);
defparam p_jinfo_image_height.width_a = 16;
defparam p_jinfo_image_height.width_b = 16;
defparam p_jinfo_image_height.widthad_a = 1;
defparam p_jinfo_image_height.widthad_b = 1;
defparam p_jinfo_image_height.width_be_a = 1;
defparam p_jinfo_image_height.width_be_b = 1;
defparam p_jinfo_image_height.numwords_a = 1;
defparam p_jinfo_image_height.numwords_b = 1;
defparam p_jinfo_image_height.latency = ram_latency;
defparam p_jinfo_image_height.init_file = "p_jinfo_image_height.mif";

reg [0:0] p_jinfo_image_width_address_a;
reg [0:0] p_jinfo_image_width_address_b;
reg p_jinfo_image_width_write_enable_a;
reg p_jinfo_image_width_write_enable_b;
reg [15:0] p_jinfo_image_width_in_a;
reg [15:0] p_jinfo_image_width_in_b;
wire [15:0] p_jinfo_image_width_out_a;
wire [15:0] p_jinfo_image_width_out_b;

// @p_jinfo_image_width = internal unnamed_addr global i16 0, align 2
ram_dual_port p_jinfo_image_width (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_image_width_address_a ),
	.address_b( p_jinfo_image_width_address_b ),
	.wren_a( p_jinfo_image_width_write_enable_a ),
	.wren_b( p_jinfo_image_width_write_enable_b ),
	.data_a( p_jinfo_image_width_in_a ),
	.data_b( p_jinfo_image_width_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_image_width_out_a ),
	.q_b( p_jinfo_image_width_out_b )
);
defparam p_jinfo_image_width.width_a = 16;
defparam p_jinfo_image_width.width_b = 16;
defparam p_jinfo_image_width.widthad_a = 1;
defparam p_jinfo_image_width.widthad_b = 1;
defparam p_jinfo_image_width.width_be_a = 1;
defparam p_jinfo_image_width.width_be_b = 1;
defparam p_jinfo_image_width.numwords_a = 1;
defparam p_jinfo_image_width.numwords_b = 1;
defparam p_jinfo_image_width.latency = ram_latency;
defparam p_jinfo_image_width.init_file = "p_jinfo_image_width.mif";

reg [1:0] p_jinfo_comps_info_dc_tbl_no_address_a;
reg [1:0] p_jinfo_comps_info_dc_tbl_no_address_b;
reg p_jinfo_comps_info_dc_tbl_no_write_enable_a;
reg p_jinfo_comps_info_dc_tbl_no_write_enable_b;
reg [7:0] p_jinfo_comps_info_dc_tbl_no_in_a;
reg [7:0] p_jinfo_comps_info_dc_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_a;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_b;

// @p_jinfo_comps_info_dc_tbl_no = internal unnamed_addr global [3 x i8] zeroinitializer, align 1
ram_dual_port p_jinfo_comps_info_dc_tbl_no (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_comps_info_dc_tbl_no_address_a ),
	.address_b( p_jinfo_comps_info_dc_tbl_no_address_b ),
	.wren_a( p_jinfo_comps_info_dc_tbl_no_write_enable_a ),
	.wren_b( p_jinfo_comps_info_dc_tbl_no_write_enable_b ),
	.data_a( p_jinfo_comps_info_dc_tbl_no_in_a ),
	.data_b( p_jinfo_comps_info_dc_tbl_no_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_comps_info_dc_tbl_no_out_a ),
	.q_b( p_jinfo_comps_info_dc_tbl_no_out_b )
);
defparam p_jinfo_comps_info_dc_tbl_no.width_a = 8;
defparam p_jinfo_comps_info_dc_tbl_no.width_b = 8;
defparam p_jinfo_comps_info_dc_tbl_no.widthad_a = 2;
defparam p_jinfo_comps_info_dc_tbl_no.widthad_b = 2;
defparam p_jinfo_comps_info_dc_tbl_no.width_be_a = 1;
defparam p_jinfo_comps_info_dc_tbl_no.width_be_b = 1;
defparam p_jinfo_comps_info_dc_tbl_no.numwords_a = 3;
defparam p_jinfo_comps_info_dc_tbl_no.numwords_b = 3;
defparam p_jinfo_comps_info_dc_tbl_no.latency = ram_latency;
defparam p_jinfo_comps_info_dc_tbl_no.init_file = "p_jinfo_comps_info_dc_tbl_no.mif";

reg [6:0] p_jinfo_ac_xhuff_tbl_bits_address_a;
reg [6:0] p_jinfo_ac_xhuff_tbl_bits_address_b;
reg p_jinfo_ac_xhuff_tbl_bits_write_enable_a;
reg p_jinfo_ac_xhuff_tbl_bits_write_enable_b;
reg [31:0] p_jinfo_ac_xhuff_tbl_bits_in_a;
reg [31:0] p_jinfo_ac_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_b;

// @p_jinfo_ac_xhuff_tbl_bits = internal global [2 x [36 x i32]] zeroinitializer, align 4
ram_dual_port p_jinfo_ac_xhuff_tbl_bits (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_ac_xhuff_tbl_bits_address_a ),
	.address_b( p_jinfo_ac_xhuff_tbl_bits_address_b ),
	.wren_a( p_jinfo_ac_xhuff_tbl_bits_write_enable_a ),
	.wren_b( p_jinfo_ac_xhuff_tbl_bits_write_enable_b ),
	.data_a( p_jinfo_ac_xhuff_tbl_bits_in_a ),
	.data_b( p_jinfo_ac_xhuff_tbl_bits_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_ac_xhuff_tbl_bits_out_a ),
	.q_b( p_jinfo_ac_xhuff_tbl_bits_out_b )
);
defparam p_jinfo_ac_xhuff_tbl_bits.width_a = 32;
defparam p_jinfo_ac_xhuff_tbl_bits.width_b = 32;
defparam p_jinfo_ac_xhuff_tbl_bits.widthad_a = 7;
defparam p_jinfo_ac_xhuff_tbl_bits.widthad_b = 7;
defparam p_jinfo_ac_xhuff_tbl_bits.width_be_a = 1;
defparam p_jinfo_ac_xhuff_tbl_bits.width_be_b = 1;
defparam p_jinfo_ac_xhuff_tbl_bits.numwords_a = 72;
defparam p_jinfo_ac_xhuff_tbl_bits.numwords_b = 72;
defparam p_jinfo_ac_xhuff_tbl_bits.latency = ram_latency;
defparam p_jinfo_ac_xhuff_tbl_bits.init_file = "p_jinfo_ac_xhuff_tbl_bits.mif";

reg [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_a;
reg [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_b;
reg p_jinfo_ac_xhuff_tbl_huffval_write_enable_a;
reg p_jinfo_ac_xhuff_tbl_huffval_write_enable_b;
reg [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_a;
reg [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_b;

// @p_jinfo_ac_xhuff_tbl_huffval = internal global [2 x [257 x i32]] zeroinitializer, align 4
ram_dual_port p_jinfo_ac_xhuff_tbl_huffval (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_ac_xhuff_tbl_huffval_address_a ),
	.address_b( p_jinfo_ac_xhuff_tbl_huffval_address_b ),
	.wren_a( p_jinfo_ac_xhuff_tbl_huffval_write_enable_a ),
	.wren_b( p_jinfo_ac_xhuff_tbl_huffval_write_enable_b ),
	.data_a( p_jinfo_ac_xhuff_tbl_huffval_in_a ),
	.data_b( p_jinfo_ac_xhuff_tbl_huffval_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_ac_xhuff_tbl_huffval_out_a ),
	.q_b( p_jinfo_ac_xhuff_tbl_huffval_out_b )
);
defparam p_jinfo_ac_xhuff_tbl_huffval.width_a = 32;
defparam p_jinfo_ac_xhuff_tbl_huffval.width_b = 32;
defparam p_jinfo_ac_xhuff_tbl_huffval.widthad_a = 10;
defparam p_jinfo_ac_xhuff_tbl_huffval.widthad_b = 10;
defparam p_jinfo_ac_xhuff_tbl_huffval.width_be_a = 1;
defparam p_jinfo_ac_xhuff_tbl_huffval.width_be_b = 1;
defparam p_jinfo_ac_xhuff_tbl_huffval.numwords_a = 514;
defparam p_jinfo_ac_xhuff_tbl_huffval.numwords_b = 514;
defparam p_jinfo_ac_xhuff_tbl_huffval.latency = ram_latency;
defparam p_jinfo_ac_xhuff_tbl_huffval.init_file = "p_jinfo_ac_xhuff_tbl_huffval.mif";

reg [6:0] p_jinfo_dc_xhuff_tbl_bits_address_a;
reg [6:0] p_jinfo_dc_xhuff_tbl_bits_address_b;
reg p_jinfo_dc_xhuff_tbl_bits_write_enable_a;
reg p_jinfo_dc_xhuff_tbl_bits_write_enable_b;
reg [31:0] p_jinfo_dc_xhuff_tbl_bits_in_a;
reg [31:0] p_jinfo_dc_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_b;

// @p_jinfo_dc_xhuff_tbl_bits = internal global [2 x [36 x i32]] zeroinitializer, align 4
ram_dual_port p_jinfo_dc_xhuff_tbl_bits (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_dc_xhuff_tbl_bits_address_a ),
	.address_b( p_jinfo_dc_xhuff_tbl_bits_address_b ),
	.wren_a( p_jinfo_dc_xhuff_tbl_bits_write_enable_a ),
	.wren_b( p_jinfo_dc_xhuff_tbl_bits_write_enable_b ),
	.data_a( p_jinfo_dc_xhuff_tbl_bits_in_a ),
	.data_b( p_jinfo_dc_xhuff_tbl_bits_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_dc_xhuff_tbl_bits_out_a ),
	.q_b( p_jinfo_dc_xhuff_tbl_bits_out_b )
);
defparam p_jinfo_dc_xhuff_tbl_bits.width_a = 32;
defparam p_jinfo_dc_xhuff_tbl_bits.width_b = 32;
defparam p_jinfo_dc_xhuff_tbl_bits.widthad_a = 7;
defparam p_jinfo_dc_xhuff_tbl_bits.widthad_b = 7;
defparam p_jinfo_dc_xhuff_tbl_bits.width_be_a = 1;
defparam p_jinfo_dc_xhuff_tbl_bits.width_be_b = 1;
defparam p_jinfo_dc_xhuff_tbl_bits.numwords_a = 72;
defparam p_jinfo_dc_xhuff_tbl_bits.numwords_b = 72;
defparam p_jinfo_dc_xhuff_tbl_bits.latency = ram_latency;
defparam p_jinfo_dc_xhuff_tbl_bits.init_file = "p_jinfo_dc_xhuff_tbl_bits.mif";

reg [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_a;
reg [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_b;
reg p_jinfo_dc_xhuff_tbl_huffval_write_enable_a;
reg p_jinfo_dc_xhuff_tbl_huffval_write_enable_b;
reg [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_a;
reg [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_b;

// @p_jinfo_dc_xhuff_tbl_huffval = internal global [2 x [257 x i32]] zeroinitializer, align 4
ram_dual_port p_jinfo_dc_xhuff_tbl_huffval (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_dc_xhuff_tbl_huffval_address_a ),
	.address_b( p_jinfo_dc_xhuff_tbl_huffval_address_b ),
	.wren_a( p_jinfo_dc_xhuff_tbl_huffval_write_enable_a ),
	.wren_b( p_jinfo_dc_xhuff_tbl_huffval_write_enable_b ),
	.data_a( p_jinfo_dc_xhuff_tbl_huffval_in_a ),
	.data_b( p_jinfo_dc_xhuff_tbl_huffval_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_dc_xhuff_tbl_huffval_out_a ),
	.q_b( p_jinfo_dc_xhuff_tbl_huffval_out_b )
);
defparam p_jinfo_dc_xhuff_tbl_huffval.width_a = 32;
defparam p_jinfo_dc_xhuff_tbl_huffval.width_b = 32;
defparam p_jinfo_dc_xhuff_tbl_huffval.widthad_a = 10;
defparam p_jinfo_dc_xhuff_tbl_huffval.widthad_b = 10;
defparam p_jinfo_dc_xhuff_tbl_huffval.width_be_a = 1;
defparam p_jinfo_dc_xhuff_tbl_huffval.width_be_b = 1;
defparam p_jinfo_dc_xhuff_tbl_huffval.numwords_a = 514;
defparam p_jinfo_dc_xhuff_tbl_huffval.numwords_b = 514;
defparam p_jinfo_dc_xhuff_tbl_huffval.latency = ram_latency;
defparam p_jinfo_dc_xhuff_tbl_huffval.init_file = "p_jinfo_dc_xhuff_tbl_huffval.mif";

reg [0:0] p_jinfo_MCUWidth_address_a;
reg [0:0] p_jinfo_MCUWidth_address_b;
reg p_jinfo_MCUWidth_write_enable_a;
reg p_jinfo_MCUWidth_write_enable_b;
reg [31:0] p_jinfo_MCUWidth_in_a;
reg [31:0] p_jinfo_MCUWidth_in_b;
wire [31:0] p_jinfo_MCUWidth_out_a;
wire [31:0] p_jinfo_MCUWidth_out_b;

// @p_jinfo_MCUWidth = internal unnamed_addr global i32 0, align 4
ram_dual_port p_jinfo_MCUWidth (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_MCUWidth_address_a ),
	.address_b( p_jinfo_MCUWidth_address_b ),
	.wren_a( p_jinfo_MCUWidth_write_enable_a ),
	.wren_b( p_jinfo_MCUWidth_write_enable_b ),
	.data_a( p_jinfo_MCUWidth_in_a ),
	.data_b( p_jinfo_MCUWidth_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_MCUWidth_out_a ),
	.q_b( p_jinfo_MCUWidth_out_b )
);
defparam p_jinfo_MCUWidth.width_a = 32;
defparam p_jinfo_MCUWidth.width_b = 32;
defparam p_jinfo_MCUWidth.widthad_a = 1;
defparam p_jinfo_MCUWidth.widthad_b = 1;
defparam p_jinfo_MCUWidth.width_be_a = 1;
defparam p_jinfo_MCUWidth.width_be_b = 1;
defparam p_jinfo_MCUWidth.numwords_a = 1;
defparam p_jinfo_MCUWidth.numwords_b = 1;
defparam p_jinfo_MCUWidth.latency = ram_latency;
defparam p_jinfo_MCUWidth.init_file = "p_jinfo_MCUWidth.mif";

reg [9:0] rgb_buf_address_a;
reg [9:0] rgb_buf_address_b;
reg rgb_buf_write_enable_a;
reg rgb_buf_write_enable_b;
reg [31:0] rgb_buf_in_a;
reg [31:0] rgb_buf_in_b;
wire [31:0] rgb_buf_out_a;
wire [31:0] rgb_buf_out_b;

// @rgb_buf = internal global [4 x [3 x [64 x i32]]] zeroinitializer, align 4
ram_dual_port rgb_buf (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rgb_buf_address_a ),
	.address_b( rgb_buf_address_b ),
	.wren_a( rgb_buf_write_enable_a ),
	.wren_b( rgb_buf_write_enable_b ),
	.data_a( rgb_buf_in_a ),
	.data_b( rgb_buf_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( rgb_buf_out_a ),
	.q_b( rgb_buf_out_b )
);
defparam rgb_buf.width_a = 32;
defparam rgb_buf.width_b = 32;
defparam rgb_buf.widthad_a = 10;
defparam rgb_buf.widthad_b = 10;
defparam rgb_buf.width_be_a = 1;
defparam rgb_buf.width_be_b = 1;
defparam rgb_buf.numwords_a = 768;
defparam rgb_buf.numwords_b = 768;
defparam rgb_buf.latency = ram_latency;
defparam rgb_buf.init_file = "rgb_buf.mif";

reg [0:0] CurHuffReadBuf_address_a;
reg [0:0] CurHuffReadBuf_address_b;
reg CurHuffReadBuf_write_enable_a;
reg CurHuffReadBuf_write_enable_b;
reg [31:0] CurHuffReadBuf_in_a;
reg [31:0] CurHuffReadBuf_in_b;
wire [31:0] CurHuffReadBuf_out_a;
wire [31:0] CurHuffReadBuf_out_b;

// @CurHuffReadBuf = internal unnamed_addr global i8* null, align 4
ram_dual_port CurHuffReadBuf (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( CurHuffReadBuf_address_a ),
	.address_b( CurHuffReadBuf_address_b ),
	.wren_a( CurHuffReadBuf_write_enable_a ),
	.wren_b( CurHuffReadBuf_write_enable_b ),
	.data_a( CurHuffReadBuf_in_a ),
	.data_b( CurHuffReadBuf_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( CurHuffReadBuf_out_a ),
	.q_b( CurHuffReadBuf_out_b )
);
defparam CurHuffReadBuf.width_a = 32;
defparam CurHuffReadBuf.width_b = 32;
defparam CurHuffReadBuf.widthad_a = 1;
defparam CurHuffReadBuf.widthad_b = 1;
defparam CurHuffReadBuf.width_be_a = 1;
defparam CurHuffReadBuf.width_be_b = 1;
defparam CurHuffReadBuf.numwords_a = 1;
defparam CurHuffReadBuf.numwords_b = 1;
defparam CurHuffReadBuf.latency = ram_latency;
defparam CurHuffReadBuf.init_file = "CurHuffReadBuf.mif";

reg [13:0] OutData_comp_buf_address_a;
reg [13:0] OutData_comp_buf_address_b;
reg OutData_comp_buf_write_enable_a;
reg OutData_comp_buf_write_enable_b;
reg [7:0] OutData_comp_buf_in_a;
reg [7:0] OutData_comp_buf_in_b;
wire [7:0] OutData_comp_buf_out_a;
wire [7:0] OutData_comp_buf_out_b;

// @OutData_comp_buf = internal global [3 x [5310 x i8]] zeroinitializer, align 1
ram_dual_port OutData_comp_buf (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( OutData_comp_buf_address_a ),
	.address_b( OutData_comp_buf_address_b ),
	.wren_a( OutData_comp_buf_write_enable_a ),
	.wren_b( OutData_comp_buf_write_enable_b ),
	.data_a( OutData_comp_buf_in_a ),
	.data_b( OutData_comp_buf_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( OutData_comp_buf_out_a ),
	.q_b( OutData_comp_buf_out_b )
);
defparam OutData_comp_buf.width_a = 8;
defparam OutData_comp_buf.width_b = 8;
defparam OutData_comp_buf.widthad_a = 14;
defparam OutData_comp_buf.widthad_b = 14;
defparam OutData_comp_buf.width_be_a = 1;
defparam OutData_comp_buf.width_be_b = 1;
defparam OutData_comp_buf.numwords_a = 15930;
defparam OutData_comp_buf.numwords_b = 15930;
defparam OutData_comp_buf.latency = ram_latency;
defparam OutData_comp_buf.init_file = "OutData_comp_buf.mif";

reg [4:0] bit_set_mask_address_a;
reg [4:0] bit_set_mask_address_b;
reg bit_set_mask_write_enable_a;
reg bit_set_mask_write_enable_b;
reg [31:0] bit_set_mask_in_a;
reg [31:0] bit_set_mask_in_b;
wire [31:0] bit_set_mask_out_a;
wire [31:0] bit_set_mask_out_b;

// @bit_set_mask = internal unnamed_addr constant [32 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128, i32 256, i32 512, i32 1024, i32 2048, i32 4096, i32 8192, i32 16384, i32 32768, ...
rom_dual_port bit_set_mask (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( bit_set_mask_address_a ),
	.address_b( bit_set_mask_address_b ),
	.q_a( bit_set_mask_out_a ),
	.q_b( bit_set_mask_out_b )
);
defparam bit_set_mask.width_a = 32;
defparam bit_set_mask.width_b = 32;
defparam bit_set_mask.widthad_a = 5;
defparam bit_set_mask.widthad_b = 5;
defparam bit_set_mask.numwords_a = 32;
defparam bit_set_mask.numwords_b = 32;
defparam bit_set_mask.latency = ram_latency;
defparam bit_set_mask.init_file = "bit_set_mask.mif";

reg [0:0] read_position_address_a;
reg [0:0] read_position_address_b;
reg read_position_write_enable_a;
reg read_position_write_enable_b;
reg [31:0] read_position_in_a;
reg [31:0] read_position_in_b;
wire [31:0] read_position_out_a;
wire [31:0] read_position_out_b;

// @read_position = internal unnamed_addr global i32 -1, align 4
ram_dual_port read_position (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( read_position_address_a ),
	.address_b( read_position_address_b ),
	.wren_a( read_position_write_enable_a ),
	.wren_b( read_position_write_enable_b ),
	.data_a( read_position_in_a ),
	.data_b( read_position_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( read_position_out_a ),
	.q_b( read_position_out_b )
);
defparam read_position.width_a = 32;
defparam read_position.width_b = 32;
defparam read_position.widthad_a = 1;
defparam read_position.widthad_b = 1;
defparam read_position.width_be_a = 1;
defparam read_position.width_be_b = 1;
defparam read_position.numwords_a = 1;
defparam read_position.numwords_b = 1;
defparam read_position.latency = ram_latency;
defparam read_position.init_file = "read_position.mif";

reg [0:0] current_read_byte_address_a;
reg [0:0] current_read_byte_address_b;
reg current_read_byte_write_enable_a;
reg current_read_byte_write_enable_b;
reg [31:0] current_read_byte_in_a;
reg [31:0] current_read_byte_in_b;
wire [31:0] current_read_byte_out_a;
wire [31:0] current_read_byte_out_b;

// @current_read_byte = internal unnamed_addr global i32 0, align 4
ram_dual_port current_read_byte (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( current_read_byte_address_a ),
	.address_b( current_read_byte_address_b ),
	.wren_a( current_read_byte_write_enable_a ),
	.wren_b( current_read_byte_write_enable_b ),
	.data_a( current_read_byte_in_a ),
	.data_b( current_read_byte_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( current_read_byte_out_a ),
	.q_b( current_read_byte_out_b )
);
defparam current_read_byte.width_a = 32;
defparam current_read_byte.width_b = 32;
defparam current_read_byte.widthad_a = 1;
defparam current_read_byte.widthad_b = 1;
defparam current_read_byte.width_be_a = 1;
defparam current_read_byte.width_be_b = 1;
defparam current_read_byte.numwords_a = 1;
defparam current_read_byte.numwords_b = 1;
defparam current_read_byte.latency = ram_latency;
defparam current_read_byte.init_file = "current_read_byte.mif";

reg [0:0] p_jinfo_dc_dhuff_tbl_ml_address_a;
reg [0:0] p_jinfo_dc_dhuff_tbl_ml_address_b;
reg p_jinfo_dc_dhuff_tbl_ml_write_enable_a;
reg p_jinfo_dc_dhuff_tbl_ml_write_enable_b;
reg [31:0] p_jinfo_dc_dhuff_tbl_ml_in_a;
reg [31:0] p_jinfo_dc_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_b;

// @p_jinfo_dc_dhuff_tbl_ml = internal unnamed_addr global [2 x i32] zeroinitializer, align 4
ram_dual_port p_jinfo_dc_dhuff_tbl_ml (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_dc_dhuff_tbl_ml_address_a ),
	.address_b( p_jinfo_dc_dhuff_tbl_ml_address_b ),
	.wren_a( p_jinfo_dc_dhuff_tbl_ml_write_enable_a ),
	.wren_b( p_jinfo_dc_dhuff_tbl_ml_write_enable_b ),
	.data_a( p_jinfo_dc_dhuff_tbl_ml_in_a ),
	.data_b( p_jinfo_dc_dhuff_tbl_ml_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_dc_dhuff_tbl_ml_out_a ),
	.q_b( p_jinfo_dc_dhuff_tbl_ml_out_b )
);
defparam p_jinfo_dc_dhuff_tbl_ml.width_a = 32;
defparam p_jinfo_dc_dhuff_tbl_ml.width_b = 32;
defparam p_jinfo_dc_dhuff_tbl_ml.widthad_a = 1;
defparam p_jinfo_dc_dhuff_tbl_ml.widthad_b = 1;
defparam p_jinfo_dc_dhuff_tbl_ml.width_be_a = 1;
defparam p_jinfo_dc_dhuff_tbl_ml.width_be_b = 1;
defparam p_jinfo_dc_dhuff_tbl_ml.numwords_a = 2;
defparam p_jinfo_dc_dhuff_tbl_ml.numwords_b = 2;
defparam p_jinfo_dc_dhuff_tbl_ml.latency = ram_latency;
defparam p_jinfo_dc_dhuff_tbl_ml.init_file = "p_jinfo_dc_dhuff_tbl_ml.mif";

reg [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_a;
reg [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_b;
reg p_jinfo_dc_dhuff_tbl_maxcode_write_enable_a;
reg p_jinfo_dc_dhuff_tbl_maxcode_write_enable_b;
reg [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_a;
reg [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_b;

// @p_jinfo_dc_dhuff_tbl_maxcode = internal global [2 x [36 x i32]] zeroinitializer, align 4
ram_dual_port p_jinfo_dc_dhuff_tbl_maxcode (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_dc_dhuff_tbl_maxcode_address_a ),
	.address_b( p_jinfo_dc_dhuff_tbl_maxcode_address_b ),
	.wren_a( p_jinfo_dc_dhuff_tbl_maxcode_write_enable_a ),
	.wren_b( p_jinfo_dc_dhuff_tbl_maxcode_write_enable_b ),
	.data_a( p_jinfo_dc_dhuff_tbl_maxcode_in_a ),
	.data_b( p_jinfo_dc_dhuff_tbl_maxcode_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_dc_dhuff_tbl_maxcode_out_a ),
	.q_b( p_jinfo_dc_dhuff_tbl_maxcode_out_b )
);
defparam p_jinfo_dc_dhuff_tbl_maxcode.width_a = 32;
defparam p_jinfo_dc_dhuff_tbl_maxcode.width_b = 32;
defparam p_jinfo_dc_dhuff_tbl_maxcode.widthad_a = 7;
defparam p_jinfo_dc_dhuff_tbl_maxcode.widthad_b = 7;
defparam p_jinfo_dc_dhuff_tbl_maxcode.width_be_a = 1;
defparam p_jinfo_dc_dhuff_tbl_maxcode.width_be_b = 1;
defparam p_jinfo_dc_dhuff_tbl_maxcode.numwords_a = 72;
defparam p_jinfo_dc_dhuff_tbl_maxcode.numwords_b = 72;
defparam p_jinfo_dc_dhuff_tbl_maxcode.latency = ram_latency;
defparam p_jinfo_dc_dhuff_tbl_maxcode.init_file = "p_jinfo_dc_dhuff_tbl_maxcode.mif";

reg [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_a;
reg [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_b;
reg p_jinfo_dc_dhuff_tbl_mincode_write_enable_a;
reg p_jinfo_dc_dhuff_tbl_mincode_write_enable_b;
reg [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_a;
reg [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_b;

// @p_jinfo_dc_dhuff_tbl_mincode = internal global [2 x [36 x i32]] zeroinitializer, align 4
ram_dual_port p_jinfo_dc_dhuff_tbl_mincode (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_dc_dhuff_tbl_mincode_address_a ),
	.address_b( p_jinfo_dc_dhuff_tbl_mincode_address_b ),
	.wren_a( p_jinfo_dc_dhuff_tbl_mincode_write_enable_a ),
	.wren_b( p_jinfo_dc_dhuff_tbl_mincode_write_enable_b ),
	.data_a( p_jinfo_dc_dhuff_tbl_mincode_in_a ),
	.data_b( p_jinfo_dc_dhuff_tbl_mincode_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_dc_dhuff_tbl_mincode_out_a ),
	.q_b( p_jinfo_dc_dhuff_tbl_mincode_out_b )
);
defparam p_jinfo_dc_dhuff_tbl_mincode.width_a = 32;
defparam p_jinfo_dc_dhuff_tbl_mincode.width_b = 32;
defparam p_jinfo_dc_dhuff_tbl_mincode.widthad_a = 7;
defparam p_jinfo_dc_dhuff_tbl_mincode.widthad_b = 7;
defparam p_jinfo_dc_dhuff_tbl_mincode.width_be_a = 1;
defparam p_jinfo_dc_dhuff_tbl_mincode.width_be_b = 1;
defparam p_jinfo_dc_dhuff_tbl_mincode.numwords_a = 72;
defparam p_jinfo_dc_dhuff_tbl_mincode.numwords_b = 72;
defparam p_jinfo_dc_dhuff_tbl_mincode.latency = ram_latency;
defparam p_jinfo_dc_dhuff_tbl_mincode.init_file = "p_jinfo_dc_dhuff_tbl_mincode.mif";

reg [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_a;
reg [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_b;
reg p_jinfo_dc_dhuff_tbl_valptr_write_enable_a;
reg p_jinfo_dc_dhuff_tbl_valptr_write_enable_b;
reg [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_a;
reg [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_b;

// @p_jinfo_dc_dhuff_tbl_valptr = internal global [2 x [36 x i32]] zeroinitializer, align 4
ram_dual_port p_jinfo_dc_dhuff_tbl_valptr (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_dc_dhuff_tbl_valptr_address_a ),
	.address_b( p_jinfo_dc_dhuff_tbl_valptr_address_b ),
	.wren_a( p_jinfo_dc_dhuff_tbl_valptr_write_enable_a ),
	.wren_b( p_jinfo_dc_dhuff_tbl_valptr_write_enable_b ),
	.data_a( p_jinfo_dc_dhuff_tbl_valptr_in_a ),
	.data_b( p_jinfo_dc_dhuff_tbl_valptr_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_dc_dhuff_tbl_valptr_out_a ),
	.q_b( p_jinfo_dc_dhuff_tbl_valptr_out_b )
);
defparam p_jinfo_dc_dhuff_tbl_valptr.width_a = 32;
defparam p_jinfo_dc_dhuff_tbl_valptr.width_b = 32;
defparam p_jinfo_dc_dhuff_tbl_valptr.widthad_a = 7;
defparam p_jinfo_dc_dhuff_tbl_valptr.widthad_b = 7;
defparam p_jinfo_dc_dhuff_tbl_valptr.width_be_a = 1;
defparam p_jinfo_dc_dhuff_tbl_valptr.width_be_b = 1;
defparam p_jinfo_dc_dhuff_tbl_valptr.numwords_a = 72;
defparam p_jinfo_dc_dhuff_tbl_valptr.numwords_b = 72;
defparam p_jinfo_dc_dhuff_tbl_valptr.latency = ram_latency;
defparam p_jinfo_dc_dhuff_tbl_valptr.init_file = "p_jinfo_dc_dhuff_tbl_valptr.mif";

reg [0:0] p_jinfo_ac_dhuff_tbl_ml_address_a;
reg [0:0] p_jinfo_ac_dhuff_tbl_ml_address_b;
reg p_jinfo_ac_dhuff_tbl_ml_write_enable_a;
reg p_jinfo_ac_dhuff_tbl_ml_write_enable_b;
reg [31:0] p_jinfo_ac_dhuff_tbl_ml_in_a;
reg [31:0] p_jinfo_ac_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_b;

// @p_jinfo_ac_dhuff_tbl_ml = internal unnamed_addr global [2 x i32] zeroinitializer, align 4
ram_dual_port p_jinfo_ac_dhuff_tbl_ml (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_ac_dhuff_tbl_ml_address_a ),
	.address_b( p_jinfo_ac_dhuff_tbl_ml_address_b ),
	.wren_a( p_jinfo_ac_dhuff_tbl_ml_write_enable_a ),
	.wren_b( p_jinfo_ac_dhuff_tbl_ml_write_enable_b ),
	.data_a( p_jinfo_ac_dhuff_tbl_ml_in_a ),
	.data_b( p_jinfo_ac_dhuff_tbl_ml_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_ac_dhuff_tbl_ml_out_a ),
	.q_b( p_jinfo_ac_dhuff_tbl_ml_out_b )
);
defparam p_jinfo_ac_dhuff_tbl_ml.width_a = 32;
defparam p_jinfo_ac_dhuff_tbl_ml.width_b = 32;
defparam p_jinfo_ac_dhuff_tbl_ml.widthad_a = 1;
defparam p_jinfo_ac_dhuff_tbl_ml.widthad_b = 1;
defparam p_jinfo_ac_dhuff_tbl_ml.width_be_a = 1;
defparam p_jinfo_ac_dhuff_tbl_ml.width_be_b = 1;
defparam p_jinfo_ac_dhuff_tbl_ml.numwords_a = 2;
defparam p_jinfo_ac_dhuff_tbl_ml.numwords_b = 2;
defparam p_jinfo_ac_dhuff_tbl_ml.latency = ram_latency;
defparam p_jinfo_ac_dhuff_tbl_ml.init_file = "p_jinfo_ac_dhuff_tbl_ml.mif";

reg [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_a;
reg [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_b;
reg p_jinfo_ac_dhuff_tbl_maxcode_write_enable_a;
reg p_jinfo_ac_dhuff_tbl_maxcode_write_enable_b;
reg [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_a;
reg [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_b;

// @p_jinfo_ac_dhuff_tbl_maxcode = internal global [2 x [36 x i32]] zeroinitializer, align 4
ram_dual_port p_jinfo_ac_dhuff_tbl_maxcode (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_ac_dhuff_tbl_maxcode_address_a ),
	.address_b( p_jinfo_ac_dhuff_tbl_maxcode_address_b ),
	.wren_a( p_jinfo_ac_dhuff_tbl_maxcode_write_enable_a ),
	.wren_b( p_jinfo_ac_dhuff_tbl_maxcode_write_enable_b ),
	.data_a( p_jinfo_ac_dhuff_tbl_maxcode_in_a ),
	.data_b( p_jinfo_ac_dhuff_tbl_maxcode_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_ac_dhuff_tbl_maxcode_out_a ),
	.q_b( p_jinfo_ac_dhuff_tbl_maxcode_out_b )
);
defparam p_jinfo_ac_dhuff_tbl_maxcode.width_a = 32;
defparam p_jinfo_ac_dhuff_tbl_maxcode.width_b = 32;
defparam p_jinfo_ac_dhuff_tbl_maxcode.widthad_a = 7;
defparam p_jinfo_ac_dhuff_tbl_maxcode.widthad_b = 7;
defparam p_jinfo_ac_dhuff_tbl_maxcode.width_be_a = 1;
defparam p_jinfo_ac_dhuff_tbl_maxcode.width_be_b = 1;
defparam p_jinfo_ac_dhuff_tbl_maxcode.numwords_a = 72;
defparam p_jinfo_ac_dhuff_tbl_maxcode.numwords_b = 72;
defparam p_jinfo_ac_dhuff_tbl_maxcode.latency = ram_latency;
defparam p_jinfo_ac_dhuff_tbl_maxcode.init_file = "p_jinfo_ac_dhuff_tbl_maxcode.mif";

reg [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_a;
reg [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_b;
reg p_jinfo_ac_dhuff_tbl_mincode_write_enable_a;
reg p_jinfo_ac_dhuff_tbl_mincode_write_enable_b;
reg [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_a;
reg [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_b;

// @p_jinfo_ac_dhuff_tbl_mincode = internal global [2 x [36 x i32]] zeroinitializer, align 4
ram_dual_port p_jinfo_ac_dhuff_tbl_mincode (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_ac_dhuff_tbl_mincode_address_a ),
	.address_b( p_jinfo_ac_dhuff_tbl_mincode_address_b ),
	.wren_a( p_jinfo_ac_dhuff_tbl_mincode_write_enable_a ),
	.wren_b( p_jinfo_ac_dhuff_tbl_mincode_write_enable_b ),
	.data_a( p_jinfo_ac_dhuff_tbl_mincode_in_a ),
	.data_b( p_jinfo_ac_dhuff_tbl_mincode_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_ac_dhuff_tbl_mincode_out_a ),
	.q_b( p_jinfo_ac_dhuff_tbl_mincode_out_b )
);
defparam p_jinfo_ac_dhuff_tbl_mincode.width_a = 32;
defparam p_jinfo_ac_dhuff_tbl_mincode.width_b = 32;
defparam p_jinfo_ac_dhuff_tbl_mincode.widthad_a = 7;
defparam p_jinfo_ac_dhuff_tbl_mincode.widthad_b = 7;
defparam p_jinfo_ac_dhuff_tbl_mincode.width_be_a = 1;
defparam p_jinfo_ac_dhuff_tbl_mincode.width_be_b = 1;
defparam p_jinfo_ac_dhuff_tbl_mincode.numwords_a = 72;
defparam p_jinfo_ac_dhuff_tbl_mincode.numwords_b = 72;
defparam p_jinfo_ac_dhuff_tbl_mincode.latency = ram_latency;
defparam p_jinfo_ac_dhuff_tbl_mincode.init_file = "p_jinfo_ac_dhuff_tbl_mincode.mif";

reg [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_a;
reg [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_b;
reg p_jinfo_ac_dhuff_tbl_valptr_write_enable_a;
reg p_jinfo_ac_dhuff_tbl_valptr_write_enable_b;
reg [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_a;
reg [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_b;

// @p_jinfo_ac_dhuff_tbl_valptr = internal global [2 x [36 x i32]] zeroinitializer, align 4
ram_dual_port p_jinfo_ac_dhuff_tbl_valptr (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_ac_dhuff_tbl_valptr_address_a ),
	.address_b( p_jinfo_ac_dhuff_tbl_valptr_address_b ),
	.wren_a( p_jinfo_ac_dhuff_tbl_valptr_write_enable_a ),
	.wren_b( p_jinfo_ac_dhuff_tbl_valptr_write_enable_b ),
	.data_a( p_jinfo_ac_dhuff_tbl_valptr_in_a ),
	.data_b( p_jinfo_ac_dhuff_tbl_valptr_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_ac_dhuff_tbl_valptr_out_a ),
	.q_b( p_jinfo_ac_dhuff_tbl_valptr_out_b )
);
defparam p_jinfo_ac_dhuff_tbl_valptr.width_a = 32;
defparam p_jinfo_ac_dhuff_tbl_valptr.width_b = 32;
defparam p_jinfo_ac_dhuff_tbl_valptr.widthad_a = 7;
defparam p_jinfo_ac_dhuff_tbl_valptr.widthad_b = 7;
defparam p_jinfo_ac_dhuff_tbl_valptr.width_be_a = 1;
defparam p_jinfo_ac_dhuff_tbl_valptr.width_be_b = 1;
defparam p_jinfo_ac_dhuff_tbl_valptr.numwords_a = 72;
defparam p_jinfo_ac_dhuff_tbl_valptr.numwords_b = 72;
defparam p_jinfo_ac_dhuff_tbl_valptr.latency = ram_latency;
defparam p_jinfo_ac_dhuff_tbl_valptr.init_file = "p_jinfo_ac_dhuff_tbl_valptr.mif";

reg [1:0] OutData_comp_vpos_address_a;
reg [1:0] OutData_comp_vpos_address_b;
reg OutData_comp_vpos_write_enable_a;
reg OutData_comp_vpos_write_enable_b;
reg [31:0] OutData_comp_vpos_in_a;
reg [31:0] OutData_comp_vpos_in_b;
wire [31:0] OutData_comp_vpos_out_a;
wire [31:0] OutData_comp_vpos_out_b;

// @OutData_comp_vpos = internal global [3 x i32] zeroinitializer, align 4
ram_dual_port OutData_comp_vpos (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( OutData_comp_vpos_address_a ),
	.address_b( OutData_comp_vpos_address_b ),
	.wren_a( OutData_comp_vpos_write_enable_a ),
	.wren_b( OutData_comp_vpos_write_enable_b ),
	.data_a( OutData_comp_vpos_in_a ),
	.data_b( OutData_comp_vpos_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( OutData_comp_vpos_out_a ),
	.q_b( OutData_comp_vpos_out_b )
);
defparam OutData_comp_vpos.width_a = 32;
defparam OutData_comp_vpos.width_b = 32;
defparam OutData_comp_vpos.widthad_a = 2;
defparam OutData_comp_vpos.widthad_b = 2;
defparam OutData_comp_vpos.width_be_a = 1;
defparam OutData_comp_vpos.width_be_b = 1;
defparam OutData_comp_vpos.numwords_a = 3;
defparam OutData_comp_vpos.numwords_b = 3;
defparam OutData_comp_vpos.latency = ram_latency;
defparam OutData_comp_vpos.init_file = "OutData_comp_vpos.mif";

reg [1:0] OutData_comp_hpos_address_a;
reg [1:0] OutData_comp_hpos_address_b;
reg OutData_comp_hpos_write_enable_a;
reg OutData_comp_hpos_write_enable_b;
reg [31:0] OutData_comp_hpos_in_a;
reg [31:0] OutData_comp_hpos_in_b;
wire [31:0] OutData_comp_hpos_out_a;
wire [31:0] OutData_comp_hpos_out_b;

// @OutData_comp_hpos = internal global [3 x i32] zeroinitializer, align 4
ram_dual_port OutData_comp_hpos (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( OutData_comp_hpos_address_a ),
	.address_b( OutData_comp_hpos_address_b ),
	.wren_a( OutData_comp_hpos_write_enable_a ),
	.wren_b( OutData_comp_hpos_write_enable_b ),
	.data_a( OutData_comp_hpos_in_a ),
	.data_b( OutData_comp_hpos_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( OutData_comp_hpos_out_a ),
	.q_b( OutData_comp_hpos_out_b )
);
defparam OutData_comp_hpos.width_a = 32;
defparam OutData_comp_hpos.width_b = 32;
defparam OutData_comp_hpos.widthad_a = 2;
defparam OutData_comp_hpos.widthad_b = 2;
defparam OutData_comp_hpos.width_be_a = 1;
defparam OutData_comp_hpos.width_be_b = 1;
defparam OutData_comp_hpos.numwords_a = 3;
defparam OutData_comp_hpos.numwords_b = 3;
defparam OutData_comp_hpos.latency = ram_latency;
defparam OutData_comp_hpos.init_file = "OutData_comp_hpos.mif";

reg [12:0] JpegFileBuf_address_a;
reg [12:0] JpegFileBuf_address_b;
reg JpegFileBuf_write_enable_a;
reg JpegFileBuf_write_enable_b;
reg [7:0] JpegFileBuf_in_a;
reg [7:0] JpegFileBuf_in_b;
wire [7:0] JpegFileBuf_out_a;
wire [7:0] JpegFileBuf_out_b;

// @JpegFileBuf = internal global [5310 x i8] zeroinitializer, align 1
ram_dual_port JpegFileBuf (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( JpegFileBuf_address_a ),
	.address_b( JpegFileBuf_address_b ),
	.wren_a( JpegFileBuf_write_enable_a ),
	.wren_b( JpegFileBuf_write_enable_b ),
	.data_a( JpegFileBuf_in_a ),
	.data_b( JpegFileBuf_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( JpegFileBuf_out_a ),
	.q_b( JpegFileBuf_out_b )
);
defparam JpegFileBuf.width_a = 8;
defparam JpegFileBuf.width_b = 8;
defparam JpegFileBuf.widthad_a = 13;
defparam JpegFileBuf.widthad_b = 13;
defparam JpegFileBuf.width_be_a = 1;
defparam JpegFileBuf.width_be_b = 1;
defparam JpegFileBuf.numwords_a = 5310;
defparam JpegFileBuf.numwords_b = 5310;
defparam JpegFileBuf.latency = ram_latency;
defparam JpegFileBuf.init_file = "JpegFileBuf.mif";

reg [5:0] main_0_QuantBuffiii_address_a;
reg [5:0] main_0_QuantBuffiii_address_b;
reg main_0_QuantBuffiii_write_enable_a;
reg main_0_QuantBuffiii_write_enable_b;
reg [31:0] main_0_QuantBuffiii_in_a;
reg [31:0] main_0_QuantBuffiii_in_b;
wire [31:0] main_0_QuantBuffiii_out_a;
wire [31:0] main_0_QuantBuffiii_out_b;

//   %QuantBuff.i.i.i = alloca [64 x i32], align 4
ram_dual_port main_0_QuantBuffiii (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_QuantBuffiii_address_a ),
	.address_b( main_0_QuantBuffiii_address_b ),
	.wren_a( main_0_QuantBuffiii_write_enable_a ),
	.wren_b( main_0_QuantBuffiii_write_enable_b ),
	.data_a( main_0_QuantBuffiii_in_a ),
	.data_b( main_0_QuantBuffiii_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_QuantBuffiii_out_a ),
	.q_b( main_0_QuantBuffiii_out_b )
);
defparam main_0_QuantBuffiii.width_a = 32;
defparam main_0_QuantBuffiii.width_b = 32;
defparam main_0_QuantBuffiii.widthad_a = 6;
defparam main_0_QuantBuffiii.widthad_b = 6;
defparam main_0_QuantBuffiii.width_be_a = 1;
defparam main_0_QuantBuffiii.width_be_b = 1;
defparam main_0_QuantBuffiii.numwords_a = 64;
defparam main_0_QuantBuffiii.numwords_b = 64;
defparam main_0_QuantBuffiii.latency = ram_latency;

reg [7:0] main_0_HuffBuffii_address_a;
reg [7:0] main_0_HuffBuffii_address_b;
reg main_0_HuffBuffii_write_enable_a;
reg main_0_HuffBuffii_write_enable_b;
reg [31:0] main_0_HuffBuffii_in_a;
reg [31:0] main_0_HuffBuffii_in_b;
wire [31:0] main_0_HuffBuffii_out_a;
wire [31:0] main_0_HuffBuffii_out_b;

//   %HuffBuff.i.i = alloca [3 x [64 x i32]], align 4
ram_dual_port main_0_HuffBuffii (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_HuffBuffii_address_a ),
	.address_b( main_0_HuffBuffii_address_b ),
	.wren_a( main_0_HuffBuffii_write_enable_a ),
	.wren_b( main_0_HuffBuffii_write_enable_b ),
	.data_a( main_0_HuffBuffii_in_a ),
	.data_b( main_0_HuffBuffii_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_HuffBuffii_out_a ),
	.q_b( main_0_HuffBuffii_out_b )
);
defparam main_0_HuffBuffii.width_a = 32;
defparam main_0_HuffBuffii.width_b = 32;
defparam main_0_HuffBuffii.widthad_a = 8;
defparam main_0_HuffBuffii.widthad_b = 8;
defparam main_0_HuffBuffii.width_be_a = 1;
defparam main_0_HuffBuffii.width_be_b = 1;
defparam main_0_HuffBuffii.numwords_a = 192;
defparam main_0_HuffBuffii.numwords_b = 192;
defparam main_0_HuffBuffii.latency = ram_latency;

reg [8:0] main_0_IDCTBuffii_address_a;
reg [8:0] main_0_IDCTBuffii_address_b;
reg main_0_IDCTBuffii_write_enable_a;
reg main_0_IDCTBuffii_write_enable_b;
reg [31:0] main_0_IDCTBuffii_in_a;
reg [31:0] main_0_IDCTBuffii_in_b;
wire [31:0] main_0_IDCTBuffii_out_a;
wire [31:0] main_0_IDCTBuffii_out_b;

//   %IDCTBuff.i.i = alloca [6 x [64 x i32]], align 4
ram_dual_port main_0_IDCTBuffii (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_IDCTBuffii_address_a ),
	.address_b( main_0_IDCTBuffii_address_b ),
	.wren_a( main_0_IDCTBuffii_write_enable_a ),
	.wren_b( main_0_IDCTBuffii_write_enable_b ),
	.data_a( main_0_IDCTBuffii_in_a ),
	.data_b( main_0_IDCTBuffii_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_IDCTBuffii_out_a ),
	.q_b( main_0_IDCTBuffii_out_b )
);
defparam main_0_IDCTBuffii.width_a = 32;
defparam main_0_IDCTBuffii.width_b = 32;
defparam main_0_IDCTBuffii.widthad_a = 9;
defparam main_0_IDCTBuffii.widthad_b = 9;
defparam main_0_IDCTBuffii.width_be_a = 1;
defparam main_0_IDCTBuffii.width_be_b = 1;
defparam main_0_IDCTBuffii.numwords_a = 384;
defparam main_0_IDCTBuffii.numwords_b = 384;
defparam main_0_IDCTBuffii.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_main_result_a;
assign select_main_result_a = (tag_a == `TAG_g_main_result);
reg [ram_latency:0] select_main_result_reg_a;
wire [31:0] memory_controller_main_result_out_a;
assign memory_controller_main_result_out_a = {32{ select_main_result_reg_a[ram_latency]}} & main_result_out_a;

wire select_p_jinfo_image_height_a;
assign select_p_jinfo_image_height_a = (tag_a == `TAG_g_p_jinfo_image_height);
reg [ram_latency:0] select_p_jinfo_image_height_reg_a;
wire [15:0] memory_controller_p_jinfo_image_height_out_a;
assign memory_controller_p_jinfo_image_height_out_a = {16{ select_p_jinfo_image_height_reg_a[ram_latency]}} & p_jinfo_image_height_out_a;

wire select_p_jinfo_image_width_a;
assign select_p_jinfo_image_width_a = (tag_a == `TAG_g_p_jinfo_image_width);
reg [ram_latency:0] select_p_jinfo_image_width_reg_a;
wire [15:0] memory_controller_p_jinfo_image_width_out_a;
assign memory_controller_p_jinfo_image_width_out_a = {16{ select_p_jinfo_image_width_reg_a[ram_latency]}} & p_jinfo_image_width_out_a;

wire select_p_jinfo_comps_info_dc_tbl_no_a;
assign select_p_jinfo_comps_info_dc_tbl_no_a = (tag_a == `TAG_g_p_jinfo_comps_info_dc_tbl_no);
reg [ram_latency:0] select_p_jinfo_comps_info_dc_tbl_no_reg_a;
wire [7:0] memory_controller_p_jinfo_comps_info_dc_tbl_no_out_a;
assign memory_controller_p_jinfo_comps_info_dc_tbl_no_out_a = {8{ select_p_jinfo_comps_info_dc_tbl_no_reg_a[ram_latency]}} & p_jinfo_comps_info_dc_tbl_no_out_a;

wire select_p_jinfo_ac_xhuff_tbl_bits_a;
assign select_p_jinfo_ac_xhuff_tbl_bits_a = (tag_a == `TAG_g_p_jinfo_ac_xhuff_tbl_bits);
reg [ram_latency:0] select_p_jinfo_ac_xhuff_tbl_bits_reg_a;
wire [31:0] memory_controller_p_jinfo_ac_xhuff_tbl_bits_out_a;
assign memory_controller_p_jinfo_ac_xhuff_tbl_bits_out_a = {32{ select_p_jinfo_ac_xhuff_tbl_bits_reg_a[ram_latency]}} & p_jinfo_ac_xhuff_tbl_bits_out_a;

wire select_p_jinfo_ac_xhuff_tbl_huffval_a;
assign select_p_jinfo_ac_xhuff_tbl_huffval_a = (tag_a == `TAG_g_p_jinfo_ac_xhuff_tbl_huffval);
reg [ram_latency:0] select_p_jinfo_ac_xhuff_tbl_huffval_reg_a;
wire [31:0] memory_controller_p_jinfo_ac_xhuff_tbl_huffval_out_a;
assign memory_controller_p_jinfo_ac_xhuff_tbl_huffval_out_a = {32{ select_p_jinfo_ac_xhuff_tbl_huffval_reg_a[ram_latency]}} & p_jinfo_ac_xhuff_tbl_huffval_out_a;

wire select_p_jinfo_dc_xhuff_tbl_bits_a;
assign select_p_jinfo_dc_xhuff_tbl_bits_a = (tag_a == `TAG_g_p_jinfo_dc_xhuff_tbl_bits);
reg [ram_latency:0] select_p_jinfo_dc_xhuff_tbl_bits_reg_a;
wire [31:0] memory_controller_p_jinfo_dc_xhuff_tbl_bits_out_a;
assign memory_controller_p_jinfo_dc_xhuff_tbl_bits_out_a = {32{ select_p_jinfo_dc_xhuff_tbl_bits_reg_a[ram_latency]}} & p_jinfo_dc_xhuff_tbl_bits_out_a;

wire select_p_jinfo_dc_xhuff_tbl_huffval_a;
assign select_p_jinfo_dc_xhuff_tbl_huffval_a = (tag_a == `TAG_g_p_jinfo_dc_xhuff_tbl_huffval);
reg [ram_latency:0] select_p_jinfo_dc_xhuff_tbl_huffval_reg_a;
wire [31:0] memory_controller_p_jinfo_dc_xhuff_tbl_huffval_out_a;
assign memory_controller_p_jinfo_dc_xhuff_tbl_huffval_out_a = {32{ select_p_jinfo_dc_xhuff_tbl_huffval_reg_a[ram_latency]}} & p_jinfo_dc_xhuff_tbl_huffval_out_a;

wire select_p_jinfo_MCUWidth_a;
assign select_p_jinfo_MCUWidth_a = (tag_a == `TAG_g_p_jinfo_MCUWidth);
reg [ram_latency:0] select_p_jinfo_MCUWidth_reg_a;
wire [31:0] memory_controller_p_jinfo_MCUWidth_out_a;
assign memory_controller_p_jinfo_MCUWidth_out_a = {32{ select_p_jinfo_MCUWidth_reg_a[ram_latency]}} & p_jinfo_MCUWidth_out_a;

wire select_rgb_buf_a;
assign select_rgb_buf_a = (tag_a == `TAG_g_rgb_buf);
reg [ram_latency:0] select_rgb_buf_reg_a;
wire [31:0] memory_controller_rgb_buf_out_a;
assign memory_controller_rgb_buf_out_a = {32{ select_rgb_buf_reg_a[ram_latency]}} & rgb_buf_out_a;

wire select_CurHuffReadBuf_a;
assign select_CurHuffReadBuf_a = (tag_a == `TAG_g_CurHuffReadBuf);
reg [ram_latency:0] select_CurHuffReadBuf_reg_a;
wire [31:0] memory_controller_CurHuffReadBuf_out_a;
assign memory_controller_CurHuffReadBuf_out_a = {32{ select_CurHuffReadBuf_reg_a[ram_latency]}} & CurHuffReadBuf_out_a;

wire select_OutData_comp_buf_a;
assign select_OutData_comp_buf_a = (tag_a == `TAG_g_OutData_comp_buf);
reg [ram_latency:0] select_OutData_comp_buf_reg_a;
wire [7:0] memory_controller_OutData_comp_buf_out_a;
assign memory_controller_OutData_comp_buf_out_a = {8{ select_OutData_comp_buf_reg_a[ram_latency]}} & OutData_comp_buf_out_a;

wire select_bit_set_mask_a;
assign select_bit_set_mask_a = (tag_a == `TAG_g_bit_set_mask);
reg [ram_latency:0] select_bit_set_mask_reg_a;
wire [31:0] memory_controller_bit_set_mask_out_a;
assign memory_controller_bit_set_mask_out_a = {32{ select_bit_set_mask_reg_a[ram_latency]}} & bit_set_mask_out_a;

wire select_read_position_a;
assign select_read_position_a = (tag_a == `TAG_g_read_position);
reg [ram_latency:0] select_read_position_reg_a;
wire [31:0] memory_controller_read_position_out_a;
assign memory_controller_read_position_out_a = {32{ select_read_position_reg_a[ram_latency]}} & read_position_out_a;

wire select_current_read_byte_a;
assign select_current_read_byte_a = (tag_a == `TAG_g_current_read_byte);
reg [ram_latency:0] select_current_read_byte_reg_a;
wire [31:0] memory_controller_current_read_byte_out_a;
assign memory_controller_current_read_byte_out_a = {32{ select_current_read_byte_reg_a[ram_latency]}} & current_read_byte_out_a;

wire select_p_jinfo_dc_dhuff_tbl_ml_a;
assign select_p_jinfo_dc_dhuff_tbl_ml_a = (tag_a == `TAG_g_p_jinfo_dc_dhuff_tbl_ml);
reg [ram_latency:0] select_p_jinfo_dc_dhuff_tbl_ml_reg_a;
wire [31:0] memory_controller_p_jinfo_dc_dhuff_tbl_ml_out_a;
assign memory_controller_p_jinfo_dc_dhuff_tbl_ml_out_a = {32{ select_p_jinfo_dc_dhuff_tbl_ml_reg_a[ram_latency]}} & p_jinfo_dc_dhuff_tbl_ml_out_a;

wire select_p_jinfo_dc_dhuff_tbl_maxcode_a;
assign select_p_jinfo_dc_dhuff_tbl_maxcode_a = (tag_a == `TAG_g_p_jinfo_dc_dhuff_tbl_maxcode);
reg [ram_latency:0] select_p_jinfo_dc_dhuff_tbl_maxcode_reg_a;
wire [31:0] memory_controller_p_jinfo_dc_dhuff_tbl_maxcode_out_a;
assign memory_controller_p_jinfo_dc_dhuff_tbl_maxcode_out_a = {32{ select_p_jinfo_dc_dhuff_tbl_maxcode_reg_a[ram_latency]}} & p_jinfo_dc_dhuff_tbl_maxcode_out_a;

wire select_p_jinfo_dc_dhuff_tbl_mincode_a;
assign select_p_jinfo_dc_dhuff_tbl_mincode_a = (tag_a == `TAG_g_p_jinfo_dc_dhuff_tbl_mincode);
reg [ram_latency:0] select_p_jinfo_dc_dhuff_tbl_mincode_reg_a;
wire [31:0] memory_controller_p_jinfo_dc_dhuff_tbl_mincode_out_a;
assign memory_controller_p_jinfo_dc_dhuff_tbl_mincode_out_a = {32{ select_p_jinfo_dc_dhuff_tbl_mincode_reg_a[ram_latency]}} & p_jinfo_dc_dhuff_tbl_mincode_out_a;

wire select_p_jinfo_dc_dhuff_tbl_valptr_a;
assign select_p_jinfo_dc_dhuff_tbl_valptr_a = (tag_a == `TAG_g_p_jinfo_dc_dhuff_tbl_valptr);
reg [ram_latency:0] select_p_jinfo_dc_dhuff_tbl_valptr_reg_a;
wire [31:0] memory_controller_p_jinfo_dc_dhuff_tbl_valptr_out_a;
assign memory_controller_p_jinfo_dc_dhuff_tbl_valptr_out_a = {32{ select_p_jinfo_dc_dhuff_tbl_valptr_reg_a[ram_latency]}} & p_jinfo_dc_dhuff_tbl_valptr_out_a;

wire select_p_jinfo_ac_dhuff_tbl_ml_a;
assign select_p_jinfo_ac_dhuff_tbl_ml_a = (tag_a == `TAG_g_p_jinfo_ac_dhuff_tbl_ml);
reg [ram_latency:0] select_p_jinfo_ac_dhuff_tbl_ml_reg_a;
wire [31:0] memory_controller_p_jinfo_ac_dhuff_tbl_ml_out_a;
assign memory_controller_p_jinfo_ac_dhuff_tbl_ml_out_a = {32{ select_p_jinfo_ac_dhuff_tbl_ml_reg_a[ram_latency]}} & p_jinfo_ac_dhuff_tbl_ml_out_a;

wire select_p_jinfo_ac_dhuff_tbl_maxcode_a;
assign select_p_jinfo_ac_dhuff_tbl_maxcode_a = (tag_a == `TAG_g_p_jinfo_ac_dhuff_tbl_maxcode);
reg [ram_latency:0] select_p_jinfo_ac_dhuff_tbl_maxcode_reg_a;
wire [31:0] memory_controller_p_jinfo_ac_dhuff_tbl_maxcode_out_a;
assign memory_controller_p_jinfo_ac_dhuff_tbl_maxcode_out_a = {32{ select_p_jinfo_ac_dhuff_tbl_maxcode_reg_a[ram_latency]}} & p_jinfo_ac_dhuff_tbl_maxcode_out_a;

wire select_p_jinfo_ac_dhuff_tbl_mincode_a;
assign select_p_jinfo_ac_dhuff_tbl_mincode_a = (tag_a == `TAG_g_p_jinfo_ac_dhuff_tbl_mincode);
reg [ram_latency:0] select_p_jinfo_ac_dhuff_tbl_mincode_reg_a;
wire [31:0] memory_controller_p_jinfo_ac_dhuff_tbl_mincode_out_a;
assign memory_controller_p_jinfo_ac_dhuff_tbl_mincode_out_a = {32{ select_p_jinfo_ac_dhuff_tbl_mincode_reg_a[ram_latency]}} & p_jinfo_ac_dhuff_tbl_mincode_out_a;

wire select_p_jinfo_ac_dhuff_tbl_valptr_a;
assign select_p_jinfo_ac_dhuff_tbl_valptr_a = (tag_a == `TAG_g_p_jinfo_ac_dhuff_tbl_valptr);
reg [ram_latency:0] select_p_jinfo_ac_dhuff_tbl_valptr_reg_a;
wire [31:0] memory_controller_p_jinfo_ac_dhuff_tbl_valptr_out_a;
assign memory_controller_p_jinfo_ac_dhuff_tbl_valptr_out_a = {32{ select_p_jinfo_ac_dhuff_tbl_valptr_reg_a[ram_latency]}} & p_jinfo_ac_dhuff_tbl_valptr_out_a;

wire select_OutData_comp_vpos_a;
assign select_OutData_comp_vpos_a = (tag_a == `TAG_g_OutData_comp_vpos);
reg [ram_latency:0] select_OutData_comp_vpos_reg_a;
wire [31:0] memory_controller_OutData_comp_vpos_out_a;
assign memory_controller_OutData_comp_vpos_out_a = {32{ select_OutData_comp_vpos_reg_a[ram_latency]}} & OutData_comp_vpos_out_a;

wire select_OutData_comp_hpos_a;
assign select_OutData_comp_hpos_a = (tag_a == `TAG_g_OutData_comp_hpos);
reg [ram_latency:0] select_OutData_comp_hpos_reg_a;
wire [31:0] memory_controller_OutData_comp_hpos_out_a;
assign memory_controller_OutData_comp_hpos_out_a = {32{ select_OutData_comp_hpos_reg_a[ram_latency]}} & OutData_comp_hpos_out_a;

wire select_JpegFileBuf_a;
assign select_JpegFileBuf_a = (tag_a == `TAG_g_JpegFileBuf);
reg [ram_latency:0] select_JpegFileBuf_reg_a;
wire [7:0] memory_controller_JpegFileBuf_out_a;
assign memory_controller_JpegFileBuf_out_a = {8{ select_JpegFileBuf_reg_a[ram_latency]}} & JpegFileBuf_out_a;

wire select_main_0_QuantBuffiii_a;
assign select_main_0_QuantBuffiii_a = (tag_a == `TAG_main_0_QuantBuffiii);
reg [ram_latency:0] select_main_0_QuantBuffiii_reg_a;
wire [31:0] memory_controller_main_0_QuantBuffiii_out_a;
assign memory_controller_main_0_QuantBuffiii_out_a = {32{ select_main_0_QuantBuffiii_reg_a[ram_latency]}} & main_0_QuantBuffiii_out_a;

wire select_main_0_HuffBuffii_a;
assign select_main_0_HuffBuffii_a = (tag_a == `TAG_main_0_HuffBuffii);
reg [ram_latency:0] select_main_0_HuffBuffii_reg_a;
wire [31:0] memory_controller_main_0_HuffBuffii_out_a;
assign memory_controller_main_0_HuffBuffii_out_a = {32{ select_main_0_HuffBuffii_reg_a[ram_latency]}} & main_0_HuffBuffii_out_a;

wire select_main_0_IDCTBuffii_a;
assign select_main_0_IDCTBuffii_a = (tag_a == `TAG_main_0_IDCTBuffii);
reg [ram_latency:0] select_main_0_IDCTBuffii_reg_a;
wire [31:0] memory_controller_main_0_IDCTBuffii_out_a;
assign memory_controller_main_0_IDCTBuffii_out_a = {32{ select_main_0_IDCTBuffii_reg_a[ram_latency]}} & main_0_IDCTBuffii_out_a;

always @(*)
begin
	main_result_address_a = memory_controller_address_a [1-1+2:2] & {1{select_main_result_a}};
	main_result_write_enable_a = memory_controller_write_enable_a & select_main_result_a;
	main_result_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	p_jinfo_image_height_address_a = memory_controller_address_a [1-1+1:1] & {1{select_p_jinfo_image_height_a}};
	p_jinfo_image_height_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_image_height_a;
	p_jinfo_image_height_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	p_jinfo_image_width_address_a = memory_controller_address_a [1-1+1:1] & {1{select_p_jinfo_image_width_a}};
	p_jinfo_image_width_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_image_width_a;
	p_jinfo_image_width_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	p_jinfo_comps_info_dc_tbl_no_address_a = memory_controller_address_a [2-1+0:0] & {2{select_p_jinfo_comps_info_dc_tbl_no_a}};
	p_jinfo_comps_info_dc_tbl_no_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_comps_info_dc_tbl_no_a;
	p_jinfo_comps_info_dc_tbl_no_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	p_jinfo_ac_xhuff_tbl_bits_address_a = memory_controller_address_a [7-1+2:2] & {7{select_p_jinfo_ac_xhuff_tbl_bits_a}};
	p_jinfo_ac_xhuff_tbl_bits_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_ac_xhuff_tbl_bits_a;
	p_jinfo_ac_xhuff_tbl_bits_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	p_jinfo_ac_xhuff_tbl_huffval_address_a = memory_controller_address_a [10-1+2:2] & {10{select_p_jinfo_ac_xhuff_tbl_huffval_a}};
	p_jinfo_ac_xhuff_tbl_huffval_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_ac_xhuff_tbl_huffval_a;
	p_jinfo_ac_xhuff_tbl_huffval_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	p_jinfo_dc_xhuff_tbl_bits_address_a = memory_controller_address_a [7-1+2:2] & {7{select_p_jinfo_dc_xhuff_tbl_bits_a}};
	p_jinfo_dc_xhuff_tbl_bits_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_dc_xhuff_tbl_bits_a;
	p_jinfo_dc_xhuff_tbl_bits_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	p_jinfo_dc_xhuff_tbl_huffval_address_a = memory_controller_address_a [10-1+2:2] & {10{select_p_jinfo_dc_xhuff_tbl_huffval_a}};
	p_jinfo_dc_xhuff_tbl_huffval_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_dc_xhuff_tbl_huffval_a;
	p_jinfo_dc_xhuff_tbl_huffval_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	p_jinfo_MCUWidth_address_a = memory_controller_address_a [1-1+2:2] & {1{select_p_jinfo_MCUWidth_a}};
	p_jinfo_MCUWidth_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_MCUWidth_a;
	p_jinfo_MCUWidth_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	rgb_buf_address_a = memory_controller_address_a [10-1+2:2] & {10{select_rgb_buf_a}};
	rgb_buf_write_enable_a = memory_controller_write_enable_a & select_rgb_buf_a;
	rgb_buf_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	CurHuffReadBuf_address_a = memory_controller_address_a [1-1+2:2] & {1{select_CurHuffReadBuf_a}};
	CurHuffReadBuf_write_enable_a = memory_controller_write_enable_a & select_CurHuffReadBuf_a;
	CurHuffReadBuf_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	OutData_comp_buf_address_a = memory_controller_address_a [14-1+0:0] & {14{select_OutData_comp_buf_a}};
	OutData_comp_buf_write_enable_a = memory_controller_write_enable_a & select_OutData_comp_buf_a;
	OutData_comp_buf_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	bit_set_mask_address_a = memory_controller_address_a [5-1+2:2] & {5{select_bit_set_mask_a}};
	bit_set_mask_write_enable_a = memory_controller_write_enable_a & select_bit_set_mask_a;
	bit_set_mask_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	read_position_address_a = memory_controller_address_a [1-1+2:2] & {1{select_read_position_a}};
	read_position_write_enable_a = memory_controller_write_enable_a & select_read_position_a;
	read_position_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	current_read_byte_address_a = memory_controller_address_a [1-1+2:2] & {1{select_current_read_byte_a}};
	current_read_byte_write_enable_a = memory_controller_write_enable_a & select_current_read_byte_a;
	current_read_byte_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	p_jinfo_dc_dhuff_tbl_ml_address_a = memory_controller_address_a [1-1+2:2] & {1{select_p_jinfo_dc_dhuff_tbl_ml_a}};
	p_jinfo_dc_dhuff_tbl_ml_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_dc_dhuff_tbl_ml_a;
	p_jinfo_dc_dhuff_tbl_ml_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	p_jinfo_dc_dhuff_tbl_maxcode_address_a = memory_controller_address_a [7-1+2:2] & {7{select_p_jinfo_dc_dhuff_tbl_maxcode_a}};
	p_jinfo_dc_dhuff_tbl_maxcode_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_dc_dhuff_tbl_maxcode_a;
	p_jinfo_dc_dhuff_tbl_maxcode_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	p_jinfo_dc_dhuff_tbl_mincode_address_a = memory_controller_address_a [7-1+2:2] & {7{select_p_jinfo_dc_dhuff_tbl_mincode_a}};
	p_jinfo_dc_dhuff_tbl_mincode_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_dc_dhuff_tbl_mincode_a;
	p_jinfo_dc_dhuff_tbl_mincode_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	p_jinfo_dc_dhuff_tbl_valptr_address_a = memory_controller_address_a [7-1+2:2] & {7{select_p_jinfo_dc_dhuff_tbl_valptr_a}};
	p_jinfo_dc_dhuff_tbl_valptr_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_dc_dhuff_tbl_valptr_a;
	p_jinfo_dc_dhuff_tbl_valptr_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	p_jinfo_ac_dhuff_tbl_ml_address_a = memory_controller_address_a [1-1+2:2] & {1{select_p_jinfo_ac_dhuff_tbl_ml_a}};
	p_jinfo_ac_dhuff_tbl_ml_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_ac_dhuff_tbl_ml_a;
	p_jinfo_ac_dhuff_tbl_ml_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	p_jinfo_ac_dhuff_tbl_maxcode_address_a = memory_controller_address_a [7-1+2:2] & {7{select_p_jinfo_ac_dhuff_tbl_maxcode_a}};
	p_jinfo_ac_dhuff_tbl_maxcode_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_ac_dhuff_tbl_maxcode_a;
	p_jinfo_ac_dhuff_tbl_maxcode_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	p_jinfo_ac_dhuff_tbl_mincode_address_a = memory_controller_address_a [7-1+2:2] & {7{select_p_jinfo_ac_dhuff_tbl_mincode_a}};
	p_jinfo_ac_dhuff_tbl_mincode_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_ac_dhuff_tbl_mincode_a;
	p_jinfo_ac_dhuff_tbl_mincode_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	p_jinfo_ac_dhuff_tbl_valptr_address_a = memory_controller_address_a [7-1+2:2] & {7{select_p_jinfo_ac_dhuff_tbl_valptr_a}};
	p_jinfo_ac_dhuff_tbl_valptr_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_ac_dhuff_tbl_valptr_a;
	p_jinfo_ac_dhuff_tbl_valptr_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	OutData_comp_vpos_address_a = memory_controller_address_a [2-1+2:2] & {2{select_OutData_comp_vpos_a}};
	OutData_comp_vpos_write_enable_a = memory_controller_write_enable_a & select_OutData_comp_vpos_a;
	OutData_comp_vpos_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	OutData_comp_hpos_address_a = memory_controller_address_a [2-1+2:2] & {2{select_OutData_comp_hpos_a}};
	OutData_comp_hpos_write_enable_a = memory_controller_write_enable_a & select_OutData_comp_hpos_a;
	OutData_comp_hpos_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	JpegFileBuf_address_a = memory_controller_address_a [13-1+0:0] & {13{select_JpegFileBuf_a}};
	JpegFileBuf_write_enable_a = memory_controller_write_enable_a & select_JpegFileBuf_a;
	JpegFileBuf_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	main_0_QuantBuffiii_address_a = memory_controller_address_a [6-1+2:2] & {6{select_main_0_QuantBuffiii_a}};
	main_0_QuantBuffiii_write_enable_a = memory_controller_write_enable_a & select_main_0_QuantBuffiii_a;
	main_0_QuantBuffiii_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	main_0_HuffBuffii_address_a = memory_controller_address_a [8-1+2:2] & {8{select_main_0_HuffBuffii_a}};
	main_0_HuffBuffii_write_enable_a = memory_controller_write_enable_a & select_main_0_HuffBuffii_a;
	main_0_HuffBuffii_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	main_0_IDCTBuffii_address_a = memory_controller_address_a [9-1+2:2] & {9{select_main_0_IDCTBuffii_a}};
	main_0_IDCTBuffii_write_enable_a = memory_controller_write_enable_a & select_main_0_IDCTBuffii_a;
	main_0_IDCTBuffii_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_main_result_reg_a[ram_latency]}} | {1{select_p_jinfo_image_height_reg_a[ram_latency]}} | {1{select_p_jinfo_image_width_reg_a[ram_latency]}} | {2{select_p_jinfo_ac_xhuff_tbl_bits_reg_a[ram_latency]}} | {2{select_p_jinfo_ac_xhuff_tbl_huffval_reg_a[ram_latency]}} | {2{select_p_jinfo_dc_xhuff_tbl_bits_reg_a[ram_latency]}} | {2{select_p_jinfo_dc_xhuff_tbl_huffval_reg_a[ram_latency]}} | {2{select_p_jinfo_MCUWidth_reg_a[ram_latency]}} | {2{select_rgb_buf_reg_a[ram_latency]}} | {2{select_CurHuffReadBuf_reg_a[ram_latency]}} | {2{select_bit_set_mask_reg_a[ram_latency]}} | {2{select_read_position_reg_a[ram_latency]}} | {2{select_current_read_byte_reg_a[ram_latency]}} | {2{select_p_jinfo_dc_dhuff_tbl_ml_reg_a[ram_latency]}} | {2{select_p_jinfo_dc_dhuff_tbl_maxcode_reg_a[ram_latency]}} | {2{select_p_jinfo_dc_dhuff_tbl_mincode_reg_a[ram_latency]}} | {2{select_p_jinfo_dc_dhuff_tbl_valptr_reg_a[ram_latency]}} | {2{select_p_jinfo_ac_dhuff_tbl_ml_reg_a[ram_latency]}} | {2{select_p_jinfo_ac_dhuff_tbl_maxcode_reg_a[ram_latency]}} | {2{select_p_jinfo_ac_dhuff_tbl_mincode_reg_a[ram_latency]}} | {2{select_p_jinfo_ac_dhuff_tbl_valptr_reg_a[ram_latency]}} | {2{select_OutData_comp_vpos_reg_a[ram_latency]}} | {2{select_OutData_comp_hpos_reg_a[ram_latency]}} | {2{select_main_0_QuantBuffiii_reg_a[ram_latency]}} | {2{select_main_0_HuffBuffii_reg_a[ram_latency]}} | {2{select_main_0_IDCTBuffii_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_main_result_out_a | memory_controller_p_jinfo_image_height_out_a | memory_controller_p_jinfo_image_width_out_a | memory_controller_p_jinfo_comps_info_dc_tbl_no_out_a | memory_controller_p_jinfo_ac_xhuff_tbl_bits_out_a | memory_controller_p_jinfo_ac_xhuff_tbl_huffval_out_a | memory_controller_p_jinfo_dc_xhuff_tbl_bits_out_a | memory_controller_p_jinfo_dc_xhuff_tbl_huffval_out_a | memory_controller_p_jinfo_MCUWidth_out_a | memory_controller_rgb_buf_out_a | memory_controller_CurHuffReadBuf_out_a | memory_controller_OutData_comp_buf_out_a | memory_controller_bit_set_mask_out_a | memory_controller_read_position_out_a | memory_controller_current_read_byte_out_a | memory_controller_p_jinfo_dc_dhuff_tbl_ml_out_a | memory_controller_p_jinfo_dc_dhuff_tbl_maxcode_out_a | memory_controller_p_jinfo_dc_dhuff_tbl_mincode_out_a | memory_controller_p_jinfo_dc_dhuff_tbl_valptr_out_a | memory_controller_p_jinfo_ac_dhuff_tbl_ml_out_a | memory_controller_p_jinfo_ac_dhuff_tbl_maxcode_out_a | memory_controller_p_jinfo_ac_dhuff_tbl_mincode_out_a | memory_controller_p_jinfo_ac_dhuff_tbl_valptr_out_a | memory_controller_OutData_comp_vpos_out_a | memory_controller_OutData_comp_hpos_out_a | memory_controller_JpegFileBuf_out_a | memory_controller_main_0_QuantBuffiii_out_a | memory_controller_main_0_HuffBuffii_out_a | memory_controller_main_0_IDCTBuffii_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_main_result_reg_a[j+1] <= select_main_result_reg_a[j];
select_p_jinfo_image_height_reg_a[j+1] <= select_p_jinfo_image_height_reg_a[j];
select_p_jinfo_image_width_reg_a[j+1] <= select_p_jinfo_image_width_reg_a[j];
select_p_jinfo_comps_info_dc_tbl_no_reg_a[j+1] <= select_p_jinfo_comps_info_dc_tbl_no_reg_a[j];
select_p_jinfo_ac_xhuff_tbl_bits_reg_a[j+1] <= select_p_jinfo_ac_xhuff_tbl_bits_reg_a[j];
select_p_jinfo_ac_xhuff_tbl_huffval_reg_a[j+1] <= select_p_jinfo_ac_xhuff_tbl_huffval_reg_a[j];
select_p_jinfo_dc_xhuff_tbl_bits_reg_a[j+1] <= select_p_jinfo_dc_xhuff_tbl_bits_reg_a[j];
select_p_jinfo_dc_xhuff_tbl_huffval_reg_a[j+1] <= select_p_jinfo_dc_xhuff_tbl_huffval_reg_a[j];
select_p_jinfo_MCUWidth_reg_a[j+1] <= select_p_jinfo_MCUWidth_reg_a[j];
select_rgb_buf_reg_a[j+1] <= select_rgb_buf_reg_a[j];
select_CurHuffReadBuf_reg_a[j+1] <= select_CurHuffReadBuf_reg_a[j];
select_OutData_comp_buf_reg_a[j+1] <= select_OutData_comp_buf_reg_a[j];
select_bit_set_mask_reg_a[j+1] <= select_bit_set_mask_reg_a[j];
select_read_position_reg_a[j+1] <= select_read_position_reg_a[j];
select_current_read_byte_reg_a[j+1] <= select_current_read_byte_reg_a[j];
select_p_jinfo_dc_dhuff_tbl_ml_reg_a[j+1] <= select_p_jinfo_dc_dhuff_tbl_ml_reg_a[j];
select_p_jinfo_dc_dhuff_tbl_maxcode_reg_a[j+1] <= select_p_jinfo_dc_dhuff_tbl_maxcode_reg_a[j];
select_p_jinfo_dc_dhuff_tbl_mincode_reg_a[j+1] <= select_p_jinfo_dc_dhuff_tbl_mincode_reg_a[j];
select_p_jinfo_dc_dhuff_tbl_valptr_reg_a[j+1] <= select_p_jinfo_dc_dhuff_tbl_valptr_reg_a[j];
select_p_jinfo_ac_dhuff_tbl_ml_reg_a[j+1] <= select_p_jinfo_ac_dhuff_tbl_ml_reg_a[j];
select_p_jinfo_ac_dhuff_tbl_maxcode_reg_a[j+1] <= select_p_jinfo_ac_dhuff_tbl_maxcode_reg_a[j];
select_p_jinfo_ac_dhuff_tbl_mincode_reg_a[j+1] <= select_p_jinfo_ac_dhuff_tbl_mincode_reg_a[j];
select_p_jinfo_ac_dhuff_tbl_valptr_reg_a[j+1] <= select_p_jinfo_ac_dhuff_tbl_valptr_reg_a[j];
select_OutData_comp_vpos_reg_a[j+1] <= select_OutData_comp_vpos_reg_a[j];
select_OutData_comp_hpos_reg_a[j+1] <= select_OutData_comp_hpos_reg_a[j];
select_JpegFileBuf_reg_a[j+1] <= select_JpegFileBuf_reg_a[j];
select_main_0_QuantBuffiii_reg_a[j+1] <= select_main_0_QuantBuffiii_reg_a[j];
select_main_0_HuffBuffii_reg_a[j+1] <= select_main_0_HuffBuffii_reg_a[j];
select_main_0_IDCTBuffii_reg_a[j+1] <= select_main_0_IDCTBuffii_reg_a[j];
end
always @(*)
begin
select_main_result_reg_a[0] <= select_main_result_a;
select_p_jinfo_image_height_reg_a[0] <= select_p_jinfo_image_height_a;
select_p_jinfo_image_width_reg_a[0] <= select_p_jinfo_image_width_a;
select_p_jinfo_comps_info_dc_tbl_no_reg_a[0] <= select_p_jinfo_comps_info_dc_tbl_no_a;
select_p_jinfo_ac_xhuff_tbl_bits_reg_a[0] <= select_p_jinfo_ac_xhuff_tbl_bits_a;
select_p_jinfo_ac_xhuff_tbl_huffval_reg_a[0] <= select_p_jinfo_ac_xhuff_tbl_huffval_a;
select_p_jinfo_dc_xhuff_tbl_bits_reg_a[0] <= select_p_jinfo_dc_xhuff_tbl_bits_a;
select_p_jinfo_dc_xhuff_tbl_huffval_reg_a[0] <= select_p_jinfo_dc_xhuff_tbl_huffval_a;
select_p_jinfo_MCUWidth_reg_a[0] <= select_p_jinfo_MCUWidth_a;
select_rgb_buf_reg_a[0] <= select_rgb_buf_a;
select_CurHuffReadBuf_reg_a[0] <= select_CurHuffReadBuf_a;
select_OutData_comp_buf_reg_a[0] <= select_OutData_comp_buf_a;
select_bit_set_mask_reg_a[0] <= select_bit_set_mask_a;
select_read_position_reg_a[0] <= select_read_position_a;
select_current_read_byte_reg_a[0] <= select_current_read_byte_a;
select_p_jinfo_dc_dhuff_tbl_ml_reg_a[0] <= select_p_jinfo_dc_dhuff_tbl_ml_a;
select_p_jinfo_dc_dhuff_tbl_maxcode_reg_a[0] <= select_p_jinfo_dc_dhuff_tbl_maxcode_a;
select_p_jinfo_dc_dhuff_tbl_mincode_reg_a[0] <= select_p_jinfo_dc_dhuff_tbl_mincode_a;
select_p_jinfo_dc_dhuff_tbl_valptr_reg_a[0] <= select_p_jinfo_dc_dhuff_tbl_valptr_a;
select_p_jinfo_ac_dhuff_tbl_ml_reg_a[0] <= select_p_jinfo_ac_dhuff_tbl_ml_a;
select_p_jinfo_ac_dhuff_tbl_maxcode_reg_a[0] <= select_p_jinfo_ac_dhuff_tbl_maxcode_a;
select_p_jinfo_ac_dhuff_tbl_mincode_reg_a[0] <= select_p_jinfo_ac_dhuff_tbl_mincode_a;
select_p_jinfo_ac_dhuff_tbl_valptr_reg_a[0] <= select_p_jinfo_ac_dhuff_tbl_valptr_a;
select_OutData_comp_vpos_reg_a[0] <= select_OutData_comp_vpos_a;
select_OutData_comp_hpos_reg_a[0] <= select_OutData_comp_hpos_a;
select_JpegFileBuf_reg_a[0] <= select_JpegFileBuf_a;
select_main_0_QuantBuffiii_reg_a[0] <= select_main_0_QuantBuffiii_a;
select_main_0_HuffBuffii_reg_a[0] <= select_main_0_HuffBuffii_a;
select_main_0_IDCTBuffii_reg_a[0] <= select_main_0_IDCTBuffii_a;
end

reg [2:0] select_not_struct_b;

wire select_main_result_b;
assign select_main_result_b = (tag_b == `TAG_g_main_result);
reg [ram_latency:0] select_main_result_reg_b;
wire [31:0] memory_controller_main_result_out_b;
assign memory_controller_main_result_out_b = {32{ select_main_result_reg_b[ram_latency]}} & main_result_out_b;

wire select_p_jinfo_image_height_b;
assign select_p_jinfo_image_height_b = (tag_b == `TAG_g_p_jinfo_image_height);
reg [ram_latency:0] select_p_jinfo_image_height_reg_b;
wire [15:0] memory_controller_p_jinfo_image_height_out_b;
assign memory_controller_p_jinfo_image_height_out_b = {16{ select_p_jinfo_image_height_reg_b[ram_latency]}} & p_jinfo_image_height_out_b;

wire select_p_jinfo_image_width_b;
assign select_p_jinfo_image_width_b = (tag_b == `TAG_g_p_jinfo_image_width);
reg [ram_latency:0] select_p_jinfo_image_width_reg_b;
wire [15:0] memory_controller_p_jinfo_image_width_out_b;
assign memory_controller_p_jinfo_image_width_out_b = {16{ select_p_jinfo_image_width_reg_b[ram_latency]}} & p_jinfo_image_width_out_b;

wire select_p_jinfo_comps_info_dc_tbl_no_b;
assign select_p_jinfo_comps_info_dc_tbl_no_b = (tag_b == `TAG_g_p_jinfo_comps_info_dc_tbl_no);
reg [ram_latency:0] select_p_jinfo_comps_info_dc_tbl_no_reg_b;
wire [7:0] memory_controller_p_jinfo_comps_info_dc_tbl_no_out_b;
assign memory_controller_p_jinfo_comps_info_dc_tbl_no_out_b = {8{ select_p_jinfo_comps_info_dc_tbl_no_reg_b[ram_latency]}} & p_jinfo_comps_info_dc_tbl_no_out_b;

wire select_p_jinfo_ac_xhuff_tbl_bits_b;
assign select_p_jinfo_ac_xhuff_tbl_bits_b = (tag_b == `TAG_g_p_jinfo_ac_xhuff_tbl_bits);
reg [ram_latency:0] select_p_jinfo_ac_xhuff_tbl_bits_reg_b;
wire [31:0] memory_controller_p_jinfo_ac_xhuff_tbl_bits_out_b;
assign memory_controller_p_jinfo_ac_xhuff_tbl_bits_out_b = {32{ select_p_jinfo_ac_xhuff_tbl_bits_reg_b[ram_latency]}} & p_jinfo_ac_xhuff_tbl_bits_out_b;

wire select_p_jinfo_ac_xhuff_tbl_huffval_b;
assign select_p_jinfo_ac_xhuff_tbl_huffval_b = (tag_b == `TAG_g_p_jinfo_ac_xhuff_tbl_huffval);
reg [ram_latency:0] select_p_jinfo_ac_xhuff_tbl_huffval_reg_b;
wire [31:0] memory_controller_p_jinfo_ac_xhuff_tbl_huffval_out_b;
assign memory_controller_p_jinfo_ac_xhuff_tbl_huffval_out_b = {32{ select_p_jinfo_ac_xhuff_tbl_huffval_reg_b[ram_latency]}} & p_jinfo_ac_xhuff_tbl_huffval_out_b;

wire select_p_jinfo_dc_xhuff_tbl_bits_b;
assign select_p_jinfo_dc_xhuff_tbl_bits_b = (tag_b == `TAG_g_p_jinfo_dc_xhuff_tbl_bits);
reg [ram_latency:0] select_p_jinfo_dc_xhuff_tbl_bits_reg_b;
wire [31:0] memory_controller_p_jinfo_dc_xhuff_tbl_bits_out_b;
assign memory_controller_p_jinfo_dc_xhuff_tbl_bits_out_b = {32{ select_p_jinfo_dc_xhuff_tbl_bits_reg_b[ram_latency]}} & p_jinfo_dc_xhuff_tbl_bits_out_b;

wire select_p_jinfo_dc_xhuff_tbl_huffval_b;
assign select_p_jinfo_dc_xhuff_tbl_huffval_b = (tag_b == `TAG_g_p_jinfo_dc_xhuff_tbl_huffval);
reg [ram_latency:0] select_p_jinfo_dc_xhuff_tbl_huffval_reg_b;
wire [31:0] memory_controller_p_jinfo_dc_xhuff_tbl_huffval_out_b;
assign memory_controller_p_jinfo_dc_xhuff_tbl_huffval_out_b = {32{ select_p_jinfo_dc_xhuff_tbl_huffval_reg_b[ram_latency]}} & p_jinfo_dc_xhuff_tbl_huffval_out_b;

wire select_p_jinfo_MCUWidth_b;
assign select_p_jinfo_MCUWidth_b = (tag_b == `TAG_g_p_jinfo_MCUWidth);
reg [ram_latency:0] select_p_jinfo_MCUWidth_reg_b;
wire [31:0] memory_controller_p_jinfo_MCUWidth_out_b;
assign memory_controller_p_jinfo_MCUWidth_out_b = {32{ select_p_jinfo_MCUWidth_reg_b[ram_latency]}} & p_jinfo_MCUWidth_out_b;

wire select_rgb_buf_b;
assign select_rgb_buf_b = (tag_b == `TAG_g_rgb_buf);
reg [ram_latency:0] select_rgb_buf_reg_b;
wire [31:0] memory_controller_rgb_buf_out_b;
assign memory_controller_rgb_buf_out_b = {32{ select_rgb_buf_reg_b[ram_latency]}} & rgb_buf_out_b;

wire select_CurHuffReadBuf_b;
assign select_CurHuffReadBuf_b = (tag_b == `TAG_g_CurHuffReadBuf);
reg [ram_latency:0] select_CurHuffReadBuf_reg_b;
wire [31:0] memory_controller_CurHuffReadBuf_out_b;
assign memory_controller_CurHuffReadBuf_out_b = {32{ select_CurHuffReadBuf_reg_b[ram_latency]}} & CurHuffReadBuf_out_b;

wire select_OutData_comp_buf_b;
assign select_OutData_comp_buf_b = (tag_b == `TAG_g_OutData_comp_buf);
reg [ram_latency:0] select_OutData_comp_buf_reg_b;
wire [7:0] memory_controller_OutData_comp_buf_out_b;
assign memory_controller_OutData_comp_buf_out_b = {8{ select_OutData_comp_buf_reg_b[ram_latency]}} & OutData_comp_buf_out_b;

wire select_bit_set_mask_b;
assign select_bit_set_mask_b = (tag_b == `TAG_g_bit_set_mask);
reg [ram_latency:0] select_bit_set_mask_reg_b;
wire [31:0] memory_controller_bit_set_mask_out_b;
assign memory_controller_bit_set_mask_out_b = {32{ select_bit_set_mask_reg_b[ram_latency]}} & bit_set_mask_out_b;

wire select_read_position_b;
assign select_read_position_b = (tag_b == `TAG_g_read_position);
reg [ram_latency:0] select_read_position_reg_b;
wire [31:0] memory_controller_read_position_out_b;
assign memory_controller_read_position_out_b = {32{ select_read_position_reg_b[ram_latency]}} & read_position_out_b;

wire select_current_read_byte_b;
assign select_current_read_byte_b = (tag_b == `TAG_g_current_read_byte);
reg [ram_latency:0] select_current_read_byte_reg_b;
wire [31:0] memory_controller_current_read_byte_out_b;
assign memory_controller_current_read_byte_out_b = {32{ select_current_read_byte_reg_b[ram_latency]}} & current_read_byte_out_b;

wire select_p_jinfo_dc_dhuff_tbl_ml_b;
assign select_p_jinfo_dc_dhuff_tbl_ml_b = (tag_b == `TAG_g_p_jinfo_dc_dhuff_tbl_ml);
reg [ram_latency:0] select_p_jinfo_dc_dhuff_tbl_ml_reg_b;
wire [31:0] memory_controller_p_jinfo_dc_dhuff_tbl_ml_out_b;
assign memory_controller_p_jinfo_dc_dhuff_tbl_ml_out_b = {32{ select_p_jinfo_dc_dhuff_tbl_ml_reg_b[ram_latency]}} & p_jinfo_dc_dhuff_tbl_ml_out_b;

wire select_p_jinfo_dc_dhuff_tbl_maxcode_b;
assign select_p_jinfo_dc_dhuff_tbl_maxcode_b = (tag_b == `TAG_g_p_jinfo_dc_dhuff_tbl_maxcode);
reg [ram_latency:0] select_p_jinfo_dc_dhuff_tbl_maxcode_reg_b;
wire [31:0] memory_controller_p_jinfo_dc_dhuff_tbl_maxcode_out_b;
assign memory_controller_p_jinfo_dc_dhuff_tbl_maxcode_out_b = {32{ select_p_jinfo_dc_dhuff_tbl_maxcode_reg_b[ram_latency]}} & p_jinfo_dc_dhuff_tbl_maxcode_out_b;

wire select_p_jinfo_dc_dhuff_tbl_mincode_b;
assign select_p_jinfo_dc_dhuff_tbl_mincode_b = (tag_b == `TAG_g_p_jinfo_dc_dhuff_tbl_mincode);
reg [ram_latency:0] select_p_jinfo_dc_dhuff_tbl_mincode_reg_b;
wire [31:0] memory_controller_p_jinfo_dc_dhuff_tbl_mincode_out_b;
assign memory_controller_p_jinfo_dc_dhuff_tbl_mincode_out_b = {32{ select_p_jinfo_dc_dhuff_tbl_mincode_reg_b[ram_latency]}} & p_jinfo_dc_dhuff_tbl_mincode_out_b;

wire select_p_jinfo_dc_dhuff_tbl_valptr_b;
assign select_p_jinfo_dc_dhuff_tbl_valptr_b = (tag_b == `TAG_g_p_jinfo_dc_dhuff_tbl_valptr);
reg [ram_latency:0] select_p_jinfo_dc_dhuff_tbl_valptr_reg_b;
wire [31:0] memory_controller_p_jinfo_dc_dhuff_tbl_valptr_out_b;
assign memory_controller_p_jinfo_dc_dhuff_tbl_valptr_out_b = {32{ select_p_jinfo_dc_dhuff_tbl_valptr_reg_b[ram_latency]}} & p_jinfo_dc_dhuff_tbl_valptr_out_b;

wire select_p_jinfo_ac_dhuff_tbl_ml_b;
assign select_p_jinfo_ac_dhuff_tbl_ml_b = (tag_b == `TAG_g_p_jinfo_ac_dhuff_tbl_ml);
reg [ram_latency:0] select_p_jinfo_ac_dhuff_tbl_ml_reg_b;
wire [31:0] memory_controller_p_jinfo_ac_dhuff_tbl_ml_out_b;
assign memory_controller_p_jinfo_ac_dhuff_tbl_ml_out_b = {32{ select_p_jinfo_ac_dhuff_tbl_ml_reg_b[ram_latency]}} & p_jinfo_ac_dhuff_tbl_ml_out_b;

wire select_p_jinfo_ac_dhuff_tbl_maxcode_b;
assign select_p_jinfo_ac_dhuff_tbl_maxcode_b = (tag_b == `TAG_g_p_jinfo_ac_dhuff_tbl_maxcode);
reg [ram_latency:0] select_p_jinfo_ac_dhuff_tbl_maxcode_reg_b;
wire [31:0] memory_controller_p_jinfo_ac_dhuff_tbl_maxcode_out_b;
assign memory_controller_p_jinfo_ac_dhuff_tbl_maxcode_out_b = {32{ select_p_jinfo_ac_dhuff_tbl_maxcode_reg_b[ram_latency]}} & p_jinfo_ac_dhuff_tbl_maxcode_out_b;

wire select_p_jinfo_ac_dhuff_tbl_mincode_b;
assign select_p_jinfo_ac_dhuff_tbl_mincode_b = (tag_b == `TAG_g_p_jinfo_ac_dhuff_tbl_mincode);
reg [ram_latency:0] select_p_jinfo_ac_dhuff_tbl_mincode_reg_b;
wire [31:0] memory_controller_p_jinfo_ac_dhuff_tbl_mincode_out_b;
assign memory_controller_p_jinfo_ac_dhuff_tbl_mincode_out_b = {32{ select_p_jinfo_ac_dhuff_tbl_mincode_reg_b[ram_latency]}} & p_jinfo_ac_dhuff_tbl_mincode_out_b;

wire select_p_jinfo_ac_dhuff_tbl_valptr_b;
assign select_p_jinfo_ac_dhuff_tbl_valptr_b = (tag_b == `TAG_g_p_jinfo_ac_dhuff_tbl_valptr);
reg [ram_latency:0] select_p_jinfo_ac_dhuff_tbl_valptr_reg_b;
wire [31:0] memory_controller_p_jinfo_ac_dhuff_tbl_valptr_out_b;
assign memory_controller_p_jinfo_ac_dhuff_tbl_valptr_out_b = {32{ select_p_jinfo_ac_dhuff_tbl_valptr_reg_b[ram_latency]}} & p_jinfo_ac_dhuff_tbl_valptr_out_b;

wire select_OutData_comp_vpos_b;
assign select_OutData_comp_vpos_b = (tag_b == `TAG_g_OutData_comp_vpos);
reg [ram_latency:0] select_OutData_comp_vpos_reg_b;
wire [31:0] memory_controller_OutData_comp_vpos_out_b;
assign memory_controller_OutData_comp_vpos_out_b = {32{ select_OutData_comp_vpos_reg_b[ram_latency]}} & OutData_comp_vpos_out_b;

wire select_OutData_comp_hpos_b;
assign select_OutData_comp_hpos_b = (tag_b == `TAG_g_OutData_comp_hpos);
reg [ram_latency:0] select_OutData_comp_hpos_reg_b;
wire [31:0] memory_controller_OutData_comp_hpos_out_b;
assign memory_controller_OutData_comp_hpos_out_b = {32{ select_OutData_comp_hpos_reg_b[ram_latency]}} & OutData_comp_hpos_out_b;

wire select_JpegFileBuf_b;
assign select_JpegFileBuf_b = (tag_b == `TAG_g_JpegFileBuf);
reg [ram_latency:0] select_JpegFileBuf_reg_b;
wire [7:0] memory_controller_JpegFileBuf_out_b;
assign memory_controller_JpegFileBuf_out_b = {8{ select_JpegFileBuf_reg_b[ram_latency]}} & JpegFileBuf_out_b;

wire select_main_0_QuantBuffiii_b;
assign select_main_0_QuantBuffiii_b = (tag_b == `TAG_main_0_QuantBuffiii);
reg [ram_latency:0] select_main_0_QuantBuffiii_reg_b;
wire [31:0] memory_controller_main_0_QuantBuffiii_out_b;
assign memory_controller_main_0_QuantBuffiii_out_b = {32{ select_main_0_QuantBuffiii_reg_b[ram_latency]}} & main_0_QuantBuffiii_out_b;

wire select_main_0_HuffBuffii_b;
assign select_main_0_HuffBuffii_b = (tag_b == `TAG_main_0_HuffBuffii);
reg [ram_latency:0] select_main_0_HuffBuffii_reg_b;
wire [31:0] memory_controller_main_0_HuffBuffii_out_b;
assign memory_controller_main_0_HuffBuffii_out_b = {32{ select_main_0_HuffBuffii_reg_b[ram_latency]}} & main_0_HuffBuffii_out_b;

wire select_main_0_IDCTBuffii_b;
assign select_main_0_IDCTBuffii_b = (tag_b == `TAG_main_0_IDCTBuffii);
reg [ram_latency:0] select_main_0_IDCTBuffii_reg_b;
wire [31:0] memory_controller_main_0_IDCTBuffii_out_b;
assign memory_controller_main_0_IDCTBuffii_out_b = {32{ select_main_0_IDCTBuffii_reg_b[ram_latency]}} & main_0_IDCTBuffii_out_b;

always @(*)
begin
	main_result_address_b = memory_controller_address_b [1-1+2:2] & {1{select_main_result_b}};
	main_result_write_enable_b = memory_controller_write_enable_b & select_main_result_b;
	main_result_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_image_height_address_b = memory_controller_address_b [1-1+1:1] & {1{select_p_jinfo_image_height_b}};
	p_jinfo_image_height_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_image_height_b;
	p_jinfo_image_height_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	p_jinfo_image_width_address_b = memory_controller_address_b [1-1+1:1] & {1{select_p_jinfo_image_width_b}};
	p_jinfo_image_width_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_image_width_b;
	p_jinfo_image_width_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	p_jinfo_comps_info_dc_tbl_no_address_b = memory_controller_address_b [2-1+0:0] & {2{select_p_jinfo_comps_info_dc_tbl_no_b}};
	p_jinfo_comps_info_dc_tbl_no_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_comps_info_dc_tbl_no_b;
	p_jinfo_comps_info_dc_tbl_no_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	p_jinfo_ac_xhuff_tbl_bits_address_b = memory_controller_address_b [7-1+2:2] & {7{select_p_jinfo_ac_xhuff_tbl_bits_b}};
	p_jinfo_ac_xhuff_tbl_bits_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_ac_xhuff_tbl_bits_b;
	p_jinfo_ac_xhuff_tbl_bits_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_ac_xhuff_tbl_huffval_address_b = memory_controller_address_b [10-1+2:2] & {10{select_p_jinfo_ac_xhuff_tbl_huffval_b}};
	p_jinfo_ac_xhuff_tbl_huffval_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_ac_xhuff_tbl_huffval_b;
	p_jinfo_ac_xhuff_tbl_huffval_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_dc_xhuff_tbl_bits_address_b = memory_controller_address_b [7-1+2:2] & {7{select_p_jinfo_dc_xhuff_tbl_bits_b}};
	p_jinfo_dc_xhuff_tbl_bits_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_dc_xhuff_tbl_bits_b;
	p_jinfo_dc_xhuff_tbl_bits_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_dc_xhuff_tbl_huffval_address_b = memory_controller_address_b [10-1+2:2] & {10{select_p_jinfo_dc_xhuff_tbl_huffval_b}};
	p_jinfo_dc_xhuff_tbl_huffval_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_dc_xhuff_tbl_huffval_b;
	p_jinfo_dc_xhuff_tbl_huffval_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_MCUWidth_address_b = memory_controller_address_b [1-1+2:2] & {1{select_p_jinfo_MCUWidth_b}};
	p_jinfo_MCUWidth_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_MCUWidth_b;
	p_jinfo_MCUWidth_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	rgb_buf_address_b = memory_controller_address_b [10-1+2:2] & {10{select_rgb_buf_b}};
	rgb_buf_write_enable_b = memory_controller_write_enable_b & select_rgb_buf_b;
	rgb_buf_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	CurHuffReadBuf_address_b = memory_controller_address_b [1-1+2:2] & {1{select_CurHuffReadBuf_b}};
	CurHuffReadBuf_write_enable_b = memory_controller_write_enable_b & select_CurHuffReadBuf_b;
	CurHuffReadBuf_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	OutData_comp_buf_address_b = memory_controller_address_b [14-1+0:0] & {14{select_OutData_comp_buf_b}};
	OutData_comp_buf_write_enable_b = memory_controller_write_enable_b & select_OutData_comp_buf_b;
	OutData_comp_buf_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	bit_set_mask_address_b = memory_controller_address_b [5-1+2:2] & {5{select_bit_set_mask_b}};
	bit_set_mask_write_enable_b = memory_controller_write_enable_b & select_bit_set_mask_b;
	bit_set_mask_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	read_position_address_b = memory_controller_address_b [1-1+2:2] & {1{select_read_position_b}};
	read_position_write_enable_b = memory_controller_write_enable_b & select_read_position_b;
	read_position_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	current_read_byte_address_b = memory_controller_address_b [1-1+2:2] & {1{select_current_read_byte_b}};
	current_read_byte_write_enable_b = memory_controller_write_enable_b & select_current_read_byte_b;
	current_read_byte_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_dc_dhuff_tbl_ml_address_b = memory_controller_address_b [1-1+2:2] & {1{select_p_jinfo_dc_dhuff_tbl_ml_b}};
	p_jinfo_dc_dhuff_tbl_ml_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_dc_dhuff_tbl_ml_b;
	p_jinfo_dc_dhuff_tbl_ml_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_dc_dhuff_tbl_maxcode_address_b = memory_controller_address_b [7-1+2:2] & {7{select_p_jinfo_dc_dhuff_tbl_maxcode_b}};
	p_jinfo_dc_dhuff_tbl_maxcode_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_dc_dhuff_tbl_maxcode_b;
	p_jinfo_dc_dhuff_tbl_maxcode_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_dc_dhuff_tbl_mincode_address_b = memory_controller_address_b [7-1+2:2] & {7{select_p_jinfo_dc_dhuff_tbl_mincode_b}};
	p_jinfo_dc_dhuff_tbl_mincode_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_dc_dhuff_tbl_mincode_b;
	p_jinfo_dc_dhuff_tbl_mincode_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_dc_dhuff_tbl_valptr_address_b = memory_controller_address_b [7-1+2:2] & {7{select_p_jinfo_dc_dhuff_tbl_valptr_b}};
	p_jinfo_dc_dhuff_tbl_valptr_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_dc_dhuff_tbl_valptr_b;
	p_jinfo_dc_dhuff_tbl_valptr_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_ac_dhuff_tbl_ml_address_b = memory_controller_address_b [1-1+2:2] & {1{select_p_jinfo_ac_dhuff_tbl_ml_b}};
	p_jinfo_ac_dhuff_tbl_ml_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_ac_dhuff_tbl_ml_b;
	p_jinfo_ac_dhuff_tbl_ml_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_ac_dhuff_tbl_maxcode_address_b = memory_controller_address_b [7-1+2:2] & {7{select_p_jinfo_ac_dhuff_tbl_maxcode_b}};
	p_jinfo_ac_dhuff_tbl_maxcode_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_ac_dhuff_tbl_maxcode_b;
	p_jinfo_ac_dhuff_tbl_maxcode_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_ac_dhuff_tbl_mincode_address_b = memory_controller_address_b [7-1+2:2] & {7{select_p_jinfo_ac_dhuff_tbl_mincode_b}};
	p_jinfo_ac_dhuff_tbl_mincode_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_ac_dhuff_tbl_mincode_b;
	p_jinfo_ac_dhuff_tbl_mincode_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_ac_dhuff_tbl_valptr_address_b = memory_controller_address_b [7-1+2:2] & {7{select_p_jinfo_ac_dhuff_tbl_valptr_b}};
	p_jinfo_ac_dhuff_tbl_valptr_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_ac_dhuff_tbl_valptr_b;
	p_jinfo_ac_dhuff_tbl_valptr_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	OutData_comp_vpos_address_b = memory_controller_address_b [2-1+2:2] & {2{select_OutData_comp_vpos_b}};
	OutData_comp_vpos_write_enable_b = memory_controller_write_enable_b & select_OutData_comp_vpos_b;
	OutData_comp_vpos_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	OutData_comp_hpos_address_b = memory_controller_address_b [2-1+2:2] & {2{select_OutData_comp_hpos_b}};
	OutData_comp_hpos_write_enable_b = memory_controller_write_enable_b & select_OutData_comp_hpos_b;
	OutData_comp_hpos_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	JpegFileBuf_address_b = memory_controller_address_b [13-1+0:0] & {13{select_JpegFileBuf_b}};
	JpegFileBuf_write_enable_b = memory_controller_write_enable_b & select_JpegFileBuf_b;
	JpegFileBuf_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	main_0_QuantBuffiii_address_b = memory_controller_address_b [6-1+2:2] & {6{select_main_0_QuantBuffiii_b}};
	main_0_QuantBuffiii_write_enable_b = memory_controller_write_enable_b & select_main_0_QuantBuffiii_b;
	main_0_QuantBuffiii_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_0_HuffBuffii_address_b = memory_controller_address_b [8-1+2:2] & {8{select_main_0_HuffBuffii_b}};
	main_0_HuffBuffii_write_enable_b = memory_controller_write_enable_b & select_main_0_HuffBuffii_b;
	main_0_HuffBuffii_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_0_IDCTBuffii_address_b = memory_controller_address_b [9-1+2:2] & {9{select_main_0_IDCTBuffii_b}};
	main_0_IDCTBuffii_write_enable_b = memory_controller_write_enable_b & select_main_0_IDCTBuffii_b;
	main_0_IDCTBuffii_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_main_result_reg_b[ram_latency]}} | {1{select_p_jinfo_image_height_reg_b[ram_latency]}} | {1{select_p_jinfo_image_width_reg_b[ram_latency]}} | {2{select_p_jinfo_ac_xhuff_tbl_bits_reg_b[ram_latency]}} | {2{select_p_jinfo_ac_xhuff_tbl_huffval_reg_b[ram_latency]}} | {2{select_p_jinfo_dc_xhuff_tbl_bits_reg_b[ram_latency]}} | {2{select_p_jinfo_dc_xhuff_tbl_huffval_reg_b[ram_latency]}} | {2{select_p_jinfo_MCUWidth_reg_b[ram_latency]}} | {2{select_rgb_buf_reg_b[ram_latency]}} | {2{select_CurHuffReadBuf_reg_b[ram_latency]}} | {2{select_bit_set_mask_reg_b[ram_latency]}} | {2{select_read_position_reg_b[ram_latency]}} | {2{select_current_read_byte_reg_b[ram_latency]}} | {2{select_p_jinfo_dc_dhuff_tbl_ml_reg_b[ram_latency]}} | {2{select_p_jinfo_dc_dhuff_tbl_maxcode_reg_b[ram_latency]}} | {2{select_p_jinfo_dc_dhuff_tbl_mincode_reg_b[ram_latency]}} | {2{select_p_jinfo_dc_dhuff_tbl_valptr_reg_b[ram_latency]}} | {2{select_p_jinfo_ac_dhuff_tbl_ml_reg_b[ram_latency]}} | {2{select_p_jinfo_ac_dhuff_tbl_maxcode_reg_b[ram_latency]}} | {2{select_p_jinfo_ac_dhuff_tbl_mincode_reg_b[ram_latency]}} | {2{select_p_jinfo_ac_dhuff_tbl_valptr_reg_b[ram_latency]}} | {2{select_OutData_comp_vpos_reg_b[ram_latency]}} | {2{select_OutData_comp_hpos_reg_b[ram_latency]}} | {2{select_main_0_QuantBuffiii_reg_b[ram_latency]}} | {2{select_main_0_HuffBuffii_reg_b[ram_latency]}} | {2{select_main_0_IDCTBuffii_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_main_result_out_b | memory_controller_p_jinfo_image_height_out_b | memory_controller_p_jinfo_image_width_out_b | memory_controller_p_jinfo_comps_info_dc_tbl_no_out_b | memory_controller_p_jinfo_ac_xhuff_tbl_bits_out_b | memory_controller_p_jinfo_ac_xhuff_tbl_huffval_out_b | memory_controller_p_jinfo_dc_xhuff_tbl_bits_out_b | memory_controller_p_jinfo_dc_xhuff_tbl_huffval_out_b | memory_controller_p_jinfo_MCUWidth_out_b | memory_controller_rgb_buf_out_b | memory_controller_CurHuffReadBuf_out_b | memory_controller_OutData_comp_buf_out_b | memory_controller_bit_set_mask_out_b | memory_controller_read_position_out_b | memory_controller_current_read_byte_out_b | memory_controller_p_jinfo_dc_dhuff_tbl_ml_out_b | memory_controller_p_jinfo_dc_dhuff_tbl_maxcode_out_b | memory_controller_p_jinfo_dc_dhuff_tbl_mincode_out_b | memory_controller_p_jinfo_dc_dhuff_tbl_valptr_out_b | memory_controller_p_jinfo_ac_dhuff_tbl_ml_out_b | memory_controller_p_jinfo_ac_dhuff_tbl_maxcode_out_b | memory_controller_p_jinfo_ac_dhuff_tbl_mincode_out_b | memory_controller_p_jinfo_ac_dhuff_tbl_valptr_out_b | memory_controller_OutData_comp_vpos_out_b | memory_controller_OutData_comp_hpos_out_b | memory_controller_JpegFileBuf_out_b | memory_controller_main_0_QuantBuffiii_out_b | memory_controller_main_0_HuffBuffii_out_b | memory_controller_main_0_IDCTBuffii_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_main_result_reg_b[j+1] <= select_main_result_reg_b[j];
select_p_jinfo_image_height_reg_b[j+1] <= select_p_jinfo_image_height_reg_b[j];
select_p_jinfo_image_width_reg_b[j+1] <= select_p_jinfo_image_width_reg_b[j];
select_p_jinfo_comps_info_dc_tbl_no_reg_b[j+1] <= select_p_jinfo_comps_info_dc_tbl_no_reg_b[j];
select_p_jinfo_ac_xhuff_tbl_bits_reg_b[j+1] <= select_p_jinfo_ac_xhuff_tbl_bits_reg_b[j];
select_p_jinfo_ac_xhuff_tbl_huffval_reg_b[j+1] <= select_p_jinfo_ac_xhuff_tbl_huffval_reg_b[j];
select_p_jinfo_dc_xhuff_tbl_bits_reg_b[j+1] <= select_p_jinfo_dc_xhuff_tbl_bits_reg_b[j];
select_p_jinfo_dc_xhuff_tbl_huffval_reg_b[j+1] <= select_p_jinfo_dc_xhuff_tbl_huffval_reg_b[j];
select_p_jinfo_MCUWidth_reg_b[j+1] <= select_p_jinfo_MCUWidth_reg_b[j];
select_rgb_buf_reg_b[j+1] <= select_rgb_buf_reg_b[j];
select_CurHuffReadBuf_reg_b[j+1] <= select_CurHuffReadBuf_reg_b[j];
select_OutData_comp_buf_reg_b[j+1] <= select_OutData_comp_buf_reg_b[j];
select_bit_set_mask_reg_b[j+1] <= select_bit_set_mask_reg_b[j];
select_read_position_reg_b[j+1] <= select_read_position_reg_b[j];
select_current_read_byte_reg_b[j+1] <= select_current_read_byte_reg_b[j];
select_p_jinfo_dc_dhuff_tbl_ml_reg_b[j+1] <= select_p_jinfo_dc_dhuff_tbl_ml_reg_b[j];
select_p_jinfo_dc_dhuff_tbl_maxcode_reg_b[j+1] <= select_p_jinfo_dc_dhuff_tbl_maxcode_reg_b[j];
select_p_jinfo_dc_dhuff_tbl_mincode_reg_b[j+1] <= select_p_jinfo_dc_dhuff_tbl_mincode_reg_b[j];
select_p_jinfo_dc_dhuff_tbl_valptr_reg_b[j+1] <= select_p_jinfo_dc_dhuff_tbl_valptr_reg_b[j];
select_p_jinfo_ac_dhuff_tbl_ml_reg_b[j+1] <= select_p_jinfo_ac_dhuff_tbl_ml_reg_b[j];
select_p_jinfo_ac_dhuff_tbl_maxcode_reg_b[j+1] <= select_p_jinfo_ac_dhuff_tbl_maxcode_reg_b[j];
select_p_jinfo_ac_dhuff_tbl_mincode_reg_b[j+1] <= select_p_jinfo_ac_dhuff_tbl_mincode_reg_b[j];
select_p_jinfo_ac_dhuff_tbl_valptr_reg_b[j+1] <= select_p_jinfo_ac_dhuff_tbl_valptr_reg_b[j];
select_OutData_comp_vpos_reg_b[j+1] <= select_OutData_comp_vpos_reg_b[j];
select_OutData_comp_hpos_reg_b[j+1] <= select_OutData_comp_hpos_reg_b[j];
select_JpegFileBuf_reg_b[j+1] <= select_JpegFileBuf_reg_b[j];
select_main_0_QuantBuffiii_reg_b[j+1] <= select_main_0_QuantBuffiii_reg_b[j];
select_main_0_HuffBuffii_reg_b[j+1] <= select_main_0_HuffBuffii_reg_b[j];
select_main_0_IDCTBuffii_reg_b[j+1] <= select_main_0_IDCTBuffii_reg_b[j];
end
always @(*)
begin
select_main_result_reg_b[0] <= select_main_result_b;
select_p_jinfo_image_height_reg_b[0] <= select_p_jinfo_image_height_b;
select_p_jinfo_image_width_reg_b[0] <= select_p_jinfo_image_width_b;
select_p_jinfo_comps_info_dc_tbl_no_reg_b[0] <= select_p_jinfo_comps_info_dc_tbl_no_b;
select_p_jinfo_ac_xhuff_tbl_bits_reg_b[0] <= select_p_jinfo_ac_xhuff_tbl_bits_b;
select_p_jinfo_ac_xhuff_tbl_huffval_reg_b[0] <= select_p_jinfo_ac_xhuff_tbl_huffval_b;
select_p_jinfo_dc_xhuff_tbl_bits_reg_b[0] <= select_p_jinfo_dc_xhuff_tbl_bits_b;
select_p_jinfo_dc_xhuff_tbl_huffval_reg_b[0] <= select_p_jinfo_dc_xhuff_tbl_huffval_b;
select_p_jinfo_MCUWidth_reg_b[0] <= select_p_jinfo_MCUWidth_b;
select_rgb_buf_reg_b[0] <= select_rgb_buf_b;
select_CurHuffReadBuf_reg_b[0] <= select_CurHuffReadBuf_b;
select_OutData_comp_buf_reg_b[0] <= select_OutData_comp_buf_b;
select_bit_set_mask_reg_b[0] <= select_bit_set_mask_b;
select_read_position_reg_b[0] <= select_read_position_b;
select_current_read_byte_reg_b[0] <= select_current_read_byte_b;
select_p_jinfo_dc_dhuff_tbl_ml_reg_b[0] <= select_p_jinfo_dc_dhuff_tbl_ml_b;
select_p_jinfo_dc_dhuff_tbl_maxcode_reg_b[0] <= select_p_jinfo_dc_dhuff_tbl_maxcode_b;
select_p_jinfo_dc_dhuff_tbl_mincode_reg_b[0] <= select_p_jinfo_dc_dhuff_tbl_mincode_b;
select_p_jinfo_dc_dhuff_tbl_valptr_reg_b[0] <= select_p_jinfo_dc_dhuff_tbl_valptr_b;
select_p_jinfo_ac_dhuff_tbl_ml_reg_b[0] <= select_p_jinfo_ac_dhuff_tbl_ml_b;
select_p_jinfo_ac_dhuff_tbl_maxcode_reg_b[0] <= select_p_jinfo_ac_dhuff_tbl_maxcode_b;
select_p_jinfo_ac_dhuff_tbl_mincode_reg_b[0] <= select_p_jinfo_ac_dhuff_tbl_mincode_b;
select_p_jinfo_ac_dhuff_tbl_valptr_reg_b[0] <= select_p_jinfo_ac_dhuff_tbl_valptr_b;
select_OutData_comp_vpos_reg_b[0] <= select_OutData_comp_vpos_b;
select_OutData_comp_hpos_reg_b[0] <= select_OutData_comp_hpos_b;
select_JpegFileBuf_reg_b[0] <= select_JpegFileBuf_b;
select_main_0_QuantBuffiii_reg_b[0] <= select_main_0_QuantBuffiii_b;
select_main_0_HuffBuffii_reg_b[0] <= select_main_0_HuffBuffii_b;
select_main_0_IDCTBuffii_reg_b[0] <= select_main_0_IDCTBuffii_b;
end

endmodule 

`timescale 1 ns / 1 ns
module ChenIDct
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_x,
	arg_y
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_ChenIDct_BB__1_1 = 6'd1;
parameter [5:0] LEGUP_F_ChenIDct_BB__1_2 = 6'd2;
parameter [5:0] LEGUP_F_ChenIDct_BB__1_3 = 6'd3;
parameter [5:0] LEGUP_F_ChenIDct_BB__1_4 = 6'd4;
parameter [5:0] LEGUP_F_ChenIDct_BB__1_5 = 6'd5;
parameter [5:0] LEGUP_F_ChenIDct_BB__1_6 = 6'd6;
parameter [5:0] LEGUP_F_ChenIDct_BB__1_7 = 6'd7;
parameter [5:0] LEGUP_F_ChenIDct_BB__1_8 = 6'd8;
parameter [5:0] LEGUP_F_ChenIDct_BB__1_9 = 6'd9;
parameter [5:0] LEGUP_F_ChenIDct_BB__1_10 = 6'd10;
parameter [5:0] LEGUP_F_ChenIDct_BB__1_11 = 6'd11;
parameter [5:0] LEGUP_F_ChenIDct_BB__1_12 = 6'd12;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader23preheader_13 = 6'd13;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader23_14 = 6'd14;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader23_15 = 6'd15;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader23_16 = 6'd16;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader23_17 = 6'd17;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader23_18 = 6'd18;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader23_19 = 6'd19;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader23_20 = 6'd20;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader23_21 = 6'd21;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader23_22 = 6'd22;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader23_23 = 6'd23;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader23_24 = 6'd24;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheaderpreheader_25 = 6'd25;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_26 = 6'd26;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_27 = 6'd27;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_28 = 6'd28;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_29 = 6'd29;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_30 = 6'd30;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_31 = 6'd31;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_32 = 6'd32;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_33 = 6'd33;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_34 = 6'd34;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_35 = 6'd35;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_36 = 6'd36;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_37 = 6'd37;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_38 = 6'd38;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_39 = 6'd39;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_40 = 6'd40;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_41 = 6'd41;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_42 = 6'd42;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_43 = 6'd43;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_44 = 6'd44;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_45 = 6'd45;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_46 = 6'd46;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_47 = 6'd47;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_48 = 6'd48;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_49 = 6'd49;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_50 = 6'd50;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_51 = 6'd51;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_52 = 6'd52;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_53 = 6'd53;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_54 = 6'd54;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_55 = 6'd55;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_56 = 6'd56;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_57 = 6'd57;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_58 = 6'd58;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_59 = 6'd59;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_60 = 6'd60;
parameter [5:0] LEGUP_F_ChenIDct_BB_preheader_61 = 6'd61;
parameter [5:0] LEGUP_F_ChenIDct_BB__148_62 = 6'd62;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
integer i;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_x;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_y;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] ChenIDct_1_i027;
reg [31:0] ChenIDct_1_i027_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep10_reg;
reg [31:0] ChenIDct_1_2;
reg [31:0] ChenIDct_1_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep12_reg;
reg [31:0] ChenIDct_1_3;
reg [31:0] ChenIDct_1_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep14_reg;
reg [31:0] ChenIDct_1_4;
reg [31:0] ChenIDct_1_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep16_reg;
reg [31:0] ChenIDct_1_5;
reg [31:0] ChenIDct_1_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep18_reg;
reg [31:0] ChenIDct_1_6;
reg [31:0] ChenIDct_1_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep20_reg;
reg [31:0] ChenIDct_1_7;
reg [31:0] ChenIDct_1_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep22_reg;
reg [31:0] ChenIDct_1_8;
reg [31:0] ChenIDct_1_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_1_scevgep25_reg;
reg [31:0] ChenIDct_1_9;
reg [31:0] ChenIDct_1_9_reg;
reg [31:0] ChenIDct_1_10;
reg [31:0] ChenIDct_1_10_reg;
reg [31:0] ChenIDct_1_11;
reg [31:0] ChenIDct_1_11_reg;
reg [31:0] ChenIDct_1_12;
reg [31:0] ChenIDct_1_12_reg;
reg [31:0] ChenIDct_1_13;
reg [31:0] ChenIDct_1_13_reg;
reg [31:0] ChenIDct_1_14;
reg [31:0] ChenIDct_1_14_reg;
reg [31:0] ChenIDct_1_15;
reg [31:0] ChenIDct_1_15_reg;
reg [31:0] ChenIDct_1_16;
reg [31:0] ChenIDct_1_16_reg;
reg [31:0] ChenIDct_1_17;
reg [31:0] ChenIDct_1_17_reg;
reg [31:0] ChenIDct_1_18;
reg [31:0] ChenIDct_1_18_reg;
reg [31:0] ChenIDct_1_19;
reg [31:0] ChenIDct_1_19_reg;
reg [31:0] ChenIDct_1_20;
reg [31:0] ChenIDct_1_20_reg;
reg [31:0] ChenIDct_1_21;
reg [31:0] ChenIDct_1_21_reg;
reg [31:0] ChenIDct_1_22;
reg [31:0] ChenIDct_1_22_reg;
reg [31:0] ChenIDct_1_23;
reg [31:0] ChenIDct_1_23_reg;
reg [31:0] ChenIDct_1_24;
reg [31:0] ChenIDct_1_24_reg;
reg [31:0] ChenIDct_1_25;
reg [31:0] ChenIDct_1_25_reg;
reg [31:0] ChenIDct_1_26;
reg [31:0] ChenIDct_1_26_reg;
reg [31:0] ChenIDct_1_27;
reg [31:0] ChenIDct_1_27_reg;
reg [31:0] ChenIDct_1_28;
reg [31:0] ChenIDct_1_28_reg;
reg [31:0] ChenIDct_1_29;
reg [31:0] ChenIDct_1_29_reg;
reg [31:0] ChenIDct_1_30;
reg [31:0] ChenIDct_1_30_reg;
reg [31:0] ChenIDct_1_31;
reg [31:0] ChenIDct_1_31_reg;
reg [31:0] ChenIDct_1_32;
reg [31:0] ChenIDct_1_32_reg;
reg [31:0] ChenIDct_1_33;
reg [31:0] ChenIDct_1_33_reg;
reg [31:0] ChenIDct_1_34;
reg [31:0] ChenIDct_1_34_reg;
reg [31:0] ChenIDct_1_35;
reg [31:0] ChenIDct_1_35_reg;
reg [31:0] ChenIDct_1_36;
reg [31:0] ChenIDct_1_36_reg;
reg [31:0] ChenIDct_1_37;
reg [31:0] ChenIDct_1_37_reg;
reg [31:0] ChenIDct_1_38;
reg [31:0] ChenIDct_1_38_reg;
reg [31:0] ChenIDct_1_39;
reg [31:0] ChenIDct_1_39_reg;
reg [31:0] ChenIDct_1_40;
reg [31:0] ChenIDct_1_40_reg;
reg [31:0] ChenIDct_1_41;
reg [31:0] ChenIDct_1_41_reg;
reg [31:0] ChenIDct_1_42;
reg [31:0] ChenIDct_1_42_reg;
reg [31:0] ChenIDct_1_43;
reg [31:0] ChenIDct_1_43_reg;
reg [31:0] ChenIDct_1_44;
reg [31:0] ChenIDct_1_44_reg;
reg [31:0] ChenIDct_1_45;
reg [31:0] ChenIDct_1_45_reg;
reg [31:0] ChenIDct_1_46;
reg [31:0] ChenIDct_1_46_reg;
reg [31:0] ChenIDct_1_47;
reg [31:0] ChenIDct_1_47_reg;
reg [31:0] ChenIDct_1_48;
reg [31:0] ChenIDct_1_48_reg;
reg [31:0] ChenIDct_1_49;
reg [31:0] ChenIDct_1_49_reg;
reg [31:0] ChenIDct_1_50;
reg [31:0] ChenIDct_1_50_reg;
reg [31:0] ChenIDct_1_51;
reg [31:0] ChenIDct_1_51_reg;
reg [31:0] ChenIDct_1_52;
reg [31:0] ChenIDct_1_52_reg;
reg [31:0] ChenIDct_1_53;
reg [31:0] ChenIDct_1_53_reg;
reg [31:0] ChenIDct_1_54;
reg [31:0] ChenIDct_1_54_reg;
reg [31:0] ChenIDct_1_55;
reg [31:0] ChenIDct_1_55_reg;
reg [31:0] ChenIDct_1_56;
reg [31:0] ChenIDct_1_56_reg;
reg [31:0] ChenIDct_1_57;
reg [31:0] ChenIDct_1_57_reg;
reg [31:0] ChenIDct_1_58;
reg [31:0] ChenIDct_1_58_reg;
reg [31:0] ChenIDct_1_59;
reg [31:0] ChenIDct_1_59_reg;
reg [31:0] ChenIDct_1_60;
reg [31:0] ChenIDct_1_60_reg;
reg [31:0] ChenIDct_1_61;
reg [31:0] ChenIDct_1_61_reg;
reg [31:0] ChenIDct_1_62;
reg [31:0] ChenIDct_1_62_reg;
reg [31:0] ChenIDct_1_63;
reg [31:0] ChenIDct_1_63_reg;
reg [31:0] ChenIDct_1_64;
reg [31:0] ChenIDct_1_64_reg;
reg [31:0] ChenIDct_1_65;
reg [31:0] ChenIDct_1_65_reg;
reg [31:0] ChenIDct_1_66;
reg [31:0] ChenIDct_1_66_reg;
reg [31:0] ChenIDct_1_67;
reg [31:0] ChenIDct_1_67_reg;
reg [31:0] ChenIDct_1_68;
reg [31:0] ChenIDct_1_68_reg;
reg [31:0] ChenIDct_1_69;
reg [31:0] ChenIDct_1_69_reg;
reg [31:0] ChenIDct_1_70;
reg [31:0] ChenIDct_1_70_reg;
reg [31:0] ChenIDct_1_71;
reg [31:0] ChenIDct_1_71_reg;
reg  ChenIDct_1_exitcond9;
reg  ChenIDct_1_exitcond9_reg;
reg [31:0] ChenIDct_preheader23_i126;
reg [31:0] ChenIDct_preheader23_i126_reg;
reg [31:0] ChenIDct_preheader23_72;
reg [31:0] ChenIDct_preheader23_72_reg;
reg [31:0] ChenIDct_preheader23_73;
reg [31:0] ChenIDct_preheader23_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader23_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader23_scevgep_reg;
reg [31:0] ChenIDct_preheader23_74;
reg [31:0] ChenIDct_preheader23_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader23_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader23_scevgep2_reg;
reg [31:0] ChenIDct_preheader23_75;
reg [31:0] ChenIDct_preheader23_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader23_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader23_scevgep3_reg;
reg [31:0] ChenIDct_preheader23_76;
reg [31:0] ChenIDct_preheader23_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader23_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader23_scevgep4_reg;
reg [31:0] ChenIDct_preheader23_77;
reg [31:0] ChenIDct_preheader23_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader23_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader23_scevgep5_reg;
reg [31:0] ChenIDct_preheader23_78;
reg [31:0] ChenIDct_preheader23_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader23_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader23_scevgep6_reg;
reg [31:0] ChenIDct_preheader23_79;
reg [31:0] ChenIDct_preheader23_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader23_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader23_scevgep7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader23_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader23_scevgep8_reg;
reg [31:0] ChenIDct_preheader23_80;
reg [31:0] ChenIDct_preheader23_80_reg;
reg [31:0] ChenIDct_preheader23_81;
reg [31:0] ChenIDct_preheader23_81_reg;
reg [31:0] ChenIDct_preheader23_82;
reg [31:0] ChenIDct_preheader23_82_reg;
reg [31:0] ChenIDct_preheader23_83;
reg [31:0] ChenIDct_preheader23_83_reg;
reg [31:0] ChenIDct_preheader23_84;
reg [31:0] ChenIDct_preheader23_84_reg;
reg [31:0] ChenIDct_preheader23_85;
reg [31:0] ChenIDct_preheader23_85_reg;
reg [31:0] ChenIDct_preheader23_86;
reg [31:0] ChenIDct_preheader23_86_reg;
reg [31:0] ChenIDct_preheader23_87;
reg [31:0] ChenIDct_preheader23_87_reg;
reg [31:0] ChenIDct_preheader23_88;
reg [31:0] ChenIDct_preheader23_88_reg;
reg [31:0] ChenIDct_preheader23_89;
reg [31:0] ChenIDct_preheader23_89_reg;
reg [31:0] ChenIDct_preheader23_90;
reg [31:0] ChenIDct_preheader23_90_reg;
reg [31:0] ChenIDct_preheader23_91;
reg [31:0] ChenIDct_preheader23_91_reg;
reg [31:0] ChenIDct_preheader23_92;
reg [31:0] ChenIDct_preheader23_92_reg;
reg [31:0] ChenIDct_preheader23_93;
reg [31:0] ChenIDct_preheader23_93_reg;
reg [31:0] ChenIDct_preheader23_94;
reg [31:0] ChenIDct_preheader23_94_reg;
reg [31:0] ChenIDct_preheader23_95;
reg [31:0] ChenIDct_preheader23_95_reg;
reg [31:0] ChenIDct_preheader23_96;
reg [31:0] ChenIDct_preheader23_96_reg;
reg [31:0] ChenIDct_preheader23_97;
reg [31:0] ChenIDct_preheader23_97_reg;
reg [31:0] ChenIDct_preheader23_98;
reg [31:0] ChenIDct_preheader23_98_reg;
reg [31:0] ChenIDct_preheader23_99;
reg [31:0] ChenIDct_preheader23_99_reg;
reg [31:0] ChenIDct_preheader23_100;
reg [31:0] ChenIDct_preheader23_100_reg;
reg [31:0] ChenIDct_preheader23_101;
reg [31:0] ChenIDct_preheader23_101_reg;
reg [31:0] ChenIDct_preheader23_102;
reg [31:0] ChenIDct_preheader23_102_reg;
reg [31:0] ChenIDct_preheader23_103;
reg [31:0] ChenIDct_preheader23_103_reg;
reg [31:0] ChenIDct_preheader23_104;
reg [31:0] ChenIDct_preheader23_104_reg;
reg [31:0] ChenIDct_preheader23_105;
reg [31:0] ChenIDct_preheader23_105_reg;
reg [31:0] ChenIDct_preheader23_106;
reg [31:0] ChenIDct_preheader23_106_reg;
reg [31:0] ChenIDct_preheader23_107;
reg [31:0] ChenIDct_preheader23_107_reg;
reg [31:0] ChenIDct_preheader23_108;
reg [31:0] ChenIDct_preheader23_108_reg;
reg [31:0] ChenIDct_preheader23_109;
reg [31:0] ChenIDct_preheader23_109_reg;
reg [31:0] ChenIDct_preheader23_110;
reg [31:0] ChenIDct_preheader23_110_reg;
reg [31:0] ChenIDct_preheader23_111;
reg [31:0] ChenIDct_preheader23_111_reg;
reg [31:0] ChenIDct_preheader23_112;
reg [31:0] ChenIDct_preheader23_112_reg;
reg [31:0] ChenIDct_preheader23_113;
reg [31:0] ChenIDct_preheader23_113_reg;
reg [31:0] ChenIDct_preheader23_114;
reg [31:0] ChenIDct_preheader23_114_reg;
reg [31:0] ChenIDct_preheader23_115;
reg [31:0] ChenIDct_preheader23_115_reg;
reg [31:0] ChenIDct_preheader23_116;
reg [31:0] ChenIDct_preheader23_116_reg;
reg [31:0] ChenIDct_preheader23_117;
reg [31:0] ChenIDct_preheader23_117_reg;
reg [31:0] ChenIDct_preheader23_118;
reg [31:0] ChenIDct_preheader23_118_reg;
reg [31:0] ChenIDct_preheader23_119;
reg [31:0] ChenIDct_preheader23_119_reg;
reg [31:0] ChenIDct_preheader23_120;
reg [31:0] ChenIDct_preheader23_120_reg;
reg [31:0] ChenIDct_preheader23_121;
reg [31:0] ChenIDct_preheader23_121_reg;
reg [31:0] ChenIDct_preheader23_122;
reg [31:0] ChenIDct_preheader23_122_reg;
reg [31:0] ChenIDct_preheader23_123;
reg [31:0] ChenIDct_preheader23_123_reg;
reg [31:0] ChenIDct_preheader23_124;
reg [31:0] ChenIDct_preheader23_124_reg;
reg [31:0] ChenIDct_preheader23_125;
reg [31:0] ChenIDct_preheader23_125_reg;
reg [31:0] ChenIDct_preheader23_126;
reg [31:0] ChenIDct_preheader23_126_reg;
reg [31:0] ChenIDct_preheader23_127;
reg [31:0] ChenIDct_preheader23_127_reg;
reg [31:0] ChenIDct_preheader23_128;
reg [31:0] ChenIDct_preheader23_128_reg;
reg [31:0] ChenIDct_preheader23_129;
reg [31:0] ChenIDct_preheader23_129_reg;
reg [31:0] ChenIDct_preheader23_130;
reg [31:0] ChenIDct_preheader23_130_reg;
reg [31:0] ChenIDct_preheader23_131;
reg [31:0] ChenIDct_preheader23_131_reg;
reg [31:0] ChenIDct_preheader23_132;
reg [31:0] ChenIDct_preheader23_132_reg;
reg [31:0] ChenIDct_preheader23_133;
reg [31:0] ChenIDct_preheader23_133_reg;
reg [31:0] ChenIDct_preheader23_134;
reg [31:0] ChenIDct_preheader23_134_reg;
reg [31:0] ChenIDct_preheader23_135;
reg [31:0] ChenIDct_preheader23_135_reg;
reg [31:0] ChenIDct_preheader23_136;
reg [31:0] ChenIDct_preheader23_136_reg;
reg [31:0] ChenIDct_preheader23_137;
reg [31:0] ChenIDct_preheader23_137_reg;
reg [31:0] ChenIDct_preheader23_138;
reg [31:0] ChenIDct_preheader23_138_reg;
reg [31:0] ChenIDct_preheader23_139;
reg [31:0] ChenIDct_preheader23_139_reg;
reg [31:0] ChenIDct_preheader23_140;
reg [31:0] ChenIDct_preheader23_140_reg;
reg  ChenIDct_preheader23_exitcond;
reg  ChenIDct_preheader23_exitcond_reg;
reg [31:0] ChenIDct_preheader_i224;
reg [31:0] ChenIDct_preheader_i224_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader_aptr025;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_preheader_aptr025_reg;
reg [31:0] ChenIDct_preheader_141;
reg [31:0] ChenIDct_preheader_141_reg;
reg [31:0] ChenIDct_preheader_142;
reg [31:0] ChenIDct_preheader_142_reg;
reg [31:0] ChenIDct_preheader_143;
reg [31:0] ChenIDct_preheader_143_reg;
reg [31:0] ChenIDct_preheader_144;
reg [31:0] ChenIDct_preheader_144_reg;
reg [31:0] ChenIDct_preheader_145;
reg [31:0] ChenIDct_preheader_145_reg;
reg [31:0] ChenIDct_preheader_146;
reg [31:0] ChenIDct_preheader_146_reg;
reg [31:0] ChenIDct_preheader_147;
reg [31:0] ChenIDct_preheader_147_reg;
reg  ChenIDct_preheader_exitcond1;
reg  ChenIDct_preheader_exitcond1_reg;
wire [12:0] hana_jpg_address_a;
wire  hana_jpg_write_enable_a;
wire [7:0] hana_jpg_in_a;
wire [7:0] hana_jpg_out_a;
wire [12:0] hana_jpg_address_b;
wire  hana_jpg_write_enable_b;
wire [7:0] hana_jpg_in_b;
wire [7:0] hana_jpg_out_b;
wire [13:0] hana_bmp_address_a;
wire  hana_bmp_write_enable_a;
wire [7:0] hana_bmp_in_a;
wire [7:0] hana_bmp_out_a;
wire [13:0] hana_bmp_address_b;
wire  hana_bmp_write_enable_b;
wire [7:0] hana_bmp_in_b;
wire [7:0] hana_bmp_out_b;
wire [3:0] out_unread_marker_address_a;
wire  out_unread_marker_write_enable_a;
wire [31:0] out_unread_marker_in_a;
wire [31:0] out_unread_marker_out_a;
wire [3:0] out_unread_marker_address_b;
wire  out_unread_marker_write_enable_b;
wire [31:0] out_unread_marker_in_b;
wire [31:0] out_unread_marker_out_b;
wire [1:0] out_index_get_sof_address_a;
wire  out_index_get_sof_write_enable_a;
wire [31:0] out_index_get_sof_in_a;
wire [31:0] out_index_get_sof_out_a;
wire [1:0] out_index_get_sof_address_b;
wire  out_index_get_sof_write_enable_b;
wire [31:0] out_index_get_sof_in_b;
wire [31:0] out_index_get_sof_out_b;
wire [1:0] out_v_samp_factor_get_sof_address_a;
wire  out_v_samp_factor_get_sof_write_enable_a;
wire [31:0] out_v_samp_factor_get_sof_in_a;
wire [31:0] out_v_samp_factor_get_sof_out_a;
wire [1:0] out_v_samp_factor_get_sof_address_b;
wire  out_v_samp_factor_get_sof_write_enable_b;
wire [31:0] out_v_samp_factor_get_sof_in_b;
wire [31:0] out_v_samp_factor_get_sof_out_b;
wire [1:0] out_comp_id_get_sos_address_a;
wire  out_comp_id_get_sos_write_enable_a;
wire [31:0] out_comp_id_get_sos_in_a;
wire [31:0] out_comp_id_get_sos_out_a;
wire [1:0] out_comp_id_get_sos_address_b;
wire  out_comp_id_get_sos_write_enable_b;
wire [31:0] out_comp_id_get_sos_in_b;
wire [31:0] out_comp_id_get_sos_out_b;
wire [1:0] out_ac_tbl_no_get_sos_address_a;
wire  out_ac_tbl_no_get_sos_write_enable_a;
wire [31:0] out_ac_tbl_no_get_sos_in_a;
wire [31:0] out_ac_tbl_no_get_sos_out_a;
wire [1:0] out_ac_tbl_no_get_sos_address_b;
wire  out_ac_tbl_no_get_sos_write_enable_b;
wire [31:0] out_ac_tbl_no_get_sos_in_b;
wire [31:0] out_ac_tbl_no_get_sos_out_b;
wire [1:0] out_length_get_dht_address_a;
wire  out_length_get_dht_write_enable_a;
wire [31:0] out_length_get_dht_in_a;
wire [31:0] out_length_get_dht_out_a;
wire [1:0] out_length_get_dht_address_b;
wire  out_length_get_dht_write_enable_b;
wire [31:0] out_length_get_dht_in_b;
wire [31:0] out_length_get_dht_out_b;
wire [1:0] out_index_get_dht_address_a;
wire  out_index_get_dht_write_enable_a;
wire [31:0] out_index_get_dht_in_a;
wire [31:0] out_index_get_dht_out_a;
wire [1:0] out_index_get_dht_address_b;
wire  out_index_get_dht_write_enable_b;
wire [31:0] out_index_get_dht_in_b;
wire [31:0] out_index_get_dht_out_b;
wire [1:0] out_count_get_dht_address_a;
wire  out_count_get_dht_write_enable_a;
wire [31:0] out_count_get_dht_in_a;
wire [31:0] out_count_get_dht_out_a;
wire [1:0] out_count_get_dht_address_b;
wire  out_count_get_dht_write_enable_b;
wire [31:0] out_count_get_dht_in_b;
wire [31:0] out_count_get_dht_out_b;
wire  out_length_get_dqt_address_a;
wire  out_length_get_dqt_write_enable_a;
wire [31:0] out_length_get_dqt_in_a;
wire [31:0] out_length_get_dqt_out_a;
wire  out_length_get_dqt_address_b;
wire  out_length_get_dqt_write_enable_b;
wire [31:0] out_length_get_dqt_in_b;
wire [31:0] out_length_get_dqt_out_b;
wire  out_prec_get_dht_address_a;
wire  out_prec_get_dht_write_enable_a;
wire [31:0] out_prec_get_dht_in_a;
wire [31:0] out_prec_get_dht_out_a;
wire  out_prec_get_dht_address_b;
wire  out_prec_get_dht_write_enable_b;
wire [31:0] out_prec_get_dht_in_b;
wire [31:0] out_prec_get_dht_out_b;
wire  out_num_get_dht_address_a;
wire  out_num_get_dht_write_enable_a;
wire [31:0] out_num_get_dht_in_a;
wire [31:0] out_num_get_dht_out_a;
wire  out_num_get_dht_address_b;
wire  out_num_get_dht_write_enable_b;
wire [31:0] out_num_get_dht_in_b;
wire [31:0] out_num_get_dht_out_b;
wire [5:0] izigzag_index_address_a;
wire  izigzag_index_write_enable_a;
wire [31:0] izigzag_index_in_a;
wire [31:0] izigzag_index_out_a;
wire [5:0] izigzag_index_address_b;
wire  izigzag_index_write_enable_b;
wire [31:0] izigzag_index_in_b;
wire [31:0] izigzag_index_out_b;
wire  main_result_address_a;
wire  main_result_write_enable_a;
wire [31:0] main_result_in_a;
wire [31:0] main_result_out_a;
wire  main_result_address_b;
wire  main_result_write_enable_b;
wire [31:0] main_result_in_b;
wire [31:0] main_result_out_b;
wire  p_jinfo_image_height_address_a;
wire  p_jinfo_image_height_write_enable_a;
wire [15:0] p_jinfo_image_height_in_a;
wire [15:0] p_jinfo_image_height_out_a;
wire  p_jinfo_image_height_address_b;
wire  p_jinfo_image_height_write_enable_b;
wire [15:0] p_jinfo_image_height_in_b;
wire [15:0] p_jinfo_image_height_out_b;
wire  p_jinfo_image_width_address_a;
wire  p_jinfo_image_width_write_enable_a;
wire [15:0] p_jinfo_image_width_in_a;
wire [15:0] p_jinfo_image_width_out_a;
wire  p_jinfo_image_width_address_b;
wire  p_jinfo_image_width_write_enable_b;
wire [15:0] p_jinfo_image_width_in_b;
wire [15:0] p_jinfo_image_width_out_b;
wire [1:0] p_jinfo_comps_info_index_address_a;
wire  p_jinfo_comps_info_index_write_enable_a;
wire [7:0] p_jinfo_comps_info_index_in_a;
wire [7:0] p_jinfo_comps_info_index_out_a;
wire [1:0] p_jinfo_comps_info_index_address_b;
wire  p_jinfo_comps_info_index_write_enable_b;
wire [7:0] p_jinfo_comps_info_index_in_b;
wire [7:0] p_jinfo_comps_info_index_out_b;
wire [1:0] p_jinfo_comps_info_id_address_a;
wire  p_jinfo_comps_info_id_write_enable_a;
wire [7:0] p_jinfo_comps_info_id_in_a;
wire [7:0] p_jinfo_comps_info_id_out_a;
wire [1:0] p_jinfo_comps_info_id_address_b;
wire  p_jinfo_comps_info_id_write_enable_b;
wire [7:0] p_jinfo_comps_info_id_in_b;
wire [7:0] p_jinfo_comps_info_id_out_b;
wire [1:0] p_jinfo_comps_info_h_samp_factor_address_a;
wire  p_jinfo_comps_info_h_samp_factor_write_enable_a;
wire [7:0] p_jinfo_comps_info_h_samp_factor_in_a;
wire [7:0] p_jinfo_comps_info_h_samp_factor_out_a;
wire [1:0] p_jinfo_comps_info_h_samp_factor_address_b;
wire  p_jinfo_comps_info_h_samp_factor_write_enable_b;
wire [7:0] p_jinfo_comps_info_h_samp_factor_in_b;
wire [7:0] p_jinfo_comps_info_h_samp_factor_out_b;
wire [1:0] p_jinfo_comps_info_v_samp_factor_address_a;
wire  p_jinfo_comps_info_v_samp_factor_write_enable_a;
wire [7:0] p_jinfo_comps_info_v_samp_factor_in_a;
wire [7:0] p_jinfo_comps_info_v_samp_factor_out_a;
wire [1:0] p_jinfo_comps_info_v_samp_factor_address_b;
wire  p_jinfo_comps_info_v_samp_factor_write_enable_b;
wire [7:0] p_jinfo_comps_info_v_samp_factor_in_b;
wire [7:0] p_jinfo_comps_info_v_samp_factor_out_b;
wire [1:0] p_jinfo_comps_info_quant_tbl_no_address_a;
wire  p_jinfo_comps_info_quant_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_quant_tbl_no_address_b;
wire  p_jinfo_comps_info_quant_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_out_b;
wire [1:0] p_jinfo_comps_info_dc_tbl_no_address_a;
wire  p_jinfo_comps_info_dc_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_dc_tbl_no_address_b;
wire  p_jinfo_comps_info_dc_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_b;
wire [1:0] p_jinfo_comps_info_ac_tbl_no_address_a;
wire  p_jinfo_comps_info_ac_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_ac_tbl_no_address_b;
wire  p_jinfo_comps_info_ac_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_out_b;
wire [6:0] p_jinfo_ac_xhuff_tbl_bits_address_a;
wire  p_jinfo_ac_xhuff_tbl_bits_write_enable_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_in_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_a;
wire [6:0] p_jinfo_ac_xhuff_tbl_bits_address_b;
wire  p_jinfo_ac_xhuff_tbl_bits_write_enable_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_b;
wire [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_a;
wire  p_jinfo_ac_xhuff_tbl_huffval_write_enable_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_a;
wire [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_b;
wire  p_jinfo_ac_xhuff_tbl_huffval_write_enable_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_b;
wire [6:0] p_jinfo_dc_xhuff_tbl_bits_address_a;
wire  p_jinfo_dc_xhuff_tbl_bits_write_enable_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_in_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_a;
wire [6:0] p_jinfo_dc_xhuff_tbl_bits_address_b;
wire  p_jinfo_dc_xhuff_tbl_bits_write_enable_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_b;
wire [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_a;
wire  p_jinfo_dc_xhuff_tbl_huffval_write_enable_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_a;
wire [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_b;
wire  p_jinfo_dc_xhuff_tbl_huffval_write_enable_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_b;
wire [7:0] p_jinfo_quant_tbl_quantval_address_a;
wire  p_jinfo_quant_tbl_quantval_write_enable_a;
wire [31:0] p_jinfo_quant_tbl_quantval_in_a;
wire [31:0] p_jinfo_quant_tbl_quantval_out_a;
wire [7:0] p_jinfo_quant_tbl_quantval_address_b;
wire  p_jinfo_quant_tbl_quantval_write_enable_b;
wire [31:0] p_jinfo_quant_tbl_quantval_in_b;
wire [31:0] p_jinfo_quant_tbl_quantval_out_b;
wire [5:0] zigzag_index_address_a;
wire  zigzag_index_write_enable_a;
wire [31:0] zigzag_index_in_a;
wire [31:0] zigzag_index_out_a;
wire [5:0] zigzag_index_address_b;
wire  zigzag_index_write_enable_b;
wire [31:0] zigzag_index_in_b;
wire [31:0] zigzag_index_out_b;
wire  p_jinfo_MCUWidth_address_a;
wire  p_jinfo_MCUWidth_write_enable_a;
wire [31:0] p_jinfo_MCUWidth_in_a;
wire [31:0] p_jinfo_MCUWidth_out_a;
wire  p_jinfo_MCUWidth_address_b;
wire  p_jinfo_MCUWidth_write_enable_b;
wire [31:0] p_jinfo_MCUWidth_in_b;
wire [31:0] p_jinfo_MCUWidth_out_b;
wire [9:0] rgb_buf_address_a;
wire  rgb_buf_write_enable_a;
wire [31:0] rgb_buf_in_a;
wire [31:0] rgb_buf_out_a;
wire [9:0] rgb_buf_address_b;
wire  rgb_buf_write_enable_b;
wire [31:0] rgb_buf_in_b;
wire [31:0] rgb_buf_out_b;
wire  CurHuffReadBuf_address_a;
wire  CurHuffReadBuf_write_enable_a;
wire [31:0] CurHuffReadBuf_in_a;
wire [31:0] CurHuffReadBuf_out_a;
wire  CurHuffReadBuf_address_b;
wire  CurHuffReadBuf_write_enable_b;
wire [31:0] CurHuffReadBuf_in_b;
wire [31:0] CurHuffReadBuf_out_b;
wire [13:0] OutData_comp_buf_address_a;
wire  OutData_comp_buf_write_enable_a;
wire [7:0] OutData_comp_buf_in_a;
wire [7:0] OutData_comp_buf_out_a;
wire [13:0] OutData_comp_buf_address_b;
wire  OutData_comp_buf_write_enable_b;
wire [7:0] OutData_comp_buf_in_b;
wire [7:0] OutData_comp_buf_out_b;
wire [4:0] bit_set_mask_address_a;
wire  bit_set_mask_write_enable_a;
wire [31:0] bit_set_mask_in_a;
wire [31:0] bit_set_mask_out_a;
wire [4:0] bit_set_mask_address_b;
wire  bit_set_mask_write_enable_b;
wire [31:0] bit_set_mask_in_b;
wire [31:0] bit_set_mask_out_b;
wire [4:0] lmask_address_a;
wire  lmask_write_enable_a;
wire [31:0] lmask_in_a;
wire [31:0] lmask_out_a;
wire [4:0] lmask_address_b;
wire  lmask_write_enable_b;
wire [31:0] lmask_in_b;
wire [31:0] lmask_out_b;
wire  read_position_address_a;
wire  read_position_write_enable_a;
wire [31:0] read_position_in_a;
wire [31:0] read_position_out_a;
wire  read_position_address_b;
wire  read_position_write_enable_b;
wire [31:0] read_position_in_b;
wire [31:0] read_position_out_b;
wire  current_read_byte_address_a;
wire  current_read_byte_write_enable_a;
wire [31:0] current_read_byte_in_a;
wire [31:0] current_read_byte_out_a;
wire  current_read_byte_address_b;
wire  current_read_byte_write_enable_b;
wire [31:0] current_read_byte_in_b;
wire [31:0] current_read_byte_out_b;
wire  p_jinfo_dc_dhuff_tbl_ml_address_a;
wire  p_jinfo_dc_dhuff_tbl_ml_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_a;
wire  p_jinfo_dc_dhuff_tbl_ml_address_b;
wire  p_jinfo_dc_dhuff_tbl_ml_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_a;
wire  p_jinfo_dc_dhuff_tbl_maxcode_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_b;
wire  p_jinfo_dc_dhuff_tbl_maxcode_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_a;
wire  p_jinfo_dc_dhuff_tbl_mincode_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_b;
wire  p_jinfo_dc_dhuff_tbl_mincode_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_a;
wire  p_jinfo_dc_dhuff_tbl_valptr_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_b;
wire  p_jinfo_dc_dhuff_tbl_valptr_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_b;
wire [4:0] extend_mask_address_a;
wire  extend_mask_write_enable_a;
wire [31:0] extend_mask_in_a;
wire [31:0] extend_mask_out_a;
wire [4:0] extend_mask_address_b;
wire  extend_mask_write_enable_b;
wire [31:0] extend_mask_in_b;
wire [31:0] extend_mask_out_b;
wire  p_jinfo_ac_dhuff_tbl_ml_address_a;
wire  p_jinfo_ac_dhuff_tbl_ml_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_a;
wire  p_jinfo_ac_dhuff_tbl_ml_address_b;
wire  p_jinfo_ac_dhuff_tbl_ml_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_a;
wire  p_jinfo_ac_dhuff_tbl_maxcode_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_b;
wire  p_jinfo_ac_dhuff_tbl_maxcode_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_a;
wire  p_jinfo_ac_dhuff_tbl_mincode_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_b;
wire  p_jinfo_ac_dhuff_tbl_mincode_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_a;
wire  p_jinfo_ac_dhuff_tbl_valptr_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_b;
wire  p_jinfo_ac_dhuff_tbl_valptr_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_b;
wire [1:0] OutData_comp_vpos_address_a;
wire  OutData_comp_vpos_write_enable_a;
wire [31:0] OutData_comp_vpos_in_a;
wire [31:0] OutData_comp_vpos_out_a;
wire [1:0] OutData_comp_vpos_address_b;
wire  OutData_comp_vpos_write_enable_b;
wire [31:0] OutData_comp_vpos_in_b;
wire [31:0] OutData_comp_vpos_out_b;
wire [1:0] OutData_comp_hpos_address_a;
wire  OutData_comp_hpos_write_enable_a;
wire [31:0] OutData_comp_hpos_in_a;
wire [31:0] OutData_comp_hpos_out_a;
wire [1:0] OutData_comp_hpos_address_b;
wire  OutData_comp_hpos_write_enable_b;
wire [31:0] OutData_comp_hpos_in_b;
wire [31:0] OutData_comp_hpos_out_b;
wire [12:0] JpegFileBuf_address_a;
wire  JpegFileBuf_write_enable_a;
wire [7:0] JpegFileBuf_in_a;
wire [7:0] JpegFileBuf_out_a;
wire [12:0] JpegFileBuf_address_b;
wire  JpegFileBuf_write_enable_b;
wire [7:0] JpegFileBuf_in_b;
wire [7:0] JpegFileBuf_out_b;
wire [8:0] huff_make_dhuff_tb_0_huffsize_address_a;
wire  huff_make_dhuff_tb_0_huffsize_write_enable_a;
wire [31:0] huff_make_dhuff_tb_0_huffsize_in_a;
wire [31:0] huff_make_dhuff_tb_0_huffsize_out_a;
wire [8:0] huff_make_dhuff_tb_0_huffsize_address_b;
wire  huff_make_dhuff_tb_0_huffsize_write_enable_b;
wire [31:0] huff_make_dhuff_tb_0_huffsize_in_b;
wire [31:0] huff_make_dhuff_tb_0_huffsize_out_b;
wire [8:0] huff_make_dhuff_tb_0_huffcode_address_a;
wire  huff_make_dhuff_tb_0_huffcode_write_enable_a;
wire [31:0] huff_make_dhuff_tb_0_huffcode_in_a;
wire [31:0] huff_make_dhuff_tb_0_huffcode_out_a;
wire [8:0] huff_make_dhuff_tb_0_huffcode_address_b;
wire  huff_make_dhuff_tb_0_huffcode_write_enable_b;
wire [31:0] huff_make_dhuff_tb_0_huffcode_in_b;
wire [31:0] huff_make_dhuff_tb_0_huffcode_out_b;
wire [5:0] main_0_QuantBuffiii_address_a;
wire  main_0_QuantBuffiii_write_enable_a;
wire [31:0] main_0_QuantBuffiii_in_a;
wire [31:0] main_0_QuantBuffiii_out_a;
wire [5:0] main_0_QuantBuffiii_address_b;
wire  main_0_QuantBuffiii_write_enable_b;
wire [31:0] main_0_QuantBuffiii_in_b;
wire [31:0] main_0_QuantBuffiii_out_b;
wire [7:0] main_0_HuffBuffii_address_a;
wire  main_0_HuffBuffii_write_enable_a;
wire [31:0] main_0_HuffBuffii_in_a;
wire [31:0] main_0_HuffBuffii_out_a;
wire [7:0] main_0_HuffBuffii_address_b;
wire  main_0_HuffBuffii_write_enable_b;
wire [31:0] main_0_HuffBuffii_in_b;
wire [31:0] main_0_HuffBuffii_out_b;
wire [8:0] main_0_IDCTBuffii_address_a;
wire  main_0_IDCTBuffii_write_enable_a;
wire [31:0] main_0_IDCTBuffii_in_a;
wire [31:0] main_0_IDCTBuffii_out_a;
wire [8:0] main_0_IDCTBuffii_address_b;
wire  main_0_IDCTBuffii_write_enable_b;
wire [31:0] main_0_IDCTBuffii_in_b;
wire [31:0] main_0_IDCTBuffii_out_b;
reg [31:0] ChenIDct_signed_divide_32_0_op0;
reg [31:0] ChenIDct_signed_divide_32_0_op1;
wire [31:0] lpm_divide_ChenIDct_preheader_146_temp_out;
wire [31:0] ChenIDct_preheader_146_unused;
reg  lpm_divide_ChenIDct_preheader_146_en;
reg [31:0] lpm_divide_ChenIDct_preheader_146_out;
reg [31:0] ChenIDct_signed_divide_32_0;

/*   %146 = sdiv i32 %145, 16*/
lpm_divide lpm_divide_ChenIDct_preheader_146 (
	.quotient (lpm_divide_ChenIDct_preheader_146_temp_out),
	.remain (ChenIDct_preheader_146_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_ChenIDct_preheader_146_en),
	.numer (ChenIDct_signed_divide_32_0_op0),
	.denom (ChenIDct_signed_divide_32_0_op1)
);

defparam
	lpm_divide_ChenIDct_preheader_146.lpm_pipeline = 32,
	lpm_divide_ChenIDct_preheader_146.lpm_widthn = 32,
	lpm_divide_ChenIDct_preheader_146.lpm_widthd = 32,
	lpm_divide_ChenIDct_preheader_146.lpm_drepresentation = "SIGNED",
	lpm_divide_ChenIDct_preheader_146.lpm_nrepresentation = "SIGNED",
	lpm_divide_ChenIDct_preheader_146.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


always @(posedge clk) begin
	if (reset)
		cur_state <= LEGUP_0;
	else if (memory_controller_waitrequest == 1'd1)
		cur_state <= cur_state;
	else
		cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_ChenIDct_BB__1_1;
LEGUP_F_ChenIDct_BB__148_62:
		next_state = LEGUP_0;
LEGUP_F_ChenIDct_BB__1_1:
		next_state = LEGUP_F_ChenIDct_BB__1_2;
LEGUP_F_ChenIDct_BB__1_10:
		next_state = LEGUP_F_ChenIDct_BB__1_11;
LEGUP_F_ChenIDct_BB__1_11:
		next_state = LEGUP_F_ChenIDct_BB__1_12;
LEGUP_F_ChenIDct_BB__1_12:
	if ((ChenIDct_1_exitcond9_reg == 1'd1))
		next_state = LEGUP_F_ChenIDct_BB_preheader23preheader_13;
	else if ((ChenIDct_1_exitcond9_reg == 1'd0))
		next_state = LEGUP_F_ChenIDct_BB__1_1;
LEGUP_F_ChenIDct_BB__1_2:
		next_state = LEGUP_F_ChenIDct_BB__1_3;
LEGUP_F_ChenIDct_BB__1_3:
		next_state = LEGUP_F_ChenIDct_BB__1_4;
LEGUP_F_ChenIDct_BB__1_4:
		next_state = LEGUP_F_ChenIDct_BB__1_5;
LEGUP_F_ChenIDct_BB__1_5:
		next_state = LEGUP_F_ChenIDct_BB__1_6;
LEGUP_F_ChenIDct_BB__1_6:
		next_state = LEGUP_F_ChenIDct_BB__1_7;
LEGUP_F_ChenIDct_BB__1_7:
		next_state = LEGUP_F_ChenIDct_BB__1_8;
LEGUP_F_ChenIDct_BB__1_8:
		next_state = LEGUP_F_ChenIDct_BB__1_9;
LEGUP_F_ChenIDct_BB__1_9:
		next_state = LEGUP_F_ChenIDct_BB__1_10;
LEGUP_F_ChenIDct_BB_preheader23_14:
		next_state = LEGUP_F_ChenIDct_BB_preheader23_15;
LEGUP_F_ChenIDct_BB_preheader23_15:
		next_state = LEGUP_F_ChenIDct_BB_preheader23_16;
LEGUP_F_ChenIDct_BB_preheader23_16:
		next_state = LEGUP_F_ChenIDct_BB_preheader23_17;
LEGUP_F_ChenIDct_BB_preheader23_17:
		next_state = LEGUP_F_ChenIDct_BB_preheader23_18;
LEGUP_F_ChenIDct_BB_preheader23_18:
		next_state = LEGUP_F_ChenIDct_BB_preheader23_19;
LEGUP_F_ChenIDct_BB_preheader23_19:
		next_state = LEGUP_F_ChenIDct_BB_preheader23_20;
LEGUP_F_ChenIDct_BB_preheader23_20:
		next_state = LEGUP_F_ChenIDct_BB_preheader23_21;
LEGUP_F_ChenIDct_BB_preheader23_21:
		next_state = LEGUP_F_ChenIDct_BB_preheader23_22;
LEGUP_F_ChenIDct_BB_preheader23_22:
		next_state = LEGUP_F_ChenIDct_BB_preheader23_23;
LEGUP_F_ChenIDct_BB_preheader23_23:
		next_state = LEGUP_F_ChenIDct_BB_preheader23_24;
LEGUP_F_ChenIDct_BB_preheader23_24:
	if ((ChenIDct_preheader23_exitcond_reg == 1'd1))
		next_state = LEGUP_F_ChenIDct_BB_preheaderpreheader_25;
	else if ((ChenIDct_preheader23_exitcond_reg == 1'd0))
		next_state = LEGUP_F_ChenIDct_BB_preheader23_14;
LEGUP_F_ChenIDct_BB_preheader23preheader_13:
		next_state = LEGUP_F_ChenIDct_BB_preheader23_14;
LEGUP_F_ChenIDct_BB_preheader_26:
		next_state = LEGUP_F_ChenIDct_BB_preheader_27;
LEGUP_F_ChenIDct_BB_preheader_27:
		next_state = LEGUP_F_ChenIDct_BB_preheader_28;
LEGUP_F_ChenIDct_BB_preheader_28:
		next_state = LEGUP_F_ChenIDct_BB_preheader_29;
LEGUP_F_ChenIDct_BB_preheader_29:
		next_state = LEGUP_F_ChenIDct_BB_preheader_30;
LEGUP_F_ChenIDct_BB_preheader_30:
		next_state = LEGUP_F_ChenIDct_BB_preheader_31;
LEGUP_F_ChenIDct_BB_preheader_31:
		next_state = LEGUP_F_ChenIDct_BB_preheader_32;
LEGUP_F_ChenIDct_BB_preheader_32:
		next_state = LEGUP_F_ChenIDct_BB_preheader_33;
LEGUP_F_ChenIDct_BB_preheader_33:
		next_state = LEGUP_F_ChenIDct_BB_preheader_34;
LEGUP_F_ChenIDct_BB_preheader_34:
		next_state = LEGUP_F_ChenIDct_BB_preheader_35;
LEGUP_F_ChenIDct_BB_preheader_35:
		next_state = LEGUP_F_ChenIDct_BB_preheader_36;
LEGUP_F_ChenIDct_BB_preheader_36:
		next_state = LEGUP_F_ChenIDct_BB_preheader_37;
LEGUP_F_ChenIDct_BB_preheader_37:
		next_state = LEGUP_F_ChenIDct_BB_preheader_38;
LEGUP_F_ChenIDct_BB_preheader_38:
		next_state = LEGUP_F_ChenIDct_BB_preheader_39;
LEGUP_F_ChenIDct_BB_preheader_39:
		next_state = LEGUP_F_ChenIDct_BB_preheader_40;
LEGUP_F_ChenIDct_BB_preheader_40:
		next_state = LEGUP_F_ChenIDct_BB_preheader_41;
LEGUP_F_ChenIDct_BB_preheader_41:
		next_state = LEGUP_F_ChenIDct_BB_preheader_42;
LEGUP_F_ChenIDct_BB_preheader_42:
		next_state = LEGUP_F_ChenIDct_BB_preheader_43;
LEGUP_F_ChenIDct_BB_preheader_43:
		next_state = LEGUP_F_ChenIDct_BB_preheader_44;
LEGUP_F_ChenIDct_BB_preheader_44:
		next_state = LEGUP_F_ChenIDct_BB_preheader_45;
LEGUP_F_ChenIDct_BB_preheader_45:
		next_state = LEGUP_F_ChenIDct_BB_preheader_46;
LEGUP_F_ChenIDct_BB_preheader_46:
		next_state = LEGUP_F_ChenIDct_BB_preheader_47;
LEGUP_F_ChenIDct_BB_preheader_47:
		next_state = LEGUP_F_ChenIDct_BB_preheader_48;
LEGUP_F_ChenIDct_BB_preheader_48:
		next_state = LEGUP_F_ChenIDct_BB_preheader_49;
LEGUP_F_ChenIDct_BB_preheader_49:
		next_state = LEGUP_F_ChenIDct_BB_preheader_50;
LEGUP_F_ChenIDct_BB_preheader_50:
		next_state = LEGUP_F_ChenIDct_BB_preheader_51;
LEGUP_F_ChenIDct_BB_preheader_51:
		next_state = LEGUP_F_ChenIDct_BB_preheader_52;
LEGUP_F_ChenIDct_BB_preheader_52:
		next_state = LEGUP_F_ChenIDct_BB_preheader_53;
LEGUP_F_ChenIDct_BB_preheader_53:
		next_state = LEGUP_F_ChenIDct_BB_preheader_54;
LEGUP_F_ChenIDct_BB_preheader_54:
		next_state = LEGUP_F_ChenIDct_BB_preheader_55;
LEGUP_F_ChenIDct_BB_preheader_55:
		next_state = LEGUP_F_ChenIDct_BB_preheader_56;
LEGUP_F_ChenIDct_BB_preheader_56:
		next_state = LEGUP_F_ChenIDct_BB_preheader_57;
LEGUP_F_ChenIDct_BB_preheader_57:
		next_state = LEGUP_F_ChenIDct_BB_preheader_58;
LEGUP_F_ChenIDct_BB_preheader_58:
		next_state = LEGUP_F_ChenIDct_BB_preheader_59;
LEGUP_F_ChenIDct_BB_preheader_59:
		next_state = LEGUP_F_ChenIDct_BB_preheader_60;
LEGUP_F_ChenIDct_BB_preheader_60:
		next_state = LEGUP_F_ChenIDct_BB_preheader_61;
LEGUP_F_ChenIDct_BB_preheader_61:
	if ((ChenIDct_preheader_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_ChenIDct_BB__148_62;
	else if ((ChenIDct_preheader_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_ChenIDct_BB_preheader_26;
LEGUP_F_ChenIDct_BB_preheaderpreheader_25:
		next_state = LEGUP_F_ChenIDct_BB_preheader_26;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %i.027 = phi i32 [ 0, %0 ], [ %71, %1 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		ChenIDct_1_i027 = 32'd0;
	end
	/* ChenIDct: %1*/
	/*   %i.027 = phi i32 [ 0, %0 ], [ %71, %1 ]*/
	else /* if ((((cur_state == LEGUP_F_ChenIDct_BB__1_12) & (memory_controller_waitrequest == 1'd0)) & (ChenIDct_1_exitcond9_reg == 1'd0))) */ begin
		ChenIDct_1_i027 = ChenIDct_1_71_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_i027_reg <= 0;
	/* ChenIDct: %1*/
	/*   %i.027 = phi i32 [ 0, %0 ], [ %71, %1 ]*/
	else if((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		ChenIDct_1_i027_reg <= ChenIDct_1_i027;
		if (start == 1'b0 && ^(ChenIDct_1_i027) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_i027_reg"); $finish; end
	end
	/* ChenIDct: %1*/
	/*   %i.027 = phi i32 [ 0, %0 ], [ %71, %1 ]*/
	else if((((cur_state == LEGUP_F_ChenIDct_BB__1_12) & (memory_controller_waitrequest == 1'd0)) & (ChenIDct_1_exitcond9_reg == 1'd0))) begin
		ChenIDct_1_i027_reg <= ChenIDct_1_i027;
		if (start == 1'b0 && ^(ChenIDct_1_i027) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_i027_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %scevgep10 = getelementptr i32* %y, i32 %i.027*/
		ChenIDct_1_scevgep10 = (arg_y + (4 * ChenIDct_1_i027_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_scevgep10_reg <= 0;
	/* ChenIDct: %1*/
	/*   %scevgep10 = getelementptr i32* %y, i32 %i.027*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_1)) begin
		ChenIDct_1_scevgep10_reg <= ChenIDct_1_scevgep10;
		if (start == 1'b0 && ^(ChenIDct_1_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_scevgep10_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %2 = add i32 %i.027, 56*/
		ChenIDct_1_2 = (ChenIDct_1_i027_reg + 32'd56);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_2_reg <= 0;
	/* ChenIDct: %1*/
	/*   %2 = add i32 %i.027, 56*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_1)) begin
		ChenIDct_1_2_reg <= ChenIDct_1_2;
		if (start == 1'b0 && ^(ChenIDct_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %scevgep11 = getelementptr i32* %y, i32 %2*/
		ChenIDct_1_scevgep11 = (arg_y + (4 * ChenIDct_1_2_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_scevgep11_reg <= 0;
	/* ChenIDct: %1*/
	/*   %scevgep11 = getelementptr i32* %y, i32 %2*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		ChenIDct_1_scevgep11_reg <= ChenIDct_1_scevgep11;
		if (start == 1'b0 && ^(ChenIDct_1_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_scevgep11_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %scevgep12 = getelementptr i32* %x, i32 %2*/
		ChenIDct_1_scevgep12 = (arg_x + (4 * ChenIDct_1_2_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_scevgep12_reg <= 0;
	/* ChenIDct: %1*/
	/*   %scevgep12 = getelementptr i32* %x, i32 %2*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		ChenIDct_1_scevgep12_reg <= ChenIDct_1_scevgep12;
		if (start == 1'b0 && ^(ChenIDct_1_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_scevgep12_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %3 = add i32 %i.027, 48*/
		ChenIDct_1_3 = (ChenIDct_1_i027_reg + 32'd48);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_3_reg <= 0;
	/* ChenIDct: %1*/
	/*   %3 = add i32 %i.027, 48*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_1)) begin
		ChenIDct_1_3_reg <= ChenIDct_1_3;
		if (start == 1'b0 && ^(ChenIDct_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %scevgep13 = getelementptr i32* %y, i32 %3*/
		ChenIDct_1_scevgep13 = (arg_y + (4 * ChenIDct_1_3_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_scevgep13_reg <= 0;
	/* ChenIDct: %1*/
	/*   %scevgep13 = getelementptr i32* %y, i32 %3*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		ChenIDct_1_scevgep13_reg <= ChenIDct_1_scevgep13;
		if (start == 1'b0 && ^(ChenIDct_1_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_scevgep13_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %scevgep14 = getelementptr i32* %x, i32 %3*/
		ChenIDct_1_scevgep14 = (arg_x + (4 * ChenIDct_1_3_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_scevgep14_reg <= 0;
	/* ChenIDct: %1*/
	/*   %scevgep14 = getelementptr i32* %x, i32 %3*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		ChenIDct_1_scevgep14_reg <= ChenIDct_1_scevgep14;
		if (start == 1'b0 && ^(ChenIDct_1_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_scevgep14_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %4 = add i32 %i.027, 40*/
		ChenIDct_1_4 = (ChenIDct_1_i027_reg + 32'd40);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_4_reg <= 0;
	/* ChenIDct: %1*/
	/*   %4 = add i32 %i.027, 40*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_1)) begin
		ChenIDct_1_4_reg <= ChenIDct_1_4;
		if (start == 1'b0 && ^(ChenIDct_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %scevgep15 = getelementptr i32* %y, i32 %4*/
		ChenIDct_1_scevgep15 = (arg_y + (4 * ChenIDct_1_4_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_scevgep15_reg <= 0;
	/* ChenIDct: %1*/
	/*   %scevgep15 = getelementptr i32* %y, i32 %4*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		ChenIDct_1_scevgep15_reg <= ChenIDct_1_scevgep15;
		if (start == 1'b0 && ^(ChenIDct_1_scevgep15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_scevgep15_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %scevgep16 = getelementptr i32* %x, i32 %4*/
		ChenIDct_1_scevgep16 = (arg_x + (4 * ChenIDct_1_4_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_scevgep16_reg <= 0;
	/* ChenIDct: %1*/
	/*   %scevgep16 = getelementptr i32* %x, i32 %4*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		ChenIDct_1_scevgep16_reg <= ChenIDct_1_scevgep16;
		if (start == 1'b0 && ^(ChenIDct_1_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_scevgep16_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %5 = add i32 %i.027, 32*/
		ChenIDct_1_5 = (ChenIDct_1_i027_reg + 32'd32);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_5_reg <= 0;
	/* ChenIDct: %1*/
	/*   %5 = add i32 %i.027, 32*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_1)) begin
		ChenIDct_1_5_reg <= ChenIDct_1_5;
		if (start == 1'b0 && ^(ChenIDct_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %scevgep17 = getelementptr i32* %y, i32 %5*/
		ChenIDct_1_scevgep17 = (arg_y + (4 * ChenIDct_1_5_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_scevgep17_reg <= 0;
	/* ChenIDct: %1*/
	/*   %scevgep17 = getelementptr i32* %y, i32 %5*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		ChenIDct_1_scevgep17_reg <= ChenIDct_1_scevgep17;
		if (start == 1'b0 && ^(ChenIDct_1_scevgep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_scevgep17_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %scevgep18 = getelementptr i32* %x, i32 %5*/
		ChenIDct_1_scevgep18 = (arg_x + (4 * ChenIDct_1_5_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_scevgep18_reg <= 0;
	/* ChenIDct: %1*/
	/*   %scevgep18 = getelementptr i32* %x, i32 %5*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		ChenIDct_1_scevgep18_reg <= ChenIDct_1_scevgep18;
		if (start == 1'b0 && ^(ChenIDct_1_scevgep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_scevgep18_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %6 = add i32 %i.027, 24*/
		ChenIDct_1_6 = (ChenIDct_1_i027_reg + 32'd24);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_6_reg <= 0;
	/* ChenIDct: %1*/
	/*   %6 = add i32 %i.027, 24*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_1)) begin
		ChenIDct_1_6_reg <= ChenIDct_1_6;
		if (start == 1'b0 && ^(ChenIDct_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_6_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %scevgep19 = getelementptr i32* %y, i32 %6*/
		ChenIDct_1_scevgep19 = (arg_y + (4 * ChenIDct_1_6_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_scevgep19_reg <= 0;
	/* ChenIDct: %1*/
	/*   %scevgep19 = getelementptr i32* %y, i32 %6*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		ChenIDct_1_scevgep19_reg <= ChenIDct_1_scevgep19;
		if (start == 1'b0 && ^(ChenIDct_1_scevgep19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_scevgep19_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %scevgep20 = getelementptr i32* %x, i32 %6*/
		ChenIDct_1_scevgep20 = (arg_x + (4 * ChenIDct_1_6_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_scevgep20_reg <= 0;
	/* ChenIDct: %1*/
	/*   %scevgep20 = getelementptr i32* %x, i32 %6*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		ChenIDct_1_scevgep20_reg <= ChenIDct_1_scevgep20;
		if (start == 1'b0 && ^(ChenIDct_1_scevgep20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_scevgep20_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %7 = add i32 %i.027, 16*/
		ChenIDct_1_7 = (ChenIDct_1_i027_reg + 32'd16);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_7_reg <= 0;
	/* ChenIDct: %1*/
	/*   %7 = add i32 %i.027, 16*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_1)) begin
		ChenIDct_1_7_reg <= ChenIDct_1_7;
		if (start == 1'b0 && ^(ChenIDct_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_7_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %scevgep21 = getelementptr i32* %y, i32 %7*/
		ChenIDct_1_scevgep21 = (arg_y + (4 * ChenIDct_1_7_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_scevgep21_reg <= 0;
	/* ChenIDct: %1*/
	/*   %scevgep21 = getelementptr i32* %y, i32 %7*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		ChenIDct_1_scevgep21_reg <= ChenIDct_1_scevgep21;
		if (start == 1'b0 && ^(ChenIDct_1_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_scevgep21_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %scevgep22 = getelementptr i32* %x, i32 %7*/
		ChenIDct_1_scevgep22 = (arg_x + (4 * ChenIDct_1_7_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_scevgep22_reg <= 0;
	/* ChenIDct: %1*/
	/*   %scevgep22 = getelementptr i32* %x, i32 %7*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		ChenIDct_1_scevgep22_reg <= ChenIDct_1_scevgep22;
		if (start == 1'b0 && ^(ChenIDct_1_scevgep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_scevgep22_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %8 = add i32 %i.027, 8*/
		ChenIDct_1_8 = (ChenIDct_1_i027_reg + 32'd8);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_8_reg <= 0;
	/* ChenIDct: %1*/
	/*   %8 = add i32 %i.027, 8*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_1)) begin
		ChenIDct_1_8_reg <= ChenIDct_1_8;
		if (start == 1'b0 && ^(ChenIDct_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_8_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %scevgep23 = getelementptr i32* %y, i32 %8*/
		ChenIDct_1_scevgep23 = (arg_y + (4 * ChenIDct_1_8_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_scevgep23_reg <= 0;
	/* ChenIDct: %1*/
	/*   %scevgep23 = getelementptr i32* %y, i32 %8*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		ChenIDct_1_scevgep23_reg <= ChenIDct_1_scevgep23;
		if (start == 1'b0 && ^(ChenIDct_1_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_scevgep23_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %scevgep24 = getelementptr i32* %x, i32 %8*/
		ChenIDct_1_scevgep24 = (arg_x + (4 * ChenIDct_1_8_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_scevgep24_reg <= 0;
	/* ChenIDct: %1*/
	/*   %scevgep24 = getelementptr i32* %x, i32 %8*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		ChenIDct_1_scevgep24_reg <= ChenIDct_1_scevgep24;
		if (start == 1'b0 && ^(ChenIDct_1_scevgep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_scevgep24_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %scevgep25 = getelementptr i32* %x, i32 %i.027*/
		ChenIDct_1_scevgep25 = (arg_x + (4 * ChenIDct_1_i027_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_scevgep25_reg <= 0;
	/* ChenIDct: %1*/
	/*   %scevgep25 = getelementptr i32* %x, i32 %i.027*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_1)) begin
		ChenIDct_1_scevgep25_reg <= ChenIDct_1_scevgep25;
		if (start == 1'b0 && ^(ChenIDct_1_scevgep25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_scevgep25_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %9 = load i32* %scevgep25, align 4, !tbaa !1*/
		ChenIDct_1_9 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_9_reg <= 0;
	/* ChenIDct: %1*/
	/*   %9 = load i32* %scevgep25, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_6)) begin
		ChenIDct_1_9_reg <= ChenIDct_1_9;
		if (start == 1'b0 && ^(ChenIDct_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_9_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %10 = shl i32 %9, 2*/
		ChenIDct_1_10 = (ChenIDct_1_9 <<< (32'd2 % 32));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_10_reg <= 0;
	/* ChenIDct: %1*/
	/*   %10 = shl i32 %9, 2*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_6)) begin
		ChenIDct_1_10_reg <= ChenIDct_1_10;
		if (start == 1'b0 && ^(ChenIDct_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_10_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %11 = load i32* %scevgep24, align 4, !tbaa !1*/
		ChenIDct_1_11 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_11_reg <= 0;
	/* ChenIDct: %1*/
	/*   %11 = load i32* %scevgep24, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_4)) begin
		ChenIDct_1_11_reg <= ChenIDct_1_11;
		if (start == 1'b0 && ^(ChenIDct_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_11_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %12 = load i32* %scevgep22, align 4, !tbaa !1*/
		ChenIDct_1_12 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_12_reg <= 0;
	/* ChenIDct: %1*/
	/*   %12 = load i32* %scevgep22, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_6)) begin
		ChenIDct_1_12_reg <= ChenIDct_1_12;
		if (start == 1'b0 && ^(ChenIDct_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_12_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %13 = load i32* %scevgep20, align 4, !tbaa !1*/
		ChenIDct_1_13 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_13_reg <= 0;
	/* ChenIDct: %1*/
	/*   %13 = load i32* %scevgep20, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_4)) begin
		ChenIDct_1_13_reg <= ChenIDct_1_13;
		if (start == 1'b0 && ^(ChenIDct_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_13_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %14 = load i32* %scevgep18, align 4, !tbaa !1*/
		ChenIDct_1_14 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_14_reg <= 0;
	/* ChenIDct: %1*/
	/*   %14 = load i32* %scevgep18, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_14_reg <= ChenIDct_1_14;
		if (start == 1'b0 && ^(ChenIDct_1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_14_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %15 = shl i32 %14, 2*/
		ChenIDct_1_15 = (ChenIDct_1_14 <<< (32'd2 % 32));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_15_reg <= 0;
	/* ChenIDct: %1*/
	/*   %15 = shl i32 %14, 2*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_15_reg <= ChenIDct_1_15;
		if (start == 1'b0 && ^(ChenIDct_1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_15_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %16 = load i32* %scevgep16, align 4, !tbaa !1*/
		ChenIDct_1_16 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_16_reg <= 0;
	/* ChenIDct: %1*/
	/*   %16 = load i32* %scevgep16, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		ChenIDct_1_16_reg <= ChenIDct_1_16;
		if (start == 1'b0 && ^(ChenIDct_1_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_16_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %17 = load i32* %scevgep14, align 4, !tbaa !1*/
		ChenIDct_1_17 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_17_reg <= 0;
	/* ChenIDct: %1*/
	/*   %17 = load i32* %scevgep14, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_17_reg <= ChenIDct_1_17;
		if (start == 1'b0 && ^(ChenIDct_1_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_17_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %18 = load i32* %scevgep12, align 4, !tbaa !1*/
		ChenIDct_1_18 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_18_reg <= 0;
	/* ChenIDct: %1*/
	/*   %18 = load i32* %scevgep12, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		ChenIDct_1_18_reg <= ChenIDct_1_18;
		if (start == 1'b0 && ^(ChenIDct_1_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_18_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %19 = mul i32 %11, 400*/
		ChenIDct_1_19 = (ChenIDct_1_11 * 32'd400);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_19_reg <= 0;
	/* ChenIDct: %1*/
	/*   %19 = mul i32 %11, 400*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_4)) begin
		ChenIDct_1_19_reg <= ChenIDct_1_19;
		if (start == 1'b0 && ^(ChenIDct_1_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_19_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %20 = mul i32 %18, -2008*/
		ChenIDct_1_20 = (ChenIDct_1_18 * -32'd2008);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_20_reg <= 0;
	/* ChenIDct: %1*/
	/*   %20 = mul i32 %18, -2008*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		ChenIDct_1_20_reg <= ChenIDct_1_20;
		if (start == 1'b0 && ^(ChenIDct_1_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_20_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %21 = add i32 %20, %19*/
		ChenIDct_1_21 = (ChenIDct_1_20 + ChenIDct_1_19_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_21_reg <= 0;
	/* ChenIDct: %1*/
	/*   %21 = add i32 %20, %19*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		ChenIDct_1_21_reg <= ChenIDct_1_21;
		if (start == 1'b0 && ^(ChenIDct_1_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_21_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %22 = ashr i32 %21, 9*/
		ChenIDct_1_22 = ($signed(ChenIDct_1_21) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_22_reg <= 0;
	/* ChenIDct: %1*/
	/*   %22 = ashr i32 %21, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		ChenIDct_1_22_reg <= ChenIDct_1_22;
		if (start == 1'b0 && ^(ChenIDct_1_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_22_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %23 = mul i32 %16, 1704*/
		ChenIDct_1_23 = (ChenIDct_1_16 * 32'd1704);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_23_reg <= 0;
	/* ChenIDct: %1*/
	/*   %23 = mul i32 %16, 1704*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		ChenIDct_1_23_reg <= ChenIDct_1_23;
		if (start == 1'b0 && ^(ChenIDct_1_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_23_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %24 = mul i32 %13, -1136*/
		ChenIDct_1_24 = (ChenIDct_1_13 * -32'd1136);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_24_reg <= 0;
	/* ChenIDct: %1*/
	/*   %24 = mul i32 %13, -1136*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_4)) begin
		ChenIDct_1_24_reg <= ChenIDct_1_24;
		if (start == 1'b0 && ^(ChenIDct_1_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_24_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %25 = add i32 %23, %24*/
		ChenIDct_1_25 = (ChenIDct_1_23 + ChenIDct_1_24_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_25_reg <= 0;
	/* ChenIDct: %1*/
	/*   %25 = add i32 %23, %24*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		ChenIDct_1_25_reg <= ChenIDct_1_25;
		if (start == 1'b0 && ^(ChenIDct_1_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_25_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %26 = ashr i32 %25, 9*/
		ChenIDct_1_26 = ($signed(ChenIDct_1_25) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_26_reg <= 0;
	/* ChenIDct: %1*/
	/*   %26 = ashr i32 %25, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		ChenIDct_1_26_reg <= ChenIDct_1_26;
		if (start == 1'b0 && ^(ChenIDct_1_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_26_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %27 = mul i32 %13, 1704*/
		ChenIDct_1_27 = (ChenIDct_1_13 * 32'd1704);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_27_reg <= 0;
	/* ChenIDct: %1*/
	/*   %27 = mul i32 %13, 1704*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_4)) begin
		ChenIDct_1_27_reg <= ChenIDct_1_27;
		if (start == 1'b0 && ^(ChenIDct_1_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_27_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %28 = mul i32 %16, 1136*/
		ChenIDct_1_28 = (ChenIDct_1_16 * 32'd1136);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_28_reg <= 0;
	/* ChenIDct: %1*/
	/*   %28 = mul i32 %16, 1136*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		ChenIDct_1_28_reg <= ChenIDct_1_28;
		if (start == 1'b0 && ^(ChenIDct_1_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_28_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %29 = add nsw i32 %28, %27*/
		ChenIDct_1_29 = (ChenIDct_1_28 + ChenIDct_1_27_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_29_reg <= 0;
	/* ChenIDct: %1*/
	/*   %29 = add nsw i32 %28, %27*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		ChenIDct_1_29_reg <= ChenIDct_1_29;
		if (start == 1'b0 && ^(ChenIDct_1_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_29_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %30 = ashr i32 %29, 9*/
		ChenIDct_1_30 = ($signed(ChenIDct_1_29) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_30_reg <= 0;
	/* ChenIDct: %1*/
	/*   %30 = ashr i32 %29, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		ChenIDct_1_30_reg <= ChenIDct_1_30;
		if (start == 1'b0 && ^(ChenIDct_1_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_30_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %31 = mul i32 %11, 2008*/
		ChenIDct_1_31 = (ChenIDct_1_11 * 32'd2008);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_31_reg <= 0;
	/* ChenIDct: %1*/
	/*   %31 = mul i32 %11, 2008*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_4)) begin
		ChenIDct_1_31_reg <= ChenIDct_1_31;
		if (start == 1'b0 && ^(ChenIDct_1_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_31_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %32 = mul i32 %18, 400*/
		ChenIDct_1_32 = (ChenIDct_1_18 * 32'd400);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_32_reg <= 0;
	/* ChenIDct: %1*/
	/*   %32 = mul i32 %18, 400*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		ChenIDct_1_32_reg <= ChenIDct_1_32;
		if (start == 1'b0 && ^(ChenIDct_1_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_32_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %33 = add nsw i32 %32, %31*/
		ChenIDct_1_33 = (ChenIDct_1_32 + ChenIDct_1_31_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_33_reg <= 0;
	/* ChenIDct: %1*/
	/*   %33 = add nsw i32 %32, %31*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		ChenIDct_1_33_reg <= ChenIDct_1_33;
		if (start == 1'b0 && ^(ChenIDct_1_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_33_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %34 = ashr i32 %33, 9*/
		ChenIDct_1_34 = ($signed(ChenIDct_1_33) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_34_reg <= 0;
	/* ChenIDct: %1*/
	/*   %34 = ashr i32 %33, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		ChenIDct_1_34_reg <= ChenIDct_1_34;
		if (start == 1'b0 && ^(ChenIDct_1_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_34_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %35 = add nsw i32 %15, %10*/
		ChenIDct_1_35 = (ChenIDct_1_15 + ChenIDct_1_10_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_35_reg <= 0;
	/* ChenIDct: %1*/
	/*   %35 = add nsw i32 %15, %10*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_35_reg <= ChenIDct_1_35;
		if (start == 1'b0 && ^(ChenIDct_1_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_35_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %36 = mul nsw i32 %35, 362*/
		ChenIDct_1_36 = (ChenIDct_1_35 * 32'd362);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_36_reg <= 0;
	/* ChenIDct: %1*/
	/*   %36 = mul nsw i32 %35, 362*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_36_reg <= ChenIDct_1_36;
		if (start == 1'b0 && ^(ChenIDct_1_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_36_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %37 = ashr i32 %36, 9*/
		ChenIDct_1_37 = ($signed(ChenIDct_1_36) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_37_reg <= 0;
	/* ChenIDct: %1*/
	/*   %37 = ashr i32 %36, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_37_reg <= ChenIDct_1_37;
		if (start == 1'b0 && ^(ChenIDct_1_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_37_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %38 = sub nsw i32 %10, %15*/
		ChenIDct_1_38 = (ChenIDct_1_10_reg - ChenIDct_1_15);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_38_reg <= 0;
	/* ChenIDct: %1*/
	/*   %38 = sub nsw i32 %10, %15*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_38_reg <= ChenIDct_1_38;
		if (start == 1'b0 && ^(ChenIDct_1_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_38_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %39 = mul nsw i32 %38, 362*/
		ChenIDct_1_39 = (ChenIDct_1_38 * 32'd362);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_39_reg <= 0;
	/* ChenIDct: %1*/
	/*   %39 = mul nsw i32 %38, 362*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_39_reg <= ChenIDct_1_39;
		if (start == 1'b0 && ^(ChenIDct_1_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_39_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %40 = ashr i32 %39, 9*/
		ChenIDct_1_40 = ($signed(ChenIDct_1_39) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_40_reg <= 0;
	/* ChenIDct: %1*/
	/*   %40 = ashr i32 %39, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_40_reg <= ChenIDct_1_40;
		if (start == 1'b0 && ^(ChenIDct_1_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_40_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %41 = mul i32 %12, 784*/
		ChenIDct_1_41 = (ChenIDct_1_12 * 32'd784);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_41_reg <= 0;
	/* ChenIDct: %1*/
	/*   %41 = mul i32 %12, 784*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_6)) begin
		ChenIDct_1_41_reg <= ChenIDct_1_41;
		if (start == 1'b0 && ^(ChenIDct_1_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_41_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %42 = mul i32 %17, -1892*/
		ChenIDct_1_42 = (ChenIDct_1_17 * -32'd1892);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_42_reg <= 0;
	/* ChenIDct: %1*/
	/*   %42 = mul i32 %17, -1892*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_42_reg <= ChenIDct_1_42;
		if (start == 1'b0 && ^(ChenIDct_1_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_42_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %43 = add i32 %42, %41*/
		ChenIDct_1_43 = (ChenIDct_1_42 + ChenIDct_1_41_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_43_reg <= 0;
	/* ChenIDct: %1*/
	/*   %43 = add i32 %42, %41*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_43_reg <= ChenIDct_1_43;
		if (start == 1'b0 && ^(ChenIDct_1_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_43_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %44 = ashr i32 %43, 9*/
		ChenIDct_1_44 = ($signed(ChenIDct_1_43) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_44_reg <= 0;
	/* ChenIDct: %1*/
	/*   %44 = ashr i32 %43, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_44_reg <= ChenIDct_1_44;
		if (start == 1'b0 && ^(ChenIDct_1_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_44_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %45 = mul i32 %12, 1892*/
		ChenIDct_1_45 = (ChenIDct_1_12 * 32'd1892);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_45_reg <= 0;
	/* ChenIDct: %1*/
	/*   %45 = mul i32 %12, 1892*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_6)) begin
		ChenIDct_1_45_reg <= ChenIDct_1_45;
		if (start == 1'b0 && ^(ChenIDct_1_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_45_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %46 = mul i32 %17, 784*/
		ChenIDct_1_46 = (ChenIDct_1_17 * 32'd784);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_46_reg <= 0;
	/* ChenIDct: %1*/
	/*   %46 = mul i32 %17, 784*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_46_reg <= ChenIDct_1_46;
		if (start == 1'b0 && ^(ChenIDct_1_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_46_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %47 = add nsw i32 %46, %45*/
		ChenIDct_1_47 = (ChenIDct_1_46 + ChenIDct_1_45_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_47_reg <= 0;
	/* ChenIDct: %1*/
	/*   %47 = add nsw i32 %46, %45*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_47_reg <= ChenIDct_1_47;
		if (start == 1'b0 && ^(ChenIDct_1_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_47_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %48 = ashr i32 %47, 9*/
		ChenIDct_1_48 = ($signed(ChenIDct_1_47) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_48_reg <= 0;
	/* ChenIDct: %1*/
	/*   %48 = ashr i32 %47, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_48_reg <= ChenIDct_1_48;
		if (start == 1'b0 && ^(ChenIDct_1_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_48_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %49 = add nsw i32 %48, %37*/
		ChenIDct_1_49 = (ChenIDct_1_48_reg + ChenIDct_1_37_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_49_reg <= 0;
	/* ChenIDct: %1*/
	/*   %49 = add nsw i32 %48, %37*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		ChenIDct_1_49_reg <= ChenIDct_1_49;
		if (start == 1'b0 && ^(ChenIDct_1_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_49_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %50 = add nsw i32 %44, %40*/
		ChenIDct_1_50 = (ChenIDct_1_44_reg + ChenIDct_1_40_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_50_reg <= 0;
	/* ChenIDct: %1*/
	/*   %50 = add nsw i32 %44, %40*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		ChenIDct_1_50_reg <= ChenIDct_1_50;
		if (start == 1'b0 && ^(ChenIDct_1_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_50_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %51 = sub nsw i32 %40, %44*/
		ChenIDct_1_51 = (ChenIDct_1_40_reg - ChenIDct_1_44_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_51_reg <= 0;
	/* ChenIDct: %1*/
	/*   %51 = sub nsw i32 %40, %44*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		ChenIDct_1_51_reg <= ChenIDct_1_51;
		if (start == 1'b0 && ^(ChenIDct_1_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_51_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %52 = sub nsw i32 %37, %48*/
		ChenIDct_1_52 = (ChenIDct_1_37_reg - ChenIDct_1_48_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_52_reg <= 0;
	/* ChenIDct: %1*/
	/*   %52 = sub nsw i32 %37, %48*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		ChenIDct_1_52_reg <= ChenIDct_1_52;
		if (start == 1'b0 && ^(ChenIDct_1_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_52_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %53 = add nsw i32 %22, %26*/
		ChenIDct_1_53 = (ChenIDct_1_22_reg + ChenIDct_1_26_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_53_reg <= 0;
	/* ChenIDct: %1*/
	/*   %53 = add nsw i32 %22, %26*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_6)) begin
		ChenIDct_1_53_reg <= ChenIDct_1_53;
		if (start == 1'b0 && ^(ChenIDct_1_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_53_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %54 = sub nsw i32 %22, %26*/
		ChenIDct_1_54 = (ChenIDct_1_22_reg - ChenIDct_1_26_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_54_reg <= 0;
	/* ChenIDct: %1*/
	/*   %54 = sub nsw i32 %22, %26*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_6)) begin
		ChenIDct_1_54_reg <= ChenIDct_1_54;
		if (start == 1'b0 && ^(ChenIDct_1_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_54_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %55 = sub nsw i32 %34, %30*/
		ChenIDct_1_55 = (ChenIDct_1_34_reg - ChenIDct_1_30_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_55_reg <= 0;
	/* ChenIDct: %1*/
	/*   %55 = sub nsw i32 %34, %30*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_6)) begin
		ChenIDct_1_55_reg <= ChenIDct_1_55;
		if (start == 1'b0 && ^(ChenIDct_1_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_55_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %56 = add nsw i32 %34, %30*/
		ChenIDct_1_56 = (ChenIDct_1_34_reg + ChenIDct_1_30_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_56_reg <= 0;
	/* ChenIDct: %1*/
	/*   %56 = add nsw i32 %34, %30*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_6)) begin
		ChenIDct_1_56_reg <= ChenIDct_1_56;
		if (start == 1'b0 && ^(ChenIDct_1_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_56_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %57 = sub nsw i32 %55, %54*/
		ChenIDct_1_57 = (ChenIDct_1_55 - ChenIDct_1_54);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_57_reg <= 0;
	/* ChenIDct: %1*/
	/*   %57 = sub nsw i32 %55, %54*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_6)) begin
		ChenIDct_1_57_reg <= ChenIDct_1_57;
		if (start == 1'b0 && ^(ChenIDct_1_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_57_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %58 = mul nsw i32 %57, 362*/
		ChenIDct_1_58 = (ChenIDct_1_57_reg * 32'd362);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_58_reg <= 0;
	/* ChenIDct: %1*/
	/*   %58 = mul nsw i32 %57, 362*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_58_reg <= ChenIDct_1_58;
		if (start == 1'b0 && ^(ChenIDct_1_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_58_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %59 = ashr i32 %58, 9*/
		ChenIDct_1_59 = ($signed(ChenIDct_1_58) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_59_reg <= 0;
	/* ChenIDct: %1*/
	/*   %59 = ashr i32 %58, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_59_reg <= ChenIDct_1_59;
		if (start == 1'b0 && ^(ChenIDct_1_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_59_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %60 = add nsw i32 %55, %54*/
		ChenIDct_1_60 = (ChenIDct_1_55 + ChenIDct_1_54);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_60_reg <= 0;
	/* ChenIDct: %1*/
	/*   %60 = add nsw i32 %55, %54*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_6)) begin
		ChenIDct_1_60_reg <= ChenIDct_1_60;
		if (start == 1'b0 && ^(ChenIDct_1_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_60_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %61 = mul nsw i32 %60, 362*/
		ChenIDct_1_61 = (ChenIDct_1_60_reg * 32'd362);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_61_reg <= 0;
	/* ChenIDct: %1*/
	/*   %61 = mul nsw i32 %60, 362*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_61_reg <= ChenIDct_1_61;
		if (start == 1'b0 && ^(ChenIDct_1_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_61_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %62 = ashr i32 %61, 9*/
		ChenIDct_1_62 = ($signed(ChenIDct_1_61) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_62_reg <= 0;
	/* ChenIDct: %1*/
	/*   %62 = ashr i32 %61, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_7)) begin
		ChenIDct_1_62_reg <= ChenIDct_1_62;
		if (start == 1'b0 && ^(ChenIDct_1_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_62_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %63 = add nsw i32 %56, %49*/
		ChenIDct_1_63 = (ChenIDct_1_56_reg + ChenIDct_1_49);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_63_reg <= 0;
	/* ChenIDct: %1*/
	/*   %63 = add nsw i32 %56, %49*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		ChenIDct_1_63_reg <= ChenIDct_1_63;
		if (start == 1'b0 && ^(ChenIDct_1_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_63_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %64 = add nsw i32 %62, %50*/
		ChenIDct_1_64 = (ChenIDct_1_62_reg + ChenIDct_1_50);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_64_reg <= 0;
	/* ChenIDct: %1*/
	/*   %64 = add nsw i32 %62, %50*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		ChenIDct_1_64_reg <= ChenIDct_1_64;
		if (start == 1'b0 && ^(ChenIDct_1_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_64_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %65 = add nsw i32 %59, %51*/
		ChenIDct_1_65 = (ChenIDct_1_59_reg + ChenIDct_1_51);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_65_reg <= 0;
	/* ChenIDct: %1*/
	/*   %65 = add nsw i32 %59, %51*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		ChenIDct_1_65_reg <= ChenIDct_1_65;
		if (start == 1'b0 && ^(ChenIDct_1_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_65_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %66 = add nsw i32 %53, %52*/
		ChenIDct_1_66 = (ChenIDct_1_53_reg + ChenIDct_1_52);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_66_reg <= 0;
	/* ChenIDct: %1*/
	/*   %66 = add nsw i32 %53, %52*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		ChenIDct_1_66_reg <= ChenIDct_1_66;
		if (start == 1'b0 && ^(ChenIDct_1_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_66_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %67 = sub nsw i32 %52, %53*/
		ChenIDct_1_67 = (ChenIDct_1_52 - ChenIDct_1_53_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_67_reg <= 0;
	/* ChenIDct: %1*/
	/*   %67 = sub nsw i32 %52, %53*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		ChenIDct_1_67_reg <= ChenIDct_1_67;
		if (start == 1'b0 && ^(ChenIDct_1_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_67_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %68 = sub nsw i32 %51, %59*/
		ChenIDct_1_68 = (ChenIDct_1_51 - ChenIDct_1_59_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_68_reg <= 0;
	/* ChenIDct: %1*/
	/*   %68 = sub nsw i32 %51, %59*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		ChenIDct_1_68_reg <= ChenIDct_1_68;
		if (start == 1'b0 && ^(ChenIDct_1_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_68_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %69 = sub nsw i32 %50, %62*/
		ChenIDct_1_69 = (ChenIDct_1_50 - ChenIDct_1_62_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_69_reg <= 0;
	/* ChenIDct: %1*/
	/*   %69 = sub nsw i32 %50, %62*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		ChenIDct_1_69_reg <= ChenIDct_1_69;
		if (start == 1'b0 && ^(ChenIDct_1_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_69_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %70 = sub nsw i32 %49, %56*/
		ChenIDct_1_70 = (ChenIDct_1_49 - ChenIDct_1_56_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_70_reg <= 0;
	/* ChenIDct: %1*/
	/*   %70 = sub nsw i32 %49, %56*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		ChenIDct_1_70_reg <= ChenIDct_1_70;
		if (start == 1'b0 && ^(ChenIDct_1_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_70_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %71 = add nsw i32 %i.027, 1*/
		ChenIDct_1_71 = (ChenIDct_1_i027_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_71_reg <= 0;
	/* ChenIDct: %1*/
	/*   %71 = add nsw i32 %i.027, 1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_1)) begin
		ChenIDct_1_71_reg <= ChenIDct_1_71;
		if (start == 1'b0 && ^(ChenIDct_1_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_71_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %1*/
	/*   %exitcond9 = icmp eq i32 %71, 8*/
		ChenIDct_1_exitcond9 = (ChenIDct_1_71 == 32'd8);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_1_exitcond9_reg <= 0;
	/* ChenIDct: %1*/
	/*   %exitcond9 = icmp eq i32 %71, 8*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__1_1)) begin
		ChenIDct_1_exitcond9_reg <= ChenIDct_1_exitcond9;
		if (start == 1'b0 && ^(ChenIDct_1_exitcond9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_1_exitcond9_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %i.126 = phi i32 [ %140, %.preheader23 ], [ 0, %.preheader23.preheader ]*/
	if (((cur_state == LEGUP_F_ChenIDct_BB_preheader23preheader_13) & (memory_controller_waitrequest == 1'd0))) begin
		ChenIDct_preheader23_i126 = 32'd0;
	end
	/* ChenIDct: %.preheader23*/
	/*   %i.126 = phi i32 [ %140, %.preheader23 ], [ 0, %.preheader23.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_ChenIDct_BB_preheader23_24) & (memory_controller_waitrequest == 1'd0)) & (ChenIDct_preheader23_exitcond_reg == 1'd0))) */ begin
		ChenIDct_preheader23_i126 = ChenIDct_preheader23_140_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_i126_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %i.126 = phi i32 [ %140, %.preheader23 ], [ 0, %.preheader23.preheader ]*/
	else if(((cur_state == LEGUP_F_ChenIDct_BB_preheader23preheader_13) & (memory_controller_waitrequest == 1'd0))) begin
		ChenIDct_preheader23_i126_reg <= ChenIDct_preheader23_i126;
		if (start == 1'b0 && ^(ChenIDct_preheader23_i126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_i126_reg"); $finish; end
	end
	/* ChenIDct: %.preheader23*/
	/*   %i.126 = phi i32 [ %140, %.preheader23 ], [ 0, %.preheader23.preheader ]*/
	else if((((cur_state == LEGUP_F_ChenIDct_BB_preheader23_24) & (memory_controller_waitrequest == 1'd0)) & (ChenIDct_preheader23_exitcond_reg == 1'd0))) begin
		ChenIDct_preheader23_i126_reg <= ChenIDct_preheader23_i126;
		if (start == 1'b0 && ^(ChenIDct_preheader23_i126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_i126_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %72 = shl i32 %i.126, 3*/
		ChenIDct_preheader23_72 = (ChenIDct_preheader23_i126_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_72_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %72 = shl i32 %i.126, 3*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_72_reg <= ChenIDct_preheader23_72;
		if (start == 1'b0 && ^(ChenIDct_preheader23_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_72_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %73 = or i32 %72, 7*/
		ChenIDct_preheader23_73 = (ChenIDct_preheader23_72 | 32'd7);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_73_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %73 = or i32 %72, 7*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_73_reg <= ChenIDct_preheader23_73;
		if (start == 1'b0 && ^(ChenIDct_preheader23_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_73_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %scevgep = getelementptr i32* %y, i32 %73*/
		ChenIDct_preheader23_scevgep = (arg_y + (4 * ChenIDct_preheader23_73));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_scevgep_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %scevgep = getelementptr i32* %y, i32 %73*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_scevgep_reg <= ChenIDct_preheader23_scevgep;
		if (start == 1'b0 && ^(ChenIDct_preheader23_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %74 = or i32 %72, 6*/
		ChenIDct_preheader23_74 = (ChenIDct_preheader23_72 | 32'd6);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_74_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %74 = or i32 %72, 6*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_74_reg <= ChenIDct_preheader23_74;
		if (start == 1'b0 && ^(ChenIDct_preheader23_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_74_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %scevgep2 = getelementptr i32* %y, i32 %74*/
		ChenIDct_preheader23_scevgep2 = (arg_y + (4 * ChenIDct_preheader23_74));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_scevgep2_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %scevgep2 = getelementptr i32* %y, i32 %74*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_scevgep2_reg <= ChenIDct_preheader23_scevgep2;
		if (start == 1'b0 && ^(ChenIDct_preheader23_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %75 = or i32 %72, 5*/
		ChenIDct_preheader23_75 = (ChenIDct_preheader23_72 | 32'd5);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_75_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %75 = or i32 %72, 5*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_75_reg <= ChenIDct_preheader23_75;
		if (start == 1'b0 && ^(ChenIDct_preheader23_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_75_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %scevgep3 = getelementptr i32* %y, i32 %75*/
		ChenIDct_preheader23_scevgep3 = (arg_y + (4 * ChenIDct_preheader23_75));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_scevgep3_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %scevgep3 = getelementptr i32* %y, i32 %75*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_scevgep3_reg <= ChenIDct_preheader23_scevgep3;
		if (start == 1'b0 && ^(ChenIDct_preheader23_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_scevgep3_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %76 = or i32 %72, 4*/
		ChenIDct_preheader23_76 = (ChenIDct_preheader23_72 | 32'd4);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_76_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %76 = or i32 %72, 4*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_76_reg <= ChenIDct_preheader23_76;
		if (start == 1'b0 && ^(ChenIDct_preheader23_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_76_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %scevgep4 = getelementptr i32* %y, i32 %76*/
		ChenIDct_preheader23_scevgep4 = (arg_y + (4 * ChenIDct_preheader23_76));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_scevgep4_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %scevgep4 = getelementptr i32* %y, i32 %76*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_scevgep4_reg <= ChenIDct_preheader23_scevgep4;
		if (start == 1'b0 && ^(ChenIDct_preheader23_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %77 = or i32 %72, 3*/
		ChenIDct_preheader23_77 = (ChenIDct_preheader23_72 | 32'd3);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_77_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %77 = or i32 %72, 3*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_77_reg <= ChenIDct_preheader23_77;
		if (start == 1'b0 && ^(ChenIDct_preheader23_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_77_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %scevgep5 = getelementptr i32* %y, i32 %77*/
		ChenIDct_preheader23_scevgep5 = (arg_y + (4 * ChenIDct_preheader23_77));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_scevgep5_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %scevgep5 = getelementptr i32* %y, i32 %77*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_scevgep5_reg <= ChenIDct_preheader23_scevgep5;
		if (start == 1'b0 && ^(ChenIDct_preheader23_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_scevgep5_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %78 = or i32 %72, 2*/
		ChenIDct_preheader23_78 = (ChenIDct_preheader23_72 | 32'd2);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_78_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %78 = or i32 %72, 2*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_78_reg <= ChenIDct_preheader23_78;
		if (start == 1'b0 && ^(ChenIDct_preheader23_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_78_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %scevgep6 = getelementptr i32* %y, i32 %78*/
		ChenIDct_preheader23_scevgep6 = (arg_y + (4 * ChenIDct_preheader23_78));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_scevgep6_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %scevgep6 = getelementptr i32* %y, i32 %78*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_scevgep6_reg <= ChenIDct_preheader23_scevgep6;
		if (start == 1'b0 && ^(ChenIDct_preheader23_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %79 = or i32 %72, 1*/
		ChenIDct_preheader23_79 = (ChenIDct_preheader23_72 | 32'd1);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_79_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %79 = or i32 %72, 1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_79_reg <= ChenIDct_preheader23_79;
		if (start == 1'b0 && ^(ChenIDct_preheader23_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_79_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %scevgep7 = getelementptr i32* %y, i32 %79*/
		ChenIDct_preheader23_scevgep7 = (arg_y + (4 * ChenIDct_preheader23_79));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_scevgep7_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %scevgep7 = getelementptr i32* %y, i32 %79*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_scevgep7_reg <= ChenIDct_preheader23_scevgep7;
		if (start == 1'b0 && ^(ChenIDct_preheader23_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_scevgep7_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %scevgep8 = getelementptr i32* %y, i32 %72*/
		ChenIDct_preheader23_scevgep8 = (arg_y + (4 * ChenIDct_preheader23_72));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_scevgep8_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %scevgep8 = getelementptr i32* %y, i32 %72*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_scevgep8_reg <= ChenIDct_preheader23_scevgep8;
		if (start == 1'b0 && ^(ChenIDct_preheader23_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_scevgep8_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %80 = load i32* %scevgep8, align 4, !tbaa !1*/
		ChenIDct_preheader23_80 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_80_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %80 = load i32* %scevgep8, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_18)) begin
		ChenIDct_preheader23_80_reg <= ChenIDct_preheader23_80;
		if (start == 1'b0 && ^(ChenIDct_preheader23_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_80_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %81 = load i32* %scevgep7, align 4, !tbaa !1*/
		ChenIDct_preheader23_81 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_81_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %81 = load i32* %scevgep7, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_16)) begin
		ChenIDct_preheader23_81_reg <= ChenIDct_preheader23_81;
		if (start == 1'b0 && ^(ChenIDct_preheader23_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_81_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %82 = load i32* %scevgep6, align 4, !tbaa !1*/
		ChenIDct_preheader23_82 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_82_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %82 = load i32* %scevgep6, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_18)) begin
		ChenIDct_preheader23_82_reg <= ChenIDct_preheader23_82;
		if (start == 1'b0 && ^(ChenIDct_preheader23_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_82_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %83 = load i32* %scevgep5, align 4, !tbaa !1*/
		ChenIDct_preheader23_83 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_83_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %83 = load i32* %scevgep5, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_16)) begin
		ChenIDct_preheader23_83_reg <= ChenIDct_preheader23_83;
		if (start == 1'b0 && ^(ChenIDct_preheader23_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_83_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %84 = load i32* %scevgep4, align 4, !tbaa !1*/
		ChenIDct_preheader23_84 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_84_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %84 = load i32* %scevgep4, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_84_reg <= ChenIDct_preheader23_84;
		if (start == 1'b0 && ^(ChenIDct_preheader23_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_84_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %85 = load i32* %scevgep3, align 4, !tbaa !1*/
		ChenIDct_preheader23_85 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_85_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %85 = load i32* %scevgep3, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		ChenIDct_preheader23_85_reg <= ChenIDct_preheader23_85;
		if (start == 1'b0 && ^(ChenIDct_preheader23_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_85_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %86 = load i32* %scevgep2, align 4, !tbaa !1*/
		ChenIDct_preheader23_86 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_86_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %86 = load i32* %scevgep2, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_86_reg <= ChenIDct_preheader23_86;
		if (start == 1'b0 && ^(ChenIDct_preheader23_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_86_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %87 = load i32* %scevgep, align 4, !tbaa !1*/
		ChenIDct_preheader23_87 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_87_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %87 = load i32* %scevgep, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		ChenIDct_preheader23_87_reg <= ChenIDct_preheader23_87;
		if (start == 1'b0 && ^(ChenIDct_preheader23_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_87_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %88 = mul nsw i32 %81, 100*/
		ChenIDct_preheader23_88 = (ChenIDct_preheader23_81 * 32'd100);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_88_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %88 = mul nsw i32 %81, 100*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_16)) begin
		ChenIDct_preheader23_88_reg <= ChenIDct_preheader23_88;
		if (start == 1'b0 && ^(ChenIDct_preheader23_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_88_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %89 = mul i32 %87, -502*/
		ChenIDct_preheader23_89 = (ChenIDct_preheader23_87 * -32'd502);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_89_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %89 = mul i32 %87, -502*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		ChenIDct_preheader23_89_reg <= ChenIDct_preheader23_89;
		if (start == 1'b0 && ^(ChenIDct_preheader23_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_89_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %90 = add i32 %89, %88*/
		ChenIDct_preheader23_90 = (ChenIDct_preheader23_89 + ChenIDct_preheader23_88_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_90_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %90 = add i32 %89, %88*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		ChenIDct_preheader23_90_reg <= ChenIDct_preheader23_90;
		if (start == 1'b0 && ^(ChenIDct_preheader23_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_90_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %91 = ashr i32 %90, 9*/
		ChenIDct_preheader23_91 = ($signed(ChenIDct_preheader23_90) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_91_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %91 = ashr i32 %90, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		ChenIDct_preheader23_91_reg <= ChenIDct_preheader23_91;
		if (start == 1'b0 && ^(ChenIDct_preheader23_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_91_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %92 = mul nsw i32 %85, 426*/
		ChenIDct_preheader23_92 = (ChenIDct_preheader23_85 * 32'd426);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_92_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %92 = mul nsw i32 %85, 426*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		ChenIDct_preheader23_92_reg <= ChenIDct_preheader23_92;
		if (start == 1'b0 && ^(ChenIDct_preheader23_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_92_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %93 = mul i32 %83, -284*/
		ChenIDct_preheader23_93 = (ChenIDct_preheader23_83 * -32'd284);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_93_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %93 = mul i32 %83, -284*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_16)) begin
		ChenIDct_preheader23_93_reg <= ChenIDct_preheader23_93;
		if (start == 1'b0 && ^(ChenIDct_preheader23_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_93_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %94 = add i32 %92, %93*/
		ChenIDct_preheader23_94 = (ChenIDct_preheader23_92 + ChenIDct_preheader23_93_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_94_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %94 = add i32 %92, %93*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		ChenIDct_preheader23_94_reg <= ChenIDct_preheader23_94;
		if (start == 1'b0 && ^(ChenIDct_preheader23_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_94_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %95 = ashr i32 %94, 9*/
		ChenIDct_preheader23_95 = ($signed(ChenIDct_preheader23_94) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_95_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %95 = ashr i32 %94, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		ChenIDct_preheader23_95_reg <= ChenIDct_preheader23_95;
		if (start == 1'b0 && ^(ChenIDct_preheader23_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_95_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %96 = mul nsw i32 %83, 426*/
		ChenIDct_preheader23_96 = (ChenIDct_preheader23_83 * 32'd426);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_96_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %96 = mul nsw i32 %83, 426*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_16)) begin
		ChenIDct_preheader23_96_reg <= ChenIDct_preheader23_96;
		if (start == 1'b0 && ^(ChenIDct_preheader23_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_96_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %97 = mul nsw i32 %85, 284*/
		ChenIDct_preheader23_97 = (ChenIDct_preheader23_85 * 32'd284);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_97_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %97 = mul nsw i32 %85, 284*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		ChenIDct_preheader23_97_reg <= ChenIDct_preheader23_97;
		if (start == 1'b0 && ^(ChenIDct_preheader23_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_97_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %98 = add nsw i32 %97, %96*/
		ChenIDct_preheader23_98 = (ChenIDct_preheader23_97 + ChenIDct_preheader23_96_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_98_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %98 = add nsw i32 %97, %96*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		ChenIDct_preheader23_98_reg <= ChenIDct_preheader23_98;
		if (start == 1'b0 && ^(ChenIDct_preheader23_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_98_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %99 = ashr i32 %98, 9*/
		ChenIDct_preheader23_99 = ($signed(ChenIDct_preheader23_98) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_99_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %99 = ashr i32 %98, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		ChenIDct_preheader23_99_reg <= ChenIDct_preheader23_99;
		if (start == 1'b0 && ^(ChenIDct_preheader23_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_99_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %100 = mul nsw i32 %81, 502*/
		ChenIDct_preheader23_100 = (ChenIDct_preheader23_81 * 32'd502);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_100_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %100 = mul nsw i32 %81, 502*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_16)) begin
		ChenIDct_preheader23_100_reg <= ChenIDct_preheader23_100;
		if (start == 1'b0 && ^(ChenIDct_preheader23_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_100_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %101 = mul nsw i32 %87, 100*/
		ChenIDct_preheader23_101 = (ChenIDct_preheader23_87 * 32'd100);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_101_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %101 = mul nsw i32 %87, 100*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		ChenIDct_preheader23_101_reg <= ChenIDct_preheader23_101;
		if (start == 1'b0 && ^(ChenIDct_preheader23_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_101_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %102 = add nsw i32 %101, %100*/
		ChenIDct_preheader23_102 = (ChenIDct_preheader23_101 + ChenIDct_preheader23_100_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_102_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %102 = add nsw i32 %101, %100*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		ChenIDct_preheader23_102_reg <= ChenIDct_preheader23_102;
		if (start == 1'b0 && ^(ChenIDct_preheader23_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_102_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %103 = ashr i32 %102, 9*/
		ChenIDct_preheader23_103 = ($signed(ChenIDct_preheader23_102) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_103_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %103 = ashr i32 %102, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		ChenIDct_preheader23_103_reg <= ChenIDct_preheader23_103;
		if (start == 1'b0 && ^(ChenIDct_preheader23_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_103_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %104 = add nsw i32 %84, %80*/
		ChenIDct_preheader23_104 = (ChenIDct_preheader23_84 + ChenIDct_preheader23_80_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_104_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %104 = add nsw i32 %84, %80*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_104_reg <= ChenIDct_preheader23_104;
		if (start == 1'b0 && ^(ChenIDct_preheader23_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_104_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %105 = mul nsw i32 %104, 362*/
		ChenIDct_preheader23_105 = (ChenIDct_preheader23_104 * 32'd362);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_105_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %105 = mul nsw i32 %104, 362*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_105_reg <= ChenIDct_preheader23_105;
		if (start == 1'b0 && ^(ChenIDct_preheader23_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_105_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %106 = ashr i32 %105, 9*/
		ChenIDct_preheader23_106 = ($signed(ChenIDct_preheader23_105) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_106_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %106 = ashr i32 %105, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_106_reg <= ChenIDct_preheader23_106;
		if (start == 1'b0 && ^(ChenIDct_preheader23_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_106_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %107 = sub nsw i32 %80, %84*/
		ChenIDct_preheader23_107 = (ChenIDct_preheader23_80_reg - ChenIDct_preheader23_84);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_107_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %107 = sub nsw i32 %80, %84*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_107_reg <= ChenIDct_preheader23_107;
		if (start == 1'b0 && ^(ChenIDct_preheader23_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_107_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %108 = mul nsw i32 %107, 362*/
		ChenIDct_preheader23_108 = (ChenIDct_preheader23_107 * 32'd362);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_108_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %108 = mul nsw i32 %107, 362*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_108_reg <= ChenIDct_preheader23_108;
		if (start == 1'b0 && ^(ChenIDct_preheader23_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_108_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %109 = ashr i32 %108, 9*/
		ChenIDct_preheader23_109 = ($signed(ChenIDct_preheader23_108) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_109_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %109 = ashr i32 %108, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_109_reg <= ChenIDct_preheader23_109;
		if (start == 1'b0 && ^(ChenIDct_preheader23_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_109_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %110 = mul nsw i32 %82, 196*/
		ChenIDct_preheader23_110 = (ChenIDct_preheader23_82 * 32'd196);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_110_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %110 = mul nsw i32 %82, 196*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_18)) begin
		ChenIDct_preheader23_110_reg <= ChenIDct_preheader23_110;
		if (start == 1'b0 && ^(ChenIDct_preheader23_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_110_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %111 = mul i32 %86, -473*/
		ChenIDct_preheader23_111 = (ChenIDct_preheader23_86 * -32'd473);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_111_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %111 = mul i32 %86, -473*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_111_reg <= ChenIDct_preheader23_111;
		if (start == 1'b0 && ^(ChenIDct_preheader23_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_111_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %112 = add i32 %111, %110*/
		ChenIDct_preheader23_112 = (ChenIDct_preheader23_111 + ChenIDct_preheader23_110_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_112_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %112 = add i32 %111, %110*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_112_reg <= ChenIDct_preheader23_112;
		if (start == 1'b0 && ^(ChenIDct_preheader23_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_112_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %113 = ashr i32 %112, 9*/
		ChenIDct_preheader23_113 = ($signed(ChenIDct_preheader23_112) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_113_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %113 = ashr i32 %112, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_113_reg <= ChenIDct_preheader23_113;
		if (start == 1'b0 && ^(ChenIDct_preheader23_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_113_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %114 = mul nsw i32 %82, 473*/
		ChenIDct_preheader23_114 = (ChenIDct_preheader23_82 * 32'd473);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_114_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %114 = mul nsw i32 %82, 473*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_18)) begin
		ChenIDct_preheader23_114_reg <= ChenIDct_preheader23_114;
		if (start == 1'b0 && ^(ChenIDct_preheader23_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_114_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %115 = mul nsw i32 %86, 196*/
		ChenIDct_preheader23_115 = (ChenIDct_preheader23_86 * 32'd196);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_115_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %115 = mul nsw i32 %86, 196*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_115_reg <= ChenIDct_preheader23_115;
		if (start == 1'b0 && ^(ChenIDct_preheader23_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_115_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %116 = add nsw i32 %115, %114*/
		ChenIDct_preheader23_116 = (ChenIDct_preheader23_115 + ChenIDct_preheader23_114_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_116_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %116 = add nsw i32 %115, %114*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_116_reg <= ChenIDct_preheader23_116;
		if (start == 1'b0 && ^(ChenIDct_preheader23_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_116_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %117 = ashr i32 %116, 9*/
		ChenIDct_preheader23_117 = ($signed(ChenIDct_preheader23_116) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_117_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %117 = ashr i32 %116, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_117_reg <= ChenIDct_preheader23_117;
		if (start == 1'b0 && ^(ChenIDct_preheader23_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_117_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %118 = add nsw i32 %117, %106*/
		ChenIDct_preheader23_118 = (ChenIDct_preheader23_117_reg + ChenIDct_preheader23_106_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_118_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %118 = add nsw i32 %117, %106*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		ChenIDct_preheader23_118_reg <= ChenIDct_preheader23_118;
		if (start == 1'b0 && ^(ChenIDct_preheader23_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_118_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %119 = add nsw i32 %113, %109*/
		ChenIDct_preheader23_119 = (ChenIDct_preheader23_113_reg + ChenIDct_preheader23_109_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_119_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %119 = add nsw i32 %113, %109*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		ChenIDct_preheader23_119_reg <= ChenIDct_preheader23_119;
		if (start == 1'b0 && ^(ChenIDct_preheader23_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_119_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %120 = sub nsw i32 %109, %113*/
		ChenIDct_preheader23_120 = (ChenIDct_preheader23_109_reg - ChenIDct_preheader23_113_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_120_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %120 = sub nsw i32 %109, %113*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		ChenIDct_preheader23_120_reg <= ChenIDct_preheader23_120;
		if (start == 1'b0 && ^(ChenIDct_preheader23_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_120_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %121 = sub nsw i32 %106, %117*/
		ChenIDct_preheader23_121 = (ChenIDct_preheader23_106_reg - ChenIDct_preheader23_117_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_121_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %121 = sub nsw i32 %106, %117*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		ChenIDct_preheader23_121_reg <= ChenIDct_preheader23_121;
		if (start == 1'b0 && ^(ChenIDct_preheader23_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_121_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %122 = add nsw i32 %91, %95*/
		ChenIDct_preheader23_122 = (ChenIDct_preheader23_91_reg + ChenIDct_preheader23_95_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_122_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %122 = add nsw i32 %91, %95*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_18)) begin
		ChenIDct_preheader23_122_reg <= ChenIDct_preheader23_122;
		if (start == 1'b0 && ^(ChenIDct_preheader23_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_122_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %123 = sub nsw i32 %91, %95*/
		ChenIDct_preheader23_123 = (ChenIDct_preheader23_91_reg - ChenIDct_preheader23_95_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_123_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %123 = sub nsw i32 %91, %95*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_18)) begin
		ChenIDct_preheader23_123_reg <= ChenIDct_preheader23_123;
		if (start == 1'b0 && ^(ChenIDct_preheader23_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_123_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %124 = sub nsw i32 %103, %99*/
		ChenIDct_preheader23_124 = (ChenIDct_preheader23_103_reg - ChenIDct_preheader23_99_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_124_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %124 = sub nsw i32 %103, %99*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_18)) begin
		ChenIDct_preheader23_124_reg <= ChenIDct_preheader23_124;
		if (start == 1'b0 && ^(ChenIDct_preheader23_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_124_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %125 = add nsw i32 %103, %99*/
		ChenIDct_preheader23_125 = (ChenIDct_preheader23_103_reg + ChenIDct_preheader23_99_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_125_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %125 = add nsw i32 %103, %99*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_18)) begin
		ChenIDct_preheader23_125_reg <= ChenIDct_preheader23_125;
		if (start == 1'b0 && ^(ChenIDct_preheader23_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_125_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %126 = sub nsw i32 %124, %123*/
		ChenIDct_preheader23_126 = (ChenIDct_preheader23_124 - ChenIDct_preheader23_123);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_126_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %126 = sub nsw i32 %124, %123*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_18)) begin
		ChenIDct_preheader23_126_reg <= ChenIDct_preheader23_126;
		if (start == 1'b0 && ^(ChenIDct_preheader23_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_126_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %127 = mul nsw i32 %126, 362*/
		ChenIDct_preheader23_127 = (ChenIDct_preheader23_126_reg * 32'd362);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_127_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %127 = mul nsw i32 %126, 362*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_127_reg <= ChenIDct_preheader23_127;
		if (start == 1'b0 && ^(ChenIDct_preheader23_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_127_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %128 = ashr i32 %127, 9*/
		ChenIDct_preheader23_128 = ($signed(ChenIDct_preheader23_127) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_128_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %128 = ashr i32 %127, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_128_reg <= ChenIDct_preheader23_128;
		if (start == 1'b0 && ^(ChenIDct_preheader23_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_128_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %129 = add nsw i32 %124, %123*/
		ChenIDct_preheader23_129 = (ChenIDct_preheader23_124 + ChenIDct_preheader23_123);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_129_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %129 = add nsw i32 %124, %123*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_18)) begin
		ChenIDct_preheader23_129_reg <= ChenIDct_preheader23_129;
		if (start == 1'b0 && ^(ChenIDct_preheader23_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_129_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %130 = mul nsw i32 %129, 362*/
		ChenIDct_preheader23_130 = (ChenIDct_preheader23_129_reg * 32'd362);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_130_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %130 = mul nsw i32 %129, 362*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_130_reg <= ChenIDct_preheader23_130;
		if (start == 1'b0 && ^(ChenIDct_preheader23_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_130_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %131 = ashr i32 %130, 9*/
		ChenIDct_preheader23_131 = ($signed(ChenIDct_preheader23_130) >>> 32'd9);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_131_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %131 = ashr i32 %130, 9*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_19)) begin
		ChenIDct_preheader23_131_reg <= ChenIDct_preheader23_131;
		if (start == 1'b0 && ^(ChenIDct_preheader23_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_131_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %132 = add nsw i32 %125, %118*/
		ChenIDct_preheader23_132 = (ChenIDct_preheader23_125_reg + ChenIDct_preheader23_118);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_132_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %132 = add nsw i32 %125, %118*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		ChenIDct_preheader23_132_reg <= ChenIDct_preheader23_132;
		if (start == 1'b0 && ^(ChenIDct_preheader23_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_132_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %133 = add nsw i32 %131, %119*/
		ChenIDct_preheader23_133 = (ChenIDct_preheader23_131_reg + ChenIDct_preheader23_119);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_133_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %133 = add nsw i32 %131, %119*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		ChenIDct_preheader23_133_reg <= ChenIDct_preheader23_133;
		if (start == 1'b0 && ^(ChenIDct_preheader23_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_133_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %134 = add nsw i32 %128, %120*/
		ChenIDct_preheader23_134 = (ChenIDct_preheader23_128_reg + ChenIDct_preheader23_120);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_134_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %134 = add nsw i32 %128, %120*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		ChenIDct_preheader23_134_reg <= ChenIDct_preheader23_134;
		if (start == 1'b0 && ^(ChenIDct_preheader23_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_134_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %135 = add nsw i32 %122, %121*/
		ChenIDct_preheader23_135 = (ChenIDct_preheader23_122_reg + ChenIDct_preheader23_121);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_135_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %135 = add nsw i32 %122, %121*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		ChenIDct_preheader23_135_reg <= ChenIDct_preheader23_135;
		if (start == 1'b0 && ^(ChenIDct_preheader23_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_135_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %136 = sub nsw i32 %121, %122*/
		ChenIDct_preheader23_136 = (ChenIDct_preheader23_121 - ChenIDct_preheader23_122_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_136_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %136 = sub nsw i32 %121, %122*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		ChenIDct_preheader23_136_reg <= ChenIDct_preheader23_136;
		if (start == 1'b0 && ^(ChenIDct_preheader23_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_136_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %137 = sub nsw i32 %120, %128*/
		ChenIDct_preheader23_137 = (ChenIDct_preheader23_120 - ChenIDct_preheader23_128_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_137_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %137 = sub nsw i32 %120, %128*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		ChenIDct_preheader23_137_reg <= ChenIDct_preheader23_137;
		if (start == 1'b0 && ^(ChenIDct_preheader23_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_137_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %138 = sub nsw i32 %119, %131*/
		ChenIDct_preheader23_138 = (ChenIDct_preheader23_119 - ChenIDct_preheader23_131_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_138_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %138 = sub nsw i32 %119, %131*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		ChenIDct_preheader23_138_reg <= ChenIDct_preheader23_138;
		if (start == 1'b0 && ^(ChenIDct_preheader23_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_138_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %139 = sub nsw i32 %118, %125*/
		ChenIDct_preheader23_139 = (ChenIDct_preheader23_118 - ChenIDct_preheader23_125_reg);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_139_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %139 = sub nsw i32 %118, %125*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		ChenIDct_preheader23_139_reg <= ChenIDct_preheader23_139;
		if (start == 1'b0 && ^(ChenIDct_preheader23_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_139_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %140 = add nsw i32 %i.126, 1*/
		ChenIDct_preheader23_140 = (ChenIDct_preheader23_i126_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_140_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %140 = add nsw i32 %i.126, 1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_140_reg <= ChenIDct_preheader23_140;
		if (start == 1'b0 && ^(ChenIDct_preheader23_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_140_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader23*/
	/*   %exitcond = icmp eq i32 %140, 8*/
		ChenIDct_preheader23_exitcond = (ChenIDct_preheader23_140 == 32'd8);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader23_exitcond_reg <= 0;
	/* ChenIDct: %.preheader23*/
	/*   %exitcond = icmp eq i32 %140, 8*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		ChenIDct_preheader23_exitcond_reg <= ChenIDct_preheader23_exitcond;
		if (start == 1'b0 && ^(ChenIDct_preheader23_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader23_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader*/
	/*   %i.224 = phi i32 [ %147, %.preheader ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_ChenIDct_BB_preheaderpreheader_25) & (memory_controller_waitrequest == 1'd0))) begin
		ChenIDct_preheader_i224 = 32'd0;
	end
	/* ChenIDct: %.preheader*/
	/*   %i.224 = phi i32 [ %147, %.preheader ], [ 0, %.preheader.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_ChenIDct_BB_preheader_61) & (memory_controller_waitrequest == 1'd0)) & (ChenIDct_preheader_exitcond1_reg == 1'd0))) */ begin
		ChenIDct_preheader_i224 = ChenIDct_preheader_147_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader_i224_reg <= 0;
	/* ChenIDct: %.preheader*/
	/*   %i.224 = phi i32 [ %147, %.preheader ], [ 0, %.preheader.preheader ]*/
	else if(((cur_state == LEGUP_F_ChenIDct_BB_preheaderpreheader_25) & (memory_controller_waitrequest == 1'd0))) begin
		ChenIDct_preheader_i224_reg <= ChenIDct_preheader_i224;
		if (start == 1'b0 && ^(ChenIDct_preheader_i224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader_i224_reg"); $finish; end
	end
	/* ChenIDct: %.preheader*/
	/*   %i.224 = phi i32 [ %147, %.preheader ], [ 0, %.preheader.preheader ]*/
	else if((((cur_state == LEGUP_F_ChenIDct_BB_preheader_61) & (memory_controller_waitrequest == 1'd0)) & (ChenIDct_preheader_exitcond1_reg == 1'd0))) begin
		ChenIDct_preheader_i224_reg <= ChenIDct_preheader_i224;
		if (start == 1'b0 && ^(ChenIDct_preheader_i224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader_i224_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader*/
	/*   %aptr.025 = getelementptr i32* %y, i32 %i.224*/
		ChenIDct_preheader_aptr025 = (arg_y + (4 * ChenIDct_preheader_i224_reg));
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader_aptr025_reg <= 0;
	/* ChenIDct: %.preheader*/
	/*   %aptr.025 = getelementptr i32* %y, i32 %i.224*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader_26)) begin
		ChenIDct_preheader_aptr025_reg <= ChenIDct_preheader_aptr025;
		if (start == 1'b0 && ^(ChenIDct_preheader_aptr025) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader_aptr025_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader*/
	/*   %141 = load i32* %aptr.025, align 4, !tbaa !1*/
		ChenIDct_preheader_141 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader_141_reg <= 0;
	/* ChenIDct: %.preheader*/
	/*   %141 = load i32* %aptr.025, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader_28)) begin
		ChenIDct_preheader_141_reg <= ChenIDct_preheader_141;
		if (start == 1'b0 && ^(ChenIDct_preheader_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader_141_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader*/
	/*   %142 = ashr i32 %141, 31*/
		ChenIDct_preheader_142 = ($signed(ChenIDct_preheader_141) >>> 32'd31);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader_142_reg <= 0;
	/* ChenIDct: %.preheader*/
	/*   %142 = ashr i32 %141, 31*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader_28)) begin
		ChenIDct_preheader_142_reg <= ChenIDct_preheader_142;
		if (start == 1'b0 && ^(ChenIDct_preheader_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader_142_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader*/
	/*   %143 = and i32 %142, -16*/
		ChenIDct_preheader_143 = (ChenIDct_preheader_142 & -32'd16);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader_143_reg <= 0;
	/* ChenIDct: %.preheader*/
	/*   %143 = and i32 %142, -16*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader_28)) begin
		ChenIDct_preheader_143_reg <= ChenIDct_preheader_143;
		if (start == 1'b0 && ^(ChenIDct_preheader_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader_143_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader*/
	/*   %144 = or i32 %143, 8*/
		ChenIDct_preheader_144 = (ChenIDct_preheader_143 | 32'd8);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader_144_reg <= 0;
	/* ChenIDct: %.preheader*/
	/*   %144 = or i32 %143, 8*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader_28)) begin
		ChenIDct_preheader_144_reg <= ChenIDct_preheader_144;
		if (start == 1'b0 && ^(ChenIDct_preheader_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader_144_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader*/
	/*   %145 = add i32 %144, %141*/
		ChenIDct_preheader_145 = (ChenIDct_preheader_144 + ChenIDct_preheader_141);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader_145_reg <= 0;
	/* ChenIDct: %.preheader*/
	/*   %145 = add i32 %144, %141*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader_28)) begin
		ChenIDct_preheader_145_reg <= ChenIDct_preheader_145;
		if (start == 1'b0 && ^(ChenIDct_preheader_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader_145_reg"); $finish; end
	end
end
always @(*) begin
	ChenIDct_preheader_146 = ChenIDct_signed_divide_32_0;
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader_146_reg <= 0;
	/* ChenIDct: %.preheader*/
	/*   %146 = sdiv i32 %145, 16*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader_60)) begin
		ChenIDct_preheader_146_reg <= ChenIDct_preheader_146;
		if (start == 1'b0 && ^(ChenIDct_preheader_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader_146_reg"); $finish; end
	end
	/* ChenIDct: %.preheader*/
	/*   %146 = sdiv i32 %145, 16*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader_60)) begin
		ChenIDct_preheader_146_reg <= ChenIDct_preheader_146;
		if (start == 1'b0 && ^(ChenIDct_preheader_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader_146_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader*/
	/*   %147 = add nsw i32 %i.224, 1*/
		ChenIDct_preheader_147 = (ChenIDct_preheader_i224_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader_147_reg <= 0;
	/* ChenIDct: %.preheader*/
	/*   %147 = add nsw i32 %i.224, 1*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader_26)) begin
		ChenIDct_preheader_147_reg <= ChenIDct_preheader_147;
		if (start == 1'b0 && ^(ChenIDct_preheader_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader_147_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader*/
	/*   %exitcond1 = icmp eq i32 %147, 64*/
		ChenIDct_preheader_exitcond1 = (ChenIDct_preheader_147 == 32'd64);
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_preheader_exitcond1_reg <= 0;
	/* ChenIDct: %.preheader*/
	/*   %exitcond1 = icmp eq i32 %147, 64*/
	else if((cur_state == LEGUP_F_ChenIDct_BB_preheader_26)) begin
		ChenIDct_preheader_exitcond1_reg <= ChenIDct_preheader_exitcond1;
		if (start == 1'b0 && ^(ChenIDct_preheader_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_preheader_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* ChenIDct: %.preheader*/
	/*   %146 = sdiv i32 %145, 16*/
		ChenIDct_signed_divide_32_0_op0 = ChenIDct_preheader_145;
end
always @(*) begin
	/* ChenIDct: %.preheader*/
	/*   %146 = sdiv i32 %145, 16*/
if (reset) begin ChenIDct_signed_divide_32_0_op1 = 0; end
		ChenIDct_signed_divide_32_0_op1 = 32'd16;
end
always @(*) begin
	lpm_divide_ChenIDct_preheader_146_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_ChenIDct_preheader_146_out = lpm_divide_ChenIDct_preheader_146_temp_out;
end
always @(*) begin
	ChenIDct_signed_divide_32_0 = lpm_divide_ChenIDct_preheader_146_out;
end


//voter


//port drive
always @(posedge clk) begin
	if (reset)
		finish <= 0;
	else if((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* ChenIDct: %148*/
	/*   ret void*/
	else if((cur_state == LEGUP_F_ChenIDct_BB__148_62)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   %11 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   %16 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   %9 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   %14 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   store i32 %63, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   store i32 %65, i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   store i32 %67, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   store i32 %69, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   %81 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   %85 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   %80 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   %84 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %132, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %134, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %136, i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %138, i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %.preheader*/
	/*   %141 = load i32* %aptr.025, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ChenIDct: %.preheader*/
	/*   store i32 %146, i32* %aptr.025, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader_60)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   %11 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		memory_controller_address_a = ChenIDct_1_scevgep24;
	end
	/* ChenIDct: %1*/
	/*   %16 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_3)) begin
		memory_controller_address_a = ChenIDct_1_scevgep16_reg;
	end
	/* ChenIDct: %1*/
	/*   %9 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_4)) begin
		memory_controller_address_a = ChenIDct_1_scevgep25_reg;
	end
	/* ChenIDct: %1*/
	/*   %14 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		memory_controller_address_a = ChenIDct_1_scevgep18_reg;
	end
	/* ChenIDct: %1*/
	/*   store i32 %63, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		memory_controller_address_a = ChenIDct_1_scevgep10_reg;
	end
	/* ChenIDct: %1*/
	/*   store i32 %65, i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_9)) begin
		memory_controller_address_a = ChenIDct_1_scevgep21_reg;
	end
	/* ChenIDct: %1*/
	/*   store i32 %67, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_10)) begin
		memory_controller_address_a = ChenIDct_1_scevgep17_reg;
	end
	/* ChenIDct: %1*/
	/*   store i32 %69, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_11)) begin
		memory_controller_address_a = ChenIDct_1_scevgep13_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   %81 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		memory_controller_address_a = ChenIDct_preheader23_scevgep7;
	end
	/* ChenIDct: %.preheader23*/
	/*   %85 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_15)) begin
		memory_controller_address_a = ChenIDct_preheader23_scevgep3_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   %80 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_16)) begin
		memory_controller_address_a = ChenIDct_preheader23_scevgep8_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   %84 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		memory_controller_address_a = ChenIDct_preheader23_scevgep4_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %132, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		memory_controller_address_a = ChenIDct_preheader23_scevgep8_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %134, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_21)) begin
		memory_controller_address_a = ChenIDct_preheader23_scevgep6_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %136, i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_22)) begin
		memory_controller_address_a = ChenIDct_preheader23_scevgep4_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %138, i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_23)) begin
		memory_controller_address_a = ChenIDct_preheader23_scevgep2_reg;
	end
	/* ChenIDct: %.preheader*/
	/*   %141 = load i32* %aptr.025, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader_26)) begin
		memory_controller_address_a = ChenIDct_preheader_aptr025;
	end
	/* ChenIDct: %.preheader*/
	/*   store i32 %146, i32* %aptr.025, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader_60)) begin
		memory_controller_address_a = ChenIDct_preheader_aptr025_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   %11 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   %16 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   %9 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   %14 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   store i32 %63, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   store i32 %65, i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   store i32 %67, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   store i32 %69, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   %81 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ChenIDct: %.preheader23*/
	/*   %85 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_15)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ChenIDct: %.preheader23*/
	/*   %80 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_16)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ChenIDct: %.preheader23*/
	/*   %84 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %132, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %134, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_21)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %136, i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_22)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %138, i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_23)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* ChenIDct: %.preheader*/
	/*   %141 = load i32* %aptr.025, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader_26)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ChenIDct: %.preheader*/
	/*   store i32 %146, i32* %aptr.025, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader_60)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   store i32 %63, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		memory_controller_in_a = ChenIDct_1_63;
	end
	/* ChenIDct: %1*/
	/*   store i32 %65, i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_9)) begin
		memory_controller_in_a = ChenIDct_1_65_reg;
	end
	/* ChenIDct: %1*/
	/*   store i32 %67, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_10)) begin
		memory_controller_in_a = ChenIDct_1_67_reg;
	end
	/* ChenIDct: %1*/
	/*   store i32 %69, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_11)) begin
		memory_controller_in_a = ChenIDct_1_69_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %132, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		memory_controller_in_a = ChenIDct_preheader23_132;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %134, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_21)) begin
		memory_controller_in_a = ChenIDct_preheader23_134_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %136, i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_22)) begin
		memory_controller_in_a = ChenIDct_preheader23_136_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %138, i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_23)) begin
		memory_controller_in_a = ChenIDct_preheader23_138_reg;
	end
	/* ChenIDct: %.preheader*/
	/*   store i32 %146, i32* %aptr.025, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader_60)) begin
		memory_controller_in_a = ChenIDct_preheader_146;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   %11 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %1*/
	/*   %16 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %1*/
	/*   %9 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %1*/
	/*   %14 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %1*/
	/*   store i32 %63, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %1*/
	/*   store i32 %65, i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %1*/
	/*   store i32 %67, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %1*/
	/*   store i32 %69, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %.preheader23*/
	/*   %81 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %.preheader23*/
	/*   %85 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %.preheader23*/
	/*   %80 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %.preheader23*/
	/*   %84 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %132, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %134, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %136, i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %138, i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %.preheader*/
	/*   %141 = load i32* %aptr.025, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader_26)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ChenIDct: %.preheader*/
	/*   store i32 %146, i32* %aptr.025, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader_60)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   %13 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   %18 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   %12 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   %17 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   store i32 %64, i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   store i32 %66, i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   store i32 %68, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   store i32 %70, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   %83 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   %87 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   %82 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   %86 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %133, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %135, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %137, i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %139, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_23)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   %13 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		memory_controller_address_b = ChenIDct_1_scevgep20;
	end
	/* ChenIDct: %1*/
	/*   %18 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_3)) begin
		memory_controller_address_b = ChenIDct_1_scevgep12_reg;
	end
	/* ChenIDct: %1*/
	/*   %12 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_4)) begin
		memory_controller_address_b = ChenIDct_1_scevgep22_reg;
	end
	/* ChenIDct: %1*/
	/*   %17 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		memory_controller_address_b = ChenIDct_1_scevgep14_reg;
	end
	/* ChenIDct: %1*/
	/*   store i32 %64, i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		memory_controller_address_b = ChenIDct_1_scevgep23_reg;
	end
	/* ChenIDct: %1*/
	/*   store i32 %66, i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_9)) begin
		memory_controller_address_b = ChenIDct_1_scevgep19_reg;
	end
	/* ChenIDct: %1*/
	/*   store i32 %68, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_10)) begin
		memory_controller_address_b = ChenIDct_1_scevgep15_reg;
	end
	/* ChenIDct: %1*/
	/*   store i32 %70, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_11)) begin
		memory_controller_address_b = ChenIDct_1_scevgep11_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   %83 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		memory_controller_address_b = ChenIDct_preheader23_scevgep5;
	end
	/* ChenIDct: %.preheader23*/
	/*   %87 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_15)) begin
		memory_controller_address_b = ChenIDct_preheader23_scevgep_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   %82 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_16)) begin
		memory_controller_address_b = ChenIDct_preheader23_scevgep6_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   %86 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		memory_controller_address_b = ChenIDct_preheader23_scevgep2_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %133, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		memory_controller_address_b = ChenIDct_preheader23_scevgep7_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %135, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_21)) begin
		memory_controller_address_b = ChenIDct_preheader23_scevgep5_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %137, i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_22)) begin
		memory_controller_address_b = ChenIDct_preheader23_scevgep3_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %139, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_23)) begin
		memory_controller_address_b = ChenIDct_preheader23_scevgep_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   %13 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   %18 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   %12 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_4)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   %17 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   store i32 %64, i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   store i32 %66, i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   store i32 %68, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* ChenIDct: %1*/
	/*   store i32 %70, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   %83 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ChenIDct: %.preheader23*/
	/*   %87 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_15)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ChenIDct: %.preheader23*/
	/*   %82 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_16)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ChenIDct: %.preheader23*/
	/*   %86 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %133, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %135, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_21)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %137, i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_22)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %139, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_23)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   store i32 %64, i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		memory_controller_in_b = ChenIDct_1_64;
	end
	/* ChenIDct: %1*/
	/*   store i32 %66, i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_9)) begin
		memory_controller_in_b = ChenIDct_1_66_reg;
	end
	/* ChenIDct: %1*/
	/*   store i32 %68, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_10)) begin
		memory_controller_in_b = ChenIDct_1_68_reg;
	end
	/* ChenIDct: %1*/
	/*   store i32 %70, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_11)) begin
		memory_controller_in_b = ChenIDct_1_70_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %133, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		memory_controller_in_b = ChenIDct_preheader23_133;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %135, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_21)) begin
		memory_controller_in_b = ChenIDct_preheader23_135_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %137, i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_22)) begin
		memory_controller_in_b = ChenIDct_preheader23_137_reg;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %139, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_23)) begin
		memory_controller_in_b = ChenIDct_preheader23_139_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* ChenIDct: %1*/
	/*   %13 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ChenIDct: %1*/
	/*   %18 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ChenIDct: %1*/
	/*   %12 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ChenIDct: %1*/
	/*   %17 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ChenIDct: %1*/
	/*   store i32 %64, i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ChenIDct: %1*/
	/*   store i32 %66, i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ChenIDct: %1*/
	/*   store i32 %68, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ChenIDct: %1*/
	/*   store i32 %70, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB__1_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ChenIDct: %.preheader23*/
	/*   %83 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ChenIDct: %.preheader23*/
	/*   %87 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ChenIDct: %.preheader23*/
	/*   %82 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ChenIDct: %.preheader23*/
	/*   %86 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %133, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %135, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %137, i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ChenIDct: %.preheader23*/
	/*   store i32 %139, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ChenIDct_BB_preheader23_23)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module Write4Blocks
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_store1,
	arg_store2,
	arg_store3,
	arg_store4,
	arg_p_out_vpos,
	arg_p_out_hpos,
	arg_p_out_buf
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_Write4Blocks_BB__0_1 = 7'd1;
parameter [6:0] LEGUP_F_Write4Blocks_BB__0_2 = 7'd2;
parameter [6:0] LEGUP_F_Write4Blocks_BB__0_3 = 7'd3;
parameter [6:0] LEGUP_F_Write4Blocks_BB__0_4 = 7'd4;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrph8splitusi_5 = 7'd5;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrph8splitusi_6 = 7'd6;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrph8splitusi_7 = 7'd7;
parameter [6:0] LEGUP_F_Write4Blocks_BB__41_8 = 7'd8;
parameter [6:0] LEGUP_F_Write4Blocks_BB__42_9 = 7'd9;
parameter [6:0] LEGUP_F_Write4Blocks_BB__42_10 = 7'd10;
parameter [6:0] LEGUP_F_Write4Blocks_BB__42_11 = 7'd11;
parameter [6:0] LEGUP_F_Write4Blocks_BB__42_12 = 7'd12;
parameter [6:0] LEGUP_F_Write4Blocks_BB__42_13 = 7'd13;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrphusi_14 = 7'd14;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexitloopexit_15 = 7'd15;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexit_16 = 7'd16;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexitWriteOneBlockexit60_crit_edge_17 = 7'd17;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrph8i41_18 = 7'd18;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrph8lrph8split_crit_edgei44_19 = 7'd19;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20 = 7'd20;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrph8splitusi49_21 = 7'd21;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrph8splitusi49_22 = 7'd22;
parameter [6:0] LEGUP_F_Write4Blocks_BB__85_23 = 7'd23;
parameter [6:0] LEGUP_F_Write4Blocks_BB__86_24 = 7'd24;
parameter [6:0] LEGUP_F_Write4Blocks_BB__86_25 = 7'd25;
parameter [6:0] LEGUP_F_Write4Blocks_BB__86_26 = 7'd26;
parameter [6:0] LEGUP_F_Write4Blocks_BB__86_27 = 7'd27;
parameter [6:0] LEGUP_F_Write4Blocks_BB__86_28 = 7'd28;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrphusi57_29 = 7'd29;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexit60loopexit_30 = 7'd30;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexit60_31 = 7'd31;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32 = 7'd32;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrph8splitusi29_33 = 7'd33;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrph8splitusi29_34 = 7'd34;
parameter [6:0] LEGUP_F_Write4Blocks_BB__124_35 = 7'd35;
parameter [6:0] LEGUP_F_Write4Blocks_BB__125_36 = 7'd36;
parameter [6:0] LEGUP_F_Write4Blocks_BB__125_37 = 7'd37;
parameter [6:0] LEGUP_F_Write4Blocks_BB__125_38 = 7'd38;
parameter [6:0] LEGUP_F_Write4Blocks_BB__125_39 = 7'd39;
parameter [6:0] LEGUP_F_Write4Blocks_BB__125_40 = 7'd40;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrphusi37_41 = 7'd41;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexit40loopexit_42 = 7'd42;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexit40_43 = 7'd43;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44 = 7'd44;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrph8splitusi9_45 = 7'd45;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrph8splitusi9_46 = 7'd46;
parameter [6:0] LEGUP_F_Write4Blocks_BB__166_47 = 7'd47;
parameter [6:0] LEGUP_F_Write4Blocks_BB__167_48 = 7'd48;
parameter [6:0] LEGUP_F_Write4Blocks_BB__167_49 = 7'd49;
parameter [6:0] LEGUP_F_Write4Blocks_BB__167_50 = 7'd50;
parameter [6:0] LEGUP_F_Write4Blocks_BB__167_51 = 7'd51;
parameter [6:0] LEGUP_F_Write4Blocks_BB__167_52 = 7'd52;
parameter [6:0] LEGUP_F_Write4Blocks_BB_lrphusi17_53 = 7'd53;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20loopexit_54 = 7'd54;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_55 = 7'd55;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_56 = 7'd56;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_57 = 7'd57;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_58 = 7'd58;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_59 = 7'd59;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_60 = 7'd60;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_61 = 7'd61;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_62 = 7'd62;
parameter [6:0] LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_63 = 7'd63;
parameter [6:0] LEGUP_F_Write4Blocks_BB__182_64 = 7'd64;
parameter [6:0] LEGUP_F_Write4Blocks_BB__182_65 = 7'd65;
parameter [6:0] LEGUP_F_Write4Blocks_BB__183_66 = 7'd66;
parameter [6:0] LEGUP_F_Write4Blocks_BB__183_67 = 7'd67;
parameter [6:0] LEGUP_F_Write4Blocks_BB__184_68 = 7'd68;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
integer i;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_store1;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_store2;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_store3;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_store4;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p_out_vpos;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p_out_hpos;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p_out_buf;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [31:0] Write4Blocks_0_1;
reg [31:0] Write4Blocks_0_1_reg;
reg [31:0] Write4Blocks_0_2;
reg [31:0] Write4Blocks_0_2_reg;
reg [31:0] Write4Blocks_0_3;
reg [31:0] Write4Blocks_0_3_reg;
reg [31:0] Write4Blocks_0_4;
reg [31:0] Write4Blocks_0_4_reg;
reg [15:0] Write4Blocks_0_5;
reg [15:0] Write4Blocks_0_5_reg;
reg [31:0] Write4Blocks_0_6;
reg [31:0] Write4Blocks_0_6_reg;
reg [15:0] Write4Blocks_0_7;
reg [15:0] Write4Blocks_0_7_reg;
reg [31:0] Write4Blocks_0_8;
reg [31:0] Write4Blocks_0_8_reg;
reg  Write4Blocks_0_9;
reg  Write4Blocks_0_9_reg;
reg  Write4Blocks_0_10;
reg  Write4Blocks_0_10_reg;
reg  Write4Blocks_0_orcond;
reg  Write4Blocks_0_orcond_reg;
reg [31:0] Write4Blocks_lrph8splitusi_11;
reg [31:0] Write4Blocks_lrph8splitusi_11_reg;
reg [31:0] Write4Blocks_lrph8splitusi_12;
reg [31:0] Write4Blocks_lrph8splitusi_12_reg;
reg [31:0] Write4Blocks_lrph8splitusi_13;
reg [31:0] Write4Blocks_lrph8splitusi_13_reg;
reg  Write4Blocks_lrph8splitusi_14;
reg  Write4Blocks_lrph8splitusi_14_reg;
reg [31:0] Write4Blocks_lrph8splitusi_smax44;
reg [31:0] Write4Blocks_lrph8splitusi_smax44_reg;
reg [31:0] Write4Blocks_lrph8splitusi_15;
reg [31:0] Write4Blocks_lrph8splitusi_15_reg;
reg [31:0] Write4Blocks_lrph8splitusi_16;
reg [31:0] Write4Blocks_lrph8splitusi_16_reg;
reg [31:0] Write4Blocks_lrph8splitusi_17;
reg [31:0] Write4Blocks_lrph8splitusi_17_reg;
reg  Write4Blocks_lrph8splitusi_18;
reg  Write4Blocks_lrph8splitusi_18_reg;
reg [31:0] Write4Blocks_lrph8splitusi_umax45;
reg [31:0] Write4Blocks_lrph8splitusi_umax45_reg;
reg [31:0] Write4Blocks_lrph8splitusi_19;
reg [31:0] Write4Blocks_lrph8splitusi_19_reg;
reg [31:0] Write4Blocks_lrph8splitusi_20;
reg [31:0] Write4Blocks_lrph8splitusi_20_reg;
reg [31:0] Write4Blocks_lrph8splitusi_21;
reg [31:0] Write4Blocks_lrph8splitusi_21_reg;
reg [31:0] Write4Blocks_lrph8splitusi_22;
reg [31:0] Write4Blocks_lrph8splitusi_22_reg;
reg  Write4Blocks_lrph8splitusi_23;
reg  Write4Blocks_lrph8splitusi_23_reg;
reg [31:0] Write4Blocks_lrph8splitusi_smax51;
reg [31:0] Write4Blocks_lrph8splitusi_smax51_reg;
reg [31:0] Write4Blocks_lrph8splitusi_24;
reg [31:0] Write4Blocks_lrph8splitusi_24_reg;
reg [31:0] Write4Blocks_lrph8splitusi_25;
reg [31:0] Write4Blocks_lrph8splitusi_25_reg;
reg [31:0] Write4Blocks_lrph8splitusi_26;
reg [31:0] Write4Blocks_lrph8splitusi_26_reg;
reg  Write4Blocks_lrph8splitusi_27;
reg  Write4Blocks_lrph8splitusi_27_reg;
reg [31:0] Write4Blocks_lrph8splitusi_umax52;
reg [31:0] Write4Blocks_lrph8splitusi_umax52_reg;
reg [31:0] Write4Blocks_lrph8splitusi_28;
reg [31:0] Write4Blocks_lrph8splitusi_28_reg;
reg [31:0] Write4Blocks_lrph8splitusi_29;
reg [31:0] Write4Blocks_lrph8splitusi_29_reg;
reg [31:0] Write4Blocks_lrph8splitusi_30;
reg [31:0] Write4Blocks_lrph8splitusi_30_reg;
reg [31:0] Write4Blocks_lrph8splitusi_31;
reg [31:0] Write4Blocks_lrph8splitusi_31_reg;
reg [31:0] Write4Blocks_lrph8splitusi_32;
reg [31:0] Write4Blocks_lrph8splitusi_32_reg;
reg [31:0] Write4Blocks_lrph8splitusi_33;
reg [31:0] Write4Blocks_lrph8splitusi_33_reg;
reg [31:0] Write4Blocks_lrph8splitusi_34;
reg [31:0] Write4Blocks_lrph8splitusi_34_reg;
reg [31:0] Write4Blocks_lrph8splitusi_35;
reg [31:0] Write4Blocks_lrph8splitusi_35_reg;
reg  Write4Blocks_lrph8splitusi_36;
reg  Write4Blocks_lrph8splitusi_36_reg;
reg [31:0] Write4Blocks_lrph8splitusi_smax55;
reg [31:0] Write4Blocks_lrph8splitusi_smax55_reg;
reg [31:0] Write4Blocks_lrph8splitusi_37;
reg [31:0] Write4Blocks_lrph8splitusi_37_reg;
reg [31:0] Write4Blocks_lrph8splitusi_38;
reg [31:0] Write4Blocks_lrph8splitusi_38_reg;
reg  Write4Blocks_lrph8splitusi_39;
reg  Write4Blocks_lrph8splitusi_39_reg;
reg [31:0] Write4Blocks_lrph8splitusi_umax56;
reg [31:0] Write4Blocks_lrph8splitusi_umax56_reg;
reg [31:0] Write4Blocks_lrph8splitusi_40;
reg [31:0] Write4Blocks_lrph8splitusi_40_reg;
reg [31:0] Write4Blocks_41_indvarnext48;
reg [31:0] Write4Blocks_41_indvarnext48_reg;
reg  Write4Blocks_41_exitcond53;
reg  Write4Blocks_41_exitcond53_reg;
reg [31:0] Write4Blocks_42_indvar42;
reg [31:0] Write4Blocks_42_indvar42_reg;
reg [31:0] Write4Blocks_42_43;
reg [31:0] Write4Blocks_42_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_42_scevgep50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_42_scevgep50_reg;
reg [31:0] Write4Blocks_42_44;
reg [31:0] Write4Blocks_42_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_42_14usi;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_42_14usi_reg;
reg [31:0] Write4Blocks_42_45;
reg [31:0] Write4Blocks_42_45_reg;
reg [7:0] Write4Blocks_42_46;
reg [7:0] Write4Blocks_42_46_reg;
reg [31:0] Write4Blocks_42_indvarnext43;
reg [31:0] Write4Blocks_42_indvarnext43_reg;
reg  Write4Blocks_42_exitcond46;
reg  Write4Blocks_42_exitcond46_reg;
reg [31:0] Write4Blocks_lrphusi_indvar47;
reg [31:0] Write4Blocks_lrphusi_indvar47_reg;
reg [31:0] Write4Blocks_lrphusi_47;
reg [31:0] Write4Blocks_lrphusi_47_reg;
reg [31:0] Write4Blocks_lrphusi_48;
reg [31:0] Write4Blocks_lrphusi_48_reg;
reg [31:0] Write4Blocks_lrphusi_49;
reg [31:0] Write4Blocks_lrphusi_49_reg;
reg [31:0] Write4Blocks_WriteOneBlockexit_50;
reg [31:0] Write4Blocks_WriteOneBlockexit_50_reg;
reg  Write4Blocks_lrph8i41_51;
reg  Write4Blocks_lrph8i41_51_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_52;
reg [31:0] Write4Blocks_lrph8splitusi49_52_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_53;
reg [31:0] Write4Blocks_lrph8splitusi49_53_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_54;
reg [31:0] Write4Blocks_lrph8splitusi49_54_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_55;
reg [31:0] Write4Blocks_lrph8splitusi49_55_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_56;
reg [31:0] Write4Blocks_lrph8splitusi49_56_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_57;
reg [31:0] Write4Blocks_lrph8splitusi49_57_reg;
reg  Write4Blocks_lrph8splitusi49_58;
reg  Write4Blocks_lrph8splitusi49_58_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_smax28;
reg [31:0] Write4Blocks_lrph8splitusi49_smax28_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_59;
reg [31:0] Write4Blocks_lrph8splitusi49_59_reg;
reg  Write4Blocks_lrph8splitusi49_60;
reg  Write4Blocks_lrph8splitusi49_60_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_umax29;
reg [31:0] Write4Blocks_lrph8splitusi49_umax29_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_61;
reg [31:0] Write4Blocks_lrph8splitusi49_61_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_62;
reg [31:0] Write4Blocks_lrph8splitusi49_62_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_63;
reg [31:0] Write4Blocks_lrph8splitusi49_63_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_64;
reg [31:0] Write4Blocks_lrph8splitusi49_64_reg;
reg  Write4Blocks_lrph8splitusi49_65;
reg  Write4Blocks_lrph8splitusi49_65_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_smax35;
reg [31:0] Write4Blocks_lrph8splitusi49_smax35_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_66;
reg [31:0] Write4Blocks_lrph8splitusi49_66_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_67;
reg [31:0] Write4Blocks_lrph8splitusi49_67_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_68;
reg [31:0] Write4Blocks_lrph8splitusi49_68_reg;
reg  Write4Blocks_lrph8splitusi49_69;
reg  Write4Blocks_lrph8splitusi49_69_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_umax36;
reg [31:0] Write4Blocks_lrph8splitusi49_umax36_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_70;
reg [31:0] Write4Blocks_lrph8splitusi49_70_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_71;
reg [31:0] Write4Blocks_lrph8splitusi49_71_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_72;
reg [31:0] Write4Blocks_lrph8splitusi49_72_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_73;
reg [31:0] Write4Blocks_lrph8splitusi49_73_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_74;
reg [31:0] Write4Blocks_lrph8splitusi49_74_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_75;
reg [31:0] Write4Blocks_lrph8splitusi49_75_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_76;
reg [31:0] Write4Blocks_lrph8splitusi49_76_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_77;
reg [31:0] Write4Blocks_lrph8splitusi49_77_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_78;
reg [31:0] Write4Blocks_lrph8splitusi49_78_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_79;
reg [31:0] Write4Blocks_lrph8splitusi49_79_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_80;
reg [31:0] Write4Blocks_lrph8splitusi49_80_reg;
reg  Write4Blocks_lrph8splitusi49_81;
reg  Write4Blocks_lrph8splitusi49_81_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_smax39;
reg [31:0] Write4Blocks_lrph8splitusi49_smax39_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_82;
reg [31:0] Write4Blocks_lrph8splitusi49_82_reg;
reg  Write4Blocks_lrph8splitusi49_83;
reg  Write4Blocks_lrph8splitusi49_83_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_umax40;
reg [31:0] Write4Blocks_lrph8splitusi49_umax40_reg;
reg [31:0] Write4Blocks_lrph8splitusi49_84;
reg [31:0] Write4Blocks_lrph8splitusi49_84_reg;
reg [31:0] Write4Blocks_85_indvarnext32;
reg [31:0] Write4Blocks_85_indvarnext32_reg;
reg  Write4Blocks_85_exitcond37;
reg  Write4Blocks_85_exitcond37_reg;
reg [31:0] Write4Blocks_86_indvar26;
reg [31:0] Write4Blocks_86_indvar26_reg;
reg [31:0] Write4Blocks_86_87;
reg [31:0] Write4Blocks_86_87_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_86_scevgep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_86_scevgep34_reg;
reg [31:0] Write4Blocks_86_88;
reg [31:0] Write4Blocks_86_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_86_14usi52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_86_14usi52_reg;
reg [31:0] Write4Blocks_86_89;
reg [31:0] Write4Blocks_86_89_reg;
reg [7:0] Write4Blocks_86_90;
reg [7:0] Write4Blocks_86_90_reg;
reg [31:0] Write4Blocks_86_indvarnext27;
reg [31:0] Write4Blocks_86_indvarnext27_reg;
reg  Write4Blocks_86_exitcond30;
reg  Write4Blocks_86_exitcond30_reg;
reg [31:0] Write4Blocks_lrphusi57_indvar31;
reg [31:0] Write4Blocks_lrphusi57_indvar31_reg;
reg [31:0] Write4Blocks_lrphusi57_91;
reg [31:0] Write4Blocks_lrphusi57_91_reg;
reg [31:0] Write4Blocks_lrphusi57_92;
reg [31:0] Write4Blocks_lrphusi57_92_reg;
reg [31:0] Write4Blocks_lrphusi57_93;
reg [31:0] Write4Blocks_lrphusi57_93_reg;
reg [31:0] Write4Blocks_WriteOneBlockexit60_prephi;
reg [31:0] Write4Blocks_WriteOneBlockexit60_prephi_reg;
reg  Write4Blocks_WriteOneBlockexit60_94;
reg  Write4Blocks_WriteOneBlockexit60_94_reg;
reg  Write4Blocks_WriteOneBlockexit60_orcond71;
reg  Write4Blocks_WriteOneBlockexit60_orcond71_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_95;
reg [31:0] Write4Blocks_lrph8splitusi29_95_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_96;
reg [31:0] Write4Blocks_lrph8splitusi29_96_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_97;
reg [31:0] Write4Blocks_lrph8splitusi29_97_reg;
reg  Write4Blocks_lrph8splitusi29_98;
reg  Write4Blocks_lrph8splitusi29_98_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_smax12;
reg [31:0] Write4Blocks_lrph8splitusi29_smax12_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_99;
reg [31:0] Write4Blocks_lrph8splitusi29_99_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_100;
reg [31:0] Write4Blocks_lrph8splitusi29_100_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_101;
reg [31:0] Write4Blocks_lrph8splitusi29_101_reg;
reg  Write4Blocks_lrph8splitusi29_102;
reg  Write4Blocks_lrph8splitusi29_102_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_umax13;
reg [31:0] Write4Blocks_lrph8splitusi29_umax13_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_103;
reg [31:0] Write4Blocks_lrph8splitusi29_103_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_104;
reg [31:0] Write4Blocks_lrph8splitusi29_104_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_105;
reg [31:0] Write4Blocks_lrph8splitusi29_105_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_106;
reg [31:0] Write4Blocks_lrph8splitusi29_106_reg;
reg  Write4Blocks_lrph8splitusi29_107;
reg  Write4Blocks_lrph8splitusi29_107_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_smax19;
reg [31:0] Write4Blocks_lrph8splitusi29_smax19_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_108;
reg [31:0] Write4Blocks_lrph8splitusi29_108_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_109;
reg [31:0] Write4Blocks_lrph8splitusi29_109_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_110;
reg [31:0] Write4Blocks_lrph8splitusi29_110_reg;
reg  Write4Blocks_lrph8splitusi29_111;
reg  Write4Blocks_lrph8splitusi29_111_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_umax20;
reg [31:0] Write4Blocks_lrph8splitusi29_umax20_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_112;
reg [31:0] Write4Blocks_lrph8splitusi29_112_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_113;
reg [31:0] Write4Blocks_lrph8splitusi29_113_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_114;
reg [31:0] Write4Blocks_lrph8splitusi29_114_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_115;
reg [31:0] Write4Blocks_lrph8splitusi29_115_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_116;
reg [31:0] Write4Blocks_lrph8splitusi29_116_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_117;
reg [31:0] Write4Blocks_lrph8splitusi29_117_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_118;
reg [31:0] Write4Blocks_lrph8splitusi29_118_reg;
reg  Write4Blocks_lrph8splitusi29_119;
reg  Write4Blocks_lrph8splitusi29_119_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_smax23;
reg [31:0] Write4Blocks_lrph8splitusi29_smax23_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_120;
reg [31:0] Write4Blocks_lrph8splitusi29_120_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_121;
reg [31:0] Write4Blocks_lrph8splitusi29_121_reg;
reg  Write4Blocks_lrph8splitusi29_122;
reg  Write4Blocks_lrph8splitusi29_122_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_umax24;
reg [31:0] Write4Blocks_lrph8splitusi29_umax24_reg;
reg [31:0] Write4Blocks_lrph8splitusi29_123;
reg [31:0] Write4Blocks_lrph8splitusi29_123_reg;
reg [31:0] Write4Blocks_124_indvarnext16;
reg [31:0] Write4Blocks_124_indvarnext16_reg;
reg  Write4Blocks_124_exitcond21;
reg  Write4Blocks_124_exitcond21_reg;
reg [31:0] Write4Blocks_125_indvar10;
reg [31:0] Write4Blocks_125_indvar10_reg;
reg [31:0] Write4Blocks_125_126;
reg [31:0] Write4Blocks_125_126_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_125_scevgep18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_125_scevgep18_reg;
reg [31:0] Write4Blocks_125_127;
reg [31:0] Write4Blocks_125_127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_125_14usi32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_125_14usi32_reg;
reg [31:0] Write4Blocks_125_128;
reg [31:0] Write4Blocks_125_128_reg;
reg [7:0] Write4Blocks_125_129;
reg [7:0] Write4Blocks_125_129_reg;
reg [31:0] Write4Blocks_125_indvarnext11;
reg [31:0] Write4Blocks_125_indvarnext11_reg;
reg  Write4Blocks_125_exitcond14;
reg  Write4Blocks_125_exitcond14_reg;
reg [31:0] Write4Blocks_lrphusi37_indvar15;
reg [31:0] Write4Blocks_lrphusi37_indvar15_reg;
reg [31:0] Write4Blocks_lrphusi37_130;
reg [31:0] Write4Blocks_lrphusi37_130_reg;
reg [31:0] Write4Blocks_lrphusi37_131;
reg [31:0] Write4Blocks_lrphusi37_131_reg;
reg [31:0] Write4Blocks_lrphusi37_132;
reg [31:0] Write4Blocks_lrphusi37_132_reg;
reg  Write4Blocks_WriteOneBlockexit40_133;
reg  Write4Blocks_WriteOneBlockexit40_133_reg;
reg  Write4Blocks_WriteOneBlockexit40_orcond72;
reg  Write4Blocks_WriteOneBlockexit40_orcond72_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_134;
reg [31:0] Write4Blocks_lrph8splitusi9_134_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_135;
reg [31:0] Write4Blocks_lrph8splitusi9_135_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_136;
reg [31:0] Write4Blocks_lrph8splitusi9_136_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_137;
reg [31:0] Write4Blocks_lrph8splitusi9_137_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_138;
reg [31:0] Write4Blocks_lrph8splitusi9_138_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_139;
reg [31:0] Write4Blocks_lrph8splitusi9_139_reg;
reg  Write4Blocks_lrph8splitusi9_140;
reg  Write4Blocks_lrph8splitusi9_140_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_smax;
reg [31:0] Write4Blocks_lrph8splitusi9_smax_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_141;
reg [31:0] Write4Blocks_lrph8splitusi9_141_reg;
reg  Write4Blocks_lrph8splitusi9_142;
reg  Write4Blocks_lrph8splitusi9_142_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_umax;
reg [31:0] Write4Blocks_lrph8splitusi9_umax_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_143;
reg [31:0] Write4Blocks_lrph8splitusi9_143_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_144;
reg [31:0] Write4Blocks_lrph8splitusi9_144_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_145;
reg [31:0] Write4Blocks_lrph8splitusi9_145_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_146;
reg [31:0] Write4Blocks_lrph8splitusi9_146_reg;
reg  Write4Blocks_lrph8splitusi9_147;
reg  Write4Blocks_lrph8splitusi9_147_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_smax3;
reg [31:0] Write4Blocks_lrph8splitusi9_smax3_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_148;
reg [31:0] Write4Blocks_lrph8splitusi9_148_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_149;
reg [31:0] Write4Blocks_lrph8splitusi9_149_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_150;
reg [31:0] Write4Blocks_lrph8splitusi9_150_reg;
reg  Write4Blocks_lrph8splitusi9_151;
reg  Write4Blocks_lrph8splitusi9_151_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_umax4;
reg [31:0] Write4Blocks_lrph8splitusi9_umax4_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_152;
reg [31:0] Write4Blocks_lrph8splitusi9_152_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_153;
reg [31:0] Write4Blocks_lrph8splitusi9_153_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_154;
reg [31:0] Write4Blocks_lrph8splitusi9_154_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_155;
reg [31:0] Write4Blocks_lrph8splitusi9_155_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_156;
reg [31:0] Write4Blocks_lrph8splitusi9_156_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_157;
reg [31:0] Write4Blocks_lrph8splitusi9_157_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_158;
reg [31:0] Write4Blocks_lrph8splitusi9_158_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_159;
reg [31:0] Write4Blocks_lrph8splitusi9_159_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_160;
reg [31:0] Write4Blocks_lrph8splitusi9_160_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_161;
reg [31:0] Write4Blocks_lrph8splitusi9_161_reg;
reg  Write4Blocks_lrph8splitusi9_162;
reg  Write4Blocks_lrph8splitusi9_162_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_smax7;
reg [31:0] Write4Blocks_lrph8splitusi9_smax7_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_163;
reg [31:0] Write4Blocks_lrph8splitusi9_163_reg;
reg  Write4Blocks_lrph8splitusi9_164;
reg  Write4Blocks_lrph8splitusi9_164_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_umax8;
reg [31:0] Write4Blocks_lrph8splitusi9_umax8_reg;
reg [31:0] Write4Blocks_lrph8splitusi9_165;
reg [31:0] Write4Blocks_lrph8splitusi9_165_reg;
reg [31:0] Write4Blocks_166_indvarnext2;
reg [31:0] Write4Blocks_166_indvarnext2_reg;
reg  Write4Blocks_166_exitcond5;
reg  Write4Blocks_166_exitcond5_reg;
reg [31:0] Write4Blocks_167_indvar;
reg [31:0] Write4Blocks_167_indvar_reg;
reg [31:0] Write4Blocks_167_168;
reg [31:0] Write4Blocks_167_168_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_167_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_167_scevgep_reg;
reg [31:0] Write4Blocks_167_169;
reg [31:0] Write4Blocks_167_169_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_167_14usi12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_167_14usi12_reg;
reg [31:0] Write4Blocks_167_170;
reg [31:0] Write4Blocks_167_170_reg;
reg [7:0] Write4Blocks_167_171;
reg [7:0] Write4Blocks_167_171_reg;
reg [31:0] Write4Blocks_167_indvarnext;
reg [31:0] Write4Blocks_167_indvarnext_reg;
reg  Write4Blocks_167_exitcond;
reg  Write4Blocks_167_exitcond_reg;
reg [31:0] Write4Blocks_lrphusi17_indvar1;
reg [31:0] Write4Blocks_lrphusi17_indvar1_reg;
reg [31:0] Write4Blocks_lrphusi17_172;
reg [31:0] Write4Blocks_lrphusi17_172_reg;
reg [31:0] Write4Blocks_lrphusi17_173;
reg [31:0] Write4Blocks_lrphusi17_173_reg;
reg [31:0] Write4Blocks_lrphusi17_174;
reg [31:0] Write4Blocks_lrphusi17_174_reg;
reg [31:0] Write4Blocks_WriteOneBlockexit20_175;
reg [31:0] Write4Blocks_WriteOneBlockexit20_175_reg;
reg [31:0] Write4Blocks_WriteOneBlockexit20_176;
reg [31:0] Write4Blocks_WriteOneBlockexit20_176_reg;
reg [31:0] Write4Blocks_WriteOneBlockexit20_177;
reg [31:0] Write4Blocks_WriteOneBlockexit20_177_reg;
reg [31:0] Write4Blocks_WriteOneBlockexit20_178;
reg [31:0] Write4Blocks_WriteOneBlockexit20_178_reg;
reg [31:0] Write4Blocks_WriteOneBlockexit20_179;
reg [31:0] Write4Blocks_WriteOneBlockexit20_179_reg;
reg [31:0] Write4Blocks_WriteOneBlockexit20_180;
reg [31:0] Write4Blocks_WriteOneBlockexit20_180_reg;
reg  Write4Blocks_WriteOneBlockexit20_181;
reg  Write4Blocks_WriteOneBlockexit20_181_reg;
wire [12:0] hana_jpg_address_a;
wire  hana_jpg_write_enable_a;
wire [7:0] hana_jpg_in_a;
wire [7:0] hana_jpg_out_a;
wire [12:0] hana_jpg_address_b;
wire  hana_jpg_write_enable_b;
wire [7:0] hana_jpg_in_b;
wire [7:0] hana_jpg_out_b;
wire [13:0] hana_bmp_address_a;
wire  hana_bmp_write_enable_a;
wire [7:0] hana_bmp_in_a;
wire [7:0] hana_bmp_out_a;
wire [13:0] hana_bmp_address_b;
wire  hana_bmp_write_enable_b;
wire [7:0] hana_bmp_in_b;
wire [7:0] hana_bmp_out_b;
wire [3:0] out_unread_marker_address_a;
wire  out_unread_marker_write_enable_a;
wire [31:0] out_unread_marker_in_a;
wire [31:0] out_unread_marker_out_a;
wire [3:0] out_unread_marker_address_b;
wire  out_unread_marker_write_enable_b;
wire [31:0] out_unread_marker_in_b;
wire [31:0] out_unread_marker_out_b;
wire [1:0] out_index_get_sof_address_a;
wire  out_index_get_sof_write_enable_a;
wire [31:0] out_index_get_sof_in_a;
wire [31:0] out_index_get_sof_out_a;
wire [1:0] out_index_get_sof_address_b;
wire  out_index_get_sof_write_enable_b;
wire [31:0] out_index_get_sof_in_b;
wire [31:0] out_index_get_sof_out_b;
wire [1:0] out_v_samp_factor_get_sof_address_a;
wire  out_v_samp_factor_get_sof_write_enable_a;
wire [31:0] out_v_samp_factor_get_sof_in_a;
wire [31:0] out_v_samp_factor_get_sof_out_a;
wire [1:0] out_v_samp_factor_get_sof_address_b;
wire  out_v_samp_factor_get_sof_write_enable_b;
wire [31:0] out_v_samp_factor_get_sof_in_b;
wire [31:0] out_v_samp_factor_get_sof_out_b;
wire [1:0] out_comp_id_get_sos_address_a;
wire  out_comp_id_get_sos_write_enable_a;
wire [31:0] out_comp_id_get_sos_in_a;
wire [31:0] out_comp_id_get_sos_out_a;
wire [1:0] out_comp_id_get_sos_address_b;
wire  out_comp_id_get_sos_write_enable_b;
wire [31:0] out_comp_id_get_sos_in_b;
wire [31:0] out_comp_id_get_sos_out_b;
wire [1:0] out_ac_tbl_no_get_sos_address_a;
wire  out_ac_tbl_no_get_sos_write_enable_a;
wire [31:0] out_ac_tbl_no_get_sos_in_a;
wire [31:0] out_ac_tbl_no_get_sos_out_a;
wire [1:0] out_ac_tbl_no_get_sos_address_b;
wire  out_ac_tbl_no_get_sos_write_enable_b;
wire [31:0] out_ac_tbl_no_get_sos_in_b;
wire [31:0] out_ac_tbl_no_get_sos_out_b;
wire [1:0] out_length_get_dht_address_a;
wire  out_length_get_dht_write_enable_a;
wire [31:0] out_length_get_dht_in_a;
wire [31:0] out_length_get_dht_out_a;
wire [1:0] out_length_get_dht_address_b;
wire  out_length_get_dht_write_enable_b;
wire [31:0] out_length_get_dht_in_b;
wire [31:0] out_length_get_dht_out_b;
wire [1:0] out_index_get_dht_address_a;
wire  out_index_get_dht_write_enable_a;
wire [31:0] out_index_get_dht_in_a;
wire [31:0] out_index_get_dht_out_a;
wire [1:0] out_index_get_dht_address_b;
wire  out_index_get_dht_write_enable_b;
wire [31:0] out_index_get_dht_in_b;
wire [31:0] out_index_get_dht_out_b;
wire [1:0] out_count_get_dht_address_a;
wire  out_count_get_dht_write_enable_a;
wire [31:0] out_count_get_dht_in_a;
wire [31:0] out_count_get_dht_out_a;
wire [1:0] out_count_get_dht_address_b;
wire  out_count_get_dht_write_enable_b;
wire [31:0] out_count_get_dht_in_b;
wire [31:0] out_count_get_dht_out_b;
wire  out_length_get_dqt_address_a;
wire  out_length_get_dqt_write_enable_a;
wire [31:0] out_length_get_dqt_in_a;
wire [31:0] out_length_get_dqt_out_a;
wire  out_length_get_dqt_address_b;
wire  out_length_get_dqt_write_enable_b;
wire [31:0] out_length_get_dqt_in_b;
wire [31:0] out_length_get_dqt_out_b;
wire  out_prec_get_dht_address_a;
wire  out_prec_get_dht_write_enable_a;
wire [31:0] out_prec_get_dht_in_a;
wire [31:0] out_prec_get_dht_out_a;
wire  out_prec_get_dht_address_b;
wire  out_prec_get_dht_write_enable_b;
wire [31:0] out_prec_get_dht_in_b;
wire [31:0] out_prec_get_dht_out_b;
wire  out_num_get_dht_address_a;
wire  out_num_get_dht_write_enable_a;
wire [31:0] out_num_get_dht_in_a;
wire [31:0] out_num_get_dht_out_a;
wire  out_num_get_dht_address_b;
wire  out_num_get_dht_write_enable_b;
wire [31:0] out_num_get_dht_in_b;
wire [31:0] out_num_get_dht_out_b;
wire [5:0] izigzag_index_address_a;
wire  izigzag_index_write_enable_a;
wire [31:0] izigzag_index_in_a;
wire [31:0] izigzag_index_out_a;
wire [5:0] izigzag_index_address_b;
wire  izigzag_index_write_enable_b;
wire [31:0] izigzag_index_in_b;
wire [31:0] izigzag_index_out_b;
wire  main_result_address_a;
wire  main_result_write_enable_a;
wire [31:0] main_result_in_a;
wire [31:0] main_result_out_a;
wire  main_result_address_b;
wire  main_result_write_enable_b;
wire [31:0] main_result_in_b;
wire [31:0] main_result_out_b;
wire  p_jinfo_image_height_address_a;
wire  p_jinfo_image_height_write_enable_a;
wire [15:0] p_jinfo_image_height_in_a;
wire [15:0] p_jinfo_image_height_out_a;
wire  p_jinfo_image_height_address_b;
wire  p_jinfo_image_height_write_enable_b;
wire [15:0] p_jinfo_image_height_in_b;
wire [15:0] p_jinfo_image_height_out_b;
wire  p_jinfo_image_width_address_a;
wire  p_jinfo_image_width_write_enable_a;
wire [15:0] p_jinfo_image_width_in_a;
wire [15:0] p_jinfo_image_width_out_a;
wire  p_jinfo_image_width_address_b;
wire  p_jinfo_image_width_write_enable_b;
wire [15:0] p_jinfo_image_width_in_b;
wire [15:0] p_jinfo_image_width_out_b;
wire [1:0] p_jinfo_comps_info_index_address_a;
wire  p_jinfo_comps_info_index_write_enable_a;
wire [7:0] p_jinfo_comps_info_index_in_a;
wire [7:0] p_jinfo_comps_info_index_out_a;
wire [1:0] p_jinfo_comps_info_index_address_b;
wire  p_jinfo_comps_info_index_write_enable_b;
wire [7:0] p_jinfo_comps_info_index_in_b;
wire [7:0] p_jinfo_comps_info_index_out_b;
wire [1:0] p_jinfo_comps_info_id_address_a;
wire  p_jinfo_comps_info_id_write_enable_a;
wire [7:0] p_jinfo_comps_info_id_in_a;
wire [7:0] p_jinfo_comps_info_id_out_a;
wire [1:0] p_jinfo_comps_info_id_address_b;
wire  p_jinfo_comps_info_id_write_enable_b;
wire [7:0] p_jinfo_comps_info_id_in_b;
wire [7:0] p_jinfo_comps_info_id_out_b;
wire [1:0] p_jinfo_comps_info_h_samp_factor_address_a;
wire  p_jinfo_comps_info_h_samp_factor_write_enable_a;
wire [7:0] p_jinfo_comps_info_h_samp_factor_in_a;
wire [7:0] p_jinfo_comps_info_h_samp_factor_out_a;
wire [1:0] p_jinfo_comps_info_h_samp_factor_address_b;
wire  p_jinfo_comps_info_h_samp_factor_write_enable_b;
wire [7:0] p_jinfo_comps_info_h_samp_factor_in_b;
wire [7:0] p_jinfo_comps_info_h_samp_factor_out_b;
wire [1:0] p_jinfo_comps_info_v_samp_factor_address_a;
wire  p_jinfo_comps_info_v_samp_factor_write_enable_a;
wire [7:0] p_jinfo_comps_info_v_samp_factor_in_a;
wire [7:0] p_jinfo_comps_info_v_samp_factor_out_a;
wire [1:0] p_jinfo_comps_info_v_samp_factor_address_b;
wire  p_jinfo_comps_info_v_samp_factor_write_enable_b;
wire [7:0] p_jinfo_comps_info_v_samp_factor_in_b;
wire [7:0] p_jinfo_comps_info_v_samp_factor_out_b;
wire [1:0] p_jinfo_comps_info_quant_tbl_no_address_a;
wire  p_jinfo_comps_info_quant_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_quant_tbl_no_address_b;
wire  p_jinfo_comps_info_quant_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_out_b;
wire [1:0] p_jinfo_comps_info_dc_tbl_no_address_a;
wire  p_jinfo_comps_info_dc_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_dc_tbl_no_address_b;
wire  p_jinfo_comps_info_dc_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_b;
wire [1:0] p_jinfo_comps_info_ac_tbl_no_address_a;
wire  p_jinfo_comps_info_ac_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_ac_tbl_no_address_b;
wire  p_jinfo_comps_info_ac_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_out_b;
wire [6:0] p_jinfo_ac_xhuff_tbl_bits_address_a;
wire  p_jinfo_ac_xhuff_tbl_bits_write_enable_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_in_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_a;
wire [6:0] p_jinfo_ac_xhuff_tbl_bits_address_b;
wire  p_jinfo_ac_xhuff_tbl_bits_write_enable_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_b;
wire [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_a;
wire  p_jinfo_ac_xhuff_tbl_huffval_write_enable_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_a;
wire [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_b;
wire  p_jinfo_ac_xhuff_tbl_huffval_write_enable_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_b;
wire [6:0] p_jinfo_dc_xhuff_tbl_bits_address_a;
wire  p_jinfo_dc_xhuff_tbl_bits_write_enable_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_in_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_a;
wire [6:0] p_jinfo_dc_xhuff_tbl_bits_address_b;
wire  p_jinfo_dc_xhuff_tbl_bits_write_enable_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_b;
wire [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_a;
wire  p_jinfo_dc_xhuff_tbl_huffval_write_enable_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_a;
wire [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_b;
wire  p_jinfo_dc_xhuff_tbl_huffval_write_enable_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_b;
wire [7:0] p_jinfo_quant_tbl_quantval_address_a;
wire  p_jinfo_quant_tbl_quantval_write_enable_a;
wire [31:0] p_jinfo_quant_tbl_quantval_in_a;
wire [31:0] p_jinfo_quant_tbl_quantval_out_a;
wire [7:0] p_jinfo_quant_tbl_quantval_address_b;
wire  p_jinfo_quant_tbl_quantval_write_enable_b;
wire [31:0] p_jinfo_quant_tbl_quantval_in_b;
wire [31:0] p_jinfo_quant_tbl_quantval_out_b;
wire [5:0] zigzag_index_address_a;
wire  zigzag_index_write_enable_a;
wire [31:0] zigzag_index_in_a;
wire [31:0] zigzag_index_out_a;
wire [5:0] zigzag_index_address_b;
wire  zigzag_index_write_enable_b;
wire [31:0] zigzag_index_in_b;
wire [31:0] zigzag_index_out_b;
wire  p_jinfo_MCUWidth_address_a;
wire  p_jinfo_MCUWidth_write_enable_a;
wire [31:0] p_jinfo_MCUWidth_in_a;
wire [31:0] p_jinfo_MCUWidth_out_a;
wire  p_jinfo_MCUWidth_address_b;
wire  p_jinfo_MCUWidth_write_enable_b;
wire [31:0] p_jinfo_MCUWidth_in_b;
wire [31:0] p_jinfo_MCUWidth_out_b;
wire [9:0] rgb_buf_address_a;
wire  rgb_buf_write_enable_a;
wire [31:0] rgb_buf_in_a;
wire [31:0] rgb_buf_out_a;
wire [9:0] rgb_buf_address_b;
wire  rgb_buf_write_enable_b;
wire [31:0] rgb_buf_in_b;
wire [31:0] rgb_buf_out_b;
wire  CurHuffReadBuf_address_a;
wire  CurHuffReadBuf_write_enable_a;
wire [31:0] CurHuffReadBuf_in_a;
wire [31:0] CurHuffReadBuf_out_a;
wire  CurHuffReadBuf_address_b;
wire  CurHuffReadBuf_write_enable_b;
wire [31:0] CurHuffReadBuf_in_b;
wire [31:0] CurHuffReadBuf_out_b;
wire [13:0] OutData_comp_buf_address_a;
wire  OutData_comp_buf_write_enable_a;
wire [7:0] OutData_comp_buf_in_a;
wire [7:0] OutData_comp_buf_out_a;
wire [13:0] OutData_comp_buf_address_b;
wire  OutData_comp_buf_write_enable_b;
wire [7:0] OutData_comp_buf_in_b;
wire [7:0] OutData_comp_buf_out_b;
wire [4:0] bit_set_mask_address_a;
wire  bit_set_mask_write_enable_a;
wire [31:0] bit_set_mask_in_a;
wire [31:0] bit_set_mask_out_a;
wire [4:0] bit_set_mask_address_b;
wire  bit_set_mask_write_enable_b;
wire [31:0] bit_set_mask_in_b;
wire [31:0] bit_set_mask_out_b;
wire [4:0] lmask_address_a;
wire  lmask_write_enable_a;
wire [31:0] lmask_in_a;
wire [31:0] lmask_out_a;
wire [4:0] lmask_address_b;
wire  lmask_write_enable_b;
wire [31:0] lmask_in_b;
wire [31:0] lmask_out_b;
wire  read_position_address_a;
wire  read_position_write_enable_a;
wire [31:0] read_position_in_a;
wire [31:0] read_position_out_a;
wire  read_position_address_b;
wire  read_position_write_enable_b;
wire [31:0] read_position_in_b;
wire [31:0] read_position_out_b;
wire  current_read_byte_address_a;
wire  current_read_byte_write_enable_a;
wire [31:0] current_read_byte_in_a;
wire [31:0] current_read_byte_out_a;
wire  current_read_byte_address_b;
wire  current_read_byte_write_enable_b;
wire [31:0] current_read_byte_in_b;
wire [31:0] current_read_byte_out_b;
wire  p_jinfo_dc_dhuff_tbl_ml_address_a;
wire  p_jinfo_dc_dhuff_tbl_ml_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_a;
wire  p_jinfo_dc_dhuff_tbl_ml_address_b;
wire  p_jinfo_dc_dhuff_tbl_ml_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_a;
wire  p_jinfo_dc_dhuff_tbl_maxcode_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_b;
wire  p_jinfo_dc_dhuff_tbl_maxcode_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_a;
wire  p_jinfo_dc_dhuff_tbl_mincode_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_b;
wire  p_jinfo_dc_dhuff_tbl_mincode_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_a;
wire  p_jinfo_dc_dhuff_tbl_valptr_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_b;
wire  p_jinfo_dc_dhuff_tbl_valptr_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_b;
wire [4:0] extend_mask_address_a;
wire  extend_mask_write_enable_a;
wire [31:0] extend_mask_in_a;
wire [31:0] extend_mask_out_a;
wire [4:0] extend_mask_address_b;
wire  extend_mask_write_enable_b;
wire [31:0] extend_mask_in_b;
wire [31:0] extend_mask_out_b;
wire  p_jinfo_ac_dhuff_tbl_ml_address_a;
wire  p_jinfo_ac_dhuff_tbl_ml_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_a;
wire  p_jinfo_ac_dhuff_tbl_ml_address_b;
wire  p_jinfo_ac_dhuff_tbl_ml_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_a;
wire  p_jinfo_ac_dhuff_tbl_maxcode_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_b;
wire  p_jinfo_ac_dhuff_tbl_maxcode_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_a;
wire  p_jinfo_ac_dhuff_tbl_mincode_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_b;
wire  p_jinfo_ac_dhuff_tbl_mincode_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_a;
wire  p_jinfo_ac_dhuff_tbl_valptr_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_b;
wire  p_jinfo_ac_dhuff_tbl_valptr_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_b;
wire [1:0] OutData_comp_vpos_address_a;
wire  OutData_comp_vpos_write_enable_a;
wire [31:0] OutData_comp_vpos_in_a;
wire [31:0] OutData_comp_vpos_out_a;
wire [1:0] OutData_comp_vpos_address_b;
wire  OutData_comp_vpos_write_enable_b;
wire [31:0] OutData_comp_vpos_in_b;
wire [31:0] OutData_comp_vpos_out_b;
wire [1:0] OutData_comp_hpos_address_a;
wire  OutData_comp_hpos_write_enable_a;
wire [31:0] OutData_comp_hpos_in_a;
wire [31:0] OutData_comp_hpos_out_a;
wire [1:0] OutData_comp_hpos_address_b;
wire  OutData_comp_hpos_write_enable_b;
wire [31:0] OutData_comp_hpos_in_b;
wire [31:0] OutData_comp_hpos_out_b;
wire [12:0] JpegFileBuf_address_a;
wire  JpegFileBuf_write_enable_a;
wire [7:0] JpegFileBuf_in_a;
wire [7:0] JpegFileBuf_out_a;
wire [12:0] JpegFileBuf_address_b;
wire  JpegFileBuf_write_enable_b;
wire [7:0] JpegFileBuf_in_b;
wire [7:0] JpegFileBuf_out_b;
wire [8:0] huff_make_dhuff_tb_0_huffsize_address_a;
wire  huff_make_dhuff_tb_0_huffsize_write_enable_a;
wire [31:0] huff_make_dhuff_tb_0_huffsize_in_a;
wire [31:0] huff_make_dhuff_tb_0_huffsize_out_a;
wire [8:0] huff_make_dhuff_tb_0_huffsize_address_b;
wire  huff_make_dhuff_tb_0_huffsize_write_enable_b;
wire [31:0] huff_make_dhuff_tb_0_huffsize_in_b;
wire [31:0] huff_make_dhuff_tb_0_huffsize_out_b;
wire [8:0] huff_make_dhuff_tb_0_huffcode_address_a;
wire  huff_make_dhuff_tb_0_huffcode_write_enable_a;
wire [31:0] huff_make_dhuff_tb_0_huffcode_in_a;
wire [31:0] huff_make_dhuff_tb_0_huffcode_out_a;
wire [8:0] huff_make_dhuff_tb_0_huffcode_address_b;
wire  huff_make_dhuff_tb_0_huffcode_write_enable_b;
wire [31:0] huff_make_dhuff_tb_0_huffcode_in_b;
wire [31:0] huff_make_dhuff_tb_0_huffcode_out_b;
wire [5:0] main_0_QuantBuffiii_address_a;
wire  main_0_QuantBuffiii_write_enable_a;
wire [31:0] main_0_QuantBuffiii_in_a;
wire [31:0] main_0_QuantBuffiii_out_a;
wire [5:0] main_0_QuantBuffiii_address_b;
wire  main_0_QuantBuffiii_write_enable_b;
wire [31:0] main_0_QuantBuffiii_in_b;
wire [31:0] main_0_QuantBuffiii_out_b;
wire [7:0] main_0_HuffBuffii_address_a;
wire  main_0_HuffBuffii_write_enable_a;
wire [31:0] main_0_HuffBuffii_in_a;
wire [31:0] main_0_HuffBuffii_out_a;
wire [7:0] main_0_HuffBuffii_address_b;
wire  main_0_HuffBuffii_write_enable_b;
wire [31:0] main_0_HuffBuffii_in_b;
wire [31:0] main_0_HuffBuffii_out_b;
wire [8:0] main_0_IDCTBuffii_address_a;
wire  main_0_IDCTBuffii_write_enable_a;
wire [31:0] main_0_IDCTBuffii_in_a;
wire [31:0] main_0_IDCTBuffii_out_a;
wire [8:0] main_0_IDCTBuffii_address_b;
wire  main_0_IDCTBuffii_write_enable_b;
wire [31:0] main_0_IDCTBuffii_in_b;
wire [31:0] main_0_IDCTBuffii_out_b;

// Local Rams


always @(posedge clk) begin
	if (reset)
		cur_state <= LEGUP_0;
	else if (memory_controller_waitrequest == 1'd1)
		cur_state <= cur_state;
	else
		cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_Write4Blocks_BB__0_1;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_55:
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_56;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_56:
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_57;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_57:
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_58;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_58:
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_59;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_59:
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_60;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_60:
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_61;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_61:
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_62;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_62:
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_63;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_63:
	if ((Write4Blocks_WriteOneBlockexit20_181 == 1'd1))
		next_state = LEGUP_F_Write4Blocks_BB__182_64;
	else if ((Write4Blocks_WriteOneBlockexit20_181 == 1'd0))
		next_state = LEGUP_F_Write4Blocks_BB__183_66;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20loopexit_54:
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_55;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexit40_43:
	if ((Write4Blocks_WriteOneBlockexit40_orcond72 == 1'd1))
		next_state = LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44;
	else if ((Write4Blocks_WriteOneBlockexit40_orcond72 == 1'd0))
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_55;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexit40loopexit_42:
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit40_43;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexit60_31:
	if ((Write4Blocks_WriteOneBlockexit60_orcond71 == 1'd1))
		next_state = LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32;
	else if ((Write4Blocks_WriteOneBlockexit60_orcond71 == 1'd0))
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit40_43;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexit60loopexit_30:
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit60_31;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexitWriteOneBlockexit60_crit_edge_17:
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit60_31;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexit_16:
	if ((Write4Blocks_0_9_reg == 1'd1))
		next_state = LEGUP_F_Write4Blocks_BB_lrph8i41_18;
	else if ((Write4Blocks_0_9_reg == 1'd0))
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexitWriteOneBlockexit60_crit_edge_17;
LEGUP_F_Write4Blocks_BB_WriteOneBlockexitloopexit_15:
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit_16;
LEGUP_F_Write4Blocks_BB__0_1:
		next_state = LEGUP_F_Write4Blocks_BB__0_2;
LEGUP_F_Write4Blocks_BB__0_2:
		next_state = LEGUP_F_Write4Blocks_BB__0_3;
LEGUP_F_Write4Blocks_BB__0_3:
		next_state = LEGUP_F_Write4Blocks_BB__0_4;
LEGUP_F_Write4Blocks_BB__0_4:
	if ((Write4Blocks_0_orcond == 1'd1))
		next_state = LEGUP_F_Write4Blocks_BB_lrph8splitusi_5;
	else if ((Write4Blocks_0_orcond == 1'd0))
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit_16;
LEGUP_F_Write4Blocks_BB__124_35:
	if ((Write4Blocks_124_exitcond21 == 1'd1))
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit40loopexit_42;
	else if ((Write4Blocks_124_exitcond21 == 1'd0))
		next_state = LEGUP_F_Write4Blocks_BB_lrphusi37_41;
LEGUP_F_Write4Blocks_BB__125_36:
		next_state = LEGUP_F_Write4Blocks_BB__125_37;
LEGUP_F_Write4Blocks_BB__125_37:
		next_state = LEGUP_F_Write4Blocks_BB__125_38;
LEGUP_F_Write4Blocks_BB__125_38:
		next_state = LEGUP_F_Write4Blocks_BB__125_39;
LEGUP_F_Write4Blocks_BB__125_39:
		next_state = LEGUP_F_Write4Blocks_BB__125_40;
LEGUP_F_Write4Blocks_BB__125_40:
	if ((Write4Blocks_125_exitcond14_reg == 1'd1))
		next_state = LEGUP_F_Write4Blocks_BB__124_35;
	else if ((Write4Blocks_125_exitcond14_reg == 1'd0))
		next_state = LEGUP_F_Write4Blocks_BB__125_36;
LEGUP_F_Write4Blocks_BB__166_47:
	if ((Write4Blocks_166_exitcond5 == 1'd1))
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20loopexit_54;
	else if ((Write4Blocks_166_exitcond5 == 1'd0))
		next_state = LEGUP_F_Write4Blocks_BB_lrphusi17_53;
LEGUP_F_Write4Blocks_BB__167_48:
		next_state = LEGUP_F_Write4Blocks_BB__167_49;
LEGUP_F_Write4Blocks_BB__167_49:
		next_state = LEGUP_F_Write4Blocks_BB__167_50;
LEGUP_F_Write4Blocks_BB__167_50:
		next_state = LEGUP_F_Write4Blocks_BB__167_51;
LEGUP_F_Write4Blocks_BB__167_51:
		next_state = LEGUP_F_Write4Blocks_BB__167_52;
LEGUP_F_Write4Blocks_BB__167_52:
	if ((Write4Blocks_167_exitcond_reg == 1'd1))
		next_state = LEGUP_F_Write4Blocks_BB__166_47;
	else if ((Write4Blocks_167_exitcond_reg == 1'd0))
		next_state = LEGUP_F_Write4Blocks_BB__167_48;
LEGUP_F_Write4Blocks_BB__182_64:
		next_state = LEGUP_F_Write4Blocks_BB__182_65;
LEGUP_F_Write4Blocks_BB__182_65:
		next_state = LEGUP_F_Write4Blocks_BB__184_68;
LEGUP_F_Write4Blocks_BB__183_66:
		next_state = LEGUP_F_Write4Blocks_BB__183_67;
LEGUP_F_Write4Blocks_BB__183_67:
		next_state = LEGUP_F_Write4Blocks_BB__184_68;
LEGUP_F_Write4Blocks_BB__184_68:
		next_state = LEGUP_0;
LEGUP_F_Write4Blocks_BB__41_8:
	if ((Write4Blocks_41_exitcond53 == 1'd1))
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexitloopexit_15;
	else if ((Write4Blocks_41_exitcond53 == 1'd0))
		next_state = LEGUP_F_Write4Blocks_BB_lrphusi_14;
LEGUP_F_Write4Blocks_BB__42_10:
		next_state = LEGUP_F_Write4Blocks_BB__42_11;
LEGUP_F_Write4Blocks_BB__42_11:
		next_state = LEGUP_F_Write4Blocks_BB__42_12;
LEGUP_F_Write4Blocks_BB__42_12:
		next_state = LEGUP_F_Write4Blocks_BB__42_13;
LEGUP_F_Write4Blocks_BB__42_13:
	if ((Write4Blocks_42_exitcond46_reg == 1'd1))
		next_state = LEGUP_F_Write4Blocks_BB__41_8;
	else if ((Write4Blocks_42_exitcond46_reg == 1'd0))
		next_state = LEGUP_F_Write4Blocks_BB__42_9;
LEGUP_F_Write4Blocks_BB__42_9:
		next_state = LEGUP_F_Write4Blocks_BB__42_10;
LEGUP_F_Write4Blocks_BB__85_23:
	if ((Write4Blocks_85_exitcond37 == 1'd1))
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit60loopexit_30;
	else if ((Write4Blocks_85_exitcond37 == 1'd0))
		next_state = LEGUP_F_Write4Blocks_BB_lrphusi57_29;
LEGUP_F_Write4Blocks_BB__86_24:
		next_state = LEGUP_F_Write4Blocks_BB__86_25;
LEGUP_F_Write4Blocks_BB__86_25:
		next_state = LEGUP_F_Write4Blocks_BB__86_26;
LEGUP_F_Write4Blocks_BB__86_26:
		next_state = LEGUP_F_Write4Blocks_BB__86_27;
LEGUP_F_Write4Blocks_BB__86_27:
		next_state = LEGUP_F_Write4Blocks_BB__86_28;
LEGUP_F_Write4Blocks_BB__86_28:
	if ((Write4Blocks_86_exitcond30_reg == 1'd1))
		next_state = LEGUP_F_Write4Blocks_BB__85_23;
	else if ((Write4Blocks_86_exitcond30_reg == 1'd0))
		next_state = LEGUP_F_Write4Blocks_BB__86_24;
LEGUP_F_Write4Blocks_BB_lrph8i41_18:
	if ((Write4Blocks_lrph8i41_51 == 1'd1))
		next_state = LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20;
	else if ((Write4Blocks_lrph8i41_51 == 1'd0))
		next_state = LEGUP_F_Write4Blocks_BB_lrph8lrph8split_crit_edgei44_19;
LEGUP_F_Write4Blocks_BB_lrph8lrph8split_crit_edgei44_19:
		next_state = LEGUP_F_Write4Blocks_BB_WriteOneBlockexit60_31;
LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32:
		next_state = LEGUP_F_Write4Blocks_BB_lrph8splitusi29_33;
LEGUP_F_Write4Blocks_BB_lrph8splitusi29_33:
		next_state = LEGUP_F_Write4Blocks_BB_lrph8splitusi29_34;
LEGUP_F_Write4Blocks_BB_lrph8splitusi29_34:
		next_state = LEGUP_F_Write4Blocks_BB_lrphusi37_41;
LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20:
		next_state = LEGUP_F_Write4Blocks_BB_lrph8splitusi49_21;
LEGUP_F_Write4Blocks_BB_lrph8splitusi49_21:
		next_state = LEGUP_F_Write4Blocks_BB_lrph8splitusi49_22;
LEGUP_F_Write4Blocks_BB_lrph8splitusi49_22:
		next_state = LEGUP_F_Write4Blocks_BB_lrphusi57_29;
LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44:
		next_state = LEGUP_F_Write4Blocks_BB_lrph8splitusi9_45;
LEGUP_F_Write4Blocks_BB_lrph8splitusi9_45:
		next_state = LEGUP_F_Write4Blocks_BB_lrph8splitusi9_46;
LEGUP_F_Write4Blocks_BB_lrph8splitusi9_46:
		next_state = LEGUP_F_Write4Blocks_BB_lrphusi17_53;
LEGUP_F_Write4Blocks_BB_lrph8splitusi_5:
		next_state = LEGUP_F_Write4Blocks_BB_lrph8splitusi_6;
LEGUP_F_Write4Blocks_BB_lrph8splitusi_6:
		next_state = LEGUP_F_Write4Blocks_BB_lrph8splitusi_7;
LEGUP_F_Write4Blocks_BB_lrph8splitusi_7:
		next_state = LEGUP_F_Write4Blocks_BB_lrphusi_14;
LEGUP_F_Write4Blocks_BB_lrphusi17_53:
		next_state = LEGUP_F_Write4Blocks_BB__167_48;
LEGUP_F_Write4Blocks_BB_lrphusi37_41:
		next_state = LEGUP_F_Write4Blocks_BB__125_36;
LEGUP_F_Write4Blocks_BB_lrphusi57_29:
		next_state = LEGUP_F_Write4Blocks_BB__86_24;
LEGUP_F_Write4Blocks_BB_lrphusi_14:
		next_state = LEGUP_F_Write4Blocks_BB__42_9;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* Write4Blocks: %0*/
	/*   %1 = load i32* %p_out_vpos, align 4, !tbaa !1*/
		Write4Blocks_0_1 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_0_1_reg <= 0;
	/* Write4Blocks: %0*/
	/*   %1 = load i32* %p_out_vpos, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__0_3)) begin
		Write4Blocks_0_1_reg <= Write4Blocks_0_1;
		if (start == 1'b0 && ^(Write4Blocks_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %0*/
	/*   %2 = shl nsw i32 %1, 3*/
		Write4Blocks_0_2 = (Write4Blocks_0_1 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_0_2_reg <= 0;
	/* Write4Blocks: %0*/
	/*   %2 = shl nsw i32 %1, 3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__0_3)) begin
		Write4Blocks_0_2_reg <= Write4Blocks_0_2;
		if (start == 1'b0 && ^(Write4Blocks_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %0*/
	/*   %3 = load i32* %p_out_hpos, align 4, !tbaa !1*/
		Write4Blocks_0_3 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_0_3_reg <= 0;
	/* Write4Blocks: %0*/
	/*   %3 = load i32* %p_out_hpos, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__0_3)) begin
		Write4Blocks_0_3_reg <= Write4Blocks_0_3;
		if (start == 1'b0 && ^(Write4Blocks_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %0*/
	/*   %4 = shl nsw i32 %3, 3*/
		Write4Blocks_0_4 = (Write4Blocks_0_3 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_0_4_reg <= 0;
	/* Write4Blocks: %0*/
	/*   %4 = shl nsw i32 %3, 3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__0_3)) begin
		Write4Blocks_0_4_reg <= Write4Blocks_0_4;
		if (start == 1'b0 && ^(Write4Blocks_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %0*/
	/*   %5 = load i16* @p_jinfo_image_width, align 2, !tbaa !5*/
		Write4Blocks_0_5 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_0_5_reg <= 0;
	/* Write4Blocks: %0*/
	/*   %5 = load i16* @p_jinfo_image_width, align 2, !tbaa !5*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__0_4)) begin
		Write4Blocks_0_5_reg <= Write4Blocks_0_5;
		if (start == 1'b0 && ^(Write4Blocks_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %0*/
	/*   %6 = sext i16 %5 to i32*/
		Write4Blocks_0_6 = $signed(Write4Blocks_0_5);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_0_6_reg <= 0;
	/* Write4Blocks: %0*/
	/*   %6 = sext i16 %5 to i32*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__0_4)) begin
		Write4Blocks_0_6_reg <= Write4Blocks_0_6;
		if (start == 1'b0 && ^(Write4Blocks_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_6_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %0*/
	/*   %7 = load i16* @p_jinfo_image_height, align 2, !tbaa !5*/
		Write4Blocks_0_7 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_0_7_reg <= 0;
	/* Write4Blocks: %0*/
	/*   %7 = load i16* @p_jinfo_image_height, align 2, !tbaa !5*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__0_4)) begin
		Write4Blocks_0_7_reg <= Write4Blocks_0_7;
		if (start == 1'b0 && ^(Write4Blocks_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %0*/
	/*   %8 = sext i16 %7 to i32*/
		Write4Blocks_0_8 = $signed(Write4Blocks_0_7);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_0_8_reg <= 0;
	/* Write4Blocks: %0*/
	/*   %8 = sext i16 %7 to i32*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__0_4)) begin
		Write4Blocks_0_8_reg <= Write4Blocks_0_8;
		if (start == 1'b0 && ^(Write4Blocks_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_8_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %0*/
	/*   %9 = icmp slt i32 %2, %8*/
		Write4Blocks_0_9 = ($signed(Write4Blocks_0_2_reg) < $signed(Write4Blocks_0_8));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_0_9_reg <= 0;
	/* Write4Blocks: %0*/
	/*   %9 = icmp slt i32 %2, %8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__0_4)) begin
		Write4Blocks_0_9_reg <= Write4Blocks_0_9;
		if (start == 1'b0 && ^(Write4Blocks_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %0*/
	/*   %10 = icmp slt i32 %4, %6*/
		Write4Blocks_0_10 = ($signed(Write4Blocks_0_4_reg) < $signed(Write4Blocks_0_6));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_0_10_reg <= 0;
	/* Write4Blocks: %0*/
	/*   %10 = icmp slt i32 %4, %6*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__0_4)) begin
		Write4Blocks_0_10_reg <= Write4Blocks_0_10;
		if (start == 1'b0 && ^(Write4Blocks_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_10_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %0*/
	/*   %or.cond = and i1 %9, %10*/
		Write4Blocks_0_orcond = (Write4Blocks_0_9 & Write4Blocks_0_10);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_0_orcond_reg <= 0;
	/* Write4Blocks: %0*/
	/*   %or.cond = and i1 %9, %10*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__0_4)) begin
		Write4Blocks_0_orcond_reg <= Write4Blocks_0_orcond;
		if (start == 1'b0 && ^(Write4Blocks_0_orcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_orcond_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %11 = shl i32 %3, 3*/
		Write4Blocks_lrph8splitusi_11 = (Write4Blocks_0_3_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_11_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %11 = shl i32 %3, 3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_11_reg <= Write4Blocks_lrph8splitusi_11;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_11_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %12 = add i32 %11, -1*/
		Write4Blocks_lrph8splitusi_12 = (Write4Blocks_lrph8splitusi_11 + -32'd1);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_12_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %12 = add i32 %11, -1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_12_reg <= Write4Blocks_lrph8splitusi_12;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_12_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %13 = or i32 %11, 7*/
		Write4Blocks_lrph8splitusi_13 = (Write4Blocks_lrph8splitusi_11 | 32'd7);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_13_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %13 = or i32 %11, 7*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_13_reg <= Write4Blocks_lrph8splitusi_13;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_13_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %14 = icmp sgt i32 %11, %13*/
		Write4Blocks_lrph8splitusi_14 = ($signed(Write4Blocks_lrph8splitusi_11) > $signed(Write4Blocks_lrph8splitusi_13));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_14_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %14 = icmp sgt i32 %11, %13*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_14_reg <= Write4Blocks_lrph8splitusi_14;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_14_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %smax44 = select i1 %14, i32 %11, i32 %13*/
		Write4Blocks_lrph8splitusi_smax44 = (Write4Blocks_lrph8splitusi_14 ? Write4Blocks_lrph8splitusi_11 : Write4Blocks_lrph8splitusi_13);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_smax44_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %smax44 = select i1 %14, i32 %11, i32 %13*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_smax44_reg <= Write4Blocks_lrph8splitusi_smax44;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_smax44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_smax44_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %15 = sub i32 %12, %smax44*/
		Write4Blocks_lrph8splitusi_15 = (Write4Blocks_lrph8splitusi_12 - Write4Blocks_lrph8splitusi_smax44);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_15_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %15 = sub i32 %12, %smax44*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_15_reg <= Write4Blocks_lrph8splitusi_15;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_15_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %16 = sext i16 %5 to i32*/
		Write4Blocks_lrph8splitusi_16 = $signed(Write4Blocks_0_5_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_16_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %16 = sext i16 %5 to i32*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_16_reg <= Write4Blocks_lrph8splitusi_16;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_16_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %17 = sub i32 %11, %16*/
		Write4Blocks_lrph8splitusi_17 = (Write4Blocks_lrph8splitusi_11 - Write4Blocks_lrph8splitusi_16);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_17_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %17 = sub i32 %11, %16*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_17_reg <= Write4Blocks_lrph8splitusi_17;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_17_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %18 = icmp ugt i32 %15, %17*/
		Write4Blocks_lrph8splitusi_18 = (Write4Blocks_lrph8splitusi_15_reg > Write4Blocks_lrph8splitusi_17_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_18_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %18 = icmp ugt i32 %15, %17*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_6)) begin
		Write4Blocks_lrph8splitusi_18_reg <= Write4Blocks_lrph8splitusi_18;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_18_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %umax45 = select i1 %18, i32 %15, i32 %17*/
		Write4Blocks_lrph8splitusi_umax45 = (Write4Blocks_lrph8splitusi_18 ? Write4Blocks_lrph8splitusi_15_reg : Write4Blocks_lrph8splitusi_17_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_umax45_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %umax45 = select i1 %18, i32 %15, i32 %17*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_6)) begin
		Write4Blocks_lrph8splitusi_umax45_reg <= Write4Blocks_lrph8splitusi_umax45;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_umax45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_umax45_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %19 = sub i32 0, %umax45*/
		Write4Blocks_lrph8splitusi_19 = (32'd0 - Write4Blocks_lrph8splitusi_umax45);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_19_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %19 = sub i32 0, %umax45*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_6)) begin
		Write4Blocks_lrph8splitusi_19_reg <= Write4Blocks_lrph8splitusi_19;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_19_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %20 = shl i32 %1, 3*/
		Write4Blocks_lrph8splitusi_20 = (Write4Blocks_0_1_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_20_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %20 = shl i32 %1, 3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_20_reg <= Write4Blocks_lrph8splitusi_20;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_20_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %21 = add i32 %20, 8*/
		Write4Blocks_lrph8splitusi_21 = (Write4Blocks_lrph8splitusi_20 + 32'd8);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_21_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %21 = add i32 %20, 8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_21_reg <= Write4Blocks_lrph8splitusi_21;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_21_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %22 = or i32 %20, 1*/
		Write4Blocks_lrph8splitusi_22 = (Write4Blocks_lrph8splitusi_20 | 32'd1);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_22_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %22 = or i32 %20, 1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_22_reg <= Write4Blocks_lrph8splitusi_22;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_22_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %23 = icmp sgt i32 %21, %22*/
		Write4Blocks_lrph8splitusi_23 = ($signed(Write4Blocks_lrph8splitusi_21) > $signed(Write4Blocks_lrph8splitusi_22));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_23_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %23 = icmp sgt i32 %21, %22*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_23_reg <= Write4Blocks_lrph8splitusi_23;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_23_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %smax51 = select i1 %23, i32 %21, i32 %22*/
		Write4Blocks_lrph8splitusi_smax51 = (Write4Blocks_lrph8splitusi_23 ? Write4Blocks_lrph8splitusi_21 : Write4Blocks_lrph8splitusi_22);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_smax51_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %smax51 = select i1 %23, i32 %21, i32 %22*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_smax51_reg <= Write4Blocks_lrph8splitusi_smax51;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_smax51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_smax51_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %24 = sub i32 %20, %smax51*/
		Write4Blocks_lrph8splitusi_24 = (Write4Blocks_lrph8splitusi_20_reg - Write4Blocks_lrph8splitusi_smax51_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_24_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %24 = sub i32 %20, %smax51*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_6)) begin
		Write4Blocks_lrph8splitusi_24_reg <= Write4Blocks_lrph8splitusi_24;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_24_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %25 = sext i16 %7 to i32*/
		Write4Blocks_lrph8splitusi_25 = $signed(Write4Blocks_0_7_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_25_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %25 = sext i16 %7 to i32*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_25_reg <= Write4Blocks_lrph8splitusi_25;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_25_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %26 = sub i32 %20, %25*/
		Write4Blocks_lrph8splitusi_26 = (Write4Blocks_lrph8splitusi_20 - Write4Blocks_lrph8splitusi_25);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_26_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %26 = sub i32 %20, %25*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_26_reg <= Write4Blocks_lrph8splitusi_26;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_26_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %27 = icmp ugt i32 %24, %26*/
		Write4Blocks_lrph8splitusi_27 = (Write4Blocks_lrph8splitusi_24 > Write4Blocks_lrph8splitusi_26_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_27_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %27 = icmp ugt i32 %24, %26*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_6)) begin
		Write4Blocks_lrph8splitusi_27_reg <= Write4Blocks_lrph8splitusi_27;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_27_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %umax52 = select i1 %27, i32 %24, i32 %26*/
		Write4Blocks_lrph8splitusi_umax52 = (Write4Blocks_lrph8splitusi_27 ? Write4Blocks_lrph8splitusi_24 : Write4Blocks_lrph8splitusi_26_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_umax52_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %umax52 = select i1 %27, i32 %24, i32 %26*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_6)) begin
		Write4Blocks_lrph8splitusi_umax52_reg <= Write4Blocks_lrph8splitusi_umax52;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_umax52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_umax52_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %28 = sub i32 0, %umax52*/
		Write4Blocks_lrph8splitusi_28 = (32'd0 - Write4Blocks_lrph8splitusi_umax52_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_28_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %28 = sub i32 0, %umax52*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_7)) begin
		Write4Blocks_lrph8splitusi_28_reg <= Write4Blocks_lrph8splitusi_28;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_28_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %29 = sext i16 %5 to i32*/
		Write4Blocks_lrph8splitusi_29 = $signed(Write4Blocks_0_5_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_29_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %29 = sext i16 %5 to i32*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_29_reg <= Write4Blocks_lrph8splitusi_29;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_29_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %30 = mul i32 %1, %29*/
		Write4Blocks_lrph8splitusi_30 = (Write4Blocks_0_1_reg * Write4Blocks_lrph8splitusi_29);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_30_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %30 = mul i32 %1, %29*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_30_reg <= Write4Blocks_lrph8splitusi_30;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_30_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %31 = shl i32 %30, 3*/
		Write4Blocks_lrph8splitusi_31 = (Write4Blocks_lrph8splitusi_30 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_31_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %31 = shl i32 %30, 3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_31_reg <= Write4Blocks_lrph8splitusi_31;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_31_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %32 = shl i32 %3, 3*/
		Write4Blocks_lrph8splitusi_32 = (Write4Blocks_0_3_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_32_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %32 = shl i32 %3, 3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_32_reg <= Write4Blocks_lrph8splitusi_32;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_32_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %33 = add i32 %31, %32*/
		Write4Blocks_lrph8splitusi_33 = (Write4Blocks_lrph8splitusi_31 + Write4Blocks_lrph8splitusi_32);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_33_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %33 = add i32 %31, %32*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_33_reg <= Write4Blocks_lrph8splitusi_33;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_33_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %34 = add i32 %32, -1*/
		Write4Blocks_lrph8splitusi_34 = (Write4Blocks_lrph8splitusi_32 + -32'd1);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_34_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %34 = add i32 %32, -1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_34_reg <= Write4Blocks_lrph8splitusi_34;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_34_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %35 = or i32 %32, 7*/
		Write4Blocks_lrph8splitusi_35 = (Write4Blocks_lrph8splitusi_32 | 32'd7);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_35_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %35 = or i32 %32, 7*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_35_reg <= Write4Blocks_lrph8splitusi_35;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_35_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %36 = icmp sgt i32 %32, %35*/
		Write4Blocks_lrph8splitusi_36 = ($signed(Write4Blocks_lrph8splitusi_32) > $signed(Write4Blocks_lrph8splitusi_35));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_36_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %36 = icmp sgt i32 %32, %35*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_36_reg <= Write4Blocks_lrph8splitusi_36;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_36_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %smax55 = select i1 %36, i32 %32, i32 %35*/
		Write4Blocks_lrph8splitusi_smax55 = (Write4Blocks_lrph8splitusi_36 ? Write4Blocks_lrph8splitusi_32 : Write4Blocks_lrph8splitusi_35);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_smax55_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %smax55 = select i1 %36, i32 %32, i32 %35*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_smax55_reg <= Write4Blocks_lrph8splitusi_smax55;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_smax55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_smax55_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %37 = sub i32 %34, %smax55*/
		Write4Blocks_lrph8splitusi_37 = (Write4Blocks_lrph8splitusi_34 - Write4Blocks_lrph8splitusi_smax55);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_37_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %37 = sub i32 %34, %smax55*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_37_reg <= Write4Blocks_lrph8splitusi_37;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_37_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %38 = sub i32 %32, %29*/
		Write4Blocks_lrph8splitusi_38 = (Write4Blocks_lrph8splitusi_32 - Write4Blocks_lrph8splitusi_29);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_38_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %38 = sub i32 %32, %29*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_5)) begin
		Write4Blocks_lrph8splitusi_38_reg <= Write4Blocks_lrph8splitusi_38;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_38_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %39 = icmp ugt i32 %37, %38*/
		Write4Blocks_lrph8splitusi_39 = (Write4Blocks_lrph8splitusi_37_reg > Write4Blocks_lrph8splitusi_38_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_39_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %39 = icmp ugt i32 %37, %38*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_6)) begin
		Write4Blocks_lrph8splitusi_39_reg <= Write4Blocks_lrph8splitusi_39;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_39_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %umax56 = select i1 %39, i32 %37, i32 %38*/
		Write4Blocks_lrph8splitusi_umax56 = (Write4Blocks_lrph8splitusi_39 ? Write4Blocks_lrph8splitusi_37_reg : Write4Blocks_lrph8splitusi_38_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_umax56_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %umax56 = select i1 %39, i32 %37, i32 %38*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_6)) begin
		Write4Blocks_lrph8splitusi_umax56_reg <= Write4Blocks_lrph8splitusi_umax56;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_umax56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_umax56_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %40 = sub i32 0, %umax56*/
		Write4Blocks_lrph8splitusi_40 = (32'd0 - Write4Blocks_lrph8splitusi_umax56);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi_40_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i*/
	/*   %40 = sub i32 0, %umax56*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_6)) begin
		Write4Blocks_lrph8splitusi_40_reg <= Write4Blocks_lrph8splitusi_40;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi_40_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %41*/
	/*   %indvar.next48 = add i32 %indvar47, 1*/
		Write4Blocks_41_indvarnext48 = (Write4Blocks_lrphusi_indvar47_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_41_indvarnext48_reg <= 0;
	/* Write4Blocks: %41*/
	/*   %indvar.next48 = add i32 %indvar47, 1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__41_8)) begin
		Write4Blocks_41_indvarnext48_reg <= Write4Blocks_41_indvarnext48;
		if (start == 1'b0 && ^(Write4Blocks_41_indvarnext48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_41_indvarnext48_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %41*/
	/*   %exitcond53 = icmp eq i32 %indvar.next48, %28*/
		Write4Blocks_41_exitcond53 = (Write4Blocks_41_indvarnext48 == Write4Blocks_lrph8splitusi_28_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_41_exitcond53_reg <= 0;
	/* Write4Blocks: %41*/
	/*   %exitcond53 = icmp eq i32 %indvar.next48, %28*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__41_8)) begin
		Write4Blocks_41_exitcond53_reg <= Write4Blocks_41_exitcond53;
		if (start == 1'b0 && ^(Write4Blocks_41_exitcond53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_41_exitcond53_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %42*/
	/*   %indvar42 = phi i32 [ 0, %.lr.ph.us.i ], [ %indvar.next43, %42 ]*/
	if ((((cur_state == LEGUP_F_Write4Blocks_BB__42_13) & (memory_controller_waitrequest == 1'd0)) & (Write4Blocks_42_exitcond46_reg == 1'd0))) begin
		Write4Blocks_42_indvar42 = Write4Blocks_42_indvarnext43_reg;
	end
	/* Write4Blocks: %42*/
	/*   %indvar42 = phi i32 [ 0, %.lr.ph.us.i ], [ %indvar.next43, %42 ]*/
	else /* if (((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi_14) & (memory_controller_waitrequest == 1'd0))) */ begin
		Write4Blocks_42_indvar42 = 32'd0;
	end
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_42_indvar42_reg <= 0;
	/* Write4Blocks: %42*/
	/*   %indvar42 = phi i32 [ 0, %.lr.ph.us.i ], [ %indvar.next43, %42 ]*/
	else if((((cur_state == LEGUP_F_Write4Blocks_BB__42_13) & (memory_controller_waitrequest == 1'd0)) & (Write4Blocks_42_exitcond46_reg == 1'd0))) begin
		Write4Blocks_42_indvar42_reg <= Write4Blocks_42_indvar42;
		if (start == 1'b0 && ^(Write4Blocks_42_indvar42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_42_indvar42_reg"); $finish; end
	end
	/* Write4Blocks: %42*/
	/*   %indvar42 = phi i32 [ 0, %.lr.ph.us.i ], [ %indvar.next43, %42 ]*/
	else if(((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi_14) & (memory_controller_waitrequest == 1'd0))) begin
		Write4Blocks_42_indvar42_reg <= Write4Blocks_42_indvar42;
		if (start == 1'b0 && ^(Write4Blocks_42_indvar42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_42_indvar42_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %42*/
	/*   %43 = add i32 %48, %indvar42*/
		Write4Blocks_42_43 = (Write4Blocks_lrphusi_48_reg + Write4Blocks_42_indvar42_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_42_43_reg <= 0;
	/* Write4Blocks: %42*/
	/*   %43 = add i32 %48, %indvar42*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__42_9)) begin
		Write4Blocks_42_43_reg <= Write4Blocks_42_43;
		if (start == 1'b0 && ^(Write4Blocks_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_42_43_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %42*/
	/*   %scevgep50 = getelementptr i8* %p_out_buf, i32 %43*/
		Write4Blocks_42_scevgep50 = (arg_p_out_buf + (1 * Write4Blocks_42_43_reg));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_42_scevgep50_reg <= 0;
	/* Write4Blocks: %42*/
	/*   %scevgep50 = getelementptr i8* %p_out_buf, i32 %43*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__42_10)) begin
		Write4Blocks_42_scevgep50_reg <= Write4Blocks_42_scevgep50;
		if (start == 1'b0 && ^(Write4Blocks_42_scevgep50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_42_scevgep50_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %42*/
	/*   %44 = add i32 %49, %indvar42*/
		Write4Blocks_42_44 = (Write4Blocks_lrphusi_49_reg + Write4Blocks_42_indvar42_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_42_44_reg <= 0;
	/* Write4Blocks: %42*/
	/*   %44 = add i32 %49, %indvar42*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__42_9)) begin
		Write4Blocks_42_44_reg <= Write4Blocks_42_44;
		if (start == 1'b0 && ^(Write4Blocks_42_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_42_44_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %42*/
	/*   %.14.us.i = getelementptr i32* %store1, i32 %44*/
		Write4Blocks_42_14usi = (arg_store1 + (4 * Write4Blocks_42_44_reg));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_42_14usi_reg <= 0;
	/* Write4Blocks: %42*/
	/*   %.14.us.i = getelementptr i32* %store1, i32 %44*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__42_10)) begin
		Write4Blocks_42_14usi_reg <= Write4Blocks_42_14usi;
		if (start == 1'b0 && ^(Write4Blocks_42_14usi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_42_14usi_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %42*/
	/*   %45 = load i32* %.14.us.i, align 4, !tbaa !1*/
		Write4Blocks_42_45 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_42_45_reg <= 0;
	/* Write4Blocks: %42*/
	/*   %45 = load i32* %.14.us.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__42_12)) begin
		Write4Blocks_42_45_reg <= Write4Blocks_42_45;
		if (start == 1'b0 && ^(Write4Blocks_42_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_42_45_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %42*/
	/*   %46 = trunc i32 %45 to i8*/
		Write4Blocks_42_46 = Write4Blocks_42_45[7:0];
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_42_46_reg <= 0;
	/* Write4Blocks: %42*/
	/*   %46 = trunc i32 %45 to i8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__42_12)) begin
		Write4Blocks_42_46_reg <= Write4Blocks_42_46;
		if (start == 1'b0 && ^(Write4Blocks_42_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_42_46_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %42*/
	/*   %indvar.next43 = add i32 %indvar42, 1*/
		Write4Blocks_42_indvarnext43 = (Write4Blocks_42_indvar42_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_42_indvarnext43_reg <= 0;
	/* Write4Blocks: %42*/
	/*   %indvar.next43 = add i32 %indvar42, 1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__42_9)) begin
		Write4Blocks_42_indvarnext43_reg <= Write4Blocks_42_indvarnext43;
		if (start == 1'b0 && ^(Write4Blocks_42_indvarnext43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_42_indvarnext43_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %42*/
	/*   %exitcond46 = icmp eq i32 %indvar.next43, %19*/
		Write4Blocks_42_exitcond46 = (Write4Blocks_42_indvarnext43 == Write4Blocks_lrph8splitusi_19_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_42_exitcond46_reg <= 0;
	/* Write4Blocks: %42*/
	/*   %exitcond46 = icmp eq i32 %indvar.next43, %19*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__42_9)) begin
		Write4Blocks_42_exitcond46_reg <= Write4Blocks_42_exitcond46;
		if (start == 1'b0 && ^(Write4Blocks_42_exitcond46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_42_exitcond46_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph.us.i*/
	/*   %indvar47 = phi i32 [ %indvar.next48, %41 ], [ 0, %.lr.ph8.split.us.i ]*/
	if (((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_7) & (memory_controller_waitrequest == 1'd0))) begin
		Write4Blocks_lrphusi_indvar47 = 32'd0;
	end
	/* Write4Blocks: %.lr.ph.us.i*/
	/*   %indvar47 = phi i32 [ %indvar.next48, %41 ], [ 0, %.lr.ph8.split.us.i ]*/
	else /* if ((((cur_state == LEGUP_F_Write4Blocks_BB__41_8) & (memory_controller_waitrequest == 1'd0)) & (Write4Blocks_41_exitcond53 == 1'd0))) */ begin
		Write4Blocks_lrphusi_indvar47 = Write4Blocks_41_indvarnext48;
	end
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrphusi_indvar47_reg <= 0;
	/* Write4Blocks: %.lr.ph.us.i*/
	/*   %indvar47 = phi i32 [ %indvar.next48, %41 ], [ 0, %.lr.ph8.split.us.i ]*/
	else if(((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi_7) & (memory_controller_waitrequest == 1'd0))) begin
		Write4Blocks_lrphusi_indvar47_reg <= Write4Blocks_lrphusi_indvar47;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi_indvar47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi_indvar47_reg"); $finish; end
	end
	/* Write4Blocks: %.lr.ph.us.i*/
	/*   %indvar47 = phi i32 [ %indvar.next48, %41 ], [ 0, %.lr.ph8.split.us.i ]*/
	else if((((cur_state == LEGUP_F_Write4Blocks_BB__41_8) & (memory_controller_waitrequest == 1'd0)) & (Write4Blocks_41_exitcond53 == 1'd0))) begin
		Write4Blocks_lrphusi_indvar47_reg <= Write4Blocks_lrphusi_indvar47;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi_indvar47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi_indvar47_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph.us.i*/
	/*   %47 = mul i32 %29, %indvar47*/
		Write4Blocks_lrphusi_47 = (Write4Blocks_lrph8splitusi_29_reg * Write4Blocks_lrphusi_indvar47_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrphusi_47_reg <= 0;
	/* Write4Blocks: %.lr.ph.us.i*/
	/*   %47 = mul i32 %29, %indvar47*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi_14)) begin
		Write4Blocks_lrphusi_47_reg <= Write4Blocks_lrphusi_47;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi_47_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph.us.i*/
	/*   %48 = add i32 %33, %47*/
		Write4Blocks_lrphusi_48 = (Write4Blocks_lrph8splitusi_33_reg + Write4Blocks_lrphusi_47);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrphusi_48_reg <= 0;
	/* Write4Blocks: %.lr.ph.us.i*/
	/*   %48 = add i32 %33, %47*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi_14)) begin
		Write4Blocks_lrphusi_48_reg <= Write4Blocks_lrphusi_48;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi_48_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph.us.i*/
	/*   %49 = mul i32 %indvar47, %40*/
		Write4Blocks_lrphusi_49 = (Write4Blocks_lrphusi_indvar47_reg * Write4Blocks_lrph8splitusi_40_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrphusi_49_reg <= 0;
	/* Write4Blocks: %.lr.ph.us.i*/
	/*   %49 = mul i32 %indvar47, %40*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi_14)) begin
		Write4Blocks_lrphusi_49_reg <= Write4Blocks_lrphusi_49;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi_49_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %WriteOneBlock.exit*/
	/*   %50 = add nsw i32 %4, 8*/
		Write4Blocks_WriteOneBlockexit_50 = (Write4Blocks_0_4_reg + 32'd8);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_WriteOneBlockexit_50_reg <= 0;
	/* Write4Blocks: %WriteOneBlock.exit*/
	/*   %50 = add nsw i32 %4, 8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit_16)) begin
		Write4Blocks_WriteOneBlockexit_50_reg <= Write4Blocks_WriteOneBlockexit_50;
		if (start == 1'b0 && ^(Write4Blocks_WriteOneBlockexit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlockexit_50_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.i41*/
	/*   %51 = icmp slt i32 %50, %6*/
		Write4Blocks_lrph8i41_51 = ($signed(Write4Blocks_WriteOneBlockexit_50_reg) < $signed(Write4Blocks_0_6_reg));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8i41_51_reg <= 0;
	/* Write4Blocks: %.lr.ph8.i41*/
	/*   %51 = icmp slt i32 %50, %6*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8i41_18)) begin
		Write4Blocks_lrph8i41_51_reg <= Write4Blocks_lrph8i41_51;
		if (start == 1'b0 && ^(Write4Blocks_lrph8i41_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8i41_51_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %52 = shl i32 %3, 3*/
		Write4Blocks_lrph8splitusi49_52 = (Write4Blocks_0_3_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_52_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %52 = shl i32 %3, 3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_52_reg <= Write4Blocks_lrph8splitusi49_52;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_52_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %53 = add i32 %52, 8*/
		Write4Blocks_lrph8splitusi49_53 = (Write4Blocks_lrph8splitusi49_52 + 32'd8);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_53_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %53 = add i32 %52, 8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_53_reg <= Write4Blocks_lrph8splitusi49_53;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_53_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %54 = sext i16 %5 to i32*/
		Write4Blocks_lrph8splitusi49_54 = $signed(Write4Blocks_0_5_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_54_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %54 = sext i16 %5 to i32*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_54_reg <= Write4Blocks_lrph8splitusi49_54;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_54_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %55 = sub i32 %53, %54*/
		Write4Blocks_lrph8splitusi49_55 = (Write4Blocks_lrph8splitusi49_53 - Write4Blocks_lrph8splitusi49_54);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_55_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %55 = sub i32 %53, %54*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_55_reg <= Write4Blocks_lrph8splitusi49_55;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_55_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %56 = or i32 %52, 7*/
		Write4Blocks_lrph8splitusi49_56 = (Write4Blocks_lrph8splitusi49_52 | 32'd7);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_56_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %56 = or i32 %52, 7*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_56_reg <= Write4Blocks_lrph8splitusi49_56;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_56_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %57 = add i32 %52, 15*/
		Write4Blocks_lrph8splitusi49_57 = (Write4Blocks_lrph8splitusi49_52 + 32'd15);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_57_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %57 = add i32 %52, 15*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_57_reg <= Write4Blocks_lrph8splitusi49_57;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_57_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %58 = icmp sgt i32 %57, %53*/
		Write4Blocks_lrph8splitusi49_58 = ($signed(Write4Blocks_lrph8splitusi49_57) > $signed(Write4Blocks_lrph8splitusi49_53));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_58_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %58 = icmp sgt i32 %57, %53*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_58_reg <= Write4Blocks_lrph8splitusi49_58;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_58_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %smax28 = select i1 %58, i32 %57, i32 %53*/
		Write4Blocks_lrph8splitusi49_smax28 = (Write4Blocks_lrph8splitusi49_58 ? Write4Blocks_lrph8splitusi49_57 : Write4Blocks_lrph8splitusi49_53);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_smax28_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %smax28 = select i1 %58, i32 %57, i32 %53*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_smax28_reg <= Write4Blocks_lrph8splitusi49_smax28;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_smax28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_smax28_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %59 = sub i32 %56, %smax28*/
		Write4Blocks_lrph8splitusi49_59 = (Write4Blocks_lrph8splitusi49_56_reg - Write4Blocks_lrph8splitusi49_smax28_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_59_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %59 = sub i32 %56, %smax28*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_21)) begin
		Write4Blocks_lrph8splitusi49_59_reg <= Write4Blocks_lrph8splitusi49_59;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_59_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %60 = icmp ugt i32 %55, %59*/
		Write4Blocks_lrph8splitusi49_60 = (Write4Blocks_lrph8splitusi49_55_reg > Write4Blocks_lrph8splitusi49_59);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_60_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %60 = icmp ugt i32 %55, %59*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_21)) begin
		Write4Blocks_lrph8splitusi49_60_reg <= Write4Blocks_lrph8splitusi49_60;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_60_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %umax29 = select i1 %60, i32 %55, i32 %59*/
		Write4Blocks_lrph8splitusi49_umax29 = (Write4Blocks_lrph8splitusi49_60 ? Write4Blocks_lrph8splitusi49_55_reg : Write4Blocks_lrph8splitusi49_59);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_umax29_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %umax29 = select i1 %60, i32 %55, i32 %59*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_21)) begin
		Write4Blocks_lrph8splitusi49_umax29_reg <= Write4Blocks_lrph8splitusi49_umax29;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_umax29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_umax29_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %61 = sub i32 0, %umax29*/
		Write4Blocks_lrph8splitusi49_61 = (32'd0 - Write4Blocks_lrph8splitusi49_umax29_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_61_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %61 = sub i32 0, %umax29*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_22)) begin
		Write4Blocks_lrph8splitusi49_61_reg <= Write4Blocks_lrph8splitusi49_61;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_61_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %62 = shl i32 %1, 3*/
		Write4Blocks_lrph8splitusi49_62 = (Write4Blocks_0_1_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_62_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %62 = shl i32 %1, 3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_62_reg <= Write4Blocks_lrph8splitusi49_62;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_62_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %63 = add i32 %62, 8*/
		Write4Blocks_lrph8splitusi49_63 = (Write4Blocks_lrph8splitusi49_62 + 32'd8);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_63_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %63 = add i32 %62, 8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_63_reg <= Write4Blocks_lrph8splitusi49_63;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_63_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %64 = or i32 %62, 1*/
		Write4Blocks_lrph8splitusi49_64 = (Write4Blocks_lrph8splitusi49_62 | 32'd1);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_64_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %64 = or i32 %62, 1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_64_reg <= Write4Blocks_lrph8splitusi49_64;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_64_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %65 = icmp sgt i32 %63, %64*/
		Write4Blocks_lrph8splitusi49_65 = ($signed(Write4Blocks_lrph8splitusi49_63) > $signed(Write4Blocks_lrph8splitusi49_64));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_65_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %65 = icmp sgt i32 %63, %64*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_65_reg <= Write4Blocks_lrph8splitusi49_65;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_65_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %smax35 = select i1 %65, i32 %63, i32 %64*/
		Write4Blocks_lrph8splitusi49_smax35 = (Write4Blocks_lrph8splitusi49_65 ? Write4Blocks_lrph8splitusi49_63 : Write4Blocks_lrph8splitusi49_64);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_smax35_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %smax35 = select i1 %65, i32 %63, i32 %64*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_smax35_reg <= Write4Blocks_lrph8splitusi49_smax35;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_smax35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_smax35_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %66 = sub i32 %62, %smax35*/
		Write4Blocks_lrph8splitusi49_66 = (Write4Blocks_lrph8splitusi49_62_reg - Write4Blocks_lrph8splitusi49_smax35_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_66_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %66 = sub i32 %62, %smax35*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_21)) begin
		Write4Blocks_lrph8splitusi49_66_reg <= Write4Blocks_lrph8splitusi49_66;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_66_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %67 = sext i16 %7 to i32*/
		Write4Blocks_lrph8splitusi49_67 = $signed(Write4Blocks_0_7_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_67_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %67 = sext i16 %7 to i32*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_67_reg <= Write4Blocks_lrph8splitusi49_67;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_67_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %68 = sub i32 %62, %67*/
		Write4Blocks_lrph8splitusi49_68 = (Write4Blocks_lrph8splitusi49_62 - Write4Blocks_lrph8splitusi49_67);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_68_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %68 = sub i32 %62, %67*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_68_reg <= Write4Blocks_lrph8splitusi49_68;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_68_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %69 = icmp ugt i32 %66, %68*/
		Write4Blocks_lrph8splitusi49_69 = (Write4Blocks_lrph8splitusi49_66 > Write4Blocks_lrph8splitusi49_68_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_69_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %69 = icmp ugt i32 %66, %68*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_21)) begin
		Write4Blocks_lrph8splitusi49_69_reg <= Write4Blocks_lrph8splitusi49_69;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_69_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %umax36 = select i1 %69, i32 %66, i32 %68*/
		Write4Blocks_lrph8splitusi49_umax36 = (Write4Blocks_lrph8splitusi49_69 ? Write4Blocks_lrph8splitusi49_66 : Write4Blocks_lrph8splitusi49_68_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_umax36_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %umax36 = select i1 %69, i32 %66, i32 %68*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_21)) begin
		Write4Blocks_lrph8splitusi49_umax36_reg <= Write4Blocks_lrph8splitusi49_umax36;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_umax36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_umax36_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %70 = sub i32 0, %umax36*/
		Write4Blocks_lrph8splitusi49_70 = (32'd0 - Write4Blocks_lrph8splitusi49_umax36_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_70_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %70 = sub i32 0, %umax36*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_22)) begin
		Write4Blocks_lrph8splitusi49_70_reg <= Write4Blocks_lrph8splitusi49_70;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_70_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %71 = sext i16 %5 to i32*/
		Write4Blocks_lrph8splitusi49_71 = $signed(Write4Blocks_0_5_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_71_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %71 = sext i16 %5 to i32*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_71_reg <= Write4Blocks_lrph8splitusi49_71;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_71_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %72 = mul i32 %1, %71*/
		Write4Blocks_lrph8splitusi49_72 = (Write4Blocks_0_1_reg * Write4Blocks_lrph8splitusi49_71);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_72_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %72 = mul i32 %1, %71*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_72_reg <= Write4Blocks_lrph8splitusi49_72;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_72_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %73 = shl i32 %72, 3*/
		Write4Blocks_lrph8splitusi49_73 = (Write4Blocks_lrph8splitusi49_72 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_73_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %73 = shl i32 %72, 3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_73_reg <= Write4Blocks_lrph8splitusi49_73;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_73_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %74 = shl i32 %3, 3*/
		Write4Blocks_lrph8splitusi49_74 = (Write4Blocks_0_3_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_74_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %74 = shl i32 %3, 3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_74_reg <= Write4Blocks_lrph8splitusi49_74;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_74_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %75 = add i32 %73, %74*/
		Write4Blocks_lrph8splitusi49_75 = (Write4Blocks_lrph8splitusi49_73 + Write4Blocks_lrph8splitusi49_74);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_75_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %75 = add i32 %73, %74*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_75_reg <= Write4Blocks_lrph8splitusi49_75;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_75_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %76 = add i32 %75, 8*/
		Write4Blocks_lrph8splitusi49_76 = (Write4Blocks_lrph8splitusi49_75_reg + 32'd8);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_76_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %76 = add i32 %75, 8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_21)) begin
		Write4Blocks_lrph8splitusi49_76_reg <= Write4Blocks_lrph8splitusi49_76;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_76_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %77 = add i32 %74, 8*/
		Write4Blocks_lrph8splitusi49_77 = (Write4Blocks_lrph8splitusi49_74 + 32'd8);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_77_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %77 = add i32 %74, 8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_77_reg <= Write4Blocks_lrph8splitusi49_77;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_77_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %78 = sub i32 %77, %71*/
		Write4Blocks_lrph8splitusi49_78 = (Write4Blocks_lrph8splitusi49_77 - Write4Blocks_lrph8splitusi49_71);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_78_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %78 = sub i32 %77, %71*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_78_reg <= Write4Blocks_lrph8splitusi49_78;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_78_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %79 = or i32 %74, 7*/
		Write4Blocks_lrph8splitusi49_79 = (Write4Blocks_lrph8splitusi49_74 | 32'd7);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_79_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %79 = or i32 %74, 7*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_79_reg <= Write4Blocks_lrph8splitusi49_79;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_79_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %80 = add i32 %74, 15*/
		Write4Blocks_lrph8splitusi49_80 = (Write4Blocks_lrph8splitusi49_74 + 32'd15);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_80_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %80 = add i32 %74, 15*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_80_reg <= Write4Blocks_lrph8splitusi49_80;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_80_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %81 = icmp sgt i32 %80, %77*/
		Write4Blocks_lrph8splitusi49_81 = ($signed(Write4Blocks_lrph8splitusi49_80) > $signed(Write4Blocks_lrph8splitusi49_77));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_81_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %81 = icmp sgt i32 %80, %77*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_81_reg <= Write4Blocks_lrph8splitusi49_81;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_81_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %smax39 = select i1 %81, i32 %80, i32 %77*/
		Write4Blocks_lrph8splitusi49_smax39 = (Write4Blocks_lrph8splitusi49_81 ? Write4Blocks_lrph8splitusi49_80 : Write4Blocks_lrph8splitusi49_77);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_smax39_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %smax39 = select i1 %81, i32 %80, i32 %77*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_20)) begin
		Write4Blocks_lrph8splitusi49_smax39_reg <= Write4Blocks_lrph8splitusi49_smax39;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_smax39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_smax39_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %82 = sub i32 %79, %smax39*/
		Write4Blocks_lrph8splitusi49_82 = (Write4Blocks_lrph8splitusi49_79_reg - Write4Blocks_lrph8splitusi49_smax39_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_82_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %82 = sub i32 %79, %smax39*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_21)) begin
		Write4Blocks_lrph8splitusi49_82_reg <= Write4Blocks_lrph8splitusi49_82;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_82_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %83 = icmp ugt i32 %78, %82*/
		Write4Blocks_lrph8splitusi49_83 = (Write4Blocks_lrph8splitusi49_78_reg > Write4Blocks_lrph8splitusi49_82);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_83_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %83 = icmp ugt i32 %78, %82*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_21)) begin
		Write4Blocks_lrph8splitusi49_83_reg <= Write4Blocks_lrph8splitusi49_83;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_83_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %umax40 = select i1 %83, i32 %78, i32 %82*/
		Write4Blocks_lrph8splitusi49_umax40 = (Write4Blocks_lrph8splitusi49_83 ? Write4Blocks_lrph8splitusi49_78_reg : Write4Blocks_lrph8splitusi49_82);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_umax40_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %umax40 = select i1 %83, i32 %78, i32 %82*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_21)) begin
		Write4Blocks_lrph8splitusi49_umax40_reg <= Write4Blocks_lrph8splitusi49_umax40;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_umax40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_umax40_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %84 = sub i32 0, %umax40*/
		Write4Blocks_lrph8splitusi49_84 = (32'd0 - Write4Blocks_lrph8splitusi49_umax40_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi49_84_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i49*/
	/*   %84 = sub i32 0, %umax40*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_22)) begin
		Write4Blocks_lrph8splitusi49_84_reg <= Write4Blocks_lrph8splitusi49_84;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi49_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi49_84_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %85*/
	/*   %indvar.next32 = add i32 %indvar31, 1*/
		Write4Blocks_85_indvarnext32 = (Write4Blocks_lrphusi57_indvar31_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_85_indvarnext32_reg <= 0;
	/* Write4Blocks: %85*/
	/*   %indvar.next32 = add i32 %indvar31, 1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__85_23)) begin
		Write4Blocks_85_indvarnext32_reg <= Write4Blocks_85_indvarnext32;
		if (start == 1'b0 && ^(Write4Blocks_85_indvarnext32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_85_indvarnext32_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %85*/
	/*   %exitcond37 = icmp eq i32 %indvar.next32, %70*/
		Write4Blocks_85_exitcond37 = (Write4Blocks_85_indvarnext32 == Write4Blocks_lrph8splitusi49_70_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_85_exitcond37_reg <= 0;
	/* Write4Blocks: %85*/
	/*   %exitcond37 = icmp eq i32 %indvar.next32, %70*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__85_23)) begin
		Write4Blocks_85_exitcond37_reg <= Write4Blocks_85_exitcond37;
		if (start == 1'b0 && ^(Write4Blocks_85_exitcond37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_85_exitcond37_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %86*/
	/*   %indvar26 = phi i32 [ 0, %.lr.ph.us.i57 ], [ %indvar.next27, %86 ]*/
	if ((((cur_state == LEGUP_F_Write4Blocks_BB__86_28) & (memory_controller_waitrequest == 1'd0)) & (Write4Blocks_86_exitcond30_reg == 1'd0))) begin
		Write4Blocks_86_indvar26 = Write4Blocks_86_indvarnext27_reg;
	end
	/* Write4Blocks: %86*/
	/*   %indvar26 = phi i32 [ 0, %.lr.ph.us.i57 ], [ %indvar.next27, %86 ]*/
	else /* if (((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi57_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		Write4Blocks_86_indvar26 = 32'd0;
	end
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_86_indvar26_reg <= 0;
	/* Write4Blocks: %86*/
	/*   %indvar26 = phi i32 [ 0, %.lr.ph.us.i57 ], [ %indvar.next27, %86 ]*/
	else if((((cur_state == LEGUP_F_Write4Blocks_BB__86_28) & (memory_controller_waitrequest == 1'd0)) & (Write4Blocks_86_exitcond30_reg == 1'd0))) begin
		Write4Blocks_86_indvar26_reg <= Write4Blocks_86_indvar26;
		if (start == 1'b0 && ^(Write4Blocks_86_indvar26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_86_indvar26_reg"); $finish; end
	end
	/* Write4Blocks: %86*/
	/*   %indvar26 = phi i32 [ 0, %.lr.ph.us.i57 ], [ %indvar.next27, %86 ]*/
	else if(((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi57_29) & (memory_controller_waitrequest == 1'd0))) begin
		Write4Blocks_86_indvar26_reg <= Write4Blocks_86_indvar26;
		if (start == 1'b0 && ^(Write4Blocks_86_indvar26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_86_indvar26_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %86*/
	/*   %87 = add i32 %92, %indvar26*/
		Write4Blocks_86_87 = (Write4Blocks_lrphusi57_92_reg + Write4Blocks_86_indvar26_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_86_87_reg <= 0;
	/* Write4Blocks: %86*/
	/*   %87 = add i32 %92, %indvar26*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__86_24)) begin
		Write4Blocks_86_87_reg <= Write4Blocks_86_87;
		if (start == 1'b0 && ^(Write4Blocks_86_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_86_87_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %86*/
	/*   %scevgep34 = getelementptr i8* %p_out_buf, i32 %87*/
		Write4Blocks_86_scevgep34 = (arg_p_out_buf + (1 * Write4Blocks_86_87_reg));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_86_scevgep34_reg <= 0;
	/* Write4Blocks: %86*/
	/*   %scevgep34 = getelementptr i8* %p_out_buf, i32 %87*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__86_25)) begin
		Write4Blocks_86_scevgep34_reg <= Write4Blocks_86_scevgep34;
		if (start == 1'b0 && ^(Write4Blocks_86_scevgep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_86_scevgep34_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %86*/
	/*   %88 = add i32 %93, %indvar26*/
		Write4Blocks_86_88 = (Write4Blocks_lrphusi57_93_reg + Write4Blocks_86_indvar26_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_86_88_reg <= 0;
	/* Write4Blocks: %86*/
	/*   %88 = add i32 %93, %indvar26*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__86_24)) begin
		Write4Blocks_86_88_reg <= Write4Blocks_86_88;
		if (start == 1'b0 && ^(Write4Blocks_86_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_86_88_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %86*/
	/*   %.14.us.i52 = getelementptr i32* %store2, i32 %88*/
		Write4Blocks_86_14usi52 = (arg_store2 + (4 * Write4Blocks_86_88_reg));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_86_14usi52_reg <= 0;
	/* Write4Blocks: %86*/
	/*   %.14.us.i52 = getelementptr i32* %store2, i32 %88*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__86_25)) begin
		Write4Blocks_86_14usi52_reg <= Write4Blocks_86_14usi52;
		if (start == 1'b0 && ^(Write4Blocks_86_14usi52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_86_14usi52_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %86*/
	/*   %89 = load i32* %.14.us.i52, align 4, !tbaa !1*/
		Write4Blocks_86_89 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_86_89_reg <= 0;
	/* Write4Blocks: %86*/
	/*   %89 = load i32* %.14.us.i52, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__86_27)) begin
		Write4Blocks_86_89_reg <= Write4Blocks_86_89;
		if (start == 1'b0 && ^(Write4Blocks_86_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_86_89_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %86*/
	/*   %90 = trunc i32 %89 to i8*/
		Write4Blocks_86_90 = Write4Blocks_86_89[7:0];
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_86_90_reg <= 0;
	/* Write4Blocks: %86*/
	/*   %90 = trunc i32 %89 to i8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__86_27)) begin
		Write4Blocks_86_90_reg <= Write4Blocks_86_90;
		if (start == 1'b0 && ^(Write4Blocks_86_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_86_90_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %86*/
	/*   %indvar.next27 = add i32 %indvar26, 1*/
		Write4Blocks_86_indvarnext27 = (Write4Blocks_86_indvar26_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_86_indvarnext27_reg <= 0;
	/* Write4Blocks: %86*/
	/*   %indvar.next27 = add i32 %indvar26, 1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__86_24)) begin
		Write4Blocks_86_indvarnext27_reg <= Write4Blocks_86_indvarnext27;
		if (start == 1'b0 && ^(Write4Blocks_86_indvarnext27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_86_indvarnext27_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %86*/
	/*   %exitcond30 = icmp eq i32 %indvar.next27, %61*/
		Write4Blocks_86_exitcond30 = (Write4Blocks_86_indvarnext27 == Write4Blocks_lrph8splitusi49_61_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_86_exitcond30_reg <= 0;
	/* Write4Blocks: %86*/
	/*   %exitcond30 = icmp eq i32 %indvar.next27, %61*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__86_24)) begin
		Write4Blocks_86_exitcond30_reg <= Write4Blocks_86_exitcond30;
		if (start == 1'b0 && ^(Write4Blocks_86_exitcond30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_86_exitcond30_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph.us.i57*/
	/*   %indvar31 = phi i32 [ %indvar.next32, %85 ], [ 0, %.lr.ph8.split.us.i49 ]*/
	if (((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_22) & (memory_controller_waitrequest == 1'd0))) begin
		Write4Blocks_lrphusi57_indvar31 = 32'd0;
	end
	/* Write4Blocks: %.lr.ph.us.i57*/
	/*   %indvar31 = phi i32 [ %indvar.next32, %85 ], [ 0, %.lr.ph8.split.us.i49 ]*/
	else /* if ((((cur_state == LEGUP_F_Write4Blocks_BB__85_23) & (memory_controller_waitrequest == 1'd0)) & (Write4Blocks_85_exitcond37 == 1'd0))) */ begin
		Write4Blocks_lrphusi57_indvar31 = Write4Blocks_85_indvarnext32;
	end
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrphusi57_indvar31_reg <= 0;
	/* Write4Blocks: %.lr.ph.us.i57*/
	/*   %indvar31 = phi i32 [ %indvar.next32, %85 ], [ 0, %.lr.ph8.split.us.i49 ]*/
	else if(((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi49_22) & (memory_controller_waitrequest == 1'd0))) begin
		Write4Blocks_lrphusi57_indvar31_reg <= Write4Blocks_lrphusi57_indvar31;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi57_indvar31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi57_indvar31_reg"); $finish; end
	end
	/* Write4Blocks: %.lr.ph.us.i57*/
	/*   %indvar31 = phi i32 [ %indvar.next32, %85 ], [ 0, %.lr.ph8.split.us.i49 ]*/
	else if((((cur_state == LEGUP_F_Write4Blocks_BB__85_23) & (memory_controller_waitrequest == 1'd0)) & (Write4Blocks_85_exitcond37 == 1'd0))) begin
		Write4Blocks_lrphusi57_indvar31_reg <= Write4Blocks_lrphusi57_indvar31;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi57_indvar31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi57_indvar31_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph.us.i57*/
	/*   %91 = mul i32 %71, %indvar31*/
		Write4Blocks_lrphusi57_91 = (Write4Blocks_lrph8splitusi49_71_reg * Write4Blocks_lrphusi57_indvar31_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrphusi57_91_reg <= 0;
	/* Write4Blocks: %.lr.ph.us.i57*/
	/*   %91 = mul i32 %71, %indvar31*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi57_29)) begin
		Write4Blocks_lrphusi57_91_reg <= Write4Blocks_lrphusi57_91;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi57_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi57_91_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph.us.i57*/
	/*   %92 = add i32 %76, %91*/
		Write4Blocks_lrphusi57_92 = (Write4Blocks_lrph8splitusi49_76_reg + Write4Blocks_lrphusi57_91);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrphusi57_92_reg <= 0;
	/* Write4Blocks: %.lr.ph.us.i57*/
	/*   %92 = add i32 %76, %91*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi57_29)) begin
		Write4Blocks_lrphusi57_92_reg <= Write4Blocks_lrphusi57_92;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi57_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi57_92_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph.us.i57*/
	/*   %93 = mul i32 %indvar31, %84*/
		Write4Blocks_lrphusi57_93 = (Write4Blocks_lrphusi57_indvar31_reg * Write4Blocks_lrph8splitusi49_84_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrphusi57_93_reg <= 0;
	/* Write4Blocks: %.lr.ph.us.i57*/
	/*   %93 = mul i32 %indvar31, %84*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi57_29)) begin
		Write4Blocks_lrphusi57_93_reg <= Write4Blocks_lrphusi57_93;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi57_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi57_93_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %WriteOneBlock.exit60*/
	/*   %.pre-phi = add i32 %2, 8*/
		Write4Blocks_WriteOneBlockexit60_prephi = (Write4Blocks_0_2_reg + 32'd8);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_WriteOneBlockexit60_prephi_reg <= 0;
	/* Write4Blocks: %WriteOneBlock.exit60*/
	/*   %.pre-phi = add i32 %2, 8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit60_31)) begin
		Write4Blocks_WriteOneBlockexit60_prephi_reg <= Write4Blocks_WriteOneBlockexit60_prephi;
		if (start == 1'b0 && ^(Write4Blocks_WriteOneBlockexit60_prephi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlockexit60_prephi_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %WriteOneBlock.exit60*/
	/*   %94 = icmp slt i32 %.pre-phi, %8*/
		Write4Blocks_WriteOneBlockexit60_94 = ($signed(Write4Blocks_WriteOneBlockexit60_prephi) < $signed(Write4Blocks_0_8_reg));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_WriteOneBlockexit60_94_reg <= 0;
	/* Write4Blocks: %WriteOneBlock.exit60*/
	/*   %94 = icmp slt i32 %.pre-phi, %8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit60_31)) begin
		Write4Blocks_WriteOneBlockexit60_94_reg <= Write4Blocks_WriteOneBlockexit60_94;
		if (start == 1'b0 && ^(Write4Blocks_WriteOneBlockexit60_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlockexit60_94_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %WriteOneBlock.exit60*/
	/*   %or.cond71 = and i1 %94, %10*/
		Write4Blocks_WriteOneBlockexit60_orcond71 = (Write4Blocks_WriteOneBlockexit60_94 & Write4Blocks_0_10_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_WriteOneBlockexit60_orcond71_reg <= 0;
	/* Write4Blocks: %WriteOneBlock.exit60*/
	/*   %or.cond71 = and i1 %94, %10*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit60_31)) begin
		Write4Blocks_WriteOneBlockexit60_orcond71_reg <= Write4Blocks_WriteOneBlockexit60_orcond71;
		if (start == 1'b0 && ^(Write4Blocks_WriteOneBlockexit60_orcond71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlockexit60_orcond71_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %95 = shl i32 %3, 3*/
		Write4Blocks_lrph8splitusi29_95 = (Write4Blocks_0_3_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_95_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %95 = shl i32 %3, 3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_95_reg <= Write4Blocks_lrph8splitusi29_95;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_95_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %96 = add i32 %95, -1*/
		Write4Blocks_lrph8splitusi29_96 = (Write4Blocks_lrph8splitusi29_95 + -32'd1);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_96_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %96 = add i32 %95, -1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_96_reg <= Write4Blocks_lrph8splitusi29_96;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_96_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %97 = or i32 %95, 7*/
		Write4Blocks_lrph8splitusi29_97 = (Write4Blocks_lrph8splitusi29_95 | 32'd7);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_97_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %97 = or i32 %95, 7*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_97_reg <= Write4Blocks_lrph8splitusi29_97;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_97_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %98 = icmp sgt i32 %95, %97*/
		Write4Blocks_lrph8splitusi29_98 = ($signed(Write4Blocks_lrph8splitusi29_95) > $signed(Write4Blocks_lrph8splitusi29_97));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_98_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %98 = icmp sgt i32 %95, %97*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_98_reg <= Write4Blocks_lrph8splitusi29_98;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_98_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %smax12 = select i1 %98, i32 %95, i32 %97*/
		Write4Blocks_lrph8splitusi29_smax12 = (Write4Blocks_lrph8splitusi29_98 ? Write4Blocks_lrph8splitusi29_95 : Write4Blocks_lrph8splitusi29_97);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_smax12_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %smax12 = select i1 %98, i32 %95, i32 %97*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_smax12_reg <= Write4Blocks_lrph8splitusi29_smax12;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_smax12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_smax12_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %99 = sub i32 %96, %smax12*/
		Write4Blocks_lrph8splitusi29_99 = (Write4Blocks_lrph8splitusi29_96 - Write4Blocks_lrph8splitusi29_smax12);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_99_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %99 = sub i32 %96, %smax12*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_99_reg <= Write4Blocks_lrph8splitusi29_99;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_99_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %100 = sext i16 %5 to i32*/
		Write4Blocks_lrph8splitusi29_100 = $signed(Write4Blocks_0_5_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_100_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %100 = sext i16 %5 to i32*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_100_reg <= Write4Blocks_lrph8splitusi29_100;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_100_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %101 = sub i32 %95, %100*/
		Write4Blocks_lrph8splitusi29_101 = (Write4Blocks_lrph8splitusi29_95 - Write4Blocks_lrph8splitusi29_100);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_101_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %101 = sub i32 %95, %100*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_101_reg <= Write4Blocks_lrph8splitusi29_101;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_101_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %102 = icmp ugt i32 %99, %101*/
		Write4Blocks_lrph8splitusi29_102 = (Write4Blocks_lrph8splitusi29_99_reg > Write4Blocks_lrph8splitusi29_101_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_102_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %102 = icmp ugt i32 %99, %101*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_33)) begin
		Write4Blocks_lrph8splitusi29_102_reg <= Write4Blocks_lrph8splitusi29_102;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_102_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %umax13 = select i1 %102, i32 %99, i32 %101*/
		Write4Blocks_lrph8splitusi29_umax13 = (Write4Blocks_lrph8splitusi29_102 ? Write4Blocks_lrph8splitusi29_99_reg : Write4Blocks_lrph8splitusi29_101_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_umax13_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %umax13 = select i1 %102, i32 %99, i32 %101*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_33)) begin
		Write4Blocks_lrph8splitusi29_umax13_reg <= Write4Blocks_lrph8splitusi29_umax13;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_umax13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_umax13_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %103 = sub i32 0, %umax13*/
		Write4Blocks_lrph8splitusi29_103 = (32'd0 - Write4Blocks_lrph8splitusi29_umax13);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_103_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %103 = sub i32 0, %umax13*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_33)) begin
		Write4Blocks_lrph8splitusi29_103_reg <= Write4Blocks_lrph8splitusi29_103;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_103_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %104 = shl i32 %1, 3*/
		Write4Blocks_lrph8splitusi29_104 = (Write4Blocks_0_1_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_104_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %104 = shl i32 %1, 3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_104_reg <= Write4Blocks_lrph8splitusi29_104;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_104_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %105 = add i32 %104, 16*/
		Write4Blocks_lrph8splitusi29_105 = (Write4Blocks_lrph8splitusi29_104 + 32'd16);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_105_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %105 = add i32 %104, 16*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_105_reg <= Write4Blocks_lrph8splitusi29_105;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_105_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %106 = add i32 %104, 9*/
		Write4Blocks_lrph8splitusi29_106 = (Write4Blocks_lrph8splitusi29_104 + 32'd9);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_106_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %106 = add i32 %104, 9*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_106_reg <= Write4Blocks_lrph8splitusi29_106;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_106_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %107 = icmp sgt i32 %105, %106*/
		Write4Blocks_lrph8splitusi29_107 = ($signed(Write4Blocks_lrph8splitusi29_105) > $signed(Write4Blocks_lrph8splitusi29_106));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_107_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %107 = icmp sgt i32 %105, %106*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_107_reg <= Write4Blocks_lrph8splitusi29_107;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_107_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %smax19 = select i1 %107, i32 %105, i32 %106*/
		Write4Blocks_lrph8splitusi29_smax19 = (Write4Blocks_lrph8splitusi29_107 ? Write4Blocks_lrph8splitusi29_105 : Write4Blocks_lrph8splitusi29_106);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_smax19_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %smax19 = select i1 %107, i32 %105, i32 %106*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_smax19_reg <= Write4Blocks_lrph8splitusi29_smax19;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_smax19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_smax19_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %108 = sub i32 %.pre-phi, %smax19*/
		Write4Blocks_lrph8splitusi29_108 = (Write4Blocks_WriteOneBlockexit60_prephi_reg - Write4Blocks_lrph8splitusi29_smax19_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_108_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %108 = sub i32 %.pre-phi, %smax19*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_33)) begin
		Write4Blocks_lrph8splitusi29_108_reg <= Write4Blocks_lrph8splitusi29_108;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_108_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %109 = sext i16 %7 to i32*/
		Write4Blocks_lrph8splitusi29_109 = $signed(Write4Blocks_0_7_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_109_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %109 = sext i16 %7 to i32*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_109_reg <= Write4Blocks_lrph8splitusi29_109;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_109_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %110 = sub i32 %.pre-phi, %109*/
		Write4Blocks_lrph8splitusi29_110 = (Write4Blocks_WriteOneBlockexit60_prephi_reg - Write4Blocks_lrph8splitusi29_109);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_110_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %110 = sub i32 %.pre-phi, %109*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_110_reg <= Write4Blocks_lrph8splitusi29_110;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_110_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %111 = icmp ugt i32 %108, %110*/
		Write4Blocks_lrph8splitusi29_111 = (Write4Blocks_lrph8splitusi29_108 > Write4Blocks_lrph8splitusi29_110_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_111_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %111 = icmp ugt i32 %108, %110*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_33)) begin
		Write4Blocks_lrph8splitusi29_111_reg <= Write4Blocks_lrph8splitusi29_111;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_111_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %umax20 = select i1 %111, i32 %108, i32 %110*/
		Write4Blocks_lrph8splitusi29_umax20 = (Write4Blocks_lrph8splitusi29_111 ? Write4Blocks_lrph8splitusi29_108 : Write4Blocks_lrph8splitusi29_110_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_umax20_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %umax20 = select i1 %111, i32 %108, i32 %110*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_33)) begin
		Write4Blocks_lrph8splitusi29_umax20_reg <= Write4Blocks_lrph8splitusi29_umax20;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_umax20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_umax20_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %112 = sub i32 0, %umax20*/
		Write4Blocks_lrph8splitusi29_112 = (32'd0 - Write4Blocks_lrph8splitusi29_umax20_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_112_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %112 = sub i32 0, %umax20*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_34)) begin
		Write4Blocks_lrph8splitusi29_112_reg <= Write4Blocks_lrph8splitusi29_112;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_112_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %113 = sext i16 %5 to i32*/
		Write4Blocks_lrph8splitusi29_113 = $signed(Write4Blocks_0_5_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_113_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %113 = sext i16 %5 to i32*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_113_reg <= Write4Blocks_lrph8splitusi29_113;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_113_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %114 = mul i32 %.pre-phi, %113*/
		Write4Blocks_lrph8splitusi29_114 = (Write4Blocks_WriteOneBlockexit60_prephi_reg * Write4Blocks_lrph8splitusi29_113);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_114_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %114 = mul i32 %.pre-phi, %113*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_114_reg <= Write4Blocks_lrph8splitusi29_114;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_114_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %115 = shl i32 %3, 3*/
		Write4Blocks_lrph8splitusi29_115 = (Write4Blocks_0_3_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_115_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %115 = shl i32 %3, 3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_115_reg <= Write4Blocks_lrph8splitusi29_115;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_115_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %116 = add i32 %114, %115*/
		Write4Blocks_lrph8splitusi29_116 = (Write4Blocks_lrph8splitusi29_114 + Write4Blocks_lrph8splitusi29_115);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_116_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %116 = add i32 %114, %115*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_116_reg <= Write4Blocks_lrph8splitusi29_116;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_116_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %117 = add i32 %115, -1*/
		Write4Blocks_lrph8splitusi29_117 = (Write4Blocks_lrph8splitusi29_115 + -32'd1);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_117_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %117 = add i32 %115, -1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_117_reg <= Write4Blocks_lrph8splitusi29_117;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_117_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %118 = or i32 %115, 7*/
		Write4Blocks_lrph8splitusi29_118 = (Write4Blocks_lrph8splitusi29_115 | 32'd7);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_118_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %118 = or i32 %115, 7*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_118_reg <= Write4Blocks_lrph8splitusi29_118;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_118_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %119 = icmp sgt i32 %115, %118*/
		Write4Blocks_lrph8splitusi29_119 = ($signed(Write4Blocks_lrph8splitusi29_115) > $signed(Write4Blocks_lrph8splitusi29_118));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_119_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %119 = icmp sgt i32 %115, %118*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_119_reg <= Write4Blocks_lrph8splitusi29_119;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_119_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %smax23 = select i1 %119, i32 %115, i32 %118*/
		Write4Blocks_lrph8splitusi29_smax23 = (Write4Blocks_lrph8splitusi29_119 ? Write4Blocks_lrph8splitusi29_115 : Write4Blocks_lrph8splitusi29_118);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_smax23_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %smax23 = select i1 %119, i32 %115, i32 %118*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_smax23_reg <= Write4Blocks_lrph8splitusi29_smax23;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_smax23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_smax23_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %120 = sub i32 %117, %smax23*/
		Write4Blocks_lrph8splitusi29_120 = (Write4Blocks_lrph8splitusi29_117 - Write4Blocks_lrph8splitusi29_smax23);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_120_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %120 = sub i32 %117, %smax23*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_120_reg <= Write4Blocks_lrph8splitusi29_120;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_120_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %121 = sub i32 %115, %113*/
		Write4Blocks_lrph8splitusi29_121 = (Write4Blocks_lrph8splitusi29_115 - Write4Blocks_lrph8splitusi29_113);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_121_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %121 = sub i32 %115, %113*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_32)) begin
		Write4Blocks_lrph8splitusi29_121_reg <= Write4Blocks_lrph8splitusi29_121;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_121_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %122 = icmp ugt i32 %120, %121*/
		Write4Blocks_lrph8splitusi29_122 = (Write4Blocks_lrph8splitusi29_120_reg > Write4Blocks_lrph8splitusi29_121_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_122_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %122 = icmp ugt i32 %120, %121*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_33)) begin
		Write4Blocks_lrph8splitusi29_122_reg <= Write4Blocks_lrph8splitusi29_122;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_122_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %umax24 = select i1 %122, i32 %120, i32 %121*/
		Write4Blocks_lrph8splitusi29_umax24 = (Write4Blocks_lrph8splitusi29_122 ? Write4Blocks_lrph8splitusi29_120_reg : Write4Blocks_lrph8splitusi29_121_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_umax24_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %umax24 = select i1 %122, i32 %120, i32 %121*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_33)) begin
		Write4Blocks_lrph8splitusi29_umax24_reg <= Write4Blocks_lrph8splitusi29_umax24;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_umax24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_umax24_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %123 = sub i32 0, %umax24*/
		Write4Blocks_lrph8splitusi29_123 = (32'd0 - Write4Blocks_lrph8splitusi29_umax24);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi29_123_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i29*/
	/*   %123 = sub i32 0, %umax24*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_33)) begin
		Write4Blocks_lrph8splitusi29_123_reg <= Write4Blocks_lrph8splitusi29_123;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi29_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi29_123_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %124*/
	/*   %indvar.next16 = add i32 %indvar15, 1*/
		Write4Blocks_124_indvarnext16 = (Write4Blocks_lrphusi37_indvar15_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_124_indvarnext16_reg <= 0;
	/* Write4Blocks: %124*/
	/*   %indvar.next16 = add i32 %indvar15, 1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__124_35)) begin
		Write4Blocks_124_indvarnext16_reg <= Write4Blocks_124_indvarnext16;
		if (start == 1'b0 && ^(Write4Blocks_124_indvarnext16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_124_indvarnext16_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %124*/
	/*   %exitcond21 = icmp eq i32 %indvar.next16, %112*/
		Write4Blocks_124_exitcond21 = (Write4Blocks_124_indvarnext16 == Write4Blocks_lrph8splitusi29_112_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_124_exitcond21_reg <= 0;
	/* Write4Blocks: %124*/
	/*   %exitcond21 = icmp eq i32 %indvar.next16, %112*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__124_35)) begin
		Write4Blocks_124_exitcond21_reg <= Write4Blocks_124_exitcond21;
		if (start == 1'b0 && ^(Write4Blocks_124_exitcond21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_124_exitcond21_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %125*/
	/*   %indvar10 = phi i32 [ 0, %.lr.ph.us.i37 ], [ %indvar.next11, %125 ]*/
	if ((((cur_state == LEGUP_F_Write4Blocks_BB__125_40) & (memory_controller_waitrequest == 1'd0)) & (Write4Blocks_125_exitcond14_reg == 1'd0))) begin
		Write4Blocks_125_indvar10 = Write4Blocks_125_indvarnext11_reg;
	end
	/* Write4Blocks: %125*/
	/*   %indvar10 = phi i32 [ 0, %.lr.ph.us.i37 ], [ %indvar.next11, %125 ]*/
	else /* if (((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi37_41) & (memory_controller_waitrequest == 1'd0))) */ begin
		Write4Blocks_125_indvar10 = 32'd0;
	end
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_125_indvar10_reg <= 0;
	/* Write4Blocks: %125*/
	/*   %indvar10 = phi i32 [ 0, %.lr.ph.us.i37 ], [ %indvar.next11, %125 ]*/
	else if((((cur_state == LEGUP_F_Write4Blocks_BB__125_40) & (memory_controller_waitrequest == 1'd0)) & (Write4Blocks_125_exitcond14_reg == 1'd0))) begin
		Write4Blocks_125_indvar10_reg <= Write4Blocks_125_indvar10;
		if (start == 1'b0 && ^(Write4Blocks_125_indvar10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_125_indvar10_reg"); $finish; end
	end
	/* Write4Blocks: %125*/
	/*   %indvar10 = phi i32 [ 0, %.lr.ph.us.i37 ], [ %indvar.next11, %125 ]*/
	else if(((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi37_41) & (memory_controller_waitrequest == 1'd0))) begin
		Write4Blocks_125_indvar10_reg <= Write4Blocks_125_indvar10;
		if (start == 1'b0 && ^(Write4Blocks_125_indvar10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_125_indvar10_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %125*/
	/*   %126 = add i32 %131, %indvar10*/
		Write4Blocks_125_126 = (Write4Blocks_lrphusi37_131_reg + Write4Blocks_125_indvar10_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_125_126_reg <= 0;
	/* Write4Blocks: %125*/
	/*   %126 = add i32 %131, %indvar10*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__125_36)) begin
		Write4Blocks_125_126_reg <= Write4Blocks_125_126;
		if (start == 1'b0 && ^(Write4Blocks_125_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_125_126_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %125*/
	/*   %scevgep18 = getelementptr i8* %p_out_buf, i32 %126*/
		Write4Blocks_125_scevgep18 = (arg_p_out_buf + (1 * Write4Blocks_125_126_reg));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_125_scevgep18_reg <= 0;
	/* Write4Blocks: %125*/
	/*   %scevgep18 = getelementptr i8* %p_out_buf, i32 %126*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__125_37)) begin
		Write4Blocks_125_scevgep18_reg <= Write4Blocks_125_scevgep18;
		if (start == 1'b0 && ^(Write4Blocks_125_scevgep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_125_scevgep18_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %125*/
	/*   %127 = add i32 %132, %indvar10*/
		Write4Blocks_125_127 = (Write4Blocks_lrphusi37_132_reg + Write4Blocks_125_indvar10_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_125_127_reg <= 0;
	/* Write4Blocks: %125*/
	/*   %127 = add i32 %132, %indvar10*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__125_36)) begin
		Write4Blocks_125_127_reg <= Write4Blocks_125_127;
		if (start == 1'b0 && ^(Write4Blocks_125_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_125_127_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %125*/
	/*   %.14.us.i32 = getelementptr i32* %store3, i32 %127*/
		Write4Blocks_125_14usi32 = (arg_store3 + (4 * Write4Blocks_125_127_reg));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_125_14usi32_reg <= 0;
	/* Write4Blocks: %125*/
	/*   %.14.us.i32 = getelementptr i32* %store3, i32 %127*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__125_37)) begin
		Write4Blocks_125_14usi32_reg <= Write4Blocks_125_14usi32;
		if (start == 1'b0 && ^(Write4Blocks_125_14usi32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_125_14usi32_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %125*/
	/*   %128 = load i32* %.14.us.i32, align 4, !tbaa !1*/
		Write4Blocks_125_128 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_125_128_reg <= 0;
	/* Write4Blocks: %125*/
	/*   %128 = load i32* %.14.us.i32, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__125_39)) begin
		Write4Blocks_125_128_reg <= Write4Blocks_125_128;
		if (start == 1'b0 && ^(Write4Blocks_125_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_125_128_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %125*/
	/*   %129 = trunc i32 %128 to i8*/
		Write4Blocks_125_129 = Write4Blocks_125_128[7:0];
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_125_129_reg <= 0;
	/* Write4Blocks: %125*/
	/*   %129 = trunc i32 %128 to i8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__125_39)) begin
		Write4Blocks_125_129_reg <= Write4Blocks_125_129;
		if (start == 1'b0 && ^(Write4Blocks_125_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_125_129_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %125*/
	/*   %indvar.next11 = add i32 %indvar10, 1*/
		Write4Blocks_125_indvarnext11 = (Write4Blocks_125_indvar10_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_125_indvarnext11_reg <= 0;
	/* Write4Blocks: %125*/
	/*   %indvar.next11 = add i32 %indvar10, 1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__125_36)) begin
		Write4Blocks_125_indvarnext11_reg <= Write4Blocks_125_indvarnext11;
		if (start == 1'b0 && ^(Write4Blocks_125_indvarnext11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_125_indvarnext11_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %125*/
	/*   %exitcond14 = icmp eq i32 %indvar.next11, %103*/
		Write4Blocks_125_exitcond14 = (Write4Blocks_125_indvarnext11 == Write4Blocks_lrph8splitusi29_103_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_125_exitcond14_reg <= 0;
	/* Write4Blocks: %125*/
	/*   %exitcond14 = icmp eq i32 %indvar.next11, %103*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__125_36)) begin
		Write4Blocks_125_exitcond14_reg <= Write4Blocks_125_exitcond14;
		if (start == 1'b0 && ^(Write4Blocks_125_exitcond14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_125_exitcond14_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph.us.i37*/
	/*   %indvar15 = phi i32 [ %indvar.next16, %124 ], [ 0, %.lr.ph8.split.us.i29 ]*/
	if (((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_34) & (memory_controller_waitrequest == 1'd0))) begin
		Write4Blocks_lrphusi37_indvar15 = 32'd0;
	end
	/* Write4Blocks: %.lr.ph.us.i37*/
	/*   %indvar15 = phi i32 [ %indvar.next16, %124 ], [ 0, %.lr.ph8.split.us.i29 ]*/
	else /* if ((((cur_state == LEGUP_F_Write4Blocks_BB__124_35) & (memory_controller_waitrequest == 1'd0)) & (Write4Blocks_124_exitcond21 == 1'd0))) */ begin
		Write4Blocks_lrphusi37_indvar15 = Write4Blocks_124_indvarnext16;
	end
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrphusi37_indvar15_reg <= 0;
	/* Write4Blocks: %.lr.ph.us.i37*/
	/*   %indvar15 = phi i32 [ %indvar.next16, %124 ], [ 0, %.lr.ph8.split.us.i29 ]*/
	else if(((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi29_34) & (memory_controller_waitrequest == 1'd0))) begin
		Write4Blocks_lrphusi37_indvar15_reg <= Write4Blocks_lrphusi37_indvar15;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi37_indvar15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi37_indvar15_reg"); $finish; end
	end
	/* Write4Blocks: %.lr.ph.us.i37*/
	/*   %indvar15 = phi i32 [ %indvar.next16, %124 ], [ 0, %.lr.ph8.split.us.i29 ]*/
	else if((((cur_state == LEGUP_F_Write4Blocks_BB__124_35) & (memory_controller_waitrequest == 1'd0)) & (Write4Blocks_124_exitcond21 == 1'd0))) begin
		Write4Blocks_lrphusi37_indvar15_reg <= Write4Blocks_lrphusi37_indvar15;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi37_indvar15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi37_indvar15_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph.us.i37*/
	/*   %130 = mul i32 %113, %indvar15*/
		Write4Blocks_lrphusi37_130 = (Write4Blocks_lrph8splitusi29_113_reg * Write4Blocks_lrphusi37_indvar15_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrphusi37_130_reg <= 0;
	/* Write4Blocks: %.lr.ph.us.i37*/
	/*   %130 = mul i32 %113, %indvar15*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi37_41)) begin
		Write4Blocks_lrphusi37_130_reg <= Write4Blocks_lrphusi37_130;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi37_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi37_130_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph.us.i37*/
	/*   %131 = add i32 %116, %130*/
		Write4Blocks_lrphusi37_131 = (Write4Blocks_lrph8splitusi29_116_reg + Write4Blocks_lrphusi37_130);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrphusi37_131_reg <= 0;
	/* Write4Blocks: %.lr.ph.us.i37*/
	/*   %131 = add i32 %116, %130*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi37_41)) begin
		Write4Blocks_lrphusi37_131_reg <= Write4Blocks_lrphusi37_131;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi37_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi37_131_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph.us.i37*/
	/*   %132 = mul i32 %indvar15, %123*/
		Write4Blocks_lrphusi37_132 = (Write4Blocks_lrphusi37_indvar15_reg * Write4Blocks_lrph8splitusi29_123_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrphusi37_132_reg <= 0;
	/* Write4Blocks: %.lr.ph.us.i37*/
	/*   %132 = mul i32 %indvar15, %123*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi37_41)) begin
		Write4Blocks_lrphusi37_132_reg <= Write4Blocks_lrphusi37_132;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi37_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi37_132_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %WriteOneBlock.exit40*/
	/*   %133 = icmp slt i32 %50, %6*/
		Write4Blocks_WriteOneBlockexit40_133 = ($signed(Write4Blocks_WriteOneBlockexit_50_reg) < $signed(Write4Blocks_0_6_reg));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_WriteOneBlockexit40_133_reg <= 0;
	/* Write4Blocks: %WriteOneBlock.exit40*/
	/*   %133 = icmp slt i32 %50, %6*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit40_43)) begin
		Write4Blocks_WriteOneBlockexit40_133_reg <= Write4Blocks_WriteOneBlockexit40_133;
		if (start == 1'b0 && ^(Write4Blocks_WriteOneBlockexit40_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlockexit40_133_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %WriteOneBlock.exit40*/
	/*   %or.cond72 = and i1 %94, %133*/
		Write4Blocks_WriteOneBlockexit40_orcond72 = (Write4Blocks_WriteOneBlockexit60_94_reg & Write4Blocks_WriteOneBlockexit40_133);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_WriteOneBlockexit40_orcond72_reg <= 0;
	/* Write4Blocks: %WriteOneBlock.exit40*/
	/*   %or.cond72 = and i1 %94, %133*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit40_43)) begin
		Write4Blocks_WriteOneBlockexit40_orcond72_reg <= Write4Blocks_WriteOneBlockexit40_orcond72;
		if (start == 1'b0 && ^(Write4Blocks_WriteOneBlockexit40_orcond72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlockexit40_orcond72_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %134 = shl i32 %3, 3*/
		Write4Blocks_lrph8splitusi9_134 = (Write4Blocks_0_3_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_134_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %134 = shl i32 %3, 3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_134_reg <= Write4Blocks_lrph8splitusi9_134;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_134_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %135 = add i32 %134, 8*/
		Write4Blocks_lrph8splitusi9_135 = (Write4Blocks_lrph8splitusi9_134 + 32'd8);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_135_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %135 = add i32 %134, 8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_135_reg <= Write4Blocks_lrph8splitusi9_135;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_135_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %136 = sext i16 %5 to i32*/
		Write4Blocks_lrph8splitusi9_136 = $signed(Write4Blocks_0_5_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_136_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %136 = sext i16 %5 to i32*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_136_reg <= Write4Blocks_lrph8splitusi9_136;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_136_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %137 = sub i32 %135, %136*/
		Write4Blocks_lrph8splitusi9_137 = (Write4Blocks_lrph8splitusi9_135 - Write4Blocks_lrph8splitusi9_136);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_137_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %137 = sub i32 %135, %136*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_137_reg <= Write4Blocks_lrph8splitusi9_137;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_137_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %138 = or i32 %134, 7*/
		Write4Blocks_lrph8splitusi9_138 = (Write4Blocks_lrph8splitusi9_134 | 32'd7);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_138_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %138 = or i32 %134, 7*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_138_reg <= Write4Blocks_lrph8splitusi9_138;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_138_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %139 = add i32 %134, 15*/
		Write4Blocks_lrph8splitusi9_139 = (Write4Blocks_lrph8splitusi9_134 + 32'd15);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_139_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %139 = add i32 %134, 15*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_139_reg <= Write4Blocks_lrph8splitusi9_139;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_139_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %140 = icmp sgt i32 %139, %135*/
		Write4Blocks_lrph8splitusi9_140 = ($signed(Write4Blocks_lrph8splitusi9_139) > $signed(Write4Blocks_lrph8splitusi9_135));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_140_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %140 = icmp sgt i32 %139, %135*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_140_reg <= Write4Blocks_lrph8splitusi9_140;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_140_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %smax = select i1 %140, i32 %139, i32 %135*/
		Write4Blocks_lrph8splitusi9_smax = (Write4Blocks_lrph8splitusi9_140 ? Write4Blocks_lrph8splitusi9_139 : Write4Blocks_lrph8splitusi9_135);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_smax_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %smax = select i1 %140, i32 %139, i32 %135*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_smax_reg <= Write4Blocks_lrph8splitusi9_smax;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_smax) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_smax_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %141 = sub i32 %138, %smax*/
		Write4Blocks_lrph8splitusi9_141 = (Write4Blocks_lrph8splitusi9_138_reg - Write4Blocks_lrph8splitusi9_smax_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_141_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %141 = sub i32 %138, %smax*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_45)) begin
		Write4Blocks_lrph8splitusi9_141_reg <= Write4Blocks_lrph8splitusi9_141;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_141_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %142 = icmp ugt i32 %137, %141*/
		Write4Blocks_lrph8splitusi9_142 = (Write4Blocks_lrph8splitusi9_137_reg > Write4Blocks_lrph8splitusi9_141);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_142_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %142 = icmp ugt i32 %137, %141*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_45)) begin
		Write4Blocks_lrph8splitusi9_142_reg <= Write4Blocks_lrph8splitusi9_142;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_142_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %umax = select i1 %142, i32 %137, i32 %141*/
		Write4Blocks_lrph8splitusi9_umax = (Write4Blocks_lrph8splitusi9_142 ? Write4Blocks_lrph8splitusi9_137_reg : Write4Blocks_lrph8splitusi9_141);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_umax_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %umax = select i1 %142, i32 %137, i32 %141*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_45)) begin
		Write4Blocks_lrph8splitusi9_umax_reg <= Write4Blocks_lrph8splitusi9_umax;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_umax) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_umax_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %143 = sub i32 0, %umax*/
		Write4Blocks_lrph8splitusi9_143 = (32'd0 - Write4Blocks_lrph8splitusi9_umax_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_143_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %143 = sub i32 0, %umax*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_46)) begin
		Write4Blocks_lrph8splitusi9_143_reg <= Write4Blocks_lrph8splitusi9_143;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_143_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %144 = shl i32 %1, 3*/
		Write4Blocks_lrph8splitusi9_144 = (Write4Blocks_0_1_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_144_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %144 = shl i32 %1, 3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_144_reg <= Write4Blocks_lrph8splitusi9_144;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_144_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %145 = add i32 %144, 16*/
		Write4Blocks_lrph8splitusi9_145 = (Write4Blocks_lrph8splitusi9_144 + 32'd16);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_145_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %145 = add i32 %144, 16*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_145_reg <= Write4Blocks_lrph8splitusi9_145;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_145_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %146 = add i32 %144, 9*/
		Write4Blocks_lrph8splitusi9_146 = (Write4Blocks_lrph8splitusi9_144 + 32'd9);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_146_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %146 = add i32 %144, 9*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_146_reg <= Write4Blocks_lrph8splitusi9_146;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_146_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %147 = icmp sgt i32 %145, %146*/
		Write4Blocks_lrph8splitusi9_147 = ($signed(Write4Blocks_lrph8splitusi9_145) > $signed(Write4Blocks_lrph8splitusi9_146));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_147_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %147 = icmp sgt i32 %145, %146*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_147_reg <= Write4Blocks_lrph8splitusi9_147;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_147_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %smax3 = select i1 %147, i32 %145, i32 %146*/
		Write4Blocks_lrph8splitusi9_smax3 = (Write4Blocks_lrph8splitusi9_147 ? Write4Blocks_lrph8splitusi9_145 : Write4Blocks_lrph8splitusi9_146);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_smax3_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %smax3 = select i1 %147, i32 %145, i32 %146*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_smax3_reg <= Write4Blocks_lrph8splitusi9_smax3;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_smax3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_smax3_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %148 = sub i32 %.pre-phi, %smax3*/
		Write4Blocks_lrph8splitusi9_148 = (Write4Blocks_WriteOneBlockexit60_prephi_reg - Write4Blocks_lrph8splitusi9_smax3_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_148_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %148 = sub i32 %.pre-phi, %smax3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_45)) begin
		Write4Blocks_lrph8splitusi9_148_reg <= Write4Blocks_lrph8splitusi9_148;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_148_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %149 = sext i16 %7 to i32*/
		Write4Blocks_lrph8splitusi9_149 = $signed(Write4Blocks_0_7_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_149_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %149 = sext i16 %7 to i32*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_149_reg <= Write4Blocks_lrph8splitusi9_149;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_149_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %150 = sub i32 %.pre-phi, %149*/
		Write4Blocks_lrph8splitusi9_150 = (Write4Blocks_WriteOneBlockexit60_prephi_reg - Write4Blocks_lrph8splitusi9_149);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_150_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %150 = sub i32 %.pre-phi, %149*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_150_reg <= Write4Blocks_lrph8splitusi9_150;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_150_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %151 = icmp ugt i32 %148, %150*/
		Write4Blocks_lrph8splitusi9_151 = (Write4Blocks_lrph8splitusi9_148 > Write4Blocks_lrph8splitusi9_150_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_151_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %151 = icmp ugt i32 %148, %150*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_45)) begin
		Write4Blocks_lrph8splitusi9_151_reg <= Write4Blocks_lrph8splitusi9_151;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_151_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %umax4 = select i1 %151, i32 %148, i32 %150*/
		Write4Blocks_lrph8splitusi9_umax4 = (Write4Blocks_lrph8splitusi9_151 ? Write4Blocks_lrph8splitusi9_148 : Write4Blocks_lrph8splitusi9_150_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_umax4_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %umax4 = select i1 %151, i32 %148, i32 %150*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_45)) begin
		Write4Blocks_lrph8splitusi9_umax4_reg <= Write4Blocks_lrph8splitusi9_umax4;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_umax4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_umax4_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %152 = sub i32 0, %umax4*/
		Write4Blocks_lrph8splitusi9_152 = (32'd0 - Write4Blocks_lrph8splitusi9_umax4_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_152_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %152 = sub i32 0, %umax4*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_46)) begin
		Write4Blocks_lrph8splitusi9_152_reg <= Write4Blocks_lrph8splitusi9_152;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_152_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %153 = sext i16 %5 to i32*/
		Write4Blocks_lrph8splitusi9_153 = $signed(Write4Blocks_0_5_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_153_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %153 = sext i16 %5 to i32*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_153_reg <= Write4Blocks_lrph8splitusi9_153;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_153_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %154 = mul i32 %.pre-phi, %153*/
		Write4Blocks_lrph8splitusi9_154 = (Write4Blocks_WriteOneBlockexit60_prephi_reg * Write4Blocks_lrph8splitusi9_153);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_154_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %154 = mul i32 %.pre-phi, %153*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_154_reg <= Write4Blocks_lrph8splitusi9_154;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_154_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %155 = shl i32 %3, 3*/
		Write4Blocks_lrph8splitusi9_155 = (Write4Blocks_0_3_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_155_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %155 = shl i32 %3, 3*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_155_reg <= Write4Blocks_lrph8splitusi9_155;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_155_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %156 = add i32 %154, %155*/
		Write4Blocks_lrph8splitusi9_156 = (Write4Blocks_lrph8splitusi9_154 + Write4Blocks_lrph8splitusi9_155);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_156_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %156 = add i32 %154, %155*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_156_reg <= Write4Blocks_lrph8splitusi9_156;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_156_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %157 = add i32 %156, 8*/
		Write4Blocks_lrph8splitusi9_157 = (Write4Blocks_lrph8splitusi9_156_reg + 32'd8);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_157_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %157 = add i32 %156, 8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_45)) begin
		Write4Blocks_lrph8splitusi9_157_reg <= Write4Blocks_lrph8splitusi9_157;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_157_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %158 = add i32 %155, 8*/
		Write4Blocks_lrph8splitusi9_158 = (Write4Blocks_lrph8splitusi9_155 + 32'd8);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_158_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %158 = add i32 %155, 8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_158_reg <= Write4Blocks_lrph8splitusi9_158;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_158_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %159 = sub i32 %158, %153*/
		Write4Blocks_lrph8splitusi9_159 = (Write4Blocks_lrph8splitusi9_158 - Write4Blocks_lrph8splitusi9_153);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_159_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %159 = sub i32 %158, %153*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_159_reg <= Write4Blocks_lrph8splitusi9_159;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_159_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %160 = or i32 %155, 7*/
		Write4Blocks_lrph8splitusi9_160 = (Write4Blocks_lrph8splitusi9_155 | 32'd7);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_160_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %160 = or i32 %155, 7*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_160_reg <= Write4Blocks_lrph8splitusi9_160;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_160_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %161 = add i32 %155, 15*/
		Write4Blocks_lrph8splitusi9_161 = (Write4Blocks_lrph8splitusi9_155 + 32'd15);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_161_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %161 = add i32 %155, 15*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_161_reg <= Write4Blocks_lrph8splitusi9_161;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_161_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %162 = icmp sgt i32 %161, %158*/
		Write4Blocks_lrph8splitusi9_162 = ($signed(Write4Blocks_lrph8splitusi9_161) > $signed(Write4Blocks_lrph8splitusi9_158));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_162_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %162 = icmp sgt i32 %161, %158*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_162_reg <= Write4Blocks_lrph8splitusi9_162;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_162_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %smax7 = select i1 %162, i32 %161, i32 %158*/
		Write4Blocks_lrph8splitusi9_smax7 = (Write4Blocks_lrph8splitusi9_162 ? Write4Blocks_lrph8splitusi9_161 : Write4Blocks_lrph8splitusi9_158);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_smax7_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %smax7 = select i1 %162, i32 %161, i32 %158*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_44)) begin
		Write4Blocks_lrph8splitusi9_smax7_reg <= Write4Blocks_lrph8splitusi9_smax7;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_smax7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_smax7_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %163 = sub i32 %160, %smax7*/
		Write4Blocks_lrph8splitusi9_163 = (Write4Blocks_lrph8splitusi9_160_reg - Write4Blocks_lrph8splitusi9_smax7_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_163_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %163 = sub i32 %160, %smax7*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_45)) begin
		Write4Blocks_lrph8splitusi9_163_reg <= Write4Blocks_lrph8splitusi9_163;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_163_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %164 = icmp ugt i32 %159, %163*/
		Write4Blocks_lrph8splitusi9_164 = (Write4Blocks_lrph8splitusi9_159_reg > Write4Blocks_lrph8splitusi9_163);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_164_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %164 = icmp ugt i32 %159, %163*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_45)) begin
		Write4Blocks_lrph8splitusi9_164_reg <= Write4Blocks_lrph8splitusi9_164;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_164_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %umax8 = select i1 %164, i32 %159, i32 %163*/
		Write4Blocks_lrph8splitusi9_umax8 = (Write4Blocks_lrph8splitusi9_164 ? Write4Blocks_lrph8splitusi9_159_reg : Write4Blocks_lrph8splitusi9_163);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_umax8_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %umax8 = select i1 %164, i32 %159, i32 %163*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_45)) begin
		Write4Blocks_lrph8splitusi9_umax8_reg <= Write4Blocks_lrph8splitusi9_umax8;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_umax8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_umax8_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %165 = sub i32 0, %umax8*/
		Write4Blocks_lrph8splitusi9_165 = (32'd0 - Write4Blocks_lrph8splitusi9_umax8_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrph8splitusi9_165_reg <= 0;
	/* Write4Blocks: %.lr.ph8.split.us.i9*/
	/*   %165 = sub i32 0, %umax8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_46)) begin
		Write4Blocks_lrph8splitusi9_165_reg <= Write4Blocks_lrph8splitusi9_165;
		if (start == 1'b0 && ^(Write4Blocks_lrph8splitusi9_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrph8splitusi9_165_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %166*/
	/*   %indvar.next2 = add i32 %indvar1, 1*/
		Write4Blocks_166_indvarnext2 = (Write4Blocks_lrphusi17_indvar1_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_166_indvarnext2_reg <= 0;
	/* Write4Blocks: %166*/
	/*   %indvar.next2 = add i32 %indvar1, 1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__166_47)) begin
		Write4Blocks_166_indvarnext2_reg <= Write4Blocks_166_indvarnext2;
		if (start == 1'b0 && ^(Write4Blocks_166_indvarnext2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_166_indvarnext2_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %166*/
	/*   %exitcond5 = icmp eq i32 %indvar.next2, %152*/
		Write4Blocks_166_exitcond5 = (Write4Blocks_166_indvarnext2 == Write4Blocks_lrph8splitusi9_152_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_166_exitcond5_reg <= 0;
	/* Write4Blocks: %166*/
	/*   %exitcond5 = icmp eq i32 %indvar.next2, %152*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__166_47)) begin
		Write4Blocks_166_exitcond5_reg <= Write4Blocks_166_exitcond5;
		if (start == 1'b0 && ^(Write4Blocks_166_exitcond5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_166_exitcond5_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %167*/
	/*   %indvar = phi i32 [ 0, %.lr.ph.us.i17 ], [ %indvar.next, %167 ]*/
	if ((((cur_state == LEGUP_F_Write4Blocks_BB__167_52) & (memory_controller_waitrequest == 1'd0)) & (Write4Blocks_167_exitcond_reg == 1'd0))) begin
		Write4Blocks_167_indvar = Write4Blocks_167_indvarnext_reg;
	end
	/* Write4Blocks: %167*/
	/*   %indvar = phi i32 [ 0, %.lr.ph.us.i17 ], [ %indvar.next, %167 ]*/
	else /* if (((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi17_53) & (memory_controller_waitrequest == 1'd0))) */ begin
		Write4Blocks_167_indvar = 32'd0;
	end
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_167_indvar_reg <= 0;
	/* Write4Blocks: %167*/
	/*   %indvar = phi i32 [ 0, %.lr.ph.us.i17 ], [ %indvar.next, %167 ]*/
	else if((((cur_state == LEGUP_F_Write4Blocks_BB__167_52) & (memory_controller_waitrequest == 1'd0)) & (Write4Blocks_167_exitcond_reg == 1'd0))) begin
		Write4Blocks_167_indvar_reg <= Write4Blocks_167_indvar;
		if (start == 1'b0 && ^(Write4Blocks_167_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_167_indvar_reg"); $finish; end
	end
	/* Write4Blocks: %167*/
	/*   %indvar = phi i32 [ 0, %.lr.ph.us.i17 ], [ %indvar.next, %167 ]*/
	else if(((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi17_53) & (memory_controller_waitrequest == 1'd0))) begin
		Write4Blocks_167_indvar_reg <= Write4Blocks_167_indvar;
		if (start == 1'b0 && ^(Write4Blocks_167_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_167_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %167*/
	/*   %168 = add i32 %173, %indvar*/
		Write4Blocks_167_168 = (Write4Blocks_lrphusi17_173_reg + Write4Blocks_167_indvar_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_167_168_reg <= 0;
	/* Write4Blocks: %167*/
	/*   %168 = add i32 %173, %indvar*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__167_48)) begin
		Write4Blocks_167_168_reg <= Write4Blocks_167_168;
		if (start == 1'b0 && ^(Write4Blocks_167_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_167_168_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %167*/
	/*   %scevgep = getelementptr i8* %p_out_buf, i32 %168*/
		Write4Blocks_167_scevgep = (arg_p_out_buf + (1 * Write4Blocks_167_168_reg));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_167_scevgep_reg <= 0;
	/* Write4Blocks: %167*/
	/*   %scevgep = getelementptr i8* %p_out_buf, i32 %168*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__167_49)) begin
		Write4Blocks_167_scevgep_reg <= Write4Blocks_167_scevgep;
		if (start == 1'b0 && ^(Write4Blocks_167_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_167_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %167*/
	/*   %169 = add i32 %174, %indvar*/
		Write4Blocks_167_169 = (Write4Blocks_lrphusi17_174_reg + Write4Blocks_167_indvar_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_167_169_reg <= 0;
	/* Write4Blocks: %167*/
	/*   %169 = add i32 %174, %indvar*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__167_48)) begin
		Write4Blocks_167_169_reg <= Write4Blocks_167_169;
		if (start == 1'b0 && ^(Write4Blocks_167_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_167_169_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %167*/
	/*   %.14.us.i12 = getelementptr i32* %store4, i32 %169*/
		Write4Blocks_167_14usi12 = (arg_store4 + (4 * Write4Blocks_167_169_reg));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_167_14usi12_reg <= 0;
	/* Write4Blocks: %167*/
	/*   %.14.us.i12 = getelementptr i32* %store4, i32 %169*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__167_49)) begin
		Write4Blocks_167_14usi12_reg <= Write4Blocks_167_14usi12;
		if (start == 1'b0 && ^(Write4Blocks_167_14usi12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_167_14usi12_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %167*/
	/*   %170 = load i32* %.14.us.i12, align 4, !tbaa !1*/
		Write4Blocks_167_170 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_167_170_reg <= 0;
	/* Write4Blocks: %167*/
	/*   %170 = load i32* %.14.us.i12, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__167_51)) begin
		Write4Blocks_167_170_reg <= Write4Blocks_167_170;
		if (start == 1'b0 && ^(Write4Blocks_167_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_167_170_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %167*/
	/*   %171 = trunc i32 %170 to i8*/
		Write4Blocks_167_171 = Write4Blocks_167_170[7:0];
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_167_171_reg <= 0;
	/* Write4Blocks: %167*/
	/*   %171 = trunc i32 %170 to i8*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__167_51)) begin
		Write4Blocks_167_171_reg <= Write4Blocks_167_171;
		if (start == 1'b0 && ^(Write4Blocks_167_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_167_171_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %167*/
	/*   %indvar.next = add i32 %indvar, 1*/
		Write4Blocks_167_indvarnext = (Write4Blocks_167_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_167_indvarnext_reg <= 0;
	/* Write4Blocks: %167*/
	/*   %indvar.next = add i32 %indvar, 1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__167_48)) begin
		Write4Blocks_167_indvarnext_reg <= Write4Blocks_167_indvarnext;
		if (start == 1'b0 && ^(Write4Blocks_167_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_167_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %167*/
	/*   %exitcond = icmp eq i32 %indvar.next, %143*/
		Write4Blocks_167_exitcond = (Write4Blocks_167_indvarnext == Write4Blocks_lrph8splitusi9_143_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_167_exitcond_reg <= 0;
	/* Write4Blocks: %167*/
	/*   %exitcond = icmp eq i32 %indvar.next, %143*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__167_48)) begin
		Write4Blocks_167_exitcond_reg <= Write4Blocks_167_exitcond;
		if (start == 1'b0 && ^(Write4Blocks_167_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_167_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph.us.i17*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %166 ], [ 0, %.lr.ph8.split.us.i9 ]*/
	if (((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_46) & (memory_controller_waitrequest == 1'd0))) begin
		Write4Blocks_lrphusi17_indvar1 = 32'd0;
	end
	/* Write4Blocks: %.lr.ph.us.i17*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %166 ], [ 0, %.lr.ph8.split.us.i9 ]*/
	else /* if ((((cur_state == LEGUP_F_Write4Blocks_BB__166_47) & (memory_controller_waitrequest == 1'd0)) & (Write4Blocks_166_exitcond5 == 1'd0))) */ begin
		Write4Blocks_lrphusi17_indvar1 = Write4Blocks_166_indvarnext2;
	end
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrphusi17_indvar1_reg <= 0;
	/* Write4Blocks: %.lr.ph.us.i17*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %166 ], [ 0, %.lr.ph8.split.us.i9 ]*/
	else if(((cur_state == LEGUP_F_Write4Blocks_BB_lrph8splitusi9_46) & (memory_controller_waitrequest == 1'd0))) begin
		Write4Blocks_lrphusi17_indvar1_reg <= Write4Blocks_lrphusi17_indvar1;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi17_indvar1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi17_indvar1_reg"); $finish; end
	end
	/* Write4Blocks: %.lr.ph.us.i17*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %166 ], [ 0, %.lr.ph8.split.us.i9 ]*/
	else if((((cur_state == LEGUP_F_Write4Blocks_BB__166_47) & (memory_controller_waitrequest == 1'd0)) & (Write4Blocks_166_exitcond5 == 1'd0))) begin
		Write4Blocks_lrphusi17_indvar1_reg <= Write4Blocks_lrphusi17_indvar1;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi17_indvar1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi17_indvar1_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph.us.i17*/
	/*   %172 = mul i32 %153, %indvar1*/
		Write4Blocks_lrphusi17_172 = (Write4Blocks_lrph8splitusi9_153_reg * Write4Blocks_lrphusi17_indvar1_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrphusi17_172_reg <= 0;
	/* Write4Blocks: %.lr.ph.us.i17*/
	/*   %172 = mul i32 %153, %indvar1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi17_53)) begin
		Write4Blocks_lrphusi17_172_reg <= Write4Blocks_lrphusi17_172;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi17_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi17_172_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph.us.i17*/
	/*   %173 = add i32 %157, %172*/
		Write4Blocks_lrphusi17_173 = (Write4Blocks_lrph8splitusi9_157_reg + Write4Blocks_lrphusi17_172);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrphusi17_173_reg <= 0;
	/* Write4Blocks: %.lr.ph.us.i17*/
	/*   %173 = add i32 %157, %172*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi17_53)) begin
		Write4Blocks_lrphusi17_173_reg <= Write4Blocks_lrphusi17_173;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi17_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi17_173_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %.lr.ph.us.i17*/
	/*   %174 = mul i32 %indvar1, %165*/
		Write4Blocks_lrphusi17_174 = (Write4Blocks_lrphusi17_indvar1_reg * Write4Blocks_lrph8splitusi9_165_reg);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_lrphusi17_174_reg <= 0;
	/* Write4Blocks: %.lr.ph.us.i17*/
	/*   %174 = mul i32 %indvar1, %165*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_lrphusi17_53)) begin
		Write4Blocks_lrphusi17_174_reg <= Write4Blocks_lrphusi17_174;
		if (start == 1'b0 && ^(Write4Blocks_lrphusi17_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_lrphusi17_174_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %175 = load i32* %p_out_hpos, align 4, !tbaa !1*/
		Write4Blocks_WriteOneBlockexit20_175 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_WriteOneBlockexit20_175_reg <= 0;
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %175 = load i32* %p_out_hpos, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_57)) begin
		Write4Blocks_WriteOneBlockexit20_175_reg <= Write4Blocks_WriteOneBlockexit20_175;
		if (start == 1'b0 && ^(Write4Blocks_WriteOneBlockexit20_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlockexit20_175_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %176 = add nsw i32 %175, 2*/
		Write4Blocks_WriteOneBlockexit20_176 = (Write4Blocks_WriteOneBlockexit20_175 + 32'd2);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_WriteOneBlockexit20_176_reg <= 0;
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %176 = add nsw i32 %175, 2*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_57)) begin
		Write4Blocks_WriteOneBlockexit20_176_reg <= Write4Blocks_WriteOneBlockexit20_176;
		if (start == 1'b0 && ^(Write4Blocks_WriteOneBlockexit20_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlockexit20_176_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %177 = load i32* %p_out_vpos, align 4, !tbaa !1*/
		Write4Blocks_WriteOneBlockexit20_177 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_WriteOneBlockexit20_177_reg <= 0;
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %177 = load i32* %p_out_vpos, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_60)) begin
		Write4Blocks_WriteOneBlockexit20_177_reg <= Write4Blocks_WriteOneBlockexit20_177;
		if (start == 1'b0 && ^(Write4Blocks_WriteOneBlockexit20_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlockexit20_177_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %178 = add nsw i32 %177, 2*/
		Write4Blocks_WriteOneBlockexit20_178 = (Write4Blocks_WriteOneBlockexit20_177 + 32'd2);
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_WriteOneBlockexit20_178_reg <= 0;
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %178 = add nsw i32 %177, 2*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_60)) begin
		Write4Blocks_WriteOneBlockexit20_178_reg <= Write4Blocks_WriteOneBlockexit20_178;
		if (start == 1'b0 && ^(Write4Blocks_WriteOneBlockexit20_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlockexit20_178_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %179 = load i32* %p_out_hpos, align 4, !tbaa !1*/
		Write4Blocks_WriteOneBlockexit20_179 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_WriteOneBlockexit20_179_reg <= 0;
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %179 = load i32* %p_out_hpos, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_63)) begin
		Write4Blocks_WriteOneBlockexit20_179_reg <= Write4Blocks_WriteOneBlockexit20_179;
		if (start == 1'b0 && ^(Write4Blocks_WriteOneBlockexit20_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlockexit20_179_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %180 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
		Write4Blocks_WriteOneBlockexit20_180 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_WriteOneBlockexit20_180_reg <= 0;
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %180 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_63)) begin
		Write4Blocks_WriteOneBlockexit20_180_reg <= Write4Blocks_WriteOneBlockexit20_180;
		if (start == 1'b0 && ^(Write4Blocks_WriteOneBlockexit20_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlockexit20_180_reg"); $finish; end
	end
end
always @(*) begin
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %181 = icmp slt i32 %179, %180*/
		Write4Blocks_WriteOneBlockexit20_181 = ($signed(Write4Blocks_WriteOneBlockexit20_179) < $signed(Write4Blocks_WriteOneBlockexit20_180));
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_WriteOneBlockexit20_181_reg <= 0;
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %181 = icmp slt i32 %179, %180*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_63)) begin
		Write4Blocks_WriteOneBlockexit20_181_reg <= Write4Blocks_WriteOneBlockexit20_181;
		if (start == 1'b0 && ^(Write4Blocks_WriteOneBlockexit20_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlockexit20_181_reg"); $finish; end
	end
end


//voter


//port drive
always @(posedge clk) begin
	if (reset)
		finish <= 0;
	else if((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* Write4Blocks: %184*/
	/*   ret void*/
	else if((cur_state == LEGUP_F_Write4Blocks_BB__184_68)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* Write4Blocks: %0*/
	/*   %1 = load i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Write4Blocks: %0*/
	/*   %5 = load i16* @p_jinfo_image_width, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Write4Blocks: %42*/
	/*   %45 = load i32* %.14.us.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__42_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Write4Blocks: %42*/
	/*   store i8 %46, i8* %scevgep50, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__42_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Write4Blocks: %86*/
	/*   %89 = load i32* %.14.us.i52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__86_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Write4Blocks: %86*/
	/*   store i8 %90, i8* %scevgep34, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__86_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %175 = load i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_55)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   store i32 %176, i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_57)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %179 = load i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_61)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Write4Blocks: %182*/
	/*   store i32 %177, i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__182_64)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* Write4Blocks: %0*/
	/*   %1 = load i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__0_1)) begin
		memory_controller_address_a = arg_p_out_vpos;
	end
	/* Write4Blocks: %0*/
	/*   %5 = load i16* @p_jinfo_image_width, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__0_2)) begin
		memory_controller_address_a = `TAG_g_p_jinfo_image_width_a;
	end
	/* Write4Blocks: %42*/
	/*   %45 = load i32* %.14.us.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__42_10)) begin
		memory_controller_address_a = Write4Blocks_42_14usi;
	end
	/* Write4Blocks: %42*/
	/*   store i8 %46, i8* %scevgep50, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__42_12)) begin
		memory_controller_address_a = Write4Blocks_42_scevgep50_reg;
	end
	/* Write4Blocks: %86*/
	/*   %89 = load i32* %.14.us.i52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__86_25)) begin
		memory_controller_address_a = Write4Blocks_86_14usi52;
	end
	/* Write4Blocks: %86*/
	/*   store i8 %90, i8* %scevgep34, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__86_27)) begin
		memory_controller_address_a = Write4Blocks_86_scevgep34_reg;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %175 = load i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_55)) begin
		memory_controller_address_a = arg_p_out_hpos;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   store i32 %176, i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_57)) begin
		memory_controller_address_a = arg_p_out_hpos;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %179 = load i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_61)) begin
		memory_controller_address_a = arg_p_out_hpos;
	end
	/* Write4Blocks: %182*/
	/*   store i32 %177, i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__182_64)) begin
		memory_controller_address_a = arg_p_out_vpos;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Write4Blocks: %0*/
	/*   %1 = load i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Write4Blocks: %0*/
	/*   %5 = load i16* @p_jinfo_image_width, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Write4Blocks: %42*/
	/*   %45 = load i32* %.14.us.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__42_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Write4Blocks: %42*/
	/*   store i8 %46, i8* %scevgep50, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__42_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Write4Blocks: %86*/
	/*   %89 = load i32* %.14.us.i52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__86_25)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Write4Blocks: %86*/
	/*   store i8 %90, i8* %scevgep34, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__86_27)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %175 = load i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_55)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   store i32 %176, i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_57)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %179 = load i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_61)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Write4Blocks: %182*/
	/*   store i32 %177, i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__182_64)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* Write4Blocks: %42*/
	/*   store i8 %46, i8* %scevgep50, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__42_12)) begin
		memory_controller_in_a = Write4Blocks_42_46;
	end
	/* Write4Blocks: %86*/
	/*   store i8 %90, i8* %scevgep34, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__86_27)) begin
		memory_controller_in_a = Write4Blocks_86_90;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   store i32 %176, i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_57)) begin
		memory_controller_in_a = Write4Blocks_WriteOneBlockexit20_176;
	end
	/* Write4Blocks: %182*/
	/*   store i32 %177, i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__182_64)) begin
		memory_controller_in_a = Write4Blocks_WriteOneBlockexit20_177_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* Write4Blocks: %0*/
	/*   %1 = load i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Write4Blocks: %0*/
	/*   %5 = load i16* @p_jinfo_image_width, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__0_2)) begin
		memory_controller_size_a = 2'd1;
	end
	/* Write4Blocks: %42*/
	/*   %45 = load i32* %.14.us.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__42_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Write4Blocks: %42*/
	/*   store i8 %46, i8* %scevgep50, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__42_12)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Write4Blocks: %86*/
	/*   %89 = load i32* %.14.us.i52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__86_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Write4Blocks: %86*/
	/*   store i8 %90, i8* %scevgep34, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__86_27)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %175 = load i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_55)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   store i32 %176, i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_57)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %179 = load i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_61)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Write4Blocks: %182*/
	/*   store i32 %177, i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__182_64)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* Write4Blocks: %0*/
	/*   %3 = load i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Write4Blocks: %0*/
	/*   %7 = load i16* @p_jinfo_image_height, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Write4Blocks: %125*/
	/*   %128 = load i32* %.14.us.i32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__125_37)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Write4Blocks: %125*/
	/*   store i8 %129, i8* %scevgep18, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__125_39)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Write4Blocks: %167*/
	/*   %170 = load i32* %.14.us.i12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__167_49)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Write4Blocks: %167*/
	/*   store i8 %171, i8* %scevgep, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__167_51)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %177 = load i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_58)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   store i32 %178, i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_60)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %180 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_61)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Write4Blocks: %183*/
	/*   store i32 0, i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__183_66)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* Write4Blocks: %0*/
	/*   %3 = load i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__0_1)) begin
		memory_controller_address_b = arg_p_out_hpos;
	end
	/* Write4Blocks: %0*/
	/*   %7 = load i16* @p_jinfo_image_height, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__0_2)) begin
		memory_controller_address_b = `TAG_g_p_jinfo_image_height_a;
	end
	/* Write4Blocks: %125*/
	/*   %128 = load i32* %.14.us.i32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__125_37)) begin
		memory_controller_address_b = Write4Blocks_125_14usi32;
	end
	/* Write4Blocks: %125*/
	/*   store i8 %129, i8* %scevgep18, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__125_39)) begin
		memory_controller_address_b = Write4Blocks_125_scevgep18_reg;
	end
	/* Write4Blocks: %167*/
	/*   %170 = load i32* %.14.us.i12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__167_49)) begin
		memory_controller_address_b = Write4Blocks_167_14usi12;
	end
	/* Write4Blocks: %167*/
	/*   store i8 %171, i8* %scevgep, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__167_51)) begin
		memory_controller_address_b = Write4Blocks_167_scevgep_reg;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %177 = load i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_58)) begin
		memory_controller_address_b = arg_p_out_vpos;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   store i32 %178, i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_60)) begin
		memory_controller_address_b = arg_p_out_vpos;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %180 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_61)) begin
		memory_controller_address_b = `TAG_g_p_jinfo_MCUWidth_a;
	end
	/* Write4Blocks: %183*/
	/*   store i32 0, i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__183_66)) begin
		memory_controller_address_b = arg_p_out_hpos;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Write4Blocks: %0*/
	/*   %3 = load i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Write4Blocks: %0*/
	/*   %7 = load i16* @p_jinfo_image_height, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Write4Blocks: %125*/
	/*   %128 = load i32* %.14.us.i32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__125_37)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Write4Blocks: %125*/
	/*   store i8 %129, i8* %scevgep18, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__125_39)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Write4Blocks: %167*/
	/*   %170 = load i32* %.14.us.i12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__167_49)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Write4Blocks: %167*/
	/*   store i8 %171, i8* %scevgep, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__167_51)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %177 = load i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_58)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   store i32 %178, i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_60)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %180 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_61)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Write4Blocks: %183*/
	/*   store i32 0, i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__183_66)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* Write4Blocks: %125*/
	/*   store i8 %129, i8* %scevgep18, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__125_39)) begin
		memory_controller_in_b = Write4Blocks_125_129;
	end
	/* Write4Blocks: %167*/
	/*   store i8 %171, i8* %scevgep, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__167_51)) begin
		memory_controller_in_b = Write4Blocks_167_171;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   store i32 %178, i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_60)) begin
		memory_controller_in_b = Write4Blocks_WriteOneBlockexit20_178;
	end
	/* Write4Blocks: %183*/
	/*   store i32 0, i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__183_66)) begin
		memory_controller_in_b = 32'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* Write4Blocks: %0*/
	/*   %3 = load i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Write4Blocks: %0*/
	/*   %7 = load i16* @p_jinfo_image_height, align 2, !tbaa !5*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__0_2)) begin
		memory_controller_size_b = 2'd1;
	end
	/* Write4Blocks: %125*/
	/*   %128 = load i32* %.14.us.i32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__125_37)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Write4Blocks: %125*/
	/*   store i8 %129, i8* %scevgep18, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__125_39)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Write4Blocks: %167*/
	/*   %170 = load i32* %.14.us.i12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__167_49)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Write4Blocks: %167*/
	/*   store i8 %171, i8* %scevgep, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__167_51)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %177 = load i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_58)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   store i32 %178, i32* %p_out_vpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_60)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Write4Blocks: %WriteOneBlock.exit20*/
	/*   %180 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB_WriteOneBlockexit20_61)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Write4Blocks: %183*/
	/*   store i32 0, i32* %p_out_hpos, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Write4Blocks_BB__183_66)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module buf_getv
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_n
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_buf_getv_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_buf_getv_BB__0_2 = 6'd2;
parameter [5:0] LEGUP_F_buf_getv_BB__0_3 = 6'd3;
parameter [5:0] LEGUP_F_buf_getv_BB_lrph_4 = 6'd4;
parameter [5:0] LEGUP_F_buf_getv_BB_lrph_5 = 6'd5;
parameter [5:0] LEGUP_F_buf_getv_BB_lrph_6 = 6'd6;
parameter [5:0] LEGUP_F_buf_getv_BB__9_7 = 6'd7;
parameter [5:0] LEGUP_F_buf_getv_BB__15_8 = 6'd8;
parameter [5:0] LEGUP_F_buf_getv_BB__15_9 = 6'd9;
parameter [5:0] LEGUP_F_buf_getv_BB__15_10 = 6'd10;
parameter [5:0] LEGUP_F_buf_getv_BB__15_11 = 6'd11;
parameter [5:0] LEGUP_F_buf_getv_BB__15_12 = 6'd12;
parameter [5:0] LEGUP_F_buf_getv_BB__15_13 = 6'd13;
parameter [5:0] LEGUP_F_buf_getv_BB__21_14 = 6'd14;
parameter [5:0] LEGUP_F_buf_getv_BB__21_15 = 6'd15;
parameter [5:0] LEGUP_F_buf_getv_BB__21_16 = 6'd16;
parameter [5:0] LEGUP_F_buf_getv_BB__21_17 = 6'd17;
parameter [5:0] LEGUP_F_buf_getv_BB__25_18 = 6'd18;
parameter [5:0] LEGUP_F_buf_getv_BB__27_19 = 6'd19;
parameter [5:0] LEGUP_F_buf_getv_BB_pgetcexit_20 = 6'd20;
parameter [5:0] LEGUP_F_buf_getv_BB_pgetcexit_21 = 6'd21;
parameter [5:0] LEGUP_F_buf_getv_BB__35_22 = 6'd22;
parameter [5:0] LEGUP_F_buf_getv_BB__35_23 = 6'd23;
parameter [5:0] LEGUP_F_buf_getv_BB__35_24 = 6'd24;
parameter [5:0] LEGUP_F_buf_getv_BB__35_25 = 6'd25;
parameter [5:0] LEGUP_F_buf_getv_BB__35_26 = 6'd26;
parameter [5:0] LEGUP_F_buf_getv_BB__35_27 = 6'd27;
parameter [5:0] LEGUP_F_buf_getv_BB__41_28 = 6'd28;
parameter [5:0] LEGUP_F_buf_getv_BB__41_29 = 6'd29;
parameter [5:0] LEGUP_F_buf_getv_BB__41_30 = 6'd30;
parameter [5:0] LEGUP_F_buf_getv_BB__41_31 = 6'd31;
parameter [5:0] LEGUP_F_buf_getv_BB__45_32 = 6'd32;
parameter [5:0] LEGUP_F_buf_getv_BB__45_33 = 6'd33;
parameter [5:0] LEGUP_F_buf_getv_BB__45_34 = 6'd34;
parameter [5:0] LEGUP_F_buf_getv_BB__47_35 = 6'd35;
parameter [5:0] LEGUP_F_buf_getv_BB_pgetcexit4_36 = 6'd36;
parameter [5:0] LEGUP_F_buf_getv_BB_pgetcexit4_37 = 6'd37;
parameter [5:0] LEGUP_F_buf_getv_BB__crit_edgeloopexit_38 = 6'd38;
parameter [5:0] LEGUP_F_buf_getv_BB__crit_edge_39 = 6'd39;
parameter [5:0] LEGUP_F_buf_getv_BB__53_40 = 6'd40;
parameter [5:0] LEGUP_F_buf_getv_BB__53_41 = 6'd41;
parameter [5:0] LEGUP_F_buf_getv_BB__53_42 = 6'd42;
parameter [5:0] LEGUP_F_buf_getv_BB__58_43 = 6'd43;
parameter [5:0] LEGUP_F_buf_getv_BB__58_44 = 6'd44;
parameter [5:0] LEGUP_F_buf_getv_BB__58_45 = 6'd45;
parameter [5:0] LEGUP_F_buf_getv_BB__66_46 = 6'd46;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
integer i;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_n;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] buf_getv_0_1;
reg [31:0] buf_getv_0_1_reg;
reg [31:0] buf_getv_0_2;
reg [31:0] buf_getv_0_2_reg;
reg [31:0] buf_getv_0_3;
reg [31:0] buf_getv_0_3_reg;
reg  buf_getv_0_4;
reg  buf_getv_0_4_reg;
reg [31:0] buf_getv_lrph_pre;
reg [31:0] buf_getv_lrph_pre_reg;
reg [31:0] buf_getv_lrph_5;
reg [31:0] buf_getv_lrph_5_reg;
reg [31:0] buf_getv_lrph_6;
reg [31:0] buf_getv_lrph_6_reg;
reg [31:0] buf_getv_lrph_7;
reg [31:0] buf_getv_lrph_7_reg;
reg [31:0] buf_getv_lrph_8;
reg [31:0] buf_getv_lrph_8_reg;
reg [31:0] buf_getv_9_indvar;
reg [31:0] buf_getv_9_indvar_reg;
reg [31:0] buf_getv_9_10;
reg [31:0] buf_getv_9_10_reg;
reg [31:0] buf_getv_9_11;
reg [31:0] buf_getv_9_11_reg;
reg [31:0] buf_getv_9_12;
reg [31:0] buf_getv_9_12_reg;
reg [31:0] buf_getv_9_13;
reg [31:0] buf_getv_9_13_reg;
reg [31:0] buf_getv_9_p06;
reg [31:0] buf_getv_9_p06_reg;
reg  buf_getv_9_14;
reg  buf_getv_9_14_reg;
reg [31:0] buf_getv_15_16;
reg [31:0] buf_getv_15_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_15_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_15_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_15_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_15_18_reg;
reg [7:0] buf_getv_15_19;
reg [7:0] buf_getv_15_19_reg;
reg  buf_getv_15_20;
reg  buf_getv_15_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_21_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_21_22_reg;
reg [7:0] buf_getv_21_23;
reg [7:0] buf_getv_21_23_reg;
reg  buf_getv_21_24;
reg  buf_getv_21_24_reg;
reg [7:0] buf_getv_27_temp0ini;
reg [7:0] buf_getv_27_temp0ini_reg;
reg [31:0] buf_getv_27_temp0i;
reg [31:0] buf_getv_27_temp0i_reg;
reg [31:0] buf_getv_pgetcexit_0i;
reg [31:0] buf_getv_pgetcexit_0i_reg;
reg [31:0] buf_getv_pgetcexit_28;
reg [31:0] buf_getv_pgetcexit_28_reg;
reg [31:0] buf_getv_pgetcexit_29;
reg [31:0] buf_getv_pgetcexit_29_reg;
reg [31:0] buf_getv_pgetcexit_30;
reg [31:0] buf_getv_pgetcexit_30_reg;
reg [31:0] buf_getv_pgetcexit_31;
reg [31:0] buf_getv_pgetcexit_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_pgetcexit_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_pgetcexit_32_reg;
reg [31:0] buf_getv_pgetcexit_33;
reg [31:0] buf_getv_pgetcexit_33_reg;
reg [31:0] buf_getv_pgetcexit_34;
reg [31:0] buf_getv_pgetcexit_34_reg;
reg [31:0] buf_getv_35_36;
reg [31:0] buf_getv_35_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_35_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_35_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_35_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_35_38_reg;
reg [7:0] buf_getv_35_39;
reg [7:0] buf_getv_35_39_reg;
reg  buf_getv_35_40;
reg  buf_getv_35_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_41_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_41_42_reg;
reg [7:0] buf_getv_41_43;
reg [7:0] buf_getv_41_43_reg;
reg  buf_getv_41_44;
reg  buf_getv_41_44_reg;
reg [31:0] buf_getv_45_pre10pre;
reg [31:0] buf_getv_45_pre10pre_reg;
reg [31:0] buf_getv_47_pre10;
reg [31:0] buf_getv_47_pre10_reg;
reg [7:0] buf_getv_47_temp0ini1;
reg [7:0] buf_getv_47_temp0ini1_reg;
reg [31:0] buf_getv_47_temp0i2;
reg [31:0] buf_getv_47_temp0i2_reg;
reg [31:0] buf_getv_pgetcexit4_48;
reg [31:0] buf_getv_pgetcexit4_48_reg;
reg [31:0] buf_getv_pgetcexit4_0i3;
reg [31:0] buf_getv_pgetcexit4_0i3_reg;
reg [31:0] buf_getv_pgetcexit4_49;
reg [31:0] buf_getv_pgetcexit4_49_reg;
reg [31:0] buf_getv_pgetcexit4_50;
reg [31:0] buf_getv_pgetcexit4_50_reg;
reg  buf_getv_pgetcexit4_51;
reg  buf_getv_pgetcexit4_51_reg;
reg [31:0] buf_getv_pgetcexit4_indvarnext;
reg [31:0] buf_getv_pgetcexit4_indvarnext_reg;
reg [31:0] buf_getv__crit_edge_p0lcssa;
reg [31:0] buf_getv__crit_edge_p0lcssa_reg;
reg  buf_getv__crit_edge_52;
reg  buf_getv__crit_edge_52_reg;
reg [31:0] buf_getv_53_54;
reg [31:0] buf_getv_53_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_53_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_53_55_reg;
reg [31:0] buf_getv_53_56;
reg [31:0] buf_getv_53_56_reg;
reg [31:0] buf_getv_53_57;
reg [31:0] buf_getv_53_57_reg;
reg [31:0] buf_getv_58_59;
reg [31:0] buf_getv_58_59_reg;
reg [31:0] buf_getv_58_60;
reg [31:0] buf_getv_58_60_reg;
reg [31:0] buf_getv_58_61;
reg [31:0] buf_getv_58_61_reg;
reg [31:0] buf_getv_58_62;
reg [31:0] buf_getv_58_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_58_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_58_63_reg;
reg [31:0] buf_getv_58_64;
reg [31:0] buf_getv_58_64_reg;
reg [31:0] buf_getv_58_65;
reg [31:0] buf_getv_58_65_reg;
reg [31:0] buf_getv_66_0;
reg [31:0] buf_getv_66_0_reg;
wire [12:0] hana_jpg_address_a;
wire  hana_jpg_write_enable_a;
wire [7:0] hana_jpg_in_a;
wire [7:0] hana_jpg_out_a;
wire [12:0] hana_jpg_address_b;
wire  hana_jpg_write_enable_b;
wire [7:0] hana_jpg_in_b;
wire [7:0] hana_jpg_out_b;
wire [13:0] hana_bmp_address_a;
wire  hana_bmp_write_enable_a;
wire [7:0] hana_bmp_in_a;
wire [7:0] hana_bmp_out_a;
wire [13:0] hana_bmp_address_b;
wire  hana_bmp_write_enable_b;
wire [7:0] hana_bmp_in_b;
wire [7:0] hana_bmp_out_b;
wire [3:0] out_unread_marker_address_a;
wire  out_unread_marker_write_enable_a;
wire [31:0] out_unread_marker_in_a;
wire [31:0] out_unread_marker_out_a;
wire [3:0] out_unread_marker_address_b;
wire  out_unread_marker_write_enable_b;
wire [31:0] out_unread_marker_in_b;
wire [31:0] out_unread_marker_out_b;
wire [1:0] out_index_get_sof_address_a;
wire  out_index_get_sof_write_enable_a;
wire [31:0] out_index_get_sof_in_a;
wire [31:0] out_index_get_sof_out_a;
wire [1:0] out_index_get_sof_address_b;
wire  out_index_get_sof_write_enable_b;
wire [31:0] out_index_get_sof_in_b;
wire [31:0] out_index_get_sof_out_b;
wire [1:0] out_v_samp_factor_get_sof_address_a;
wire  out_v_samp_factor_get_sof_write_enable_a;
wire [31:0] out_v_samp_factor_get_sof_in_a;
wire [31:0] out_v_samp_factor_get_sof_out_a;
wire [1:0] out_v_samp_factor_get_sof_address_b;
wire  out_v_samp_factor_get_sof_write_enable_b;
wire [31:0] out_v_samp_factor_get_sof_in_b;
wire [31:0] out_v_samp_factor_get_sof_out_b;
wire [1:0] out_comp_id_get_sos_address_a;
wire  out_comp_id_get_sos_write_enable_a;
wire [31:0] out_comp_id_get_sos_in_a;
wire [31:0] out_comp_id_get_sos_out_a;
wire [1:0] out_comp_id_get_sos_address_b;
wire  out_comp_id_get_sos_write_enable_b;
wire [31:0] out_comp_id_get_sos_in_b;
wire [31:0] out_comp_id_get_sos_out_b;
wire [1:0] out_ac_tbl_no_get_sos_address_a;
wire  out_ac_tbl_no_get_sos_write_enable_a;
wire [31:0] out_ac_tbl_no_get_sos_in_a;
wire [31:0] out_ac_tbl_no_get_sos_out_a;
wire [1:0] out_ac_tbl_no_get_sos_address_b;
wire  out_ac_tbl_no_get_sos_write_enable_b;
wire [31:0] out_ac_tbl_no_get_sos_in_b;
wire [31:0] out_ac_tbl_no_get_sos_out_b;
wire [1:0] out_length_get_dht_address_a;
wire  out_length_get_dht_write_enable_a;
wire [31:0] out_length_get_dht_in_a;
wire [31:0] out_length_get_dht_out_a;
wire [1:0] out_length_get_dht_address_b;
wire  out_length_get_dht_write_enable_b;
wire [31:0] out_length_get_dht_in_b;
wire [31:0] out_length_get_dht_out_b;
wire [1:0] out_index_get_dht_address_a;
wire  out_index_get_dht_write_enable_a;
wire [31:0] out_index_get_dht_in_a;
wire [31:0] out_index_get_dht_out_a;
wire [1:0] out_index_get_dht_address_b;
wire  out_index_get_dht_write_enable_b;
wire [31:0] out_index_get_dht_in_b;
wire [31:0] out_index_get_dht_out_b;
wire [1:0] out_count_get_dht_address_a;
wire  out_count_get_dht_write_enable_a;
wire [31:0] out_count_get_dht_in_a;
wire [31:0] out_count_get_dht_out_a;
wire [1:0] out_count_get_dht_address_b;
wire  out_count_get_dht_write_enable_b;
wire [31:0] out_count_get_dht_in_b;
wire [31:0] out_count_get_dht_out_b;
wire  out_length_get_dqt_address_a;
wire  out_length_get_dqt_write_enable_a;
wire [31:0] out_length_get_dqt_in_a;
wire [31:0] out_length_get_dqt_out_a;
wire  out_length_get_dqt_address_b;
wire  out_length_get_dqt_write_enable_b;
wire [31:0] out_length_get_dqt_in_b;
wire [31:0] out_length_get_dqt_out_b;
wire  out_prec_get_dht_address_a;
wire  out_prec_get_dht_write_enable_a;
wire [31:0] out_prec_get_dht_in_a;
wire [31:0] out_prec_get_dht_out_a;
wire  out_prec_get_dht_address_b;
wire  out_prec_get_dht_write_enable_b;
wire [31:0] out_prec_get_dht_in_b;
wire [31:0] out_prec_get_dht_out_b;
wire  out_num_get_dht_address_a;
wire  out_num_get_dht_write_enable_a;
wire [31:0] out_num_get_dht_in_a;
wire [31:0] out_num_get_dht_out_a;
wire  out_num_get_dht_address_b;
wire  out_num_get_dht_write_enable_b;
wire [31:0] out_num_get_dht_in_b;
wire [31:0] out_num_get_dht_out_b;
wire [5:0] izigzag_index_address_a;
wire  izigzag_index_write_enable_a;
wire [31:0] izigzag_index_in_a;
wire [31:0] izigzag_index_out_a;
wire [5:0] izigzag_index_address_b;
wire  izigzag_index_write_enable_b;
wire [31:0] izigzag_index_in_b;
wire [31:0] izigzag_index_out_b;
wire  main_result_address_a;
wire  main_result_write_enable_a;
wire [31:0] main_result_in_a;
wire [31:0] main_result_out_a;
wire  main_result_address_b;
wire  main_result_write_enable_b;
wire [31:0] main_result_in_b;
wire [31:0] main_result_out_b;
wire  p_jinfo_image_height_address_a;
wire  p_jinfo_image_height_write_enable_a;
wire [15:0] p_jinfo_image_height_in_a;
wire [15:0] p_jinfo_image_height_out_a;
wire  p_jinfo_image_height_address_b;
wire  p_jinfo_image_height_write_enable_b;
wire [15:0] p_jinfo_image_height_in_b;
wire [15:0] p_jinfo_image_height_out_b;
wire  p_jinfo_image_width_address_a;
wire  p_jinfo_image_width_write_enable_a;
wire [15:0] p_jinfo_image_width_in_a;
wire [15:0] p_jinfo_image_width_out_a;
wire  p_jinfo_image_width_address_b;
wire  p_jinfo_image_width_write_enable_b;
wire [15:0] p_jinfo_image_width_in_b;
wire [15:0] p_jinfo_image_width_out_b;
wire [1:0] p_jinfo_comps_info_index_address_a;
wire  p_jinfo_comps_info_index_write_enable_a;
wire [7:0] p_jinfo_comps_info_index_in_a;
wire [7:0] p_jinfo_comps_info_index_out_a;
wire [1:0] p_jinfo_comps_info_index_address_b;
wire  p_jinfo_comps_info_index_write_enable_b;
wire [7:0] p_jinfo_comps_info_index_in_b;
wire [7:0] p_jinfo_comps_info_index_out_b;
wire [1:0] p_jinfo_comps_info_id_address_a;
wire  p_jinfo_comps_info_id_write_enable_a;
wire [7:0] p_jinfo_comps_info_id_in_a;
wire [7:0] p_jinfo_comps_info_id_out_a;
wire [1:0] p_jinfo_comps_info_id_address_b;
wire  p_jinfo_comps_info_id_write_enable_b;
wire [7:0] p_jinfo_comps_info_id_in_b;
wire [7:0] p_jinfo_comps_info_id_out_b;
wire [1:0] p_jinfo_comps_info_h_samp_factor_address_a;
wire  p_jinfo_comps_info_h_samp_factor_write_enable_a;
wire [7:0] p_jinfo_comps_info_h_samp_factor_in_a;
wire [7:0] p_jinfo_comps_info_h_samp_factor_out_a;
wire [1:0] p_jinfo_comps_info_h_samp_factor_address_b;
wire  p_jinfo_comps_info_h_samp_factor_write_enable_b;
wire [7:0] p_jinfo_comps_info_h_samp_factor_in_b;
wire [7:0] p_jinfo_comps_info_h_samp_factor_out_b;
wire [1:0] p_jinfo_comps_info_v_samp_factor_address_a;
wire  p_jinfo_comps_info_v_samp_factor_write_enable_a;
wire [7:0] p_jinfo_comps_info_v_samp_factor_in_a;
wire [7:0] p_jinfo_comps_info_v_samp_factor_out_a;
wire [1:0] p_jinfo_comps_info_v_samp_factor_address_b;
wire  p_jinfo_comps_info_v_samp_factor_write_enable_b;
wire [7:0] p_jinfo_comps_info_v_samp_factor_in_b;
wire [7:0] p_jinfo_comps_info_v_samp_factor_out_b;
wire [1:0] p_jinfo_comps_info_quant_tbl_no_address_a;
wire  p_jinfo_comps_info_quant_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_quant_tbl_no_address_b;
wire  p_jinfo_comps_info_quant_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_out_b;
wire [1:0] p_jinfo_comps_info_dc_tbl_no_address_a;
wire  p_jinfo_comps_info_dc_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_dc_tbl_no_address_b;
wire  p_jinfo_comps_info_dc_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_b;
wire [1:0] p_jinfo_comps_info_ac_tbl_no_address_a;
wire  p_jinfo_comps_info_ac_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_ac_tbl_no_address_b;
wire  p_jinfo_comps_info_ac_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_out_b;
wire [6:0] p_jinfo_ac_xhuff_tbl_bits_address_a;
wire  p_jinfo_ac_xhuff_tbl_bits_write_enable_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_in_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_a;
wire [6:0] p_jinfo_ac_xhuff_tbl_bits_address_b;
wire  p_jinfo_ac_xhuff_tbl_bits_write_enable_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_b;
wire [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_a;
wire  p_jinfo_ac_xhuff_tbl_huffval_write_enable_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_a;
wire [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_b;
wire  p_jinfo_ac_xhuff_tbl_huffval_write_enable_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_b;
wire [6:0] p_jinfo_dc_xhuff_tbl_bits_address_a;
wire  p_jinfo_dc_xhuff_tbl_bits_write_enable_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_in_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_a;
wire [6:0] p_jinfo_dc_xhuff_tbl_bits_address_b;
wire  p_jinfo_dc_xhuff_tbl_bits_write_enable_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_b;
wire [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_a;
wire  p_jinfo_dc_xhuff_tbl_huffval_write_enable_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_a;
wire [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_b;
wire  p_jinfo_dc_xhuff_tbl_huffval_write_enable_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_b;
wire [7:0] p_jinfo_quant_tbl_quantval_address_a;
wire  p_jinfo_quant_tbl_quantval_write_enable_a;
wire [31:0] p_jinfo_quant_tbl_quantval_in_a;
wire [31:0] p_jinfo_quant_tbl_quantval_out_a;
wire [7:0] p_jinfo_quant_tbl_quantval_address_b;
wire  p_jinfo_quant_tbl_quantval_write_enable_b;
wire [31:0] p_jinfo_quant_tbl_quantval_in_b;
wire [31:0] p_jinfo_quant_tbl_quantval_out_b;
wire [5:0] zigzag_index_address_a;
wire  zigzag_index_write_enable_a;
wire [31:0] zigzag_index_in_a;
wire [31:0] zigzag_index_out_a;
wire [5:0] zigzag_index_address_b;
wire  zigzag_index_write_enable_b;
wire [31:0] zigzag_index_in_b;
wire [31:0] zigzag_index_out_b;
wire  p_jinfo_MCUWidth_address_a;
wire  p_jinfo_MCUWidth_write_enable_a;
wire [31:0] p_jinfo_MCUWidth_in_a;
wire [31:0] p_jinfo_MCUWidth_out_a;
wire  p_jinfo_MCUWidth_address_b;
wire  p_jinfo_MCUWidth_write_enable_b;
wire [31:0] p_jinfo_MCUWidth_in_b;
wire [31:0] p_jinfo_MCUWidth_out_b;
wire [9:0] rgb_buf_address_a;
wire  rgb_buf_write_enable_a;
wire [31:0] rgb_buf_in_a;
wire [31:0] rgb_buf_out_a;
wire [9:0] rgb_buf_address_b;
wire  rgb_buf_write_enable_b;
wire [31:0] rgb_buf_in_b;
wire [31:0] rgb_buf_out_b;
wire  CurHuffReadBuf_address_a;
wire  CurHuffReadBuf_write_enable_a;
wire [31:0] CurHuffReadBuf_in_a;
wire [31:0] CurHuffReadBuf_out_a;
wire  CurHuffReadBuf_address_b;
wire  CurHuffReadBuf_write_enable_b;
wire [31:0] CurHuffReadBuf_in_b;
wire [31:0] CurHuffReadBuf_out_b;
wire [13:0] OutData_comp_buf_address_a;
wire  OutData_comp_buf_write_enable_a;
wire [7:0] OutData_comp_buf_in_a;
wire [7:0] OutData_comp_buf_out_a;
wire [13:0] OutData_comp_buf_address_b;
wire  OutData_comp_buf_write_enable_b;
wire [7:0] OutData_comp_buf_in_b;
wire [7:0] OutData_comp_buf_out_b;
wire [4:0] bit_set_mask_address_a;
wire  bit_set_mask_write_enable_a;
wire [31:0] bit_set_mask_in_a;
wire [31:0] bit_set_mask_out_a;
wire [4:0] bit_set_mask_address_b;
wire  bit_set_mask_write_enable_b;
wire [31:0] bit_set_mask_in_b;
wire [31:0] bit_set_mask_out_b;
reg [4:0] lmask_address_a;
reg  lmask_write_enable_a;
wire [31:0] lmask_in_a;
wire [31:0] lmask_out_a;
wire [4:0] lmask_address_b;
wire  lmask_write_enable_b;
wire [31:0] lmask_in_b;
wire [31:0] lmask_out_b;
wire  read_position_address_a;
wire  read_position_write_enable_a;
wire [31:0] read_position_in_a;
wire [31:0] read_position_out_a;
wire  read_position_address_b;
wire  read_position_write_enable_b;
wire [31:0] read_position_in_b;
wire [31:0] read_position_out_b;
wire  current_read_byte_address_a;
wire  current_read_byte_write_enable_a;
wire [31:0] current_read_byte_in_a;
wire [31:0] current_read_byte_out_a;
wire  current_read_byte_address_b;
wire  current_read_byte_write_enable_b;
wire [31:0] current_read_byte_in_b;
wire [31:0] current_read_byte_out_b;
wire  p_jinfo_dc_dhuff_tbl_ml_address_a;
wire  p_jinfo_dc_dhuff_tbl_ml_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_a;
wire  p_jinfo_dc_dhuff_tbl_ml_address_b;
wire  p_jinfo_dc_dhuff_tbl_ml_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_a;
wire  p_jinfo_dc_dhuff_tbl_maxcode_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_b;
wire  p_jinfo_dc_dhuff_tbl_maxcode_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_a;
wire  p_jinfo_dc_dhuff_tbl_mincode_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_b;
wire  p_jinfo_dc_dhuff_tbl_mincode_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_a;
wire  p_jinfo_dc_dhuff_tbl_valptr_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_b;
wire  p_jinfo_dc_dhuff_tbl_valptr_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_b;
wire [4:0] extend_mask_address_a;
wire  extend_mask_write_enable_a;
wire [31:0] extend_mask_in_a;
wire [31:0] extend_mask_out_a;
wire [4:0] extend_mask_address_b;
wire  extend_mask_write_enable_b;
wire [31:0] extend_mask_in_b;
wire [31:0] extend_mask_out_b;
wire  p_jinfo_ac_dhuff_tbl_ml_address_a;
wire  p_jinfo_ac_dhuff_tbl_ml_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_a;
wire  p_jinfo_ac_dhuff_tbl_ml_address_b;
wire  p_jinfo_ac_dhuff_tbl_ml_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_a;
wire  p_jinfo_ac_dhuff_tbl_maxcode_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_b;
wire  p_jinfo_ac_dhuff_tbl_maxcode_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_a;
wire  p_jinfo_ac_dhuff_tbl_mincode_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_b;
wire  p_jinfo_ac_dhuff_tbl_mincode_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_a;
wire  p_jinfo_ac_dhuff_tbl_valptr_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_b;
wire  p_jinfo_ac_dhuff_tbl_valptr_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_b;
wire [1:0] OutData_comp_vpos_address_a;
wire  OutData_comp_vpos_write_enable_a;
wire [31:0] OutData_comp_vpos_in_a;
wire [31:0] OutData_comp_vpos_out_a;
wire [1:0] OutData_comp_vpos_address_b;
wire  OutData_comp_vpos_write_enable_b;
wire [31:0] OutData_comp_vpos_in_b;
wire [31:0] OutData_comp_vpos_out_b;
wire [1:0] OutData_comp_hpos_address_a;
wire  OutData_comp_hpos_write_enable_a;
wire [31:0] OutData_comp_hpos_in_a;
wire [31:0] OutData_comp_hpos_out_a;
wire [1:0] OutData_comp_hpos_address_b;
wire  OutData_comp_hpos_write_enable_b;
wire [31:0] OutData_comp_hpos_in_b;
wire [31:0] OutData_comp_hpos_out_b;
wire [12:0] JpegFileBuf_address_a;
wire  JpegFileBuf_write_enable_a;
wire [7:0] JpegFileBuf_in_a;
wire [7:0] JpegFileBuf_out_a;
wire [12:0] JpegFileBuf_address_b;
wire  JpegFileBuf_write_enable_b;
wire [7:0] JpegFileBuf_in_b;
wire [7:0] JpegFileBuf_out_b;
wire [8:0] huff_make_dhuff_tb_0_huffsize_address_a;
wire  huff_make_dhuff_tb_0_huffsize_write_enable_a;
wire [31:0] huff_make_dhuff_tb_0_huffsize_in_a;
wire [31:0] huff_make_dhuff_tb_0_huffsize_out_a;
wire [8:0] huff_make_dhuff_tb_0_huffsize_address_b;
wire  huff_make_dhuff_tb_0_huffsize_write_enable_b;
wire [31:0] huff_make_dhuff_tb_0_huffsize_in_b;
wire [31:0] huff_make_dhuff_tb_0_huffsize_out_b;
wire [8:0] huff_make_dhuff_tb_0_huffcode_address_a;
wire  huff_make_dhuff_tb_0_huffcode_write_enable_a;
wire [31:0] huff_make_dhuff_tb_0_huffcode_in_a;
wire [31:0] huff_make_dhuff_tb_0_huffcode_out_a;
wire [8:0] huff_make_dhuff_tb_0_huffcode_address_b;
wire  huff_make_dhuff_tb_0_huffcode_write_enable_b;
wire [31:0] huff_make_dhuff_tb_0_huffcode_in_b;
wire [31:0] huff_make_dhuff_tb_0_huffcode_out_b;
wire [5:0] main_0_QuantBuffiii_address_a;
wire  main_0_QuantBuffiii_write_enable_a;
wire [31:0] main_0_QuantBuffiii_in_a;
wire [31:0] main_0_QuantBuffiii_out_a;
wire [5:0] main_0_QuantBuffiii_address_b;
wire  main_0_QuantBuffiii_write_enable_b;
wire [31:0] main_0_QuantBuffiii_in_b;
wire [31:0] main_0_QuantBuffiii_out_b;
wire [7:0] main_0_HuffBuffii_address_a;
wire  main_0_HuffBuffii_write_enable_a;
wire [31:0] main_0_HuffBuffii_in_a;
wire [31:0] main_0_HuffBuffii_out_a;
wire [7:0] main_0_HuffBuffii_address_b;
wire  main_0_HuffBuffii_write_enable_b;
wire [31:0] main_0_HuffBuffii_in_b;
wire [31:0] main_0_HuffBuffii_out_b;
wire [8:0] main_0_IDCTBuffii_address_a;
wire  main_0_IDCTBuffii_write_enable_a;
wire [31:0] main_0_IDCTBuffii_in_a;
wire [31:0] main_0_IDCTBuffii_out_a;
wire [8:0] main_0_IDCTBuffii_address_b;
wire  main_0_IDCTBuffii_write_enable_b;
wire [31:0] main_0_IDCTBuffii_in_b;
wire [31:0] main_0_IDCTBuffii_out_b;

// Local Rams


// @lmask = internal unnamed_addr constant [32 x i32] [i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127, i32 255, i32 511, i32 1023, i32 2047, i32 4095, i32 8191, i32 16383, i32 32767, i32 65535, i32...
rom_dual_port lmask (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( lmask_address_a ),
	.address_b( lmask_address_b ),
	.q_a( lmask_out_a ),
	.q_b( lmask_out_b )
);
defparam lmask.width_a = 32;
defparam lmask.width_b = 32;
defparam lmask.widthad_a = 5;
defparam lmask.widthad_b = 5;
defparam lmask.numwords_a = 32;
defparam lmask.numwords_b = 32;
defparam lmask.latency = 1;
defparam lmask.init_file = "lmask.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* buf_getv: %25*/
	/*   %26 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str30, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_buf_getv_BB__25_18)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Unanticipated marker detected.\n");
	end
	/* buf_getv: %45*/
	/*   %46 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str30, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_buf_getv_BB__45_32)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Unanticipated marker detected.\n");
	end
end
always @(posedge clk) begin
	if (reset)
		cur_state <= LEGUP_0;
	else if (memory_controller_waitrequest == 1'd1)
		cur_state <= cur_state;
	else
		cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_buf_getv_BB__0_1;
LEGUP_F_buf_getv_BB__0_1:
		next_state = LEGUP_F_buf_getv_BB__0_2;
LEGUP_F_buf_getv_BB__0_2:
		next_state = LEGUP_F_buf_getv_BB__0_3;
LEGUP_F_buf_getv_BB__0_3:
	if ((buf_getv_0_4 == 1'd1))
		next_state = LEGUP_F_buf_getv_BB_lrph_4;
	else if ((buf_getv_0_4 == 1'd0))
		next_state = LEGUP_F_buf_getv_BB__crit_edge_39;
LEGUP_F_buf_getv_BB__15_10:
		next_state = LEGUP_F_buf_getv_BB__15_11;
LEGUP_F_buf_getv_BB__15_11:
		next_state = LEGUP_F_buf_getv_BB__15_12;
LEGUP_F_buf_getv_BB__15_12:
		next_state = LEGUP_F_buf_getv_BB__15_13;
LEGUP_F_buf_getv_BB__15_13:
	if ((buf_getv_15_20 == 1'd1))
		next_state = LEGUP_F_buf_getv_BB__21_14;
	else if ((buf_getv_15_20 == 1'd0))
		next_state = LEGUP_F_buf_getv_BB__27_19;
LEGUP_F_buf_getv_BB__15_8:
		next_state = LEGUP_F_buf_getv_BB__15_9;
LEGUP_F_buf_getv_BB__15_9:
		next_state = LEGUP_F_buf_getv_BB__15_10;
LEGUP_F_buf_getv_BB__21_14:
		next_state = LEGUP_F_buf_getv_BB__21_15;
LEGUP_F_buf_getv_BB__21_15:
		next_state = LEGUP_F_buf_getv_BB__21_16;
LEGUP_F_buf_getv_BB__21_16:
		next_state = LEGUP_F_buf_getv_BB__21_17;
LEGUP_F_buf_getv_BB__21_17:
	if ((buf_getv_21_24 == 1'd1))
		next_state = LEGUP_F_buf_getv_BB_pgetcexit_20;
	else if ((buf_getv_21_24 == 1'd0))
		next_state = LEGUP_F_buf_getv_BB__25_18;
LEGUP_F_buf_getv_BB__25_18:
		next_state = LEGUP_F_buf_getv_BB__27_19;
LEGUP_F_buf_getv_BB__27_19:
		next_state = LEGUP_F_buf_getv_BB_pgetcexit_20;
LEGUP_F_buf_getv_BB__35_22:
		next_state = LEGUP_F_buf_getv_BB__35_23;
LEGUP_F_buf_getv_BB__35_23:
		next_state = LEGUP_F_buf_getv_BB__35_24;
LEGUP_F_buf_getv_BB__35_24:
		next_state = LEGUP_F_buf_getv_BB__35_25;
LEGUP_F_buf_getv_BB__35_25:
		next_state = LEGUP_F_buf_getv_BB__35_26;
LEGUP_F_buf_getv_BB__35_26:
		next_state = LEGUP_F_buf_getv_BB__35_27;
LEGUP_F_buf_getv_BB__35_27:
	if ((buf_getv_35_40 == 1'd1))
		next_state = LEGUP_F_buf_getv_BB__41_28;
	else if ((buf_getv_35_40 == 1'd0))
		next_state = LEGUP_F_buf_getv_BB__47_35;
LEGUP_F_buf_getv_BB__41_28:
		next_state = LEGUP_F_buf_getv_BB__41_29;
LEGUP_F_buf_getv_BB__41_29:
		next_state = LEGUP_F_buf_getv_BB__41_30;
LEGUP_F_buf_getv_BB__41_30:
		next_state = LEGUP_F_buf_getv_BB__41_31;
LEGUP_F_buf_getv_BB__41_31:
	if ((buf_getv_41_44 == 1'd1))
		next_state = LEGUP_F_buf_getv_BB_pgetcexit4_36;
	else if ((buf_getv_41_44 == 1'd0))
		next_state = LEGUP_F_buf_getv_BB__45_32;
LEGUP_F_buf_getv_BB__45_32:
		next_state = LEGUP_F_buf_getv_BB__45_33;
LEGUP_F_buf_getv_BB__45_33:
		next_state = LEGUP_F_buf_getv_BB__45_34;
LEGUP_F_buf_getv_BB__45_34:
		next_state = LEGUP_F_buf_getv_BB__47_35;
LEGUP_F_buf_getv_BB__47_35:
		next_state = LEGUP_F_buf_getv_BB_pgetcexit4_36;
LEGUP_F_buf_getv_BB__53_40:
		next_state = LEGUP_F_buf_getv_BB__53_41;
LEGUP_F_buf_getv_BB__53_41:
		next_state = LEGUP_F_buf_getv_BB__53_42;
LEGUP_F_buf_getv_BB__53_42:
		next_state = LEGUP_F_buf_getv_BB__66_46;
LEGUP_F_buf_getv_BB__58_43:
		next_state = LEGUP_F_buf_getv_BB__58_44;
LEGUP_F_buf_getv_BB__58_44:
		next_state = LEGUP_F_buf_getv_BB__58_45;
LEGUP_F_buf_getv_BB__58_45:
		next_state = LEGUP_F_buf_getv_BB__66_46;
LEGUP_F_buf_getv_BB__66_46:
		next_state = LEGUP_0;
LEGUP_F_buf_getv_BB__9_7:
	if ((buf_getv_9_14 == 1'd1))
		next_state = LEGUP_F_buf_getv_BB__15_8;
	else if ((buf_getv_9_14 == 1'd0))
		next_state = LEGUP_F_buf_getv_BB__35_22;
LEGUP_F_buf_getv_BB__crit_edge_39:
	if ((buf_getv__crit_edge_52 == 1'd1))
		next_state = LEGUP_F_buf_getv_BB__53_40;
	else if ((buf_getv__crit_edge_52 == 1'd0))
		next_state = LEGUP_F_buf_getv_BB__58_43;
LEGUP_F_buf_getv_BB__crit_edgeloopexit_38:
		next_state = LEGUP_F_buf_getv_BB__crit_edge_39;
LEGUP_F_buf_getv_BB_lrph_4:
		next_state = LEGUP_F_buf_getv_BB_lrph_5;
LEGUP_F_buf_getv_BB_lrph_5:
		next_state = LEGUP_F_buf_getv_BB_lrph_6;
LEGUP_F_buf_getv_BB_lrph_6:
		next_state = LEGUP_F_buf_getv_BB__9_7;
LEGUP_F_buf_getv_BB_pgetcexit4_36:
		next_state = LEGUP_F_buf_getv_BB_pgetcexit4_37;
LEGUP_F_buf_getv_BB_pgetcexit4_37:
	if ((buf_getv_pgetcexit4_51_reg == 1'd1))
		next_state = LEGUP_F_buf_getv_BB__9_7;
	else if ((buf_getv_pgetcexit4_51_reg == 1'd0))
		next_state = LEGUP_F_buf_getv_BB__crit_edgeloopexit_38;
LEGUP_F_buf_getv_BB_pgetcexit_20:
		next_state = LEGUP_F_buf_getv_BB_pgetcexit_21;
LEGUP_F_buf_getv_BB_pgetcexit_21:
		next_state = LEGUP_F_buf_getv_BB__66_46;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* buf_getv: %0*/
	/*   %1 = add nsw i32 %n, -1*/
		buf_getv_0_1 = (arg_n + -32'd1);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_0_1_reg <= 0;
	/* buf_getv: %0*/
	/*   %1 = add nsw i32 %n, -1*/
	else if((cur_state == LEGUP_F_buf_getv_BB__0_1)) begin
		buf_getv_0_1_reg <= buf_getv_0_1;
		if (start == 1'b0 && ^(buf_getv_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %0*/
	/*   %2 = load i32* @read_position, align 4, !tbaa !1*/
		buf_getv_0_2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		buf_getv_0_2_reg <= 0;
	/* buf_getv: %0*/
	/*   %2 = load i32* @read_position, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_buf_getv_BB__0_3)) begin
		buf_getv_0_2_reg <= buf_getv_0_2;
		if (start == 1'b0 && ^(buf_getv_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %0*/
	/*   %3 = sub nsw i32 %1, %2*/
		buf_getv_0_3 = (buf_getv_0_1_reg - buf_getv_0_2);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_0_3_reg <= 0;
	/* buf_getv: %0*/
	/*   %3 = sub nsw i32 %1, %2*/
	else if((cur_state == LEGUP_F_buf_getv_BB__0_3)) begin
		buf_getv_0_3_reg <= buf_getv_0_3;
		if (start == 1'b0 && ^(buf_getv_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %0*/
	/*   %4 = icmp sgt i32 %3, 0*/
		buf_getv_0_4 = ($signed(buf_getv_0_3) > $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		buf_getv_0_4_reg <= 0;
	/* buf_getv: %0*/
	/*   %4 = icmp sgt i32 %3, 0*/
	else if((cur_state == LEGUP_F_buf_getv_BB__0_3)) begin
		buf_getv_0_4_reg <= buf_getv_0_4;
		if (start == 1'b0 && ^(buf_getv_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %.lr.ph*/
	/*   %.pre = load i32* @current_read_byte, align 4, !tbaa !1*/
		buf_getv_lrph_pre = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		buf_getv_lrph_pre_reg <= 0;
	/* buf_getv: %.lr.ph*/
	/*   %.pre = load i32* @current_read_byte, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_buf_getv_BB_lrph_6)) begin
		buf_getv_lrph_pre_reg <= buf_getv_lrph_pre;
		if (start == 1'b0 && ^(buf_getv_lrph_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_lrph_pre_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %.lr.ph*/
	/*   %5 = add i32 %n, -9*/
		buf_getv_lrph_5 = (arg_n + -32'd9);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_lrph_5_reg <= 0;
	/* buf_getv: %.lr.ph*/
	/*   %5 = add i32 %n, -9*/
	else if((cur_state == LEGUP_F_buf_getv_BB_lrph_4)) begin
		buf_getv_lrph_5_reg <= buf_getv_lrph_5;
		if (start == 1'b0 && ^(buf_getv_lrph_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_lrph_5_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %.lr.ph*/
	/*   %6 = sub i32 %5, %2*/
		buf_getv_lrph_6 = (buf_getv_lrph_5 - buf_getv_0_2_reg);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_lrph_6_reg <= 0;
	/* buf_getv: %.lr.ph*/
	/*   %6 = sub i32 %5, %2*/
	else if((cur_state == LEGUP_F_buf_getv_BB_lrph_4)) begin
		buf_getv_lrph_6_reg <= buf_getv_lrph_6;
		if (start == 1'b0 && ^(buf_getv_lrph_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_lrph_6_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %.lr.ph*/
	/*   %7 = add i32 %n, -1*/
		buf_getv_lrph_7 = (arg_n + -32'd1);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_lrph_7_reg <= 0;
	/* buf_getv: %.lr.ph*/
	/*   %7 = add i32 %n, -1*/
	else if((cur_state == LEGUP_F_buf_getv_BB_lrph_4)) begin
		buf_getv_lrph_7_reg <= buf_getv_lrph_7;
		if (start == 1'b0 && ^(buf_getv_lrph_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_lrph_7_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %.lr.ph*/
	/*   %8 = sub i32 %7, %2*/
		buf_getv_lrph_8 = (buf_getv_lrph_7 - buf_getv_0_2_reg);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_lrph_8_reg <= 0;
	/* buf_getv: %.lr.ph*/
	/*   %8 = sub i32 %7, %2*/
	else if((cur_state == LEGUP_F_buf_getv_BB_lrph_4)) begin
		buf_getv_lrph_8_reg <= buf_getv_lrph_8;
		if (start == 1'b0 && ^(buf_getv_lrph_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_lrph_8_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %9*/
	/*   %indvar = phi i32 [ %indvar.next, %pgetc.exit4 ], [ 0, %.lr.ph ]*/
	if (((cur_state == LEGUP_F_buf_getv_BB_lrph_6) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_9_indvar = 32'd0;
	end
	/* buf_getv: %9*/
	/*   %indvar = phi i32 [ %indvar.next, %pgetc.exit4 ], [ 0, %.lr.ph ]*/
	else /* if ((((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_37) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_pgetcexit4_51_reg == 1'd1))) */ begin
		buf_getv_9_indvar = buf_getv_pgetcexit4_indvarnext_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		buf_getv_9_indvar_reg <= 0;
	/* buf_getv: %9*/
	/*   %indvar = phi i32 [ %indvar.next, %pgetc.exit4 ], [ 0, %.lr.ph ]*/
	else if(((cur_state == LEGUP_F_buf_getv_BB_lrph_6) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_9_indvar_reg <= buf_getv_9_indvar;
		if (start == 1'b0 && ^(buf_getv_9_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_9_indvar_reg"); $finish; end
	end
	/* buf_getv: %9*/
	/*   %indvar = phi i32 [ %indvar.next, %pgetc.exit4 ], [ 0, %.lr.ph ]*/
	else if((((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_37) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_pgetcexit4_51_reg == 1'd1))) begin
		buf_getv_9_indvar_reg <= buf_getv_9_indvar;
		if (start == 1'b0 && ^(buf_getv_9_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_9_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %9*/
	/*   %10 = phi i32 [ %49, %pgetc.exit4 ], [ %.pre, %.lr.ph ]*/
	if (((cur_state == LEGUP_F_buf_getv_BB_lrph_6) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_9_10 = buf_getv_lrph_pre;
	end
	/* buf_getv: %9*/
	/*   %10 = phi i32 [ %49, %pgetc.exit4 ], [ %.pre, %.lr.ph ]*/
	else /* if ((((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_37) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_pgetcexit4_51_reg == 1'd1))) */ begin
		buf_getv_9_10 = buf_getv_pgetcexit4_49_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		buf_getv_9_10_reg <= 0;
	/* buf_getv: %9*/
	/*   %10 = phi i32 [ %49, %pgetc.exit4 ], [ %.pre, %.lr.ph ]*/
	else if(((cur_state == LEGUP_F_buf_getv_BB_lrph_6) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_9_10_reg <= buf_getv_9_10;
		if (start == 1'b0 && ^(buf_getv_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_9_10_reg"); $finish; end
	end
	/* buf_getv: %9*/
	/*   %10 = phi i32 [ %49, %pgetc.exit4 ], [ %.pre, %.lr.ph ]*/
	else if((((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_37) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_pgetcexit4_51_reg == 1'd1))) begin
		buf_getv_9_10_reg <= buf_getv_9_10;
		if (start == 1'b0 && ^(buf_getv_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_9_10_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %9*/
	/*   %11 = phi i32 [ %50, %pgetc.exit4 ], [ %2, %.lr.ph ]*/
	if (((cur_state == LEGUP_F_buf_getv_BB_lrph_6) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_9_11 = buf_getv_0_2_reg;
	end
	/* buf_getv: %9*/
	/*   %11 = phi i32 [ %50, %pgetc.exit4 ], [ %2, %.lr.ph ]*/
	else /* if ((((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_37) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_pgetcexit4_51_reg == 1'd1))) */ begin
		buf_getv_9_11 = buf_getv_pgetcexit4_50_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		buf_getv_9_11_reg <= 0;
	/* buf_getv: %9*/
	/*   %11 = phi i32 [ %50, %pgetc.exit4 ], [ %2, %.lr.ph ]*/
	else if(((cur_state == LEGUP_F_buf_getv_BB_lrph_6) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_9_11_reg <= buf_getv_9_11;
		if (start == 1'b0 && ^(buf_getv_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_9_11_reg"); $finish; end
	end
	/* buf_getv: %9*/
	/*   %11 = phi i32 [ %50, %pgetc.exit4 ], [ %2, %.lr.ph ]*/
	else if((((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_37) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_pgetcexit4_51_reg == 1'd1))) begin
		buf_getv_9_11_reg <= buf_getv_9_11;
		if (start == 1'b0 && ^(buf_getv_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_9_11_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %9*/
	/*   %12 = mul i32 %indvar, -8*/
		buf_getv_9_12 = (buf_getv_9_indvar_reg * -32'd8);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_9_12_reg <= 0;
	/* buf_getv: %9*/
	/*   %12 = mul i32 %indvar, -8*/
	else if((cur_state == LEGUP_F_buf_getv_BB__9_7)) begin
		buf_getv_9_12_reg <= buf_getv_9_12;
		if (start == 1'b0 && ^(buf_getv_9_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_9_12_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %9*/
	/*   %13 = add i32 %6, %12*/
		buf_getv_9_13 = (buf_getv_lrph_6_reg + buf_getv_9_12);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_9_13_reg <= 0;
	/* buf_getv: %9*/
	/*   %13 = add i32 %6, %12*/
	else if((cur_state == LEGUP_F_buf_getv_BB__9_7)) begin
		buf_getv_9_13_reg <= buf_getv_9_13;
		if (start == 1'b0 && ^(buf_getv_9_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_9_13_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %9*/
	/*   %p.06 = add i32 %8, %12*/
		buf_getv_9_p06 = (buf_getv_lrph_8_reg + buf_getv_9_12);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_9_p06_reg <= 0;
	/* buf_getv: %9*/
	/*   %p.06 = add i32 %8, %12*/
	else if((cur_state == LEGUP_F_buf_getv_BB__9_7)) begin
		buf_getv_9_p06_reg <= buf_getv_9_p06;
		if (start == 1'b0 && ^(buf_getv_9_p06) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_9_p06_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %9*/
	/*   %14 = icmp sgt i32 %11, 23*/
		buf_getv_9_14 = ($signed(buf_getv_9_11_reg) > $signed(32'd23));
end
always @(posedge clk) begin
	if (reset)
		buf_getv_9_14_reg <= 0;
	/* buf_getv: %9*/
	/*   %14 = icmp sgt i32 %11, 23*/
	else if((cur_state == LEGUP_F_buf_getv_BB__9_7)) begin
		buf_getv_9_14_reg <= buf_getv_9_14;
		if (start == 1'b0 && ^(buf_getv_9_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_9_14_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %15*/
	/*   %16 = shl i32 %10, %p.06*/
		buf_getv_15_16 = (buf_getv_9_10_reg <<< (buf_getv_9_p06_reg % 32));
end
always @(posedge clk) begin
	if (reset)
		buf_getv_15_16_reg <= 0;
	/* buf_getv: %15*/
	/*   %16 = shl i32 %10, %p.06*/
	else if((cur_state == LEGUP_F_buf_getv_BB__15_8)) begin
		buf_getv_15_16_reg <= buf_getv_15_16;
		if (start == 1'b0 && ^(buf_getv_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_15_16_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %15*/
	/*   %17 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
		buf_getv_15_17 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	if (reset)
		buf_getv_15_17_reg <= 0;
	/* buf_getv: %15*/
	/*   %17 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	else if((cur_state == LEGUP_F_buf_getv_BB__15_10)) begin
		buf_getv_15_17_reg <= buf_getv_15_17;
		if (start == 1'b0 && ^(buf_getv_15_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_15_17_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %15*/
	/*   %18 = getelementptr inbounds i8* %17, i32 1*/
		buf_getv_15_18 = (buf_getv_15_17 + (1 * 32'd1));
end
always @(posedge clk) begin
	if (reset)
		buf_getv_15_18_reg <= 0;
	/* buf_getv: %15*/
	/*   %18 = getelementptr inbounds i8* %17, i32 1*/
	else if((cur_state == LEGUP_F_buf_getv_BB__15_10)) begin
		buf_getv_15_18_reg <= buf_getv_15_18;
		if (start == 1'b0 && ^(buf_getv_15_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_15_18_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %15*/
	/*   %19 = load i8* %17, align 1, !tbaa !7*/
		buf_getv_15_19 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		buf_getv_15_19_reg <= 0;
	/* buf_getv: %15*/
	/*   %19 = load i8* %17, align 1, !tbaa !7*/
	else if((cur_state == LEGUP_F_buf_getv_BB__15_13)) begin
		buf_getv_15_19_reg <= buf_getv_15_19;
		if (start == 1'b0 && ^(buf_getv_15_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_15_19_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %15*/
	/*   %20 = icmp eq i8 %19, -1*/
		buf_getv_15_20 = (buf_getv_15_19 == -8'd1);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_15_20_reg <= 0;
	/* buf_getv: %15*/
	/*   %20 = icmp eq i8 %19, -1*/
	else if((cur_state == LEGUP_F_buf_getv_BB__15_13)) begin
		buf_getv_15_20_reg <= buf_getv_15_20;
		if (start == 1'b0 && ^(buf_getv_15_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_15_20_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %21*/
	/*   %22 = getelementptr inbounds i8* %17, i32 2*/
		buf_getv_21_22 = (buf_getv_15_17_reg + (1 * 32'd2));
end
always @(posedge clk) begin
	if (reset)
		buf_getv_21_22_reg <= 0;
	/* buf_getv: %21*/
	/*   %22 = getelementptr inbounds i8* %17, i32 2*/
	else if((cur_state == LEGUP_F_buf_getv_BB__21_14)) begin
		buf_getv_21_22_reg <= buf_getv_21_22;
		if (start == 1'b0 && ^(buf_getv_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_21_22_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %21*/
	/*   %23 = load i8* %18, align 1, !tbaa !7*/
		buf_getv_21_23 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		buf_getv_21_23_reg <= 0;
	/* buf_getv: %21*/
	/*   %23 = load i8* %18, align 1, !tbaa !7*/
	else if((cur_state == LEGUP_F_buf_getv_BB__21_17)) begin
		buf_getv_21_23_reg <= buf_getv_21_23;
		if (start == 1'b0 && ^(buf_getv_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_21_23_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %21*/
	/*   %24 = icmp eq i8 %23, 0*/
		buf_getv_21_24 = (buf_getv_21_23 == 8'd0);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_21_24_reg <= 0;
	/* buf_getv: %21*/
	/*   %24 = icmp eq i8 %23, 0*/
	else if((cur_state == LEGUP_F_buf_getv_BB__21_17)) begin
		buf_getv_21_24_reg <= buf_getv_21_24;
		if (start == 1'b0 && ^(buf_getv_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_21_24_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %27*/
	/*   %temp.0.in.i = phi i8 [ %23, %25 ], [ %19, %15 ]*/
	if ((((cur_state == LEGUP_F_buf_getv_BB__15_13) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_15_20 == 1'd0))) begin
		buf_getv_27_temp0ini = buf_getv_15_19;
	end
	/* buf_getv: %27*/
	/*   %temp.0.in.i = phi i8 [ %23, %25 ], [ %19, %15 ]*/
	else /* if (((cur_state == LEGUP_F_buf_getv_BB__25_18) & (memory_controller_waitrequest == 1'd0))) */ begin
		buf_getv_27_temp0ini = buf_getv_21_23_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		buf_getv_27_temp0ini_reg <= 0;
	/* buf_getv: %27*/
	/*   %temp.0.in.i = phi i8 [ %23, %25 ], [ %19, %15 ]*/
	else if((((cur_state == LEGUP_F_buf_getv_BB__15_13) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_15_20 == 1'd0))) begin
		buf_getv_27_temp0ini_reg <= buf_getv_27_temp0ini;
		if (start == 1'b0 && ^(buf_getv_27_temp0ini) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_27_temp0ini_reg"); $finish; end
	end
	/* buf_getv: %27*/
	/*   %temp.0.in.i = phi i8 [ %23, %25 ], [ %19, %15 ]*/
	else if(((cur_state == LEGUP_F_buf_getv_BB__25_18) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_27_temp0ini_reg <= buf_getv_27_temp0ini;
		if (start == 1'b0 && ^(buf_getv_27_temp0ini) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_27_temp0ini_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %27*/
	/*   %temp.0.i = zext i8 %temp.0.in.i to i32*/
		buf_getv_27_temp0i = buf_getv_27_temp0ini_reg;
end
always @(posedge clk) begin
	if (reset)
		buf_getv_27_temp0i_reg <= 0;
	/* buf_getv: %27*/
	/*   %temp.0.i = zext i8 %temp.0.in.i to i32*/
	else if((cur_state == LEGUP_F_buf_getv_BB__27_19)) begin
		buf_getv_27_temp0i_reg <= buf_getv_27_temp0i;
		if (start == 1'b0 && ^(buf_getv_27_temp0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_27_temp0i_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %pgetc.exit*/
	/*   %.0.i = phi i32 [ %temp.0.i, %27 ], [ 255, %21 ]*/
	if ((((cur_state == LEGUP_F_buf_getv_BB__21_17) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_21_24 == 1'd1))) begin
		buf_getv_pgetcexit_0i = 32'd255;
	end
	/* buf_getv: %pgetc.exit*/
	/*   %.0.i = phi i32 [ %temp.0.i, %27 ], [ 255, %21 ]*/
	else /* if (((cur_state == LEGUP_F_buf_getv_BB__27_19) & (memory_controller_waitrequest == 1'd0))) */ begin
		buf_getv_pgetcexit_0i = buf_getv_27_temp0i;
	end
end
always @(posedge clk) begin
	if (reset)
		buf_getv_pgetcexit_0i_reg <= 0;
	/* buf_getv: %pgetc.exit*/
	/*   %.0.i = phi i32 [ %temp.0.i, %27 ], [ 255, %21 ]*/
	else if((((cur_state == LEGUP_F_buf_getv_BB__21_17) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_21_24 == 1'd1))) begin
		buf_getv_pgetcexit_0i_reg <= buf_getv_pgetcexit_0i;
		if (start == 1'b0 && ^(buf_getv_pgetcexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit_0i_reg"); $finish; end
	end
	/* buf_getv: %pgetc.exit*/
	/*   %.0.i = phi i32 [ %temp.0.i, %27 ], [ 255, %21 ]*/
	else if(((cur_state == LEGUP_F_buf_getv_BB__27_19) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_pgetcexit_0i_reg <= buf_getv_pgetcexit_0i;
		if (start == 1'b0 && ^(buf_getv_pgetcexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit_0i_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %pgetc.exit*/
	/*   %28 = sub nsw i32 8, %p.06*/
		buf_getv_pgetcexit_28 = (32'd8 - buf_getv_9_p06_reg);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_pgetcexit_28_reg <= 0;
	/* buf_getv: %pgetc.exit*/
	/*   %28 = sub nsw i32 8, %p.06*/
	else if((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		buf_getv_pgetcexit_28_reg <= buf_getv_pgetcexit_28;
		if (start == 1'b0 && ^(buf_getv_pgetcexit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit_28_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %pgetc.exit*/
	/*   %29 = lshr i32 %.0.i, %28*/
		buf_getv_pgetcexit_29 = (buf_getv_pgetcexit_0i_reg >>> (buf_getv_pgetcexit_28 % 32));
end
always @(posedge clk) begin
	if (reset)
		buf_getv_pgetcexit_29_reg <= 0;
	/* buf_getv: %pgetc.exit*/
	/*   %29 = lshr i32 %.0.i, %28*/
	else if((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		buf_getv_pgetcexit_29_reg <= buf_getv_pgetcexit_29;
		if (start == 1'b0 && ^(buf_getv_pgetcexit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit_29_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %pgetc.exit*/
	/*   %30 = or i32 %29, %16*/
		buf_getv_pgetcexit_30 = (buf_getv_pgetcexit_29 | buf_getv_15_16_reg);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_pgetcexit_30_reg <= 0;
	/* buf_getv: %pgetc.exit*/
	/*   %30 = or i32 %29, %16*/
	else if((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		buf_getv_pgetcexit_30_reg <= buf_getv_pgetcexit_30;
		if (start == 1'b0 && ^(buf_getv_pgetcexit_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit_30_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %pgetc.exit*/
	/*   %31 = sub nsw i32 7, %p.06*/
		buf_getv_pgetcexit_31 = (32'd7 - buf_getv_9_p06_reg);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_pgetcexit_31_reg <= 0;
	/* buf_getv: %pgetc.exit*/
	/*   %31 = sub nsw i32 7, %p.06*/
	else if((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		buf_getv_pgetcexit_31_reg <= buf_getv_pgetcexit_31;
		if (start == 1'b0 && ^(buf_getv_pgetcexit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit_31_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %pgetc.exit*/
	/*   %32 = getelementptr inbounds [32 x i32]* @lmask, i32 0, i32 %1*/
		buf_getv_pgetcexit_32 = (1'd0 + (4 * buf_getv_0_1_reg));
end
always @(posedge clk) begin
	if (reset)
		buf_getv_pgetcexit_32_reg <= 0;
	/* buf_getv: %pgetc.exit*/
	/*   %32 = getelementptr inbounds [32 x i32]* @lmask, i32 0, i32 %1*/
	else if((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		buf_getv_pgetcexit_32_reg <= buf_getv_pgetcexit_32;
		if (start == 1'b0 && ^(buf_getv_pgetcexit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit_32_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %pgetc.exit*/
	/*   %33 = load i32* %32, align 4, !tbaa !1*/
		buf_getv_pgetcexit_33 = lmask_out_a;
end
always @(posedge clk) begin
	if (reset)
		buf_getv_pgetcexit_33_reg <= 0;
	/* buf_getv: %pgetc.exit*/
	/*   %33 = load i32* %32, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_21)) begin
		buf_getv_pgetcexit_33_reg <= buf_getv_pgetcexit_33;
		if (start == 1'b0 && ^(buf_getv_pgetcexit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit_33_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %pgetc.exit*/
	/*   %34 = and i32 %30, %33*/
		buf_getv_pgetcexit_34 = (buf_getv_pgetcexit_30_reg & buf_getv_pgetcexit_33);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_pgetcexit_34_reg <= 0;
	/* buf_getv: %pgetc.exit*/
	/*   %34 = and i32 %30, %33*/
	else if((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_21)) begin
		buf_getv_pgetcexit_34_reg <= buf_getv_pgetcexit_34;
		if (start == 1'b0 && ^(buf_getv_pgetcexit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit_34_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %35*/
	/*   %36 = shl i32 %10, 8*/
		buf_getv_35_36 = (buf_getv_9_10_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	if (reset)
		buf_getv_35_36_reg <= 0;
	/* buf_getv: %35*/
	/*   %36 = shl i32 %10, 8*/
	else if((cur_state == LEGUP_F_buf_getv_BB__35_22)) begin
		buf_getv_35_36_reg <= buf_getv_35_36;
		if (start == 1'b0 && ^(buf_getv_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_35_36_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %35*/
	/*   %37 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
		buf_getv_35_37 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	if (reset)
		buf_getv_35_37_reg <= 0;
	/* buf_getv: %35*/
	/*   %37 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	else if((cur_state == LEGUP_F_buf_getv_BB__35_24)) begin
		buf_getv_35_37_reg <= buf_getv_35_37;
		if (start == 1'b0 && ^(buf_getv_35_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_35_37_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %35*/
	/*   %38 = getelementptr inbounds i8* %37, i32 1*/
		buf_getv_35_38 = (buf_getv_35_37 + (1 * 32'd1));
end
always @(posedge clk) begin
	if (reset)
		buf_getv_35_38_reg <= 0;
	/* buf_getv: %35*/
	/*   %38 = getelementptr inbounds i8* %37, i32 1*/
	else if((cur_state == LEGUP_F_buf_getv_BB__35_24)) begin
		buf_getv_35_38_reg <= buf_getv_35_38;
		if (start == 1'b0 && ^(buf_getv_35_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_35_38_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %35*/
	/*   %39 = load i8* %37, align 1, !tbaa !7*/
		buf_getv_35_39 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		buf_getv_35_39_reg <= 0;
	/* buf_getv: %35*/
	/*   %39 = load i8* %37, align 1, !tbaa !7*/
	else if((cur_state == LEGUP_F_buf_getv_BB__35_27)) begin
		buf_getv_35_39_reg <= buf_getv_35_39;
		if (start == 1'b0 && ^(buf_getv_35_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_35_39_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %35*/
	/*   %40 = icmp eq i8 %39, -1*/
		buf_getv_35_40 = (buf_getv_35_39 == -8'd1);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_35_40_reg <= 0;
	/* buf_getv: %35*/
	/*   %40 = icmp eq i8 %39, -1*/
	else if((cur_state == LEGUP_F_buf_getv_BB__35_27)) begin
		buf_getv_35_40_reg <= buf_getv_35_40;
		if (start == 1'b0 && ^(buf_getv_35_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_35_40_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %41*/
	/*   %42 = getelementptr inbounds i8* %37, i32 2*/
		buf_getv_41_42 = (buf_getv_35_37_reg + (1 * 32'd2));
end
always @(posedge clk) begin
	if (reset)
		buf_getv_41_42_reg <= 0;
	/* buf_getv: %41*/
	/*   %42 = getelementptr inbounds i8* %37, i32 2*/
	else if((cur_state == LEGUP_F_buf_getv_BB__41_28)) begin
		buf_getv_41_42_reg <= buf_getv_41_42;
		if (start == 1'b0 && ^(buf_getv_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_41_42_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %41*/
	/*   %43 = load i8* %38, align 1, !tbaa !7*/
		buf_getv_41_43 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		buf_getv_41_43_reg <= 0;
	/* buf_getv: %41*/
	/*   %43 = load i8* %38, align 1, !tbaa !7*/
	else if((cur_state == LEGUP_F_buf_getv_BB__41_31)) begin
		buf_getv_41_43_reg <= buf_getv_41_43;
		if (start == 1'b0 && ^(buf_getv_41_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_41_43_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %41*/
	/*   %44 = icmp eq i8 %43, 0*/
		buf_getv_41_44 = (buf_getv_41_43 == 8'd0);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_41_44_reg <= 0;
	/* buf_getv: %41*/
	/*   %44 = icmp eq i8 %43, 0*/
	else if((cur_state == LEGUP_F_buf_getv_BB__41_31)) begin
		buf_getv_41_44_reg <= buf_getv_41_44;
		if (start == 1'b0 && ^(buf_getv_41_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_41_44_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %45*/
	/*   %.pre10.pre = load i32* @read_position, align 4, !tbaa !1*/
		buf_getv_45_pre10pre = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		buf_getv_45_pre10pre_reg <= 0;
	/* buf_getv: %45*/
	/*   %.pre10.pre = load i32* @read_position, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_buf_getv_BB__45_34)) begin
		buf_getv_45_pre10pre_reg <= buf_getv_45_pre10pre;
		if (start == 1'b0 && ^(buf_getv_45_pre10pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_45_pre10pre_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %47*/
	/*   %.pre10 = phi i32 [ %.pre10.pre, %45 ], [ %11, %35 ]*/
	if ((((cur_state == LEGUP_F_buf_getv_BB__35_27) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_35_40 == 1'd0))) begin
		buf_getv_47_pre10 = buf_getv_9_11_reg;
	end
	/* buf_getv: %47*/
	/*   %.pre10 = phi i32 [ %.pre10.pre, %45 ], [ %11, %35 ]*/
	else /* if (((cur_state == LEGUP_F_buf_getv_BB__45_34) & (memory_controller_waitrequest == 1'd0))) */ begin
		buf_getv_47_pre10 = buf_getv_45_pre10pre;
	end
end
always @(posedge clk) begin
	if (reset)
		buf_getv_47_pre10_reg <= 0;
	/* buf_getv: %47*/
	/*   %.pre10 = phi i32 [ %.pre10.pre, %45 ], [ %11, %35 ]*/
	else if((((cur_state == LEGUP_F_buf_getv_BB__35_27) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_35_40 == 1'd0))) begin
		buf_getv_47_pre10_reg <= buf_getv_47_pre10;
		if (start == 1'b0 && ^(buf_getv_47_pre10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_47_pre10_reg"); $finish; end
	end
	/* buf_getv: %47*/
	/*   %.pre10 = phi i32 [ %.pre10.pre, %45 ], [ %11, %35 ]*/
	else if(((cur_state == LEGUP_F_buf_getv_BB__45_34) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_47_pre10_reg <= buf_getv_47_pre10;
		if (start == 1'b0 && ^(buf_getv_47_pre10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_47_pre10_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %47*/
	/*   %temp.0.in.i1 = phi i8 [ %43, %45 ], [ %39, %35 ]*/
	if ((((cur_state == LEGUP_F_buf_getv_BB__35_27) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_35_40 == 1'd0))) begin
		buf_getv_47_temp0ini1 = buf_getv_35_39;
	end
	/* buf_getv: %47*/
	/*   %temp.0.in.i1 = phi i8 [ %43, %45 ], [ %39, %35 ]*/
	else /* if (((cur_state == LEGUP_F_buf_getv_BB__45_34) & (memory_controller_waitrequest == 1'd0))) */ begin
		buf_getv_47_temp0ini1 = buf_getv_41_43_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		buf_getv_47_temp0ini1_reg <= 0;
	/* buf_getv: %47*/
	/*   %temp.0.in.i1 = phi i8 [ %43, %45 ], [ %39, %35 ]*/
	else if((((cur_state == LEGUP_F_buf_getv_BB__35_27) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_35_40 == 1'd0))) begin
		buf_getv_47_temp0ini1_reg <= buf_getv_47_temp0ini1;
		if (start == 1'b0 && ^(buf_getv_47_temp0ini1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_47_temp0ini1_reg"); $finish; end
	end
	/* buf_getv: %47*/
	/*   %temp.0.in.i1 = phi i8 [ %43, %45 ], [ %39, %35 ]*/
	else if(((cur_state == LEGUP_F_buf_getv_BB__45_34) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_47_temp0ini1_reg <= buf_getv_47_temp0ini1;
		if (start == 1'b0 && ^(buf_getv_47_temp0ini1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_47_temp0ini1_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %47*/
	/*   %temp.0.i2 = zext i8 %temp.0.in.i1 to i32*/
		buf_getv_47_temp0i2 = buf_getv_47_temp0ini1_reg;
end
always @(posedge clk) begin
	if (reset)
		buf_getv_47_temp0i2_reg <= 0;
	/* buf_getv: %47*/
	/*   %temp.0.i2 = zext i8 %temp.0.in.i1 to i32*/
	else if((cur_state == LEGUP_F_buf_getv_BB__47_35)) begin
		buf_getv_47_temp0i2_reg <= buf_getv_47_temp0i2;
		if (start == 1'b0 && ^(buf_getv_47_temp0i2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_47_temp0i2_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %pgetc.exit4*/
	/*   %48 = phi i32 [ %.pre10, %47 ], [ %11, %41 ]*/
	if ((((cur_state == LEGUP_F_buf_getv_BB__41_31) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_41_44 == 1'd1))) begin
		buf_getv_pgetcexit4_48 = buf_getv_9_11_reg;
	end
	/* buf_getv: %pgetc.exit4*/
	/*   %48 = phi i32 [ %.pre10, %47 ], [ %11, %41 ]*/
	else /* if (((cur_state == LEGUP_F_buf_getv_BB__47_35) & (memory_controller_waitrequest == 1'd0))) */ begin
		buf_getv_pgetcexit4_48 = buf_getv_47_pre10_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		buf_getv_pgetcexit4_48_reg <= 0;
	/* buf_getv: %pgetc.exit4*/
	/*   %48 = phi i32 [ %.pre10, %47 ], [ %11, %41 ]*/
	else if((((cur_state == LEGUP_F_buf_getv_BB__41_31) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_41_44 == 1'd1))) begin
		buf_getv_pgetcexit4_48_reg <= buf_getv_pgetcexit4_48;
		if (start == 1'b0 && ^(buf_getv_pgetcexit4_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit4_48_reg"); $finish; end
	end
	/* buf_getv: %pgetc.exit4*/
	/*   %48 = phi i32 [ %.pre10, %47 ], [ %11, %41 ]*/
	else if(((cur_state == LEGUP_F_buf_getv_BB__47_35) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_pgetcexit4_48_reg <= buf_getv_pgetcexit4_48;
		if (start == 1'b0 && ^(buf_getv_pgetcexit4_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit4_48_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %pgetc.exit4*/
	/*   %.0.i3 = phi i32 [ %temp.0.i2, %47 ], [ 255, %41 ]*/
	if ((((cur_state == LEGUP_F_buf_getv_BB__41_31) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_41_44 == 1'd1))) begin
		buf_getv_pgetcexit4_0i3 = 32'd255;
	end
	/* buf_getv: %pgetc.exit4*/
	/*   %.0.i3 = phi i32 [ %temp.0.i2, %47 ], [ 255, %41 ]*/
	else /* if (((cur_state == LEGUP_F_buf_getv_BB__47_35) & (memory_controller_waitrequest == 1'd0))) */ begin
		buf_getv_pgetcexit4_0i3 = buf_getv_47_temp0i2;
	end
end
always @(posedge clk) begin
	if (reset)
		buf_getv_pgetcexit4_0i3_reg <= 0;
	/* buf_getv: %pgetc.exit4*/
	/*   %.0.i3 = phi i32 [ %temp.0.i2, %47 ], [ 255, %41 ]*/
	else if((((cur_state == LEGUP_F_buf_getv_BB__41_31) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_41_44 == 1'd1))) begin
		buf_getv_pgetcexit4_0i3_reg <= buf_getv_pgetcexit4_0i3;
		if (start == 1'b0 && ^(buf_getv_pgetcexit4_0i3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit4_0i3_reg"); $finish; end
	end
	/* buf_getv: %pgetc.exit4*/
	/*   %.0.i3 = phi i32 [ %temp.0.i2, %47 ], [ 255, %41 ]*/
	else if(((cur_state == LEGUP_F_buf_getv_BB__47_35) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_pgetcexit4_0i3_reg <= buf_getv_pgetcexit4_0i3;
		if (start == 1'b0 && ^(buf_getv_pgetcexit4_0i3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit4_0i3_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %pgetc.exit4*/
	/*   %49 = or i32 %.0.i3, %36*/
		buf_getv_pgetcexit4_49 = (buf_getv_pgetcexit4_0i3_reg | buf_getv_35_36_reg);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_pgetcexit4_49_reg <= 0;
	/* buf_getv: %pgetc.exit4*/
	/*   %49 = or i32 %.0.i3, %36*/
	else if((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_36)) begin
		buf_getv_pgetcexit4_49_reg <= buf_getv_pgetcexit4_49;
		if (start == 1'b0 && ^(buf_getv_pgetcexit4_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit4_49_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %pgetc.exit4*/
	/*   %50 = add nsw i32 %48, 8*/
		buf_getv_pgetcexit4_50 = (buf_getv_pgetcexit4_48_reg + 32'd8);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_pgetcexit4_50_reg <= 0;
	/* buf_getv: %pgetc.exit4*/
	/*   %50 = add nsw i32 %48, 8*/
	else if((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_36)) begin
		buf_getv_pgetcexit4_50_reg <= buf_getv_pgetcexit4_50;
		if (start == 1'b0 && ^(buf_getv_pgetcexit4_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit4_50_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %pgetc.exit4*/
	/*   %51 = icmp sgt i32 %13, 0*/
		buf_getv_pgetcexit4_51 = ($signed(buf_getv_9_13_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		buf_getv_pgetcexit4_51_reg <= 0;
	/* buf_getv: %pgetc.exit4*/
	/*   %51 = icmp sgt i32 %13, 0*/
	else if((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_36)) begin
		buf_getv_pgetcexit4_51_reg <= buf_getv_pgetcexit4_51;
		if (start == 1'b0 && ^(buf_getv_pgetcexit4_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit4_51_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %pgetc.exit4*/
	/*   %indvar.next = add i32 %indvar, 1*/
		buf_getv_pgetcexit4_indvarnext = (buf_getv_9_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_pgetcexit4_indvarnext_reg <= 0;
	/* buf_getv: %pgetc.exit4*/
	/*   %indvar.next = add i32 %indvar, 1*/
	else if((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_36)) begin
		buf_getv_pgetcexit4_indvarnext_reg <= buf_getv_pgetcexit4_indvarnext;
		if (start == 1'b0 && ^(buf_getv_pgetcexit4_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetcexit4_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %._crit_edge*/
	/*   %p.0.lcssa = phi i32 [ %3, %0 ], [ %13, %._crit_edge.loopexit ]*/
	if ((((cur_state == LEGUP_F_buf_getv_BB__0_3) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_0_4 == 1'd0))) begin
		buf_getv__crit_edge_p0lcssa = buf_getv_0_3;
	end
	/* buf_getv: %._crit_edge*/
	/*   %p.0.lcssa = phi i32 [ %3, %0 ], [ %13, %._crit_edge.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_buf_getv_BB__crit_edgeloopexit_38) & (memory_controller_waitrequest == 1'd0))) */ begin
		buf_getv__crit_edge_p0lcssa = buf_getv_9_13_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		buf_getv__crit_edge_p0lcssa_reg <= 0;
	/* buf_getv: %._crit_edge*/
	/*   %p.0.lcssa = phi i32 [ %3, %0 ], [ %13, %._crit_edge.loopexit ]*/
	else if((((cur_state == LEGUP_F_buf_getv_BB__0_3) & (memory_controller_waitrequest == 1'd0)) & (buf_getv_0_4 == 1'd0))) begin
		buf_getv__crit_edge_p0lcssa_reg <= buf_getv__crit_edge_p0lcssa;
		if (start == 1'b0 && ^(buf_getv__crit_edge_p0lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv__crit_edge_p0lcssa_reg"); $finish; end
	end
	/* buf_getv: %._crit_edge*/
	/*   %p.0.lcssa = phi i32 [ %3, %0 ], [ %13, %._crit_edge.loopexit ]*/
	else if(((cur_state == LEGUP_F_buf_getv_BB__crit_edgeloopexit_38) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv__crit_edge_p0lcssa_reg <= buf_getv__crit_edge_p0lcssa;
		if (start == 1'b0 && ^(buf_getv__crit_edge_p0lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv__crit_edge_p0lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %._crit_edge*/
	/*   %52 = icmp eq i32 %p.0.lcssa, 0*/
		buf_getv__crit_edge_52 = (buf_getv__crit_edge_p0lcssa_reg == 32'd0);
end
always @(posedge clk) begin
	if (reset)
		buf_getv__crit_edge_52_reg <= 0;
	/* buf_getv: %._crit_edge*/
	/*   %52 = icmp eq i32 %p.0.lcssa, 0*/
	else if((cur_state == LEGUP_F_buf_getv_BB__crit_edge_39)) begin
		buf_getv__crit_edge_52_reg <= buf_getv__crit_edge_52;
		if (start == 1'b0 && ^(buf_getv__crit_edge_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv__crit_edge_52_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %53*/
	/*   %54 = load i32* @current_read_byte, align 4, !tbaa !1*/
		buf_getv_53_54 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		buf_getv_53_54_reg <= 0;
	/* buf_getv: %53*/
	/*   %54 = load i32* @current_read_byte, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_buf_getv_BB__53_42)) begin
		buf_getv_53_54_reg <= buf_getv_53_54;
		if (start == 1'b0 && ^(buf_getv_53_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_53_54_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %53*/
	/*   %55 = getelementptr inbounds [32 x i32]* @lmask, i32 0, i32 %1*/
		buf_getv_53_55 = (1'd0 + (4 * buf_getv_0_1_reg));
end
always @(posedge clk) begin
	if (reset)
		buf_getv_53_55_reg <= 0;
	/* buf_getv: %53*/
	/*   %55 = getelementptr inbounds [32 x i32]* @lmask, i32 0, i32 %1*/
	else if((cur_state == LEGUP_F_buf_getv_BB__53_40)) begin
		buf_getv_53_55_reg <= buf_getv_53_55;
		if (start == 1'b0 && ^(buf_getv_53_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_53_55_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %53*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
		buf_getv_53_56 = lmask_out_a;
end
always @(posedge clk) begin
	if (reset)
		buf_getv_53_56_reg <= 0;
	/* buf_getv: %53*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_buf_getv_BB__53_41)) begin
		buf_getv_53_56_reg <= buf_getv_53_56;
		if (start == 1'b0 && ^(buf_getv_53_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_53_56_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %53*/
	/*   %57 = and i32 %56, %54*/
		buf_getv_53_57 = (buf_getv_53_56_reg & buf_getv_53_54);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_53_57_reg <= 0;
	/* buf_getv: %53*/
	/*   %57 = and i32 %56, %54*/
	else if((cur_state == LEGUP_F_buf_getv_BB__53_42)) begin
		buf_getv_53_57_reg <= buf_getv_53_57;
		if (start == 1'b0 && ^(buf_getv_53_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_53_57_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %58*/
	/*   %59 = sub nsw i32 0, %p.0.lcssa*/
		buf_getv_58_59 = (32'd0 - buf_getv__crit_edge_p0lcssa_reg);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_58_59_reg <= 0;
	/* buf_getv: %58*/
	/*   %59 = sub nsw i32 0, %p.0.lcssa*/
	else if((cur_state == LEGUP_F_buf_getv_BB__58_43)) begin
		buf_getv_58_59_reg <= buf_getv_58_59;
		if (start == 1'b0 && ^(buf_getv_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_58_59_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %58*/
	/*   %60 = xor i32 %p.0.lcssa, -1*/
		buf_getv_58_60 = (buf_getv__crit_edge_p0lcssa_reg ^ -32'd1);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_58_60_reg <= 0;
	/* buf_getv: %58*/
	/*   %60 = xor i32 %p.0.lcssa, -1*/
	else if((cur_state == LEGUP_F_buf_getv_BB__58_43)) begin
		buf_getv_58_60_reg <= buf_getv_58_60;
		if (start == 1'b0 && ^(buf_getv_58_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_58_60_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %58*/
	/*   %61 = load i32* @current_read_byte, align 4, !tbaa !1*/
		buf_getv_58_61 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		buf_getv_58_61_reg <= 0;
	/* buf_getv: %58*/
	/*   %61 = load i32* @current_read_byte, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_buf_getv_BB__58_45)) begin
		buf_getv_58_61_reg <= buf_getv_58_61;
		if (start == 1'b0 && ^(buf_getv_58_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_58_61_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %58*/
	/*   %62 = lshr i32 %61, %59*/
		buf_getv_58_62 = (buf_getv_58_61 >>> (buf_getv_58_59_reg % 32));
end
always @(posedge clk) begin
	if (reset)
		buf_getv_58_62_reg <= 0;
	/* buf_getv: %58*/
	/*   %62 = lshr i32 %61, %59*/
	else if((cur_state == LEGUP_F_buf_getv_BB__58_45)) begin
		buf_getv_58_62_reg <= buf_getv_58_62;
		if (start == 1'b0 && ^(buf_getv_58_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_58_62_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %58*/
	/*   %63 = getelementptr inbounds [32 x i32]* @lmask, i32 0, i32 %1*/
		buf_getv_58_63 = (1'd0 + (4 * buf_getv_0_1_reg));
end
always @(posedge clk) begin
	if (reset)
		buf_getv_58_63_reg <= 0;
	/* buf_getv: %58*/
	/*   %63 = getelementptr inbounds [32 x i32]* @lmask, i32 0, i32 %1*/
	else if((cur_state == LEGUP_F_buf_getv_BB__58_43)) begin
		buf_getv_58_63_reg <= buf_getv_58_63;
		if (start == 1'b0 && ^(buf_getv_58_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_58_63_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %58*/
	/*   %64 = load i32* %63, align 4, !tbaa !1*/
		buf_getv_58_64 = lmask_out_a;
end
always @(posedge clk) begin
	if (reset)
		buf_getv_58_64_reg <= 0;
	/* buf_getv: %58*/
	/*   %64 = load i32* %63, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_buf_getv_BB__58_44)) begin
		buf_getv_58_64_reg <= buf_getv_58_64;
		if (start == 1'b0 && ^(buf_getv_58_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_58_64_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %58*/
	/*   %65 = and i32 %62, %64*/
		buf_getv_58_65 = (buf_getv_58_62 & buf_getv_58_64_reg);
end
always @(posedge clk) begin
	if (reset)
		buf_getv_58_65_reg <= 0;
	/* buf_getv: %58*/
	/*   %65 = and i32 %62, %64*/
	else if((cur_state == LEGUP_F_buf_getv_BB__58_45)) begin
		buf_getv_58_65_reg <= buf_getv_58_65;
		if (start == 1'b0 && ^(buf_getv_58_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_58_65_reg"); $finish; end
	end
end
always @(*) begin
	/* buf_getv: %66*/
	/*   %.0 = phi i32 [ %34, %pgetc.exit ], [ %65, %58 ], [ %57, %53 ]*/
	if (((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_21) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_66_0 = buf_getv_pgetcexit_34;
	end
	/* buf_getv: %66*/
	/*   %.0 = phi i32 [ %34, %pgetc.exit ], [ %65, %58 ], [ %57, %53 ]*/
	else if (((cur_state == LEGUP_F_buf_getv_BB__53_42) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_66_0 = buf_getv_53_57;
	end
	/* buf_getv: %66*/
	/*   %.0 = phi i32 [ %34, %pgetc.exit ], [ %65, %58 ], [ %57, %53 ]*/
	else /* if (((cur_state == LEGUP_F_buf_getv_BB__58_45) & (memory_controller_waitrequest == 1'd0))) */ begin
		buf_getv_66_0 = buf_getv_58_65;
	end
end
always @(posedge clk) begin
	if (reset)
		buf_getv_66_0_reg <= 0;
	/* buf_getv: %66*/
	/*   %.0 = phi i32 [ %34, %pgetc.exit ], [ %65, %58 ], [ %57, %53 ]*/
	else if(((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_21) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_66_0_reg <= buf_getv_66_0;
		if (start == 1'b0 && ^(buf_getv_66_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_66_0_reg"); $finish; end
	end
	/* buf_getv: %66*/
	/*   %.0 = phi i32 [ %34, %pgetc.exit ], [ %65, %58 ], [ %57, %53 ]*/
	else if(((cur_state == LEGUP_F_buf_getv_BB__53_42) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_66_0_reg <= buf_getv_66_0;
		if (start == 1'b0 && ^(buf_getv_66_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_66_0_reg"); $finish; end
	end
	/* buf_getv: %66*/
	/*   %.0 = phi i32 [ %34, %pgetc.exit ], [ %65, %58 ], [ %57, %53 ]*/
	else if(((cur_state == LEGUP_F_buf_getv_BB__58_45) & (memory_controller_waitrequest == 1'd0))) begin
		buf_getv_66_0_reg <= buf_getv_66_0;
		if (start == 1'b0 && ^(buf_getv_66_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_66_0_reg"); $finish; end
	end
end
always @(*) begin
	lmask_address_a = 1'd0;
	/* buf_getv: %pgetc.exit*/
	/*   %33 = load i32* %32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		lmask_address_a = (buf_getv_pgetcexit_32 >>> 3'd2);
	end
	/* buf_getv: %53*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__53_40)) begin
		lmask_address_a = (buf_getv_53_55 >>> 3'd2);
	end
	/* buf_getv: %58*/
	/*   %64 = load i32* %63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__58_43)) begin
		lmask_address_a = (buf_getv_58_63 >>> 3'd2);
	end
end
always @(*) begin
	lmask_write_enable_a = 1'd0;
	/* buf_getv: %pgetc.exit*/
	/*   %33 = load i32* %32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		lmask_write_enable_a = 1'd0;
	end
	/* buf_getv: %53*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__53_40)) begin
		lmask_write_enable_a = 1'd0;
	end
	/* buf_getv: %58*/
	/*   %64 = load i32* %63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__58_43)) begin
		lmask_write_enable_a = 1'd0;
	end
end


//voter


//port drive
always @(posedge clk) begin
	if (reset)
		finish <= 0;
	else if((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* buf_getv: %66*/
	/*   ret i32 %.0*/
	else if((cur_state == LEGUP_F_buf_getv_BB__66_46)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* buf_getv: %0*/
	/*   %2 = load i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* buf_getv: %.lr.ph*/
	/*   %.pre = load i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_lrph_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* buf_getv: %15*/
	/*   %17 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__15_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* buf_getv: %15*/
	/*   store i8* %18, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__15_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* buf_getv: %15*/
	/*   %19 = load i8* %17, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_buf_getv_BB__15_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* buf_getv: %21*/
	/*   store i8* %22, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__21_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* buf_getv: %21*/
	/*   %23 = load i8* %18, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_buf_getv_BB__21_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* buf_getv: %pgetc.exit*/
	/*   store i32 %.0.i, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* buf_getv: %45*/
	/*   %.pre10.pre = load i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__45_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* buf_getv: %pgetc.exit4*/
	/*   store i32 %49, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* buf_getv: %53*/
	/*   store i32 -1, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__53_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* buf_getv: %58*/
	/*   store i32 %60, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__58_43)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* buf_getv: %0*/
	/*   %2 = load i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_read_position_a;
	end
	/* buf_getv: %.lr.ph*/
	/*   %.pre = load i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_lrph_4)) begin
		memory_controller_address_a = `TAG_g_current_read_byte_a;
	end
	/* buf_getv: %15*/
	/*   %17 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__15_8)) begin
		memory_controller_address_a = `TAG_g_CurHuffReadBuf_a;
	end
	/* buf_getv: %15*/
	/*   store i8* %18, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__15_10)) begin
		memory_controller_address_a = `TAG_g_CurHuffReadBuf_a;
	end
	/* buf_getv: %15*/
	/*   %19 = load i8* %17, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_buf_getv_BB__15_11)) begin
		memory_controller_address_a = buf_getv_15_17_reg;
	end
	/* buf_getv: %21*/
	/*   store i8* %22, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__21_14)) begin
		memory_controller_address_a = `TAG_g_CurHuffReadBuf_a;
	end
	/* buf_getv: %21*/
	/*   %23 = load i8* %18, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_buf_getv_BB__21_15)) begin
		memory_controller_address_a = buf_getv_15_18_reg;
	end
	/* buf_getv: %pgetc.exit*/
	/*   store i32 %.0.i, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		memory_controller_address_a = `TAG_g_current_read_byte_a;
	end
	/* buf_getv: %45*/
	/*   %.pre10.pre = load i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__45_32)) begin
		memory_controller_address_a = `TAG_g_read_position_a;
	end
	/* buf_getv: %pgetc.exit4*/
	/*   store i32 %49, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_36)) begin
		memory_controller_address_a = `TAG_g_current_read_byte_a;
	end
	/* buf_getv: %53*/
	/*   store i32 -1, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__53_40)) begin
		memory_controller_address_a = `TAG_g_read_position_a;
	end
	/* buf_getv: %58*/
	/*   store i32 %60, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__58_43)) begin
		memory_controller_address_a = `TAG_g_read_position_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* buf_getv: %0*/
	/*   %2 = load i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* buf_getv: %.lr.ph*/
	/*   %.pre = load i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_lrph_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* buf_getv: %15*/
	/*   %17 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__15_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* buf_getv: %15*/
	/*   store i8* %18, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__15_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* buf_getv: %15*/
	/*   %19 = load i8* %17, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_buf_getv_BB__15_11)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* buf_getv: %21*/
	/*   store i8* %22, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__21_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* buf_getv: %21*/
	/*   %23 = load i8* %18, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_buf_getv_BB__21_15)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* buf_getv: %pgetc.exit*/
	/*   store i32 %.0.i, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* buf_getv: %45*/
	/*   %.pre10.pre = load i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__45_32)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* buf_getv: %pgetc.exit4*/
	/*   store i32 %49, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_36)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* buf_getv: %53*/
	/*   store i32 -1, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__53_40)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* buf_getv: %58*/
	/*   store i32 %60, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__58_43)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* buf_getv: %15*/
	/*   store i8* %18, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__15_10)) begin
		memory_controller_in_a = buf_getv_15_18;
	end
	/* buf_getv: %21*/
	/*   store i8* %22, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__21_14)) begin
		memory_controller_in_a = buf_getv_21_22;
	end
	/* buf_getv: %pgetc.exit*/
	/*   store i32 %.0.i, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		memory_controller_in_a = buf_getv_pgetcexit_0i_reg;
	end
	/* buf_getv: %pgetc.exit4*/
	/*   store i32 %49, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_36)) begin
		memory_controller_in_a = buf_getv_pgetcexit4_49;
	end
	/* buf_getv: %53*/
	/*   store i32 -1, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__53_40)) begin
		memory_controller_in_a = -32'd1;
	end
	/* buf_getv: %58*/
	/*   store i32 %60, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__58_43)) begin
		memory_controller_in_a = buf_getv_58_60;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* buf_getv: %0*/
	/*   %2 = load i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* buf_getv: %.lr.ph*/
	/*   %.pre = load i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_lrph_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* buf_getv: %15*/
	/*   %17 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__15_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* buf_getv: %15*/
	/*   store i8* %18, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__15_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* buf_getv: %15*/
	/*   %19 = load i8* %17, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_buf_getv_BB__15_11)) begin
		memory_controller_size_a = 2'd0;
	end
	/* buf_getv: %21*/
	/*   store i8* %22, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__21_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* buf_getv: %21*/
	/*   %23 = load i8* %18, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_buf_getv_BB__21_15)) begin
		memory_controller_size_a = 2'd0;
	end
	/* buf_getv: %pgetc.exit*/
	/*   store i32 %.0.i, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* buf_getv: %45*/
	/*   %.pre10.pre = load i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__45_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* buf_getv: %pgetc.exit4*/
	/*   store i32 %49, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* buf_getv: %53*/
	/*   store i32 -1, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__53_40)) begin
		memory_controller_size_a = 2'd2;
	end
	/* buf_getv: %58*/
	/*   store i32 %60, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__58_43)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* buf_getv: %pgetc.exit*/
	/*   store i32 %31, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* buf_getv: %35*/
	/*   %37 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__35_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* buf_getv: %35*/
	/*   store i8* %38, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__35_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* buf_getv: %35*/
	/*   %39 = load i8* %37, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_buf_getv_BB__35_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* buf_getv: %41*/
	/*   store i8* %42, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__41_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* buf_getv: %41*/
	/*   %43 = load i8* %38, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_buf_getv_BB__41_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* buf_getv: %pgetc.exit4*/
	/*   store i32 %50, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_36)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* buf_getv: %53*/
	/*   %54 = load i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__53_40)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* buf_getv: %58*/
	/*   %61 = load i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__58_43)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* buf_getv: %pgetc.exit*/
	/*   store i32 %31, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		memory_controller_address_b = `TAG_g_read_position_a;
	end
	/* buf_getv: %35*/
	/*   %37 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__35_22)) begin
		memory_controller_address_b = `TAG_g_CurHuffReadBuf_a;
	end
	/* buf_getv: %35*/
	/*   store i8* %38, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__35_24)) begin
		memory_controller_address_b = `TAG_g_CurHuffReadBuf_a;
	end
	/* buf_getv: %35*/
	/*   %39 = load i8* %37, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_buf_getv_BB__35_25)) begin
		memory_controller_address_b = buf_getv_35_37_reg;
	end
	/* buf_getv: %41*/
	/*   store i8* %42, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__41_28)) begin
		memory_controller_address_b = `TAG_g_CurHuffReadBuf_a;
	end
	/* buf_getv: %41*/
	/*   %43 = load i8* %38, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_buf_getv_BB__41_29)) begin
		memory_controller_address_b = buf_getv_35_38_reg;
	end
	/* buf_getv: %pgetc.exit4*/
	/*   store i32 %50, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_36)) begin
		memory_controller_address_b = `TAG_g_read_position_a;
	end
	/* buf_getv: %53*/
	/*   %54 = load i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__53_40)) begin
		memory_controller_address_b = `TAG_g_current_read_byte_a;
	end
	/* buf_getv: %58*/
	/*   %61 = load i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__58_43)) begin
		memory_controller_address_b = `TAG_g_current_read_byte_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* buf_getv: %pgetc.exit*/
	/*   store i32 %31, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* buf_getv: %35*/
	/*   %37 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__35_22)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* buf_getv: %35*/
	/*   store i8* %38, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__35_24)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* buf_getv: %35*/
	/*   %39 = load i8* %37, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_buf_getv_BB__35_25)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* buf_getv: %41*/
	/*   store i8* %42, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__41_28)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* buf_getv: %41*/
	/*   %43 = load i8* %38, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_buf_getv_BB__41_29)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* buf_getv: %pgetc.exit4*/
	/*   store i32 %50, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_36)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* buf_getv: %53*/
	/*   %54 = load i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__53_40)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* buf_getv: %58*/
	/*   %61 = load i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__58_43)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* buf_getv: %pgetc.exit*/
	/*   store i32 %31, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		memory_controller_in_b = buf_getv_pgetcexit_31;
	end
	/* buf_getv: %35*/
	/*   store i8* %38, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__35_24)) begin
		memory_controller_in_b = buf_getv_35_38;
	end
	/* buf_getv: %41*/
	/*   store i8* %42, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__41_28)) begin
		memory_controller_in_b = buf_getv_41_42;
	end
	/* buf_getv: %pgetc.exit4*/
	/*   store i32 %50, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_36)) begin
		memory_controller_in_b = buf_getv_pgetcexit4_50;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* buf_getv: %pgetc.exit*/
	/*   store i32 %31, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* buf_getv: %35*/
	/*   %37 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__35_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* buf_getv: %35*/
	/*   store i8* %38, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__35_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* buf_getv: %35*/
	/*   %39 = load i8* %37, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_buf_getv_BB__35_25)) begin
		memory_controller_size_b = 2'd0;
	end
	/* buf_getv: %41*/
	/*   store i8* %42, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_buf_getv_BB__41_28)) begin
		memory_controller_size_b = 2'd2;
	end
	/* buf_getv: %41*/
	/*   %43 = load i8* %38, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_buf_getv_BB__41_29)) begin
		memory_controller_size_b = 2'd0;
	end
	/* buf_getv: %pgetc.exit4*/
	/*   store i32 %50, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB_pgetcexit4_36)) begin
		memory_controller_size_b = 2'd2;
	end
	/* buf_getv: %53*/
	/*   %54 = load i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__53_40)) begin
		memory_controller_size_b = 2'd2;
	end
	/* buf_getv: %58*/
	/*   %61 = load i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_buf_getv_BB__58_43)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if (reset)
		return_val <= 0;
	else if((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* buf_getv: %66*/
	/*   ret i32 %.0*/
	else if((cur_state == LEGUP_F_buf_getv_BB__66_46)) begin
		return_val <= buf_getv_66_0_reg;
		if (start == 1'b0 && ^(buf_getv_66_0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module huff_make_dhuff_tb
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_p_xhtbl_bits,
	arg_p_dhtbl_maxcode,
	arg_p_dhtbl_mincode,
	arg_p_dhtbl_valptr
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_preheader3_2 = 6'd2;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_preheader3_3 = 6'd3;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_preheader3_4 = 6'd4;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_preheader3_5 = 6'd5;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_lrphpreheader_6 = 6'd6;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_lrph_7 = 6'd7;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_lrph_8 = 6'd8;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_lrph_9 = 6'd9;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__crit_edge_10 = 6'd10;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__6_11 = 6'd11;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__7_12 = 6'd12;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__7_13 = 6'd13;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__7_14 = 6'd14;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_outerloopexit_15 = 6'd15;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_outer_16 = 6'd16;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__13_17 = 6'd17;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__13_18 = 6'd18;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__13_19 = 6'd19;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_critedge_20 = 6'd20;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_preheader2preheader_21 = 6'd21;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_preheaderpreheader_22 = 6'd22;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_preheader2_23 = 6'd23;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_preheader_24 = 6'd24;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_preheader_25 = 6'd25;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_preheader_26 = 6'd26;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB_preheader_27 = 6'd27;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__25_28 = 6'd28;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__25_29 = 6'd29;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__25_30 = 6'd30;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__25_31 = 6'd31;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__25_32 = 6'd32;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__25_33 = 6'd33;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__25_34 = 6'd34;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__34_35 = 6'd35;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__34_36 = 6'd36;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__35_37 = 6'd37;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__35_38 = 6'd38;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__35_39 = 6'd39;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB__35_40 = 6'd40;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
integer i;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p_xhtbl_bits;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p_dhtbl_maxcode;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p_dhtbl_mincode;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p_dhtbl_valptr;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] huff_make_dhuff_tb_preheader3_indvar16;
reg [31:0] huff_make_dhuff_tb_preheader3_indvar16_reg;
reg [31:0] huff_make_dhuff_tb_preheader3_p014;
reg [31:0] huff_make_dhuff_tb_preheader3_p014_reg;
reg [31:0] huff_make_dhuff_tb_preheader3_i015;
reg [31:0] huff_make_dhuff_tb_preheader3_i015_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_preheader3_scevgep19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_preheader3_scevgep19_reg;
reg [31:0] huff_make_dhuff_tb_preheader3_1;
reg [31:0] huff_make_dhuff_tb_preheader3_1_reg;
reg  huff_make_dhuff_tb_preheader3_2;
reg  huff_make_dhuff_tb_preheader3_2_reg;
reg [31:0] huff_make_dhuff_tb_lrph_indvar12;
reg [31:0] huff_make_dhuff_tb_lrph_indvar12_reg;
reg [31:0] huff_make_dhuff_tb_lrph_3;
reg [31:0] huff_make_dhuff_tb_lrph_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_lrph_scevgep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_lrph_scevgep15_reg;
reg [31:0] huff_make_dhuff_tb_lrph_indvarnext13;
reg [31:0] huff_make_dhuff_tb_lrph_indvarnext13_reg;
reg  huff_make_dhuff_tb_lrph_exitcond14;
reg  huff_make_dhuff_tb_lrph_exitcond14_reg;
reg  huff_make_dhuff_tb__crit_edge_4;
reg  huff_make_dhuff_tb__crit_edge_4_reg;
reg [31:0] huff_make_dhuff_tb__crit_edge_smax;
reg [31:0] huff_make_dhuff_tb__crit_edge_smax_reg;
reg [31:0] huff_make_dhuff_tb__crit_edge_5;
reg [31:0] huff_make_dhuff_tb__crit_edge_5_reg;
reg [31:0] huff_make_dhuff_tb_6_p1lcssa;
reg [31:0] huff_make_dhuff_tb_6_p1lcssa_reg;
reg [31:0] huff_make_dhuff_tb_6_indvarnext17;
reg [31:0] huff_make_dhuff_tb_6_indvarnext17_reg;
reg  huff_make_dhuff_tb_6_exitcond18;
reg  huff_make_dhuff_tb_6_exitcond18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_7_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_7_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_7_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_7_9_reg;
reg [31:0] huff_make_dhuff_tb_7_10;
reg [31:0] huff_make_dhuff_tb_7_10_reg;
reg [31:0] huff_make_dhuff_tb_outer_p2ph;
reg [31:0] huff_make_dhuff_tb_outer_p2ph_reg;
reg [31:0] huff_make_dhuff_tb_outer_code0ph;
reg [31:0] huff_make_dhuff_tb_outer_code0ph_reg;
reg [31:0] huff_make_dhuff_tb_outer_size0ph;
reg [31:0] huff_make_dhuff_tb_outer_size0ph_reg;
reg [31:0] huff_make_dhuff_tb_outer_11;
reg [31:0] huff_make_dhuff_tb_outer_11_reg;
reg [31:0] huff_make_dhuff_tb_outer_12;
reg [31:0] huff_make_dhuff_tb_outer_12_reg;
reg [31:0] huff_make_dhuff_tb_13_indvar6;
reg [31:0] huff_make_dhuff_tb_13_indvar6_reg;
reg [31:0] huff_make_dhuff_tb_13_14;
reg [31:0] huff_make_dhuff_tb_13_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_13_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_13_scevgep8_reg;
reg [31:0] huff_make_dhuff_tb_13_15;
reg [31:0] huff_make_dhuff_tb_13_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_13_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_13_scevgep9_reg;
reg [31:0] huff_make_dhuff_tb_13_code0;
reg [31:0] huff_make_dhuff_tb_13_code0_reg;
reg [31:0] huff_make_dhuff_tb_13_16;
reg [31:0] huff_make_dhuff_tb_13_16_reg;
reg [31:0] huff_make_dhuff_tb_13_17;
reg [31:0] huff_make_dhuff_tb_13_17_reg;
reg  huff_make_dhuff_tb_13_18;
reg  huff_make_dhuff_tb_13_18_reg;
reg  huff_make_dhuff_tb_13_19;
reg  huff_make_dhuff_tb_13_19_reg;
reg  huff_make_dhuff_tb_13_orcond;
reg  huff_make_dhuff_tb_13_orcond_reg;
reg [31:0] huff_make_dhuff_tb_13_indvarnext7;
reg [31:0] huff_make_dhuff_tb_13_indvarnext7_reg;
reg  huff_make_dhuff_tb_critedge_20;
reg  huff_make_dhuff_tb_critedge_20_reg;
reg [31:0] huff_make_dhuff_tb_preheader2preheader_21;
reg [31:0] huff_make_dhuff_tb_preheader2preheader_21_reg;
reg [31:0] huff_make_dhuff_tb_preheader2_indvar10;
reg [31:0] huff_make_dhuff_tb_preheader2_indvar10_reg;
reg [31:0] huff_make_dhuff_tb_preheader2_code1;
reg [31:0] huff_make_dhuff_tb_preheader2_code1_reg;
reg [31:0] huff_make_dhuff_tb_preheader2_22;
reg [31:0] huff_make_dhuff_tb_preheader2_22_reg;
reg [31:0] huff_make_dhuff_tb_preheader2_indvarnext11;
reg [31:0] huff_make_dhuff_tb_preheader2_indvarnext11_reg;
reg  huff_make_dhuff_tb_preheader2_exitcond;
reg  huff_make_dhuff_tb_preheader2_exitcond_reg;
reg [31:0] huff_make_dhuff_tb_preheader_indvar;
reg [31:0] huff_make_dhuff_tb_preheader_indvar_reg;
reg [31:0] huff_make_dhuff_tb_preheader_p_dhtbl_ml011;
reg [31:0] huff_make_dhuff_tb_preheader_p_dhtbl_ml011_reg;
reg [31:0] huff_make_dhuff_tb_preheader_p39;
reg [31:0] huff_make_dhuff_tb_preheader_p39_reg;
reg [31:0] huff_make_dhuff_tb_preheader_l010;
reg [31:0] huff_make_dhuff_tb_preheader_l010_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_preheader_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_preheader_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_preheader_scevgep5_reg;
reg [31:0] huff_make_dhuff_tb_preheader_23;
reg [31:0] huff_make_dhuff_tb_preheader_23_reg;
reg  huff_make_dhuff_tb_preheader_24;
reg  huff_make_dhuff_tb_preheader_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_25_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_25_scevgep4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_25_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_25_scevgep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_25_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_25_26_reg;
reg [31:0] huff_make_dhuff_tb_25_27;
reg [31:0] huff_make_dhuff_tb_25_27_reg;
reg [31:0] huff_make_dhuff_tb_25_28;
reg [31:0] huff_make_dhuff_tb_25_28_reg;
reg [31:0] huff_make_dhuff_tb_25_29;
reg [31:0] huff_make_dhuff_tb_25_29_reg;
reg [31:0] huff_make_dhuff_tb_25_30;
reg [31:0] huff_make_dhuff_tb_25_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_25_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_25_31_reg;
reg [31:0] huff_make_dhuff_tb_25_32;
reg [31:0] huff_make_dhuff_tb_25_32_reg;
reg [31:0] huff_make_dhuff_tb_25_33;
reg [31:0] huff_make_dhuff_tb_25_33_reg;
reg [31:0] huff_make_dhuff_tb_34_sink;
reg [31:0] huff_make_dhuff_tb_34_sink_reg;
reg [31:0] huff_make_dhuff_tb_34_p4;
reg [31:0] huff_make_dhuff_tb_34_p4_reg;
reg [31:0] huff_make_dhuff_tb_34_p_dhtbl_ml1;
reg [31:0] huff_make_dhuff_tb_34_p_dhtbl_ml1_reg;
reg [31:0] huff_make_dhuff_tb_34_indvarnext;
reg [31:0] huff_make_dhuff_tb_34_indvarnext_reg;
reg  huff_make_dhuff_tb_34_exitcond2;
reg  huff_make_dhuff_tb_34_exitcond2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_35_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_35_36_reg;
reg [31:0] huff_make_dhuff_tb_35_37;
reg [31:0] huff_make_dhuff_tb_35_37_reg;
reg [31:0] huff_make_dhuff_tb_35_38;
reg [31:0] huff_make_dhuff_tb_35_38_reg;
wire [12:0] hana_jpg_address_a;
wire  hana_jpg_write_enable_a;
wire [7:0] hana_jpg_in_a;
wire [7:0] hana_jpg_out_a;
wire [12:0] hana_jpg_address_b;
wire  hana_jpg_write_enable_b;
wire [7:0] hana_jpg_in_b;
wire [7:0] hana_jpg_out_b;
wire [13:0] hana_bmp_address_a;
wire  hana_bmp_write_enable_a;
wire [7:0] hana_bmp_in_a;
wire [7:0] hana_bmp_out_a;
wire [13:0] hana_bmp_address_b;
wire  hana_bmp_write_enable_b;
wire [7:0] hana_bmp_in_b;
wire [7:0] hana_bmp_out_b;
wire [3:0] out_unread_marker_address_a;
wire  out_unread_marker_write_enable_a;
wire [31:0] out_unread_marker_in_a;
wire [31:0] out_unread_marker_out_a;
wire [3:0] out_unread_marker_address_b;
wire  out_unread_marker_write_enable_b;
wire [31:0] out_unread_marker_in_b;
wire [31:0] out_unread_marker_out_b;
wire [1:0] out_index_get_sof_address_a;
wire  out_index_get_sof_write_enable_a;
wire [31:0] out_index_get_sof_in_a;
wire [31:0] out_index_get_sof_out_a;
wire [1:0] out_index_get_sof_address_b;
wire  out_index_get_sof_write_enable_b;
wire [31:0] out_index_get_sof_in_b;
wire [31:0] out_index_get_sof_out_b;
wire [1:0] out_v_samp_factor_get_sof_address_a;
wire  out_v_samp_factor_get_sof_write_enable_a;
wire [31:0] out_v_samp_factor_get_sof_in_a;
wire [31:0] out_v_samp_factor_get_sof_out_a;
wire [1:0] out_v_samp_factor_get_sof_address_b;
wire  out_v_samp_factor_get_sof_write_enable_b;
wire [31:0] out_v_samp_factor_get_sof_in_b;
wire [31:0] out_v_samp_factor_get_sof_out_b;
wire [1:0] out_comp_id_get_sos_address_a;
wire  out_comp_id_get_sos_write_enable_a;
wire [31:0] out_comp_id_get_sos_in_a;
wire [31:0] out_comp_id_get_sos_out_a;
wire [1:0] out_comp_id_get_sos_address_b;
wire  out_comp_id_get_sos_write_enable_b;
wire [31:0] out_comp_id_get_sos_in_b;
wire [31:0] out_comp_id_get_sos_out_b;
wire [1:0] out_ac_tbl_no_get_sos_address_a;
wire  out_ac_tbl_no_get_sos_write_enable_a;
wire [31:0] out_ac_tbl_no_get_sos_in_a;
wire [31:0] out_ac_tbl_no_get_sos_out_a;
wire [1:0] out_ac_tbl_no_get_sos_address_b;
wire  out_ac_tbl_no_get_sos_write_enable_b;
wire [31:0] out_ac_tbl_no_get_sos_in_b;
wire [31:0] out_ac_tbl_no_get_sos_out_b;
wire [1:0] out_length_get_dht_address_a;
wire  out_length_get_dht_write_enable_a;
wire [31:0] out_length_get_dht_in_a;
wire [31:0] out_length_get_dht_out_a;
wire [1:0] out_length_get_dht_address_b;
wire  out_length_get_dht_write_enable_b;
wire [31:0] out_length_get_dht_in_b;
wire [31:0] out_length_get_dht_out_b;
wire [1:0] out_index_get_dht_address_a;
wire  out_index_get_dht_write_enable_a;
wire [31:0] out_index_get_dht_in_a;
wire [31:0] out_index_get_dht_out_a;
wire [1:0] out_index_get_dht_address_b;
wire  out_index_get_dht_write_enable_b;
wire [31:0] out_index_get_dht_in_b;
wire [31:0] out_index_get_dht_out_b;
wire [1:0] out_count_get_dht_address_a;
wire  out_count_get_dht_write_enable_a;
wire [31:0] out_count_get_dht_in_a;
wire [31:0] out_count_get_dht_out_a;
wire [1:0] out_count_get_dht_address_b;
wire  out_count_get_dht_write_enable_b;
wire [31:0] out_count_get_dht_in_b;
wire [31:0] out_count_get_dht_out_b;
wire  out_length_get_dqt_address_a;
wire  out_length_get_dqt_write_enable_a;
wire [31:0] out_length_get_dqt_in_a;
wire [31:0] out_length_get_dqt_out_a;
wire  out_length_get_dqt_address_b;
wire  out_length_get_dqt_write_enable_b;
wire [31:0] out_length_get_dqt_in_b;
wire [31:0] out_length_get_dqt_out_b;
wire  out_prec_get_dht_address_a;
wire  out_prec_get_dht_write_enable_a;
wire [31:0] out_prec_get_dht_in_a;
wire [31:0] out_prec_get_dht_out_a;
wire  out_prec_get_dht_address_b;
wire  out_prec_get_dht_write_enable_b;
wire [31:0] out_prec_get_dht_in_b;
wire [31:0] out_prec_get_dht_out_b;
wire  out_num_get_dht_address_a;
wire  out_num_get_dht_write_enable_a;
wire [31:0] out_num_get_dht_in_a;
wire [31:0] out_num_get_dht_out_a;
wire  out_num_get_dht_address_b;
wire  out_num_get_dht_write_enable_b;
wire [31:0] out_num_get_dht_in_b;
wire [31:0] out_num_get_dht_out_b;
wire [5:0] izigzag_index_address_a;
wire  izigzag_index_write_enable_a;
wire [31:0] izigzag_index_in_a;
wire [31:0] izigzag_index_out_a;
wire [5:0] izigzag_index_address_b;
wire  izigzag_index_write_enable_b;
wire [31:0] izigzag_index_in_b;
wire [31:0] izigzag_index_out_b;
wire  main_result_address_a;
wire  main_result_write_enable_a;
wire [31:0] main_result_in_a;
wire [31:0] main_result_out_a;
wire  main_result_address_b;
wire  main_result_write_enable_b;
wire [31:0] main_result_in_b;
wire [31:0] main_result_out_b;
wire  p_jinfo_image_height_address_a;
wire  p_jinfo_image_height_write_enable_a;
wire [15:0] p_jinfo_image_height_in_a;
wire [15:0] p_jinfo_image_height_out_a;
wire  p_jinfo_image_height_address_b;
wire  p_jinfo_image_height_write_enable_b;
wire [15:0] p_jinfo_image_height_in_b;
wire [15:0] p_jinfo_image_height_out_b;
wire  p_jinfo_image_width_address_a;
wire  p_jinfo_image_width_write_enable_a;
wire [15:0] p_jinfo_image_width_in_a;
wire [15:0] p_jinfo_image_width_out_a;
wire  p_jinfo_image_width_address_b;
wire  p_jinfo_image_width_write_enable_b;
wire [15:0] p_jinfo_image_width_in_b;
wire [15:0] p_jinfo_image_width_out_b;
wire [1:0] p_jinfo_comps_info_index_address_a;
wire  p_jinfo_comps_info_index_write_enable_a;
wire [7:0] p_jinfo_comps_info_index_in_a;
wire [7:0] p_jinfo_comps_info_index_out_a;
wire [1:0] p_jinfo_comps_info_index_address_b;
wire  p_jinfo_comps_info_index_write_enable_b;
wire [7:0] p_jinfo_comps_info_index_in_b;
wire [7:0] p_jinfo_comps_info_index_out_b;
wire [1:0] p_jinfo_comps_info_id_address_a;
wire  p_jinfo_comps_info_id_write_enable_a;
wire [7:0] p_jinfo_comps_info_id_in_a;
wire [7:0] p_jinfo_comps_info_id_out_a;
wire [1:0] p_jinfo_comps_info_id_address_b;
wire  p_jinfo_comps_info_id_write_enable_b;
wire [7:0] p_jinfo_comps_info_id_in_b;
wire [7:0] p_jinfo_comps_info_id_out_b;
wire [1:0] p_jinfo_comps_info_h_samp_factor_address_a;
wire  p_jinfo_comps_info_h_samp_factor_write_enable_a;
wire [7:0] p_jinfo_comps_info_h_samp_factor_in_a;
wire [7:0] p_jinfo_comps_info_h_samp_factor_out_a;
wire [1:0] p_jinfo_comps_info_h_samp_factor_address_b;
wire  p_jinfo_comps_info_h_samp_factor_write_enable_b;
wire [7:0] p_jinfo_comps_info_h_samp_factor_in_b;
wire [7:0] p_jinfo_comps_info_h_samp_factor_out_b;
wire [1:0] p_jinfo_comps_info_v_samp_factor_address_a;
wire  p_jinfo_comps_info_v_samp_factor_write_enable_a;
wire [7:0] p_jinfo_comps_info_v_samp_factor_in_a;
wire [7:0] p_jinfo_comps_info_v_samp_factor_out_a;
wire [1:0] p_jinfo_comps_info_v_samp_factor_address_b;
wire  p_jinfo_comps_info_v_samp_factor_write_enable_b;
wire [7:0] p_jinfo_comps_info_v_samp_factor_in_b;
wire [7:0] p_jinfo_comps_info_v_samp_factor_out_b;
wire [1:0] p_jinfo_comps_info_quant_tbl_no_address_a;
wire  p_jinfo_comps_info_quant_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_quant_tbl_no_address_b;
wire  p_jinfo_comps_info_quant_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_out_b;
wire [1:0] p_jinfo_comps_info_dc_tbl_no_address_a;
wire  p_jinfo_comps_info_dc_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_dc_tbl_no_address_b;
wire  p_jinfo_comps_info_dc_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_b;
wire [1:0] p_jinfo_comps_info_ac_tbl_no_address_a;
wire  p_jinfo_comps_info_ac_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_ac_tbl_no_address_b;
wire  p_jinfo_comps_info_ac_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_out_b;
wire [6:0] p_jinfo_ac_xhuff_tbl_bits_address_a;
wire  p_jinfo_ac_xhuff_tbl_bits_write_enable_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_in_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_a;
wire [6:0] p_jinfo_ac_xhuff_tbl_bits_address_b;
wire  p_jinfo_ac_xhuff_tbl_bits_write_enable_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_b;
wire [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_a;
wire  p_jinfo_ac_xhuff_tbl_huffval_write_enable_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_a;
wire [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_b;
wire  p_jinfo_ac_xhuff_tbl_huffval_write_enable_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_b;
wire [6:0] p_jinfo_dc_xhuff_tbl_bits_address_a;
wire  p_jinfo_dc_xhuff_tbl_bits_write_enable_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_in_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_a;
wire [6:0] p_jinfo_dc_xhuff_tbl_bits_address_b;
wire  p_jinfo_dc_xhuff_tbl_bits_write_enable_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_b;
wire [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_a;
wire  p_jinfo_dc_xhuff_tbl_huffval_write_enable_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_a;
wire [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_b;
wire  p_jinfo_dc_xhuff_tbl_huffval_write_enable_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_b;
wire [7:0] p_jinfo_quant_tbl_quantval_address_a;
wire  p_jinfo_quant_tbl_quantval_write_enable_a;
wire [31:0] p_jinfo_quant_tbl_quantval_in_a;
wire [31:0] p_jinfo_quant_tbl_quantval_out_a;
wire [7:0] p_jinfo_quant_tbl_quantval_address_b;
wire  p_jinfo_quant_tbl_quantval_write_enable_b;
wire [31:0] p_jinfo_quant_tbl_quantval_in_b;
wire [31:0] p_jinfo_quant_tbl_quantval_out_b;
wire [5:0] zigzag_index_address_a;
wire  zigzag_index_write_enable_a;
wire [31:0] zigzag_index_in_a;
wire [31:0] zigzag_index_out_a;
wire [5:0] zigzag_index_address_b;
wire  zigzag_index_write_enable_b;
wire [31:0] zigzag_index_in_b;
wire [31:0] zigzag_index_out_b;
wire  p_jinfo_MCUWidth_address_a;
wire  p_jinfo_MCUWidth_write_enable_a;
wire [31:0] p_jinfo_MCUWidth_in_a;
wire [31:0] p_jinfo_MCUWidth_out_a;
wire  p_jinfo_MCUWidth_address_b;
wire  p_jinfo_MCUWidth_write_enable_b;
wire [31:0] p_jinfo_MCUWidth_in_b;
wire [31:0] p_jinfo_MCUWidth_out_b;
wire [9:0] rgb_buf_address_a;
wire  rgb_buf_write_enable_a;
wire [31:0] rgb_buf_in_a;
wire [31:0] rgb_buf_out_a;
wire [9:0] rgb_buf_address_b;
wire  rgb_buf_write_enable_b;
wire [31:0] rgb_buf_in_b;
wire [31:0] rgb_buf_out_b;
wire  CurHuffReadBuf_address_a;
wire  CurHuffReadBuf_write_enable_a;
wire [31:0] CurHuffReadBuf_in_a;
wire [31:0] CurHuffReadBuf_out_a;
wire  CurHuffReadBuf_address_b;
wire  CurHuffReadBuf_write_enable_b;
wire [31:0] CurHuffReadBuf_in_b;
wire [31:0] CurHuffReadBuf_out_b;
wire [13:0] OutData_comp_buf_address_a;
wire  OutData_comp_buf_write_enable_a;
wire [7:0] OutData_comp_buf_in_a;
wire [7:0] OutData_comp_buf_out_a;
wire [13:0] OutData_comp_buf_address_b;
wire  OutData_comp_buf_write_enable_b;
wire [7:0] OutData_comp_buf_in_b;
wire [7:0] OutData_comp_buf_out_b;
wire [4:0] bit_set_mask_address_a;
wire  bit_set_mask_write_enable_a;
wire [31:0] bit_set_mask_in_a;
wire [31:0] bit_set_mask_out_a;
wire [4:0] bit_set_mask_address_b;
wire  bit_set_mask_write_enable_b;
wire [31:0] bit_set_mask_in_b;
wire [31:0] bit_set_mask_out_b;
wire [4:0] lmask_address_a;
wire  lmask_write_enable_a;
wire [31:0] lmask_in_a;
wire [31:0] lmask_out_a;
wire [4:0] lmask_address_b;
wire  lmask_write_enable_b;
wire [31:0] lmask_in_b;
wire [31:0] lmask_out_b;
wire  read_position_address_a;
wire  read_position_write_enable_a;
wire [31:0] read_position_in_a;
wire [31:0] read_position_out_a;
wire  read_position_address_b;
wire  read_position_write_enable_b;
wire [31:0] read_position_in_b;
wire [31:0] read_position_out_b;
wire  current_read_byte_address_a;
wire  current_read_byte_write_enable_a;
wire [31:0] current_read_byte_in_a;
wire [31:0] current_read_byte_out_a;
wire  current_read_byte_address_b;
wire  current_read_byte_write_enable_b;
wire [31:0] current_read_byte_in_b;
wire [31:0] current_read_byte_out_b;
wire  p_jinfo_dc_dhuff_tbl_ml_address_a;
wire  p_jinfo_dc_dhuff_tbl_ml_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_a;
wire  p_jinfo_dc_dhuff_tbl_ml_address_b;
wire  p_jinfo_dc_dhuff_tbl_ml_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_a;
wire  p_jinfo_dc_dhuff_tbl_maxcode_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_b;
wire  p_jinfo_dc_dhuff_tbl_maxcode_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_a;
wire  p_jinfo_dc_dhuff_tbl_mincode_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_b;
wire  p_jinfo_dc_dhuff_tbl_mincode_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_a;
wire  p_jinfo_dc_dhuff_tbl_valptr_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_b;
wire  p_jinfo_dc_dhuff_tbl_valptr_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_b;
wire [4:0] extend_mask_address_a;
wire  extend_mask_write_enable_a;
wire [31:0] extend_mask_in_a;
wire [31:0] extend_mask_out_a;
wire [4:0] extend_mask_address_b;
wire  extend_mask_write_enable_b;
wire [31:0] extend_mask_in_b;
wire [31:0] extend_mask_out_b;
wire  p_jinfo_ac_dhuff_tbl_ml_address_a;
wire  p_jinfo_ac_dhuff_tbl_ml_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_a;
wire  p_jinfo_ac_dhuff_tbl_ml_address_b;
wire  p_jinfo_ac_dhuff_tbl_ml_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_a;
wire  p_jinfo_ac_dhuff_tbl_maxcode_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_b;
wire  p_jinfo_ac_dhuff_tbl_maxcode_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_a;
wire  p_jinfo_ac_dhuff_tbl_mincode_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_b;
wire  p_jinfo_ac_dhuff_tbl_mincode_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_a;
wire  p_jinfo_ac_dhuff_tbl_valptr_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_b;
wire  p_jinfo_ac_dhuff_tbl_valptr_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_b;
wire [1:0] OutData_comp_vpos_address_a;
wire  OutData_comp_vpos_write_enable_a;
wire [31:0] OutData_comp_vpos_in_a;
wire [31:0] OutData_comp_vpos_out_a;
wire [1:0] OutData_comp_vpos_address_b;
wire  OutData_comp_vpos_write_enable_b;
wire [31:0] OutData_comp_vpos_in_b;
wire [31:0] OutData_comp_vpos_out_b;
wire [1:0] OutData_comp_hpos_address_a;
wire  OutData_comp_hpos_write_enable_a;
wire [31:0] OutData_comp_hpos_in_a;
wire [31:0] OutData_comp_hpos_out_a;
wire [1:0] OutData_comp_hpos_address_b;
wire  OutData_comp_hpos_write_enable_b;
wire [31:0] OutData_comp_hpos_in_b;
wire [31:0] OutData_comp_hpos_out_b;
wire [12:0] JpegFileBuf_address_a;
wire  JpegFileBuf_write_enable_a;
wire [7:0] JpegFileBuf_in_a;
wire [7:0] JpegFileBuf_out_a;
wire [12:0] JpegFileBuf_address_b;
wire  JpegFileBuf_write_enable_b;
wire [7:0] JpegFileBuf_in_b;
wire [7:0] JpegFileBuf_out_b;
reg [8:0] huff_make_dhuff_tb_0_huffsize_address_a;
reg  huff_make_dhuff_tb_0_huffsize_write_enable_a;
reg [31:0] huff_make_dhuff_tb_0_huffsize_in_a;
wire [31:0] huff_make_dhuff_tb_0_huffsize_out_a;
wire [8:0] huff_make_dhuff_tb_0_huffsize_address_b;
wire  huff_make_dhuff_tb_0_huffsize_write_enable_b;
wire [31:0] huff_make_dhuff_tb_0_huffsize_in_b;
wire [31:0] huff_make_dhuff_tb_0_huffsize_out_b;
reg [8:0] huff_make_dhuff_tb_0_huffcode_address_a;
reg  huff_make_dhuff_tb_0_huffcode_write_enable_a;
reg [31:0] huff_make_dhuff_tb_0_huffcode_in_a;
wire [31:0] huff_make_dhuff_tb_0_huffcode_out_a;
wire [8:0] huff_make_dhuff_tb_0_huffcode_address_b;
wire  huff_make_dhuff_tb_0_huffcode_write_enable_b;
wire [31:0] huff_make_dhuff_tb_0_huffcode_in_b;
wire [31:0] huff_make_dhuff_tb_0_huffcode_out_b;
wire [5:0] main_0_QuantBuffiii_address_a;
wire  main_0_QuantBuffiii_write_enable_a;
wire [31:0] main_0_QuantBuffiii_in_a;
wire [31:0] main_0_QuantBuffiii_out_a;
wire [5:0] main_0_QuantBuffiii_address_b;
wire  main_0_QuantBuffiii_write_enable_b;
wire [31:0] main_0_QuantBuffiii_in_b;
wire [31:0] main_0_QuantBuffiii_out_b;
wire [7:0] main_0_HuffBuffii_address_a;
wire  main_0_HuffBuffii_write_enable_a;
wire [31:0] main_0_HuffBuffii_in_a;
wire [31:0] main_0_HuffBuffii_out_a;
wire [7:0] main_0_HuffBuffii_address_b;
wire  main_0_HuffBuffii_write_enable_b;
wire [31:0] main_0_HuffBuffii_in_b;
wire [31:0] main_0_HuffBuffii_out_b;
wire [8:0] main_0_IDCTBuffii_address_a;
wire  main_0_IDCTBuffii_write_enable_a;
wire [31:0] main_0_IDCTBuffii_in_a;
wire [31:0] main_0_IDCTBuffii_out_a;
wire [8:0] main_0_IDCTBuffii_address_b;
wire  main_0_IDCTBuffii_write_enable_b;
wire [31:0] main_0_IDCTBuffii_in_b;
wire [31:0] main_0_IDCTBuffii_out_b;

// Local Rams


//   %huffsize = alloca [257 x i32], align 4
ram_dual_port huff_make_dhuff_tb_0_huffsize (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( huff_make_dhuff_tb_0_huffsize_address_a ),
	.address_b( huff_make_dhuff_tb_0_huffsize_address_b ),
	.wren_a( huff_make_dhuff_tb_0_huffsize_write_enable_a ),
	.wren_b( huff_make_dhuff_tb_0_huffsize_write_enable_b ),
	.data_a( huff_make_dhuff_tb_0_huffsize_in_a ),
	.data_b( huff_make_dhuff_tb_0_huffsize_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( huff_make_dhuff_tb_0_huffsize_out_a ),
	.q_b( huff_make_dhuff_tb_0_huffsize_out_b )
);
defparam huff_make_dhuff_tb_0_huffsize.width_a = 32;
defparam huff_make_dhuff_tb_0_huffsize.width_b = 32;
defparam huff_make_dhuff_tb_0_huffsize.widthad_a = 9;
defparam huff_make_dhuff_tb_0_huffsize.widthad_b = 9;
defparam huff_make_dhuff_tb_0_huffsize.width_be_a = 1;
defparam huff_make_dhuff_tb_0_huffsize.width_be_b = 1;
defparam huff_make_dhuff_tb_0_huffsize.numwords_a = 257;
defparam huff_make_dhuff_tb_0_huffsize.numwords_b = 257;
defparam huff_make_dhuff_tb_0_huffsize.latency = 1;


//   %huffcode = alloca [257 x i32], align 4
ram_dual_port huff_make_dhuff_tb_0_huffcode (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( huff_make_dhuff_tb_0_huffcode_address_a ),
	.address_b( huff_make_dhuff_tb_0_huffcode_address_b ),
	.wren_a( huff_make_dhuff_tb_0_huffcode_write_enable_a ),
	.wren_b( huff_make_dhuff_tb_0_huffcode_write_enable_b ),
	.data_a( huff_make_dhuff_tb_0_huffcode_in_a ),
	.data_b( huff_make_dhuff_tb_0_huffcode_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( huff_make_dhuff_tb_0_huffcode_out_a ),
	.q_b( huff_make_dhuff_tb_0_huffcode_out_b )
);
defparam huff_make_dhuff_tb_0_huffcode.width_a = 32;
defparam huff_make_dhuff_tb_0_huffcode.width_b = 32;
defparam huff_make_dhuff_tb_0_huffcode.widthad_a = 9;
defparam huff_make_dhuff_tb_0_huffcode.widthad_b = 9;
defparam huff_make_dhuff_tb_0_huffcode.width_be_a = 1;
defparam huff_make_dhuff_tb_0_huffcode.width_be_b = 1;
defparam huff_make_dhuff_tb_0_huffcode.numwords_a = 257;
defparam huff_make_dhuff_tb_0_huffcode.numwords_b = 257;
defparam huff_make_dhuff_tb_0_huffcode.latency = 1;


always @(posedge clk) begin
	if (reset)
		cur_state <= LEGUP_0;
	else if (memory_controller_waitrequest == 1'd1)
		cur_state <= cur_state;
	else
		cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__0_1;
LEGUP_F_huff_make_dhuff_tb_BB__0_1:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_preheader3_2;
LEGUP_F_huff_make_dhuff_tb_BB__13_17:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__13_18;
LEGUP_F_huff_make_dhuff_tb_BB__13_18:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__13_19;
LEGUP_F_huff_make_dhuff_tb_BB__13_19:
	if ((huff_make_dhuff_tb_13_orcond == 1'd1))
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__13_17;
	else if ((huff_make_dhuff_tb_13_orcond == 1'd0))
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_critedge_20;
LEGUP_F_huff_make_dhuff_tb_BB__25_28:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__25_29;
LEGUP_F_huff_make_dhuff_tb_BB__25_29:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__25_30;
LEGUP_F_huff_make_dhuff_tb_BB__25_30:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__25_31;
LEGUP_F_huff_make_dhuff_tb_BB__25_31:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__25_32;
LEGUP_F_huff_make_dhuff_tb_BB__25_32:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__25_33;
LEGUP_F_huff_make_dhuff_tb_BB__25_33:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__25_34;
LEGUP_F_huff_make_dhuff_tb_BB__25_34:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__34_35;
LEGUP_F_huff_make_dhuff_tb_BB__34_35:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__34_36;
LEGUP_F_huff_make_dhuff_tb_BB__34_36:
	if ((huff_make_dhuff_tb_34_exitcond2_reg == 1'd1))
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__35_37;
	else if ((huff_make_dhuff_tb_34_exitcond2_reg == 1'd0))
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_preheader_24;
LEGUP_F_huff_make_dhuff_tb_BB__35_37:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__35_38;
LEGUP_F_huff_make_dhuff_tb_BB__35_38:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__35_39;
LEGUP_F_huff_make_dhuff_tb_BB__35_39:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__35_40;
LEGUP_F_huff_make_dhuff_tb_BB__35_40:
		next_state = LEGUP_0;
LEGUP_F_huff_make_dhuff_tb_BB__6_11:
	if ((huff_make_dhuff_tb_6_exitcond18 == 1'd1))
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__7_12;
	else if ((huff_make_dhuff_tb_6_exitcond18 == 1'd0))
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_preheader3_2;
LEGUP_F_huff_make_dhuff_tb_BB__7_12:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__7_13;
LEGUP_F_huff_make_dhuff_tb_BB__7_13:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__7_14;
LEGUP_F_huff_make_dhuff_tb_BB__7_14:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_outer_16;
LEGUP_F_huff_make_dhuff_tb_BB__crit_edge_10:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__6_11;
LEGUP_F_huff_make_dhuff_tb_BB_critedge_20:
	if ((huff_make_dhuff_tb_critedge_20 == 1'd1))
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_preheaderpreheader_22;
	else if ((huff_make_dhuff_tb_critedge_20 == 1'd0))
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_preheader2preheader_21;
LEGUP_F_huff_make_dhuff_tb_BB_lrph_7:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_lrph_8;
LEGUP_F_huff_make_dhuff_tb_BB_lrph_8:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_lrph_9;
LEGUP_F_huff_make_dhuff_tb_BB_lrph_9:
	if ((huff_make_dhuff_tb_lrph_exitcond14_reg == 1'd1))
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__crit_edge_10;
	else if ((huff_make_dhuff_tb_lrph_exitcond14_reg == 1'd0))
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_lrph_7;
LEGUP_F_huff_make_dhuff_tb_BB_lrphpreheader_6:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_lrph_7;
LEGUP_F_huff_make_dhuff_tb_BB_outer_16:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__13_17;
LEGUP_F_huff_make_dhuff_tb_BB_outerloopexit_15:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_outer_16;
LEGUP_F_huff_make_dhuff_tb_BB_preheader2_23:
	if ((huff_make_dhuff_tb_preheader2_exitcond == 1'd1))
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_outerloopexit_15;
LEGUP_F_huff_make_dhuff_tb_BB_preheader2preheader_21:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_preheader2_23;
LEGUP_F_huff_make_dhuff_tb_BB_preheader3_2:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_preheader3_3;
LEGUP_F_huff_make_dhuff_tb_BB_preheader3_3:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_preheader3_4;
LEGUP_F_huff_make_dhuff_tb_BB_preheader3_4:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_preheader3_5;
LEGUP_F_huff_make_dhuff_tb_BB_preheader3_5:
	if ((huff_make_dhuff_tb_preheader3_2 == 1'd1))
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__6_11;
	else if ((huff_make_dhuff_tb_preheader3_2 == 1'd0))
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_lrphpreheader_6;
LEGUP_F_huff_make_dhuff_tb_BB_preheader_24:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_preheader_25;
LEGUP_F_huff_make_dhuff_tb_BB_preheader_25:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_preheader_26;
LEGUP_F_huff_make_dhuff_tb_BB_preheader_26:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_preheader_27;
LEGUP_F_huff_make_dhuff_tb_BB_preheader_27:
	if ((huff_make_dhuff_tb_preheader_24 == 1'd1))
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__34_35;
	else if ((huff_make_dhuff_tb_preheader_24 == 1'd0))
		next_state = LEGUP_F_huff_make_dhuff_tb_BB__25_28;
LEGUP_F_huff_make_dhuff_tb_BB_preheaderpreheader_22:
		next_state = LEGUP_F_huff_make_dhuff_tb_BB_preheader_24;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %indvar16 = phi i32 [ %indvar.next17, %6 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_preheader3_indvar16 = 32'd0;
	end
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %indvar16 = phi i32 [ %indvar.next17, %6 ], [ 0, %0 ]*/
	else /* if ((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__6_11) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_6_exitcond18 == 1'd0))) */ begin
		huff_make_dhuff_tb_preheader3_indvar16 = huff_make_dhuff_tb_6_indvarnext17;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader3_indvar16_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %indvar16 = phi i32 [ %indvar.next17, %6 ], [ 0, %0 ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_preheader3_indvar16_reg <= huff_make_dhuff_tb_preheader3_indvar16;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader3_indvar16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader3_indvar16_reg"); $finish; end
	end
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %indvar16 = phi i32 [ %indvar.next17, %6 ], [ 0, %0 ]*/
	else if((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__6_11) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_6_exitcond18 == 1'd0))) begin
		huff_make_dhuff_tb_preheader3_indvar16_reg <= huff_make_dhuff_tb_preheader3_indvar16;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader3_indvar16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader3_indvar16_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %p.014 = phi i32 [ %p.1.lcssa, %6 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_preheader3_p014 = 32'd0;
	end
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %p.014 = phi i32 [ %p.1.lcssa, %6 ], [ 0, %0 ]*/
	else /* if ((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__6_11) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_6_exitcond18 == 1'd0))) */ begin
		huff_make_dhuff_tb_preheader3_p014 = huff_make_dhuff_tb_6_p1lcssa_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader3_p014_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %p.014 = phi i32 [ %p.1.lcssa, %6 ], [ 0, %0 ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_preheader3_p014_reg <= huff_make_dhuff_tb_preheader3_p014;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader3_p014) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader3_p014_reg"); $finish; end
	end
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %p.014 = phi i32 [ %p.1.lcssa, %6 ], [ 0, %0 ]*/
	else if((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__6_11) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_6_exitcond18 == 1'd0))) begin
		huff_make_dhuff_tb_preheader3_p014_reg <= huff_make_dhuff_tb_preheader3_p014;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader3_p014) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader3_p014_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %i.015 = add i32 %indvar16, 1*/
		huff_make_dhuff_tb_preheader3_i015 = (huff_make_dhuff_tb_preheader3_indvar16_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader3_i015_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %i.015 = add i32 %indvar16, 1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader3_2)) begin
		huff_make_dhuff_tb_preheader3_i015_reg <= huff_make_dhuff_tb_preheader3_i015;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader3_i015) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader3_i015_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %scevgep19 = getelementptr i32* %p_xhtbl_bits, i32 %i.015*/
		huff_make_dhuff_tb_preheader3_scevgep19 = (arg_p_xhtbl_bits + (4 * huff_make_dhuff_tb_preheader3_i015_reg));
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader3_scevgep19_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %scevgep19 = getelementptr i32* %p_xhtbl_bits, i32 %i.015*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader3_3)) begin
		huff_make_dhuff_tb_preheader3_scevgep19_reg <= huff_make_dhuff_tb_preheader3_scevgep19;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader3_scevgep19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader3_scevgep19_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %1 = load i32* %scevgep19, align 4, !tbaa !1*/
		huff_make_dhuff_tb_preheader3_1 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader3_1_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %1 = load i32* %scevgep19, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader3_5)) begin
		huff_make_dhuff_tb_preheader3_1_reg <= huff_make_dhuff_tb_preheader3_1;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader3_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader3_1_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %2 = icmp slt i32 %1, 1*/
		huff_make_dhuff_tb_preheader3_2 = ($signed(huff_make_dhuff_tb_preheader3_1) < $signed(32'd1));
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader3_2_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %2 = icmp slt i32 %1, 1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader3_5)) begin
		huff_make_dhuff_tb_preheader3_2_reg <= huff_make_dhuff_tb_preheader3_2;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader3_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader3_2_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.lr.ph*/
	/*   %indvar12 = phi i32 [ 0, %.lr.ph.preheader ], [ %indvar.next13, %.lr.ph ]*/
	if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_lrphpreheader_6) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_lrph_indvar12 = 32'd0;
	end
	/* huff_make_dhuff_tb: %.lr.ph*/
	/*   %indvar12 = phi i32 [ 0, %.lr.ph.preheader ], [ %indvar.next13, %.lr.ph ]*/
	else /* if ((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_lrph_9) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_lrph_exitcond14_reg == 1'd0))) */ begin
		huff_make_dhuff_tb_lrph_indvar12 = huff_make_dhuff_tb_lrph_indvarnext13_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_lrph_indvar12_reg <= 0;
	/* huff_make_dhuff_tb: %.lr.ph*/
	/*   %indvar12 = phi i32 [ 0, %.lr.ph.preheader ], [ %indvar.next13, %.lr.ph ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_lrphpreheader_6) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_lrph_indvar12_reg <= huff_make_dhuff_tb_lrph_indvar12;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_lrph_indvar12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_lrph_indvar12_reg"); $finish; end
	end
	/* huff_make_dhuff_tb: %.lr.ph*/
	/*   %indvar12 = phi i32 [ 0, %.lr.ph.preheader ], [ %indvar.next13, %.lr.ph ]*/
	else if((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_lrph_9) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_lrph_exitcond14_reg == 1'd0))) begin
		huff_make_dhuff_tb_lrph_indvar12_reg <= huff_make_dhuff_tb_lrph_indvar12;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_lrph_indvar12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_lrph_indvar12_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.lr.ph*/
	/*   %3 = add i32 %p.014, %indvar12*/
		huff_make_dhuff_tb_lrph_3 = (huff_make_dhuff_tb_preheader3_p014_reg + huff_make_dhuff_tb_lrph_indvar12_reg);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_lrph_3_reg <= 0;
	/* huff_make_dhuff_tb: %.lr.ph*/
	/*   %3 = add i32 %p.014, %indvar12*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_lrph_7)) begin
		huff_make_dhuff_tb_lrph_3_reg <= huff_make_dhuff_tb_lrph_3;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_lrph_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_lrph_3_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.lr.ph*/
	/*   %scevgep15 = getelementptr [257 x i32]* %huffsize, i32 0, i32 %3*/
		huff_make_dhuff_tb_lrph_scevgep15 = (1'd0 + (4 * huff_make_dhuff_tb_lrph_3_reg));
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_lrph_scevgep15_reg <= 0;
	/* huff_make_dhuff_tb: %.lr.ph*/
	/*   %scevgep15 = getelementptr [257 x i32]* %huffsize, i32 0, i32 %3*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_lrph_8)) begin
		huff_make_dhuff_tb_lrph_scevgep15_reg <= huff_make_dhuff_tb_lrph_scevgep15;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_lrph_scevgep15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_lrph_scevgep15_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.lr.ph*/
	/*   %indvar.next13 = add i32 %indvar12, 1*/
		huff_make_dhuff_tb_lrph_indvarnext13 = (huff_make_dhuff_tb_lrph_indvar12_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_lrph_indvarnext13_reg <= 0;
	/* huff_make_dhuff_tb: %.lr.ph*/
	/*   %indvar.next13 = add i32 %indvar12, 1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_lrph_7)) begin
		huff_make_dhuff_tb_lrph_indvarnext13_reg <= huff_make_dhuff_tb_lrph_indvarnext13;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_lrph_indvarnext13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_lrph_indvarnext13_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.lr.ph*/
	/*   %exitcond14 = icmp eq i32 %indvar.next13, %1*/
		huff_make_dhuff_tb_lrph_exitcond14 = (huff_make_dhuff_tb_lrph_indvarnext13 == huff_make_dhuff_tb_preheader3_1_reg);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_lrph_exitcond14_reg <= 0;
	/* huff_make_dhuff_tb: %.lr.ph*/
	/*   %exitcond14 = icmp eq i32 %indvar.next13, %1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_lrph_7)) begin
		huff_make_dhuff_tb_lrph_exitcond14_reg <= huff_make_dhuff_tb_lrph_exitcond14;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_lrph_exitcond14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_lrph_exitcond14_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %._crit_edge*/
	/*   %4 = icmp sgt i32 %1, 1*/
		huff_make_dhuff_tb__crit_edge_4 = ($signed(huff_make_dhuff_tb_preheader3_1_reg) > $signed(32'd1));
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb__crit_edge_4_reg <= 0;
	/* huff_make_dhuff_tb: %._crit_edge*/
	/*   %4 = icmp sgt i32 %1, 1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__crit_edge_10)) begin
		huff_make_dhuff_tb__crit_edge_4_reg <= huff_make_dhuff_tb__crit_edge_4;
		if (start == 1'b0 && ^(huff_make_dhuff_tb__crit_edge_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__crit_edge_4_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %._crit_edge*/
	/*   %smax = select i1 %4, i32 %1, i32 1*/
		huff_make_dhuff_tb__crit_edge_smax = (huff_make_dhuff_tb__crit_edge_4 ? huff_make_dhuff_tb_preheader3_1_reg : 32'd1);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb__crit_edge_smax_reg <= 0;
	/* huff_make_dhuff_tb: %._crit_edge*/
	/*   %smax = select i1 %4, i32 %1, i32 1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__crit_edge_10)) begin
		huff_make_dhuff_tb__crit_edge_smax_reg <= huff_make_dhuff_tb__crit_edge_smax;
		if (start == 1'b0 && ^(huff_make_dhuff_tb__crit_edge_smax) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__crit_edge_smax_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %._crit_edge*/
	/*   %5 = add i32 %p.014, %smax*/
		huff_make_dhuff_tb__crit_edge_5 = (huff_make_dhuff_tb_preheader3_p014_reg + huff_make_dhuff_tb__crit_edge_smax);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb__crit_edge_5_reg <= 0;
	/* huff_make_dhuff_tb: %._crit_edge*/
	/*   %5 = add i32 %p.014, %smax*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__crit_edge_10)) begin
		huff_make_dhuff_tb__crit_edge_5_reg <= huff_make_dhuff_tb__crit_edge_5;
		if (start == 1'b0 && ^(huff_make_dhuff_tb__crit_edge_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__crit_edge_5_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %6*/
	/*   %p.1.lcssa = phi i32 [ %5, %._crit_edge ], [ %p.014, %.preheader3 ]*/
	if ((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader3_5) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_preheader3_2 == 1'd1))) begin
		huff_make_dhuff_tb_6_p1lcssa = huff_make_dhuff_tb_preheader3_p014_reg;
	end
	/* huff_make_dhuff_tb: %6*/
	/*   %p.1.lcssa = phi i32 [ %5, %._crit_edge ], [ %p.014, %.preheader3 ]*/
	else /* if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__crit_edge_10) & (memory_controller_waitrequest == 1'd0))) */ begin
		huff_make_dhuff_tb_6_p1lcssa = huff_make_dhuff_tb__crit_edge_5;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_6_p1lcssa_reg <= 0;
	/* huff_make_dhuff_tb: %6*/
	/*   %p.1.lcssa = phi i32 [ %5, %._crit_edge ], [ %p.014, %.preheader3 ]*/
	else if((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader3_5) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_preheader3_2 == 1'd1))) begin
		huff_make_dhuff_tb_6_p1lcssa_reg <= huff_make_dhuff_tb_6_p1lcssa;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_6_p1lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_6_p1lcssa_reg"); $finish; end
	end
	/* huff_make_dhuff_tb: %6*/
	/*   %p.1.lcssa = phi i32 [ %5, %._crit_edge ], [ %p.014, %.preheader3 ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__crit_edge_10) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_6_p1lcssa_reg <= huff_make_dhuff_tb_6_p1lcssa;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_6_p1lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_6_p1lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %6*/
	/*   %indvar.next17 = add i32 %indvar16, 1*/
		huff_make_dhuff_tb_6_indvarnext17 = (huff_make_dhuff_tb_preheader3_indvar16_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_6_indvarnext17_reg <= 0;
	/* huff_make_dhuff_tb: %6*/
	/*   %indvar.next17 = add i32 %indvar16, 1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__6_11)) begin
		huff_make_dhuff_tb_6_indvarnext17_reg <= huff_make_dhuff_tb_6_indvarnext17;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_6_indvarnext17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_6_indvarnext17_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %6*/
	/*   %exitcond18 = icmp eq i32 %indvar.next17, 16*/
		huff_make_dhuff_tb_6_exitcond18 = (huff_make_dhuff_tb_6_indvarnext17 == 32'd16);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_6_exitcond18_reg <= 0;
	/* huff_make_dhuff_tb: %6*/
	/*   %exitcond18 = icmp eq i32 %indvar.next17, 16*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__6_11)) begin
		huff_make_dhuff_tb_6_exitcond18_reg <= huff_make_dhuff_tb_6_exitcond18;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_6_exitcond18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_6_exitcond18_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %7*/
	/*   %8 = getelementptr inbounds [257 x i32]* %huffsize, i32 0, i32 %p.1.lcssa*/
		huff_make_dhuff_tb_7_8 = (1'd0 + (4 * huff_make_dhuff_tb_6_p1lcssa_reg));
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_7_8_reg <= 0;
	/* huff_make_dhuff_tb: %7*/
	/*   %8 = getelementptr inbounds [257 x i32]* %huffsize, i32 0, i32 %p.1.lcssa*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__7_12)) begin
		huff_make_dhuff_tb_7_8_reg <= huff_make_dhuff_tb_7_8;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_7_8_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %7*/
	/*   %9 = getelementptr inbounds [257 x i32]* %huffsize, i32 0, i32 0*/
if (reset) begin huff_make_dhuff_tb_7_9 = 0; end
		huff_make_dhuff_tb_7_9 = 1'd0;
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_7_9_reg <= 0;
	/* huff_make_dhuff_tb: %7*/
	/*   %9 = getelementptr inbounds [257 x i32]* %huffsize, i32 0, i32 0*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__7_12)) begin
		huff_make_dhuff_tb_7_9_reg <= huff_make_dhuff_tb_7_9;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_7_9_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %7*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
		huff_make_dhuff_tb_7_10 = huff_make_dhuff_tb_0_huffsize_out_a;
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_7_10_reg <= 0;
	/* huff_make_dhuff_tb: %7*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__7_14)) begin
		huff_make_dhuff_tb_7_10_reg <= huff_make_dhuff_tb_7_10;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_7_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_7_10_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.outer*/
	/*   %p.2.ph = phi i32 [ 0, %7 ], [ %15, %.outer.loopexit ]*/
	if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__7_14) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_outer_p2ph = 32'd0;
	end
	/* huff_make_dhuff_tb: %.outer*/
	/*   %p.2.ph = phi i32 [ 0, %7 ], [ %15, %.outer.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_outerloopexit_15) & (memory_controller_waitrequest == 1'd0))) */ begin
		huff_make_dhuff_tb_outer_p2ph = huff_make_dhuff_tb_13_15_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_outer_p2ph_reg <= 0;
	/* huff_make_dhuff_tb: %.outer*/
	/*   %p.2.ph = phi i32 [ 0, %7 ], [ %15, %.outer.loopexit ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__7_14) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_outer_p2ph_reg <= huff_make_dhuff_tb_outer_p2ph;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_outer_p2ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_outer_p2ph_reg"); $finish; end
	end
	/* huff_make_dhuff_tb: %.outer*/
	/*   %p.2.ph = phi i32 [ 0, %7 ], [ %15, %.outer.loopexit ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_outerloopexit_15) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_outer_p2ph_reg <= huff_make_dhuff_tb_outer_p2ph;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_outer_p2ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_outer_p2ph_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.outer*/
	/*   %code.0.ph = phi i32 [ 0, %7 ], [ %22, %.outer.loopexit ]*/
	if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__7_14) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_outer_code0ph = 32'd0;
	end
	/* huff_make_dhuff_tb: %.outer*/
	/*   %code.0.ph = phi i32 [ 0, %7 ], [ %22, %.outer.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_outerloopexit_15) & (memory_controller_waitrequest == 1'd0))) */ begin
		huff_make_dhuff_tb_outer_code0ph = huff_make_dhuff_tb_preheader2_22_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_outer_code0ph_reg <= 0;
	/* huff_make_dhuff_tb: %.outer*/
	/*   %code.0.ph = phi i32 [ 0, %7 ], [ %22, %.outer.loopexit ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__7_14) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_outer_code0ph_reg <= huff_make_dhuff_tb_outer_code0ph;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_outer_code0ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_outer_code0ph_reg"); $finish; end
	end
	/* huff_make_dhuff_tb: %.outer*/
	/*   %code.0.ph = phi i32 [ 0, %7 ], [ %22, %.outer.loopexit ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_outerloopexit_15) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_outer_code0ph_reg <= huff_make_dhuff_tb_outer_code0ph;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_outer_code0ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_outer_code0ph_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.outer*/
	/*   %size.0.ph = phi i32 [ %10, %7 ], [ %17, %.outer.loopexit ]*/
	if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__7_14) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_outer_size0ph = huff_make_dhuff_tb_7_10;
	end
	/* huff_make_dhuff_tb: %.outer*/
	/*   %size.0.ph = phi i32 [ %10, %7 ], [ %17, %.outer.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_outerloopexit_15) & (memory_controller_waitrequest == 1'd0))) */ begin
		huff_make_dhuff_tb_outer_size0ph = huff_make_dhuff_tb_13_17_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_outer_size0ph_reg <= 0;
	/* huff_make_dhuff_tb: %.outer*/
	/*   %size.0.ph = phi i32 [ %10, %7 ], [ %17, %.outer.loopexit ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__7_14) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_outer_size0ph_reg <= huff_make_dhuff_tb_outer_size0ph;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_outer_size0ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_outer_size0ph_reg"); $finish; end
	end
	/* huff_make_dhuff_tb: %.outer*/
	/*   %size.0.ph = phi i32 [ %10, %7 ], [ %17, %.outer.loopexit ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_outerloopexit_15) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_outer_size0ph_reg <= huff_make_dhuff_tb_outer_size0ph;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_outer_size0ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_outer_size0ph_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.outer*/
	/*   %11 = add i32 %p.2.ph, 1*/
		huff_make_dhuff_tb_outer_11 = (huff_make_dhuff_tb_outer_p2ph_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_outer_11_reg <= 0;
	/* huff_make_dhuff_tb: %.outer*/
	/*   %11 = add i32 %p.2.ph, 1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_outer_16)) begin
		huff_make_dhuff_tb_outer_11_reg <= huff_make_dhuff_tb_outer_11;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_outer_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_outer_11_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.outer*/
	/*   %12 = or i32 %code.0.ph, 1*/
		huff_make_dhuff_tb_outer_12 = (huff_make_dhuff_tb_outer_code0ph_reg | 32'd1);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_outer_12_reg <= 0;
	/* huff_make_dhuff_tb: %.outer*/
	/*   %12 = or i32 %code.0.ph, 1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_outer_16)) begin
		huff_make_dhuff_tb_outer_12_reg <= huff_make_dhuff_tb_outer_12;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_outer_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_outer_12_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %13*/
	/*   %indvar6 = phi i32 [ %indvar.next7, %13 ], [ 0, %.outer ]*/
	if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_outer_16) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_13_indvar6 = 32'd0;
	end
	/* huff_make_dhuff_tb: %13*/
	/*   %indvar6 = phi i32 [ %indvar.next7, %13 ], [ 0, %.outer ]*/
	else /* if ((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_19) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_13_orcond == 1'd1))) */ begin
		huff_make_dhuff_tb_13_indvar6 = huff_make_dhuff_tb_13_indvarnext7_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_13_indvar6_reg <= 0;
	/* huff_make_dhuff_tb: %13*/
	/*   %indvar6 = phi i32 [ %indvar.next7, %13 ], [ 0, %.outer ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_outer_16) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_13_indvar6_reg <= huff_make_dhuff_tb_13_indvar6;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_13_indvar6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_13_indvar6_reg"); $finish; end
	end
	/* huff_make_dhuff_tb: %13*/
	/*   %indvar6 = phi i32 [ %indvar.next7, %13 ], [ 0, %.outer ]*/
	else if((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_19) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_13_orcond == 1'd1))) begin
		huff_make_dhuff_tb_13_indvar6_reg <= huff_make_dhuff_tb_13_indvar6;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_13_indvar6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_13_indvar6_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %13*/
	/*   %14 = add i32 %p.2.ph, %indvar6*/
		huff_make_dhuff_tb_13_14 = (huff_make_dhuff_tb_outer_p2ph_reg + huff_make_dhuff_tb_13_indvar6_reg);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_13_14_reg <= 0;
	/* huff_make_dhuff_tb: %13*/
	/*   %14 = add i32 %p.2.ph, %indvar6*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_17)) begin
		huff_make_dhuff_tb_13_14_reg <= huff_make_dhuff_tb_13_14;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_13_14_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %13*/
	/*   %scevgep8 = getelementptr [257 x i32]* %huffcode, i32 0, i32 %14*/
		huff_make_dhuff_tb_13_scevgep8 = (1'd0 + (4 * huff_make_dhuff_tb_13_14_reg));
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_13_scevgep8_reg <= 0;
	/* huff_make_dhuff_tb: %13*/
	/*   %scevgep8 = getelementptr [257 x i32]* %huffcode, i32 0, i32 %14*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_18)) begin
		huff_make_dhuff_tb_13_scevgep8_reg <= huff_make_dhuff_tb_13_scevgep8;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_13_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_13_scevgep8_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %13*/
	/*   %15 = add i32 %11, %indvar6*/
		huff_make_dhuff_tb_13_15 = (huff_make_dhuff_tb_outer_11_reg + huff_make_dhuff_tb_13_indvar6_reg);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_13_15_reg <= 0;
	/* huff_make_dhuff_tb: %13*/
	/*   %15 = add i32 %11, %indvar6*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_17)) begin
		huff_make_dhuff_tb_13_15_reg <= huff_make_dhuff_tb_13_15;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_13_15_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %13*/
	/*   %scevgep9 = getelementptr [257 x i32]* %huffsize, i32 0, i32 %15*/
		huff_make_dhuff_tb_13_scevgep9 = (1'd0 + (4 * huff_make_dhuff_tb_13_15_reg));
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_13_scevgep9_reg <= 0;
	/* huff_make_dhuff_tb: %13*/
	/*   %scevgep9 = getelementptr [257 x i32]* %huffsize, i32 0, i32 %15*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_18)) begin
		huff_make_dhuff_tb_13_scevgep9_reg <= huff_make_dhuff_tb_13_scevgep9;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_13_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_13_scevgep9_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %13*/
	/*   %code.0 = add i32 %code.0.ph, %indvar6*/
		huff_make_dhuff_tb_13_code0 = (huff_make_dhuff_tb_outer_code0ph_reg + huff_make_dhuff_tb_13_indvar6_reg);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_13_code0_reg <= 0;
	/* huff_make_dhuff_tb: %13*/
	/*   %code.0 = add i32 %code.0.ph, %indvar6*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_17)) begin
		huff_make_dhuff_tb_13_code0_reg <= huff_make_dhuff_tb_13_code0;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_13_code0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_13_code0_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %13*/
	/*   %16 = add i32 %12, %indvar6*/
		huff_make_dhuff_tb_13_16 = (huff_make_dhuff_tb_outer_12_reg + huff_make_dhuff_tb_13_indvar6_reg);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_13_16_reg <= 0;
	/* huff_make_dhuff_tb: %13*/
	/*   %16 = add i32 %12, %indvar6*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_17)) begin
		huff_make_dhuff_tb_13_16_reg <= huff_make_dhuff_tb_13_16;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_13_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_13_16_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %13*/
	/*   %17 = load i32* %scevgep9, align 4, !tbaa !1*/
		huff_make_dhuff_tb_13_17 = huff_make_dhuff_tb_0_huffsize_out_a;
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_13_17_reg <= 0;
	/* huff_make_dhuff_tb: %13*/
	/*   %17 = load i32* %scevgep9, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_19)) begin
		huff_make_dhuff_tb_13_17_reg <= huff_make_dhuff_tb_13_17;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_13_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_13_17_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %13*/
	/*   %18 = icmp eq i32 %17, %size.0.ph*/
		huff_make_dhuff_tb_13_18 = (huff_make_dhuff_tb_13_17 == huff_make_dhuff_tb_outer_size0ph_reg);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_13_18_reg <= 0;
	/* huff_make_dhuff_tb: %13*/
	/*   %18 = icmp eq i32 %17, %size.0.ph*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_19)) begin
		huff_make_dhuff_tb_13_18_reg <= huff_make_dhuff_tb_13_18;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_13_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_13_18_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %13*/
	/*   %19 = icmp slt i32 %15, 257*/
		huff_make_dhuff_tb_13_19 = ($signed(huff_make_dhuff_tb_13_15) < $signed(32'd257));
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_13_19_reg <= 0;
	/* huff_make_dhuff_tb: %13*/
	/*   %19 = icmp slt i32 %15, 257*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_17)) begin
		huff_make_dhuff_tb_13_19_reg <= huff_make_dhuff_tb_13_19;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_13_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_13_19_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %13*/
	/*   %or.cond = and i1 %18, %19*/
		huff_make_dhuff_tb_13_orcond = (huff_make_dhuff_tb_13_18 & huff_make_dhuff_tb_13_19_reg);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_13_orcond_reg <= 0;
	/* huff_make_dhuff_tb: %13*/
	/*   %or.cond = and i1 %18, %19*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_19)) begin
		huff_make_dhuff_tb_13_orcond_reg <= huff_make_dhuff_tb_13_orcond;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_13_orcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_13_orcond_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %13*/
	/*   %indvar.next7 = add i32 %indvar6, 1*/
		huff_make_dhuff_tb_13_indvarnext7 = (huff_make_dhuff_tb_13_indvar6_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_13_indvarnext7_reg <= 0;
	/* huff_make_dhuff_tb: %13*/
	/*   %indvar.next7 = add i32 %indvar6, 1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_17)) begin
		huff_make_dhuff_tb_13_indvarnext7_reg <= huff_make_dhuff_tb_13_indvarnext7;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_13_indvarnext7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_13_indvarnext7_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.critedge*/
	/*   %20 = icmp eq i32 %17, 0*/
		huff_make_dhuff_tb_critedge_20 = (huff_make_dhuff_tb_13_17_reg == 32'd0);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_critedge_20_reg <= 0;
	/* huff_make_dhuff_tb: %.critedge*/
	/*   %20 = icmp eq i32 %17, 0*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_critedge_20)) begin
		huff_make_dhuff_tb_critedge_20_reg <= huff_make_dhuff_tb_critedge_20;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_critedge_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_critedge_20_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader2.preheader*/
	/*   %21 = sub i32 %17, %size.0.ph*/
		huff_make_dhuff_tb_preheader2preheader_21 = (huff_make_dhuff_tb_13_17_reg - huff_make_dhuff_tb_outer_size0ph_reg);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader2preheader_21_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader2.preheader*/
	/*   %21 = sub i32 %17, %size.0.ph*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader2preheader_21)) begin
		huff_make_dhuff_tb_preheader2preheader_21_reg <= huff_make_dhuff_tb_preheader2preheader_21;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader2preheader_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader2preheader_21_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader2*/
	/*   %indvar10 = phi i32 [ 0, %.preheader2.preheader ], [ %indvar.next11, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader2preheader_21) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_preheader2_indvar10 = 32'd0;
	end
	/* huff_make_dhuff_tb: %.preheader2*/
	/*   %indvar10 = phi i32 [ 0, %.preheader2.preheader ], [ %indvar.next11, %.preheader2 ]*/
	else /* if ((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader2_23) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_preheader2_exitcond == 1'd0))) */ begin
		huff_make_dhuff_tb_preheader2_indvar10 = huff_make_dhuff_tb_preheader2_indvarnext11;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader2_indvar10_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader2*/
	/*   %indvar10 = phi i32 [ 0, %.preheader2.preheader ], [ %indvar.next11, %.preheader2 ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader2preheader_21) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_preheader2_indvar10_reg <= huff_make_dhuff_tb_preheader2_indvar10;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader2_indvar10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader2_indvar10_reg"); $finish; end
	end
	/* huff_make_dhuff_tb: %.preheader2*/
	/*   %indvar10 = phi i32 [ 0, %.preheader2.preheader ], [ %indvar.next11, %.preheader2 ]*/
	else if((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader2_23) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_preheader2_exitcond == 1'd0))) begin
		huff_make_dhuff_tb_preheader2_indvar10_reg <= huff_make_dhuff_tb_preheader2_indvar10;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader2_indvar10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader2_indvar10_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader2*/
	/*   %code.1 = phi i32 [ %16, %.preheader2.preheader ], [ %22, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader2preheader_21) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_preheader2_code1 = huff_make_dhuff_tb_13_16_reg;
	end
	/* huff_make_dhuff_tb: %.preheader2*/
	/*   %code.1 = phi i32 [ %16, %.preheader2.preheader ], [ %22, %.preheader2 ]*/
	else /* if ((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader2_23) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_preheader2_exitcond == 1'd0))) */ begin
		huff_make_dhuff_tb_preheader2_code1 = huff_make_dhuff_tb_preheader2_22;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader2_code1_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader2*/
	/*   %code.1 = phi i32 [ %16, %.preheader2.preheader ], [ %22, %.preheader2 ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader2preheader_21) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_preheader2_code1_reg <= huff_make_dhuff_tb_preheader2_code1;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader2_code1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader2_code1_reg"); $finish; end
	end
	/* huff_make_dhuff_tb: %.preheader2*/
	/*   %code.1 = phi i32 [ %16, %.preheader2.preheader ], [ %22, %.preheader2 ]*/
	else if((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader2_23) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_preheader2_exitcond == 1'd0))) begin
		huff_make_dhuff_tb_preheader2_code1_reg <= huff_make_dhuff_tb_preheader2_code1;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader2_code1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader2_code1_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader2*/
	/*   %22 = shl i32 %code.1, 1*/
		huff_make_dhuff_tb_preheader2_22 = (huff_make_dhuff_tb_preheader2_code1_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader2_22_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader2*/
	/*   %22 = shl i32 %code.1, 1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader2_23)) begin
		huff_make_dhuff_tb_preheader2_22_reg <= huff_make_dhuff_tb_preheader2_22;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader2_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader2_22_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader2*/
	/*   %indvar.next11 = add i32 %indvar10, 1*/
		huff_make_dhuff_tb_preheader2_indvarnext11 = (huff_make_dhuff_tb_preheader2_indvar10_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader2_indvarnext11_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader2*/
	/*   %indvar.next11 = add i32 %indvar10, 1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader2_23)) begin
		huff_make_dhuff_tb_preheader2_indvarnext11_reg <= huff_make_dhuff_tb_preheader2_indvarnext11;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader2_indvarnext11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader2_indvarnext11_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader2*/
	/*   %exitcond = icmp eq i32 %indvar.next11, %21*/
		huff_make_dhuff_tb_preheader2_exitcond = (huff_make_dhuff_tb_preheader2_indvarnext11 == huff_make_dhuff_tb_preheader2preheader_21_reg);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader2_exitcond_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader2*/
	/*   %exitcond = icmp eq i32 %indvar.next11, %21*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader2_23)) begin
		huff_make_dhuff_tb_preheader2_exitcond_reg <= huff_make_dhuff_tb_preheader2_exitcond;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader2_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader2_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %indvar.next, %34 ]*/
	if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheaderpreheader_22) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_preheader_indvar = 32'd0;
	end
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %indvar.next, %34 ]*/
	else /* if ((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__34_36) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_34_exitcond2_reg == 1'd0))) */ begin
		huff_make_dhuff_tb_preheader_indvar = huff_make_dhuff_tb_34_indvarnext_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader_indvar_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %indvar.next, %34 ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheaderpreheader_22) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_preheader_indvar_reg <= huff_make_dhuff_tb_preheader_indvar;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader_indvar_reg"); $finish; end
	end
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %indvar.next, %34 ]*/
	else if((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__34_36) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_34_exitcond2_reg == 1'd0))) begin
		huff_make_dhuff_tb_preheader_indvar_reg <= huff_make_dhuff_tb_preheader_indvar;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %p_dhtbl_ml.011 = phi i32 [ 1, %.preheader.preheader ], [ %p_dhtbl_ml.1, %34 ]*/
	if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheaderpreheader_22) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_preheader_p_dhtbl_ml011 = 32'd1;
	end
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %p_dhtbl_ml.011 = phi i32 [ 1, %.preheader.preheader ], [ %p_dhtbl_ml.1, %34 ]*/
	else /* if ((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__34_36) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_34_exitcond2_reg == 1'd0))) */ begin
		huff_make_dhuff_tb_preheader_p_dhtbl_ml011 = huff_make_dhuff_tb_34_p_dhtbl_ml1_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader_p_dhtbl_ml011_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %p_dhtbl_ml.011 = phi i32 [ 1, %.preheader.preheader ], [ %p_dhtbl_ml.1, %34 ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheaderpreheader_22) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_preheader_p_dhtbl_ml011_reg <= huff_make_dhuff_tb_preheader_p_dhtbl_ml011;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader_p_dhtbl_ml011) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader_p_dhtbl_ml011_reg"); $finish; end
	end
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %p_dhtbl_ml.011 = phi i32 [ 1, %.preheader.preheader ], [ %p_dhtbl_ml.1, %34 ]*/
	else if((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__34_36) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_34_exitcond2_reg == 1'd0))) begin
		huff_make_dhuff_tb_preheader_p_dhtbl_ml011_reg <= huff_make_dhuff_tb_preheader_p_dhtbl_ml011;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader_p_dhtbl_ml011) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader_p_dhtbl_ml011_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %p.39 = phi i32 [ 0, %.preheader.preheader ], [ %p.4, %34 ]*/
	if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheaderpreheader_22) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_preheader_p39 = 32'd0;
	end
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %p.39 = phi i32 [ 0, %.preheader.preheader ], [ %p.4, %34 ]*/
	else /* if ((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__34_36) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_34_exitcond2_reg == 1'd0))) */ begin
		huff_make_dhuff_tb_preheader_p39 = huff_make_dhuff_tb_34_p4_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader_p39_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %p.39 = phi i32 [ 0, %.preheader.preheader ], [ %p.4, %34 ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheaderpreheader_22) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_preheader_p39_reg <= huff_make_dhuff_tb_preheader_p39;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader_p39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader_p39_reg"); $finish; end
	end
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %p.39 = phi i32 [ 0, %.preheader.preheader ], [ %p.4, %34 ]*/
	else if((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__34_36) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_34_exitcond2_reg == 1'd0))) begin
		huff_make_dhuff_tb_preheader_p39_reg <= huff_make_dhuff_tb_preheader_p39;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader_p39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader_p39_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %l.010 = add i32 %indvar, 1*/
		huff_make_dhuff_tb_preheader_l010 = (huff_make_dhuff_tb_preheader_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader_l010_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %l.010 = add i32 %indvar, 1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader_24)) begin
		huff_make_dhuff_tb_preheader_l010_reg <= huff_make_dhuff_tb_preheader_l010;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader_l010) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader_l010_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %scevgep = getelementptr i32* %p_dhtbl_maxcode, i32 %l.010*/
		huff_make_dhuff_tb_preheader_scevgep = (arg_p_dhtbl_maxcode + (4 * huff_make_dhuff_tb_preheader_l010_reg));
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader_scevgep_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %scevgep = getelementptr i32* %p_dhtbl_maxcode, i32 %l.010*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader_25)) begin
		huff_make_dhuff_tb_preheader_scevgep_reg <= huff_make_dhuff_tb_preheader_scevgep;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %scevgep5 = getelementptr i32* %p_xhtbl_bits, i32 %l.010*/
		huff_make_dhuff_tb_preheader_scevgep5 = (arg_p_xhtbl_bits + (4 * huff_make_dhuff_tb_preheader_l010_reg));
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader_scevgep5_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %scevgep5 = getelementptr i32* %p_xhtbl_bits, i32 %l.010*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader_25)) begin
		huff_make_dhuff_tb_preheader_scevgep5_reg <= huff_make_dhuff_tb_preheader_scevgep5;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader_scevgep5_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %23 = load i32* %scevgep5, align 4, !tbaa !1*/
		huff_make_dhuff_tb_preheader_23 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader_23_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %23 = load i32* %scevgep5, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader_27)) begin
		huff_make_dhuff_tb_preheader_23_reg <= huff_make_dhuff_tb_preheader_23;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader_23_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %24 = icmp eq i32 %23, 0*/
		huff_make_dhuff_tb_preheader_24 = (huff_make_dhuff_tb_preheader_23 == 32'd0);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_preheader_24_reg <= 0;
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %24 = icmp eq i32 %23, 0*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader_27)) begin
		huff_make_dhuff_tb_preheader_24_reg <= huff_make_dhuff_tb_preheader_24;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_preheader_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_preheader_24_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %25*/
	/*   %scevgep4 = getelementptr i32* %p_dhtbl_valptr, i32 %l.010*/
		huff_make_dhuff_tb_25_scevgep4 = (arg_p_dhtbl_valptr + (4 * huff_make_dhuff_tb_preheader_l010_reg));
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_25_scevgep4_reg <= 0;
	/* huff_make_dhuff_tb: %25*/
	/*   %scevgep4 = getelementptr i32* %p_dhtbl_valptr, i32 %l.010*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_28)) begin
		huff_make_dhuff_tb_25_scevgep4_reg <= huff_make_dhuff_tb_25_scevgep4;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_25_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_25_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %25*/
	/*   %scevgep3 = getelementptr i32* %p_dhtbl_mincode, i32 %l.010*/
		huff_make_dhuff_tb_25_scevgep3 = (arg_p_dhtbl_mincode + (4 * huff_make_dhuff_tb_preheader_l010_reg));
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_25_scevgep3_reg <= 0;
	/* huff_make_dhuff_tb: %25*/
	/*   %scevgep3 = getelementptr i32* %p_dhtbl_mincode, i32 %l.010*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_28)) begin
		huff_make_dhuff_tb_25_scevgep3_reg <= huff_make_dhuff_tb_25_scevgep3;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_25_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_25_scevgep3_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %25*/
	/*   %26 = getelementptr inbounds [257 x i32]* %huffcode, i32 0, i32 %p.39*/
		huff_make_dhuff_tb_25_26 = (1'd0 + (4 * huff_make_dhuff_tb_preheader_p39_reg));
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_25_26_reg <= 0;
	/* huff_make_dhuff_tb: %25*/
	/*   %26 = getelementptr inbounds [257 x i32]* %huffcode, i32 0, i32 %p.39*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_28)) begin
		huff_make_dhuff_tb_25_26_reg <= huff_make_dhuff_tb_25_26;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_25_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_25_26_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %25*/
	/*   %27 = load i32* %26, align 4, !tbaa !1*/
		huff_make_dhuff_tb_25_27 = huff_make_dhuff_tb_0_huffcode_out_a;
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_25_27_reg <= 0;
	/* huff_make_dhuff_tb: %25*/
	/*   %27 = load i32* %26, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_29)) begin
		huff_make_dhuff_tb_25_27_reg <= huff_make_dhuff_tb_25_27;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_25_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_25_27_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %25*/
	/*   %28 = load i32* %scevgep5, align 4, !tbaa !1*/
		huff_make_dhuff_tb_25_28 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_25_28_reg <= 0;
	/* huff_make_dhuff_tb: %25*/
	/*   %28 = load i32* %scevgep5, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_32)) begin
		huff_make_dhuff_tb_25_28_reg <= huff_make_dhuff_tb_25_28;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_25_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_25_28_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %25*/
	/*   %29 = add i32 %p.39, -1*/
		huff_make_dhuff_tb_25_29 = (huff_make_dhuff_tb_preheader_p39_reg + -32'd1);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_25_29_reg <= 0;
	/* huff_make_dhuff_tb: %25*/
	/*   %29 = add i32 %p.39, -1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_28)) begin
		huff_make_dhuff_tb_25_29_reg <= huff_make_dhuff_tb_25_29;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_25_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_25_29_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %25*/
	/*   %30 = add i32 %29, %28*/
		huff_make_dhuff_tb_25_30 = (huff_make_dhuff_tb_25_29_reg + huff_make_dhuff_tb_25_28);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_25_30_reg <= 0;
	/* huff_make_dhuff_tb: %25*/
	/*   %30 = add i32 %29, %28*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_32)) begin
		huff_make_dhuff_tb_25_30_reg <= huff_make_dhuff_tb_25_30;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_25_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_25_30_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %25*/
	/*   %31 = getelementptr inbounds [257 x i32]* %huffcode, i32 0, i32 %30*/
		huff_make_dhuff_tb_25_31 = (1'd0 + (4 * huff_make_dhuff_tb_25_30_reg));
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_25_31_reg <= 0;
	/* huff_make_dhuff_tb: %25*/
	/*   %31 = getelementptr inbounds [257 x i32]* %huffcode, i32 0, i32 %30*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_33)) begin
		huff_make_dhuff_tb_25_31_reg <= huff_make_dhuff_tb_25_31;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_25_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_25_31_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %25*/
	/*   %32 = load i32* %31, align 4, !tbaa !1*/
		huff_make_dhuff_tb_25_32 = huff_make_dhuff_tb_0_huffcode_out_a;
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_25_32_reg <= 0;
	/* huff_make_dhuff_tb: %25*/
	/*   %32 = load i32* %31, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_34)) begin
		huff_make_dhuff_tb_25_32_reg <= huff_make_dhuff_tb_25_32;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_25_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_25_32_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %25*/
	/*   %33 = add i32 %28, %p.39*/
		huff_make_dhuff_tb_25_33 = (huff_make_dhuff_tb_25_28 + huff_make_dhuff_tb_preheader_p39_reg);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_25_33_reg <= 0;
	/* huff_make_dhuff_tb: %25*/
	/*   %33 = add i32 %28, %p.39*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_32)) begin
		huff_make_dhuff_tb_25_33_reg <= huff_make_dhuff_tb_25_33;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_25_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_25_33_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %34*/
	/*   %.sink = phi i32 [ %32, %25 ], [ -1, %.preheader ]*/
	if ((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader_27) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_preheader_24 == 1'd1))) begin
		huff_make_dhuff_tb_34_sink = -32'd1;
	end
	/* huff_make_dhuff_tb: %34*/
	/*   %.sink = phi i32 [ %32, %25 ], [ -1, %.preheader ]*/
	else /* if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_34) & (memory_controller_waitrequest == 1'd0))) */ begin
		huff_make_dhuff_tb_34_sink = huff_make_dhuff_tb_25_32;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_34_sink_reg <= 0;
	/* huff_make_dhuff_tb: %34*/
	/*   %.sink = phi i32 [ %32, %25 ], [ -1, %.preheader ]*/
	else if((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader_27) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_preheader_24 == 1'd1))) begin
		huff_make_dhuff_tb_34_sink_reg <= huff_make_dhuff_tb_34_sink;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_34_sink) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_34_sink_reg"); $finish; end
	end
	/* huff_make_dhuff_tb: %34*/
	/*   %.sink = phi i32 [ %32, %25 ], [ -1, %.preheader ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_34) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_34_sink_reg <= huff_make_dhuff_tb_34_sink;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_34_sink) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_34_sink_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %34*/
	/*   %p.4 = phi i32 [ %33, %25 ], [ %p.39, %.preheader ]*/
	if ((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader_27) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_preheader_24 == 1'd1))) begin
		huff_make_dhuff_tb_34_p4 = huff_make_dhuff_tb_preheader_p39_reg;
	end
	/* huff_make_dhuff_tb: %34*/
	/*   %p.4 = phi i32 [ %33, %25 ], [ %p.39, %.preheader ]*/
	else /* if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_34) & (memory_controller_waitrequest == 1'd0))) */ begin
		huff_make_dhuff_tb_34_p4 = huff_make_dhuff_tb_25_33_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_34_p4_reg <= 0;
	/* huff_make_dhuff_tb: %34*/
	/*   %p.4 = phi i32 [ %33, %25 ], [ %p.39, %.preheader ]*/
	else if((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader_27) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_preheader_24 == 1'd1))) begin
		huff_make_dhuff_tb_34_p4_reg <= huff_make_dhuff_tb_34_p4;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_34_p4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_34_p4_reg"); $finish; end
	end
	/* huff_make_dhuff_tb: %34*/
	/*   %p.4 = phi i32 [ %33, %25 ], [ %p.39, %.preheader ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_34) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_34_p4_reg <= huff_make_dhuff_tb_34_p4;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_34_p4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_34_p4_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %34*/
	/*   %p_dhtbl_ml.1 = phi i32 [ %l.010, %25 ], [ %p_dhtbl_ml.011, %.preheader ]*/
	if ((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader_27) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_preheader_24 == 1'd1))) begin
		huff_make_dhuff_tb_34_p_dhtbl_ml1 = huff_make_dhuff_tb_preheader_p_dhtbl_ml011_reg;
	end
	/* huff_make_dhuff_tb: %34*/
	/*   %p_dhtbl_ml.1 = phi i32 [ %l.010, %25 ], [ %p_dhtbl_ml.011, %.preheader ]*/
	else /* if (((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_34) & (memory_controller_waitrequest == 1'd0))) */ begin
		huff_make_dhuff_tb_34_p_dhtbl_ml1 = huff_make_dhuff_tb_preheader_l010_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_34_p_dhtbl_ml1_reg <= 0;
	/* huff_make_dhuff_tb: %34*/
	/*   %p_dhtbl_ml.1 = phi i32 [ %l.010, %25 ], [ %p_dhtbl_ml.011, %.preheader ]*/
	else if((((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader_27) & (memory_controller_waitrequest == 1'd0)) & (huff_make_dhuff_tb_preheader_24 == 1'd1))) begin
		huff_make_dhuff_tb_34_p_dhtbl_ml1_reg <= huff_make_dhuff_tb_34_p_dhtbl_ml1;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_34_p_dhtbl_ml1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_34_p_dhtbl_ml1_reg"); $finish; end
	end
	/* huff_make_dhuff_tb: %34*/
	/*   %p_dhtbl_ml.1 = phi i32 [ %l.010, %25 ], [ %p_dhtbl_ml.011, %.preheader ]*/
	else if(((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_34) & (memory_controller_waitrequest == 1'd0))) begin
		huff_make_dhuff_tb_34_p_dhtbl_ml1_reg <= huff_make_dhuff_tb_34_p_dhtbl_ml1;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_34_p_dhtbl_ml1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_34_p_dhtbl_ml1_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %34*/
	/*   %indvar.next = add i32 %indvar, 1*/
		huff_make_dhuff_tb_34_indvarnext = (huff_make_dhuff_tb_preheader_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_34_indvarnext_reg <= 0;
	/* huff_make_dhuff_tb: %34*/
	/*   %indvar.next = add i32 %indvar, 1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__34_35)) begin
		huff_make_dhuff_tb_34_indvarnext_reg <= huff_make_dhuff_tb_34_indvarnext;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_34_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_34_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %34*/
	/*   %exitcond2 = icmp eq i32 %indvar.next, 16*/
		huff_make_dhuff_tb_34_exitcond2 = (huff_make_dhuff_tb_34_indvarnext == 32'd16);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_34_exitcond2_reg <= 0;
	/* huff_make_dhuff_tb: %34*/
	/*   %exitcond2 = icmp eq i32 %indvar.next, 16*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__34_35)) begin
		huff_make_dhuff_tb_34_exitcond2_reg <= huff_make_dhuff_tb_34_exitcond2;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_34_exitcond2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_34_exitcond2_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %35*/
	/*   %36 = getelementptr inbounds i32* %p_dhtbl_maxcode, i32 %p_dhtbl_ml.1*/
		huff_make_dhuff_tb_35_36 = (arg_p_dhtbl_maxcode + (4 * huff_make_dhuff_tb_34_p_dhtbl_ml1_reg));
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_35_36_reg <= 0;
	/* huff_make_dhuff_tb: %35*/
	/*   %36 = getelementptr inbounds i32* %p_dhtbl_maxcode, i32 %p_dhtbl_ml.1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__35_37)) begin
		huff_make_dhuff_tb_35_36_reg <= huff_make_dhuff_tb_35_36;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_35_36_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %35*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
		huff_make_dhuff_tb_35_37 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_35_37_reg <= 0;
	/* huff_make_dhuff_tb: %35*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__35_39)) begin
		huff_make_dhuff_tb_35_37_reg <= huff_make_dhuff_tb_35_37;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_35_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_35_37_reg"); $finish; end
	end
end
always @(*) begin
	/* huff_make_dhuff_tb: %35*/
	/*   %38 = add nsw i32 %37, 1*/
		huff_make_dhuff_tb_35_38 = (huff_make_dhuff_tb_35_37 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_35_38_reg <= 0;
	/* huff_make_dhuff_tb: %35*/
	/*   %38 = add nsw i32 %37, 1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__35_39)) begin
		huff_make_dhuff_tb_35_38_reg <= huff_make_dhuff_tb_35_38;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_35_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_35_38_reg"); $finish; end
	end
end
always @(*) begin
	huff_make_dhuff_tb_0_huffsize_address_a = 1'd0;
	/* huff_make_dhuff_tb: %.lr.ph*/
	/*   store i32 %i.015, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_lrph_8)) begin
		huff_make_dhuff_tb_0_huffsize_address_a = (huff_make_dhuff_tb_lrph_scevgep15 >>> 3'd2);
	end
	/* huff_make_dhuff_tb: %7*/
	/*   store i32 0, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__7_12)) begin
		huff_make_dhuff_tb_0_huffsize_address_a = (huff_make_dhuff_tb_7_8 >>> 3'd2);
	end
	/* huff_make_dhuff_tb: %7*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__7_13)) begin
		huff_make_dhuff_tb_0_huffsize_address_a = (huff_make_dhuff_tb_7_9_reg >>> 3'd2);
	end
	/* huff_make_dhuff_tb: %13*/
	/*   %17 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_18)) begin
		huff_make_dhuff_tb_0_huffsize_address_a = (huff_make_dhuff_tb_13_scevgep9 >>> 3'd2);
	end
end
always @(*) begin
	huff_make_dhuff_tb_0_huffsize_write_enable_a = 1'd0;
	/* huff_make_dhuff_tb: %.lr.ph*/
	/*   store i32 %i.015, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_lrph_8)) begin
		huff_make_dhuff_tb_0_huffsize_write_enable_a = 1'd1;
	end
	/* huff_make_dhuff_tb: %7*/
	/*   store i32 0, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__7_12)) begin
		huff_make_dhuff_tb_0_huffsize_write_enable_a = 1'd1;
	end
	/* huff_make_dhuff_tb: %7*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__7_13)) begin
		huff_make_dhuff_tb_0_huffsize_write_enable_a = 1'd0;
	end
	/* huff_make_dhuff_tb: %13*/
	/*   %17 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_18)) begin
		huff_make_dhuff_tb_0_huffsize_write_enable_a = 1'd0;
	end
end
always @(*) begin
	huff_make_dhuff_tb_0_huffsize_in_a = 1'd0;
	/* huff_make_dhuff_tb: %.lr.ph*/
	/*   store i32 %i.015, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_lrph_8)) begin
		huff_make_dhuff_tb_0_huffsize_in_a = huff_make_dhuff_tb_preheader3_i015_reg;
	end
	/* huff_make_dhuff_tb: %7*/
	/*   store i32 0, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__7_12)) begin
		huff_make_dhuff_tb_0_huffsize_in_a = 32'd0;
	end
end
always @(*) begin
	huff_make_dhuff_tb_0_huffcode_address_a = 1'd0;
	/* huff_make_dhuff_tb: %13*/
	/*   store i32 %code.0, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_18)) begin
		huff_make_dhuff_tb_0_huffcode_address_a = (huff_make_dhuff_tb_13_scevgep8 >>> 3'd2);
	end
	/* huff_make_dhuff_tb: %25*/
	/*   %27 = load i32* %26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_28)) begin
		huff_make_dhuff_tb_0_huffcode_address_a = (huff_make_dhuff_tb_25_26 >>> 3'd2);
	end
	/* huff_make_dhuff_tb: %25*/
	/*   %32 = load i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_33)) begin
		huff_make_dhuff_tb_0_huffcode_address_a = (huff_make_dhuff_tb_25_31 >>> 3'd2);
	end
end
always @(*) begin
	huff_make_dhuff_tb_0_huffcode_write_enable_a = 1'd0;
	/* huff_make_dhuff_tb: %13*/
	/*   store i32 %code.0, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_18)) begin
		huff_make_dhuff_tb_0_huffcode_write_enable_a = 1'd1;
	end
	/* huff_make_dhuff_tb: %25*/
	/*   %27 = load i32* %26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_28)) begin
		huff_make_dhuff_tb_0_huffcode_write_enable_a = 1'd0;
	end
	/* huff_make_dhuff_tb: %25*/
	/*   %32 = load i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_33)) begin
		huff_make_dhuff_tb_0_huffcode_write_enable_a = 1'd0;
	end
end
always @(*) begin
	huff_make_dhuff_tb_0_huffcode_in_a = 1'd0;
	/* huff_make_dhuff_tb: %13*/
	/*   store i32 %code.0, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__13_18)) begin
		huff_make_dhuff_tb_0_huffcode_in_a = huff_make_dhuff_tb_13_code0_reg;
	end
end


//voter


//port drive
always @(posedge clk) begin
	if (reset)
		finish <= 0;
	else if((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* huff_make_dhuff_tb: %35*/
	/*   ret i32 %p_dhtbl_ml.1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__35_40)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %1 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader3_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %23 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* huff_make_dhuff_tb: %25*/
	/*   store i32 %p.39, i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* huff_make_dhuff_tb: %25*/
	/*   store i32 %27, i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* huff_make_dhuff_tb: %25*/
	/*   %28 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* huff_make_dhuff_tb: %34*/
	/*   store i32 %.sink, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__34_35)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* huff_make_dhuff_tb: %35*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__35_37)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* huff_make_dhuff_tb: %35*/
	/*   store i32 %38, i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__35_39)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %1 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader3_3)) begin
		memory_controller_address_a = huff_make_dhuff_tb_preheader3_scevgep19;
	end
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %23 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader_25)) begin
		memory_controller_address_a = huff_make_dhuff_tb_preheader_scevgep5;
	end
	/* huff_make_dhuff_tb: %25*/
	/*   store i32 %p.39, i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_28)) begin
		memory_controller_address_a = huff_make_dhuff_tb_25_scevgep4;
	end
	/* huff_make_dhuff_tb: %25*/
	/*   store i32 %27, i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_29)) begin
		memory_controller_address_a = huff_make_dhuff_tb_25_scevgep3_reg;
	end
	/* huff_make_dhuff_tb: %25*/
	/*   %28 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_30)) begin
		memory_controller_address_a = huff_make_dhuff_tb_preheader_scevgep5_reg;
	end
	/* huff_make_dhuff_tb: %34*/
	/*   store i32 %.sink, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__34_35)) begin
		memory_controller_address_a = huff_make_dhuff_tb_preheader_scevgep_reg;
	end
	/* huff_make_dhuff_tb: %35*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__35_37)) begin
		memory_controller_address_a = huff_make_dhuff_tb_35_36;
	end
	/* huff_make_dhuff_tb: %35*/
	/*   store i32 %38, i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__35_39)) begin
		memory_controller_address_a = huff_make_dhuff_tb_35_36_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %1 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader3_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %23 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader_25)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* huff_make_dhuff_tb: %25*/
	/*   store i32 %p.39, i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_28)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* huff_make_dhuff_tb: %25*/
	/*   store i32 %27, i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_29)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* huff_make_dhuff_tb: %25*/
	/*   %28 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_30)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* huff_make_dhuff_tb: %34*/
	/*   store i32 %.sink, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__34_35)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* huff_make_dhuff_tb: %35*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__35_37)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* huff_make_dhuff_tb: %35*/
	/*   store i32 %38, i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__35_39)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* huff_make_dhuff_tb: %25*/
	/*   store i32 %p.39, i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_28)) begin
		memory_controller_in_a = huff_make_dhuff_tb_preheader_p39_reg;
	end
	/* huff_make_dhuff_tb: %25*/
	/*   store i32 %27, i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_29)) begin
		memory_controller_in_a = huff_make_dhuff_tb_25_27;
	end
	/* huff_make_dhuff_tb: %34*/
	/*   store i32 %.sink, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__34_35)) begin
		memory_controller_in_a = huff_make_dhuff_tb_34_sink_reg;
	end
	/* huff_make_dhuff_tb: %35*/
	/*   store i32 %38, i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__35_39)) begin
		memory_controller_in_a = huff_make_dhuff_tb_35_38;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* huff_make_dhuff_tb: %.preheader3*/
	/*   %1 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader3_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* huff_make_dhuff_tb: %.preheader*/
	/*   %23 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB_preheader_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* huff_make_dhuff_tb: %25*/
	/*   store i32 %p.39, i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* huff_make_dhuff_tb: %25*/
	/*   store i32 %27, i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_29)) begin
		memory_controller_size_a = 2'd2;
	end
	/* huff_make_dhuff_tb: %25*/
	/*   %28 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__25_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* huff_make_dhuff_tb: %34*/
	/*   store i32 %.sink, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__34_35)) begin
		memory_controller_size_a = 2'd2;
	end
	/* huff_make_dhuff_tb: %35*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__35_37)) begin
		memory_controller_size_a = 2'd2;
	end
	/* huff_make_dhuff_tb: %35*/
	/*   store i32 %38, i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__35_39)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if (reset)
		return_val <= 0;
	else if((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* huff_make_dhuff_tb: %35*/
	/*   ret i32 %p_dhtbl_ml.1*/
	else if((cur_state == LEGUP_F_huff_make_dhuff_tb_BB__35_40)) begin
		return_val <= huff_make_dhuff_tb_34_p_dhtbl_ml1_reg;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_34_p_dhtbl_ml1_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module DecodeHuffman
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_Xhuff_huffval,
	arg_Dhuff_ml,
	arg_Dhuff_maxcode,
	arg_Dhuff_mincode,
	arg_Dhuff_valptr
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__0_2 = 6'd2;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__0_3 = 6'd3;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__crit_edgei_4 = 6'd4;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__crit_edgei_5 = 6'd5;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__crit_edgei_6 = 6'd6;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__3_7 = 6'd7;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__3_8 = 6'd8;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__3_9 = 6'd9;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__3_10 = 6'd10;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__3_11 = 6'd11;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__3_12 = 6'd12;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__8_13 = 6'd13;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__8_14 = 6'd14;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__8_15 = 6'd15;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__8_16 = 6'd16;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__12_17 = 6'd17;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__14_18 = 6'd18;
parameter [5:0] LEGUP_F_DecodeHuffman_BB_pgetcexiti_19 = 6'd19;
parameter [5:0] LEGUP_F_DecodeHuffman_BB_pgetcexiti_20 = 6'd20;
parameter [5:0] LEGUP_F_DecodeHuffman_BB_buf_getbexit_21 = 6'd21;
parameter [5:0] LEGUP_F_DecodeHuffman_BB_buf_getbexit_22 = 6'd22;
parameter [5:0] LEGUP_F_DecodeHuffman_BB_buf_getbexit_23 = 6'd23;
parameter [5:0] LEGUP_F_DecodeHuffman_BB_buf_getbexit_24 = 6'd24;
parameter [5:0] LEGUP_F_DecodeHuffman_BB_lrphpreheader_25 = 6'd25;
parameter [5:0] LEGUP_F_DecodeHuffman_BB_lrph_26 = 6'd26;
parameter [5:0] LEGUP_F_DecodeHuffman_BB_lrph_27 = 6'd27;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__28_28 = 6'd28;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__28_29 = 6'd29;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__28_30 = 6'd30;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__28_31 = 6'd31;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__28_32 = 6'd32;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__28_33 = 6'd33;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__33_34 = 6'd34;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__33_35 = 6'd35;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__33_36 = 6'd36;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__33_37 = 6'd37;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__37_38 = 6'd38;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__39_39 = 6'd39;
parameter [5:0] LEGUP_F_DecodeHuffman_BB_pgetcexiti6_40 = 6'd40;
parameter [5:0] LEGUP_F_DecodeHuffman_BB_pgetcexiti6_41 = 6'd41;
parameter [5:0] LEGUP_F_DecodeHuffman_BB_buf_getbexit9_42 = 6'd42;
parameter [5:0] LEGUP_F_DecodeHuffman_BB_buf_getbexit9_43 = 6'd43;
parameter [5:0] LEGUP_F_DecodeHuffman_BB_buf_getbexit9_44 = 6'd44;
parameter [5:0] LEGUP_F_DecodeHuffman_BB_buf_getbexit9_45 = 6'd45;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__crit_edgeloopexit_46 = 6'd46;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__crit_edge_47 = 6'd47;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__crit_edge_48 = 6'd48;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__crit_edge_49 = 6'd49;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__52_50 = 6'd50;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__52_51 = 6'd51;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__52_52 = 6'd52;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__52_53 = 6'd53;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__52_54 = 6'd54;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__52_55 = 6'd55;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__52_56 = 6'd56;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__52_57 = 6'd57;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__52_58 = 6'd58;
parameter [5:0] LEGUP_F_DecodeHuffman_BB__63_59 = 6'd59;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
integer i;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_Xhuff_huffval;
input [31:0] arg_Dhuff_ml;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_Dhuff_maxcode;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_Dhuff_mincode;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_Dhuff_valptr;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] DecodeHuffman_0_1;
reg [31:0] DecodeHuffman_0_1_reg;
reg  DecodeHuffman_0_2;
reg  DecodeHuffman_0_2_reg;
reg [31:0] DecodeHuffman__crit_edgei_prei;
reg [31:0] DecodeHuffman__crit_edgei_prei_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_3_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_3_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_3_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_3_5_reg;
reg [7:0] DecodeHuffman_3_6;
reg [7:0] DecodeHuffman_3_6_reg;
reg  DecodeHuffman_3_7;
reg  DecodeHuffman_3_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_8_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_8_9_reg;
reg [7:0] DecodeHuffman_8_10;
reg [7:0] DecodeHuffman_8_10_reg;
reg  DecodeHuffman_8_11;
reg  DecodeHuffman_8_11_reg;
reg [7:0] DecodeHuffman_14_temp0inii;
reg [7:0] DecodeHuffman_14_temp0inii_reg;
reg [31:0] DecodeHuffman_14_temp0ii;
reg [31:0] DecodeHuffman_14_temp0ii_reg;
reg [31:0] DecodeHuffman_pgetcexiti_0ii;
reg [31:0] DecodeHuffman_pgetcexiti_0ii_reg;
reg [31:0] DecodeHuffman_buf_getbexit_15;
reg [31:0] DecodeHuffman_buf_getbexit_15_reg;
reg [31:0] DecodeHuffman_buf_getbexit_16;
reg [31:0] DecodeHuffman_buf_getbexit_16_reg;
reg [31:0] DecodeHuffman_buf_getbexit_17;
reg [31:0] DecodeHuffman_buf_getbexit_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_buf_getbexit_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_buf_getbexit_18_reg;
reg [31:0] DecodeHuffman_buf_getbexit_19;
reg [31:0] DecodeHuffman_buf_getbexit_19_reg;
reg [31:0] DecodeHuffman_buf_getbexit_20;
reg [31:0] DecodeHuffman_buf_getbexit_20_reg;
reg  DecodeHuffman_buf_getbexit_noti;
reg  DecodeHuffman_buf_getbexit_noti_reg;
reg [31:0] DecodeHuffman_buf_getbexit_i;
reg [31:0] DecodeHuffman_buf_getbexit_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_buf_getbexit_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_buf_getbexit_21_reg;
reg [31:0] DecodeHuffman_buf_getbexit_22;
reg [31:0] DecodeHuffman_buf_getbexit_22_reg;
reg  DecodeHuffman_buf_getbexit_23;
reg  DecodeHuffman_buf_getbexit_23_reg;
reg [31:0] DecodeHuffman_lrph_indvar;
reg [31:0] DecodeHuffman_lrph_indvar_reg;
reg [31:0] DecodeHuffman_lrph_prei1;
reg [31:0] DecodeHuffman_lrph_prei1_reg;
reg [31:0] DecodeHuffman_lrph_24;
reg [31:0] DecodeHuffman_lrph_24_reg;
reg [31:0] DecodeHuffman_lrph_code011;
reg [31:0] DecodeHuffman_lrph_code011_reg;
reg [31:0] DecodeHuffman_lrph_25;
reg [31:0] DecodeHuffman_lrph_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_lrph_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_lrph_scevgep_reg;
reg [31:0] DecodeHuffman_lrph_26;
reg [31:0] DecodeHuffman_lrph_26_reg;
reg  DecodeHuffman_lrph_27;
reg  DecodeHuffman_lrph_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_28_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_28_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_28_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_28_30_reg;
reg [7:0] DecodeHuffman_28_31;
reg [7:0] DecodeHuffman_28_31_reg;
reg  DecodeHuffman_28_32;
reg  DecodeHuffman_28_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_33_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_33_34_reg;
reg [7:0] DecodeHuffman_33_35;
reg [7:0] DecodeHuffman_33_35_reg;
reg  DecodeHuffman_33_36;
reg  DecodeHuffman_33_36_reg;
reg [7:0] DecodeHuffman_39_temp0inii3;
reg [7:0] DecodeHuffman_39_temp0inii3_reg;
reg [31:0] DecodeHuffman_39_temp0ii4;
reg [31:0] DecodeHuffman_39_temp0ii4_reg;
reg [31:0] DecodeHuffman_pgetcexiti6_0ii5;
reg [31:0] DecodeHuffman_pgetcexiti6_0ii5_reg;
reg [31:0] DecodeHuffman_buf_getbexit9_40;
reg [31:0] DecodeHuffman_buf_getbexit9_40_reg;
reg [31:0] DecodeHuffman_buf_getbexit9_41;
reg [31:0] DecodeHuffman_buf_getbexit9_41_reg;
reg [31:0] DecodeHuffman_buf_getbexit9_42;
reg [31:0] DecodeHuffman_buf_getbexit9_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_buf_getbexit9_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_buf_getbexit9_43_reg;
reg [31:0] DecodeHuffman_buf_getbexit9_44;
reg [31:0] DecodeHuffman_buf_getbexit9_44_reg;
reg [31:0] DecodeHuffman_buf_getbexit9_45;
reg [31:0] DecodeHuffman_buf_getbexit9_45_reg;
reg  DecodeHuffman_buf_getbexit9_noti7;
reg  DecodeHuffman_buf_getbexit9_noti7_reg;
reg [31:0] DecodeHuffman_buf_getbexit9_i8;
reg [31:0] DecodeHuffman_buf_getbexit9_i8_reg;
reg [31:0] DecodeHuffman_buf_getbexit9_46;
reg [31:0] DecodeHuffman_buf_getbexit9_46_reg;
reg [31:0] DecodeHuffman_buf_getbexit9_47;
reg [31:0] DecodeHuffman_buf_getbexit9_47_reg;
reg  DecodeHuffman_buf_getbexit9_48;
reg  DecodeHuffman_buf_getbexit9_48_reg;
reg [31:0] DecodeHuffman_buf_getbexit9_indvarnext;
reg [31:0] DecodeHuffman_buf_getbexit9_indvarnext_reg;
reg [31:0] DecodeHuffman__crit_edge_code0lcssa;
reg [31:0] DecodeHuffman__crit_edge_code0lcssa_reg;
reg [31:0] DecodeHuffman__crit_edge_l0lcssa;
reg [31:0] DecodeHuffman__crit_edge_l0lcssa_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman__crit_edge_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman__crit_edge_49_reg;
reg [31:0] DecodeHuffman__crit_edge_50;
reg [31:0] DecodeHuffman__crit_edge_50_reg;
reg  DecodeHuffman__crit_edge_51;
reg  DecodeHuffman__crit_edge_51_reg;
reg [31:0] DecodeHuffman_52_53;
reg [31:0] DecodeHuffman_52_53_reg;
reg [31:0] DecodeHuffman_52_54;
reg [31:0] DecodeHuffman_52_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_52_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_52_55_reg;
reg [31:0] DecodeHuffman_52_56;
reg [31:0] DecodeHuffman_52_56_reg;
reg [31:0] DecodeHuffman_52_57;
reg [31:0] DecodeHuffman_52_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_52_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_52_58_reg;
reg [31:0] DecodeHuffman_52_59;
reg [31:0] DecodeHuffman_52_59_reg;
reg [31:0] DecodeHuffman_52_60;
reg [31:0] DecodeHuffman_52_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_52_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_52_61_reg;
reg [31:0] DecodeHuffman_52_62;
reg [31:0] DecodeHuffman_52_62_reg;
wire [12:0] hana_jpg_address_a;
wire  hana_jpg_write_enable_a;
wire [7:0] hana_jpg_in_a;
wire [7:0] hana_jpg_out_a;
wire [12:0] hana_jpg_address_b;
wire  hana_jpg_write_enable_b;
wire [7:0] hana_jpg_in_b;
wire [7:0] hana_jpg_out_b;
wire [13:0] hana_bmp_address_a;
wire  hana_bmp_write_enable_a;
wire [7:0] hana_bmp_in_a;
wire [7:0] hana_bmp_out_a;
wire [13:0] hana_bmp_address_b;
wire  hana_bmp_write_enable_b;
wire [7:0] hana_bmp_in_b;
wire [7:0] hana_bmp_out_b;
wire [3:0] out_unread_marker_address_a;
wire  out_unread_marker_write_enable_a;
wire [31:0] out_unread_marker_in_a;
wire [31:0] out_unread_marker_out_a;
wire [3:0] out_unread_marker_address_b;
wire  out_unread_marker_write_enable_b;
wire [31:0] out_unread_marker_in_b;
wire [31:0] out_unread_marker_out_b;
wire [1:0] out_index_get_sof_address_a;
wire  out_index_get_sof_write_enable_a;
wire [31:0] out_index_get_sof_in_a;
wire [31:0] out_index_get_sof_out_a;
wire [1:0] out_index_get_sof_address_b;
wire  out_index_get_sof_write_enable_b;
wire [31:0] out_index_get_sof_in_b;
wire [31:0] out_index_get_sof_out_b;
wire [1:0] out_v_samp_factor_get_sof_address_a;
wire  out_v_samp_factor_get_sof_write_enable_a;
wire [31:0] out_v_samp_factor_get_sof_in_a;
wire [31:0] out_v_samp_factor_get_sof_out_a;
wire [1:0] out_v_samp_factor_get_sof_address_b;
wire  out_v_samp_factor_get_sof_write_enable_b;
wire [31:0] out_v_samp_factor_get_sof_in_b;
wire [31:0] out_v_samp_factor_get_sof_out_b;
wire [1:0] out_comp_id_get_sos_address_a;
wire  out_comp_id_get_sos_write_enable_a;
wire [31:0] out_comp_id_get_sos_in_a;
wire [31:0] out_comp_id_get_sos_out_a;
wire [1:0] out_comp_id_get_sos_address_b;
wire  out_comp_id_get_sos_write_enable_b;
wire [31:0] out_comp_id_get_sos_in_b;
wire [31:0] out_comp_id_get_sos_out_b;
wire [1:0] out_ac_tbl_no_get_sos_address_a;
wire  out_ac_tbl_no_get_sos_write_enable_a;
wire [31:0] out_ac_tbl_no_get_sos_in_a;
wire [31:0] out_ac_tbl_no_get_sos_out_a;
wire [1:0] out_ac_tbl_no_get_sos_address_b;
wire  out_ac_tbl_no_get_sos_write_enable_b;
wire [31:0] out_ac_tbl_no_get_sos_in_b;
wire [31:0] out_ac_tbl_no_get_sos_out_b;
wire [1:0] out_length_get_dht_address_a;
wire  out_length_get_dht_write_enable_a;
wire [31:0] out_length_get_dht_in_a;
wire [31:0] out_length_get_dht_out_a;
wire [1:0] out_length_get_dht_address_b;
wire  out_length_get_dht_write_enable_b;
wire [31:0] out_length_get_dht_in_b;
wire [31:0] out_length_get_dht_out_b;
wire [1:0] out_index_get_dht_address_a;
wire  out_index_get_dht_write_enable_a;
wire [31:0] out_index_get_dht_in_a;
wire [31:0] out_index_get_dht_out_a;
wire [1:0] out_index_get_dht_address_b;
wire  out_index_get_dht_write_enable_b;
wire [31:0] out_index_get_dht_in_b;
wire [31:0] out_index_get_dht_out_b;
wire [1:0] out_count_get_dht_address_a;
wire  out_count_get_dht_write_enable_a;
wire [31:0] out_count_get_dht_in_a;
wire [31:0] out_count_get_dht_out_a;
wire [1:0] out_count_get_dht_address_b;
wire  out_count_get_dht_write_enable_b;
wire [31:0] out_count_get_dht_in_b;
wire [31:0] out_count_get_dht_out_b;
wire  out_length_get_dqt_address_a;
wire  out_length_get_dqt_write_enable_a;
wire [31:0] out_length_get_dqt_in_a;
wire [31:0] out_length_get_dqt_out_a;
wire  out_length_get_dqt_address_b;
wire  out_length_get_dqt_write_enable_b;
wire [31:0] out_length_get_dqt_in_b;
wire [31:0] out_length_get_dqt_out_b;
wire  out_prec_get_dht_address_a;
wire  out_prec_get_dht_write_enable_a;
wire [31:0] out_prec_get_dht_in_a;
wire [31:0] out_prec_get_dht_out_a;
wire  out_prec_get_dht_address_b;
wire  out_prec_get_dht_write_enable_b;
wire [31:0] out_prec_get_dht_in_b;
wire [31:0] out_prec_get_dht_out_b;
wire  out_num_get_dht_address_a;
wire  out_num_get_dht_write_enable_a;
wire [31:0] out_num_get_dht_in_a;
wire [31:0] out_num_get_dht_out_a;
wire  out_num_get_dht_address_b;
wire  out_num_get_dht_write_enable_b;
wire [31:0] out_num_get_dht_in_b;
wire [31:0] out_num_get_dht_out_b;
wire [5:0] izigzag_index_address_a;
wire  izigzag_index_write_enable_a;
wire [31:0] izigzag_index_in_a;
wire [31:0] izigzag_index_out_a;
wire [5:0] izigzag_index_address_b;
wire  izigzag_index_write_enable_b;
wire [31:0] izigzag_index_in_b;
wire [31:0] izigzag_index_out_b;
wire  main_result_address_a;
wire  main_result_write_enable_a;
wire [31:0] main_result_in_a;
wire [31:0] main_result_out_a;
wire  main_result_address_b;
wire  main_result_write_enable_b;
wire [31:0] main_result_in_b;
wire [31:0] main_result_out_b;
wire  p_jinfo_image_height_address_a;
wire  p_jinfo_image_height_write_enable_a;
wire [15:0] p_jinfo_image_height_in_a;
wire [15:0] p_jinfo_image_height_out_a;
wire  p_jinfo_image_height_address_b;
wire  p_jinfo_image_height_write_enable_b;
wire [15:0] p_jinfo_image_height_in_b;
wire [15:0] p_jinfo_image_height_out_b;
wire  p_jinfo_image_width_address_a;
wire  p_jinfo_image_width_write_enable_a;
wire [15:0] p_jinfo_image_width_in_a;
wire [15:0] p_jinfo_image_width_out_a;
wire  p_jinfo_image_width_address_b;
wire  p_jinfo_image_width_write_enable_b;
wire [15:0] p_jinfo_image_width_in_b;
wire [15:0] p_jinfo_image_width_out_b;
wire [1:0] p_jinfo_comps_info_index_address_a;
wire  p_jinfo_comps_info_index_write_enable_a;
wire [7:0] p_jinfo_comps_info_index_in_a;
wire [7:0] p_jinfo_comps_info_index_out_a;
wire [1:0] p_jinfo_comps_info_index_address_b;
wire  p_jinfo_comps_info_index_write_enable_b;
wire [7:0] p_jinfo_comps_info_index_in_b;
wire [7:0] p_jinfo_comps_info_index_out_b;
wire [1:0] p_jinfo_comps_info_id_address_a;
wire  p_jinfo_comps_info_id_write_enable_a;
wire [7:0] p_jinfo_comps_info_id_in_a;
wire [7:0] p_jinfo_comps_info_id_out_a;
wire [1:0] p_jinfo_comps_info_id_address_b;
wire  p_jinfo_comps_info_id_write_enable_b;
wire [7:0] p_jinfo_comps_info_id_in_b;
wire [7:0] p_jinfo_comps_info_id_out_b;
wire [1:0] p_jinfo_comps_info_h_samp_factor_address_a;
wire  p_jinfo_comps_info_h_samp_factor_write_enable_a;
wire [7:0] p_jinfo_comps_info_h_samp_factor_in_a;
wire [7:0] p_jinfo_comps_info_h_samp_factor_out_a;
wire [1:0] p_jinfo_comps_info_h_samp_factor_address_b;
wire  p_jinfo_comps_info_h_samp_factor_write_enable_b;
wire [7:0] p_jinfo_comps_info_h_samp_factor_in_b;
wire [7:0] p_jinfo_comps_info_h_samp_factor_out_b;
wire [1:0] p_jinfo_comps_info_v_samp_factor_address_a;
wire  p_jinfo_comps_info_v_samp_factor_write_enable_a;
wire [7:0] p_jinfo_comps_info_v_samp_factor_in_a;
wire [7:0] p_jinfo_comps_info_v_samp_factor_out_a;
wire [1:0] p_jinfo_comps_info_v_samp_factor_address_b;
wire  p_jinfo_comps_info_v_samp_factor_write_enable_b;
wire [7:0] p_jinfo_comps_info_v_samp_factor_in_b;
wire [7:0] p_jinfo_comps_info_v_samp_factor_out_b;
wire [1:0] p_jinfo_comps_info_quant_tbl_no_address_a;
wire  p_jinfo_comps_info_quant_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_quant_tbl_no_address_b;
wire  p_jinfo_comps_info_quant_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_out_b;
wire [1:0] p_jinfo_comps_info_dc_tbl_no_address_a;
wire  p_jinfo_comps_info_dc_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_dc_tbl_no_address_b;
wire  p_jinfo_comps_info_dc_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_b;
wire [1:0] p_jinfo_comps_info_ac_tbl_no_address_a;
wire  p_jinfo_comps_info_ac_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_ac_tbl_no_address_b;
wire  p_jinfo_comps_info_ac_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_out_b;
wire [6:0] p_jinfo_ac_xhuff_tbl_bits_address_a;
wire  p_jinfo_ac_xhuff_tbl_bits_write_enable_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_in_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_a;
wire [6:0] p_jinfo_ac_xhuff_tbl_bits_address_b;
wire  p_jinfo_ac_xhuff_tbl_bits_write_enable_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_b;
wire [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_a;
wire  p_jinfo_ac_xhuff_tbl_huffval_write_enable_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_a;
wire [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_b;
wire  p_jinfo_ac_xhuff_tbl_huffval_write_enable_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_b;
wire [6:0] p_jinfo_dc_xhuff_tbl_bits_address_a;
wire  p_jinfo_dc_xhuff_tbl_bits_write_enable_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_in_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_a;
wire [6:0] p_jinfo_dc_xhuff_tbl_bits_address_b;
wire  p_jinfo_dc_xhuff_tbl_bits_write_enable_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_b;
wire [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_a;
wire  p_jinfo_dc_xhuff_tbl_huffval_write_enable_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_a;
wire [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_b;
wire  p_jinfo_dc_xhuff_tbl_huffval_write_enable_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_b;
wire [7:0] p_jinfo_quant_tbl_quantval_address_a;
wire  p_jinfo_quant_tbl_quantval_write_enable_a;
wire [31:0] p_jinfo_quant_tbl_quantval_in_a;
wire [31:0] p_jinfo_quant_tbl_quantval_out_a;
wire [7:0] p_jinfo_quant_tbl_quantval_address_b;
wire  p_jinfo_quant_tbl_quantval_write_enable_b;
wire [31:0] p_jinfo_quant_tbl_quantval_in_b;
wire [31:0] p_jinfo_quant_tbl_quantval_out_b;
wire [5:0] zigzag_index_address_a;
wire  zigzag_index_write_enable_a;
wire [31:0] zigzag_index_in_a;
wire [31:0] zigzag_index_out_a;
wire [5:0] zigzag_index_address_b;
wire  zigzag_index_write_enable_b;
wire [31:0] zigzag_index_in_b;
wire [31:0] zigzag_index_out_b;
wire  p_jinfo_MCUWidth_address_a;
wire  p_jinfo_MCUWidth_write_enable_a;
wire [31:0] p_jinfo_MCUWidth_in_a;
wire [31:0] p_jinfo_MCUWidth_out_a;
wire  p_jinfo_MCUWidth_address_b;
wire  p_jinfo_MCUWidth_write_enable_b;
wire [31:0] p_jinfo_MCUWidth_in_b;
wire [31:0] p_jinfo_MCUWidth_out_b;
wire [9:0] rgb_buf_address_a;
wire  rgb_buf_write_enable_a;
wire [31:0] rgb_buf_in_a;
wire [31:0] rgb_buf_out_a;
wire [9:0] rgb_buf_address_b;
wire  rgb_buf_write_enable_b;
wire [31:0] rgb_buf_in_b;
wire [31:0] rgb_buf_out_b;
wire  CurHuffReadBuf_address_a;
wire  CurHuffReadBuf_write_enable_a;
wire [31:0] CurHuffReadBuf_in_a;
wire [31:0] CurHuffReadBuf_out_a;
wire  CurHuffReadBuf_address_b;
wire  CurHuffReadBuf_write_enable_b;
wire [31:0] CurHuffReadBuf_in_b;
wire [31:0] CurHuffReadBuf_out_b;
wire [13:0] OutData_comp_buf_address_a;
wire  OutData_comp_buf_write_enable_a;
wire [7:0] OutData_comp_buf_in_a;
wire [7:0] OutData_comp_buf_out_a;
wire [13:0] OutData_comp_buf_address_b;
wire  OutData_comp_buf_write_enable_b;
wire [7:0] OutData_comp_buf_in_b;
wire [7:0] OutData_comp_buf_out_b;
wire [4:0] bit_set_mask_address_a;
wire  bit_set_mask_write_enable_a;
wire [31:0] bit_set_mask_in_a;
wire [31:0] bit_set_mask_out_a;
wire [4:0] bit_set_mask_address_b;
wire  bit_set_mask_write_enable_b;
wire [31:0] bit_set_mask_in_b;
wire [31:0] bit_set_mask_out_b;
wire [4:0] lmask_address_a;
wire  lmask_write_enable_a;
wire [31:0] lmask_in_a;
wire [31:0] lmask_out_a;
wire [4:0] lmask_address_b;
wire  lmask_write_enable_b;
wire [31:0] lmask_in_b;
wire [31:0] lmask_out_b;
wire  read_position_address_a;
wire  read_position_write_enable_a;
wire [31:0] read_position_in_a;
wire [31:0] read_position_out_a;
wire  read_position_address_b;
wire  read_position_write_enable_b;
wire [31:0] read_position_in_b;
wire [31:0] read_position_out_b;
wire  current_read_byte_address_a;
wire  current_read_byte_write_enable_a;
wire [31:0] current_read_byte_in_a;
wire [31:0] current_read_byte_out_a;
wire  current_read_byte_address_b;
wire  current_read_byte_write_enable_b;
wire [31:0] current_read_byte_in_b;
wire [31:0] current_read_byte_out_b;
wire  p_jinfo_dc_dhuff_tbl_ml_address_a;
wire  p_jinfo_dc_dhuff_tbl_ml_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_a;
wire  p_jinfo_dc_dhuff_tbl_ml_address_b;
wire  p_jinfo_dc_dhuff_tbl_ml_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_a;
wire  p_jinfo_dc_dhuff_tbl_maxcode_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_b;
wire  p_jinfo_dc_dhuff_tbl_maxcode_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_a;
wire  p_jinfo_dc_dhuff_tbl_mincode_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_b;
wire  p_jinfo_dc_dhuff_tbl_mincode_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_a;
wire  p_jinfo_dc_dhuff_tbl_valptr_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_b;
wire  p_jinfo_dc_dhuff_tbl_valptr_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_b;
wire [4:0] extend_mask_address_a;
wire  extend_mask_write_enable_a;
wire [31:0] extend_mask_in_a;
wire [31:0] extend_mask_out_a;
wire [4:0] extend_mask_address_b;
wire  extend_mask_write_enable_b;
wire [31:0] extend_mask_in_b;
wire [31:0] extend_mask_out_b;
wire  p_jinfo_ac_dhuff_tbl_ml_address_a;
wire  p_jinfo_ac_dhuff_tbl_ml_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_a;
wire  p_jinfo_ac_dhuff_tbl_ml_address_b;
wire  p_jinfo_ac_dhuff_tbl_ml_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_a;
wire  p_jinfo_ac_dhuff_tbl_maxcode_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_b;
wire  p_jinfo_ac_dhuff_tbl_maxcode_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_a;
wire  p_jinfo_ac_dhuff_tbl_mincode_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_b;
wire  p_jinfo_ac_dhuff_tbl_mincode_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_a;
wire  p_jinfo_ac_dhuff_tbl_valptr_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_b;
wire  p_jinfo_ac_dhuff_tbl_valptr_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_b;
wire [1:0] OutData_comp_vpos_address_a;
wire  OutData_comp_vpos_write_enable_a;
wire [31:0] OutData_comp_vpos_in_a;
wire [31:0] OutData_comp_vpos_out_a;
wire [1:0] OutData_comp_vpos_address_b;
wire  OutData_comp_vpos_write_enable_b;
wire [31:0] OutData_comp_vpos_in_b;
wire [31:0] OutData_comp_vpos_out_b;
wire [1:0] OutData_comp_hpos_address_a;
wire  OutData_comp_hpos_write_enable_a;
wire [31:0] OutData_comp_hpos_in_a;
wire [31:0] OutData_comp_hpos_out_a;
wire [1:0] OutData_comp_hpos_address_b;
wire  OutData_comp_hpos_write_enable_b;
wire [31:0] OutData_comp_hpos_in_b;
wire [31:0] OutData_comp_hpos_out_b;
wire [12:0] JpegFileBuf_address_a;
wire  JpegFileBuf_write_enable_a;
wire [7:0] JpegFileBuf_in_a;
wire [7:0] JpegFileBuf_out_a;
wire [12:0] JpegFileBuf_address_b;
wire  JpegFileBuf_write_enable_b;
wire [7:0] JpegFileBuf_in_b;
wire [7:0] JpegFileBuf_out_b;
wire [8:0] huff_make_dhuff_tb_0_huffsize_address_a;
wire  huff_make_dhuff_tb_0_huffsize_write_enable_a;
wire [31:0] huff_make_dhuff_tb_0_huffsize_in_a;
wire [31:0] huff_make_dhuff_tb_0_huffsize_out_a;
wire [8:0] huff_make_dhuff_tb_0_huffsize_address_b;
wire  huff_make_dhuff_tb_0_huffsize_write_enable_b;
wire [31:0] huff_make_dhuff_tb_0_huffsize_in_b;
wire [31:0] huff_make_dhuff_tb_0_huffsize_out_b;
wire [8:0] huff_make_dhuff_tb_0_huffcode_address_a;
wire  huff_make_dhuff_tb_0_huffcode_write_enable_a;
wire [31:0] huff_make_dhuff_tb_0_huffcode_in_a;
wire [31:0] huff_make_dhuff_tb_0_huffcode_out_a;
wire [8:0] huff_make_dhuff_tb_0_huffcode_address_b;
wire  huff_make_dhuff_tb_0_huffcode_write_enable_b;
wire [31:0] huff_make_dhuff_tb_0_huffcode_in_b;
wire [31:0] huff_make_dhuff_tb_0_huffcode_out_b;
wire [5:0] main_0_QuantBuffiii_address_a;
wire  main_0_QuantBuffiii_write_enable_a;
wire [31:0] main_0_QuantBuffiii_in_a;
wire [31:0] main_0_QuantBuffiii_out_a;
wire [5:0] main_0_QuantBuffiii_address_b;
wire  main_0_QuantBuffiii_write_enable_b;
wire [31:0] main_0_QuantBuffiii_in_b;
wire [31:0] main_0_QuantBuffiii_out_b;
wire [7:0] main_0_HuffBuffii_address_a;
wire  main_0_HuffBuffii_write_enable_a;
wire [31:0] main_0_HuffBuffii_in_a;
wire [31:0] main_0_HuffBuffii_out_a;
wire [7:0] main_0_HuffBuffii_address_b;
wire  main_0_HuffBuffii_write_enable_b;
wire [31:0] main_0_HuffBuffii_in_b;
wire [31:0] main_0_HuffBuffii_out_b;
wire [8:0] main_0_IDCTBuffii_address_a;
wire  main_0_IDCTBuffii_write_enable_a;
wire [31:0] main_0_IDCTBuffii_in_a;
wire [31:0] main_0_IDCTBuffii_out_a;
wire [8:0] main_0_IDCTBuffii_address_b;
wire  main_0_IDCTBuffii_write_enable_b;
wire [31:0] main_0_IDCTBuffii_in_b;
wire [31:0] main_0_IDCTBuffii_out_b;

// Local Rams


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* DecodeHuffman: %12*/
	/*   %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str30, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__12_17)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Unanticipated marker detected.\n");
	end
	/* DecodeHuffman: %37*/
	/*   %38 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str30, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__37_38)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Unanticipated marker detected.\n");
	end
	/* DecodeHuffman: %63*/
	/*   %64 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([20 x i8]* @.str26, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__63_59)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Huffman read error\n");
	end
	/* DecodeHuffman: %63*/
	/*   tail call void @exit(i32 0) #3*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__63_59)) begin
		$finish;
	end
end
always @(posedge clk) begin
	if (reset)
		cur_state <= LEGUP_0;
	else if (memory_controller_waitrequest == 1'd1)
		cur_state <= cur_state;
	else
		cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_DecodeHuffman_BB__0_1;
LEGUP_F_DecodeHuffman_BB__0_1:
		next_state = LEGUP_F_DecodeHuffman_BB__0_2;
LEGUP_F_DecodeHuffman_BB__0_2:
		next_state = LEGUP_F_DecodeHuffman_BB__0_3;
LEGUP_F_DecodeHuffman_BB__0_3:
	if ((DecodeHuffman_0_2 == 1'd1))
		next_state = LEGUP_F_DecodeHuffman_BB__3_7;
	else if ((DecodeHuffman_0_2 == 1'd0))
		next_state = LEGUP_F_DecodeHuffman_BB__crit_edgei_4;
LEGUP_F_DecodeHuffman_BB__12_17:
		next_state = LEGUP_F_DecodeHuffman_BB__14_18;
LEGUP_F_DecodeHuffman_BB__14_18:
		next_state = LEGUP_F_DecodeHuffman_BB_pgetcexiti_19;
LEGUP_F_DecodeHuffman_BB__28_28:
		next_state = LEGUP_F_DecodeHuffman_BB__28_29;
LEGUP_F_DecodeHuffman_BB__28_29:
		next_state = LEGUP_F_DecodeHuffman_BB__28_30;
LEGUP_F_DecodeHuffman_BB__28_30:
		next_state = LEGUP_F_DecodeHuffman_BB__28_31;
LEGUP_F_DecodeHuffman_BB__28_31:
		next_state = LEGUP_F_DecodeHuffman_BB__28_32;
LEGUP_F_DecodeHuffman_BB__28_32:
		next_state = LEGUP_F_DecodeHuffman_BB__28_33;
LEGUP_F_DecodeHuffman_BB__28_33:
	if ((DecodeHuffman_28_32 == 1'd1))
		next_state = LEGUP_F_DecodeHuffman_BB__33_34;
	else if ((DecodeHuffman_28_32 == 1'd0))
		next_state = LEGUP_F_DecodeHuffman_BB__39_39;
LEGUP_F_DecodeHuffman_BB__33_34:
		next_state = LEGUP_F_DecodeHuffman_BB__33_35;
LEGUP_F_DecodeHuffman_BB__33_35:
		next_state = LEGUP_F_DecodeHuffman_BB__33_36;
LEGUP_F_DecodeHuffman_BB__33_36:
		next_state = LEGUP_F_DecodeHuffman_BB__33_37;
LEGUP_F_DecodeHuffman_BB__33_37:
	if ((DecodeHuffman_33_36 == 1'd1))
		next_state = LEGUP_F_DecodeHuffman_BB_pgetcexiti6_40;
	else if ((DecodeHuffman_33_36 == 1'd0))
		next_state = LEGUP_F_DecodeHuffman_BB__37_38;
LEGUP_F_DecodeHuffman_BB__37_38:
		next_state = LEGUP_F_DecodeHuffman_BB__39_39;
LEGUP_F_DecodeHuffman_BB__39_39:
		next_state = LEGUP_F_DecodeHuffman_BB_pgetcexiti6_40;
LEGUP_F_DecodeHuffman_BB__3_10:
		next_state = LEGUP_F_DecodeHuffman_BB__3_11;
LEGUP_F_DecodeHuffman_BB__3_11:
		next_state = LEGUP_F_DecodeHuffman_BB__3_12;
LEGUP_F_DecodeHuffman_BB__3_12:
	if ((DecodeHuffman_3_7 == 1'd1))
		next_state = LEGUP_F_DecodeHuffman_BB__8_13;
	else if ((DecodeHuffman_3_7 == 1'd0))
		next_state = LEGUP_F_DecodeHuffman_BB__14_18;
LEGUP_F_DecodeHuffman_BB__3_7:
		next_state = LEGUP_F_DecodeHuffman_BB__3_8;
LEGUP_F_DecodeHuffman_BB__3_8:
		next_state = LEGUP_F_DecodeHuffman_BB__3_9;
LEGUP_F_DecodeHuffman_BB__3_9:
		next_state = LEGUP_F_DecodeHuffman_BB__3_10;
LEGUP_F_DecodeHuffman_BB__52_50:
		next_state = LEGUP_F_DecodeHuffman_BB__52_51;
LEGUP_F_DecodeHuffman_BB__52_51:
		next_state = LEGUP_F_DecodeHuffman_BB__52_52;
LEGUP_F_DecodeHuffman_BB__52_52:
		next_state = LEGUP_F_DecodeHuffman_BB__52_53;
LEGUP_F_DecodeHuffman_BB__52_53:
		next_state = LEGUP_F_DecodeHuffman_BB__52_54;
LEGUP_F_DecodeHuffman_BB__52_54:
		next_state = LEGUP_F_DecodeHuffman_BB__52_55;
LEGUP_F_DecodeHuffman_BB__52_55:
		next_state = LEGUP_F_DecodeHuffman_BB__52_56;
LEGUP_F_DecodeHuffman_BB__52_56:
		next_state = LEGUP_F_DecodeHuffman_BB__52_57;
LEGUP_F_DecodeHuffman_BB__52_57:
		next_state = LEGUP_F_DecodeHuffman_BB__52_58;
LEGUP_F_DecodeHuffman_BB__52_58:
		next_state = LEGUP_0;
LEGUP_F_DecodeHuffman_BB__63_59:
		next_state = LEGUP_0;
LEGUP_F_DecodeHuffman_BB__8_13:
		next_state = LEGUP_F_DecodeHuffman_BB__8_14;
LEGUP_F_DecodeHuffman_BB__8_14:
		next_state = LEGUP_F_DecodeHuffman_BB__8_15;
LEGUP_F_DecodeHuffman_BB__8_15:
		next_state = LEGUP_F_DecodeHuffman_BB__8_16;
LEGUP_F_DecodeHuffman_BB__8_16:
	if ((DecodeHuffman_8_11 == 1'd1))
		next_state = LEGUP_F_DecodeHuffman_BB_pgetcexiti_19;
	else if ((DecodeHuffman_8_11 == 1'd0))
		next_state = LEGUP_F_DecodeHuffman_BB__12_17;
LEGUP_F_DecodeHuffman_BB__crit_edge_47:
		next_state = LEGUP_F_DecodeHuffman_BB__crit_edge_48;
LEGUP_F_DecodeHuffman_BB__crit_edge_48:
		next_state = LEGUP_F_DecodeHuffman_BB__crit_edge_49;
LEGUP_F_DecodeHuffman_BB__crit_edge_49:
	if ((DecodeHuffman__crit_edge_51 == 1'd1))
		next_state = LEGUP_F_DecodeHuffman_BB__52_50;
	else if ((DecodeHuffman__crit_edge_51 == 1'd0))
		next_state = LEGUP_F_DecodeHuffman_BB__63_59;
LEGUP_F_DecodeHuffman_BB__crit_edgei_4:
		next_state = LEGUP_F_DecodeHuffman_BB__crit_edgei_5;
LEGUP_F_DecodeHuffman_BB__crit_edgei_5:
		next_state = LEGUP_F_DecodeHuffman_BB__crit_edgei_6;
LEGUP_F_DecodeHuffman_BB__crit_edgei_6:
		next_state = LEGUP_F_DecodeHuffman_BB_buf_getbexit_21;
LEGUP_F_DecodeHuffman_BB__crit_edgeloopexit_46:
		next_state = LEGUP_F_DecodeHuffman_BB__crit_edge_47;
LEGUP_F_DecodeHuffman_BB_buf_getbexit9_42:
		next_state = LEGUP_F_DecodeHuffman_BB_buf_getbexit9_43;
LEGUP_F_DecodeHuffman_BB_buf_getbexit9_43:
		next_state = LEGUP_F_DecodeHuffman_BB_buf_getbexit9_44;
LEGUP_F_DecodeHuffman_BB_buf_getbexit9_44:
		next_state = LEGUP_F_DecodeHuffman_BB_buf_getbexit9_45;
LEGUP_F_DecodeHuffman_BB_buf_getbexit9_45:
	if ((DecodeHuffman_buf_getbexit9_48 == 1'd1))
		next_state = LEGUP_F_DecodeHuffman_BB_lrph_26;
	else if ((DecodeHuffman_buf_getbexit9_48 == 1'd0))
		next_state = LEGUP_F_DecodeHuffman_BB__crit_edgeloopexit_46;
LEGUP_F_DecodeHuffman_BB_buf_getbexit_21:
		next_state = LEGUP_F_DecodeHuffman_BB_buf_getbexit_22;
LEGUP_F_DecodeHuffman_BB_buf_getbexit_22:
		next_state = LEGUP_F_DecodeHuffman_BB_buf_getbexit_23;
LEGUP_F_DecodeHuffman_BB_buf_getbexit_23:
		next_state = LEGUP_F_DecodeHuffman_BB_buf_getbexit_24;
LEGUP_F_DecodeHuffman_BB_buf_getbexit_24:
	if ((DecodeHuffman_buf_getbexit_23 == 1'd1))
		next_state = LEGUP_F_DecodeHuffman_BB_lrphpreheader_25;
	else if ((DecodeHuffman_buf_getbexit_23 == 1'd0))
		next_state = LEGUP_F_DecodeHuffman_BB__crit_edge_47;
LEGUP_F_DecodeHuffman_BB_lrph_26:
		next_state = LEGUP_F_DecodeHuffman_BB_lrph_27;
LEGUP_F_DecodeHuffman_BB_lrph_27:
	if ((DecodeHuffman_lrph_27_reg == 1'd1))
		next_state = LEGUP_F_DecodeHuffman_BB__28_28;
	else if ((DecodeHuffman_lrph_27_reg == 1'd0))
		next_state = LEGUP_F_DecodeHuffman_BB_buf_getbexit9_42;
LEGUP_F_DecodeHuffman_BB_lrphpreheader_25:
		next_state = LEGUP_F_DecodeHuffman_BB_lrph_26;
LEGUP_F_DecodeHuffman_BB_pgetcexiti6_40:
		next_state = LEGUP_F_DecodeHuffman_BB_pgetcexiti6_41;
LEGUP_F_DecodeHuffman_BB_pgetcexiti6_41:
		next_state = LEGUP_F_DecodeHuffman_BB_buf_getbexit9_42;
LEGUP_F_DecodeHuffman_BB_pgetcexiti_19:
		next_state = LEGUP_F_DecodeHuffman_BB_pgetcexiti_20;
LEGUP_F_DecodeHuffman_BB_pgetcexiti_20:
		next_state = LEGUP_F_DecodeHuffman_BB_buf_getbexit_21;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* DecodeHuffman: %0*/
	/*   %1 = load i32* @read_position, align 4, !tbaa !1*/
		DecodeHuffman_0_1 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_0_1_reg <= 0;
	/* DecodeHuffman: %0*/
	/*   %1 = load i32* @read_position, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__0_3)) begin
		DecodeHuffman_0_1_reg <= DecodeHuffman_0_1;
		if (start == 1'b0 && ^(DecodeHuffman_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %0*/
	/*   %2 = icmp slt i32 %1, 0*/
		DecodeHuffman_0_2 = ($signed(DecodeHuffman_0_1) < $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_0_2_reg <= 0;
	/* DecodeHuffman: %0*/
	/*   %2 = icmp slt i32 %1, 0*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__0_3)) begin
		DecodeHuffman_0_2_reg <= DecodeHuffman_0_2;
		if (start == 1'b0 && ^(DecodeHuffman_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %._crit_edge.i*/
	/*   %.pre.i = load i32* @current_read_byte, align 4, !tbaa !1*/
		DecodeHuffman__crit_edgei_prei = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman__crit_edgei_prei_reg <= 0;
	/* DecodeHuffman: %._crit_edge.i*/
	/*   %.pre.i = load i32* @current_read_byte, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edgei_6)) begin
		DecodeHuffman__crit_edgei_prei_reg <= DecodeHuffman__crit_edgei_prei;
		if (start == 1'b0 && ^(DecodeHuffman__crit_edgei_prei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__crit_edgei_prei_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %3*/
	/*   %4 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
		DecodeHuffman_3_4 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_3_4_reg <= 0;
	/* DecodeHuffman: %3*/
	/*   %4 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__3_9)) begin
		DecodeHuffman_3_4_reg <= DecodeHuffman_3_4;
		if (start == 1'b0 && ^(DecodeHuffman_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_3_4_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %3*/
	/*   %5 = getelementptr inbounds i8* %4, i32 1*/
		DecodeHuffman_3_5 = (DecodeHuffman_3_4 + (1 * 32'd1));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_3_5_reg <= 0;
	/* DecodeHuffman: %3*/
	/*   %5 = getelementptr inbounds i8* %4, i32 1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__3_9)) begin
		DecodeHuffman_3_5_reg <= DecodeHuffman_3_5;
		if (start == 1'b0 && ^(DecodeHuffman_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_3_5_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %3*/
	/*   %6 = load i8* %4, align 1, !tbaa !7*/
		DecodeHuffman_3_6 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_3_6_reg <= 0;
	/* DecodeHuffman: %3*/
	/*   %6 = load i8* %4, align 1, !tbaa !7*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__3_12)) begin
		DecodeHuffman_3_6_reg <= DecodeHuffman_3_6;
		if (start == 1'b0 && ^(DecodeHuffman_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_3_6_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %3*/
	/*   %7 = icmp eq i8 %6, -1*/
		DecodeHuffman_3_7 = (DecodeHuffman_3_6 == -8'd1);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_3_7_reg <= 0;
	/* DecodeHuffman: %3*/
	/*   %7 = icmp eq i8 %6, -1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__3_12)) begin
		DecodeHuffman_3_7_reg <= DecodeHuffman_3_7;
		if (start == 1'b0 && ^(DecodeHuffman_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_3_7_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %8*/
	/*   %9 = getelementptr inbounds i8* %4, i32 2*/
		DecodeHuffman_8_9 = (DecodeHuffman_3_4_reg + (1 * 32'd2));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_8_9_reg <= 0;
	/* DecodeHuffman: %8*/
	/*   %9 = getelementptr inbounds i8* %4, i32 2*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__8_13)) begin
		DecodeHuffman_8_9_reg <= DecodeHuffman_8_9;
		if (start == 1'b0 && ^(DecodeHuffman_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_8_9_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %8*/
	/*   %10 = load i8* %5, align 1, !tbaa !7*/
		DecodeHuffman_8_10 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_8_10_reg <= 0;
	/* DecodeHuffman: %8*/
	/*   %10 = load i8* %5, align 1, !tbaa !7*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__8_16)) begin
		DecodeHuffman_8_10_reg <= DecodeHuffman_8_10;
		if (start == 1'b0 && ^(DecodeHuffman_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_8_10_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %8*/
	/*   %11 = icmp eq i8 %10, 0*/
		DecodeHuffman_8_11 = (DecodeHuffman_8_10 == 8'd0);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_8_11_reg <= 0;
	/* DecodeHuffman: %8*/
	/*   %11 = icmp eq i8 %10, 0*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__8_16)) begin
		DecodeHuffman_8_11_reg <= DecodeHuffman_8_11;
		if (start == 1'b0 && ^(DecodeHuffman_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_8_11_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %14*/
	/*   %temp.0.in.i.i = phi i8 [ %10, %12 ], [ %6, %3 ]*/
	if ((((cur_state == LEGUP_F_DecodeHuffman_BB__3_12) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_3_7 == 1'd0))) begin
		DecodeHuffman_14_temp0inii = DecodeHuffman_3_6;
	end
	/* DecodeHuffman: %14*/
	/*   %temp.0.in.i.i = phi i8 [ %10, %12 ], [ %6, %3 ]*/
	else /* if (((cur_state == LEGUP_F_DecodeHuffman_BB__12_17) & (memory_controller_waitrequest == 1'd0))) */ begin
		DecodeHuffman_14_temp0inii = DecodeHuffman_8_10_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_14_temp0inii_reg <= 0;
	/* DecodeHuffman: %14*/
	/*   %temp.0.in.i.i = phi i8 [ %10, %12 ], [ %6, %3 ]*/
	else if((((cur_state == LEGUP_F_DecodeHuffman_BB__3_12) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_3_7 == 1'd0))) begin
		DecodeHuffman_14_temp0inii_reg <= DecodeHuffman_14_temp0inii;
		if (start == 1'b0 && ^(DecodeHuffman_14_temp0inii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_14_temp0inii_reg"); $finish; end
	end
	/* DecodeHuffman: %14*/
	/*   %temp.0.in.i.i = phi i8 [ %10, %12 ], [ %6, %3 ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffman_BB__12_17) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_14_temp0inii_reg <= DecodeHuffman_14_temp0inii;
		if (start == 1'b0 && ^(DecodeHuffman_14_temp0inii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_14_temp0inii_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %14*/
	/*   %temp.0.i.i = zext i8 %temp.0.in.i.i to i32*/
		DecodeHuffman_14_temp0ii = DecodeHuffman_14_temp0inii_reg;
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_14_temp0ii_reg <= 0;
	/* DecodeHuffman: %14*/
	/*   %temp.0.i.i = zext i8 %temp.0.in.i.i to i32*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__14_18)) begin
		DecodeHuffman_14_temp0ii_reg <= DecodeHuffman_14_temp0ii;
		if (start == 1'b0 && ^(DecodeHuffman_14_temp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_14_temp0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %pgetc.exit.i*/
	/*   %.0.i.i = phi i32 [ %temp.0.i.i, %14 ], [ 255, %8 ]*/
	if ((((cur_state == LEGUP_F_DecodeHuffman_BB__8_16) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_8_11 == 1'd1))) begin
		DecodeHuffman_pgetcexiti_0ii = 32'd255;
	end
	/* DecodeHuffman: %pgetc.exit.i*/
	/*   %.0.i.i = phi i32 [ %temp.0.i.i, %14 ], [ 255, %8 ]*/
	else /* if (((cur_state == LEGUP_F_DecodeHuffman_BB__14_18) & (memory_controller_waitrequest == 1'd0))) */ begin
		DecodeHuffman_pgetcexiti_0ii = DecodeHuffman_14_temp0ii;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_pgetcexiti_0ii_reg <= 0;
	/* DecodeHuffman: %pgetc.exit.i*/
	/*   %.0.i.i = phi i32 [ %temp.0.i.i, %14 ], [ 255, %8 ]*/
	else if((((cur_state == LEGUP_F_DecodeHuffman_BB__8_16) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_8_11 == 1'd1))) begin
		DecodeHuffman_pgetcexiti_0ii_reg <= DecodeHuffman_pgetcexiti_0ii;
		if (start == 1'b0 && ^(DecodeHuffman_pgetcexiti_0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_pgetcexiti_0ii_reg"); $finish; end
	end
	/* DecodeHuffman: %pgetc.exit.i*/
	/*   %.0.i.i = phi i32 [ %temp.0.i.i, %14 ], [ 255, %8 ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffman_BB__14_18) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_pgetcexiti_0ii_reg <= DecodeHuffman_pgetcexiti_0ii;
		if (start == 1'b0 && ^(DecodeHuffman_pgetcexiti_0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_pgetcexiti_0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %15 = phi i32 [ %1, %._crit_edge.i ], [ 7, %pgetc.exit.i ]*/
	if (((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edgei_6) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_buf_getbexit_15 = DecodeHuffman_0_1_reg;
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %15 = phi i32 [ %1, %._crit_edge.i ], [ 7, %pgetc.exit.i ]*/
	else /* if (((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti_20) & (memory_controller_waitrequest == 1'd0))) */ begin
		DecodeHuffman_buf_getbexit_15 = 32'd7;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit_15_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %15 = phi i32 [ %1, %._crit_edge.i ], [ 7, %pgetc.exit.i ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edgei_6) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_buf_getbexit_15_reg <= DecodeHuffman_buf_getbexit_15;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit_15_reg"); $finish; end
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %15 = phi i32 [ %1, %._crit_edge.i ], [ 7, %pgetc.exit.i ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti_20) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_buf_getbexit_15_reg <= DecodeHuffman_buf_getbexit_15;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit_15_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %16 = phi i32 [ %.pre.i, %._crit_edge.i ], [ %.0.i.i, %pgetc.exit.i ]*/
	if (((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edgei_6) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_buf_getbexit_16 = DecodeHuffman__crit_edgei_prei;
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %16 = phi i32 [ %.pre.i, %._crit_edge.i ], [ %.0.i.i, %pgetc.exit.i ]*/
	else /* if (((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti_20) & (memory_controller_waitrequest == 1'd0))) */ begin
		DecodeHuffman_buf_getbexit_16 = DecodeHuffman_pgetcexiti_0ii_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit_16_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %16 = phi i32 [ %.pre.i, %._crit_edge.i ], [ %.0.i.i, %pgetc.exit.i ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edgei_6) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_buf_getbexit_16_reg <= DecodeHuffman_buf_getbexit_16;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit_16_reg"); $finish; end
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %16 = phi i32 [ %.pre.i, %._crit_edge.i ], [ %.0.i.i, %pgetc.exit.i ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti_20) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_buf_getbexit_16_reg <= DecodeHuffman_buf_getbexit_16;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit_16_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %17 = add nsw i32 %15, -1*/
		DecodeHuffman_buf_getbexit_17 = (DecodeHuffman_buf_getbexit_15_reg + -32'd1);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit_17_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %17 = add nsw i32 %15, -1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_21)) begin
		DecodeHuffman_buf_getbexit_17_reg <= DecodeHuffman_buf_getbexit_17;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit_17_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %18 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %15*/
		DecodeHuffman_buf_getbexit_18 = (`TAG_g_bit_set_mask_a + (4 * DecodeHuffman_buf_getbexit_15_reg));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit_18_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %18 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %15*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_21)) begin
		DecodeHuffman_buf_getbexit_18_reg <= DecodeHuffman_buf_getbexit_18;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit_18_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
		DecodeHuffman_buf_getbexit_19 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit_19_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_23)) begin
		DecodeHuffman_buf_getbexit_19_reg <= DecodeHuffman_buf_getbexit_19;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit_19_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %20 = and i32 %19, %16*/
		DecodeHuffman_buf_getbexit_20 = (DecodeHuffman_buf_getbexit_19 & DecodeHuffman_buf_getbexit_16_reg);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit_20_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %20 = and i32 %19, %16*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_23)) begin
		DecodeHuffman_buf_getbexit_20_reg <= DecodeHuffman_buf_getbexit_20;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit_20_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %not..i = icmp ne i32 %20, 0*/
		DecodeHuffman_buf_getbexit_noti = (DecodeHuffman_buf_getbexit_20 != 32'd0);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit_noti_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %not..i = icmp ne i32 %20, 0*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_23)) begin
		DecodeHuffman_buf_getbexit_noti_reg <= DecodeHuffman_buf_getbexit_noti;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit_noti) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit_noti_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %..i = zext i1 %not..i to i32*/
		DecodeHuffman_buf_getbexit_i = DecodeHuffman_buf_getbexit_noti;
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit_i_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %..i = zext i1 %not..i to i32*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_23)) begin
		DecodeHuffman_buf_getbexit_i_reg <= DecodeHuffman_buf_getbexit_i;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit_i_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %21 = getelementptr inbounds i32* %Dhuff_maxcode, i32 1*/
		DecodeHuffman_buf_getbexit_21 = (arg_Dhuff_maxcode + (4 * 32'd1));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit_21_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %21 = getelementptr inbounds i32* %Dhuff_maxcode, i32 1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_21)) begin
		DecodeHuffman_buf_getbexit_21_reg <= DecodeHuffman_buf_getbexit_21;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit_21_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
		DecodeHuffman_buf_getbexit_22 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit_22_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_24)) begin
		DecodeHuffman_buf_getbexit_22_reg <= DecodeHuffman_buf_getbexit_22;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit_22_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %23 = icmp sgt i32 %..i, %22*/
		DecodeHuffman_buf_getbexit_23 = ($signed(DecodeHuffman_buf_getbexit_i_reg) > $signed(DecodeHuffman_buf_getbexit_22));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit_23_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %23 = icmp sgt i32 %..i, %22*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_24)) begin
		DecodeHuffman_buf_getbexit_23_reg <= DecodeHuffman_buf_getbexit_23;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit_23_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %.lr.ph*/
	/*   %indvar = phi i32 [ 0, %.lr.ph.preheader ], [ %indvar.next, %buf_getb.exit9 ]*/
	if (((cur_state == LEGUP_F_DecodeHuffman_BB_lrphpreheader_25) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_lrph_indvar = 32'd0;
	end
	/* DecodeHuffman: %.lr.ph*/
	/*   %indvar = phi i32 [ 0, %.lr.ph.preheader ], [ %indvar.next, %buf_getb.exit9 ]*/
	else /* if ((((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_45) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_buf_getbexit9_48 == 1'd1))) */ begin
		DecodeHuffman_lrph_indvar = DecodeHuffman_buf_getbexit9_indvarnext_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_lrph_indvar_reg <= 0;
	/* DecodeHuffman: %.lr.ph*/
	/*   %indvar = phi i32 [ 0, %.lr.ph.preheader ], [ %indvar.next, %buf_getb.exit9 ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffman_BB_lrphpreheader_25) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_lrph_indvar_reg <= DecodeHuffman_lrph_indvar;
		if (start == 1'b0 && ^(DecodeHuffman_lrph_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_lrph_indvar_reg"); $finish; end
	end
	/* DecodeHuffman: %.lr.ph*/
	/*   %indvar = phi i32 [ 0, %.lr.ph.preheader ], [ %indvar.next, %buf_getb.exit9 ]*/
	else if((((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_45) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_buf_getbexit9_48 == 1'd1))) begin
		DecodeHuffman_lrph_indvar_reg <= DecodeHuffman_lrph_indvar;
		if (start == 1'b0 && ^(DecodeHuffman_lrph_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_lrph_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %.lr.ph*/
	/*   %.pre.i1 = phi i32 [ %16, %.lr.ph.preheader ], [ %41, %buf_getb.exit9 ]*/
	if (((cur_state == LEGUP_F_DecodeHuffman_BB_lrphpreheader_25) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_lrph_prei1 = DecodeHuffman_buf_getbexit_16_reg;
	end
	/* DecodeHuffman: %.lr.ph*/
	/*   %.pre.i1 = phi i32 [ %16, %.lr.ph.preheader ], [ %41, %buf_getb.exit9 ]*/
	else /* if ((((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_45) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_buf_getbexit9_48 == 1'd1))) */ begin
		DecodeHuffman_lrph_prei1 = DecodeHuffman_buf_getbexit9_41_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_lrph_prei1_reg <= 0;
	/* DecodeHuffman: %.lr.ph*/
	/*   %.pre.i1 = phi i32 [ %16, %.lr.ph.preheader ], [ %41, %buf_getb.exit9 ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffman_BB_lrphpreheader_25) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_lrph_prei1_reg <= DecodeHuffman_lrph_prei1;
		if (start == 1'b0 && ^(DecodeHuffman_lrph_prei1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_lrph_prei1_reg"); $finish; end
	end
	/* DecodeHuffman: %.lr.ph*/
	/*   %.pre.i1 = phi i32 [ %16, %.lr.ph.preheader ], [ %41, %buf_getb.exit9 ]*/
	else if((((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_45) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_buf_getbexit9_48 == 1'd1))) begin
		DecodeHuffman_lrph_prei1_reg <= DecodeHuffman_lrph_prei1;
		if (start == 1'b0 && ^(DecodeHuffman_lrph_prei1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_lrph_prei1_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %.lr.ph*/
	/*   %24 = phi i32 [ %17, %.lr.ph.preheader ], [ %42, %buf_getb.exit9 ]*/
	if (((cur_state == LEGUP_F_DecodeHuffman_BB_lrphpreheader_25) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_lrph_24 = DecodeHuffman_buf_getbexit_17_reg;
	end
	/* DecodeHuffman: %.lr.ph*/
	/*   %24 = phi i32 [ %17, %.lr.ph.preheader ], [ %42, %buf_getb.exit9 ]*/
	else /* if ((((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_45) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_buf_getbexit9_48 == 1'd1))) */ begin
		DecodeHuffman_lrph_24 = DecodeHuffman_buf_getbexit9_42_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_lrph_24_reg <= 0;
	/* DecodeHuffman: %.lr.ph*/
	/*   %24 = phi i32 [ %17, %.lr.ph.preheader ], [ %42, %buf_getb.exit9 ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffman_BB_lrphpreheader_25) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_lrph_24_reg <= DecodeHuffman_lrph_24;
		if (start == 1'b0 && ^(DecodeHuffman_lrph_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_lrph_24_reg"); $finish; end
	end
	/* DecodeHuffman: %.lr.ph*/
	/*   %24 = phi i32 [ %17, %.lr.ph.preheader ], [ %42, %buf_getb.exit9 ]*/
	else if((((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_45) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_buf_getbexit9_48 == 1'd1))) begin
		DecodeHuffman_lrph_24_reg <= DecodeHuffman_lrph_24;
		if (start == 1'b0 && ^(DecodeHuffman_lrph_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_lrph_24_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %.lr.ph*/
	/*   %code.011 = phi i32 [ %..i, %.lr.ph.preheader ], [ %46, %buf_getb.exit9 ]*/
	if (((cur_state == LEGUP_F_DecodeHuffman_BB_lrphpreheader_25) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_lrph_code011 = DecodeHuffman_buf_getbexit_i_reg;
	end
	/* DecodeHuffman: %.lr.ph*/
	/*   %code.011 = phi i32 [ %..i, %.lr.ph.preheader ], [ %46, %buf_getb.exit9 ]*/
	else /* if ((((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_45) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_buf_getbexit9_48 == 1'd1))) */ begin
		DecodeHuffman_lrph_code011 = DecodeHuffman_buf_getbexit9_46_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_lrph_code011_reg <= 0;
	/* DecodeHuffman: %.lr.ph*/
	/*   %code.011 = phi i32 [ %..i, %.lr.ph.preheader ], [ %46, %buf_getb.exit9 ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffman_BB_lrphpreheader_25) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_lrph_code011_reg <= DecodeHuffman_lrph_code011;
		if (start == 1'b0 && ^(DecodeHuffman_lrph_code011) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_lrph_code011_reg"); $finish; end
	end
	/* DecodeHuffman: %.lr.ph*/
	/*   %code.011 = phi i32 [ %..i, %.lr.ph.preheader ], [ %46, %buf_getb.exit9 ]*/
	else if((((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_45) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_buf_getbexit9_48 == 1'd1))) begin
		DecodeHuffman_lrph_code011_reg <= DecodeHuffman_lrph_code011;
		if (start == 1'b0 && ^(DecodeHuffman_lrph_code011) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_lrph_code011_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %.lr.ph*/
	/*   %25 = add i32 %indvar, 2*/
		DecodeHuffman_lrph_25 = (DecodeHuffman_lrph_indvar_reg + 32'd2);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_lrph_25_reg <= 0;
	/* DecodeHuffman: %.lr.ph*/
	/*   %25 = add i32 %indvar, 2*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_lrph_26)) begin
		DecodeHuffman_lrph_25_reg <= DecodeHuffman_lrph_25;
		if (start == 1'b0 && ^(DecodeHuffman_lrph_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_lrph_25_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %.lr.ph*/
	/*   %scevgep = getelementptr i32* %Dhuff_maxcode, i32 %25*/
		DecodeHuffman_lrph_scevgep = (arg_Dhuff_maxcode + (4 * DecodeHuffman_lrph_25_reg));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_lrph_scevgep_reg <= 0;
	/* DecodeHuffman: %.lr.ph*/
	/*   %scevgep = getelementptr i32* %Dhuff_maxcode, i32 %25*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_lrph_27)) begin
		DecodeHuffman_lrph_scevgep_reg <= DecodeHuffman_lrph_scevgep;
		if (start == 1'b0 && ^(DecodeHuffman_lrph_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_lrph_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %.lr.ph*/
	/*   %26 = shl i32 %code.011, 1*/
		DecodeHuffman_lrph_26 = (DecodeHuffman_lrph_code011_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_lrph_26_reg <= 0;
	/* DecodeHuffman: %.lr.ph*/
	/*   %26 = shl i32 %code.011, 1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_lrph_26)) begin
		DecodeHuffman_lrph_26_reg <= DecodeHuffman_lrph_26;
		if (start == 1'b0 && ^(DecodeHuffman_lrph_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_lrph_26_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %.lr.ph*/
	/*   %27 = icmp slt i32 %24, 0*/
		DecodeHuffman_lrph_27 = ($signed(DecodeHuffman_lrph_24_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_lrph_27_reg <= 0;
	/* DecodeHuffman: %.lr.ph*/
	/*   %27 = icmp slt i32 %24, 0*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_lrph_26)) begin
		DecodeHuffman_lrph_27_reg <= DecodeHuffman_lrph_27;
		if (start == 1'b0 && ^(DecodeHuffman_lrph_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_lrph_27_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %28*/
	/*   %29 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
		DecodeHuffman_28_29 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_28_29_reg <= 0;
	/* DecodeHuffman: %28*/
	/*   %29 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__28_30)) begin
		DecodeHuffman_28_29_reg <= DecodeHuffman_28_29;
		if (start == 1'b0 && ^(DecodeHuffman_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_28_29_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %28*/
	/*   %30 = getelementptr inbounds i8* %29, i32 1*/
		DecodeHuffman_28_30 = (DecodeHuffman_28_29 + (1 * 32'd1));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_28_30_reg <= 0;
	/* DecodeHuffman: %28*/
	/*   %30 = getelementptr inbounds i8* %29, i32 1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__28_30)) begin
		DecodeHuffman_28_30_reg <= DecodeHuffman_28_30;
		if (start == 1'b0 && ^(DecodeHuffman_28_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_28_30_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %28*/
	/*   %31 = load i8* %29, align 1, !tbaa !7*/
		DecodeHuffman_28_31 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_28_31_reg <= 0;
	/* DecodeHuffman: %28*/
	/*   %31 = load i8* %29, align 1, !tbaa !7*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__28_33)) begin
		DecodeHuffman_28_31_reg <= DecodeHuffman_28_31;
		if (start == 1'b0 && ^(DecodeHuffman_28_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_28_31_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %28*/
	/*   %32 = icmp eq i8 %31, -1*/
		DecodeHuffman_28_32 = (DecodeHuffman_28_31 == -8'd1);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_28_32_reg <= 0;
	/* DecodeHuffman: %28*/
	/*   %32 = icmp eq i8 %31, -1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__28_33)) begin
		DecodeHuffman_28_32_reg <= DecodeHuffman_28_32;
		if (start == 1'b0 && ^(DecodeHuffman_28_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_28_32_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %33*/
	/*   %34 = getelementptr inbounds i8* %29, i32 2*/
		DecodeHuffman_33_34 = (DecodeHuffman_28_29_reg + (1 * 32'd2));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_33_34_reg <= 0;
	/* DecodeHuffman: %33*/
	/*   %34 = getelementptr inbounds i8* %29, i32 2*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__33_34)) begin
		DecodeHuffman_33_34_reg <= DecodeHuffman_33_34;
		if (start == 1'b0 && ^(DecodeHuffman_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_33_34_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %33*/
	/*   %35 = load i8* %30, align 1, !tbaa !7*/
		DecodeHuffman_33_35 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_33_35_reg <= 0;
	/* DecodeHuffman: %33*/
	/*   %35 = load i8* %30, align 1, !tbaa !7*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__33_37)) begin
		DecodeHuffman_33_35_reg <= DecodeHuffman_33_35;
		if (start == 1'b0 && ^(DecodeHuffman_33_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_33_35_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %33*/
	/*   %36 = icmp eq i8 %35, 0*/
		DecodeHuffman_33_36 = (DecodeHuffman_33_35 == 8'd0);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_33_36_reg <= 0;
	/* DecodeHuffman: %33*/
	/*   %36 = icmp eq i8 %35, 0*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__33_37)) begin
		DecodeHuffman_33_36_reg <= DecodeHuffman_33_36;
		if (start == 1'b0 && ^(DecodeHuffman_33_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_33_36_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %39*/
	/*   %temp.0.in.i.i3 = phi i8 [ %35, %37 ], [ %31, %28 ]*/
	if ((((cur_state == LEGUP_F_DecodeHuffman_BB__28_33) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_28_32 == 1'd0))) begin
		DecodeHuffman_39_temp0inii3 = DecodeHuffman_28_31;
	end
	/* DecodeHuffman: %39*/
	/*   %temp.0.in.i.i3 = phi i8 [ %35, %37 ], [ %31, %28 ]*/
	else /* if (((cur_state == LEGUP_F_DecodeHuffman_BB__37_38) & (memory_controller_waitrequest == 1'd0))) */ begin
		DecodeHuffman_39_temp0inii3 = DecodeHuffman_33_35_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_39_temp0inii3_reg <= 0;
	/* DecodeHuffman: %39*/
	/*   %temp.0.in.i.i3 = phi i8 [ %35, %37 ], [ %31, %28 ]*/
	else if((((cur_state == LEGUP_F_DecodeHuffman_BB__28_33) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_28_32 == 1'd0))) begin
		DecodeHuffman_39_temp0inii3_reg <= DecodeHuffman_39_temp0inii3;
		if (start == 1'b0 && ^(DecodeHuffman_39_temp0inii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_39_temp0inii3_reg"); $finish; end
	end
	/* DecodeHuffman: %39*/
	/*   %temp.0.in.i.i3 = phi i8 [ %35, %37 ], [ %31, %28 ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffman_BB__37_38) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_39_temp0inii3_reg <= DecodeHuffman_39_temp0inii3;
		if (start == 1'b0 && ^(DecodeHuffman_39_temp0inii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_39_temp0inii3_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %39*/
	/*   %temp.0.i.i4 = zext i8 %temp.0.in.i.i3 to i32*/
		DecodeHuffman_39_temp0ii4 = DecodeHuffman_39_temp0inii3_reg;
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_39_temp0ii4_reg <= 0;
	/* DecodeHuffman: %39*/
	/*   %temp.0.i.i4 = zext i8 %temp.0.in.i.i3 to i32*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__39_39)) begin
		DecodeHuffman_39_temp0ii4_reg <= DecodeHuffman_39_temp0ii4;
		if (start == 1'b0 && ^(DecodeHuffman_39_temp0ii4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_39_temp0ii4_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %pgetc.exit.i6*/
	/*   %.0.i.i5 = phi i32 [ %temp.0.i.i4, %39 ], [ 255, %33 ]*/
	if ((((cur_state == LEGUP_F_DecodeHuffman_BB__33_37) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_33_36 == 1'd1))) begin
		DecodeHuffman_pgetcexiti6_0ii5 = 32'd255;
	end
	/* DecodeHuffman: %pgetc.exit.i6*/
	/*   %.0.i.i5 = phi i32 [ %temp.0.i.i4, %39 ], [ 255, %33 ]*/
	else /* if (((cur_state == LEGUP_F_DecodeHuffman_BB__39_39) & (memory_controller_waitrequest == 1'd0))) */ begin
		DecodeHuffman_pgetcexiti6_0ii5 = DecodeHuffman_39_temp0ii4;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_pgetcexiti6_0ii5_reg <= 0;
	/* DecodeHuffman: %pgetc.exit.i6*/
	/*   %.0.i.i5 = phi i32 [ %temp.0.i.i4, %39 ], [ 255, %33 ]*/
	else if((((cur_state == LEGUP_F_DecodeHuffman_BB__33_37) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_33_36 == 1'd1))) begin
		DecodeHuffman_pgetcexiti6_0ii5_reg <= DecodeHuffman_pgetcexiti6_0ii5;
		if (start == 1'b0 && ^(DecodeHuffman_pgetcexiti6_0ii5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_pgetcexiti6_0ii5_reg"); $finish; end
	end
	/* DecodeHuffman: %pgetc.exit.i6*/
	/*   %.0.i.i5 = phi i32 [ %temp.0.i.i4, %39 ], [ 255, %33 ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffman_BB__39_39) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_pgetcexiti6_0ii5_reg <= DecodeHuffman_pgetcexiti6_0ii5;
		if (start == 1'b0 && ^(DecodeHuffman_pgetcexiti6_0ii5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_pgetcexiti6_0ii5_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %40 = phi i32 [ 7, %pgetc.exit.i6 ], [ %24, %.lr.ph ]*/
	if ((((cur_state == LEGUP_F_DecodeHuffman_BB_lrph_27) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_lrph_27_reg == 1'd0))) begin
		DecodeHuffman_buf_getbexit9_40 = DecodeHuffman_lrph_24_reg;
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %40 = phi i32 [ 7, %pgetc.exit.i6 ], [ %24, %.lr.ph ]*/
	else /* if (((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti6_41) & (memory_controller_waitrequest == 1'd0))) */ begin
		DecodeHuffman_buf_getbexit9_40 = 32'd7;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit9_40_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %40 = phi i32 [ 7, %pgetc.exit.i6 ], [ %24, %.lr.ph ]*/
	else if((((cur_state == LEGUP_F_DecodeHuffman_BB_lrph_27) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_lrph_27_reg == 1'd0))) begin
		DecodeHuffman_buf_getbexit9_40_reg <= DecodeHuffman_buf_getbexit9_40;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit9_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit9_40_reg"); $finish; end
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %40 = phi i32 [ 7, %pgetc.exit.i6 ], [ %24, %.lr.ph ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti6_41) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_buf_getbexit9_40_reg <= DecodeHuffman_buf_getbexit9_40;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit9_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit9_40_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %41 = phi i32 [ %.0.i.i5, %pgetc.exit.i6 ], [ %.pre.i1, %.lr.ph ]*/
	if ((((cur_state == LEGUP_F_DecodeHuffman_BB_lrph_27) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_lrph_27_reg == 1'd0))) begin
		DecodeHuffman_buf_getbexit9_41 = DecodeHuffman_lrph_prei1_reg;
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %41 = phi i32 [ %.0.i.i5, %pgetc.exit.i6 ], [ %.pre.i1, %.lr.ph ]*/
	else /* if (((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti6_41) & (memory_controller_waitrequest == 1'd0))) */ begin
		DecodeHuffman_buf_getbexit9_41 = DecodeHuffman_pgetcexiti6_0ii5_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit9_41_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %41 = phi i32 [ %.0.i.i5, %pgetc.exit.i6 ], [ %.pre.i1, %.lr.ph ]*/
	else if((((cur_state == LEGUP_F_DecodeHuffman_BB_lrph_27) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_lrph_27_reg == 1'd0))) begin
		DecodeHuffman_buf_getbexit9_41_reg <= DecodeHuffman_buf_getbexit9_41;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit9_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit9_41_reg"); $finish; end
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %41 = phi i32 [ %.0.i.i5, %pgetc.exit.i6 ], [ %.pre.i1, %.lr.ph ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti6_41) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman_buf_getbexit9_41_reg <= DecodeHuffman_buf_getbexit9_41;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit9_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit9_41_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %42 = add nsw i32 %40, -1*/
		DecodeHuffman_buf_getbexit9_42 = (DecodeHuffman_buf_getbexit9_40_reg + -32'd1);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit9_42_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %42 = add nsw i32 %40, -1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_42)) begin
		DecodeHuffman_buf_getbexit9_42_reg <= DecodeHuffman_buf_getbexit9_42;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit9_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit9_42_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %43 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %40*/
		DecodeHuffman_buf_getbexit9_43 = (`TAG_g_bit_set_mask_a + (4 * DecodeHuffman_buf_getbexit9_40_reg));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit9_43_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %43 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %40*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_42)) begin
		DecodeHuffman_buf_getbexit9_43_reg <= DecodeHuffman_buf_getbexit9_43;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit9_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit9_43_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
		DecodeHuffman_buf_getbexit9_44 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit9_44_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_44)) begin
		DecodeHuffman_buf_getbexit9_44_reg <= DecodeHuffman_buf_getbexit9_44;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit9_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit9_44_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %45 = and i32 %44, %41*/
		DecodeHuffman_buf_getbexit9_45 = (DecodeHuffman_buf_getbexit9_44 & DecodeHuffman_buf_getbexit9_41_reg);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit9_45_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %45 = and i32 %44, %41*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_44)) begin
		DecodeHuffman_buf_getbexit9_45_reg <= DecodeHuffman_buf_getbexit9_45;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit9_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit9_45_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %not..i7 = icmp ne i32 %45, 0*/
		DecodeHuffman_buf_getbexit9_noti7 = (DecodeHuffman_buf_getbexit9_45 != 32'd0);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit9_noti7_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %not..i7 = icmp ne i32 %45, 0*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_44)) begin
		DecodeHuffman_buf_getbexit9_noti7_reg <= DecodeHuffman_buf_getbexit9_noti7;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit9_noti7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit9_noti7_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %..i8 = zext i1 %not..i7 to i32*/
		DecodeHuffman_buf_getbexit9_i8 = DecodeHuffman_buf_getbexit9_noti7;
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit9_i8_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %..i8 = zext i1 %not..i7 to i32*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_44)) begin
		DecodeHuffman_buf_getbexit9_i8_reg <= DecodeHuffman_buf_getbexit9_i8;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit9_i8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit9_i8_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %46 = or i32 %..i8, %26*/
		DecodeHuffman_buf_getbexit9_46 = (DecodeHuffman_buf_getbexit9_i8 | DecodeHuffman_lrph_26_reg);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit9_46_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %46 = or i32 %..i8, %26*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_44)) begin
		DecodeHuffman_buf_getbexit9_46_reg <= DecodeHuffman_buf_getbexit9_46;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit9_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit9_46_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %47 = load i32* %scevgep, align 4, !tbaa !1*/
		DecodeHuffman_buf_getbexit9_47 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit9_47_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %47 = load i32* %scevgep, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_45)) begin
		DecodeHuffman_buf_getbexit9_47_reg <= DecodeHuffman_buf_getbexit9_47;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit9_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit9_47_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %48 = icmp sgt i32 %46, %47*/
		DecodeHuffman_buf_getbexit9_48 = ($signed(DecodeHuffman_buf_getbexit9_46_reg) > $signed(DecodeHuffman_buf_getbexit9_47));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit9_48_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %48 = icmp sgt i32 %46, %47*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_45)) begin
		DecodeHuffman_buf_getbexit9_48_reg <= DecodeHuffman_buf_getbexit9_48;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit9_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit9_48_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %indvar.next = add i32 %indvar, 1*/
		DecodeHuffman_buf_getbexit9_indvarnext = (DecodeHuffman_lrph_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_buf_getbexit9_indvarnext_reg <= 0;
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %indvar.next = add i32 %indvar, 1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_42)) begin
		DecodeHuffman_buf_getbexit9_indvarnext_reg <= DecodeHuffman_buf_getbexit9_indvarnext;
		if (start == 1'b0 && ^(DecodeHuffman_buf_getbexit9_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getbexit9_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %._crit_edge*/
	/*   %code.0.lcssa = phi i32 [ %..i, %buf_getb.exit ], [ %46, %._crit_edge.loopexit ]*/
	if ((((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_24) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_buf_getbexit_23 == 1'd0))) begin
		DecodeHuffman__crit_edge_code0lcssa = DecodeHuffman_buf_getbexit_i_reg;
	end
	/* DecodeHuffman: %._crit_edge*/
	/*   %code.0.lcssa = phi i32 [ %..i, %buf_getb.exit ], [ %46, %._crit_edge.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edgeloopexit_46) & (memory_controller_waitrequest == 1'd0))) */ begin
		DecodeHuffman__crit_edge_code0lcssa = DecodeHuffman_buf_getbexit9_46_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman__crit_edge_code0lcssa_reg <= 0;
	/* DecodeHuffman: %._crit_edge*/
	/*   %code.0.lcssa = phi i32 [ %..i, %buf_getb.exit ], [ %46, %._crit_edge.loopexit ]*/
	else if((((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_24) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_buf_getbexit_23 == 1'd0))) begin
		DecodeHuffman__crit_edge_code0lcssa_reg <= DecodeHuffman__crit_edge_code0lcssa;
		if (start == 1'b0 && ^(DecodeHuffman__crit_edge_code0lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__crit_edge_code0lcssa_reg"); $finish; end
	end
	/* DecodeHuffman: %._crit_edge*/
	/*   %code.0.lcssa = phi i32 [ %..i, %buf_getb.exit ], [ %46, %._crit_edge.loopexit ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edgeloopexit_46) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman__crit_edge_code0lcssa_reg <= DecodeHuffman__crit_edge_code0lcssa;
		if (start == 1'b0 && ^(DecodeHuffman__crit_edge_code0lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__crit_edge_code0lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %._crit_edge*/
	/*   %l.0.lcssa = phi i32 [ 1, %buf_getb.exit ], [ %25, %._crit_edge.loopexit ]*/
	if ((((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_24) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_buf_getbexit_23 == 1'd0))) begin
		DecodeHuffman__crit_edge_l0lcssa = 32'd1;
	end
	/* DecodeHuffman: %._crit_edge*/
	/*   %l.0.lcssa = phi i32 [ 1, %buf_getb.exit ], [ %25, %._crit_edge.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edgeloopexit_46) & (memory_controller_waitrequest == 1'd0))) */ begin
		DecodeHuffman__crit_edge_l0lcssa = DecodeHuffman_lrph_25_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman__crit_edge_l0lcssa_reg <= 0;
	/* DecodeHuffman: %._crit_edge*/
	/*   %l.0.lcssa = phi i32 [ 1, %buf_getb.exit ], [ %25, %._crit_edge.loopexit ]*/
	else if((((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_24) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffman_buf_getbexit_23 == 1'd0))) begin
		DecodeHuffman__crit_edge_l0lcssa_reg <= DecodeHuffman__crit_edge_l0lcssa;
		if (start == 1'b0 && ^(DecodeHuffman__crit_edge_l0lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__crit_edge_l0lcssa_reg"); $finish; end
	end
	/* DecodeHuffman: %._crit_edge*/
	/*   %l.0.lcssa = phi i32 [ 1, %buf_getb.exit ], [ %25, %._crit_edge.loopexit ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edgeloopexit_46) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffman__crit_edge_l0lcssa_reg <= DecodeHuffman__crit_edge_l0lcssa;
		if (start == 1'b0 && ^(DecodeHuffman__crit_edge_l0lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__crit_edge_l0lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %._crit_edge*/
	/*   %49 = getelementptr inbounds i32* %Dhuff_maxcode, i32 %Dhuff_ml*/
		DecodeHuffman__crit_edge_49 = (arg_Dhuff_maxcode + (4 * arg_Dhuff_ml));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman__crit_edge_49_reg <= 0;
	/* DecodeHuffman: %._crit_edge*/
	/*   %49 = getelementptr inbounds i32* %Dhuff_maxcode, i32 %Dhuff_ml*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edge_47)) begin
		DecodeHuffman__crit_edge_49_reg <= DecodeHuffman__crit_edge_49;
		if (start == 1'b0 && ^(DecodeHuffman__crit_edge_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__crit_edge_49_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %._crit_edge*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
		DecodeHuffman__crit_edge_50 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman__crit_edge_50_reg <= 0;
	/* DecodeHuffman: %._crit_edge*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edge_49)) begin
		DecodeHuffman__crit_edge_50_reg <= DecodeHuffman__crit_edge_50;
		if (start == 1'b0 && ^(DecodeHuffman__crit_edge_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__crit_edge_50_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %._crit_edge*/
	/*   %51 = icmp slt i32 %code.0.lcssa, %50*/
		DecodeHuffman__crit_edge_51 = ($signed(DecodeHuffman__crit_edge_code0lcssa_reg) < $signed(DecodeHuffman__crit_edge_50));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman__crit_edge_51_reg <= 0;
	/* DecodeHuffman: %._crit_edge*/
	/*   %51 = icmp slt i32 %code.0.lcssa, %50*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edge_49)) begin
		DecodeHuffman__crit_edge_51_reg <= DecodeHuffman__crit_edge_51;
		if (start == 1'b0 && ^(DecodeHuffman__crit_edge_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__crit_edge_51_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %52*/
	/*   %53 = load i32* @main_result, align 4, !tbaa !1*/
		DecodeHuffman_52_53 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_52_53_reg <= 0;
	/* DecodeHuffman: %52*/
	/*   %53 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__52_52)) begin
		DecodeHuffman_52_53_reg <= DecodeHuffman_52_53;
		if (start == 1'b0 && ^(DecodeHuffman_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_52_53_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %52*/
	/*   %54 = add nsw i32 %53, 1*/
		DecodeHuffman_52_54 = (DecodeHuffman_52_53 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_52_54_reg <= 0;
	/* DecodeHuffman: %52*/
	/*   %54 = add nsw i32 %53, 1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__52_52)) begin
		DecodeHuffman_52_54_reg <= DecodeHuffman_52_54;
		if (start == 1'b0 && ^(DecodeHuffman_52_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_52_54_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %52*/
	/*   %55 = getelementptr inbounds i32* %Dhuff_valptr, i32 %l.0.lcssa*/
		DecodeHuffman_52_55 = (arg_Dhuff_valptr + (4 * DecodeHuffman__crit_edge_l0lcssa_reg));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_52_55_reg <= 0;
	/* DecodeHuffman: %52*/
	/*   %55 = getelementptr inbounds i32* %Dhuff_valptr, i32 %l.0.lcssa*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__52_50)) begin
		DecodeHuffman_52_55_reg <= DecodeHuffman_52_55;
		if (start == 1'b0 && ^(DecodeHuffman_52_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_52_55_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %52*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
		DecodeHuffman_52_56 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_52_56_reg <= 0;
	/* DecodeHuffman: %52*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__52_55)) begin
		DecodeHuffman_52_56_reg <= DecodeHuffman_52_56;
		if (start == 1'b0 && ^(DecodeHuffman_52_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_52_56_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %52*/
	/*   %57 = add nsw i32 %56, %code.0.lcssa*/
		DecodeHuffman_52_57 = (DecodeHuffman_52_56 + DecodeHuffman__crit_edge_code0lcssa_reg);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_52_57_reg <= 0;
	/* DecodeHuffman: %52*/
	/*   %57 = add nsw i32 %56, %code.0.lcssa*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__52_55)) begin
		DecodeHuffman_52_57_reg <= DecodeHuffman_52_57;
		if (start == 1'b0 && ^(DecodeHuffman_52_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_52_57_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %52*/
	/*   %58 = getelementptr inbounds i32* %Dhuff_mincode, i32 %l.0.lcssa*/
		DecodeHuffman_52_58 = (arg_Dhuff_mincode + (4 * DecodeHuffman__crit_edge_l0lcssa_reg));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_52_58_reg <= 0;
	/* DecodeHuffman: %52*/
	/*   %58 = getelementptr inbounds i32* %Dhuff_mincode, i32 %l.0.lcssa*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__52_50)) begin
		DecodeHuffman_52_58_reg <= DecodeHuffman_52_58;
		if (start == 1'b0 && ^(DecodeHuffman_52_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_52_58_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %52*/
	/*   %59 = load i32* %58, align 4, !tbaa !1*/
		DecodeHuffman_52_59 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_52_59_reg <= 0;
	/* DecodeHuffman: %52*/
	/*   %59 = load i32* %58, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__52_55)) begin
		DecodeHuffman_52_59_reg <= DecodeHuffman_52_59;
		if (start == 1'b0 && ^(DecodeHuffman_52_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_52_59_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %52*/
	/*   %60 = sub i32 %57, %59*/
		DecodeHuffman_52_60 = (DecodeHuffman_52_57 - DecodeHuffman_52_59);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_52_60_reg <= 0;
	/* DecodeHuffman: %52*/
	/*   %60 = sub i32 %57, %59*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__52_55)) begin
		DecodeHuffman_52_60_reg <= DecodeHuffman_52_60;
		if (start == 1'b0 && ^(DecodeHuffman_52_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_52_60_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %52*/
	/*   %61 = getelementptr inbounds i32* %Xhuff_huffval, i32 %60*/
		DecodeHuffman_52_61 = (arg_Xhuff_huffval + (4 * DecodeHuffman_52_60_reg));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_52_61_reg <= 0;
	/* DecodeHuffman: %52*/
	/*   %61 = getelementptr inbounds i32* %Xhuff_huffval, i32 %60*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__52_56)) begin
		DecodeHuffman_52_61_reg <= DecodeHuffman_52_61;
		if (start == 1'b0 && ^(DecodeHuffman_52_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_52_61_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffman: %52*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
		DecodeHuffman_52_62 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_52_62_reg <= 0;
	/* DecodeHuffman: %52*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__52_58)) begin
		DecodeHuffman_52_62_reg <= DecodeHuffman_52_62;
		if (start == 1'b0 && ^(DecodeHuffman_52_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_52_62_reg"); $finish; end
	end
end


//voter


//port drive
always @(posedge clk) begin
	if (reset)
		finish <= 0;
	else if((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* DecodeHuffman: %52*/
	/*   ret i32 %62*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__52_58)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* DecodeHuffman: %0*/
	/*   %1 = load i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffman: %._crit_edge.i*/
	/*   %.pre.i = load i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edgei_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffman: %3*/
	/*   %4 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__3_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffman: %3*/
	/*   store i8* %5, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__3_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffman: %3*/
	/*   %6 = load i8* %4, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__3_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffman: %8*/
	/*   store i8* %9, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__8_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffman: %8*/
	/*   %10 = load i8* %5, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__8_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffman: %pgetc.exit.i*/
	/*   store i32 %.0.i.i, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   store i32 %17, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffman: %pgetc.exit.i6*/
	/*   store i32 %.0.i.i5, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti6_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   store i32 %42, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_42)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffman: %._crit_edge*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edge_47)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffman: %52*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_53)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffman: %52*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_56)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* DecodeHuffman: %0*/
	/*   %1 = load i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_read_position_a;
	end
	/* DecodeHuffman: %._crit_edge.i*/
	/*   %.pre.i = load i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edgei_4)) begin
		memory_controller_address_a = `TAG_g_current_read_byte_a;
	end
	/* DecodeHuffman: %3*/
	/*   %4 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__3_7)) begin
		memory_controller_address_a = `TAG_g_CurHuffReadBuf_a;
	end
	/* DecodeHuffman: %3*/
	/*   store i8* %5, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__3_9)) begin
		memory_controller_address_a = `TAG_g_CurHuffReadBuf_a;
	end
	/* DecodeHuffman: %3*/
	/*   %6 = load i8* %4, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__3_10)) begin
		memory_controller_address_a = DecodeHuffman_3_4_reg;
	end
	/* DecodeHuffman: %8*/
	/*   store i8* %9, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__8_13)) begin
		memory_controller_address_a = `TAG_g_CurHuffReadBuf_a;
	end
	/* DecodeHuffman: %8*/
	/*   %10 = load i8* %5, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__8_14)) begin
		memory_controller_address_a = DecodeHuffman_3_5_reg;
	end
	/* DecodeHuffman: %pgetc.exit.i*/
	/*   store i32 %.0.i.i, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti_19)) begin
		memory_controller_address_a = `TAG_g_current_read_byte_a;
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   store i32 %17, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_21)) begin
		memory_controller_address_a = `TAG_g_read_position_a;
	end
	/* DecodeHuffman: %pgetc.exit.i6*/
	/*   store i32 %.0.i.i5, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti6_40)) begin
		memory_controller_address_a = `TAG_g_current_read_byte_a;
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   store i32 %42, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_42)) begin
		memory_controller_address_a = `TAG_g_read_position_a;
	end
	/* DecodeHuffman: %._crit_edge*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edge_47)) begin
		memory_controller_address_a = DecodeHuffman__crit_edge_49;
	end
	/* DecodeHuffman: %52*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_53)) begin
		memory_controller_address_a = DecodeHuffman_52_55_reg;
	end
	/* DecodeHuffman: %52*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_56)) begin
		memory_controller_address_a = DecodeHuffman_52_61;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* DecodeHuffman: %0*/
	/*   %1 = load i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* DecodeHuffman: %._crit_edge.i*/
	/*   %.pre.i = load i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edgei_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* DecodeHuffman: %3*/
	/*   %4 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__3_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* DecodeHuffman: %3*/
	/*   store i8* %5, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__3_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* DecodeHuffman: %3*/
	/*   %6 = load i8* %4, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__3_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* DecodeHuffman: %8*/
	/*   store i8* %9, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__8_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* DecodeHuffman: %8*/
	/*   %10 = load i8* %5, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__8_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* DecodeHuffman: %pgetc.exit.i*/
	/*   store i32 %.0.i.i, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti_19)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   store i32 %17, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_21)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* DecodeHuffman: %pgetc.exit.i6*/
	/*   store i32 %.0.i.i5, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti6_40)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   store i32 %42, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_42)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* DecodeHuffman: %._crit_edge*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edge_47)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* DecodeHuffman: %52*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_53)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* DecodeHuffman: %52*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_56)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* DecodeHuffman: %3*/
	/*   store i8* %5, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__3_9)) begin
		memory_controller_in_a = DecodeHuffman_3_5;
	end
	/* DecodeHuffman: %8*/
	/*   store i8* %9, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__8_13)) begin
		memory_controller_in_a = DecodeHuffman_8_9;
	end
	/* DecodeHuffman: %pgetc.exit.i*/
	/*   store i32 %.0.i.i, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti_19)) begin
		memory_controller_in_a = DecodeHuffman_pgetcexiti_0ii_reg;
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   store i32 %17, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_21)) begin
		memory_controller_in_a = DecodeHuffman_buf_getbexit_17;
	end
	/* DecodeHuffman: %pgetc.exit.i6*/
	/*   store i32 %.0.i.i5, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti6_40)) begin
		memory_controller_in_a = DecodeHuffman_pgetcexiti6_0ii5_reg;
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   store i32 %42, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_42)) begin
		memory_controller_in_a = DecodeHuffman_buf_getbexit9_42;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* DecodeHuffman: %0*/
	/*   %1 = load i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffman: %._crit_edge.i*/
	/*   %.pre.i = load i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edgei_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffman: %3*/
	/*   %4 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__3_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffman: %3*/
	/*   store i8* %5, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__3_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffman: %3*/
	/*   %6 = load i8* %4, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__3_10)) begin
		memory_controller_size_a = 2'd0;
	end
	/* DecodeHuffman: %8*/
	/*   store i8* %9, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__8_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffman: %8*/
	/*   %10 = load i8* %5, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__8_14)) begin
		memory_controller_size_a = 2'd0;
	end
	/* DecodeHuffman: %pgetc.exit.i*/
	/*   store i32 %.0.i.i, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   store i32 %17, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffman: %pgetc.exit.i6*/
	/*   store i32 %.0.i.i5, i32* @current_read_byte, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti6_40)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   store i32 %42, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_42)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffman: %._crit_edge*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__crit_edge_47)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffman: %52*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_53)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffman: %52*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_56)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* DecodeHuffman: %pgetc.exit.i*/
	/*   store i32 7, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* DecodeHuffman: %28*/
	/*   %29 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__28_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* DecodeHuffman: %28*/
	/*   store i8* %30, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__28_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* DecodeHuffman: %28*/
	/*   %31 = load i8* %29, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__28_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* DecodeHuffman: %33*/
	/*   store i8* %34, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__33_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* DecodeHuffman: %33*/
	/*   %35 = load i8* %30, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__33_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* DecodeHuffman: %pgetc.exit.i6*/
	/*   store i32 7, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti6_40)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_42)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %47 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_43)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* DecodeHuffman: %52*/
	/*   %53 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_50)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* DecodeHuffman: %52*/
	/*   store i32 %54, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_52)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* DecodeHuffman: %52*/
	/*   %59 = load i32* %58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_53)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* DecodeHuffman: %pgetc.exit.i*/
	/*   store i32 7, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti_19)) begin
		memory_controller_address_b = `TAG_g_read_position_a;
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_21)) begin
		memory_controller_address_b = DecodeHuffman_buf_getbexit_18;
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_22)) begin
		memory_controller_address_b = DecodeHuffman_buf_getbexit_21_reg;
	end
	/* DecodeHuffman: %28*/
	/*   %29 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__28_28)) begin
		memory_controller_address_b = `TAG_g_CurHuffReadBuf_a;
	end
	/* DecodeHuffman: %28*/
	/*   store i8* %30, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__28_30)) begin
		memory_controller_address_b = `TAG_g_CurHuffReadBuf_a;
	end
	/* DecodeHuffman: %28*/
	/*   %31 = load i8* %29, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__28_31)) begin
		memory_controller_address_b = DecodeHuffman_28_29_reg;
	end
	/* DecodeHuffman: %33*/
	/*   store i8* %34, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__33_34)) begin
		memory_controller_address_b = `TAG_g_CurHuffReadBuf_a;
	end
	/* DecodeHuffman: %33*/
	/*   %35 = load i8* %30, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__33_35)) begin
		memory_controller_address_b = DecodeHuffman_28_30_reg;
	end
	/* DecodeHuffman: %pgetc.exit.i6*/
	/*   store i32 7, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti6_40)) begin
		memory_controller_address_b = `TAG_g_read_position_a;
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_42)) begin
		memory_controller_address_b = DecodeHuffman_buf_getbexit9_43;
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %47 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_43)) begin
		memory_controller_address_b = DecodeHuffman_lrph_scevgep_reg;
	end
	/* DecodeHuffman: %52*/
	/*   %53 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_50)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* DecodeHuffman: %52*/
	/*   store i32 %54, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_52)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* DecodeHuffman: %52*/
	/*   %59 = load i32* %58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_53)) begin
		memory_controller_address_b = DecodeHuffman_52_58_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* DecodeHuffman: %pgetc.exit.i*/
	/*   store i32 7, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti_19)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_21)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_22)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* DecodeHuffman: %28*/
	/*   %29 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__28_28)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* DecodeHuffman: %28*/
	/*   store i8* %30, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__28_30)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* DecodeHuffman: %28*/
	/*   %31 = load i8* %29, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__28_31)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* DecodeHuffman: %33*/
	/*   store i8* %34, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__33_34)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* DecodeHuffman: %33*/
	/*   %35 = load i8* %30, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__33_35)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* DecodeHuffman: %pgetc.exit.i6*/
	/*   store i32 7, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti6_40)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_42)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %47 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_43)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* DecodeHuffman: %52*/
	/*   %53 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_50)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* DecodeHuffman: %52*/
	/*   store i32 %54, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_52)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* DecodeHuffman: %52*/
	/*   %59 = load i32* %58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_53)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* DecodeHuffman: %pgetc.exit.i*/
	/*   store i32 7, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti_19)) begin
		memory_controller_in_b = 32'd7;
	end
	/* DecodeHuffman: %28*/
	/*   store i8* %30, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__28_30)) begin
		memory_controller_in_b = DecodeHuffman_28_30;
	end
	/* DecodeHuffman: %33*/
	/*   store i8* %34, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__33_34)) begin
		memory_controller_in_b = DecodeHuffman_33_34;
	end
	/* DecodeHuffman: %pgetc.exit.i6*/
	/*   store i32 7, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti6_40)) begin
		memory_controller_in_b = 32'd7;
	end
	/* DecodeHuffman: %52*/
	/*   store i32 %54, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_52)) begin
		memory_controller_in_b = DecodeHuffman_52_54;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* DecodeHuffman: %pgetc.exit.i*/
	/*   store i32 7, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %19 = load i32* %18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* DecodeHuffman: %buf_getb.exit*/
	/*   %22 = load i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* DecodeHuffman: %28*/
	/*   %29 = load i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__28_28)) begin
		memory_controller_size_b = 2'd2;
	end
	/* DecodeHuffman: %28*/
	/*   store i8* %30, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__28_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* DecodeHuffman: %28*/
	/*   %31 = load i8* %29, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__28_31)) begin
		memory_controller_size_b = 2'd0;
	end
	/* DecodeHuffman: %33*/
	/*   store i8* %34, i8** @CurHuffReadBuf, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__33_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* DecodeHuffman: %33*/
	/*   %35 = load i8* %30, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__33_35)) begin
		memory_controller_size_b = 2'd0;
	end
	/* DecodeHuffman: %pgetc.exit.i6*/
	/*   store i32 7, i32* @read_position, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_pgetcexiti6_40)) begin
		memory_controller_size_b = 2'd2;
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_42)) begin
		memory_controller_size_b = 2'd2;
	end
	/* DecodeHuffman: %buf_getb.exit9*/
	/*   %47 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB_buf_getbexit9_43)) begin
		memory_controller_size_b = 2'd2;
	end
	/* DecodeHuffman: %52*/
	/*   %53 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_50)) begin
		memory_controller_size_b = 2'd2;
	end
	/* DecodeHuffman: %52*/
	/*   store i32 %54, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_52)) begin
		memory_controller_size_b = 2'd2;
	end
	/* DecodeHuffman: %52*/
	/*   %59 = load i32* %58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffman_BB__52_53)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if (reset)
		return_val <= 0;
	else if((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* DecodeHuffman: %52*/
	/*   ret i32 %62*/
	else if((cur_state == LEGUP_F_DecodeHuffman_BB__52_58)) begin
		return_val <= DecodeHuffman_52_62;
		if (start == 1'b0 && ^(DecodeHuffman_52_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module DecodeHuffMCU
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_out_buf,
	arg_num_cmp
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__0_2 = 6'd2;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__0_3 = 6'd3;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__0_4 = 6'd4;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__0_5 = 6'd5;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__0_7 = 6'd7;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__12_8 = 6'd8;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__12_10 = 6'd10;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__12_11 = 6'd11;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__12_12 = 6'd12;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__19_13 = 6'd13;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__19_14 = 6'd14;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__24_15 = 6'd15;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__24_16 = 6'd16;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__24_17 = 6'd17;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__24_18 = 6'd18;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB_lrph_19 = 6'd19;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB_preheader_20 = 6'd20;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__33_21 = 6'd21;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__33_22 = 6'd22;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__36_23 = 6'd23;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__36_24 = 6'd24;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__36_25 = 6'd25;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__36_27 = 6'd27;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__43_28 = 6'd28;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__46_29 = 6'd29;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__46_31 = 6'd31;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__46_32 = 6'd32;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__46_33 = 6'd33;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__46_34 = 6'd34;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__54_35 = 6'd35;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__54_36 = 6'd36;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__54_37 = 6'd37;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__59_38 = 6'd38;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__61_39 = 6'd39;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__63_40 = 6'd40;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB_backedge_41 = 6'd41;
parameter [5:0] LEGUP_F_DecodeHuffMCU_BB__66_42 = 6'd42;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [5:0] LEGUP_function_call_6 = 6'd6;
parameter [5:0] LEGUP_function_call_9 = 6'd9;
parameter [5:0] LEGUP_function_call_26 = 6'd26;
parameter [5:0] LEGUP_function_call_30 = 6'd30;
integer i;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_out_buf;
input [31:0] arg_num_cmp;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_0_1_reg;
reg [7:0] DecodeHuffMCU_0_2;
reg [7:0] DecodeHuffMCU_0_2_reg;
reg [31:0] DecodeHuffMCU_0_3;
reg [31:0] DecodeHuffMCU_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_0_5_reg;
reg [31:0] DecodeHuffMCU_0_6;
reg [31:0] DecodeHuffMCU_0_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_0_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_0_9_reg;
reg [31:0] DecodeHuffMCU_0_10;
reg [31:0] DecodeHuffMCU_0_10_reg;
reg  DecodeHuffMCU_0_11;
reg  DecodeHuffMCU_0_11_reg;
reg [31:0] DecodeHuffMCU_12_13;
reg [31:0] DecodeHuffMCU_12_13_reg;
reg [31:0] DecodeHuffMCU_12_14;
reg [31:0] DecodeHuffMCU_12_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_12_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_12_15_reg;
reg [31:0] DecodeHuffMCU_12_16;
reg [31:0] DecodeHuffMCU_12_16_reg;
reg [31:0] DecodeHuffMCU_12_17;
reg [31:0] DecodeHuffMCU_12_17_reg;
reg  DecodeHuffMCU_12_18;
reg  DecodeHuffMCU_12_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_19_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_19_20_reg;
reg [31:0] DecodeHuffMCU_19_21;
reg [31:0] DecodeHuffMCU_19_21_reg;
reg [31:0] DecodeHuffMCU_19_22;
reg [31:0] DecodeHuffMCU_19_22_reg;
reg [31:0] DecodeHuffMCU_19_23;
reg [31:0] DecodeHuffMCU_19_23_reg;
reg [31:0] DecodeHuffMCU_24_diff0;
reg [31:0] DecodeHuffMCU_24_diff0_reg;
reg [31:0] DecodeHuffMCU_24_25;
reg [31:0] DecodeHuffMCU_24_25_reg;
reg [31:0] DecodeHuffMCU_24_26;
reg [31:0] DecodeHuffMCU_24_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_lrph_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_lrph_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_lrph_mptr03;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_lrph_mptr03_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_preheader_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_preheader_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_preheader_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_preheader_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_preheader_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_preheader_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_preheader_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_preheader_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_preheader_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_preheader_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_33_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_33_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_33_mptr04;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_33_mptr04_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_33_mptr0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_33_mptr0_reg;
reg  DecodeHuffMCU_33_35;
reg  DecodeHuffMCU_33_35_reg;
reg [31:0] DecodeHuffMCU_36_k02;
reg [31:0] DecodeHuffMCU_36_k02_reg;
reg [31:0] DecodeHuffMCU_36_37;
reg [31:0] DecodeHuffMCU_36_37_reg;
reg [31:0] DecodeHuffMCU_36_38;
reg [31:0] DecodeHuffMCU_36_38_reg;
reg [31:0] DecodeHuffMCU_36_39;
reg [31:0] DecodeHuffMCU_36_39_reg;
reg [31:0] DecodeHuffMCU_36_40;
reg [31:0] DecodeHuffMCU_36_40_reg;
reg [31:0] DecodeHuffMCU_36_41;
reg [31:0] DecodeHuffMCU_36_41_reg;
reg  DecodeHuffMCU_36_42;
reg  DecodeHuffMCU_36_42_reg;
reg [31:0] DecodeHuffMCU_43_44;
reg [31:0] DecodeHuffMCU_43_44_reg;
reg  DecodeHuffMCU_43_45;
reg  DecodeHuffMCU_43_45_reg;
reg [31:0] DecodeHuffMCU_46_47;
reg [31:0] DecodeHuffMCU_46_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_46_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_46_48_reg;
reg [31:0] DecodeHuffMCU_46_49;
reg [31:0] DecodeHuffMCU_46_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_46_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_46_50_reg;
reg [31:0] DecodeHuffMCU_46_51;
reg [31:0] DecodeHuffMCU_46_51_reg;
reg [31:0] DecodeHuffMCU_46_52;
reg [31:0] DecodeHuffMCU_46_52_reg;
reg  DecodeHuffMCU_46_53;
reg  DecodeHuffMCU_46_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_54_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_54_55_reg;
reg [31:0] DecodeHuffMCU_54_56;
reg [31:0] DecodeHuffMCU_54_56_reg;
reg [31:0] DecodeHuffMCU_54_57;
reg [31:0] DecodeHuffMCU_54_57_reg;
reg [31:0] DecodeHuffMCU_54_58;
reg [31:0] DecodeHuffMCU_54_58_reg;
reg [31:0] DecodeHuffMCU_59_60;
reg [31:0] DecodeHuffMCU_59_60_reg;
reg  DecodeHuffMCU_61_62;
reg  DecodeHuffMCU_61_62_reg;
reg [31:0] DecodeHuffMCU_63_64;
reg [31:0] DecodeHuffMCU_63_64_reg;
reg [31:0] DecodeHuffMCU_backedge_k0be;
reg [31:0] DecodeHuffMCU_backedge_k0be_reg;
reg  DecodeHuffMCU_backedge_65;
reg  DecodeHuffMCU_backedge_65_reg;
wire [12:0] hana_jpg_address_a;
wire  hana_jpg_write_enable_a;
wire [7:0] hana_jpg_in_a;
wire [7:0] hana_jpg_out_a;
wire [12:0] hana_jpg_address_b;
wire  hana_jpg_write_enable_b;
wire [7:0] hana_jpg_in_b;
wire [7:0] hana_jpg_out_b;
wire [13:0] hana_bmp_address_a;
wire  hana_bmp_write_enable_a;
wire [7:0] hana_bmp_in_a;
wire [7:0] hana_bmp_out_a;
wire [13:0] hana_bmp_address_b;
wire  hana_bmp_write_enable_b;
wire [7:0] hana_bmp_in_b;
wire [7:0] hana_bmp_out_b;
wire [3:0] out_unread_marker_address_a;
wire  out_unread_marker_write_enable_a;
wire [31:0] out_unread_marker_in_a;
wire [31:0] out_unread_marker_out_a;
wire [3:0] out_unread_marker_address_b;
wire  out_unread_marker_write_enable_b;
wire [31:0] out_unread_marker_in_b;
wire [31:0] out_unread_marker_out_b;
wire [1:0] out_index_get_sof_address_a;
wire  out_index_get_sof_write_enable_a;
wire [31:0] out_index_get_sof_in_a;
wire [31:0] out_index_get_sof_out_a;
wire [1:0] out_index_get_sof_address_b;
wire  out_index_get_sof_write_enable_b;
wire [31:0] out_index_get_sof_in_b;
wire [31:0] out_index_get_sof_out_b;
wire [1:0] out_v_samp_factor_get_sof_address_a;
wire  out_v_samp_factor_get_sof_write_enable_a;
wire [31:0] out_v_samp_factor_get_sof_in_a;
wire [31:0] out_v_samp_factor_get_sof_out_a;
wire [1:0] out_v_samp_factor_get_sof_address_b;
wire  out_v_samp_factor_get_sof_write_enable_b;
wire [31:0] out_v_samp_factor_get_sof_in_b;
wire [31:0] out_v_samp_factor_get_sof_out_b;
wire [1:0] out_comp_id_get_sos_address_a;
wire  out_comp_id_get_sos_write_enable_a;
wire [31:0] out_comp_id_get_sos_in_a;
wire [31:0] out_comp_id_get_sos_out_a;
wire [1:0] out_comp_id_get_sos_address_b;
wire  out_comp_id_get_sos_write_enable_b;
wire [31:0] out_comp_id_get_sos_in_b;
wire [31:0] out_comp_id_get_sos_out_b;
wire [1:0] out_ac_tbl_no_get_sos_address_a;
wire  out_ac_tbl_no_get_sos_write_enable_a;
wire [31:0] out_ac_tbl_no_get_sos_in_a;
wire [31:0] out_ac_tbl_no_get_sos_out_a;
wire [1:0] out_ac_tbl_no_get_sos_address_b;
wire  out_ac_tbl_no_get_sos_write_enable_b;
wire [31:0] out_ac_tbl_no_get_sos_in_b;
wire [31:0] out_ac_tbl_no_get_sos_out_b;
wire [1:0] out_length_get_dht_address_a;
wire  out_length_get_dht_write_enable_a;
wire [31:0] out_length_get_dht_in_a;
wire [31:0] out_length_get_dht_out_a;
wire [1:0] out_length_get_dht_address_b;
wire  out_length_get_dht_write_enable_b;
wire [31:0] out_length_get_dht_in_b;
wire [31:0] out_length_get_dht_out_b;
wire [1:0] out_index_get_dht_address_a;
wire  out_index_get_dht_write_enable_a;
wire [31:0] out_index_get_dht_in_a;
wire [31:0] out_index_get_dht_out_a;
wire [1:0] out_index_get_dht_address_b;
wire  out_index_get_dht_write_enable_b;
wire [31:0] out_index_get_dht_in_b;
wire [31:0] out_index_get_dht_out_b;
wire [1:0] out_count_get_dht_address_a;
wire  out_count_get_dht_write_enable_a;
wire [31:0] out_count_get_dht_in_a;
wire [31:0] out_count_get_dht_out_a;
wire [1:0] out_count_get_dht_address_b;
wire  out_count_get_dht_write_enable_b;
wire [31:0] out_count_get_dht_in_b;
wire [31:0] out_count_get_dht_out_b;
wire  out_length_get_dqt_address_a;
wire  out_length_get_dqt_write_enable_a;
wire [31:0] out_length_get_dqt_in_a;
wire [31:0] out_length_get_dqt_out_a;
wire  out_length_get_dqt_address_b;
wire  out_length_get_dqt_write_enable_b;
wire [31:0] out_length_get_dqt_in_b;
wire [31:0] out_length_get_dqt_out_b;
wire  out_prec_get_dht_address_a;
wire  out_prec_get_dht_write_enable_a;
wire [31:0] out_prec_get_dht_in_a;
wire [31:0] out_prec_get_dht_out_a;
wire  out_prec_get_dht_address_b;
wire  out_prec_get_dht_write_enable_b;
wire [31:0] out_prec_get_dht_in_b;
wire [31:0] out_prec_get_dht_out_b;
wire  out_num_get_dht_address_a;
wire  out_num_get_dht_write_enable_a;
wire [31:0] out_num_get_dht_in_a;
wire [31:0] out_num_get_dht_out_a;
wire  out_num_get_dht_address_b;
wire  out_num_get_dht_write_enable_b;
wire [31:0] out_num_get_dht_in_b;
wire [31:0] out_num_get_dht_out_b;
wire [5:0] izigzag_index_address_a;
wire  izigzag_index_write_enable_a;
wire [31:0] izigzag_index_in_a;
wire [31:0] izigzag_index_out_a;
wire [5:0] izigzag_index_address_b;
wire  izigzag_index_write_enable_b;
wire [31:0] izigzag_index_in_b;
wire [31:0] izigzag_index_out_b;
wire  main_result_address_a;
wire  main_result_write_enable_a;
wire [31:0] main_result_in_a;
wire [31:0] main_result_out_a;
wire  main_result_address_b;
wire  main_result_write_enable_b;
wire [31:0] main_result_in_b;
wire [31:0] main_result_out_b;
wire  p_jinfo_image_height_address_a;
wire  p_jinfo_image_height_write_enable_a;
wire [15:0] p_jinfo_image_height_in_a;
wire [15:0] p_jinfo_image_height_out_a;
wire  p_jinfo_image_height_address_b;
wire  p_jinfo_image_height_write_enable_b;
wire [15:0] p_jinfo_image_height_in_b;
wire [15:0] p_jinfo_image_height_out_b;
wire  p_jinfo_image_width_address_a;
wire  p_jinfo_image_width_write_enable_a;
wire [15:0] p_jinfo_image_width_in_a;
wire [15:0] p_jinfo_image_width_out_a;
wire  p_jinfo_image_width_address_b;
wire  p_jinfo_image_width_write_enable_b;
wire [15:0] p_jinfo_image_width_in_b;
wire [15:0] p_jinfo_image_width_out_b;
wire [1:0] p_jinfo_comps_info_index_address_a;
wire  p_jinfo_comps_info_index_write_enable_a;
wire [7:0] p_jinfo_comps_info_index_in_a;
wire [7:0] p_jinfo_comps_info_index_out_a;
wire [1:0] p_jinfo_comps_info_index_address_b;
wire  p_jinfo_comps_info_index_write_enable_b;
wire [7:0] p_jinfo_comps_info_index_in_b;
wire [7:0] p_jinfo_comps_info_index_out_b;
wire [1:0] p_jinfo_comps_info_id_address_a;
wire  p_jinfo_comps_info_id_write_enable_a;
wire [7:0] p_jinfo_comps_info_id_in_a;
wire [7:0] p_jinfo_comps_info_id_out_a;
wire [1:0] p_jinfo_comps_info_id_address_b;
wire  p_jinfo_comps_info_id_write_enable_b;
wire [7:0] p_jinfo_comps_info_id_in_b;
wire [7:0] p_jinfo_comps_info_id_out_b;
wire [1:0] p_jinfo_comps_info_h_samp_factor_address_a;
wire  p_jinfo_comps_info_h_samp_factor_write_enable_a;
wire [7:0] p_jinfo_comps_info_h_samp_factor_in_a;
wire [7:0] p_jinfo_comps_info_h_samp_factor_out_a;
wire [1:0] p_jinfo_comps_info_h_samp_factor_address_b;
wire  p_jinfo_comps_info_h_samp_factor_write_enable_b;
wire [7:0] p_jinfo_comps_info_h_samp_factor_in_b;
wire [7:0] p_jinfo_comps_info_h_samp_factor_out_b;
wire [1:0] p_jinfo_comps_info_v_samp_factor_address_a;
wire  p_jinfo_comps_info_v_samp_factor_write_enable_a;
wire [7:0] p_jinfo_comps_info_v_samp_factor_in_a;
wire [7:0] p_jinfo_comps_info_v_samp_factor_out_a;
wire [1:0] p_jinfo_comps_info_v_samp_factor_address_b;
wire  p_jinfo_comps_info_v_samp_factor_write_enable_b;
wire [7:0] p_jinfo_comps_info_v_samp_factor_in_b;
wire [7:0] p_jinfo_comps_info_v_samp_factor_out_b;
wire [1:0] p_jinfo_comps_info_quant_tbl_no_address_a;
wire  p_jinfo_comps_info_quant_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_quant_tbl_no_address_b;
wire  p_jinfo_comps_info_quant_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_out_b;
wire [1:0] p_jinfo_comps_info_dc_tbl_no_address_a;
wire  p_jinfo_comps_info_dc_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_dc_tbl_no_address_b;
wire  p_jinfo_comps_info_dc_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_b;
wire [1:0] p_jinfo_comps_info_ac_tbl_no_address_a;
wire  p_jinfo_comps_info_ac_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_ac_tbl_no_address_b;
wire  p_jinfo_comps_info_ac_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_out_b;
wire [6:0] p_jinfo_ac_xhuff_tbl_bits_address_a;
wire  p_jinfo_ac_xhuff_tbl_bits_write_enable_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_in_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_a;
wire [6:0] p_jinfo_ac_xhuff_tbl_bits_address_b;
wire  p_jinfo_ac_xhuff_tbl_bits_write_enable_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_b;
wire [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_a;
wire  p_jinfo_ac_xhuff_tbl_huffval_write_enable_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_a;
wire [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_b;
wire  p_jinfo_ac_xhuff_tbl_huffval_write_enable_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_b;
wire [6:0] p_jinfo_dc_xhuff_tbl_bits_address_a;
wire  p_jinfo_dc_xhuff_tbl_bits_write_enable_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_in_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_a;
wire [6:0] p_jinfo_dc_xhuff_tbl_bits_address_b;
wire  p_jinfo_dc_xhuff_tbl_bits_write_enable_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_b;
wire [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_a;
wire  p_jinfo_dc_xhuff_tbl_huffval_write_enable_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_a;
wire [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_b;
wire  p_jinfo_dc_xhuff_tbl_huffval_write_enable_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_b;
wire [7:0] p_jinfo_quant_tbl_quantval_address_a;
wire  p_jinfo_quant_tbl_quantval_write_enable_a;
wire [31:0] p_jinfo_quant_tbl_quantval_in_a;
wire [31:0] p_jinfo_quant_tbl_quantval_out_a;
wire [7:0] p_jinfo_quant_tbl_quantval_address_b;
wire  p_jinfo_quant_tbl_quantval_write_enable_b;
wire [31:0] p_jinfo_quant_tbl_quantval_in_b;
wire [31:0] p_jinfo_quant_tbl_quantval_out_b;
wire [5:0] zigzag_index_address_a;
wire  zigzag_index_write_enable_a;
wire [31:0] zigzag_index_in_a;
wire [31:0] zigzag_index_out_a;
wire [5:0] zigzag_index_address_b;
wire  zigzag_index_write_enable_b;
wire [31:0] zigzag_index_in_b;
wire [31:0] zigzag_index_out_b;
wire  p_jinfo_MCUWidth_address_a;
wire  p_jinfo_MCUWidth_write_enable_a;
wire [31:0] p_jinfo_MCUWidth_in_a;
wire [31:0] p_jinfo_MCUWidth_out_a;
wire  p_jinfo_MCUWidth_address_b;
wire  p_jinfo_MCUWidth_write_enable_b;
wire [31:0] p_jinfo_MCUWidth_in_b;
wire [31:0] p_jinfo_MCUWidth_out_b;
wire [9:0] rgb_buf_address_a;
wire  rgb_buf_write_enable_a;
wire [31:0] rgb_buf_in_a;
wire [31:0] rgb_buf_out_a;
wire [9:0] rgb_buf_address_b;
wire  rgb_buf_write_enable_b;
wire [31:0] rgb_buf_in_b;
wire [31:0] rgb_buf_out_b;
wire  CurHuffReadBuf_address_a;
wire  CurHuffReadBuf_write_enable_a;
wire [31:0] CurHuffReadBuf_in_a;
wire [31:0] CurHuffReadBuf_out_a;
wire  CurHuffReadBuf_address_b;
wire  CurHuffReadBuf_write_enable_b;
wire [31:0] CurHuffReadBuf_in_b;
wire [31:0] CurHuffReadBuf_out_b;
wire [13:0] OutData_comp_buf_address_a;
wire  OutData_comp_buf_write_enable_a;
wire [7:0] OutData_comp_buf_in_a;
wire [7:0] OutData_comp_buf_out_a;
wire [13:0] OutData_comp_buf_address_b;
wire  OutData_comp_buf_write_enable_b;
wire [7:0] OutData_comp_buf_in_b;
wire [7:0] OutData_comp_buf_out_b;
wire [4:0] bit_set_mask_address_a;
wire  bit_set_mask_write_enable_a;
wire [31:0] bit_set_mask_in_a;
wire [31:0] bit_set_mask_out_a;
wire [4:0] bit_set_mask_address_b;
wire  bit_set_mask_write_enable_b;
wire [31:0] bit_set_mask_in_b;
wire [31:0] bit_set_mask_out_b;
wire [4:0] lmask_address_a;
wire  lmask_write_enable_a;
wire [31:0] lmask_in_a;
wire [31:0] lmask_out_a;
wire [4:0] lmask_address_b;
wire  lmask_write_enable_b;
wire [31:0] lmask_in_b;
wire [31:0] lmask_out_b;
wire  read_position_address_a;
wire  read_position_write_enable_a;
wire [31:0] read_position_in_a;
wire [31:0] read_position_out_a;
wire  read_position_address_b;
wire  read_position_write_enable_b;
wire [31:0] read_position_in_b;
wire [31:0] read_position_out_b;
wire  current_read_byte_address_a;
wire  current_read_byte_write_enable_a;
wire [31:0] current_read_byte_in_a;
wire [31:0] current_read_byte_out_a;
wire  current_read_byte_address_b;
wire  current_read_byte_write_enable_b;
wire [31:0] current_read_byte_in_b;
wire [31:0] current_read_byte_out_b;
wire  p_jinfo_dc_dhuff_tbl_ml_address_a;
wire  p_jinfo_dc_dhuff_tbl_ml_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_a;
wire  p_jinfo_dc_dhuff_tbl_ml_address_b;
wire  p_jinfo_dc_dhuff_tbl_ml_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_a;
wire  p_jinfo_dc_dhuff_tbl_maxcode_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_b;
wire  p_jinfo_dc_dhuff_tbl_maxcode_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_a;
wire  p_jinfo_dc_dhuff_tbl_mincode_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_b;
wire  p_jinfo_dc_dhuff_tbl_mincode_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_a;
wire  p_jinfo_dc_dhuff_tbl_valptr_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_b;
wire  p_jinfo_dc_dhuff_tbl_valptr_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_b;
reg [4:0] extend_mask_address_a;
reg  extend_mask_write_enable_a;
wire [31:0] extend_mask_in_a;
wire [31:0] extend_mask_out_a;
wire [4:0] extend_mask_address_b;
wire  extend_mask_write_enable_b;
wire [31:0] extend_mask_in_b;
wire [31:0] extend_mask_out_b;
wire  p_jinfo_ac_dhuff_tbl_ml_address_a;
wire  p_jinfo_ac_dhuff_tbl_ml_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_a;
wire  p_jinfo_ac_dhuff_tbl_ml_address_b;
wire  p_jinfo_ac_dhuff_tbl_ml_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_a;
wire  p_jinfo_ac_dhuff_tbl_maxcode_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_b;
wire  p_jinfo_ac_dhuff_tbl_maxcode_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_a;
wire  p_jinfo_ac_dhuff_tbl_mincode_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_b;
wire  p_jinfo_ac_dhuff_tbl_mincode_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_a;
wire  p_jinfo_ac_dhuff_tbl_valptr_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_b;
wire  p_jinfo_ac_dhuff_tbl_valptr_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_b;
wire [1:0] OutData_comp_vpos_address_a;
wire  OutData_comp_vpos_write_enable_a;
wire [31:0] OutData_comp_vpos_in_a;
wire [31:0] OutData_comp_vpos_out_a;
wire [1:0] OutData_comp_vpos_address_b;
wire  OutData_comp_vpos_write_enable_b;
wire [31:0] OutData_comp_vpos_in_b;
wire [31:0] OutData_comp_vpos_out_b;
wire [1:0] OutData_comp_hpos_address_a;
wire  OutData_comp_hpos_write_enable_a;
wire [31:0] OutData_comp_hpos_in_a;
wire [31:0] OutData_comp_hpos_out_a;
wire [1:0] OutData_comp_hpos_address_b;
wire  OutData_comp_hpos_write_enable_b;
wire [31:0] OutData_comp_hpos_in_b;
wire [31:0] OutData_comp_hpos_out_b;
wire [12:0] JpegFileBuf_address_a;
wire  JpegFileBuf_write_enable_a;
wire [7:0] JpegFileBuf_in_a;
wire [7:0] JpegFileBuf_out_a;
wire [12:0] JpegFileBuf_address_b;
wire  JpegFileBuf_write_enable_b;
wire [7:0] JpegFileBuf_in_b;
wire [7:0] JpegFileBuf_out_b;
wire [8:0] huff_make_dhuff_tb_0_huffsize_address_a;
wire  huff_make_dhuff_tb_0_huffsize_write_enable_a;
wire [31:0] huff_make_dhuff_tb_0_huffsize_in_a;
wire [31:0] huff_make_dhuff_tb_0_huffsize_out_a;
wire [8:0] huff_make_dhuff_tb_0_huffsize_address_b;
wire  huff_make_dhuff_tb_0_huffsize_write_enable_b;
wire [31:0] huff_make_dhuff_tb_0_huffsize_in_b;
wire [31:0] huff_make_dhuff_tb_0_huffsize_out_b;
wire [8:0] huff_make_dhuff_tb_0_huffcode_address_a;
wire  huff_make_dhuff_tb_0_huffcode_write_enable_a;
wire [31:0] huff_make_dhuff_tb_0_huffcode_in_a;
wire [31:0] huff_make_dhuff_tb_0_huffcode_out_a;
wire [8:0] huff_make_dhuff_tb_0_huffcode_address_b;
wire  huff_make_dhuff_tb_0_huffcode_write_enable_b;
wire [31:0] huff_make_dhuff_tb_0_huffcode_in_b;
wire [31:0] huff_make_dhuff_tb_0_huffcode_out_b;
wire [5:0] main_0_QuantBuffiii_address_a;
wire  main_0_QuantBuffiii_write_enable_a;
wire [31:0] main_0_QuantBuffiii_in_a;
wire [31:0] main_0_QuantBuffiii_out_a;
wire [5:0] main_0_QuantBuffiii_address_b;
wire  main_0_QuantBuffiii_write_enable_b;
wire [31:0] main_0_QuantBuffiii_in_b;
wire [31:0] main_0_QuantBuffiii_out_b;
wire [7:0] main_0_HuffBuffii_address_a;
wire  main_0_HuffBuffii_write_enable_a;
wire [31:0] main_0_HuffBuffii_in_a;
wire [31:0] main_0_HuffBuffii_out_a;
wire [7:0] main_0_HuffBuffii_address_b;
wire  main_0_HuffBuffii_write_enable_b;
wire [31:0] main_0_HuffBuffii_in_b;
wire [31:0] main_0_HuffBuffii_out_b;
wire [8:0] main_0_IDCTBuffii_address_a;
wire  main_0_IDCTBuffii_write_enable_a;
wire [31:0] main_0_IDCTBuffii_in_a;
wire [31:0] main_0_IDCTBuffii_out_a;
wire [8:0] main_0_IDCTBuffii_address_b;
wire  main_0_IDCTBuffii_write_enable_b;
wire [31:0] main_0_IDCTBuffii_in_b;
wire [31:0] main_0_IDCTBuffii_out_b;
reg  DecodeHuffman_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_arg_Xhuff_huffval;
reg [31:0] DecodeHuffman_arg_Dhuff_ml;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_arg_Dhuff_maxcode;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_arg_Dhuff_mincode;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_arg_Dhuff_valptr;
wire  DecodeHuffman_memory_controller_enable_a;
wire  DecodeHuffman_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] DecodeHuffman_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] DecodeHuffman_memory_controller_out_a;
wire [1:0] DecodeHuffman_memory_controller_size_a;
wire  DecodeHuffman_memory_controller_enable_b;
wire  DecodeHuffman_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] DecodeHuffman_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] DecodeHuffman_memory_controller_out_b;
wire [1:0] DecodeHuffman_memory_controller_size_b;
reg  DecodeHuffman_memory_controller_waitrequest;
reg  DecodeHuffman_finish_final;
reg  DecodeHuffman_finish_reg;
wire  DecodeHuffman_finish;
wire [31:0] DecodeHuffman_return_val;
reg [31:0] DecodeHuffman_return_val_reg;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg  buf_getv_start;
reg [31:0] buf_getv_arg_n;
wire  buf_getv_memory_controller_enable_a;
wire  buf_getv_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] buf_getv_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] buf_getv_memory_controller_out_a;
wire [1:0] buf_getv_memory_controller_size_a;
wire  buf_getv_memory_controller_enable_b;
wire  buf_getv_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] buf_getv_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] buf_getv_memory_controller_out_b;
wire [1:0] buf_getv_memory_controller_size_b;
reg  buf_getv_memory_controller_waitrequest;
reg  buf_getv_finish_final;
reg  buf_getv_finish_reg;
wire  buf_getv_finish;
wire [31:0] buf_getv_return_val;
reg [31:0] buf_getv_return_val_reg;


DecodeHuffman DecodeHuffman (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (DecodeHuffman_memory_controller_enable_a),
	.memory_controller_address_a (DecodeHuffman_memory_controller_address_a),
	.memory_controller_write_enable_a (DecodeHuffman_memory_controller_write_enable_a),
	.memory_controller_in_a (DecodeHuffman_memory_controller_in_a),
	.memory_controller_size_a (DecodeHuffman_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (DecodeHuffman_memory_controller_enable_b),
	.memory_controller_address_b (DecodeHuffman_memory_controller_address_b),
	.memory_controller_write_enable_b (DecodeHuffman_memory_controller_write_enable_b),
	.memory_controller_in_b (DecodeHuffman_memory_controller_in_b),
	.memory_controller_size_b (DecodeHuffman_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (DecodeHuffman_start),
	.finish (DecodeHuffman_finish),
	.return_val (DecodeHuffman_return_val),
	.arg_Xhuff_huffval (DecodeHuffman_arg_Xhuff_huffval),
	.arg_Dhuff_ml (DecodeHuffman_arg_Dhuff_ml),
	.arg_Dhuff_maxcode (DecodeHuffman_arg_Dhuff_maxcode),
	.arg_Dhuff_mincode (DecodeHuffman_arg_Dhuff_mincode),
	.arg_Dhuff_valptr (DecodeHuffman_arg_Dhuff_valptr)
);

defparam
	DecodeHuffman.tag_offset = tag_offset;


buf_getv buf_getv (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (buf_getv_memory_controller_enable_a),
	.memory_controller_address_a (buf_getv_memory_controller_address_a),
	.memory_controller_write_enable_a (buf_getv_memory_controller_write_enable_a),
	.memory_controller_in_a (buf_getv_memory_controller_in_a),
	.memory_controller_size_a (buf_getv_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (buf_getv_memory_controller_enable_b),
	.memory_controller_address_b (buf_getv_memory_controller_address_b),
	.memory_controller_write_enable_b (buf_getv_memory_controller_write_enable_b),
	.memory_controller_in_b (buf_getv_memory_controller_in_b),
	.memory_controller_size_b (buf_getv_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (buf_getv_start),
	.finish (buf_getv_finish),
	.return_val (buf_getv_return_val),
	.arg_n (buf_getv_arg_n)
);

defparam
	buf_getv.tag_offset = tag_offset;

// Local Rams


// @extend_mask = internal unnamed_addr constant [20 x i32] [i32 -2, i32 -4, i32 -8, i32 -16, i32 -32, i32 -64, i32 -128, i32 -256, i32 -512, i32 -1024, i32 -2048, i32 -4096, i32 -8192, i32 -16384, i32 -...
rom_dual_port extend_mask (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( extend_mask_address_a ),
	.address_b( extend_mask_address_b ),
	.q_a( extend_mask_out_a ),
	.q_b( extend_mask_out_b )
);
defparam extend_mask.width_a = 32;
defparam extend_mask.width_b = 32;
defparam extend_mask.widthad_a = 5;
defparam extend_mask.widthad_b = 5;
defparam extend_mask.numwords_a = 20;
defparam extend_mask.numwords_b = 20;
defparam extend_mask.latency = 1;
defparam extend_mask.init_file = "extend_mask.mif";


always @(posedge clk) begin
	if (reset)
		cur_state <= LEGUP_0;
	else if (memory_controller_waitrequest == 1'd1)
		cur_state <= cur_state;
	else
		cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_DecodeHuffMCU_BB__0_1;
LEGUP_F_DecodeHuffMCU_BB__0_1:
		next_state = LEGUP_F_DecodeHuffMCU_BB__0_2;
LEGUP_F_DecodeHuffMCU_BB__0_2:
		next_state = LEGUP_F_DecodeHuffMCU_BB__0_3;
LEGUP_F_DecodeHuffMCU_BB__0_3:
		next_state = LEGUP_F_DecodeHuffMCU_BB__0_4;
LEGUP_F_DecodeHuffMCU_BB__0_4:
		next_state = LEGUP_F_DecodeHuffMCU_BB__0_5;
LEGUP_F_DecodeHuffMCU_BB__0_5:
		next_state = LEGUP_function_call_6;
LEGUP_F_DecodeHuffMCU_BB__0_7:
	if ((DecodeHuffMCU_0_11 == 1'd1))
		next_state = LEGUP_F_DecodeHuffMCU_BB_lrph_19;
	else if ((DecodeHuffMCU_0_11 == 1'd0))
		next_state = LEGUP_F_DecodeHuffMCU_BB__12_8;
LEGUP_F_DecodeHuffMCU_BB__12_10:
		next_state = LEGUP_F_DecodeHuffMCU_BB__12_11;
LEGUP_F_DecodeHuffMCU_BB__12_11:
		next_state = LEGUP_F_DecodeHuffMCU_BB__12_12;
LEGUP_F_DecodeHuffMCU_BB__12_12:
	if ((DecodeHuffMCU_12_18 == 1'd1))
		next_state = LEGUP_F_DecodeHuffMCU_BB__19_13;
	else if ((DecodeHuffMCU_12_18 == 1'd0))
		next_state = LEGUP_F_DecodeHuffMCU_BB__24_15;
LEGUP_F_DecodeHuffMCU_BB__12_8:
		next_state = LEGUP_function_call_9;
LEGUP_F_DecodeHuffMCU_BB__19_13:
		next_state = LEGUP_F_DecodeHuffMCU_BB__19_14;
LEGUP_F_DecodeHuffMCU_BB__19_14:
		next_state = LEGUP_F_DecodeHuffMCU_BB__24_15;
LEGUP_F_DecodeHuffMCU_BB__24_15:
		next_state = LEGUP_F_DecodeHuffMCU_BB__24_16;
LEGUP_F_DecodeHuffMCU_BB__24_16:
		next_state = LEGUP_F_DecodeHuffMCU_BB__24_17;
LEGUP_F_DecodeHuffMCU_BB__24_17:
		next_state = LEGUP_F_DecodeHuffMCU_BB__24_18;
LEGUP_F_DecodeHuffMCU_BB__24_18:
		next_state = LEGUP_F_DecodeHuffMCU_BB_lrph_19;
LEGUP_F_DecodeHuffMCU_BB__33_21:
		next_state = LEGUP_F_DecodeHuffMCU_BB__33_22;
LEGUP_F_DecodeHuffMCU_BB__33_22:
	if ((DecodeHuffMCU_33_35_reg == 1'd1))
		next_state = LEGUP_F_DecodeHuffMCU_BB__33_21;
	else if ((DecodeHuffMCU_33_35_reg == 1'd0))
		next_state = LEGUP_F_DecodeHuffMCU_BB_preheader_20;
LEGUP_F_DecodeHuffMCU_BB__36_23:
		next_state = LEGUP_F_DecodeHuffMCU_BB__36_24;
LEGUP_F_DecodeHuffMCU_BB__36_24:
		next_state = LEGUP_F_DecodeHuffMCU_BB__36_25;
LEGUP_F_DecodeHuffMCU_BB__36_25:
		next_state = LEGUP_function_call_26;
LEGUP_F_DecodeHuffMCU_BB__36_27:
	if ((DecodeHuffMCU_36_42 == 1'd1))
		next_state = LEGUP_F_DecodeHuffMCU_BB__61_39;
	else if ((DecodeHuffMCU_36_42 == 1'd0))
		next_state = LEGUP_F_DecodeHuffMCU_BB__43_28;
LEGUP_F_DecodeHuffMCU_BB__43_28:
	if ((DecodeHuffMCU_43_45 == 1'd1))
		next_state = LEGUP_F_DecodeHuffMCU_BB__66_42;
	else if ((DecodeHuffMCU_43_45 == 1'd0))
		next_state = LEGUP_F_DecodeHuffMCU_BB__46_29;
LEGUP_F_DecodeHuffMCU_BB__46_29:
		next_state = LEGUP_function_call_30;
LEGUP_F_DecodeHuffMCU_BB__46_31:
		next_state = LEGUP_F_DecodeHuffMCU_BB__46_32;
LEGUP_F_DecodeHuffMCU_BB__46_32:
		next_state = LEGUP_F_DecodeHuffMCU_BB__46_33;
LEGUP_F_DecodeHuffMCU_BB__46_33:
		next_state = LEGUP_F_DecodeHuffMCU_BB__46_34;
LEGUP_F_DecodeHuffMCU_BB__46_34:
	if ((DecodeHuffMCU_46_53 == 1'd1))
		next_state = LEGUP_F_DecodeHuffMCU_BB__54_35;
	else if ((DecodeHuffMCU_46_53 == 1'd0))
		next_state = LEGUP_F_DecodeHuffMCU_BB__59_38;
LEGUP_F_DecodeHuffMCU_BB__54_35:
		next_state = LEGUP_F_DecodeHuffMCU_BB__54_36;
LEGUP_F_DecodeHuffMCU_BB__54_36:
		next_state = LEGUP_F_DecodeHuffMCU_BB__54_37;
LEGUP_F_DecodeHuffMCU_BB__54_37:
		next_state = LEGUP_F_DecodeHuffMCU_BB__59_38;
LEGUP_F_DecodeHuffMCU_BB__59_38:
		next_state = LEGUP_F_DecodeHuffMCU_BB_backedge_41;
LEGUP_F_DecodeHuffMCU_BB__61_39:
	if ((DecodeHuffMCU_61_62 == 1'd1))
		next_state = LEGUP_F_DecodeHuffMCU_BB__63_40;
	else if ((DecodeHuffMCU_61_62 == 1'd0))
		next_state = LEGUP_F_DecodeHuffMCU_BB__66_42;
LEGUP_F_DecodeHuffMCU_BB__63_40:
		next_state = LEGUP_F_DecodeHuffMCU_BB_backedge_41;
LEGUP_F_DecodeHuffMCU_BB__66_42:
		next_state = LEGUP_0;
LEGUP_F_DecodeHuffMCU_BB_backedge_41:
	if ((DecodeHuffMCU_backedge_65 == 1'd1))
		next_state = LEGUP_F_DecodeHuffMCU_BB__36_23;
	else if ((DecodeHuffMCU_backedge_65 == 1'd0))
		next_state = LEGUP_F_DecodeHuffMCU_BB__66_42;
LEGUP_F_DecodeHuffMCU_BB_lrph_19:
		next_state = LEGUP_F_DecodeHuffMCU_BB__33_21;
LEGUP_F_DecodeHuffMCU_BB_preheader_20:
		next_state = LEGUP_F_DecodeHuffMCU_BB__36_23;
LEGUP_function_call_26:
	if ((DecodeHuffman_finish_final == 1'd1))
		next_state = LEGUP_F_DecodeHuffMCU_BB__36_27;
LEGUP_function_call_30:
	if ((buf_getv_finish_final == 1'd1))
		next_state = LEGUP_F_DecodeHuffMCU_BB__46_31;
LEGUP_function_call_6:
	if ((DecodeHuffman_finish_final == 1'd1))
		next_state = LEGUP_F_DecodeHuffMCU_BB__0_7;
LEGUP_function_call_9:
	if ((buf_getv_finish_final == 1'd1))
		next_state = LEGUP_F_DecodeHuffMCU_BB__12_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* DecodeHuffMCU: %0*/
	/*   %1 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_dc_tbl_no, i32 0, i32 %num_cmp*/
		DecodeHuffMCU_0_1 = (`TAG_g_p_jinfo_comps_info_dc_tbl_no_a + (1 * arg_num_cmp));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_0_1_reg <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %1 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_dc_tbl_no, i32 0, i32 %num_cmp*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_1)) begin
		DecodeHuffMCU_0_1_reg <= DecodeHuffMCU_0_1;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %0*/
	/*   %2 = load i8* %1, align 1, !tbaa !1*/
		DecodeHuffMCU_0_2 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_0_2_reg <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %2 = load i8* %1, align 1, !tbaa !1*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_3)) begin
		DecodeHuffMCU_0_2_reg <= DecodeHuffMCU_0_2;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %0*/
	/*   %3 = sext i8 %2 to i32*/
		DecodeHuffMCU_0_3 = $signed(DecodeHuffMCU_0_2);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_0_3_reg <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %3 = sext i8 %2 to i32*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_3)) begin
		DecodeHuffMCU_0_3_reg <= DecodeHuffMCU_0_3;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %0*/
	/*   %4 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_dc_xhuff_tbl_huffval, i32 0, i32 %3, i32 0*/
		DecodeHuffMCU_0_4 = (`TAG_g_p_jinfo_dc_xhuff_tbl_huffval_a + (1028 * DecodeHuffMCU_0_3));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_0_4_reg <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %4 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_dc_xhuff_tbl_huffval, i32 0, i32 %3, i32 0*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_3)) begin
		DecodeHuffMCU_0_4_reg <= DecodeHuffMCU_0_4;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %0*/
	/*   %5 = getelementptr inbounds [2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 %3*/
		DecodeHuffMCU_0_5 = (`TAG_g_p_jinfo_dc_dhuff_tbl_ml_a + (4 * DecodeHuffMCU_0_3));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_0_5_reg <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %5 = getelementptr inbounds [2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 %3*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_3)) begin
		DecodeHuffMCU_0_5_reg <= DecodeHuffMCU_0_5;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %0*/
	/*   %6 = load i32* %5, align 4, !tbaa !4*/
		DecodeHuffMCU_0_6 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_0_6_reg <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %6 = load i32* %5, align 4, !tbaa !4*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_5)) begin
		DecodeHuffMCU_0_6_reg <= DecodeHuffMCU_0_6;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_0_6_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %0*/
	/*   %7 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 %3, i32 0*/
		DecodeHuffMCU_0_7 = (`TAG_g_p_jinfo_dc_dhuff_tbl_maxcode_a + (144 * DecodeHuffMCU_0_3));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_0_7_reg <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %7 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 %3, i32 0*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_3)) begin
		DecodeHuffMCU_0_7_reg <= DecodeHuffMCU_0_7;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %0*/
	/*   %8 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 %3, i32 0*/
		DecodeHuffMCU_0_8 = (`TAG_g_p_jinfo_dc_dhuff_tbl_mincode_a + (144 * DecodeHuffMCU_0_3));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_0_8_reg <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %8 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 %3, i32 0*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_3)) begin
		DecodeHuffMCU_0_8_reg <= DecodeHuffMCU_0_8;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_0_8_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %0*/
	/*   %9 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 %3, i32 0*/
		DecodeHuffMCU_0_9 = (`TAG_g_p_jinfo_dc_dhuff_tbl_valptr_a + (144 * DecodeHuffMCU_0_3));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_0_9_reg <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %9 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 %3, i32 0*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_3)) begin
		DecodeHuffMCU_0_9_reg <= DecodeHuffMCU_0_9;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
		DecodeHuffMCU_0_10 = DecodeHuffman_return_val_reg;
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_0_10_reg <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	else if((cur_state == LEGUP_function_call_6)) begin
		DecodeHuffMCU_0_10_reg <= DecodeHuffMCU_0_10;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_0_10_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %0*/
	/*   %11 = icmp eq i32 %10, 0*/
		DecodeHuffMCU_0_11 = (DecodeHuffMCU_0_10_reg == 32'd0);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_0_11_reg <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %11 = icmp eq i32 %10, 0*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_7)) begin
		DecodeHuffMCU_0_11_reg <= DecodeHuffMCU_0_11;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_0_11_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
		DecodeHuffMCU_12_13 = buf_getv_return_val_reg;
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_12_13_reg <= 0;
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	else if((cur_state == LEGUP_function_call_9)) begin
		DecodeHuffMCU_12_13_reg <= DecodeHuffMCU_12_13;
		if (start == 1'b0 && ^(DecodeHuffMCU_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_12_13_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %12*/
	/*   %14 = add nsw i32 %10, -1*/
		DecodeHuffMCU_12_14 = (DecodeHuffMCU_0_10_reg + -32'd1);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_12_14_reg <= 0;
	/* DecodeHuffMCU: %12*/
	/*   %14 = add nsw i32 %10, -1*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__12_8)) begin
		DecodeHuffMCU_12_14_reg <= DecodeHuffMCU_12_14;
		if (start == 1'b0 && ^(DecodeHuffMCU_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_12_14_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %12*/
	/*   %15 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %14*/
		DecodeHuffMCU_12_15 = (`TAG_g_bit_set_mask_a + (4 * DecodeHuffMCU_12_14_reg));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_12_15_reg <= 0;
	/* DecodeHuffMCU: %12*/
	/*   %15 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %14*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__12_10)) begin
		DecodeHuffMCU_12_15_reg <= DecodeHuffMCU_12_15;
		if (start == 1'b0 && ^(DecodeHuffMCU_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_12_15_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %12*/
	/*   %16 = load i32* %15, align 4, !tbaa !4*/
		DecodeHuffMCU_12_16 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_12_16_reg <= 0;
	/* DecodeHuffMCU: %12*/
	/*   %16 = load i32* %15, align 4, !tbaa !4*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__12_12)) begin
		DecodeHuffMCU_12_16_reg <= DecodeHuffMCU_12_16;
		if (start == 1'b0 && ^(DecodeHuffMCU_12_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_12_16_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %12*/
	/*   %17 = and i32 %16, %13*/
		DecodeHuffMCU_12_17 = (DecodeHuffMCU_12_16 & DecodeHuffMCU_12_13_reg);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_12_17_reg <= 0;
	/* DecodeHuffMCU: %12*/
	/*   %17 = and i32 %16, %13*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__12_12)) begin
		DecodeHuffMCU_12_17_reg <= DecodeHuffMCU_12_17;
		if (start == 1'b0 && ^(DecodeHuffMCU_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_12_17_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %12*/
	/*   %18 = icmp eq i32 %17, 0*/
		DecodeHuffMCU_12_18 = (DecodeHuffMCU_12_17 == 32'd0);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_12_18_reg <= 0;
	/* DecodeHuffMCU: %12*/
	/*   %18 = icmp eq i32 %17, 0*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__12_12)) begin
		DecodeHuffMCU_12_18_reg <= DecodeHuffMCU_12_18;
		if (start == 1'b0 && ^(DecodeHuffMCU_12_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_12_18_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %19*/
	/*   %20 = getelementptr inbounds [20 x i32]* @extend_mask, i32 0, i32 %14*/
		DecodeHuffMCU_19_20 = (1'd0 + (4 * DecodeHuffMCU_12_14_reg));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_19_20_reg <= 0;
	/* DecodeHuffMCU: %19*/
	/*   %20 = getelementptr inbounds [20 x i32]* @extend_mask, i32 0, i32 %14*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__19_13)) begin
		DecodeHuffMCU_19_20_reg <= DecodeHuffMCU_19_20;
		if (start == 1'b0 && ^(DecodeHuffMCU_19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_19_20_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %19*/
	/*   %21 = load i32* %20, align 4, !tbaa !4*/
		DecodeHuffMCU_19_21 = extend_mask_out_a;
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_19_21_reg <= 0;
	/* DecodeHuffMCU: %19*/
	/*   %21 = load i32* %20, align 4, !tbaa !4*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__19_14)) begin
		DecodeHuffMCU_19_21_reg <= DecodeHuffMCU_19_21;
		if (start == 1'b0 && ^(DecodeHuffMCU_19_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_19_21_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %19*/
	/*   %22 = or i32 %21, %13*/
		DecodeHuffMCU_19_22 = (DecodeHuffMCU_19_21 | DecodeHuffMCU_12_13_reg);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_19_22_reg <= 0;
	/* DecodeHuffMCU: %19*/
	/*   %22 = or i32 %21, %13*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__19_14)) begin
		DecodeHuffMCU_19_22_reg <= DecodeHuffMCU_19_22;
		if (start == 1'b0 && ^(DecodeHuffMCU_19_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_19_22_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %19*/
	/*   %23 = add nsw i32 %22, 1*/
		DecodeHuffMCU_19_23 = (DecodeHuffMCU_19_22 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_19_23_reg <= 0;
	/* DecodeHuffMCU: %19*/
	/*   %23 = add nsw i32 %22, 1*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__19_14)) begin
		DecodeHuffMCU_19_23_reg <= DecodeHuffMCU_19_23;
		if (start == 1'b0 && ^(DecodeHuffMCU_19_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_19_23_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %24*/
	/*   %diff.0 = phi i32 [ %23, %19 ], [ %13, %12 ]*/
	if ((((cur_state == LEGUP_F_DecodeHuffMCU_BB__12_12) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffMCU_12_18 == 1'd0))) begin
		DecodeHuffMCU_24_diff0 = DecodeHuffMCU_12_13_reg;
	end
	/* DecodeHuffMCU: %24*/
	/*   %diff.0 = phi i32 [ %23, %19 ], [ %13, %12 ]*/
	else /* if (((cur_state == LEGUP_F_DecodeHuffMCU_BB__19_14) & (memory_controller_waitrequest == 1'd0))) */ begin
		DecodeHuffMCU_24_diff0 = DecodeHuffMCU_19_23;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_24_diff0_reg <= 0;
	/* DecodeHuffMCU: %24*/
	/*   %diff.0 = phi i32 [ %23, %19 ], [ %13, %12 ]*/
	else if((((cur_state == LEGUP_F_DecodeHuffMCU_BB__12_12) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffMCU_12_18 == 1'd0))) begin
		DecodeHuffMCU_24_diff0_reg <= DecodeHuffMCU_24_diff0;
		if (start == 1'b0 && ^(DecodeHuffMCU_24_diff0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_24_diff0_reg"); $finish; end
	end
	/* DecodeHuffMCU: %24*/
	/*   %diff.0 = phi i32 [ %23, %19 ], [ %13, %12 ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffMCU_BB__19_14) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffMCU_24_diff0_reg <= DecodeHuffMCU_24_diff0;
		if (start == 1'b0 && ^(DecodeHuffMCU_24_diff0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_24_diff0_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %24*/
	/*   %25 = load i32* %out_buf, align 4, !tbaa !4*/
		DecodeHuffMCU_24_25 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_24_25_reg <= 0;
	/* DecodeHuffMCU: %24*/
	/*   %25 = load i32* %out_buf, align 4, !tbaa !4*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__24_17)) begin
		DecodeHuffMCU_24_25_reg <= DecodeHuffMCU_24_25;
		if (start == 1'b0 && ^(DecodeHuffMCU_24_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_24_25_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %24*/
	/*   %26 = add nsw i32 %25, %diff.0*/
		DecodeHuffMCU_24_26 = (DecodeHuffMCU_24_25 + DecodeHuffMCU_24_diff0_reg);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_24_26_reg <= 0;
	/* DecodeHuffMCU: %24*/
	/*   %26 = add nsw i32 %25, %diff.0*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__24_17)) begin
		DecodeHuffMCU_24_26_reg <= DecodeHuffMCU_24_26;
		if (start == 1'b0 && ^(DecodeHuffMCU_24_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_24_26_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %.lr.ph*/
	/*   %27 = getelementptr inbounds i32* %out_buf, i32 64*/
		DecodeHuffMCU_lrph_27 = (arg_out_buf + (4 * 32'd64));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_lrph_27_reg <= 0;
	/* DecodeHuffMCU: %.lr.ph*/
	/*   %27 = getelementptr inbounds i32* %out_buf, i32 64*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB_lrph_19)) begin
		DecodeHuffMCU_lrph_27_reg <= DecodeHuffMCU_lrph_27;
		if (start == 1'b0 && ^(DecodeHuffMCU_lrph_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_lrph_27_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %.lr.ph*/
	/*   %mptr.03 = getelementptr inbounds i32* %out_buf, i32 1*/
		DecodeHuffMCU_lrph_mptr03 = (arg_out_buf + (4 * 32'd1));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_lrph_mptr03_reg <= 0;
	/* DecodeHuffMCU: %.lr.ph*/
	/*   %mptr.03 = getelementptr inbounds i32* %out_buf, i32 1*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB_lrph_19)) begin
		DecodeHuffMCU_lrph_mptr03_reg <= DecodeHuffMCU_lrph_mptr03;
		if (start == 1'b0 && ^(DecodeHuffMCU_lrph_mptr03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_lrph_mptr03_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %.preheader*/
	/*   %28 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_ac_xhuff_tbl_huffval, i32 0, i32 %3, i32 0*/
		DecodeHuffMCU_preheader_28 = (`TAG_g_p_jinfo_ac_xhuff_tbl_huffval_a + (1028 * DecodeHuffMCU_0_3_reg));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_preheader_28_reg <= 0;
	/* DecodeHuffMCU: %.preheader*/
	/*   %28 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_ac_xhuff_tbl_huffval, i32 0, i32 %3, i32 0*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB_preheader_20)) begin
		DecodeHuffMCU_preheader_28_reg <= DecodeHuffMCU_preheader_28;
		if (start == 1'b0 && ^(DecodeHuffMCU_preheader_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_preheader_28_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %.preheader*/
	/*   %29 = getelementptr inbounds [2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 %3*/
		DecodeHuffMCU_preheader_29 = (`TAG_g_p_jinfo_ac_dhuff_tbl_ml_a + (4 * DecodeHuffMCU_0_3_reg));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_preheader_29_reg <= 0;
	/* DecodeHuffMCU: %.preheader*/
	/*   %29 = getelementptr inbounds [2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 %3*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB_preheader_20)) begin
		DecodeHuffMCU_preheader_29_reg <= DecodeHuffMCU_preheader_29;
		if (start == 1'b0 && ^(DecodeHuffMCU_preheader_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_preheader_29_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %.preheader*/
	/*   %30 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 %3, i32 0*/
		DecodeHuffMCU_preheader_30 = (`TAG_g_p_jinfo_ac_dhuff_tbl_maxcode_a + (144 * DecodeHuffMCU_0_3_reg));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_preheader_30_reg <= 0;
	/* DecodeHuffMCU: %.preheader*/
	/*   %30 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 %3, i32 0*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB_preheader_20)) begin
		DecodeHuffMCU_preheader_30_reg <= DecodeHuffMCU_preheader_30;
		if (start == 1'b0 && ^(DecodeHuffMCU_preheader_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_preheader_30_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %.preheader*/
	/*   %31 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 %3, i32 0*/
		DecodeHuffMCU_preheader_31 = (`TAG_g_p_jinfo_ac_dhuff_tbl_mincode_a + (144 * DecodeHuffMCU_0_3_reg));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_preheader_31_reg <= 0;
	/* DecodeHuffMCU: %.preheader*/
	/*   %31 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 %3, i32 0*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB_preheader_20)) begin
		DecodeHuffMCU_preheader_31_reg <= DecodeHuffMCU_preheader_31;
		if (start == 1'b0 && ^(DecodeHuffMCU_preheader_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_preheader_31_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %.preheader*/
	/*   %32 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 %3, i32 0*/
		DecodeHuffMCU_preheader_32 = (`TAG_g_p_jinfo_ac_dhuff_tbl_valptr_a + (144 * DecodeHuffMCU_0_3_reg));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_preheader_32_reg <= 0;
	/* DecodeHuffMCU: %.preheader*/
	/*   %32 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 %3, i32 0*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB_preheader_20)) begin
		DecodeHuffMCU_preheader_32_reg <= DecodeHuffMCU_preheader_32;
		if (start == 1'b0 && ^(DecodeHuffMCU_preheader_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_preheader_32_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %33*/
	/*   %34 = phi i32* [ %out_buf, %.lr.ph ], [ %mptr.04, %33 ]*/
	if (((cur_state == LEGUP_F_DecodeHuffMCU_BB_lrph_19) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffMCU_33_34 = arg_out_buf;
	end
	/* DecodeHuffMCU: %33*/
	/*   %34 = phi i32* [ %out_buf, %.lr.ph ], [ %mptr.04, %33 ]*/
	else /* if ((((cur_state == LEGUP_F_DecodeHuffMCU_BB__33_22) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffMCU_33_35_reg == 1'd1))) */ begin
		DecodeHuffMCU_33_34 = DecodeHuffMCU_33_mptr04_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_33_34_reg <= 0;
	/* DecodeHuffMCU: %33*/
	/*   %34 = phi i32* [ %out_buf, %.lr.ph ], [ %mptr.04, %33 ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffMCU_BB_lrph_19) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffMCU_33_34_reg <= DecodeHuffMCU_33_34;
		if (start == 1'b0 && ^(DecodeHuffMCU_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_33_34_reg"); $finish; end
	end
	/* DecodeHuffMCU: %33*/
	/*   %34 = phi i32* [ %out_buf, %.lr.ph ], [ %mptr.04, %33 ]*/
	else if((((cur_state == LEGUP_F_DecodeHuffMCU_BB__33_22) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffMCU_33_35_reg == 1'd1))) begin
		DecodeHuffMCU_33_34_reg <= DecodeHuffMCU_33_34;
		if (start == 1'b0 && ^(DecodeHuffMCU_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_33_34_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %33*/
	/*   %mptr.04 = phi i32* [ %mptr.03, %.lr.ph ], [ %mptr.0, %33 ]*/
	if (((cur_state == LEGUP_F_DecodeHuffMCU_BB_lrph_19) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffMCU_33_mptr04 = DecodeHuffMCU_lrph_mptr03;
	end
	/* DecodeHuffMCU: %33*/
	/*   %mptr.04 = phi i32* [ %mptr.03, %.lr.ph ], [ %mptr.0, %33 ]*/
	else /* if ((((cur_state == LEGUP_F_DecodeHuffMCU_BB__33_22) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffMCU_33_35_reg == 1'd1))) */ begin
		DecodeHuffMCU_33_mptr04 = DecodeHuffMCU_33_mptr0_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_33_mptr04_reg <= 0;
	/* DecodeHuffMCU: %33*/
	/*   %mptr.04 = phi i32* [ %mptr.03, %.lr.ph ], [ %mptr.0, %33 ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffMCU_BB_lrph_19) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffMCU_33_mptr04_reg <= DecodeHuffMCU_33_mptr04;
		if (start == 1'b0 && ^(DecodeHuffMCU_33_mptr04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_33_mptr04_reg"); $finish; end
	end
	/* DecodeHuffMCU: %33*/
	/*   %mptr.04 = phi i32* [ %mptr.03, %.lr.ph ], [ %mptr.0, %33 ]*/
	else if((((cur_state == LEGUP_F_DecodeHuffMCU_BB__33_22) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffMCU_33_35_reg == 1'd1))) begin
		DecodeHuffMCU_33_mptr04_reg <= DecodeHuffMCU_33_mptr04;
		if (start == 1'b0 && ^(DecodeHuffMCU_33_mptr04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_33_mptr04_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %33*/
	/*   %mptr.0 = getelementptr inbounds i32* %34, i32 2*/
		DecodeHuffMCU_33_mptr0 = (DecodeHuffMCU_33_34_reg + (4 * 32'd2));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_33_mptr0_reg <= 0;
	/* DecodeHuffMCU: %33*/
	/*   %mptr.0 = getelementptr inbounds i32* %34, i32 2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__33_21)) begin
		DecodeHuffMCU_33_mptr0_reg <= DecodeHuffMCU_33_mptr0;
		if (start == 1'b0 && ^(DecodeHuffMCU_33_mptr0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_33_mptr0_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %33*/
	/*   %35 = icmp ult i32* %mptr.0, %27*/
		DecodeHuffMCU_33_35 = (DecodeHuffMCU_33_mptr0 < DecodeHuffMCU_lrph_27_reg);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_33_35_reg <= 0;
	/* DecodeHuffMCU: %33*/
	/*   %35 = icmp ult i32* %mptr.0, %27*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__33_21)) begin
		DecodeHuffMCU_33_35_reg <= DecodeHuffMCU_33_35;
		if (start == 1'b0 && ^(DecodeHuffMCU_33_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_33_35_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %36*/
	/*   %k.02 = phi i32 [ 1, %.preheader ], [ %k.0.be, %.backedge ]*/
	if (((cur_state == LEGUP_F_DecodeHuffMCU_BB_preheader_20) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffMCU_36_k02 = 32'd1;
	end
	/* DecodeHuffMCU: %36*/
	/*   %k.02 = phi i32 [ 1, %.preheader ], [ %k.0.be, %.backedge ]*/
	else /* if ((((cur_state == LEGUP_F_DecodeHuffMCU_BB_backedge_41) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffMCU_backedge_65 == 1'd1))) */ begin
		DecodeHuffMCU_36_k02 = DecodeHuffMCU_backedge_k0be_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_36_k02_reg <= 0;
	/* DecodeHuffMCU: %36*/
	/*   %k.02 = phi i32 [ 1, %.preheader ], [ %k.0.be, %.backedge ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffMCU_BB_preheader_20) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffMCU_36_k02_reg <= DecodeHuffMCU_36_k02;
		if (start == 1'b0 && ^(DecodeHuffMCU_36_k02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_36_k02_reg"); $finish; end
	end
	/* DecodeHuffMCU: %36*/
	/*   %k.02 = phi i32 [ 1, %.preheader ], [ %k.0.be, %.backedge ]*/
	else if((((cur_state == LEGUP_F_DecodeHuffMCU_BB_backedge_41) & (memory_controller_waitrequest == 1'd0)) & (DecodeHuffMCU_backedge_65 == 1'd1))) begin
		DecodeHuffMCU_36_k02_reg <= DecodeHuffMCU_36_k02;
		if (start == 1'b0 && ^(DecodeHuffMCU_36_k02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_36_k02_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %36*/
	/*   %37 = load i32* %29, align 4, !tbaa !4*/
		DecodeHuffMCU_36_37 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_36_37_reg <= 0;
	/* DecodeHuffMCU: %36*/
	/*   %37 = load i32* %29, align 4, !tbaa !4*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__36_25)) begin
		DecodeHuffMCU_36_37_reg <= DecodeHuffMCU_36_37;
		if (start == 1'b0 && ^(DecodeHuffMCU_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_36_37_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
		DecodeHuffMCU_36_38 = DecodeHuffman_return_val_reg;
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_36_38_reg <= 0;
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	else if((cur_state == LEGUP_function_call_26)) begin
		DecodeHuffMCU_36_38_reg <= DecodeHuffMCU_36_38;
		if (start == 1'b0 && ^(DecodeHuffMCU_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_36_38_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %36*/
	/*   %39 = and i32 %38, 15*/
		DecodeHuffMCU_36_39 = (DecodeHuffMCU_36_38_reg & 32'd15);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_36_39_reg <= 0;
	/* DecodeHuffMCU: %36*/
	/*   %39 = and i32 %38, 15*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__36_27)) begin
		DecodeHuffMCU_36_39_reg <= DecodeHuffMCU_36_39;
		if (start == 1'b0 && ^(DecodeHuffMCU_36_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_36_39_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %36*/
	/*   %40 = lshr i32 %38, 4*/
		DecodeHuffMCU_36_40 = (DecodeHuffMCU_36_38_reg >>> (32'd4 % 32));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_36_40_reg <= 0;
	/* DecodeHuffMCU: %36*/
	/*   %40 = lshr i32 %38, 4*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__36_27)) begin
		DecodeHuffMCU_36_40_reg <= DecodeHuffMCU_36_40;
		if (start == 1'b0 && ^(DecodeHuffMCU_36_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_36_40_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %36*/
	/*   %41 = and i32 %40, 15*/
		DecodeHuffMCU_36_41 = (DecodeHuffMCU_36_40 & 32'd15);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_36_41_reg <= 0;
	/* DecodeHuffMCU: %36*/
	/*   %41 = and i32 %40, 15*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__36_27)) begin
		DecodeHuffMCU_36_41_reg <= DecodeHuffMCU_36_41;
		if (start == 1'b0 && ^(DecodeHuffMCU_36_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_36_41_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %36*/
	/*   %42 = icmp eq i32 %39, 0*/
		DecodeHuffMCU_36_42 = (DecodeHuffMCU_36_39 == 32'd0);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_36_42_reg <= 0;
	/* DecodeHuffMCU: %36*/
	/*   %42 = icmp eq i32 %39, 0*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__36_27)) begin
		DecodeHuffMCU_36_42_reg <= DecodeHuffMCU_36_42;
		if (start == 1'b0 && ^(DecodeHuffMCU_36_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_36_42_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %43*/
	/*   %44 = add nsw i32 %41, %k.02*/
		DecodeHuffMCU_43_44 = (DecodeHuffMCU_36_41_reg + DecodeHuffMCU_36_k02_reg);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_43_44_reg <= 0;
	/* DecodeHuffMCU: %43*/
	/*   %44 = add nsw i32 %41, %k.02*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__43_28)) begin
		DecodeHuffMCU_43_44_reg <= DecodeHuffMCU_43_44;
		if (start == 1'b0 && ^(DecodeHuffMCU_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_43_44_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %43*/
	/*   %45 = icmp sgt i32 %44, 63*/
		DecodeHuffMCU_43_45 = ($signed(DecodeHuffMCU_43_44) > $signed(32'd63));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_43_45_reg <= 0;
	/* DecodeHuffMCU: %43*/
	/*   %45 = icmp sgt i32 %44, 63*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__43_28)) begin
		DecodeHuffMCU_43_45_reg <= DecodeHuffMCU_43_45;
		if (start == 1'b0 && ^(DecodeHuffMCU_43_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_43_45_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
		DecodeHuffMCU_46_47 = buf_getv_return_val_reg;
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_46_47_reg <= 0;
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	else if((cur_state == LEGUP_function_call_30)) begin
		DecodeHuffMCU_46_47_reg <= DecodeHuffMCU_46_47;
		if (start == 1'b0 && ^(DecodeHuffMCU_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_46_47_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %46*/
	/*   %48 = getelementptr inbounds i32* %out_buf, i32 %44*/
		DecodeHuffMCU_46_48 = (arg_out_buf + (4 * DecodeHuffMCU_43_44_reg));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_46_48_reg <= 0;
	/* DecodeHuffMCU: %46*/
	/*   %48 = getelementptr inbounds i32* %out_buf, i32 %44*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_29)) begin
		DecodeHuffMCU_46_48_reg <= DecodeHuffMCU_46_48;
		if (start == 1'b0 && ^(DecodeHuffMCU_46_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_46_48_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %46*/
	/*   %49 = add nsw i32 %39, -1*/
		DecodeHuffMCU_46_49 = (DecodeHuffMCU_36_39_reg + -32'd1);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_46_49_reg <= 0;
	/* DecodeHuffMCU: %46*/
	/*   %49 = add nsw i32 %39, -1*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_29)) begin
		DecodeHuffMCU_46_49_reg <= DecodeHuffMCU_46_49;
		if (start == 1'b0 && ^(DecodeHuffMCU_46_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_46_49_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %46*/
	/*   %50 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %49*/
		DecodeHuffMCU_46_50 = (`TAG_g_bit_set_mask_a + (4 * DecodeHuffMCU_46_49_reg));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_46_50_reg <= 0;
	/* DecodeHuffMCU: %46*/
	/*   %50 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %49*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_31)) begin
		DecodeHuffMCU_46_50_reg <= DecodeHuffMCU_46_50;
		if (start == 1'b0 && ^(DecodeHuffMCU_46_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_46_50_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %46*/
	/*   %51 = load i32* %50, align 4, !tbaa !4*/
		DecodeHuffMCU_46_51 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_46_51_reg <= 0;
	/* DecodeHuffMCU: %46*/
	/*   %51 = load i32* %50, align 4, !tbaa !4*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_34)) begin
		DecodeHuffMCU_46_51_reg <= DecodeHuffMCU_46_51;
		if (start == 1'b0 && ^(DecodeHuffMCU_46_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_46_51_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %46*/
	/*   %52 = and i32 %51, %47*/
		DecodeHuffMCU_46_52 = (DecodeHuffMCU_46_51 & DecodeHuffMCU_46_47_reg);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_46_52_reg <= 0;
	/* DecodeHuffMCU: %46*/
	/*   %52 = and i32 %51, %47*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_34)) begin
		DecodeHuffMCU_46_52_reg <= DecodeHuffMCU_46_52;
		if (start == 1'b0 && ^(DecodeHuffMCU_46_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_46_52_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %46*/
	/*   %53 = icmp eq i32 %52, 0*/
		DecodeHuffMCU_46_53 = (DecodeHuffMCU_46_52 == 32'd0);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_46_53_reg <= 0;
	/* DecodeHuffMCU: %46*/
	/*   %53 = icmp eq i32 %52, 0*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_34)) begin
		DecodeHuffMCU_46_53_reg <= DecodeHuffMCU_46_53;
		if (start == 1'b0 && ^(DecodeHuffMCU_46_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_46_53_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %54*/
	/*   %55 = getelementptr inbounds [20 x i32]* @extend_mask, i32 0, i32 %49*/
		DecodeHuffMCU_54_55 = (1'd0 + (4 * DecodeHuffMCU_46_49_reg));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_54_55_reg <= 0;
	/* DecodeHuffMCU: %54*/
	/*   %55 = getelementptr inbounds [20 x i32]* @extend_mask, i32 0, i32 %49*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__54_35)) begin
		DecodeHuffMCU_54_55_reg <= DecodeHuffMCU_54_55;
		if (start == 1'b0 && ^(DecodeHuffMCU_54_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_54_55_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %54*/
	/*   %56 = load i32* %55, align 4, !tbaa !4*/
		DecodeHuffMCU_54_56 = extend_mask_out_a;
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_54_56_reg <= 0;
	/* DecodeHuffMCU: %54*/
	/*   %56 = load i32* %55, align 4, !tbaa !4*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__54_36)) begin
		DecodeHuffMCU_54_56_reg <= DecodeHuffMCU_54_56;
		if (start == 1'b0 && ^(DecodeHuffMCU_54_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_54_56_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %54*/
	/*   %57 = or i32 %56, %47*/
		DecodeHuffMCU_54_57 = (DecodeHuffMCU_54_56 | DecodeHuffMCU_46_47_reg);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_54_57_reg <= 0;
	/* DecodeHuffMCU: %54*/
	/*   %57 = or i32 %56, %47*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__54_36)) begin
		DecodeHuffMCU_54_57_reg <= DecodeHuffMCU_54_57;
		if (start == 1'b0 && ^(DecodeHuffMCU_54_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_54_57_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %54*/
	/*   %58 = add nsw i32 %57, 1*/
		DecodeHuffMCU_54_58 = (DecodeHuffMCU_54_57 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_54_58_reg <= 0;
	/* DecodeHuffMCU: %54*/
	/*   %58 = add nsw i32 %57, 1*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__54_36)) begin
		DecodeHuffMCU_54_58_reg <= DecodeHuffMCU_54_58;
		if (start == 1'b0 && ^(DecodeHuffMCU_54_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_54_58_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %59*/
	/*   %60 = add nsw i32 %44, 1*/
		DecodeHuffMCU_59_60 = (DecodeHuffMCU_43_44_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_59_60_reg <= 0;
	/* DecodeHuffMCU: %59*/
	/*   %60 = add nsw i32 %44, 1*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__59_38)) begin
		DecodeHuffMCU_59_60_reg <= DecodeHuffMCU_59_60;
		if (start == 1'b0 && ^(DecodeHuffMCU_59_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_59_60_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %61*/
	/*   %62 = icmp eq i32 %41, 15*/
		DecodeHuffMCU_61_62 = (DecodeHuffMCU_36_41_reg == 32'd15);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_61_62_reg <= 0;
	/* DecodeHuffMCU: %61*/
	/*   %62 = icmp eq i32 %41, 15*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__61_39)) begin
		DecodeHuffMCU_61_62_reg <= DecodeHuffMCU_61_62;
		if (start == 1'b0 && ^(DecodeHuffMCU_61_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_61_62_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %63*/
	/*   %64 = add nsw i32 %k.02, 16*/
		DecodeHuffMCU_63_64 = (DecodeHuffMCU_36_k02_reg + 32'd16);
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_63_64_reg <= 0;
	/* DecodeHuffMCU: %63*/
	/*   %64 = add nsw i32 %k.02, 16*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__63_40)) begin
		DecodeHuffMCU_63_64_reg <= DecodeHuffMCU_63_64;
		if (start == 1'b0 && ^(DecodeHuffMCU_63_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_63_64_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %.backedge*/
	/*   %k.0.be = phi i32 [ %60, %59 ], [ %64, %63 ]*/
	if (((cur_state == LEGUP_F_DecodeHuffMCU_BB__59_38) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffMCU_backedge_k0be = DecodeHuffMCU_59_60;
	end
	/* DecodeHuffMCU: %.backedge*/
	/*   %k.0.be = phi i32 [ %60, %59 ], [ %64, %63 ]*/
	else /* if (((cur_state == LEGUP_F_DecodeHuffMCU_BB__63_40) & (memory_controller_waitrequest == 1'd0))) */ begin
		DecodeHuffMCU_backedge_k0be = DecodeHuffMCU_63_64;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_backedge_k0be_reg <= 0;
	/* DecodeHuffMCU: %.backedge*/
	/*   %k.0.be = phi i32 [ %60, %59 ], [ %64, %63 ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffMCU_BB__59_38) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffMCU_backedge_k0be_reg <= DecodeHuffMCU_backedge_k0be;
		if (start == 1'b0 && ^(DecodeHuffMCU_backedge_k0be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_backedge_k0be_reg"); $finish; end
	end
	/* DecodeHuffMCU: %.backedge*/
	/*   %k.0.be = phi i32 [ %60, %59 ], [ %64, %63 ]*/
	else if(((cur_state == LEGUP_F_DecodeHuffMCU_BB__63_40) & (memory_controller_waitrequest == 1'd0))) begin
		DecodeHuffMCU_backedge_k0be_reg <= DecodeHuffMCU_backedge_k0be;
		if (start == 1'b0 && ^(DecodeHuffMCU_backedge_k0be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_backedge_k0be_reg"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %.backedge*/
	/*   %65 = icmp slt i32 %k.0.be, 64*/
		DecodeHuffMCU_backedge_65 = ($signed(DecodeHuffMCU_backedge_k0be_reg) < $signed(32'd64));
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_backedge_65_reg <= 0;
	/* DecodeHuffMCU: %.backedge*/
	/*   %65 = icmp slt i32 %k.0.be, 64*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB_backedge_41)) begin
		DecodeHuffMCU_backedge_65_reg <= DecodeHuffMCU_backedge_65;
		if (start == 1'b0 && ^(DecodeHuffMCU_backedge_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_backedge_65_reg"); $finish; end
	end
end
always @(*) begin
	extend_mask_address_a = 1'd0;
	/* DecodeHuffMCU: %19*/
	/*   %21 = load i32* %20, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__19_13)) begin
		extend_mask_address_a = (DecodeHuffMCU_19_20 >>> 3'd2);
	end
	/* DecodeHuffMCU: %54*/
	/*   %56 = load i32* %55, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__54_35)) begin
		extend_mask_address_a = (DecodeHuffMCU_54_55 >>> 3'd2);
	end
end
always @(*) begin
	extend_mask_write_enable_a = 1'd0;
	/* DecodeHuffMCU: %19*/
	/*   %21 = load i32* %20, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__19_13)) begin
		extend_mask_write_enable_a = 1'd0;
	end
	/* DecodeHuffMCU: %54*/
	/*   %56 = load i32* %55, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__54_35)) begin
		extend_mask_write_enable_a = 1'd0;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_start <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_5)) begin
		DecodeHuffman_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_6)) begin
		DecodeHuffman_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_start"); $finish; end
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__36_25)) begin
		DecodeHuffman_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_26)) begin
		DecodeHuffman_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_start"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_arg_Xhuff_huffval <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_5)) begin
		DecodeHuffman_arg_Xhuff_huffval <= DecodeHuffMCU_0_4_reg;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_4_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Xhuff_huffval"); $finish; end
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__36_25)) begin
		DecodeHuffman_arg_Xhuff_huffval <= DecodeHuffMCU_preheader_28_reg;
		if (start == 1'b0 && ^(DecodeHuffMCU_preheader_28_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Xhuff_huffval"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_arg_Dhuff_ml <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_5)) begin
		DecodeHuffman_arg_Dhuff_ml <= DecodeHuffMCU_0_6;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Dhuff_ml"); $finish; end
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__36_25)) begin
		DecodeHuffman_arg_Dhuff_ml <= DecodeHuffMCU_36_37;
		if (start == 1'b0 && ^(DecodeHuffMCU_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Dhuff_ml"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_arg_Dhuff_maxcode <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_5)) begin
		DecodeHuffman_arg_Dhuff_maxcode <= DecodeHuffMCU_0_7_reg;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_7_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Dhuff_maxcode"); $finish; end
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__36_25)) begin
		DecodeHuffman_arg_Dhuff_maxcode <= DecodeHuffMCU_preheader_30_reg;
		if (start == 1'b0 && ^(DecodeHuffMCU_preheader_30_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Dhuff_maxcode"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_arg_Dhuff_mincode <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_5)) begin
		DecodeHuffman_arg_Dhuff_mincode <= DecodeHuffMCU_0_8_reg;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_8_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Dhuff_mincode"); $finish; end
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__36_25)) begin
		DecodeHuffman_arg_Dhuff_mincode <= DecodeHuffMCU_preheader_31_reg;
		if (start == 1'b0 && ^(DecodeHuffMCU_preheader_31_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Dhuff_mincode"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_arg_Dhuff_valptr <= 0;
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_5)) begin
		DecodeHuffman_arg_Dhuff_valptr <= DecodeHuffMCU_0_9_reg;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_9_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Dhuff_valptr"); $finish; end
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__36_25)) begin
		DecodeHuffman_arg_Dhuff_valptr <= DecodeHuffMCU_preheader_32_reg;
		if (start == 1'b0 && ^(DecodeHuffMCU_preheader_32_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Dhuff_valptr"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		DecodeHuffman_memory_controller_out_a = memory_controller_out_a;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	else /* if ((cur_state == LEGUP_function_call_26)) */ begin
		DecodeHuffman_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		DecodeHuffman_memory_controller_out_b = memory_controller_out_b;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	else /* if ((cur_state == LEGUP_function_call_26)) */ begin
		DecodeHuffman_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	DecodeHuffman_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	DecodeHuffman_finish_final = DecodeHuffman_finish_reg;
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_finish_reg <= 0;
	else if((reset | (cur_state == LEGUP_F_DecodeHuffMCU_BB__0_5))) begin
		DecodeHuffman_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_finish_reg"); $finish; end
	end
	else if(DecodeHuffman_finish) begin
		DecodeHuffman_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_DecodeHuffMCU_BB__36_25))) begin
		DecodeHuffman_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_finish_reg"); $finish; end
	end
	else if(DecodeHuffman_finish) begin
		DecodeHuffman_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffman_return_val_reg <= 0;
	else if((reset | (cur_state == LEGUP_F_DecodeHuffMCU_BB__0_5))) begin
		DecodeHuffman_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_return_val_reg"); $finish; end
	end
	else if(DecodeHuffman_finish) begin
		DecodeHuffman_return_val_reg <= DecodeHuffman_return_val;
		if (start == 1'b0 && ^(DecodeHuffman_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_return_val_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_DecodeHuffMCU_BB__36_25))) begin
		DecodeHuffman_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_return_val_reg"); $finish; end
	end
	else if(DecodeHuffman_finish) begin
		DecodeHuffman_return_val_reg <= DecodeHuffman_return_val;
		if (start == 1'b0 && ^(DecodeHuffman_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		legup_function_call = 1'd1;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		legup_function_call = 1'd1;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		legup_function_call = 1'd1;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	if (reset)
		buf_getv_start <= 0;
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__12_8)) begin
		buf_getv_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_9)) begin
		buf_getv_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_start"); $finish; end
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_29)) begin
		buf_getv_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_30)) begin
		buf_getv_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_start"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		buf_getv_arg_n <= 0;
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__12_8)) begin
		buf_getv_arg_n <= DecodeHuffMCU_0_10_reg;
		if (start == 1'b0 && ^(DecodeHuffMCU_0_10_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_arg_n"); $finish; end
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_29)) begin
		buf_getv_arg_n <= DecodeHuffMCU_36_39_reg;
		if (start == 1'b0 && ^(DecodeHuffMCU_36_39_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_arg_n"); $finish; end
	end
end
always @(*) begin
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		buf_getv_memory_controller_out_a = memory_controller_out_a;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	else /* if ((cur_state == LEGUP_function_call_30)) */ begin
		buf_getv_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		buf_getv_memory_controller_out_b = memory_controller_out_b;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	else /* if ((cur_state == LEGUP_function_call_30)) */ begin
		buf_getv_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	buf_getv_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	buf_getv_finish_final = buf_getv_finish_reg;
end
always @(posedge clk) begin
	if (reset)
		buf_getv_finish_reg <= 0;
	else if((reset | (cur_state == LEGUP_F_DecodeHuffMCU_BB__12_8))) begin
		buf_getv_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_finish_reg"); $finish; end
	end
	else if(buf_getv_finish) begin
		buf_getv_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_DecodeHuffMCU_BB__46_29))) begin
		buf_getv_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_finish_reg"); $finish; end
	end
	else if(buf_getv_finish) begin
		buf_getv_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		buf_getv_return_val_reg <= 0;
	else if((reset | (cur_state == LEGUP_F_DecodeHuffMCU_BB__12_8))) begin
		buf_getv_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_return_val_reg"); $finish; end
	end
	else if(buf_getv_finish) begin
		buf_getv_return_val_reg <= buf_getv_return_val;
		if (start == 1'b0 && ^(buf_getv_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_return_val_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_DecodeHuffMCU_BB__46_29))) begin
		buf_getv_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_return_val_reg"); $finish; end
	end
	else if(buf_getv_finish) begin
		buf_getv_return_val_reg <= buf_getv_return_val;
		if (start == 1'b0 && ^(buf_getv_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_return_val_reg"); $finish; end
	end
end


//voter


//port drive
always @(posedge clk) begin
	if (reset)
		finish <= 0;
	else if((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* DecodeHuffMCU: %66*/
	/*   ret void*/
	else if((cur_state == LEGUP_F_DecodeHuffMCU_BB__66_42)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = DecodeHuffman_memory_controller_enable_a;
	end
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = DecodeHuffman_memory_controller_enable_a;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_enable_a = buf_getv_memory_controller_enable_a;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_enable_a = buf_getv_memory_controller_enable_a;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_enable_a = DecodeHuffman_memory_controller_enable_a;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_enable_a = DecodeHuffman_memory_controller_enable_a;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_enable_a = buf_getv_memory_controller_enable_a;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_enable_a = buf_getv_memory_controller_enable_a;
	end
	/* DecodeHuffMCU: %0*/
	/*   %2 = load i8* %1, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffMCU: %0*/
	/*   %6 = load i32* %5, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffMCU: %12*/
	/*   %16 = load i32* %15, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__12_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffMCU: %24*/
	/*   %25 = load i32* %out_buf, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__24_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffMCU: %24*/
	/*   store i32 %26, i32* %out_buf, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__24_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffMCU: %33*/
	/*   store i32 0, i32* %mptr.04, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__33_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffMCU: %36*/
	/*   %37 = load i32* %29, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__36_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffMCU: %46*/
	/*   store i32 %47, i32* %48, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffMCU: %46*/
	/*   %51 = load i32* %50, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* DecodeHuffMCU: %54*/
	/*   store i32 %58, i32* %48, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__54_36)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffman_memory_controller_address_a;
	end
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffman_memory_controller_address_a;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = buf_getv_memory_controller_address_a;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = buf_getv_memory_controller_address_a;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffman_memory_controller_address_a;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffman_memory_controller_address_a;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = buf_getv_memory_controller_address_a;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = buf_getv_memory_controller_address_a;
	end
	/* DecodeHuffMCU: %0*/
	/*   %2 = load i8* %1, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_1)) begin
		memory_controller_address_a = DecodeHuffMCU_0_1;
	end
	/* DecodeHuffMCU: %0*/
	/*   %6 = load i32* %5, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_3)) begin
		memory_controller_address_a = DecodeHuffMCU_0_5;
	end
	/* DecodeHuffMCU: %12*/
	/*   %16 = load i32* %15, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__12_10)) begin
		memory_controller_address_a = DecodeHuffMCU_12_15;
	end
	/* DecodeHuffMCU: %24*/
	/*   %25 = load i32* %out_buf, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__24_15)) begin
		memory_controller_address_a = arg_out_buf;
	end
	/* DecodeHuffMCU: %24*/
	/*   store i32 %26, i32* %out_buf, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__24_17)) begin
		memory_controller_address_a = arg_out_buf;
	end
	/* DecodeHuffMCU: %33*/
	/*   store i32 0, i32* %mptr.04, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__33_21)) begin
		memory_controller_address_a = DecodeHuffMCU_33_mptr04_reg;
	end
	/* DecodeHuffMCU: %36*/
	/*   %37 = load i32* %29, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__36_23)) begin
		memory_controller_address_a = DecodeHuffMCU_preheader_29_reg;
	end
	/* DecodeHuffMCU: %46*/
	/*   store i32 %47, i32* %48, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_31)) begin
		memory_controller_address_a = DecodeHuffMCU_46_48_reg;
	end
	/* DecodeHuffMCU: %46*/
	/*   %51 = load i32* %50, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_32)) begin
		memory_controller_address_a = DecodeHuffMCU_46_50_reg;
	end
	/* DecodeHuffMCU: %54*/
	/*   store i32 %58, i32* %48, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__54_36)) begin
		memory_controller_address_a = DecodeHuffMCU_46_48_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = DecodeHuffman_memory_controller_write_enable_a;
	end
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = DecodeHuffman_memory_controller_write_enable_a;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_write_enable_a = buf_getv_memory_controller_write_enable_a;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_write_enable_a = buf_getv_memory_controller_write_enable_a;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_write_enable_a = DecodeHuffman_memory_controller_write_enable_a;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_write_enable_a = DecodeHuffman_memory_controller_write_enable_a;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_write_enable_a = buf_getv_memory_controller_write_enable_a;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_write_enable_a = buf_getv_memory_controller_write_enable_a;
	end
	/* DecodeHuffMCU: %0*/
	/*   %2 = load i8* %1, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* DecodeHuffMCU: %0*/
	/*   %6 = load i32* %5, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* DecodeHuffMCU: %12*/
	/*   %16 = load i32* %15, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__12_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* DecodeHuffMCU: %24*/
	/*   %25 = load i32* %out_buf, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__24_15)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* DecodeHuffMCU: %24*/
	/*   store i32 %26, i32* %out_buf, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__24_17)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* DecodeHuffMCU: %33*/
	/*   store i32 0, i32* %mptr.04, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__33_21)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* DecodeHuffMCU: %36*/
	/*   %37 = load i32* %29, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__36_23)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* DecodeHuffMCU: %46*/
	/*   store i32 %47, i32* %48, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_31)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* DecodeHuffMCU: %46*/
	/*   %51 = load i32* %50, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_32)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* DecodeHuffMCU: %54*/
	/*   store i32 %58, i32* %48, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__54_36)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffman_memory_controller_in_a;
	end
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffman_memory_controller_in_a;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = buf_getv_memory_controller_in_a;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = buf_getv_memory_controller_in_a;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffman_memory_controller_in_a;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffman_memory_controller_in_a;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = buf_getv_memory_controller_in_a;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = buf_getv_memory_controller_in_a;
	end
	/* DecodeHuffMCU: %24*/
	/*   store i32 %26, i32* %out_buf, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__24_17)) begin
		memory_controller_in_a = DecodeHuffMCU_24_26;
	end
	/* DecodeHuffMCU: %33*/
	/*   store i32 0, i32* %mptr.04, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__33_21)) begin
		memory_controller_in_a = 32'd0;
	end
	/* DecodeHuffMCU: %46*/
	/*   store i32 %47, i32* %48, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_31)) begin
		memory_controller_in_a = DecodeHuffMCU_46_47_reg;
	end
	/* DecodeHuffMCU: %54*/
	/*   store i32 %58, i32* %48, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__54_36)) begin
		memory_controller_in_a = DecodeHuffMCU_54_58;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = DecodeHuffman_memory_controller_size_a;
	end
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = DecodeHuffman_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_size_a[1:0] = buf_getv_memory_controller_size_a;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_size_a[1:0] = buf_getv_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_size_a[1:0] = DecodeHuffman_memory_controller_size_a;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_size_a[1:0] = DecodeHuffman_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_size_a[1:0] = buf_getv_memory_controller_size_a;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_size_a[1:0] = buf_getv_memory_controller_size_a;
	end
	/* DecodeHuffMCU: %0*/
	/*   %2 = load i8* %1, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_1)) begin
		memory_controller_size_a = 2'd0;
	end
	/* DecodeHuffMCU: %0*/
	/*   %6 = load i32* %5, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffMCU: %12*/
	/*   %16 = load i32* %15, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__12_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffMCU: %24*/
	/*   %25 = load i32* %out_buf, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__24_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffMCU: %24*/
	/*   store i32 %26, i32* %out_buf, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__24_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffMCU: %33*/
	/*   store i32 0, i32* %mptr.04, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__33_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffMCU: %36*/
	/*   %37 = load i32* %29, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__36_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffMCU: %46*/
	/*   store i32 %47, i32* %48, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffMCU: %46*/
	/*   %51 = load i32* %50, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__46_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* DecodeHuffMCU: %54*/
	/*   store i32 %58, i32* %48, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_DecodeHuffMCU_BB__54_36)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = DecodeHuffman_memory_controller_enable_b;
	end
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = DecodeHuffman_memory_controller_enable_b;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_enable_b = buf_getv_memory_controller_enable_b;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_enable_b = buf_getv_memory_controller_enable_b;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_enable_b = DecodeHuffman_memory_controller_enable_b;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_enable_b = DecodeHuffman_memory_controller_enable_b;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_enable_b = buf_getv_memory_controller_enable_b;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_enable_b = buf_getv_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffman_memory_controller_address_b;
	end
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffman_memory_controller_address_b;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = buf_getv_memory_controller_address_b;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = buf_getv_memory_controller_address_b;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffman_memory_controller_address_b;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffman_memory_controller_address_b;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = buf_getv_memory_controller_address_b;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = buf_getv_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = DecodeHuffman_memory_controller_write_enable_b;
	end
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = DecodeHuffman_memory_controller_write_enable_b;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_write_enable_b = buf_getv_memory_controller_write_enable_b;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_write_enable_b = buf_getv_memory_controller_write_enable_b;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_write_enable_b = DecodeHuffman_memory_controller_write_enable_b;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_write_enable_b = DecodeHuffman_memory_controller_write_enable_b;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_write_enable_b = buf_getv_memory_controller_write_enable_b;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_write_enable_b = buf_getv_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffman_memory_controller_in_b;
	end
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffman_memory_controller_in_b;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = buf_getv_memory_controller_in_b;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = buf_getv_memory_controller_in_b;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffman_memory_controller_in_b;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffman_memory_controller_in_b;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = buf_getv_memory_controller_in_b;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = buf_getv_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = DecodeHuffman_memory_controller_size_b;
	end
	/* DecodeHuffMCU: %0*/
	/*   %10 = tail call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = DecodeHuffman_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_size_b[1:0] = buf_getv_memory_controller_size_b;
	end
	/* DecodeHuffMCU: %12*/
	/*   %13 = tail call fastcc i32 @buf_getv(i32 %10) #2*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_size_b[1:0] = buf_getv_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_size_b[1:0] = DecodeHuffman_memory_controller_size_b;
	end
	/* DecodeHuffMCU: %36*/
	/*   %38 = tail call fastcc i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #2*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_size_b[1:0] = DecodeHuffman_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_size_b[1:0] = buf_getv_memory_controller_size_b;
	end
	/* DecodeHuffMCU: %46*/
	/*   %47 = tail call fastcc i32 @buf_getv(i32 %39) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_size_b[1:0] = buf_getv_memory_controller_size_b;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [9:0] LEGUP_0 = 10'd0;
parameter [9:0] LEGUP_F_main_BB__0_1 = 10'd1;
parameter [9:0] LEGUP_F_main_BB__0_2 = 10'd2;
parameter [9:0] LEGUP_F_main_BB__1_3 = 10'd3;
parameter [9:0] LEGUP_F_main_BB__1_4 = 10'd4;
parameter [9:0] LEGUP_F_main_BB__1_5 = 10'd5;
parameter [9:0] LEGUP_F_main_BB_preheaderi_6 = 10'd6;
parameter [9:0] LEGUP_F_main_BB_preheaderi_7 = 10'd7;
parameter [9:0] LEGUP_F_main_BB_preheaderi_8 = 10'd8;
parameter [9:0] LEGUP_F_main_BB_loopexitipreheaderiipreheader_9 = 10'd9;
parameter [9:0] LEGUP_F_main_BB_loopexitipreheaderiipreheader_10 = 10'd10;
parameter [9:0] LEGUP_F_main_BB_loopexitipreheaderiipreheader_11 = 10'd11;
parameter [9:0] LEGUP_F_main_BB_loopexitipreheaderiipreheader_12 = 10'd12;
parameter [9:0] LEGUP_F_main_BB_loopexitipreheaderiipreheader_13 = 10'd13;
parameter [9:0] LEGUP_F_main_BB_loopexitipreheaderiiouter24loopexit_14 = 10'd14;
parameter [9:0] LEGUP_F_main_BB_loopexitipreheaderiiouter24_15 = 10'd15;
parameter [9:0] LEGUP_F_main_BB_loopexitipreheaderiiouter29loopexit_16 = 10'd16;
parameter [9:0] LEGUP_F_main_BB_loopexitipreheaderiiouter29_17 = 10'd17;
parameter [9:0] LEGUP_F_main_BB_loopexitipreheaderii_18 = 10'd18;
parameter [9:0] LEGUP_F_main_BB_loopexitipreheaderii_19 = 10'd19;
parameter [9:0] LEGUP_F_main_BB_uslcssausii_20 = 10'd20;
parameter [9:0] LEGUP_F_main_BB_loopexitiiiloopexit_21 = 10'd21;
parameter [9:0] LEGUP_F_main_BB_loopexitiii_22 = 10'd22;
parameter [9:0] LEGUP_F_main_BB_loopexitiii_23 = 10'd23;
parameter [9:0] LEGUP_F_main_BB_loopexitiii_24 = 10'd24;
parameter [9:0] LEGUP_F_main_BB_lrphiiipreheader_25 = 10'd25;
parameter [9:0] LEGUP_F_main_BB_lrphiii_26 = 10'd26;
parameter [9:0] LEGUP_F_main_BB_lrphiii_27 = 10'd27;
parameter [9:0] LEGUP_F_main_BB_lrphiii_28 = 10'd28;
parameter [9:0] LEGUP_F_main_BB_preheaderiiipreheaderloopexit_29 = 10'd29;
parameter [9:0] LEGUP_F_main_BB_preheaderiiipreheader_30 = 10'd30;
parameter [9:0] LEGUP_F_main_BB_preheaderiii_31 = 10'd31;
parameter [9:0] LEGUP_F_main_BB_preheaderiii_32 = 10'd32;
parameter [9:0] LEGUP_F_main_BB_preheaderiii_33 = 10'd33;
parameter [9:0] LEGUP_F_main_BB_next_markerexitii_34 = 10'd34;
parameter [9:0] LEGUP_F_main_BB_next_markerexitii_35 = 10'd35;
parameter [9:0] LEGUP_F_main_BB__28_36 = 10'd36;
parameter [9:0] LEGUP_F_main_BB__28_37 = 10'd37;
parameter [9:0] LEGUP_F_main_BB__28_38 = 10'd38;
parameter [9:0] LEGUP_F_main_BB__28_39 = 10'd39;
parameter [9:0] LEGUP_F_main_BB__31_40 = 10'd40;
parameter [9:0] LEGUP_F_main_BB_loopexitipreheaderiibackedge_41 = 10'd41;
parameter [9:0] LEGUP_F_main_BB__32_42 = 10'd42;
parameter [9:0] LEGUP_F_main_BB__32_43 = 10'd43;
parameter [9:0] LEGUP_F_main_BB__32_44 = 10'd44;
parameter [9:0] LEGUP_F_main_BB__32_45 = 10'd45;
parameter [9:0] LEGUP_F_main_BB__32_46 = 10'd46;
parameter [9:0] LEGUP_F_main_BB__32_47 = 10'd47;
parameter [9:0] LEGUP_F_main_BB__32_48 = 10'd48;
parameter [9:0] LEGUP_F_main_BB__32_49 = 10'd49;
parameter [9:0] LEGUP_F_main_BB__32_50 = 10'd50;
parameter [9:0] LEGUP_F_main_BB__32_51 = 10'd51;
parameter [9:0] LEGUP_F_main_BB__32_52 = 10'd52;
parameter [9:0] LEGUP_F_main_BB__32_53 = 10'd53;
parameter [9:0] LEGUP_F_main_BB__73_54 = 10'd54;
parameter [9:0] LEGUP_F_main_BB__73_55 = 10'd55;
parameter [9:0] LEGUP_F_main_BB__73_56 = 10'd56;
parameter [9:0] LEGUP_F_main_BB__73_57 = 10'd57;
parameter [9:0] LEGUP_F_main_BB__76_58 = 10'd58;
parameter [9:0] LEGUP_F_main_BB__78_59 = 10'd59;
parameter [9:0] LEGUP_F_main_BB__78_60 = 10'd60;
parameter [9:0] LEGUP_F_main_BB__78_61 = 10'd61;
parameter [9:0] LEGUP_F_main_BB__78_62 = 10'd62;
parameter [9:0] LEGUP_F_main_BB__81_63 = 10'd63;
parameter [9:0] LEGUP_F_main_BB__81_64 = 10'd64;
parameter [9:0] LEGUP_F_main_BB__81_65 = 10'd65;
parameter [9:0] LEGUP_F_main_BB__84_66 = 10'd66;
parameter [9:0] LEGUP_F_main_BB__84_67 = 10'd67;
parameter [9:0] LEGUP_F_main_BB__84_68 = 10'd68;
parameter [9:0] LEGUP_F_main_BB__84_69 = 10'd69;
parameter [9:0] LEGUP_F_main_BB__87_70 = 10'd70;
parameter [9:0] LEGUP_F_main_BB__87_71 = 10'd71;
parameter [9:0] LEGUP_F_main_BB__87_72 = 10'd72;
parameter [9:0] LEGUP_F_main_BB__90_73 = 10'd73;
parameter [9:0] LEGUP_F_main_BB__90_74 = 10'd74;
parameter [9:0] LEGUP_F_main_BB__90_75 = 10'd75;
parameter [9:0] LEGUP_F_main_BB__90_76 = 10'd76;
parameter [9:0] LEGUP_F_main_BB__93_77 = 10'd77;
parameter [9:0] LEGUP_F_main_BB_preheaderi1iithread_78 = 10'd78;
parameter [9:0] LEGUP_F_main_BB_preheaderi1iithread_79 = 10'd79;
parameter [9:0] LEGUP_F_main_BB_preheaderi1iithread_80 = 10'd80;
parameter [9:0] LEGUP_F_main_BB_preheaderi1iithread_81 = 10'd81;
parameter [9:0] LEGUP_F_main_BB_preheaderi1ii_82 = 10'd82;
parameter [9:0] LEGUP_F_main_BB_lrphi2iipreheader_83 = 10'd83;
parameter [9:0] LEGUP_F_main_BB_lrphi2ii_84 = 10'd84;
parameter [9:0] LEGUP_F_main_BB_lrphi2ii_85 = 10'd85;
parameter [9:0] LEGUP_F_main_BB_lrphi2ii_86 = 10'd86;
parameter [9:0] LEGUP_F_main_BB_lrphi2ii_87 = 10'd87;
parameter [9:0] LEGUP_F_main_BB_lrphi2ii_88 = 10'd88;
parameter [9:0] LEGUP_F_main_BB_lrphi2ii_89 = 10'd89;
parameter [9:0] LEGUP_F_main_BB_lrphi2ii_90 = 10'd90;
parameter [9:0] LEGUP_F_main_BB_lrphi2ii_91 = 10'd91;
parameter [9:0] LEGUP_F_main_BB_lrphi2ii_92 = 10'd92;
parameter [9:0] LEGUP_F_main_BB_lrphi2ii_93 = 10'd93;
parameter [9:0] LEGUP_F_main_BB_lrphi2ii_94 = 10'd94;
parameter [9:0] LEGUP_F_main_BB_lrphi2ii_95 = 10'd95;
parameter [9:0] LEGUP_F_main_BB_lrphi2ii_96 = 10'd96;
parameter [9:0] LEGUP_F_main_BB__127_97 = 10'd97;
parameter [9:0] LEGUP_F_main_BB__127_98 = 10'd98;
parameter [9:0] LEGUP_F_main_BB__127_99 = 10'd99;
parameter [9:0] LEGUP_F_main_BB__127_100 = 10'd100;
parameter [9:0] LEGUP_F_main_BB__130_101 = 10'd101;
parameter [9:0] LEGUP_F_main_BB__130_102 = 10'd102;
parameter [9:0] LEGUP_F_main_BB__135_103 = 10'd103;
parameter [9:0] LEGUP_F_main_BB__135_104 = 10'd104;
parameter [9:0] LEGUP_F_main_BB__135_105 = 10'd105;
parameter [9:0] LEGUP_F_main_BB__135_106 = 10'd106;
parameter [9:0] LEGUP_F_main_BB__138_107 = 10'd107;
parameter [9:0] LEGUP_F_main_BB__138_108 = 10'd108;
parameter [9:0] LEGUP_F_main_BB__143_109 = 10'd109;
parameter [9:0] LEGUP_F_main_BB__143_110 = 10'd110;
parameter [9:0] LEGUP_F_main_BB__143_111 = 10'd111;
parameter [9:0] LEGUP_F_main_BB__143_112 = 10'd112;
parameter [9:0] LEGUP_F_main_BB__146_113 = 10'd113;
parameter [9:0] LEGUP_F_main_BB__146_114 = 10'd114;
parameter [9:0] LEGUP_F_main_BB__150_115 = 10'd115;
parameter [9:0] LEGUP_F_main_BB__150_116 = 10'd116;
parameter [9:0] LEGUP_F_main_BB__150_117 = 10'd117;
parameter [9:0] LEGUP_F_main_BB__150_118 = 10'd118;
parameter [9:0] LEGUP_F_main_BB__153_119 = 10'd119;
parameter [9:0] LEGUP_F_main_BB__153_120 = 10'd120;
parameter [9:0] LEGUP_F_main_BB__158_121 = 10'd121;
parameter [9:0] LEGUP_F_main_BB__158_122 = 10'd122;
parameter [9:0] LEGUP_F_main_BB__158_123 = 10'd123;
parameter [9:0] LEGUP_F_main_BB__158_124 = 10'd124;
parameter [9:0] LEGUP_F_main_BB__161_125 = 10'd125;
parameter [9:0] LEGUP_F_main_BB__crit_edgeiiiloopexit_126 = 10'd126;
parameter [9:0] LEGUP_F_main_BB__crit_edgeiiiloopexit_127 = 10'd127;
parameter [9:0] LEGUP_F_main_BB__crit_edgeiii_128 = 10'd128;
parameter [9:0] LEGUP_F_main_BB__crit_edgeiii_129 = 10'd129;
parameter [9:0] LEGUP_F_main_BB__166_130 = 10'd130;
parameter [9:0] LEGUP_F_main_BB_loopexitipreheaderiiouterbackedge_131 = 10'd131;
parameter [9:0] LEGUP_F_main_BB_loopexitipreheaderiiouter_132 = 10'd132;
parameter [9:0] LEGUP_F_main_BB__168_133 = 10'd133;
parameter [9:0] LEGUP_F_main_BB_uslcssa4ii_134 = 10'd134;
parameter [9:0] LEGUP_F_main_BB_uslcssa4ii_135 = 10'd135;
parameter [9:0] LEGUP_F_main_BB_uslcssa4ii_136 = 10'd136;
parameter [9:0] LEGUP_F_main_BB_uslcssa4ii_137 = 10'd137;
parameter [9:0] LEGUP_F_main_BB__184_138 = 10'd138;
parameter [9:0] LEGUP_F_main_BB__184_139 = 10'd139;
parameter [9:0] LEGUP_F_main_BB__184_140 = 10'd140;
parameter [9:0] LEGUP_F_main_BB__184_141 = 10'd141;
parameter [9:0] LEGUP_F_main_BB__187_142 = 10'd142;
parameter [9:0] LEGUP_F_main_BB_preheader2iiithread_143 = 10'd143;
parameter [9:0] LEGUP_F_main_BB_preheader2iiithread_144 = 10'd144;
parameter [9:0] LEGUP_F_main_BB_preheader2iiithread_145 = 10'd145;
parameter [9:0] LEGUP_F_main_BB_preheader2iiithread_146 = 10'd146;
parameter [9:0] LEGUP_F_main_BB_lrph10iiipreheader_147 = 10'd147;
parameter [9:0] LEGUP_F_main_BB_lrph10iii_148 = 10'd148;
parameter [9:0] LEGUP_F_main_BB_lrph10iii_149 = 10'd149;
parameter [9:0] LEGUP_F_main_BB_lrph10iii_150 = 10'd150;
parameter [9:0] LEGUP_F_main_BB_lrph10iii_151 = 10'd151;
parameter [9:0] LEGUP_F_main_BB_lrphi4iipreheader_152 = 10'd152;
parameter [9:0] LEGUP_F_main_BB__200_153 = 10'd153;
parameter [9:0] LEGUP_F_main_BB_lrphi4ii_154 = 10'd154;
parameter [9:0] LEGUP_F_main_BB_lrphi4ii_155 = 10'd155;
parameter [9:0] LEGUP_F_main_BB__crit_edgei6iiloopexit_156 = 10'd156;
parameter [9:0] LEGUP_F_main_BB__crit_edgei6iiloopexit2_157 = 10'd157;
parameter [9:0] LEGUP_F_main_BB__crit_edgei6ii_158 = 10'd158;
parameter [9:0] LEGUP_F_main_BB__209_159 = 10'd159;
parameter [9:0] LEGUP_F_main_BB__209_160 = 10'd160;
parameter [9:0] LEGUP_F_main_BB__209_161 = 10'd161;
parameter [9:0] LEGUP_F_main_BB__209_162 = 10'd162;
parameter [9:0] LEGUP_F_main_BB__225_163 = 10'd163;
parameter [9:0] LEGUP_F_main_BB__225_164 = 10'd164;
parameter [9:0] LEGUP_F_main_BB__225_165 = 10'd165;
parameter [9:0] LEGUP_F_main_BB__225_166 = 10'd166;
parameter [9:0] LEGUP_F_main_BB__228_167 = 10'd167;
parameter [9:0] LEGUP_F_main_BB__228_168 = 10'd168;
parameter [9:0] LEGUP_F_main_BB__228_169 = 10'd169;
parameter [9:0] LEGUP_F_main_BB__233_170 = 10'd170;
parameter [9:0] LEGUP_F_main_BB__233_171 = 10'd171;
parameter [9:0] LEGUP_F_main_BB__233_172 = 10'd172;
parameter [9:0] LEGUP_F_main_BB__233_173 = 10'd173;
parameter [9:0] LEGUP_F_main_BB__236_174 = 10'd174;
parameter [9:0] LEGUP_F_main_BB__236_175 = 10'd175;
parameter [9:0] LEGUP_F_main_BB__240_176 = 10'd176;
parameter [9:0] LEGUP_F_main_BB__240_177 = 10'd177;
parameter [9:0] LEGUP_F_main_BB__240_178 = 10'd178;
parameter [9:0] LEGUP_F_main_BB__240_179 = 10'd179;
parameter [9:0] LEGUP_F_main_BB__243_180 = 10'd180;
parameter [9:0] LEGUP_F_main_BB_get_sosexitiiloopexit_181 = 10'd181;
parameter [9:0] LEGUP_F_main_BB_get_sosexitii_182 = 10'd182;
parameter [9:0] LEGUP_F_main_BB_get_sosexitii_183 = 10'd183;
parameter [9:0] LEGUP_F_main_BB__246_184 = 10'd184;
parameter [9:0] LEGUP_F_main_BB__246_185 = 10'd185;
parameter [9:0] LEGUP_F_main_BB__246_186 = 10'd186;
parameter [9:0] LEGUP_F_main_BB__246_187 = 10'd187;
parameter [9:0] LEGUP_F_main_BB__260_188 = 10'd188;
parameter [9:0] LEGUP_F_main_BB__260_189 = 10'd189;
parameter [9:0] LEGUP_F_main_BB__260_190 = 10'd190;
parameter [9:0] LEGUP_F_main_BB__260_191 = 10'd191;
parameter [9:0] LEGUP_F_main_BB_preheaderi7ii_192 = 10'd192;
parameter [9:0] LEGUP_F_main_BB_lrph5iiipreheader_193 = 10'd193;
parameter [9:0] LEGUP_F_main_BB_lrph5iii_194 = 10'd194;
parameter [9:0] LEGUP_F_main_BB_lrph5iii_195 = 10'd195;
parameter [9:0] LEGUP_F_main_BB_lrph5iii_196 = 10'd196;
parameter [9:0] LEGUP_F_main_BB__273_197 = 10'd197;
parameter [9:0] LEGUP_F_main_BB__273_198 = 10'd198;
parameter [9:0] LEGUP_F_main_BB__273_199 = 10'd199;
parameter [9:0] LEGUP_F_main_BB__273_200 = 10'd200;
parameter [9:0] LEGUP_F_main_BB__276_201 = 10'd201;
parameter [9:0] LEGUP_F_main_BB__279_202 = 10'd202;
parameter [9:0] LEGUP_F_main_BB__279_203 = 10'd203;
parameter [9:0] LEGUP_F_main_BB__283_204 = 10'd204;
parameter [9:0] LEGUP_F_main_BB__286_205 = 10'd205;
parameter [9:0] LEGUP_F_main_BB__286_206 = 10'd206;
parameter [9:0] LEGUP_F_main_BB__286_207 = 10'd207;
parameter [9:0] LEGUP_F_main_BB__286_208 = 10'd208;
parameter [9:0] LEGUP_F_main_BB__286_209 = 10'd209;
parameter [9:0] LEGUP_F_main_BB__286_210 = 10'd210;
parameter [9:0] LEGUP_F_main_BB__286_211 = 10'd211;
parameter [9:0] LEGUP_F_main_BB__286_212 = 10'd212;
parameter [9:0] LEGUP_F_main_BB__286_213 = 10'd213;
parameter [9:0] LEGUP_F_main_BB__286_214 = 10'd214;
parameter [9:0] LEGUP_F_main_BB__286_215 = 10'd215;
parameter [9:0] LEGUP_F_main_BB__286_216 = 10'd216;
parameter [9:0] LEGUP_F_main_BB__286_217 = 10'd217;
parameter [9:0] LEGUP_F_main_BB__286_218 = 10'd218;
parameter [9:0] LEGUP_F_main_BB__286_219 = 10'd219;
parameter [9:0] LEGUP_F_main_BB__286_220 = 10'd220;
parameter [9:0] LEGUP_F_main_BB__286_221 = 10'd221;
parameter [9:0] LEGUP_F_main_BB__286_222 = 10'd222;
parameter [9:0] LEGUP_F_main_BB__286_223 = 10'd223;
parameter [9:0] LEGUP_F_main_BB__286_224 = 10'd224;
parameter [9:0] LEGUP_F_main_BB__286_225 = 10'd225;
parameter [9:0] LEGUP_F_main_BB__286_226 = 10'd226;
parameter [9:0] LEGUP_F_main_BB__286_227 = 10'd227;
parameter [9:0] LEGUP_F_main_BB__286_228 = 10'd228;
parameter [9:0] LEGUP_F_main_BB__286_229 = 10'd229;
parameter [9:0] LEGUP_F_main_BB__286_230 = 10'd230;
parameter [9:0] LEGUP_F_main_BB__286_231 = 10'd231;
parameter [9:0] LEGUP_F_main_BB__286_232 = 10'd232;
parameter [9:0] LEGUP_F_main_BB__286_233 = 10'd233;
parameter [9:0] LEGUP_F_main_BB__286_234 = 10'd234;
parameter [9:0] LEGUP_F_main_BB__286_235 = 10'd235;
parameter [9:0] LEGUP_F_main_BB__286_236 = 10'd236;
parameter [9:0] LEGUP_F_main_BB__286_237 = 10'd237;
parameter [9:0] LEGUP_F_main_BB__286_238 = 10'd238;
parameter [9:0] LEGUP_F_main_BB__286_239 = 10'd239;
parameter [9:0] LEGUP_F_main_BB__286_240 = 10'd240;
parameter [9:0] LEGUP_F_main_BB__286_241 = 10'd241;
parameter [9:0] LEGUP_F_main_BB__286_242 = 10'd242;
parameter [9:0] LEGUP_F_main_BB__286_243 = 10'd243;
parameter [9:0] LEGUP_F_main_BB__286_244 = 10'd244;
parameter [9:0] LEGUP_F_main_BB__286_245 = 10'd245;
parameter [9:0] LEGUP_F_main_BB__286_246 = 10'd246;
parameter [9:0] LEGUP_F_main_BB__286_247 = 10'd247;
parameter [9:0] LEGUP_F_main_BB__286_248 = 10'd248;
parameter [9:0] LEGUP_F_main_BB__286_249 = 10'd249;
parameter [9:0] LEGUP_F_main_BB__286_250 = 10'd250;
parameter [9:0] LEGUP_F_main_BB__286_251 = 10'd251;
parameter [9:0] LEGUP_F_main_BB__286_252 = 10'd252;
parameter [9:0] LEGUP_F_main_BB__286_253 = 10'd253;
parameter [9:0] LEGUP_F_main_BB__369_254 = 10'd254;
parameter [9:0] LEGUP_F_main_BB__369_255 = 10'd255;
parameter [9:0] LEGUP_F_main_BB__369_256 = 10'd256;
parameter [9:0] LEGUP_F_main_BB__369_257 = 10'd257;
parameter [9:0] LEGUP_F_main_BB__372_258 = 10'd258;
parameter [9:0] LEGUP_F_main_BB_lrphi8ii_259 = 10'd259;
parameter [9:0] LEGUP_F_main_BB_lrphi8ii_260 = 10'd260;
parameter [9:0] LEGUP_F_main_BB_lrphi8ii_261 = 10'd261;
parameter [9:0] LEGUP_F_main_BB_lrphi8ii_262 = 10'd262;
parameter [9:0] LEGUP_F_main_BB_lrphi8ii_263 = 10'd263;
parameter [9:0] LEGUP_F_main_BB__418_264 = 10'd264;
parameter [9:0] LEGUP_F_main_BB__418_265 = 10'd265;
parameter [9:0] LEGUP_F_main_BB__418_266 = 10'd266;
parameter [9:0] LEGUP_F_main_BB__418_267 = 10'd267;
parameter [9:0] LEGUP_F_main_BB__418_268 = 10'd268;
parameter [9:0] LEGUP_F_main_BB__crit_edgei10iiloopexit_269 = 10'd269;
parameter [9:0] LEGUP_F_main_BB__crit_edgei10iiloopexit_270 = 10'd270;
parameter [9:0] LEGUP_F_main_BB__crit_edgei10iiloopexit_271 = 10'd271;
parameter [9:0] LEGUP_F_main_BB__crit_edgei10ii_272 = 10'd272;
parameter [9:0] LEGUP_F_main_BB__428_273 = 10'd273;
parameter [9:0] LEGUP_F_main_BB__428_274 = 10'd274;
parameter [9:0] LEGUP_F_main_BB__428_275 = 10'd275;
parameter [9:0] LEGUP_F_main_BB__428_276 = 10'd276;
parameter [9:0] LEGUP_F_main_BB__442_277 = 10'd277;
parameter [9:0] LEGUP_F_main_BB__442_278 = 10'd278;
parameter [9:0] LEGUP_F_main_BB__442_279 = 10'd279;
parameter [9:0] LEGUP_F_main_BB__442_280 = 10'd280;
parameter [9:0] LEGUP_F_main_BB_preheaderi11ii_281 = 10'd281;
parameter [9:0] LEGUP_F_main_BB_lrphi13iiloopexit_282 = 10'd282;
parameter [9:0] LEGUP_F_main_BB_lrphi13ii_283 = 10'd283;
parameter [9:0] LEGUP_F_main_BB_lrphi13ii_284 = 10'd284;
parameter [9:0] LEGUP_F_main_BB_lrphi13ii_285 = 10'd285;
parameter [9:0] LEGUP_F_main_BB__459_286 = 10'd286;
parameter [9:0] LEGUP_F_main_BB__459_287 = 10'd287;
parameter [9:0] LEGUP_F_main_BB__459_288 = 10'd288;
parameter [9:0] LEGUP_F_main_BB__459_289 = 10'd289;
parameter [9:0] LEGUP_F_main_BB__462_290 = 10'd290;
parameter [9:0] LEGUP_F_main_BB__462_291 = 10'd291;
parameter [9:0] LEGUP_F_main_BB__465_292 = 10'd292;
parameter [9:0] LEGUP_F_main_BB__465_293 = 10'd293;
parameter [9:0] LEGUP_F_main_BB__465_294 = 10'd294;
parameter [9:0] LEGUP_F_main_BB__465_295 = 10'd295;
parameter [9:0] LEGUP_F_main_BB__468_296 = 10'd296;
parameter [9:0] LEGUP_F_main_BB_split_crit_edgeiiipreheader_297 = 10'd297;
parameter [9:0] LEGUP_F_main_BB_splitusiiipreheader_298 = 10'd298;
parameter [9:0] LEGUP_F_main_BB_splitusiii_299 = 10'd299;
parameter [9:0] LEGUP_F_main_BB_splitusiii_300 = 10'd300;
parameter [9:0] LEGUP_F_main_BB_splitusiii_301 = 10'd301;
parameter [9:0] LEGUP_F_main_BB_splitusiii_302 = 10'd302;
parameter [9:0] LEGUP_F_main_BB_split_crit_edgeiii_303 = 10'd303;
parameter [9:0] LEGUP_F_main_BB_split_crit_edgeiii_304 = 10'd304;
parameter [9:0] LEGUP_F_main_BB_split_crit_edgeiii_305 = 10'd305;
parameter [9:0] LEGUP_F_main_BB_split_crit_edgeiii_306 = 10'd306;
parameter [9:0] LEGUP_F_main_BB_split_crit_edgeiii_307 = 10'd307;
parameter [9:0] LEGUP_F_main_BB_uslcssausiiiloopexit_308 = 10'd308;
parameter [9:0] LEGUP_F_main_BB_uslcssausiiiloopexit22_309 = 10'd309;
parameter [9:0] LEGUP_F_main_BB_uslcssausiii_310 = 10'd310;
parameter [9:0] LEGUP_F_main_BB_read_markersexitiloopexit_311 = 10'd311;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_312 = 10'd312;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_313 = 10'd313;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_314 = 10'd314;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_315 = 10'd315;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_316 = 10'd316;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_317 = 10'd317;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_318 = 10'd318;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_319 = 10'd319;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_320 = 10'd320;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_321 = 10'd321;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_322 = 10'd322;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_323 = 10'd323;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_324 = 10'd324;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_325 = 10'd325;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_326 = 10'd326;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_327 = 10'd327;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_328 = 10'd328;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_329 = 10'd329;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_330 = 10'd330;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_331 = 10'd331;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_332 = 10'd332;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_333 = 10'd333;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_334 = 10'd334;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_335 = 10'd335;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_336 = 10'd336;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_337 = 10'd337;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_338 = 10'd338;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_339 = 10'd339;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_340 = 10'd340;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_341 = 10'd341;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_342 = 10'd342;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_343 = 10'd343;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_344 = 10'd344;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_345 = 10'd345;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_346 = 10'd346;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_347 = 10'd347;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_349 = 10'd349;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_350 = 10'd350;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_352 = 10'd352;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_353 = 10'd353;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_355 = 10'd355;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_356 = 10'd356;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_358 = 10'd358;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_359 = 10'd359;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_360 = 10'd360;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_361 = 10'd361;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_362 = 10'd362;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_363 = 10'd363;
parameter [9:0] LEGUP_F_main_BB_read_markersexiti_364 = 10'd364;
parameter [9:0] LEGUP_F_main_BB__510_365 = 10'd365;
parameter [9:0] LEGUP_F_main_BB_preheader46lrphii_366 = 10'd366;
parameter [9:0] LEGUP_F_main_BB_preheader46ii_367 = 10'd367;
parameter [9:0] LEGUP_F_main_BB_preheader46ii_369 = 10'd369;
parameter [9:0] LEGUP_F_main_BB__524_370 = 10'd370;
parameter [9:0] LEGUP_F_main_BB__524_371 = 10'd371;
parameter [9:0] LEGUP_F_main_BB__524_372 = 10'd372;
parameter [9:0] LEGUP_F_main_BB__524_373 = 10'd373;
parameter [9:0] LEGUP_F_main_BB__524_374 = 10'd374;
parameter [9:0] LEGUP_F_main_BB_IZigzagMatrixexitiii_375 = 10'd375;
parameter [9:0] LEGUP_F_main_BB_IZigzagMatrixexitiii_376 = 10'd376;
parameter [9:0] LEGUP_F_main_BB__532_377 = 10'd377;
parameter [9:0] LEGUP_F_main_BB__532_378 = 10'd378;
parameter [9:0] LEGUP_F_main_BB__532_379 = 10'd379;
parameter [9:0] LEGUP_F_main_BB__532_380 = 10'd380;
parameter [9:0] LEGUP_F_main_BB_IQuantizeexitiii_381 = 10'd381;
parameter [9:0] LEGUP_F_main_BB_IQuantizeexitiii_383 = 10'd383;
parameter [9:0] LEGUP_F_main_BB__538_384 = 10'd384;
parameter [9:0] LEGUP_F_main_BB__538_385 = 10'd385;
parameter [9:0] LEGUP_F_main_BB__538_386 = 10'd386;
parameter [9:0] LEGUP_F_main_BB__538_387 = 10'd387;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexitiiipreheader_388 = 10'd388;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_389 = 10'd389;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_390 = 10'd390;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_391 = 10'd391;
parameter [9:0] LEGUP_F_main_BB__546_392 = 10'd392;
parameter [9:0] LEGUP_F_main_BB__546_393 = 10'd393;
parameter [9:0] LEGUP_F_main_BB__547_394 = 10'd394;
parameter [9:0] LEGUP_F_main_BB__549_395 = 10'd395;
parameter [9:0] LEGUP_F_main_BB__549_396 = 10'd396;
parameter [9:0] LEGUP_F_main_BB__550_397 = 10'd397;
parameter [9:0] LEGUP_F_main_BB_decode_blockexitii_398 = 10'd398;
parameter [9:0] LEGUP_F_main_BB_decode_blockexitii_400 = 10'd400;
parameter [9:0] LEGUP_F_main_BB_decode_blockexit2ii_401 = 10'd401;
parameter [9:0] LEGUP_F_main_BB_decode_blockexit2ii_402 = 10'd402;
parameter [9:0] LEGUP_F_main_BB_decode_blockexit2ii_403 = 10'd403;
parameter [9:0] LEGUP_F_main_BB_decode_blockexit2ii_404 = 10'd404;
parameter [9:0] LEGUP_F_main_BB__571_405 = 10'd405;
parameter [9:0] LEGUP_F_main_BB__573_406 = 10'd406;
parameter [9:0] LEGUP_F_main_BB__575_407 = 10'd407;
parameter [9:0] LEGUP_F_main_BB__577_408 = 10'd408;
parameter [9:0] LEGUP_F_main_BB__579_409 = 10'd409;
parameter [9:0] LEGUP_F_main_BB__581_410 = 10'd410;
parameter [9:0] LEGUP_F_main_BB__581_411 = 10'd411;
parameter [9:0] LEGUP_F_main_BB__581_412 = 10'd412;
parameter [9:0] LEGUP_F_main_BB_YuvToRgbexitpreheaderii_413 = 10'd413;
parameter [9:0] LEGUP_F_main_BB_YuvToRgbexitpreheaderii_414 = 10'd414;
parameter [9:0] LEGUP_F_main_BB_YuvToRgbexitpreheaderii_415 = 10'd415;
parameter [9:0] LEGUP_F_main_BB_YuvToRgbexitpreheaderii_416 = 10'd416;
parameter [9:0] LEGUP_F_main_BB__592_417 = 10'd417;
parameter [9:0] LEGUP_F_main_BB__592_418 = 10'd418;
parameter [9:0] LEGUP_F_main_BB__592_419 = 10'd419;
parameter [9:0] LEGUP_F_main_BB_lrph8splitusiiii_420 = 10'd420;
parameter [9:0] LEGUP_F_main_BB_lrph8splitusiiii_421 = 10'd421;
parameter [9:0] LEGUP_F_main_BB_lrph8splitusiiii_422 = 10'd422;
parameter [9:0] LEGUP_F_main_BB__625_423 = 10'd423;
parameter [9:0] LEGUP_F_main_BB__626_424 = 10'd424;
parameter [9:0] LEGUP_F_main_BB__626_425 = 10'd425;
parameter [9:0] LEGUP_F_main_BB__626_426 = 10'd426;
parameter [9:0] LEGUP_F_main_BB__626_427 = 10'd427;
parameter [9:0] LEGUP_F_main_BB__626_428 = 10'd428;
parameter [9:0] LEGUP_F_main_BB_lrphusiiii_429 = 10'd429;
parameter [9:0] LEGUP_F_main_BB_WriteOneBlockexitiiiloopexit_430 = 10'd430;
parameter [9:0] LEGUP_F_main_BB_WriteOneBlockexitiii_431 = 10'd431;
parameter [9:0] LEGUP_F_main_BB_WriteOneBlockexitiii_432 = 10'd432;
parameter [9:0] LEGUP_F_main_BB_WriteOneBlockexitiii_433 = 10'd433;
parameter [9:0] LEGUP_F_main_BB__637_434 = 10'd434;
parameter [9:0] LEGUP_F_main_BB__637_435 = 10'd435;
parameter [9:0] LEGUP_F_main_BB_WriteBlockexitii_436 = 10'd436;
parameter [9:0] LEGUP_F_main_BB__639_437 = 10'd437;
parameter [9:0] LEGUP_F_main_BB__641_438 = 10'd438;
parameter [9:0] LEGUP_F_main_BB_preheader49lrphii_439 = 10'd439;
parameter [9:0] LEGUP_F_main_BB_preheader49ii_440 = 10'd440;
parameter [9:0] LEGUP_F_main_BB__652_441 = 10'd441;
parameter [9:0] LEGUP_F_main_BB__652_443 = 10'd443;
parameter [9:0] LEGUP_F_main_BB__654_444 = 10'd444;
parameter [9:0] LEGUP_F_main_BB__654_445 = 10'd445;
parameter [9:0] LEGUP_F_main_BB__654_446 = 10'd446;
parameter [9:0] LEGUP_F_main_BB__654_447 = 10'd447;
parameter [9:0] LEGUP_F_main_BB__654_448 = 10'd448;
parameter [9:0] LEGUP_F_main_BB_IZigzagMatrixexiti5ii_449 = 10'd449;
parameter [9:0] LEGUP_F_main_BB_IZigzagMatrixexiti5ii_450 = 10'd450;
parameter [9:0] LEGUP_F_main_BB__662_451 = 10'd451;
parameter [9:0] LEGUP_F_main_BB__662_452 = 10'd452;
parameter [9:0] LEGUP_F_main_BB__662_453 = 10'd453;
parameter [9:0] LEGUP_F_main_BB__662_454 = 10'd454;
parameter [9:0] LEGUP_F_main_BB_IQuantizeexiti8ii_455 = 10'd455;
parameter [9:0] LEGUP_F_main_BB_IQuantizeexiti8ii_457 = 10'd457;
parameter [9:0] LEGUP_F_main_BB__668_458 = 10'd458;
parameter [9:0] LEGUP_F_main_BB__668_459 = 10'd459;
parameter [9:0] LEGUP_F_main_BB__668_460 = 10'd460;
parameter [9:0] LEGUP_F_main_BB__668_461 = 10'd461;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti11iipreheader_462 = 10'd462;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_463 = 10'd463;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_464 = 10'd464;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_465 = 10'd465;
parameter [9:0] LEGUP_F_main_BB__676_466 = 10'd466;
parameter [9:0] LEGUP_F_main_BB__676_467 = 10'd467;
parameter [9:0] LEGUP_F_main_BB__677_468 = 10'd468;
parameter [9:0] LEGUP_F_main_BB__679_469 = 10'd469;
parameter [9:0] LEGUP_F_main_BB__679_470 = 10'd470;
parameter [9:0] LEGUP_F_main_BB__680_471 = 10'd471;
parameter [9:0] LEGUP_F_main_BB_decode_blockexit12ii_472 = 10'd472;
parameter [9:0] LEGUP_F_main_BB__683_473 = 10'd473;
parameter [9:0] LEGUP_F_main_BB__683_475 = 10'd475;
parameter [9:0] LEGUP_F_main_BB__684_476 = 10'd476;
parameter [9:0] LEGUP_F_main_BB__684_477 = 10'd477;
parameter [9:0] LEGUP_F_main_BB__684_478 = 10'd478;
parameter [9:0] LEGUP_F_main_BB__684_479 = 10'd479;
parameter [9:0] LEGUP_F_main_BB__684_480 = 10'd480;
parameter [9:0] LEGUP_F_main_BB_IZigzagMatrixexiti17ii_481 = 10'd481;
parameter [9:0] LEGUP_F_main_BB_IZigzagMatrixexiti17ii_482 = 10'd482;
parameter [9:0] LEGUP_F_main_BB__692_483 = 10'd483;
parameter [9:0] LEGUP_F_main_BB__692_484 = 10'd484;
parameter [9:0] LEGUP_F_main_BB__692_485 = 10'd485;
parameter [9:0] LEGUP_F_main_BB__692_486 = 10'd486;
parameter [9:0] LEGUP_F_main_BB_IQuantizeexiti20ii_487 = 10'd487;
parameter [9:0] LEGUP_F_main_BB_IQuantizeexiti20ii_489 = 10'd489;
parameter [9:0] LEGUP_F_main_BB__698_490 = 10'd490;
parameter [9:0] LEGUP_F_main_BB__698_491 = 10'd491;
parameter [9:0] LEGUP_F_main_BB__698_492 = 10'd492;
parameter [9:0] LEGUP_F_main_BB__698_493 = 10'd493;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti23iipreheader_494 = 10'd494;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_495 = 10'd495;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_496 = 10'd496;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_497 = 10'd497;
parameter [9:0] LEGUP_F_main_BB__706_498 = 10'd498;
parameter [9:0] LEGUP_F_main_BB__706_499 = 10'd499;
parameter [9:0] LEGUP_F_main_BB__707_500 = 10'd500;
parameter [9:0] LEGUP_F_main_BB__709_501 = 10'd501;
parameter [9:0] LEGUP_F_main_BB__709_502 = 10'd502;
parameter [9:0] LEGUP_F_main_BB__710_503 = 10'd503;
parameter [9:0] LEGUP_F_main_BB_decode_blockexit24ii_504 = 10'd504;
parameter [9:0] LEGUP_F_main_BB_decode_blockexit24ii_506 = 10'd506;
parameter [9:0] LEGUP_F_main_BB__712_507 = 10'd507;
parameter [9:0] LEGUP_F_main_BB__712_508 = 10'd508;
parameter [9:0] LEGUP_F_main_BB__712_509 = 10'd509;
parameter [9:0] LEGUP_F_main_BB__712_510 = 10'd510;
parameter [9:0] LEGUP_F_main_BB__712_511 = 10'd511;
parameter [9:0] LEGUP_F_main_BB_IZigzagMatrixexiti29ii_512 = 10'd512;
parameter [9:0] LEGUP_F_main_BB_IZigzagMatrixexiti29ii_513 = 10'd513;
parameter [9:0] LEGUP_F_main_BB__720_514 = 10'd514;
parameter [9:0] LEGUP_F_main_BB__720_515 = 10'd515;
parameter [9:0] LEGUP_F_main_BB__720_516 = 10'd516;
parameter [9:0] LEGUP_F_main_BB__720_517 = 10'd517;
parameter [9:0] LEGUP_F_main_BB_IQuantizeexiti32ii_518 = 10'd518;
parameter [9:0] LEGUP_F_main_BB_IQuantizeexiti32ii_520 = 10'd520;
parameter [9:0] LEGUP_F_main_BB__726_521 = 10'd521;
parameter [9:0] LEGUP_F_main_BB__726_522 = 10'd522;
parameter [9:0] LEGUP_F_main_BB__726_523 = 10'd523;
parameter [9:0] LEGUP_F_main_BB__726_524 = 10'd524;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti35iipreheader_525 = 10'd525;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_526 = 10'd526;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_527 = 10'd527;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_528 = 10'd528;
parameter [9:0] LEGUP_F_main_BB__734_529 = 10'd529;
parameter [9:0] LEGUP_F_main_BB__734_530 = 10'd530;
parameter [9:0] LEGUP_F_main_BB__735_531 = 10'd531;
parameter [9:0] LEGUP_F_main_BB__737_532 = 10'd532;
parameter [9:0] LEGUP_F_main_BB__737_533 = 10'd533;
parameter [9:0] LEGUP_F_main_BB__738_534 = 10'd534;
parameter [9:0] LEGUP_F_main_BB_preheader47iipreheader_535 = 10'd535;
parameter [9:0] LEGUP_F_main_BB_preheader48ii_536 = 10'd536;
parameter [9:0] LEGUP_F_main_BB_preheader48ii_538 = 10'd538;
parameter [9:0] LEGUP_F_main_BB_preheader48ii_540 = 10'd540;
parameter [9:0] LEGUP_F_main_BB_preheader48ii_542 = 10'd542;
parameter [9:0] LEGUP_F_main_BB_decode_startexitipreheaderloopexit_543 = 10'd543;
parameter [9:0] LEGUP_F_main_BB_decode_startexitipreheaderloopexit1_544 = 10'd544;
parameter [9:0] LEGUP_F_main_BB_decode_startexitipreheader_545 = 10'd545;
parameter [9:0] LEGUP_F_main_BB_preheader47ii_546 = 10'd546;
parameter [9:0] LEGUP_F_main_BB__741_547 = 10'd547;
parameter [9:0] LEGUP_F_main_BB__741_548 = 10'd548;
parameter [9:0] LEGUP_F_main_BB__741_549 = 10'd549;
parameter [9:0] LEGUP_F_main_BB__741_550 = 10'd550;
parameter [9:0] LEGUP_F_main_BB__761_551 = 10'd551;
parameter [9:0] LEGUP_F_main_BB__763_552 = 10'd552;
parameter [9:0] LEGUP_F_main_BB__765_553 = 10'd553;
parameter [9:0] LEGUP_F_main_BB__767_554 = 10'd554;
parameter [9:0] LEGUP_F_main_BB__769_555 = 10'd555;
parameter [9:0] LEGUP_F_main_BB__771_556 = 10'd556;
parameter [9:0] LEGUP_F_main_BB__771_557 = 10'd557;
parameter [9:0] LEGUP_F_main_BB__771_558 = 10'd558;
parameter [9:0] LEGUP_F_main_BB_YuvToRgbexit45ii_559 = 10'd559;
parameter [9:0] LEGUP_F_main_BB__774_560 = 10'd560;
parameter [9:0] LEGUP_F_main_BB__774_561 = 10'd561;
parameter [9:0] LEGUP_F_main_BB__774_562 = 10'd562;
parameter [9:0] LEGUP_F_main_BB__774_563 = 10'd563;
parameter [9:0] LEGUP_F_main_BB__774_564 = 10'd564;
parameter [9:0] LEGUP_F_main_BB_IZigzagMatrixexiti1ii_565 = 10'd565;
parameter [9:0] LEGUP_F_main_BB_IZigzagMatrixexiti1ii_566 = 10'd566;
parameter [9:0] LEGUP_F_main_BB__782_567 = 10'd567;
parameter [9:0] LEGUP_F_main_BB__782_568 = 10'd568;
parameter [9:0] LEGUP_F_main_BB__782_569 = 10'd569;
parameter [9:0] LEGUP_F_main_BB__782_570 = 10'd570;
parameter [9:0] LEGUP_F_main_BB_IQuantizeexiti1ii_571 = 10'd571;
parameter [9:0] LEGUP_F_main_BB_IQuantizeexiti1ii_573 = 10'd573;
parameter [9:0] LEGUP_F_main_BB__788_574 = 10'd574;
parameter [9:0] LEGUP_F_main_BB__788_575 = 10'd575;
parameter [9:0] LEGUP_F_main_BB__788_576 = 10'd576;
parameter [9:0] LEGUP_F_main_BB__788_577 = 10'd577;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti1iipreheader_578 = 10'd578;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_579 = 10'd579;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_580 = 10'd580;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_581 = 10'd581;
parameter [9:0] LEGUP_F_main_BB__796_582 = 10'd582;
parameter [9:0] LEGUP_F_main_BB__798_583 = 10'd583;
parameter [9:0] LEGUP_F_main_BB__798_584 = 10'd584;
parameter [9:0] LEGUP_F_main_BB__799_585 = 10'd585;
parameter [9:0] LEGUP_F_main_BB__799_586 = 10'd586;
parameter [9:0] LEGUP_F_main_BB__800_587 = 10'd587;
parameter [9:0] LEGUP_F_main_BB_decode_blockexit1ii_588 = 10'd588;
parameter [9:0] LEGUP_F_main_BB_decode_blockexit1ii_590 = 10'd590;
parameter [9:0] LEGUP_F_main_BB__802_591 = 10'd591;
parameter [9:0] LEGUP_F_main_BB__802_592 = 10'd592;
parameter [9:0] LEGUP_F_main_BB__802_593 = 10'd593;
parameter [9:0] LEGUP_F_main_BB__802_594 = 10'd594;
parameter [9:0] LEGUP_F_main_BB__802_595 = 10'd595;
parameter [9:0] LEGUP_F_main_BB_IZigzagMatrixexiti2ii_596 = 10'd596;
parameter [9:0] LEGUP_F_main_BB_IZigzagMatrixexiti2ii_597 = 10'd597;
parameter [9:0] LEGUP_F_main_BB__810_598 = 10'd598;
parameter [9:0] LEGUP_F_main_BB__810_599 = 10'd599;
parameter [9:0] LEGUP_F_main_BB__810_600 = 10'd600;
parameter [9:0] LEGUP_F_main_BB__810_601 = 10'd601;
parameter [9:0] LEGUP_F_main_BB_IQuantizeexiti2ii_602 = 10'd602;
parameter [9:0] LEGUP_F_main_BB_IQuantizeexiti2ii_604 = 10'd604;
parameter [9:0] LEGUP_F_main_BB__816_605 = 10'd605;
parameter [9:0] LEGUP_F_main_BB__816_606 = 10'd606;
parameter [9:0] LEGUP_F_main_BB__816_607 = 10'd607;
parameter [9:0] LEGUP_F_main_BB__816_608 = 10'd608;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti2iipreheader_609 = 10'd609;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_610 = 10'd610;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_611 = 10'd611;
parameter [9:0] LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_612 = 10'd612;
parameter [9:0] LEGUP_F_main_BB__824_613 = 10'd613;
parameter [9:0] LEGUP_F_main_BB__826_614 = 10'd614;
parameter [9:0] LEGUP_F_main_BB__826_615 = 10'd615;
parameter [9:0] LEGUP_F_main_BB__827_616 = 10'd616;
parameter [9:0] LEGUP_F_main_BB__827_617 = 10'd617;
parameter [9:0] LEGUP_F_main_BB__828_618 = 10'd618;
parameter [9:0] LEGUP_F_main_BB_decode_blockexit2iipreheader_619 = 10'd619;
parameter [9:0] LEGUP_F_main_BB_decode_startexiti_620 = 10'd620;
parameter [9:0] LEGUP_F_main_BB_decode_startexiti_621 = 10'd621;
parameter [9:0] LEGUP_F_main_BB_decode_startexiti_622 = 10'd622;
parameter [9:0] LEGUP_F_main_BB__833_623 = 10'd623;
parameter [9:0] LEGUP_F_main_BB__833_624 = 10'd624;
parameter [9:0] LEGUP_F_main_BB__833_625 = 10'd625;
parameter [9:0] LEGUP_F_main_BB__833_626 = 10'd626;
parameter [9:0] LEGUP_F_main_BB__836_627 = 10'd627;
parameter [9:0] LEGUP_F_main_BB_preheader16ipreheader_628 = 10'd628;
parameter [9:0] LEGUP_F_main_BB__838_629 = 10'd629;
parameter [9:0] LEGUP_F_main_BB__838_630 = 10'd630;
parameter [9:0] LEGUP_F_main_BB__838_631 = 10'd631;
parameter [9:0] LEGUP_F_main_BB__838_632 = 10'd632;
parameter [9:0] LEGUP_F_main_BB__841_633 = 10'd633;
parameter [9:0] LEGUP_F_main_BB__841_634 = 10'd634;
parameter [9:0] LEGUP_F_main_BB__841_635 = 10'd635;
parameter [9:0] LEGUP_F_main_BB__844_636 = 10'd636;
parameter [9:0] LEGUP_F_main_BB__844_637 = 10'd637;
parameter [9:0] LEGUP_F_main_BB_preheader16i_638 = 10'd638;
parameter [9:0] LEGUP_F_main_BB_preheader16i_639 = 10'd639;
parameter [9:0] LEGUP_F_main_BB_preheader16i_640 = 10'd640;
parameter [9:0] LEGUP_F_main_BB__849_641 = 10'd641;
parameter [9:0] LEGUP_F_main_BB__849_642 = 10'd642;
parameter [9:0] LEGUP_F_main_BB__849_643 = 10'd643;
parameter [9:0] LEGUP_F_main_BB__849_644 = 10'd644;
parameter [9:0] LEGUP_F_main_BB__852_645 = 10'd645;
parameter [9:0] LEGUP_F_main_BB_preheader27ipreheader_646 = 10'd646;
parameter [9:0] LEGUP_F_main_BB_preheader27i_647 = 10'd647;
parameter [9:0] LEGUP_F_main_BB_preheader27i_648 = 10'd648;
parameter [9:0] LEGUP_F_main_BB_preheader27i_649 = 10'd649;
parameter [9:0] LEGUP_F_main_BB__857_650 = 10'd650;
parameter [9:0] LEGUP_F_main_BB__857_651 = 10'd651;
parameter [9:0] LEGUP_F_main_BB__857_652 = 10'd652;
parameter [9:0] LEGUP_F_main_BB__857_653 = 10'd653;
parameter [9:0] LEGUP_F_main_BB__860_654 = 10'd654;
parameter [9:0] LEGUP_F_main_BB__862_655 = 10'd655;
parameter [9:0] LEGUP_F_main_BB_jpeg2bmp_mainexit_656 = 10'd656;
parameter [9:0] LEGUP_F_main_BB_jpeg2bmp_mainexit_657 = 10'd657;
parameter [9:0] LEGUP_F_main_BB_jpeg2bmp_mainexit_658 = 10'd658;
parameter [9:0] LEGUP_F_main_BB__868_659 = 10'd659;
parameter [9:0] LEGUP_F_main_BB__870_660 = 10'd660;
parameter [9:0] LEGUP_F_main_BB__872_661 = 10'd661;
parameter [9:0] LEGUP_F_main_BB__872_662 = 10'd662;
parameter [9:0] LEGUP_F_main_BB__872_663 = 10'd663;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [9:0] LEGUP_function_call_348 = 10'd348;
parameter [9:0] LEGUP_function_call_351 = 10'd351;
parameter [9:0] LEGUP_function_call_354 = 10'd354;
parameter [9:0] LEGUP_function_call_357 = 10'd357;
parameter [9:0] LEGUP_function_call_368 = 10'd368;
parameter [9:0] LEGUP_function_call_382 = 10'd382;
parameter [9:0] LEGUP_function_call_399 = 10'd399;
parameter [9:0] LEGUP_function_call_442 = 10'd442;
parameter [9:0] LEGUP_function_call_456 = 10'd456;
parameter [9:0] LEGUP_function_call_474 = 10'd474;
parameter [9:0] LEGUP_function_call_488 = 10'd488;
parameter [9:0] LEGUP_function_call_505 = 10'd505;
parameter [9:0] LEGUP_function_call_519 = 10'd519;
parameter [9:0] LEGUP_function_call_537 = 10'd537;
parameter [9:0] LEGUP_function_call_539 = 10'd539;
parameter [9:0] LEGUP_function_call_541 = 10'd541;
parameter [9:0] LEGUP_function_call_572 = 10'd572;
parameter [9:0] LEGUP_function_call_589 = 10'd589;
parameter [9:0] LEGUP_function_call_603 = 10'd603;
integer i;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [9:0] cur_state;
reg [9:0] next_state;
reg [31:0] main_1_i04i;
reg [31:0] main_1_i04i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep210;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep210_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_c03i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_c03i_reg;
reg [7:0] main_1_2;
reg [7:0] main_1_2_reg;
reg [31:0] main_1_3;
reg [31:0] main_1_3_reg;
reg  main_1_exitcond209;
reg  main_1_exitcond209_reg;
reg [7:0] main_preheaderi_4;
reg [7:0] main_preheaderi_4_reg;
reg [7:0] main_preheaderi_5;
reg [7:0] main_preheaderi_5_reg;
reg  main_preheaderi_6;
reg  main_preheaderi_6_reg;
reg  main_preheaderi_7;
reg  main_preheaderi_7_reg;
reg  main_preheaderi_orcondiusii;
reg  main_preheaderi_orcondiusii_reg;
reg [31:0] main_loopexitipreheaderiipreheader_9;
reg [31:0] main_loopexitipreheaderiipreheader_9_reg;
reg [31:0] main_loopexitipreheaderiipreheader_10;
reg [31:0] main_loopexitipreheaderiipreheader_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitipreheaderiiouter24_ReadBuf0ph25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitipreheaderiiouter24_ReadBuf0ph25_reg;
reg [31:0] main_loopexitipreheaderiiouter24_i_get_dqt0ph26;
reg [31:0] main_loopexitipreheaderiiouter24_i_get_dqt0ph26_reg;
reg [31:0] main_loopexitipreheaderiiouter24_i_get_dht0ph27;
reg [31:0] main_loopexitipreheaderiiouter24_i_get_dht0ph27_reg;
reg [31:0] main_loopexitipreheaderiiouter24_i_marker0ph28;
reg [31:0] main_loopexitipreheaderiiouter24_i_marker0ph28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitipreheaderiiouter24_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitipreheaderiiouter24_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitipreheaderiiouter29_ReadBuf0ph30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitipreheaderiiouter29_ReadBuf0ph30_reg;
reg [31:0] main_loopexitipreheaderiiouter29_i_get_dht0ph31;
reg [31:0] main_loopexitipreheaderiiouter29_i_get_dht0ph31_reg;
reg [31:0] main_loopexitipreheaderiiouter29_i_marker0ph32;
reg [31:0] main_loopexitipreheaderiiouter29_i_marker0ph32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitipreheaderiiouter29_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitipreheaderiiouter29_12_reg;
reg [31:0] main_loopexitipreheaderiiouter29_13;
reg [31:0] main_loopexitipreheaderiiouter29_13_reg;
reg [31:0] main_loopexitipreheaderii_indvar176;
reg [31:0] main_loopexitipreheaderii_indvar176_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitipreheaderii_ReadBuf0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitipreheaderii_ReadBuf0_reg;
reg [31:0] main_loopexitipreheaderii_14;
reg [31:0] main_loopexitipreheaderii_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitipreheaderii_scevgep178;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitipreheaderii_scevgep178_reg;
reg [31:0] main_loopexitipreheaderii_15;
reg [31:0] main_loopexitipreheaderii_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitiii_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitiii_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitiii_storemerge2iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitiii_storemerge2iii_reg;
reg [7:0] main_loopexitiii_sink3iii;
reg [7:0] main_loopexitiii_sink3iii_reg;
reg  main_loopexitiii_18;
reg  main_loopexitiii_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiii_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiii_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiii_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiii_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiii_storemergeiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiii_storemergeiii_reg;
reg [7:0] main_lrphiii_sinkiii;
reg [7:0] main_lrphiii_sinkiii_reg;
reg  main_lrphiii_21;
reg  main_lrphiii_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderiiipreheader_ph;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderiiipreheader_ph_reg;
reg [31:0] main_preheaderiii_indvar172;
reg [31:0] main_preheaderiii_indvar172_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderiii_scevgep174;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderiii_scevgep174_reg;
reg [31:0] main_preheaderiii_22;
reg [31:0] main_preheaderiii_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderiii_scevgep175;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderiii_scevgep175_reg;
reg [7:0] main_preheaderiii_23;
reg [7:0] main_preheaderiii_23_reg;
reg [31:0] main_preheaderiii_24;
reg [31:0] main_preheaderiii_24_reg;
reg [31:0] main_preheaderiii_indvarnext173;
reg [31:0] main_preheaderiii_indvarnext173_reg;
reg [31:0] main_next_markerexitii_26;
reg [31:0] main_next_markerexitii_26_reg;
reg  main_next_markerexitii_27;
reg  main_next_markerexitii_27_reg;
reg [31:0] main_28_29;
reg [31:0] main_28_29_reg;
reg [31:0] main_28_30;
reg [31:0] main_28_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitipreheaderiibackedge_ReadBuf0be;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitipreheaderiibackedge_ReadBuf0be_reg;
reg [31:0] main_loopexitipreheaderiibackedge_indvarnext177;
reg [31:0] main_loopexitipreheaderiibackedge_indvarnext177_reg;
reg [31:0] main_32_scevgep174sum10;
reg [31:0] main_32_scevgep174sum10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_33_reg;
reg [7:0] main_32_34;
reg [7:0] main_32_34_reg;
reg [15:0] main_32_35;
reg [15:0] main_32_35_reg;
reg [15:0] main_32_36;
reg [15:0] main_32_36_reg;
reg [31:0] main_32_scevgep174sum11;
reg [31:0] main_32_scevgep174sum11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_37_reg;
reg [7:0] main_32_38;
reg [7:0] main_32_38_reg;
reg [15:0] main_32_39;
reg [15:0] main_32_39_reg;
reg [15:0] main_32_40;
reg [15:0] main_32_40_reg;
reg [31:0] main_32_41;
reg [31:0] main_32_41_reg;
reg [31:0] main_32_scevgep174sum12;
reg [31:0] main_32_scevgep174sum12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_42_reg;
reg [7:0] main_32_43;
reg [7:0] main_32_43_reg;
reg [31:0] main_32_scevgep174sum13;
reg [31:0] main_32_scevgep174sum13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_44_reg;
reg [7:0] main_32_45;
reg [7:0] main_32_45_reg;
reg [15:0] main_32_46;
reg [15:0] main_32_46_reg;
reg [15:0] main_32_47;
reg [15:0] main_32_47_reg;
reg [31:0] main_32_scevgep174sum14;
reg [31:0] main_32_scevgep174sum14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_48_reg;
reg [7:0] main_32_49;
reg [7:0] main_32_49_reg;
reg [15:0] main_32_50;
reg [15:0] main_32_50_reg;
reg [15:0] main_32_51;
reg [15:0] main_32_51_reg;
reg [31:0] main_32_scevgep174sum15;
reg [31:0] main_32_scevgep174sum15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_52_reg;
reg [7:0] main_32_53;
reg [7:0] main_32_53_reg;
reg [15:0] main_32_54;
reg [15:0] main_32_54_reg;
reg [15:0] main_32_55;
reg [15:0] main_32_55_reg;
reg [31:0] main_32_scevgep174sum16;
reg [31:0] main_32_scevgep174sum16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_56_reg;
reg [7:0] main_32_57;
reg [7:0] main_32_57_reg;
reg [15:0] main_32_58;
reg [15:0] main_32_58_reg;
reg [15:0] main_32_59;
reg [15:0] main_32_59_reg;
reg [31:0] main_32_scevgep174sum17;
reg [31:0] main_32_scevgep174sum17_reg;
reg [7:0] main_32_60;
reg [7:0] main_32_60_reg;
reg [31:0] main_32_62;
reg [31:0] main_32_62_reg;
reg [15:0] main_32_64;
reg [15:0] main_32_64_reg;
reg [31:0] main_32_65;
reg [31:0] main_32_65_reg;
reg [15:0] main_32_67;
reg [15:0] main_32_67_reg;
reg [31:0] main_32_68;
reg [31:0] main_32_68_reg;
reg [31:0] main_32_70;
reg [31:0] main_32_70_reg;
reg  main_32_72;
reg  main_32_72_reg;
reg [31:0] main_73_74;
reg [31:0] main_73_74_reg;
reg [31:0] main_73_75;
reg [31:0] main_73_75_reg;
reg  main_76_77;
reg  main_76_77_reg;
reg [31:0] main_78_79;
reg [31:0] main_78_79_reg;
reg [31:0] main_78_80;
reg [31:0] main_78_80_reg;
reg [15:0] main_81_82;
reg [15:0] main_81_82_reg;
reg  main_81_83;
reg  main_81_83_reg;
reg [31:0] main_84_85;
reg [31:0] main_84_85_reg;
reg [31:0] main_84_86;
reg [31:0] main_84_86_reg;
reg [15:0] main_87_88;
reg [15:0] main_87_88_reg;
reg  main_87_89;
reg  main_87_89_reg;
reg [31:0] main_90_91;
reg [31:0] main_90_91_reg;
reg [31:0] main_90_92;
reg [31:0] main_90_92_reg;
reg  main_93_94;
reg  main_93_94_reg;
reg [31:0] main_preheaderi1iithread_95;
reg [31:0] main_preheaderi1iithread_95_reg;
reg [31:0] main_preheaderi1iithread_96;
reg [31:0] main_preheaderi1iithread_96_reg;
reg  main_preheaderi1ii_97;
reg  main_preheaderi1ii_97_reg;
reg [31:0] main_lrphi2iipreheader_98;
reg [31:0] main_lrphi2iipreheader_98_reg;
reg [31:0] main_lrphi2ii_ci02iii;
reg [31:0] main_lrphi2ii_ci02iii_reg;
reg [7:0] main_lrphi2ii_99;
reg [7:0] main_lrphi2ii_99_reg;
reg [31:0] main_lrphi2ii_100;
reg [31:0] main_lrphi2ii_100_reg;
reg [31:0] main_lrphi2ii_101;
reg [31:0] main_lrphi2ii_101_reg;
reg [31:0] main_lrphi2ii_scevgep174sum18;
reg [31:0] main_lrphi2ii_scevgep174sum18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep197;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep197_reg;
reg [31:0] main_lrphi2ii_102;
reg [31:0] main_lrphi2ii_102_reg;
reg [31:0] main_lrphi2ii_scevgep174sum19;
reg [31:0] main_lrphi2ii_scevgep174sum19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_ReadBuf1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_ReadBuf1_reg;
reg [31:0] main_lrphi2ii_103;
reg [31:0] main_lrphi2ii_103_reg;
reg [31:0] main_lrphi2ii_scevgep174sum20;
reg [31:0] main_lrphi2ii_scevgep174sum20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep199;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep199_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep200;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep200_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep201;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep201_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep202;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep202_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep203;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep203_reg;
reg [31:0] main_lrphi2ii_sextiii;
reg [31:0] main_lrphi2ii_sextiii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep204;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep204_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep205;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep205_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep206;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep206_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep207;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep207_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep208;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi2ii_scevgep208_reg;
reg [7:0] main_lrphi2ii_104;
reg [7:0] main_lrphi2ii_104_reg;
reg [7:0] main_lrphi2ii_105;
reg [7:0] main_lrphi2ii_105_reg;
reg [7:0] main_lrphi2ii_106;
reg [7:0] main_lrphi2ii_106_reg;
reg [7:0] main_lrphi2ii_107;
reg [7:0] main_lrphi2ii_107_reg;
reg [7:0] main_lrphi2ii_108;
reg [7:0] main_lrphi2ii_108_reg;
reg [31:0] main_lrphi2ii_109;
reg [31:0] main_lrphi2ii_109_reg;
reg [7:0] main_lrphi2ii_111;
reg [7:0] main_lrphi2ii_111_reg;
reg [31:0] main_lrphi2ii_112;
reg [31:0] main_lrphi2ii_112_reg;
reg [7:0] main_lrphi2ii_114;
reg [7:0] main_lrphi2ii_114_reg;
reg [31:0] main_lrphi2ii_115;
reg [31:0] main_lrphi2ii_115_reg;
reg [7:0] main_lrphi2ii_117;
reg [7:0] main_lrphi2ii_117_reg;
reg [31:0] main_lrphi2ii_118;
reg [31:0] main_lrphi2ii_118_reg;
reg [7:0] main_lrphi2ii_120;
reg [7:0] main_lrphi2ii_120_reg;
reg [31:0] main_lrphi2ii_121;
reg [31:0] main_lrphi2ii_121_reg;
reg [7:0] main_lrphi2ii_123;
reg [7:0] main_lrphi2ii_123_reg;
reg [31:0] main_lrphi2ii_124;
reg [31:0] main_lrphi2ii_124_reg;
reg [31:0] main_lrphi2ii_125;
reg [31:0] main_lrphi2ii_125_reg;
reg  main_lrphi2ii_126;
reg  main_lrphi2ii_126_reg;
reg [31:0] main_127_128;
reg [31:0] main_127_128_reg;
reg [31:0] main_127_129;
reg [31:0] main_127_129_reg;
reg [7:0] main_130_131;
reg [7:0] main_130_131_reg;
reg [31:0] main_130_132;
reg [31:0] main_130_132_reg;
reg [31:0] main_130_133;
reg [31:0] main_130_133_reg;
reg  main_130_134;
reg  main_130_134_reg;
reg [31:0] main_135_136;
reg [31:0] main_135_136_reg;
reg [31:0] main_135_137;
reg [31:0] main_135_137_reg;
reg [7:0] main_138_139;
reg [7:0] main_138_139_reg;
reg [31:0] main_138_140;
reg [31:0] main_138_140_reg;
reg [31:0] main_138_141;
reg [31:0] main_138_141_reg;
reg  main_138_142;
reg  main_138_142_reg;
reg [31:0] main_143_144;
reg [31:0] main_143_144_reg;
reg [31:0] main_143_145;
reg [31:0] main_143_145_reg;
reg [7:0] main_146_147;
reg [7:0] main_146_147_reg;
reg [31:0] main_146_148;
reg [31:0] main_146_148_reg;
reg  main_146_149;
reg  main_146_149_reg;
reg [31:0] main_150_151;
reg [31:0] main_150_151_reg;
reg [31:0] main_150_152;
reg [31:0] main_150_152_reg;
reg [7:0] main_153_154;
reg [7:0] main_153_154_reg;
reg [31:0] main_153_155;
reg [31:0] main_153_155_reg;
reg [31:0] main_153_156;
reg [31:0] main_153_156_reg;
reg  main_153_157;
reg  main_153_157_reg;
reg [31:0] main_158_159;
reg [31:0] main_158_159_reg;
reg [31:0] main_158_160;
reg [31:0] main_158_160_reg;
reg [31:0] main_161_162;
reg [31:0] main_161_162_reg;
reg  main_161_exitcond196;
reg  main_161_exitcond196_reg;
reg [31:0] main__crit_edgeiiiloopexit_163;
reg [31:0] main__crit_edgeiiiloopexit_163_reg;
reg [31:0] main__crit_edgeiiiloopexit_sum;
reg [31:0] main__crit_edgeiiiloopexit_sum_reg;
reg [31:0] main__crit_edgeiiiloopexit_scevgep174sum21;
reg [31:0] main__crit_edgeiiiloopexit_scevgep174sum21_reg;
reg [31:0] main__crit_edgeiii_scevgep174sum17pn;
reg [31:0] main__crit_edgeiii_scevgep174sum17pn_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgeiii_ReadBuf2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgeiii_ReadBuf2_reg;
reg [7:0] main__crit_edgeiii_164;
reg [7:0] main__crit_edgeiii_164_reg;
reg  main__crit_edgeiii_165;
reg  main__crit_edgeiii_165_reg;
reg [31:0] main_loopexitipreheaderiiouterbackedge_p_jinfo_smp_fact0phbe;
reg [31:0] main_loopexitipreheaderiiouterbackedge_p_jinfo_smp_fact0phbe_reg;
reg [31:0] main_loopexitipreheaderiiouter_p_jinfo_smp_fact0ph;
reg [31:0] main_loopexitipreheaderiiouter_p_jinfo_smp_fact0ph_reg;
reg [7:0] main_loopexitipreheaderiiouter_p_jinfo_num_components0ph;
reg [7:0] main_loopexitipreheaderiiouter_p_jinfo_num_components0ph_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitipreheaderiiouter_ReadBuf0ph;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitipreheaderiiouter_ReadBuf0ph_reg;
reg [31:0] main_loopexitipreheaderiiouter_i_get_dqt0ph;
reg [31:0] main_loopexitipreheaderiiouter_i_get_dqt0ph_reg;
reg [31:0] main_loopexitipreheaderiiouter_i_get_dht0ph;
reg [31:0] main_loopexitipreheaderiiouter_i_get_dht0ph_reg;
reg [31:0] main_loopexitipreheaderiiouter_i_marker0ph;
reg [31:0] main_loopexitipreheaderiiouter_i_marker0ph_reg;
reg [31:0] main_uslcssa4ii_scevgep174sum4;
reg [31:0] main_uslcssa4ii_scevgep174sum4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_uslcssa4ii_170;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_uslcssa4ii_170_reg;
reg [7:0] main_uslcssa4ii_171;
reg [7:0] main_uslcssa4ii_171_reg;
reg [15:0] main_uslcssa4ii_172;
reg [15:0] main_uslcssa4ii_172_reg;
reg [15:0] main_uslcssa4ii_173;
reg [15:0] main_uslcssa4ii_173_reg;
reg [31:0] main_uslcssa4ii_scevgep174sum5;
reg [31:0] main_uslcssa4ii_scevgep174sum5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_uslcssa4ii_174;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_uslcssa4ii_174_reg;
reg [7:0] main_uslcssa4ii_175;
reg [7:0] main_uslcssa4ii_175_reg;
reg [15:0] main_uslcssa4ii_176;
reg [15:0] main_uslcssa4ii_176_reg;
reg [15:0] main_uslcssa4ii_177;
reg [15:0] main_uslcssa4ii_177_reg;
reg [31:0] main_uslcssa4ii_178;
reg [31:0] main_uslcssa4ii_178_reg;
reg [31:0] main_uslcssa4ii_scevgep174sum6;
reg [31:0] main_uslcssa4ii_scevgep174sum6_reg;
reg [7:0] main_uslcssa4ii_179;
reg [7:0] main_uslcssa4ii_179_reg;
reg [31:0] main_uslcssa4ii_180;
reg [31:0] main_uslcssa4ii_180_reg;
reg  main_uslcssa4ii_183;
reg  main_uslcssa4ii_183_reg;
reg [31:0] main_184_185;
reg [31:0] main_184_185_reg;
reg [31:0] main_184_186;
reg [31:0] main_184_186_reg;
reg [31:0] main_preheader2iiithread_188;
reg [31:0] main_preheader2iiithread_188_reg;
reg [31:0] main_preheader2iiithread_189;
reg [31:0] main_preheader2iiithread_189_reg;
reg  main_lrph10iiipreheader_190;
reg  main_lrph10iiipreheader_190_reg;
reg [31:0] main_lrph10iiipreheader_191;
reg [31:0] main_lrph10iiipreheader_191_reg;
reg [31:0] main_lrph10iii_i_get_sos0;
reg [31:0] main_lrph10iii_i_get_sos0_reg;
reg [31:0] main_lrph10iii_192;
reg [31:0] main_lrph10iii_192_reg;
reg [31:0] main_lrph10iii_193;
reg [31:0] main_lrph10iii_193_reg;
reg [31:0] main_lrph10iii_scevgep174sum7;
reg [31:0] main_lrph10iii_scevgep174sum7_reg;
reg [31:0] main_lrph10iii_194;
reg [31:0] main_lrph10iii_194_reg;
reg [31:0] main_lrph10iii_scevgep174sum8;
reg [31:0] main_lrph10iii_scevgep174sum8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10iii_ReadBuf3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10iii_ReadBuf3_reg;
reg [31:0] main_lrph10iii_195;
reg [31:0] main_lrph10iii_195_reg;
reg [31:0] main_lrph10iii_scevgep174sum9;
reg [31:0] main_lrph10iii_scevgep174sum9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10iii_scevgep169;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10iii_scevgep169_reg;
reg [31:0] main_lrph10iii_196;
reg [31:0] main_lrph10iii_196_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10iii_scevgep170;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10iii_scevgep170_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10iii_scevgep171;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph10iii_scevgep171_reg;
reg [7:0] main_lrph10iii_197;
reg [7:0] main_lrph10iii_197_reg;
reg [31:0] main_lrph10iii_198;
reg [31:0] main_lrph10iii_198_reg;
reg [7:0] main_lrph10iii_199;
reg [7:0] main_lrph10iii_199_reg;
reg [31:0] main_200_201;
reg [31:0] main_200_201_reg;
reg [31:0] main_200_202;
reg [31:0] main_200_202_reg;
reg  main_200_203;
reg  main_200_203_reg;
reg [31:0] main_lrphi4ii_204;
reg [31:0] main_lrphi4ii_204_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi4ii_scevgep166;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi4ii_scevgep166_reg;
reg [7:0] main_lrphi4ii_205;
reg [7:0] main_lrphi4ii_205_reg;
reg [31:0] main_lrphi4ii_206;
reg [31:0] main_lrphi4ii_206_reg;
reg  main_lrphi4ii_207;
reg  main_lrphi4ii_207_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_209_210;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_209_210_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_209_211;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_209_211_reg;
reg [31:0] main_209_212;
reg [31:0] main_209_212_reg;
reg [31:0] main_209_213;
reg [31:0] main_209_213_reg;
reg [7:0] main_209_214;
reg [7:0] main_209_214_reg;
reg [7:0] main_209_215;
reg [7:0] main_209_215_reg;
reg [7:0] main_209_217;
reg [7:0] main_209_217_reg;
reg [31:0] main_209_218;
reg [31:0] main_209_218_reg;
reg [7:0] main_209_220;
reg [7:0] main_209_220_reg;
reg [31:0] main_209_221;
reg [31:0] main_209_221_reg;
reg [31:0] main_209_223;
reg [31:0] main_209_223_reg;
reg  main_209_224;
reg  main_209_224_reg;
reg [31:0] main_225_226;
reg [31:0] main_225_226_reg;
reg [31:0] main_225_227;
reg [31:0] main_225_227_reg;
reg [7:0] main_228_229;
reg [7:0] main_228_229_reg;
reg [31:0] main_228_230;
reg [31:0] main_228_230_reg;
reg [31:0] main_228_231;
reg [31:0] main_228_231_reg;
reg  main_228_232;
reg  main_228_232_reg;
reg [31:0] main_233_234;
reg [31:0] main_233_234_reg;
reg [31:0] main_233_235;
reg [31:0] main_233_235_reg;
reg [7:0] main_236_237;
reg [7:0] main_236_237_reg;
reg [31:0] main_236_238;
reg [31:0] main_236_238_reg;
reg  main_236_239;
reg  main_236_239_reg;
reg [31:0] main_240_241;
reg [31:0] main_240_241_reg;
reg [31:0] main_240_242;
reg [31:0] main_240_242_reg;
reg [31:0] main_243_244;
reg [31:0] main_243_244_reg;
reg  main_243_245;
reg  main_243_245_reg;
reg [31:0] main_get_sosexitii_scevgep174sum6pn;
reg [31:0] main_get_sosexitii_scevgep174sum6pn_reg;
reg [31:0] main_get_sosexitii_ReadBuf4sum;
reg [31:0] main_get_sosexitii_ReadBuf4sum_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_get_sosexitii_scevgepiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_get_sosexitii_scevgepiii_reg;
reg [31:0] main_246_scevgep174sum2;
reg [31:0] main_246_scevgep174sum2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_246_247;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_246_247_reg;
reg [7:0] main_246_248;
reg [7:0] main_246_248_reg;
reg [15:0] main_246_249;
reg [15:0] main_246_249_reg;
reg [15:0] main_246_250;
reg [15:0] main_246_250_reg;
reg [31:0] main_246_scevgep174sum3;
reg [31:0] main_246_scevgep174sum3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_246_251;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_246_251_reg;
reg [7:0] main_246_252;
reg [7:0] main_246_252_reg;
reg [15:0] main_246_253;
reg [15:0] main_246_253_reg;
reg [15:0] main_246_254;
reg [15:0] main_246_254_reg;
reg [31:0] main_246_255;
reg [31:0] main_246_255_reg;
reg [31:0] main_246_256;
reg [31:0] main_246_256_reg;
reg [31:0] main_246_258;
reg [31:0] main_246_258_reg;
reg  main_246_259;
reg  main_246_259_reg;
reg [31:0] main_260_261;
reg [31:0] main_260_261_reg;
reg [31:0] main_260_262;
reg [31:0] main_260_262_reg;
reg  main_preheaderi7ii_263;
reg  main_preheaderi7ii_263_reg;
reg [31:0] main_lrph5iiipreheader_264;
reg [31:0] main_lrph5iiipreheader_264_reg;
reg [31:0] main_lrph5iii_indvar182;
reg [31:0] main_lrph5iii_indvar182_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph5iii_ReadBuf5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph5iii_ReadBuf5_reg;
reg [31:0] main_lrph5iii_length04iii;
reg [31:0] main_lrph5iii_length04iii_reg;
reg [31:0] main_lrph5iii_265;
reg [31:0] main_lrph5iii_265_reg;
reg [31:0] main_lrph5iii_266;
reg [31:0] main_lrph5iii_266_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph5iii_scevgep184;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph5iii_scevgep184_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph5iii_scevgep185;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph5iii_scevgep185_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph5iii_267;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph5iii_267_reg;
reg [7:0] main_lrph5iii_268;
reg [7:0] main_lrph5iii_268_reg;
reg [31:0] main_lrph5iii_269;
reg [31:0] main_lrph5iii_269_reg;
reg [31:0] main_lrph5iii_271;
reg [31:0] main_lrph5iii_271_reg;
reg  main_lrph5iii_272;
reg  main_lrph5iii_272_reg;
reg [31:0] main_273_274;
reg [31:0] main_273_274_reg;
reg [31:0] main_273_275;
reg [31:0] main_273_275_reg;
reg [31:0] main_276_277;
reg [31:0] main_276_277_reg;
reg  main_276_278;
reg  main_276_278_reg;
reg [31:0] main_279_280;
reg [31:0] main_279_280_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_279_281;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_279_281_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_279_282;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_279_282_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_283_284;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_283_284_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_283_285;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_283_285_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_p_xhtbl_bits0iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_p_xhtbl_bits0iii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_p_xhtbl_huffval0iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_p_xhtbl_huffval0iii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_287;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_287_reg;
reg [7:0] main_286_288;
reg [7:0] main_286_288_reg;
reg [31:0] main_286_289;
reg [31:0] main_286_289_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_290;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_290_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_291;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_291_reg;
reg [7:0] main_286_292;
reg [7:0] main_286_292_reg;
reg [31:0] main_286_293;
reg [31:0] main_286_293_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_294;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_294_reg;
reg [31:0] main_286_295;
reg [31:0] main_286_295_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_296;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_296_reg;
reg [7:0] main_286_297;
reg [7:0] main_286_297_reg;
reg [31:0] main_286_298;
reg [31:0] main_286_298_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_299;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_299_reg;
reg [31:0] main_286_300;
reg [31:0] main_286_300_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_301;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_301_reg;
reg [7:0] main_286_302;
reg [7:0] main_286_302_reg;
reg [31:0] main_286_303;
reg [31:0] main_286_303_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_304;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_304_reg;
reg [31:0] main_286_305;
reg [31:0] main_286_305_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_306;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_306_reg;
reg [7:0] main_286_307;
reg [7:0] main_286_307_reg;
reg [31:0] main_286_308;
reg [31:0] main_286_308_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_309;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_309_reg;
reg [31:0] main_286_310;
reg [31:0] main_286_310_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_311;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_311_reg;
reg [7:0] main_286_312;
reg [7:0] main_286_312_reg;
reg [31:0] main_286_313;
reg [31:0] main_286_313_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_314;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_314_reg;
reg [31:0] main_286_315;
reg [31:0] main_286_315_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_316;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_316_reg;
reg [7:0] main_286_317;
reg [7:0] main_286_317_reg;
reg [31:0] main_286_318;
reg [31:0] main_286_318_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_319;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_319_reg;
reg [31:0] main_286_320;
reg [31:0] main_286_320_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_321;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_321_reg;
reg [7:0] main_286_322;
reg [7:0] main_286_322_reg;
reg [31:0] main_286_323;
reg [31:0] main_286_323_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_324;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_324_reg;
reg [31:0] main_286_325;
reg [31:0] main_286_325_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_326;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_326_reg;
reg [7:0] main_286_327;
reg [7:0] main_286_327_reg;
reg [31:0] main_286_328;
reg [31:0] main_286_328_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_329;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_329_reg;
reg [31:0] main_286_330;
reg [31:0] main_286_330_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_331;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_331_reg;
reg [7:0] main_286_332;
reg [7:0] main_286_332_reg;
reg [31:0] main_286_333;
reg [31:0] main_286_333_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_334;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_334_reg;
reg [31:0] main_286_335;
reg [31:0] main_286_335_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_336;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_336_reg;
reg [7:0] main_286_337;
reg [7:0] main_286_337_reg;
reg [31:0] main_286_338;
reg [31:0] main_286_338_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_339;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_339_reg;
reg [31:0] main_286_340;
reg [31:0] main_286_340_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_341;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_341_reg;
reg [7:0] main_286_342;
reg [7:0] main_286_342_reg;
reg [31:0] main_286_343;
reg [31:0] main_286_343_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_344;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_344_reg;
reg [31:0] main_286_345;
reg [31:0] main_286_345_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_346;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_346_reg;
reg [7:0] main_286_347;
reg [7:0] main_286_347_reg;
reg [31:0] main_286_348;
reg [31:0] main_286_348_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_349;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_349_reg;
reg [31:0] main_286_350;
reg [31:0] main_286_350_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_351;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_351_reg;
reg [7:0] main_286_352;
reg [7:0] main_286_352_reg;
reg [31:0] main_286_353;
reg [31:0] main_286_353_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_354;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_354_reg;
reg [31:0] main_286_355;
reg [31:0] main_286_355_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_356;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_356_reg;
reg [7:0] main_286_357;
reg [7:0] main_286_357_reg;
reg [31:0] main_286_358;
reg [31:0] main_286_358_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_359;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_359_reg;
reg [31:0] main_286_360;
reg [31:0] main_286_360_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_361;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_361_reg;
reg [7:0] main_286_362;
reg [7:0] main_286_362_reg;
reg [31:0] main_286_363;
reg [31:0] main_286_363_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_364;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_364_reg;
reg [31:0] main_286_365;
reg [31:0] main_286_365_reg;
reg [31:0] main_286_367;
reg [31:0] main_286_367_reg;
reg  main_286_368;
reg  main_286_368_reg;
reg [31:0] main_369_370;
reg [31:0] main_369_370_reg;
reg [31:0] main_369_371;
reg [31:0] main_369_371_reg;
reg [31:0] main_372_373;
reg [31:0] main_372_373_reg;
reg  main_372_374;
reg  main_372_374_reg;
reg [31:0] main_lrphi8ii_375;
reg [31:0] main_lrphi8ii_375_reg;
reg [31:0] main_lrphi8ii_376;
reg [31:0] main_lrphi8ii_376_reg;
reg [31:0] main_lrphi8ii_377;
reg [31:0] main_lrphi8ii_377_reg;
reg [31:0] main_lrphi8ii_378;
reg [31:0] main_lrphi8ii_378_reg;
reg [31:0] main_lrphi8ii_379;
reg [31:0] main_lrphi8ii_379_reg;
reg [31:0] main_lrphi8ii_380;
reg [31:0] main_lrphi8ii_380_reg;
reg [31:0] main_lrphi8ii_381;
reg [31:0] main_lrphi8ii_381_reg;
reg [31:0] main_lrphi8ii_382;
reg [31:0] main_lrphi8ii_382_reg;
reg [31:0] main_lrphi8ii_383;
reg [31:0] main_lrphi8ii_383_reg;
reg [31:0] main_lrphi8ii_384;
reg [31:0] main_lrphi8ii_384_reg;
reg [31:0] main_lrphi8ii_385;
reg [31:0] main_lrphi8ii_385_reg;
reg [31:0] main_lrphi8ii_386;
reg [31:0] main_lrphi8ii_386_reg;
reg [31:0] main_lrphi8ii_387;
reg [31:0] main_lrphi8ii_387_reg;
reg [31:0] main_lrphi8ii_388;
reg [31:0] main_lrphi8ii_388_reg;
reg [31:0] main_lrphi8ii_389;
reg [31:0] main_lrphi8ii_389_reg;
reg [31:0] main_lrphi8ii_390;
reg [31:0] main_lrphi8ii_390_reg;
reg [31:0] main_lrphi8ii_391;
reg [31:0] main_lrphi8ii_391_reg;
reg [31:0] main_lrphi8ii_392;
reg [31:0] main_lrphi8ii_392_reg;
reg [31:0] main_lrphi8ii_393;
reg [31:0] main_lrphi8ii_393_reg;
reg [31:0] main_lrphi8ii_394;
reg [31:0] main_lrphi8ii_394_reg;
reg [31:0] main_lrphi8ii_395;
reg [31:0] main_lrphi8ii_395_reg;
reg [31:0] main_lrphi8ii_396;
reg [31:0] main_lrphi8ii_396_reg;
reg [31:0] main_lrphi8ii_397;
reg [31:0] main_lrphi8ii_397_reg;
reg [31:0] main_lrphi8ii_398;
reg [31:0] main_lrphi8ii_398_reg;
reg [31:0] main_lrphi8ii_399;
reg [31:0] main_lrphi8ii_399_reg;
reg [31:0] main_lrphi8ii_400;
reg [31:0] main_lrphi8ii_400_reg;
reg [31:0] main_lrphi8ii_401;
reg [31:0] main_lrphi8ii_401_reg;
reg [31:0] main_lrphi8ii_402;
reg [31:0] main_lrphi8ii_402_reg;
reg [31:0] main_lrphi8ii_403;
reg [31:0] main_lrphi8ii_403_reg;
reg [31:0] main_lrphi8ii_404;
reg [31:0] main_lrphi8ii_404_reg;
reg [31:0] main_lrphi8ii_405;
reg [31:0] main_lrphi8ii_405_reg;
reg [31:0] main_lrphi8ii_406;
reg [31:0] main_lrphi8ii_406_reg;
reg [31:0] main_lrphi8ii_407;
reg [31:0] main_lrphi8ii_407_reg;
reg [31:0] main_lrphi8ii_408;
reg [31:0] main_lrphi8ii_408_reg;
reg [31:0] main_lrphi8ii_409;
reg [31:0] main_lrphi8ii_409_reg;
reg [31:0] main_lrphi8ii_410;
reg [31:0] main_lrphi8ii_410_reg;
reg [31:0] main_lrphi8ii_411;
reg [31:0] main_lrphi8ii_411_reg;
reg [31:0] main_lrphi8ii_412;
reg [31:0] main_lrphi8ii_412_reg;
reg [31:0] main_lrphi8ii_413;
reg [31:0] main_lrphi8ii_413_reg;
reg [31:0] main_lrphi8ii_414;
reg [31:0] main_lrphi8ii_414_reg;
reg [31:0] main_lrphi8ii_415;
reg [31:0] main_lrphi8ii_415_reg;
reg [31:0] main_lrphi8ii_416;
reg [31:0] main_lrphi8ii_416_reg;
reg [31:0] main_lrphi8ii_417;
reg [31:0] main_lrphi8ii_417_reg;
reg [31:0] main_418_i13iii;
reg [31:0] main_418_i13iii_reg;
reg [31:0] main_418_419;
reg [31:0] main_418_419_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_418_scevgep180;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_418_scevgep180_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_418_scevgep181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_418_scevgep181_reg;
reg [7:0] main_418_420;
reg [7:0] main_418_420_reg;
reg [31:0] main_418_421;
reg [31:0] main_418_421_reg;
reg [31:0] main_418_422;
reg [31:0] main_418_422_reg;
reg  main_418_exitcond179;
reg  main_418_exitcond179_reg;
reg [31:0] main__crit_edgei10iiloopexit_423;
reg [31:0] main__crit_edgei10iiloopexit_423_reg;
reg [31:0] main__crit_edgei10iiloopexit_424;
reg [31:0] main__crit_edgei10iiloopexit_424_reg;
reg [31:0] main__crit_edgei10iiloopexit_425;
reg [31:0] main__crit_edgei10iiloopexit_425_reg;
reg [31:0] main__crit_edgei10iiloopexit_scevgepsum;
reg [31:0] main__crit_edgei10iiloopexit_scevgepsum_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei10iiloopexit_scevgep99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei10iiloopexit_scevgep99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei10ii_ReadBuf6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei10ii_ReadBuf6_reg;
reg [31:0] main__crit_edgei10ii_426;
reg [31:0] main__crit_edgei10ii_426_reg;
reg  main__crit_edgei10ii_427;
reg  main__crit_edgei10ii_427_reg;
reg [31:0] main__crit_edgei10ii_indvarnext183;
reg [31:0] main__crit_edgei10ii_indvarnext183_reg;
reg [31:0] main_428_scevgep174sum;
reg [31:0] main_428_scevgep174sum_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_428_429;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_428_429_reg;
reg [7:0] main_428_430;
reg [7:0] main_428_430_reg;
reg [15:0] main_428_431;
reg [15:0] main_428_431_reg;
reg [15:0] main_428_432;
reg [15:0] main_428_432_reg;
reg [31:0] main_428_scevgep174sum1;
reg [31:0] main_428_scevgep174sum1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_428_433;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_428_433_reg;
reg [7:0] main_428_434;
reg [7:0] main_428_434_reg;
reg [15:0] main_428_435;
reg [15:0] main_428_435_reg;
reg [15:0] main_428_436;
reg [15:0] main_428_436_reg;
reg [31:0] main_428_437;
reg [31:0] main_428_437_reg;
reg [31:0] main_428_438;
reg [31:0] main_428_438_reg;
reg [31:0] main_428_440;
reg [31:0] main_428_440_reg;
reg  main_428_441;
reg  main_428_441_reg;
reg [31:0] main_442_443;
reg [31:0] main_442_443_reg;
reg [31:0] main_442_444;
reg [31:0] main_442_444_reg;
reg  main_preheaderi11ii_445;
reg  main_preheaderi11ii_445_reg;
reg [31:0] main_lrphi13iiloopexit_446;
reg [31:0] main_lrphi13iiloopexit_446_reg;
reg [31:0] main_lrphi13ii_indvar192;
reg [31:0] main_lrphi13ii_indvar192_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi13ii_447;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi13ii_447_reg;
reg [31:0] main_lrphi13ii_length02iii;
reg [31:0] main_lrphi13ii_length02iii_reg;
reg [31:0] main_lrphi13ii_448;
reg [31:0] main_lrphi13ii_448_reg;
reg [31:0] main_lrphi13ii_449;
reg [31:0] main_lrphi13ii_449_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi13ii_scevgep194;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi13ii_scevgep194_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi13ii_scevgep195;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi13ii_scevgep195_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi13ii_450;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi13ii_450_reg;
reg [7:0] main_lrphi13ii_451;
reg [7:0] main_lrphi13ii_451_reg;
reg [31:0] main_lrphi13ii_452;
reg [31:0] main_lrphi13ii_452_reg;
reg [31:0] main_lrphi13ii_453;
reg [31:0] main_lrphi13ii_453_reg;
reg [31:0] main_lrphi13ii_454;
reg [31:0] main_lrphi13ii_454_reg;
reg [31:0] main_lrphi13ii_457;
reg [31:0] main_lrphi13ii_457_reg;
reg  main_lrphi13ii_458;
reg  main_lrphi13ii_458_reg;
reg [31:0] main_459_460;
reg [31:0] main_459_460_reg;
reg [31:0] main_459_461;
reg [31:0] main_459_461_reg;
reg [31:0] main_462_463;
reg [31:0] main_462_463_reg;
reg  main_462_464;
reg  main_462_464_reg;
reg [31:0] main_465_466;
reg [31:0] main_465_466_reg;
reg [31:0] main_465_467;
reg [31:0] main_465_467_reg;
reg  main_468_469;
reg  main_468_469_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_splitusiii_470;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_splitusiii_470_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_splitusiii_471;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_splitusiii_471_reg;
reg [31:0] main_splitusiii_i01usiii;
reg [31:0] main_splitusiii_i01usiii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_splitusiii_scevgep191;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_splitusiii_scevgep191_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_splitusiii_472;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_splitusiii_472_reg;
reg [7:0] main_splitusiii_473;
reg [7:0] main_splitusiii_473_reg;
reg [31:0] main_splitusiii_474;
reg [31:0] main_splitusiii_474_reg;
reg [31:0] main_splitusiii_475;
reg [31:0] main_splitusiii_475_reg;
reg [31:0] main_splitusiii_sumusiii;
reg [31:0] main_splitusiii_sumusiii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_splitusiii_476;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_splitusiii_476_reg;
reg [31:0] main_splitusiii_477;
reg [31:0] main_splitusiii_477_reg;
reg  main_splitusiii_exitcond190;
reg  main_splitusiii_exitcond190_reg;
reg [31:0] main_split_crit_edgeiii_i01iii;
reg [31:0] main_split_crit_edgeiii_i01iii_reg;
reg [31:0] main_split_crit_edgeiii_478;
reg [31:0] main_split_crit_edgeiii_478_reg;
reg [31:0] main_split_crit_edgeiii_479;
reg [31:0] main_split_crit_edgeiii_479_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_split_crit_edgeiii_scevgep187;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_split_crit_edgeiii_scevgep187_reg;
reg [31:0] main_split_crit_edgeiii_480;
reg [31:0] main_split_crit_edgeiii_480_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_split_crit_edgeiii_scevgep188;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_split_crit_edgeiii_scevgep188_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_split_crit_edgeiii_scevgep189;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_split_crit_edgeiii_scevgep189_reg;
reg [7:0] main_split_crit_edgeiii_481;
reg [7:0] main_split_crit_edgeiii_481_reg;
reg [31:0] main_split_crit_edgeiii_482;
reg [31:0] main_split_crit_edgeiii_482_reg;
reg [31:0] main_split_crit_edgeiii_483;
reg [31:0] main_split_crit_edgeiii_483_reg;
reg [7:0] main_split_crit_edgeiii_484;
reg [7:0] main_split_crit_edgeiii_484_reg;
reg [31:0] main_split_crit_edgeiii_485;
reg [31:0] main_split_crit_edgeiii_485_reg;
reg [31:0] main_split_crit_edgeiii_486;
reg [31:0] main_split_crit_edgeiii_486_reg;
reg [31:0] main_split_crit_edgeiii_487;
reg [31:0] main_split_crit_edgeiii_487_reg;
reg [31:0] main_split_crit_edgeiii_sumiii;
reg [31:0] main_split_crit_edgeiii_sumiii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_split_crit_edgeiii_488;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_split_crit_edgeiii_488_reg;
reg [31:0] main_split_crit_edgeiii_489;
reg [31:0] main_split_crit_edgeiii_489_reg;
reg  main_split_crit_edgeiii_exitcond186;
reg  main_split_crit_edgeiii_exitcond186_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_uslcssausiiiloopexit_scevgep101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_uslcssausiiiloopexit_scevgep101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_uslcssausiiiloopexit22_scevgep100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_uslcssausiiiloopexit22_scevgep100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_uslcssausiii_ReadBuf7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_uslcssausiii_ReadBuf7_reg;
reg [31:0] main_uslcssausiii_viii;
reg [31:0] main_uslcssausiii_viii_reg;
reg [31:0] main_uslcssausiii_iii;
reg [31:0] main_uslcssausiii_iii_reg;
reg  main_uslcssausiii_490;
reg  main_uslcssausiii_490_reg;
reg [31:0] main_uslcssausiii_indvarnext193;
reg [31:0] main_uslcssausiii_indvarnext193_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markersexiti_p_jinfo_jpeg_data0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markersexiti_p_jinfo_jpeg_data0_reg;
reg [15:0] main_read_markersexiti_491;
reg [15:0] main_read_markersexiti_491_reg;
reg [31:0] main_read_markersexiti_492;
reg [31:0] main_read_markersexiti_492_reg;
reg [31:0] main_read_markersexiti_493;
reg [31:0] main_read_markersexiti_493_reg;
reg [31:0] main_read_markersexiti_494;
reg [31:0] main_read_markersexiti_494_reg;
reg [31:0] main_read_markersexiti_495;
reg [31:0] main_read_markersexiti_495_reg;
reg [15:0] main_read_markersexiti_496;
reg [15:0] main_read_markersexiti_496_reg;
reg [31:0] main_read_markersexiti_497;
reg [31:0] main_read_markersexiti_497_reg;
reg [31:0] main_read_markersexiti_498;
reg [31:0] main_read_markersexiti_498_reg;
reg [31:0] main_read_markersexiti_499;
reg [31:0] main_read_markersexiti_499_reg;
reg [31:0] main_read_markersexiti_500;
reg [31:0] main_read_markersexiti_500_reg;
reg [31:0] main_read_markersexiti_501;
reg [31:0] main_read_markersexiti_501_reg;
reg [31:0] main_read_markersexiti_502;
reg [31:0] main_read_markersexiti_502_reg;
reg [31:0] main_read_markersexiti_503;
reg [31:0] main_read_markersexiti_503_reg;
reg [31:0] main_read_markersexiti_504;
reg [31:0] main_read_markersexiti_504_reg;
reg [31:0] main_read_markersexiti_505;
reg [31:0] main_read_markersexiti_505_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markersexiti_506;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markersexiti_506_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markersexiti_507;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markersexiti_507_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markersexiti_508;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markersexiti_508_reg;
reg  main_read_markersexiti_509;
reg  main_read_markersexiti_509_reg;
reg  main_510_512;
reg  main_510_512_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader46lrphii_513;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader46lrphii_513_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader46lrphii_514;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader46lrphii_514_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader46lrphii_515;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader46lrphii_515_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader46lrphii_516;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader46lrphii_516_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader46lrphii_517;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader46lrphii_517_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader46lrphii_518;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader46lrphii_518_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader46lrphii_519;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader46lrphii_519_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader46lrphii_520;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader46lrphii_520_reg;
reg [31:0] main_preheader46lrphii_521;
reg [31:0] main_preheader46lrphii_521_reg;
reg [31:0] main_preheader46lrphii_522;
reg [31:0] main_preheader46lrphii_522_reg;
reg [31:0] main_preheader46lrphii_523;
reg [31:0] main_preheader46lrphii_523_reg;
reg [31:0] main_preheader46ii_CurrentMCU054ii;
reg [31:0] main_preheader46ii_CurrentMCU054ii_reg;
reg [31:0] main_524_i02iiii;
reg [31:0] main_524_i02iiii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_524_scevgep20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_524_scevgep20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_524_01iiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_524_01iiii_reg;
reg [31:0] main_524_525;
reg [31:0] main_524_525_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_524_526;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_524_526_reg;
reg [31:0] main_524_527;
reg [31:0] main_524_527_reg;
reg [31:0] main_524_528;
reg [31:0] main_524_528_reg;
reg  main_524_exitcond19;
reg  main_524_exitcond19_reg;
reg [7:0] main_IZigzagMatrixexitiii_529;
reg [7:0] main_IZigzagMatrixexitiii_529_reg;
reg [31:0] main_IZigzagMatrixexitiii_530;
reg [31:0] main_IZigzagMatrixexitiii_530_reg;
reg [31:0] main_IZigzagMatrixexitiii_531;
reg [31:0] main_IZigzagMatrixexitiii_531_reg;
reg [31:0] main_532_indvar;
reg [31:0] main_532_indvar_reg;
reg [31:0] main_532_533;
reg [31:0] main_532_533_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_532_scevgep22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_532_scevgep22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_532_mptr02iiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_532_mptr02iiii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_532_01i2iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_532_01i2iii_reg;
reg [31:0] main_532_534;
reg [31:0] main_532_534_reg;
reg [31:0] main_532_535;
reg [31:0] main_532_535_reg;
reg [31:0] main_532_536;
reg [31:0] main_532_536_reg;
reg  main_532_537;
reg  main_532_537_reg;
reg [31:0] main_532_indvarnext;
reg [31:0] main_532_indvarnext_reg;
reg [31:0] main_538_indvar25;
reg [31:0] main_538_indvar25_reg;
reg [31:0] main_538_539;
reg [31:0] main_538_539_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_538_scevgep27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_538_scevgep27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_538_mptr01i1iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_538_mptr01i1iii_reg;
reg [31:0] main_538_540;
reg [31:0] main_538_540_reg;
reg [31:0] main_538_541;
reg [31:0] main_538_541_reg;
reg  main_538_542;
reg  main_538_542_reg;
reg [31:0] main_538_indvarnext26;
reg [31:0] main_538_indvarnext26_reg;
reg [31:0] main_PostshiftIDctMatrixexitiii_indvar29;
reg [31:0] main_PostshiftIDctMatrixexitiii_indvar29_reg;
reg [31:0] main_PostshiftIDctMatrixexitiii_543;
reg [31:0] main_PostshiftIDctMatrixexitiii_543_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexitiii_scevgep31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexitiii_scevgep31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexitiii_mptr01iiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexitiii_mptr01iiii_reg;
reg [31:0] main_PostshiftIDctMatrixexitiii_544;
reg [31:0] main_PostshiftIDctMatrixexitiii_544_reg;
reg  main_PostshiftIDctMatrixexitiii_545;
reg  main_PostshiftIDctMatrixexitiii_545_reg;
reg  main_547_548;
reg  main_547_548_reg;
reg  main_550_551;
reg  main_550_551_reg;
reg [31:0] main_550_indvarnext30;
reg [31:0] main_550_indvarnext30_reg;
reg [31:0] main_decode_blockexit2ii_i03iii;
reg [31:0] main_decode_blockexit2ii_i03iii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_decode_blockexit2ii_scevgep66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_decode_blockexit2ii_scevgep66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_decode_blockexit2ii_scevgep67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_decode_blockexit2ii_scevgep67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_decode_blockexit2ii_scevgep68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_decode_blockexit2ii_scevgep68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_decode_blockexit2ii_scevgep69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_decode_blockexit2ii_scevgep69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_decode_blockexit2ii_scevgep70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_decode_blockexit2ii_scevgep70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_decode_blockexit2ii_scevgep71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_decode_blockexit2ii_scevgep71_reg;
reg [31:0] main_decode_blockexit2ii_552;
reg [31:0] main_decode_blockexit2ii_552_reg;
reg [31:0] main_decode_blockexit2ii_553;
reg [31:0] main_decode_blockexit2ii_553_reg;
reg [31:0] main_decode_blockexit2ii_554;
reg [31:0] main_decode_blockexit2ii_554_reg;
reg [31:0] main_decode_blockexit2ii_555;
reg [31:0] main_decode_blockexit2ii_555_reg;
reg [31:0] main_decode_blockexit2ii_556;
reg [31:0] main_decode_blockexit2ii_556_reg;
reg [31:0] main_decode_blockexit2ii_557;
reg [31:0] main_decode_blockexit2ii_557_reg;
reg [31:0] main_decode_blockexit2ii_558;
reg [31:0] main_decode_blockexit2ii_558_reg;
reg [31:0] main_decode_blockexit2ii_559;
reg [31:0] main_decode_blockexit2ii_559_reg;
reg [31:0] main_decode_blockexit2ii_560;
reg [31:0] main_decode_blockexit2ii_560_reg;
reg [31:0] main_decode_blockexit2ii_561;
reg [31:0] main_decode_blockexit2ii_561_reg;
reg [31:0] main_decode_blockexit2ii_562;
reg [31:0] main_decode_blockexit2ii_562_reg;
reg [31:0] main_decode_blockexit2ii_563;
reg [31:0] main_decode_blockexit2ii_563_reg;
reg [31:0] main_decode_blockexit2ii_564;
reg [31:0] main_decode_blockexit2ii_564_reg;
reg [31:0] main_decode_blockexit2ii_565;
reg [31:0] main_decode_blockexit2ii_565_reg;
reg [31:0] main_decode_blockexit2ii_566;
reg [31:0] main_decode_blockexit2ii_566_reg;
reg [31:0] main_decode_blockexit2ii_567;
reg [31:0] main_decode_blockexit2ii_567_reg;
reg [31:0] main_decode_blockexit2ii_568;
reg [31:0] main_decode_blockexit2ii_568_reg;
reg [31:0] main_decode_blockexit2ii_569;
reg [31:0] main_decode_blockexit2ii_569_reg;
reg  main_decode_blockexit2ii_570;
reg  main_decode_blockexit2ii_570_reg;
reg  main_571_572;
reg  main_571_572_reg;
reg [31:0] main_571_ii1i;
reg [31:0] main_571_ii1i_reg;
reg [31:0] main_573_r0iii;
reg [31:0] main_573_r0iii_reg;
reg  main_573_574;
reg  main_573_574_reg;
reg  main_575_576;
reg  main_575_576_reg;
reg [31:0] main_575_1iii;
reg [31:0] main_575_1iii_reg;
reg [31:0] main_577_g0iii;
reg [31:0] main_577_g0iii_reg;
reg  main_577_578;
reg  main_577_578_reg;
reg  main_579_580;
reg  main_579_580_reg;
reg [31:0] main_579_2iii;
reg [31:0] main_579_2iii_reg;
reg [31:0] main_581_b0iii;
reg [31:0] main_581_b0iii_reg;
reg [31:0] main_581_582;
reg [31:0] main_581_582_reg;
reg  main_581_exitcond65;
reg  main_581_exitcond65_reg;
reg [15:0] main_YuvToRgbexitpreheaderii_583;
reg [15:0] main_YuvToRgbexitpreheaderii_583_reg;
reg [31:0] main_YuvToRgbexitpreheaderii_584;
reg [31:0] main_YuvToRgbexitpreheaderii_584_reg;
reg [15:0] main_YuvToRgbexitpreheaderii_585;
reg [15:0] main_YuvToRgbexitpreheaderii_585_reg;
reg [31:0] main_YuvToRgbexitpreheaderii_586;
reg [31:0] main_YuvToRgbexitpreheaderii_586_reg;
reg [31:0] main_YuvToRgbexitpreheaderii_preii;
reg [31:0] main_YuvToRgbexitpreheaderii_preii_reg;
reg [31:0] main_YuvToRgbexitpreheaderii_587;
reg [31:0] main_YuvToRgbexitpreheaderii_587_reg;
reg [31:0] main_YuvToRgbexitpreheaderii_588;
reg [31:0] main_YuvToRgbexitpreheaderii_588_reg;
reg [31:0] main_YuvToRgbexitpreheaderii_589;
reg [31:0] main_YuvToRgbexitpreheaderii_589_reg;
reg [31:0] main_YuvToRgbexitpreheaderii_590;
reg [31:0] main_YuvToRgbexitpreheaderii_590_reg;
reg [31:0] main_YuvToRgbexitpreheaderii_591;
reg [31:0] main_YuvToRgbexitpreheaderii_591_reg;
reg [31:0] main_592_593;
reg [31:0] main_592_593_reg;
reg [31:0] main_592_i352ii;
reg [31:0] main_592_i352ii_reg;
reg [31:0] main_592_sumii;
reg [31:0] main_592_sumii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_592_scevgep91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_592_scevgep91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_592_scevgep92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_592_scevgep92_reg;
reg [31:0] main_592_594;
reg [31:0] main_592_594_reg;
reg [31:0] main_592_595;
reg [31:0] main_592_595_reg;
reg [31:0] main_592_596;
reg [31:0] main_592_596_reg;
reg  main_592_597;
reg  main_592_597_reg;
reg  main_592_598;
reg  main_592_598_reg;
reg  main_592_orcondiii;
reg  main_592_orcondiii_reg;
reg [31:0] main_lrph8splitusiiii_599;
reg [31:0] main_lrph8splitusiiii_599_reg;
reg [31:0] main_lrph8splitusiiii_600;
reg [31:0] main_lrph8splitusiiii_600_reg;
reg [31:0] main_lrph8splitusiiii_601;
reg [31:0] main_lrph8splitusiiii_601_reg;
reg  main_lrph8splitusiiii_602;
reg  main_lrph8splitusiiii_602_reg;
reg [31:0] main_lrph8splitusiiii_smax;
reg [31:0] main_lrph8splitusiiii_smax_reg;
reg [31:0] main_lrph8splitusiiii_603;
reg [31:0] main_lrph8splitusiiii_603_reg;
reg [31:0] main_lrph8splitusiiii_604;
reg [31:0] main_lrph8splitusiiii_604_reg;
reg  main_lrph8splitusiiii_605;
reg  main_lrph8splitusiiii_605_reg;
reg [31:0] main_lrph8splitusiiii_umax;
reg [31:0] main_lrph8splitusiiii_umax_reg;
reg [31:0] main_lrph8splitusiiii_606;
reg [31:0] main_lrph8splitusiiii_606_reg;
reg [31:0] main_lrph8splitusiiii_607;
reg [31:0] main_lrph8splitusiiii_607_reg;
reg [31:0] main_lrph8splitusiiii_608;
reg [31:0] main_lrph8splitusiiii_608_reg;
reg [31:0] main_lrph8splitusiiii_609;
reg [31:0] main_lrph8splitusiiii_609_reg;
reg  main_lrph8splitusiiii_610;
reg  main_lrph8splitusiiii_610_reg;
reg [31:0] main_lrph8splitusiiii_smax79;
reg [31:0] main_lrph8splitusiiii_smax79_reg;
reg [31:0] main_lrph8splitusiiii_611;
reg [31:0] main_lrph8splitusiiii_611_reg;
reg [31:0] main_lrph8splitusiiii_612;
reg [31:0] main_lrph8splitusiiii_612_reg;
reg  main_lrph8splitusiiii_613;
reg  main_lrph8splitusiiii_613_reg;
reg [31:0] main_lrph8splitusiiii_umax80;
reg [31:0] main_lrph8splitusiiii_umax80_reg;
reg [31:0] main_lrph8splitusiiii_614;
reg [31:0] main_lrph8splitusiiii_614_reg;
reg [31:0] main_lrph8splitusiiii_615;
reg [31:0] main_lrph8splitusiiii_615_reg;
reg [31:0] main_lrph8splitusiiii_616;
reg [31:0] main_lrph8splitusiiii_616_reg;
reg [31:0] main_lrph8splitusiiii_617;
reg [31:0] main_lrph8splitusiiii_617_reg;
reg  main_lrph8splitusiiii_618;
reg  main_lrph8splitusiiii_618_reg;
reg [31:0] main_lrph8splitusiiii_smax87;
reg [31:0] main_lrph8splitusiiii_smax87_reg;
reg [31:0] main_lrph8splitusiiii_619;
reg [31:0] main_lrph8splitusiiii_619_reg;
reg [31:0] main_lrph8splitusiiii_620;
reg [31:0] main_lrph8splitusiiii_620_reg;
reg  main_lrph8splitusiiii_621;
reg  main_lrph8splitusiiii_621_reg;
reg [31:0] main_lrph8splitusiiii_umax88;
reg [31:0] main_lrph8splitusiiii_umax88_reg;
reg [31:0] main_lrph8splitusiiii_622;
reg [31:0] main_lrph8splitusiiii_622_reg;
reg [31:0] main_lrph8splitusiiii_623;
reg [31:0] main_lrph8splitusiiii_623_reg;
reg [31:0] main_lrph8splitusiiii_624;
reg [31:0] main_lrph8splitusiiii_624_reg;
reg [31:0] main_625_indvarnext76;
reg [31:0] main_625_indvarnext76_reg;
reg  main_625_exitcond81;
reg  main_625_exitcond81_reg;
reg [31:0] main_626_indvar72;
reg [31:0] main_626_indvar72_reg;
reg [31:0] main_626_627;
reg [31:0] main_626_627_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_626_14usiiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_626_14usiiii_reg;
reg [31:0] main_626_628;
reg [31:0] main_626_628_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_626_scevgep78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_626_scevgep78_reg;
reg [31:0] main_626_629;
reg [31:0] main_626_629_reg;
reg [7:0] main_626_630;
reg [7:0] main_626_630_reg;
reg [31:0] main_626_indvarnext73;
reg [31:0] main_626_indvarnext73_reg;
reg  main_626_exitcond74;
reg  main_626_exitcond74_reg;
reg [31:0] main_lrphusiiii_indvar75;
reg [31:0] main_lrphusiiii_indvar75_reg;
reg [31:0] main_lrphusiiii_631;
reg [31:0] main_lrphusiiii_631_reg;
reg [31:0] main_lrphusiiii_632;
reg [31:0] main_lrphusiiii_632_reg;
reg [31:0] main_lrphusiiii_633;
reg [31:0] main_lrphusiiii_633_reg;
reg [31:0] main_WriteOneBlockexitiii_634;
reg [31:0] main_WriteOneBlockexitiii_634_reg;
reg [31:0] main_WriteOneBlockexitiii_635;
reg [31:0] main_WriteOneBlockexitiii_635_reg;
reg  main_WriteOneBlockexitiii_636;
reg  main_WriteOneBlockexitiii_636_reg;
reg [31:0] main_WriteBlockexitii_638;
reg [31:0] main_WriteBlockexitii_638_reg;
reg  main_WriteBlockexitii_exitcond86;
reg  main_WriteBlockexitii_exitcond86_reg;
reg [31:0] main_639_640;
reg [31:0] main_639_640_reg;
reg  main_639_exitcond93;
reg  main_639_exitcond93_reg;
reg  main_641_643;
reg  main_641_643_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader49lrphii_644;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader49lrphii_644_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader49lrphii_645;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader49lrphii_645_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader49lrphii_646;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader49lrphii_646_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader49lrphii_647;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader49lrphii_647_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader49lrphii_648;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader49lrphii_648_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader49lrphii_649;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader49lrphii_649_reg;
reg [31:0] main_preheader49ii_indvar164;
reg [31:0] main_preheader49ii_indvar164_reg;
reg [31:0] main_preheader49ii_650;
reg [31:0] main_preheader49ii_650_reg;
reg [31:0] main_preheader49ii_651;
reg [31:0] main_preheader49ii_651_reg;
reg [31:0] main_652_i455ii;
reg [31:0] main_652_i455ii_reg;
reg [31:0] main_652_653;
reg [31:0] main_652_653_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_652_scevgep118;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_652_scevgep118_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_652_scevgep119;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_652_scevgep119_reg;
reg [31:0] main_654_i02ii2ii;
reg [31:0] main_654_i02ii2ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_654_scevgep94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_654_scevgep94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_654_01ii3ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_654_01ii3ii_reg;
reg [31:0] main_654_655;
reg [31:0] main_654_655_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_654_656;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_654_656_reg;
reg [31:0] main_654_657;
reg [31:0] main_654_657_reg;
reg [31:0] main_654_658;
reg [31:0] main_654_658_reg;
reg  main_654_exitcond;
reg  main_654_exitcond_reg;
reg [7:0] main_IZigzagMatrixexiti5ii_659;
reg [7:0] main_IZigzagMatrixexiti5ii_659_reg;
reg [31:0] main_IZigzagMatrixexiti5ii_660;
reg [31:0] main_IZigzagMatrixexiti5ii_660_reg;
reg [31:0] main_IZigzagMatrixexiti5ii_661;
reg [31:0] main_IZigzagMatrixexiti5ii_661_reg;
reg [31:0] main_662_indvar96;
reg [31:0] main_662_indvar96_reg;
reg [31:0] main_662_663;
reg [31:0] main_662_663_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_662_scevgep98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_662_scevgep98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_662_mptr02ii6ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_662_mptr02ii6ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_662_01i2i7ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_662_01i2i7ii_reg;
reg [31:0] main_662_664;
reg [31:0] main_662_664_reg;
reg [31:0] main_662_665;
reg [31:0] main_662_665_reg;
reg [31:0] main_662_666;
reg [31:0] main_662_666_reg;
reg  main_662_667;
reg  main_662_667_reg;
reg [31:0] main_662_indvarnext97;
reg [31:0] main_662_indvarnext97_reg;
reg [31:0] main_668_indvar105;
reg [31:0] main_668_indvar105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_668_mptr01i1i9ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_668_mptr01i1i9ii_reg;
reg [31:0] main_668_669;
reg [31:0] main_668_669_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_668_scevgep107;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_668_scevgep107_reg;
reg [31:0] main_668_670;
reg [31:0] main_668_670_reg;
reg [31:0] main_668_671;
reg [31:0] main_668_671_reg;
reg  main_668_672;
reg  main_668_672_reg;
reg [31:0] main_668_indvarnext106;
reg [31:0] main_668_indvarnext106_reg;
reg [31:0] main_PostshiftIDctMatrixexiti11ii_indvar109;
reg [31:0] main_PostshiftIDctMatrixexiti11ii_indvar109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti11ii_mptr01ii10ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti11ii_mptr01ii10ii_reg;
reg [31:0] main_PostshiftIDctMatrixexiti11ii_673;
reg [31:0] main_PostshiftIDctMatrixexiti11ii_673_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti11ii_scevgep111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti11ii_scevgep111_reg;
reg [31:0] main_PostshiftIDctMatrixexiti11ii_674;
reg [31:0] main_PostshiftIDctMatrixexiti11ii_674_reg;
reg  main_PostshiftIDctMatrixexiti11ii_675;
reg  main_PostshiftIDctMatrixexiti11ii_675_reg;
reg  main_677_678;
reg  main_677_678_reg;
reg  main_680_681;
reg  main_680_681_reg;
reg [31:0] main_680_indvarnext110;
reg [31:0] main_680_indvarnext110_reg;
reg [31:0] main_decode_blockexit12ii_682;
reg [31:0] main_decode_blockexit12ii_682_reg;
reg  main_decode_blockexit12ii_exitcond113;
reg  main_decode_blockexit12ii_exitcond113_reg;
reg [31:0] main_684_i02ii14ii;
reg [31:0] main_684_i02ii14ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_684_scevgep121;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_684_scevgep121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_684_01ii15ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_684_01ii15ii_reg;
reg [31:0] main_684_685;
reg [31:0] main_684_685_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_684_686;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_684_686_reg;
reg [31:0] main_684_687;
reg [31:0] main_684_687_reg;
reg [31:0] main_684_688;
reg [31:0] main_684_688_reg;
reg  main_684_exitcond120;
reg  main_684_exitcond120_reg;
reg [7:0] main_IZigzagMatrixexiti17ii_689;
reg [7:0] main_IZigzagMatrixexiti17ii_689_reg;
reg [31:0] main_IZigzagMatrixexiti17ii_690;
reg [31:0] main_IZigzagMatrixexiti17ii_690_reg;
reg [31:0] main_IZigzagMatrixexiti17ii_691;
reg [31:0] main_IZigzagMatrixexiti17ii_691_reg;
reg [31:0] main_692_indvar123;
reg [31:0] main_692_indvar123_reg;
reg [31:0] main_692_693;
reg [31:0] main_692_693_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_692_scevgep125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_692_scevgep125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_692_mptr02ii18ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_692_mptr02ii18ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_692_01i2i19ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_692_01i2i19ii_reg;
reg [31:0] main_692_694;
reg [31:0] main_692_694_reg;
reg [31:0] main_692_695;
reg [31:0] main_692_695_reg;
reg [31:0] main_692_696;
reg [31:0] main_692_696_reg;
reg  main_692_697;
reg  main_692_697_reg;
reg [31:0] main_692_indvarnext124;
reg [31:0] main_692_indvarnext124_reg;
reg [31:0] main_698_indvar128;
reg [31:0] main_698_indvar128_reg;
reg [31:0] main_698_699;
reg [31:0] main_698_699_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_698_scevgep130;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_698_scevgep130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_698_mptr01i1i21ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_698_mptr01i1i21ii_reg;
reg [31:0] main_698_700;
reg [31:0] main_698_700_reg;
reg [31:0] main_698_701;
reg [31:0] main_698_701_reg;
reg  main_698_702;
reg  main_698_702_reg;
reg [31:0] main_698_indvarnext129;
reg [31:0] main_698_indvarnext129_reg;
reg [31:0] main_PostshiftIDctMatrixexiti23ii_indvar132;
reg [31:0] main_PostshiftIDctMatrixexiti23ii_indvar132_reg;
reg [31:0] main_PostshiftIDctMatrixexiti23ii_703;
reg [31:0] main_PostshiftIDctMatrixexiti23ii_703_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti23ii_scevgep134;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti23ii_scevgep134_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti23ii_mptr01ii22ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti23ii_mptr01ii22ii_reg;
reg [31:0] main_PostshiftIDctMatrixexiti23ii_704;
reg [31:0] main_PostshiftIDctMatrixexiti23ii_704_reg;
reg  main_PostshiftIDctMatrixexiti23ii_705;
reg  main_PostshiftIDctMatrixexiti23ii_705_reg;
reg  main_707_708;
reg  main_707_708_reg;
reg  main_710_711;
reg  main_710_711_reg;
reg [31:0] main_710_indvarnext133;
reg [31:0] main_710_indvarnext133_reg;
reg [31:0] main_712_i02ii26ii;
reg [31:0] main_712_i02ii26ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_712_scevgep137;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_712_scevgep137_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_712_01ii27ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_712_01ii27ii_reg;
reg [31:0] main_712_713;
reg [31:0] main_712_713_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_712_714;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_712_714_reg;
reg [31:0] main_712_715;
reg [31:0] main_712_715_reg;
reg [31:0] main_712_716;
reg [31:0] main_712_716_reg;
reg  main_712_exitcond136;
reg  main_712_exitcond136_reg;
reg [7:0] main_IZigzagMatrixexiti29ii_717;
reg [7:0] main_IZigzagMatrixexiti29ii_717_reg;
reg [31:0] main_IZigzagMatrixexiti29ii_718;
reg [31:0] main_IZigzagMatrixexiti29ii_718_reg;
reg [31:0] main_IZigzagMatrixexiti29ii_719;
reg [31:0] main_IZigzagMatrixexiti29ii_719_reg;
reg [31:0] main_720_indvar139;
reg [31:0] main_720_indvar139_reg;
reg [31:0] main_720_721;
reg [31:0] main_720_721_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_720_scevgep141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_720_scevgep141_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_720_mptr02ii30ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_720_mptr02ii30ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_720_01i2i31ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_720_01i2i31ii_reg;
reg [31:0] main_720_722;
reg [31:0] main_720_722_reg;
reg [31:0] main_720_723;
reg [31:0] main_720_723_reg;
reg [31:0] main_720_724;
reg [31:0] main_720_724_reg;
reg  main_720_725;
reg  main_720_725_reg;
reg [31:0] main_720_indvarnext140;
reg [31:0] main_720_indvarnext140_reg;
reg [31:0] main_726_indvar144;
reg [31:0] main_726_indvar144_reg;
reg [31:0] main_726_727;
reg [31:0] main_726_727_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_726_scevgep146;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_726_scevgep146_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_726_mptr01i1i33ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_726_mptr01i1i33ii_reg;
reg [31:0] main_726_728;
reg [31:0] main_726_728_reg;
reg [31:0] main_726_729;
reg [31:0] main_726_729_reg;
reg  main_726_730;
reg  main_726_730_reg;
reg [31:0] main_726_indvarnext145;
reg [31:0] main_726_indvarnext145_reg;
reg [31:0] main_PostshiftIDctMatrixexiti35ii_indvar148;
reg [31:0] main_PostshiftIDctMatrixexiti35ii_indvar148_reg;
reg [31:0] main_PostshiftIDctMatrixexiti35ii_731;
reg [31:0] main_PostshiftIDctMatrixexiti35ii_731_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti35ii_scevgep150;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti35ii_scevgep150_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti35ii_mptr01ii34ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti35ii_mptr01ii34ii_reg;
reg [31:0] main_PostshiftIDctMatrixexiti35ii_732;
reg [31:0] main_PostshiftIDctMatrixexiti35ii_732_reg;
reg  main_PostshiftIDctMatrixexiti35ii_733;
reg  main_PostshiftIDctMatrixexiti35ii_733_reg;
reg  main_735_736;
reg  main_735_736_reg;
reg  main_738_739;
reg  main_738_739_reg;
reg [31:0] main_738_indvarnext149;
reg [31:0] main_738_indvarnext149_reg;
reg  main_preheader48ii_740;
reg  main_preheader48ii_740_reg;
reg [31:0] main_preheader48ii_indvarnext165;
reg [31:0] main_preheader48ii_indvarnext165_reg;
reg [31:0] main_preheader47ii_i556ii;
reg [31:0] main_preheader47ii_i556ii_reg;
reg [31:0] main_741_i03i37ii;
reg [31:0] main_741_i03i37ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_741_scevgep158;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_741_scevgep158_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_741_scevgep155;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_741_scevgep155_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_741_scevgep154;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_741_scevgep154_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_741_scevgep153;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_741_scevgep153_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_741_scevgep156;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_741_scevgep156_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_741_scevgep157;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_741_scevgep157_reg;
reg [31:0] main_741_742;
reg [31:0] main_741_742_reg;
reg [31:0] main_741_743;
reg [31:0] main_741_743_reg;
reg [31:0] main_741_744;
reg [31:0] main_741_744_reg;
reg [31:0] main_741_745;
reg [31:0] main_741_745_reg;
reg [31:0] main_741_746;
reg [31:0] main_741_746_reg;
reg [31:0] main_741_747;
reg [31:0] main_741_747_reg;
reg [31:0] main_741_748;
reg [31:0] main_741_748_reg;
reg [31:0] main_741_749;
reg [31:0] main_741_749_reg;
reg [31:0] main_741_750;
reg [31:0] main_741_750_reg;
reg [31:0] main_741_751;
reg [31:0] main_741_751_reg;
reg [31:0] main_741_752;
reg [31:0] main_741_752_reg;
reg [31:0] main_741_753;
reg [31:0] main_741_753_reg;
reg [31:0] main_741_754;
reg [31:0] main_741_754_reg;
reg [31:0] main_741_755;
reg [31:0] main_741_755_reg;
reg [31:0] main_741_756;
reg [31:0] main_741_756_reg;
reg [31:0] main_741_757;
reg [31:0] main_741_757_reg;
reg [31:0] main_741_758;
reg [31:0] main_741_758_reg;
reg [31:0] main_741_759;
reg [31:0] main_741_759_reg;
reg  main_741_760;
reg  main_741_760_reg;
reg  main_761_762;
reg  main_761_762_reg;
reg [31:0] main_761_i38ii;
reg [31:0] main_761_i38ii_reg;
reg [31:0] main_763_r0i39ii;
reg [31:0] main_763_r0i39ii_reg;
reg  main_763_764;
reg  main_763_764_reg;
reg  main_765_766;
reg  main_765_766_reg;
reg [31:0] main_765_1i40ii;
reg [31:0] main_765_1i40ii_reg;
reg [31:0] main_767_g0i41ii;
reg [31:0] main_767_g0i41ii_reg;
reg  main_767_768;
reg  main_767_768_reg;
reg  main_769_770;
reg  main_769_770_reg;
reg [31:0] main_769_2i42ii;
reg [31:0] main_769_2i42ii_reg;
reg [31:0] main_771_b0i43ii;
reg [31:0] main_771_b0i43ii_reg;
reg [31:0] main_771_772;
reg [31:0] main_771_772_reg;
reg  main_771_exitcond152;
reg  main_771_exitcond152_reg;
reg [31:0] main_YuvToRgbexit45ii_773;
reg [31:0] main_YuvToRgbexit45ii_773_reg;
reg  main_YuvToRgbexit45ii_exitcond159;
reg  main_YuvToRgbexit45ii_exitcond159_reg;
reg [31:0] main_774_i02ii1ii;
reg [31:0] main_774_i02ii1ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_774_scevgep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_774_scevgep34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_774_01ii1ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_774_01ii1ii_reg;
reg [31:0] main_774_775;
reg [31:0] main_774_775_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_774_776;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_774_776_reg;
reg [31:0] main_774_777;
reg [31:0] main_774_777_reg;
reg [31:0] main_774_778;
reg [31:0] main_774_778_reg;
reg  main_774_exitcond33;
reg  main_774_exitcond33_reg;
reg [7:0] main_IZigzagMatrixexiti1ii_779;
reg [7:0] main_IZigzagMatrixexiti1ii_779_reg;
reg [31:0] main_IZigzagMatrixexiti1ii_780;
reg [31:0] main_IZigzagMatrixexiti1ii_780_reg;
reg [31:0] main_IZigzagMatrixexiti1ii_781;
reg [31:0] main_IZigzagMatrixexiti1ii_781_reg;
reg [31:0] main_782_indvar36;
reg [31:0] main_782_indvar36_reg;
reg [31:0] main_782_783;
reg [31:0] main_782_783_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_782_scevgep38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_782_scevgep38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_782_mptr02ii1ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_782_mptr02ii1ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_782_01i2i1ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_782_01i2i1ii_reg;
reg [31:0] main_782_784;
reg [31:0] main_782_784_reg;
reg [31:0] main_782_785;
reg [31:0] main_782_785_reg;
reg [31:0] main_782_786;
reg [31:0] main_782_786_reg;
reg  main_782_787;
reg  main_782_787_reg;
reg [31:0] main_782_indvarnext37;
reg [31:0] main_782_indvarnext37_reg;
reg [31:0] main_788_indvar41;
reg [31:0] main_788_indvar41_reg;
reg [31:0] main_788_789;
reg [31:0] main_788_789_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_788_scevgep43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_788_scevgep43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_788_mptr01i1i1ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_788_mptr01i1i1ii_reg;
reg [31:0] main_788_790;
reg [31:0] main_788_790_reg;
reg [31:0] main_788_791;
reg [31:0] main_788_791_reg;
reg  main_788_792;
reg  main_788_792_reg;
reg [31:0] main_788_indvarnext42;
reg [31:0] main_788_indvarnext42_reg;
reg [31:0] main_PostshiftIDctMatrixexiti1ii_indvar45;
reg [31:0] main_PostshiftIDctMatrixexiti1ii_indvar45_reg;
reg [31:0] main_PostshiftIDctMatrixexiti1ii_793;
reg [31:0] main_PostshiftIDctMatrixexiti1ii_793_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti1ii_scevgep47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti1ii_scevgep47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti1ii_mptr01ii1ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti1ii_mptr01ii1ii_reg;
reg [31:0] main_PostshiftIDctMatrixexiti1ii_794;
reg [31:0] main_PostshiftIDctMatrixexiti1ii_794_reg;
reg  main_PostshiftIDctMatrixexiti1ii_795;
reg  main_PostshiftIDctMatrixexiti1ii_795_reg;
reg  main_796_797;
reg  main_796_797_reg;
reg  main_800_801;
reg  main_800_801_reg;
reg [31:0] main_800_indvarnext46;
reg [31:0] main_800_indvarnext46_reg;
reg [31:0] main_802_i02ii2ii;
reg [31:0] main_802_i02ii2ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_802_scevgep50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_802_scevgep50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_802_01ii2ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_802_01ii2ii_reg;
reg [31:0] main_802_803;
reg [31:0] main_802_803_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_802_804;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_802_804_reg;
reg [31:0] main_802_805;
reg [31:0] main_802_805_reg;
reg [31:0] main_802_806;
reg [31:0] main_802_806_reg;
reg  main_802_exitcond49;
reg  main_802_exitcond49_reg;
reg [7:0] main_IZigzagMatrixexiti2ii_807;
reg [7:0] main_IZigzagMatrixexiti2ii_807_reg;
reg [31:0] main_IZigzagMatrixexiti2ii_808;
reg [31:0] main_IZigzagMatrixexiti2ii_808_reg;
reg [31:0] main_IZigzagMatrixexiti2ii_809;
reg [31:0] main_IZigzagMatrixexiti2ii_809_reg;
reg [31:0] main_810_indvar52;
reg [31:0] main_810_indvar52_reg;
reg [31:0] main_810_811;
reg [31:0] main_810_811_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_810_scevgep54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_810_scevgep54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_810_mptr02ii2ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_810_mptr02ii2ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_810_01i2i2ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_810_01i2i2ii_reg;
reg [31:0] main_810_812;
reg [31:0] main_810_812_reg;
reg [31:0] main_810_813;
reg [31:0] main_810_813_reg;
reg [31:0] main_810_814;
reg [31:0] main_810_814_reg;
reg  main_810_815;
reg  main_810_815_reg;
reg [31:0] main_810_indvarnext53;
reg [31:0] main_810_indvarnext53_reg;
reg [31:0] main_816_indvar57;
reg [31:0] main_816_indvar57_reg;
reg [31:0] main_816_817;
reg [31:0] main_816_817_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_816_scevgep59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_816_scevgep59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_816_mptr01i1i2ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_816_mptr01i1i2ii_reg;
reg [31:0] main_816_818;
reg [31:0] main_816_818_reg;
reg [31:0] main_816_819;
reg [31:0] main_816_819_reg;
reg  main_816_820;
reg  main_816_820_reg;
reg [31:0] main_816_indvarnext58;
reg [31:0] main_816_indvarnext58_reg;
reg [31:0] main_PostshiftIDctMatrixexiti2ii_indvar61;
reg [31:0] main_PostshiftIDctMatrixexiti2ii_indvar61_reg;
reg [31:0] main_PostshiftIDctMatrixexiti2ii_821;
reg [31:0] main_PostshiftIDctMatrixexiti2ii_821_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti2ii_scevgep63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti2ii_scevgep63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti2ii_mptr01ii2ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_PostshiftIDctMatrixexiti2ii_mptr01ii2ii_reg;
reg [31:0] main_PostshiftIDctMatrixexiti2ii_822;
reg [31:0] main_PostshiftIDctMatrixexiti2ii_822_reg;
reg  main_PostshiftIDctMatrixexiti2ii_823;
reg  main_PostshiftIDctMatrixexiti2ii_823_reg;
reg  main_824_825;
reg  main_824_825_reg;
reg  main_828_829;
reg  main_828_829_reg;
reg [31:0] main_828_indvarnext62;
reg [31:0] main_828_indvarnext62_reg;
reg [31:0] main_decode_startexiti_j01i;
reg [31:0] main_decode_startexiti_j01i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_decode_startexiti_scevgep17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_decode_startexiti_scevgep17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_decode_startexiti_scevgep18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_decode_startexiti_scevgep18_reg;
reg [7:0] main_decode_startexiti_830;
reg [7:0] main_decode_startexiti_830_reg;
reg [7:0] main_decode_startexiti_831;
reg [7:0] main_decode_startexiti_831_reg;
reg  main_decode_startexiti_832;
reg  main_decode_startexiti_832_reg;
reg [31:0] main_833_834;
reg [31:0] main_833_834_reg;
reg [31:0] main_833_835;
reg [31:0] main_833_835_reg;
reg [31:0] main_836_837;
reg [31:0] main_836_837_reg;
reg  main_836_exitcond16;
reg  main_836_exitcond16_reg;
reg [31:0] main_838_839;
reg [31:0] main_838_839_reg;
reg [31:0] main_838_840;
reg [31:0] main_838_840_reg;
reg  main_841_842;
reg  main_841_842_reg;
reg [31:0] main_841_843;
reg [31:0] main_841_843_reg;
reg [31:0] main_844_845;
reg [31:0] main_844_845_reg;
reg [31:0] main_preheader16i_j011i;
reg [31:0] main_preheader16i_j011i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader16i_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader16i_scevgep14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader16i_scevgep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader16i_scevgep15_reg;
reg [7:0] main_preheader16i_846;
reg [7:0] main_preheader16i_846_reg;
reg [7:0] main_preheader16i_847;
reg [7:0] main_preheader16i_847_reg;
reg  main_preheader16i_848;
reg  main_preheader16i_848_reg;
reg [31:0] main_849_850;
reg [31:0] main_849_850_reg;
reg [31:0] main_849_851;
reg [31:0] main_849_851_reg;
reg [31:0] main_852_853;
reg [31:0] main_852_853_reg;
reg  main_852_exitcond13;
reg  main_852_exitcond13_reg;
reg [31:0] main_preheader27i_j012i;
reg [31:0] main_preheader27i_j012i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader27i_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader27i_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader27i_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader27i_scevgep12_reg;
reg [7:0] main_preheader27i_854;
reg [7:0] main_preheader27i_854_reg;
reg [7:0] main_preheader27i_855;
reg [7:0] main_preheader27i_855_reg;
reg  main_preheader27i_856;
reg  main_preheader27i_856_reg;
reg [31:0] main_857_858;
reg [31:0] main_857_858_reg;
reg [31:0] main_857_859;
reg [31:0] main_857_859_reg;
reg [31:0] main_860_861;
reg [31:0] main_860_861_reg;
reg  main_860_exitcond11;
reg  main_860_exitcond11_reg;
reg  main_862_863;
reg  main_862_863_reg;
reg [31:0] main_jpeg2bmp_mainexit_864;
reg [31:0] main_jpeg2bmp_mainexit_864_reg;
reg [31:0] main_jpeg2bmp_mainexit_866;
reg [31:0] main_jpeg2bmp_mainexit_866_reg;
reg  main_jpeg2bmp_mainexit_867;
reg  main_jpeg2bmp_mainexit_867_reg;
reg [31:0] main_872_873;
reg [31:0] main_872_873_reg;
reg [12:0] hana_jpg_address_a;
reg  hana_jpg_write_enable_a;
wire [7:0] hana_jpg_in_a;
wire [7:0] hana_jpg_out_a;
wire [12:0] hana_jpg_address_b;
wire  hana_jpg_write_enable_b;
wire [7:0] hana_jpg_in_b;
wire [7:0] hana_jpg_out_b;
reg [13:0] hana_bmp_address_a;
reg  hana_bmp_write_enable_a;
wire [7:0] hana_bmp_in_a;
wire [7:0] hana_bmp_out_a;
wire [13:0] hana_bmp_address_b;
wire  hana_bmp_write_enable_b;
wire [7:0] hana_bmp_in_b;
wire [7:0] hana_bmp_out_b;
reg [3:0] out_unread_marker_address_a;
reg  out_unread_marker_write_enable_a;
wire [31:0] out_unread_marker_in_a;
wire [31:0] out_unread_marker_out_a;
wire [3:0] out_unread_marker_address_b;
wire  out_unread_marker_write_enable_b;
wire [31:0] out_unread_marker_in_b;
wire [31:0] out_unread_marker_out_b;
reg [1:0] out_index_get_sof_address_a;
reg  out_index_get_sof_write_enable_a;
wire [31:0] out_index_get_sof_in_a;
wire [31:0] out_index_get_sof_out_a;
wire [1:0] out_index_get_sof_address_b;
wire  out_index_get_sof_write_enable_b;
wire [31:0] out_index_get_sof_in_b;
wire [31:0] out_index_get_sof_out_b;
reg [1:0] out_v_samp_factor_get_sof_address_a;
reg  out_v_samp_factor_get_sof_write_enable_a;
wire [31:0] out_v_samp_factor_get_sof_in_a;
wire [31:0] out_v_samp_factor_get_sof_out_a;
wire [1:0] out_v_samp_factor_get_sof_address_b;
wire  out_v_samp_factor_get_sof_write_enable_b;
wire [31:0] out_v_samp_factor_get_sof_in_b;
wire [31:0] out_v_samp_factor_get_sof_out_b;
reg [1:0] out_comp_id_get_sos_address_a;
reg  out_comp_id_get_sos_write_enable_a;
wire [31:0] out_comp_id_get_sos_in_a;
wire [31:0] out_comp_id_get_sos_out_a;
wire [1:0] out_comp_id_get_sos_address_b;
wire  out_comp_id_get_sos_write_enable_b;
wire [31:0] out_comp_id_get_sos_in_b;
wire [31:0] out_comp_id_get_sos_out_b;
reg [1:0] out_ac_tbl_no_get_sos_address_a;
reg  out_ac_tbl_no_get_sos_write_enable_a;
wire [31:0] out_ac_tbl_no_get_sos_in_a;
wire [31:0] out_ac_tbl_no_get_sos_out_a;
wire [1:0] out_ac_tbl_no_get_sos_address_b;
wire  out_ac_tbl_no_get_sos_write_enable_b;
wire [31:0] out_ac_tbl_no_get_sos_in_b;
wire [31:0] out_ac_tbl_no_get_sos_out_b;
reg [1:0] out_length_get_dht_address_a;
reg  out_length_get_dht_write_enable_a;
wire [31:0] out_length_get_dht_in_a;
wire [31:0] out_length_get_dht_out_a;
wire [1:0] out_length_get_dht_address_b;
wire  out_length_get_dht_write_enable_b;
wire [31:0] out_length_get_dht_in_b;
wire [31:0] out_length_get_dht_out_b;
reg [1:0] out_index_get_dht_address_a;
reg  out_index_get_dht_write_enable_a;
wire [31:0] out_index_get_dht_in_a;
wire [31:0] out_index_get_dht_out_a;
wire [1:0] out_index_get_dht_address_b;
wire  out_index_get_dht_write_enable_b;
wire [31:0] out_index_get_dht_in_b;
wire [31:0] out_index_get_dht_out_b;
reg [1:0] out_count_get_dht_address_a;
reg  out_count_get_dht_write_enable_a;
wire [31:0] out_count_get_dht_in_a;
wire [31:0] out_count_get_dht_out_a;
wire [1:0] out_count_get_dht_address_b;
wire  out_count_get_dht_write_enable_b;
wire [31:0] out_count_get_dht_in_b;
wire [31:0] out_count_get_dht_out_b;
reg  out_length_get_dqt_address_a;
reg  out_length_get_dqt_write_enable_a;
wire [31:0] out_length_get_dqt_in_a;
wire [31:0] out_length_get_dqt_out_a;
wire  out_length_get_dqt_address_b;
wire  out_length_get_dqt_write_enable_b;
wire [31:0] out_length_get_dqt_in_b;
wire [31:0] out_length_get_dqt_out_b;
reg  out_prec_get_dht_address_a;
reg  out_prec_get_dht_write_enable_a;
wire [31:0] out_prec_get_dht_in_a;
wire [31:0] out_prec_get_dht_out_a;
wire  out_prec_get_dht_address_b;
wire  out_prec_get_dht_write_enable_b;
wire [31:0] out_prec_get_dht_in_b;
wire [31:0] out_prec_get_dht_out_b;
reg  out_num_get_dht_address_a;
reg  out_num_get_dht_write_enable_a;
wire [31:0] out_num_get_dht_in_a;
wire [31:0] out_num_get_dht_out_a;
wire  out_num_get_dht_address_b;
wire  out_num_get_dht_write_enable_b;
wire [31:0] out_num_get_dht_in_b;
wire [31:0] out_num_get_dht_out_b;
reg [5:0] izigzag_index_address_a;
reg  izigzag_index_write_enable_a;
wire [31:0] izigzag_index_in_a;
wire [31:0] izigzag_index_out_a;
wire [5:0] izigzag_index_address_b;
wire  izigzag_index_write_enable_b;
wire [31:0] izigzag_index_in_b;
wire [31:0] izigzag_index_out_b;
wire  main_result_address_a;
wire  main_result_write_enable_a;
wire [31:0] main_result_in_a;
wire [31:0] main_result_out_a;
wire  main_result_address_b;
wire  main_result_write_enable_b;
wire [31:0] main_result_in_b;
wire [31:0] main_result_out_b;
wire  p_jinfo_image_height_address_a;
wire  p_jinfo_image_height_write_enable_a;
wire [15:0] p_jinfo_image_height_in_a;
wire [15:0] p_jinfo_image_height_out_a;
wire  p_jinfo_image_height_address_b;
wire  p_jinfo_image_height_write_enable_b;
wire [15:0] p_jinfo_image_height_in_b;
wire [15:0] p_jinfo_image_height_out_b;
wire  p_jinfo_image_width_address_a;
wire  p_jinfo_image_width_write_enable_a;
wire [15:0] p_jinfo_image_width_in_a;
wire [15:0] p_jinfo_image_width_out_a;
wire  p_jinfo_image_width_address_b;
wire  p_jinfo_image_width_write_enable_b;
wire [15:0] p_jinfo_image_width_in_b;
wire [15:0] p_jinfo_image_width_out_b;
reg [1:0] p_jinfo_comps_info_index_address_a;
reg  p_jinfo_comps_info_index_write_enable_a;
reg [7:0] p_jinfo_comps_info_index_in_a;
wire [7:0] p_jinfo_comps_info_index_out_a;
wire [1:0] p_jinfo_comps_info_index_address_b;
wire  p_jinfo_comps_info_index_write_enable_b;
wire [7:0] p_jinfo_comps_info_index_in_b;
wire [7:0] p_jinfo_comps_info_index_out_b;
reg [1:0] p_jinfo_comps_info_id_address_a;
reg  p_jinfo_comps_info_id_write_enable_a;
reg [7:0] p_jinfo_comps_info_id_in_a;
wire [7:0] p_jinfo_comps_info_id_out_a;
wire [1:0] p_jinfo_comps_info_id_address_b;
wire  p_jinfo_comps_info_id_write_enable_b;
wire [7:0] p_jinfo_comps_info_id_in_b;
wire [7:0] p_jinfo_comps_info_id_out_b;
reg [1:0] p_jinfo_comps_info_h_samp_factor_address_a;
reg  p_jinfo_comps_info_h_samp_factor_write_enable_a;
reg [7:0] p_jinfo_comps_info_h_samp_factor_in_a;
wire [7:0] p_jinfo_comps_info_h_samp_factor_out_a;
wire [1:0] p_jinfo_comps_info_h_samp_factor_address_b;
wire  p_jinfo_comps_info_h_samp_factor_write_enable_b;
wire [7:0] p_jinfo_comps_info_h_samp_factor_in_b;
wire [7:0] p_jinfo_comps_info_h_samp_factor_out_b;
reg [1:0] p_jinfo_comps_info_v_samp_factor_address_a;
reg  p_jinfo_comps_info_v_samp_factor_write_enable_a;
reg [7:0] p_jinfo_comps_info_v_samp_factor_in_a;
wire [7:0] p_jinfo_comps_info_v_samp_factor_out_a;
wire [1:0] p_jinfo_comps_info_v_samp_factor_address_b;
wire  p_jinfo_comps_info_v_samp_factor_write_enable_b;
wire [7:0] p_jinfo_comps_info_v_samp_factor_in_b;
wire [7:0] p_jinfo_comps_info_v_samp_factor_out_b;
reg [1:0] p_jinfo_comps_info_quant_tbl_no_address_a;
reg  p_jinfo_comps_info_quant_tbl_no_write_enable_a;
reg [7:0] p_jinfo_comps_info_quant_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_quant_tbl_no_address_b;
wire  p_jinfo_comps_info_quant_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_out_b;
wire [1:0] p_jinfo_comps_info_dc_tbl_no_address_a;
wire  p_jinfo_comps_info_dc_tbl_no_write_enable_a;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_dc_tbl_no_address_b;
wire  p_jinfo_comps_info_dc_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_b;
reg [1:0] p_jinfo_comps_info_ac_tbl_no_address_a;
reg  p_jinfo_comps_info_ac_tbl_no_write_enable_a;
reg [7:0] p_jinfo_comps_info_ac_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_out_a;
wire [1:0] p_jinfo_comps_info_ac_tbl_no_address_b;
wire  p_jinfo_comps_info_ac_tbl_no_write_enable_b;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_out_b;
wire [6:0] p_jinfo_ac_xhuff_tbl_bits_address_a;
wire  p_jinfo_ac_xhuff_tbl_bits_write_enable_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_in_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_a;
wire [6:0] p_jinfo_ac_xhuff_tbl_bits_address_b;
wire  p_jinfo_ac_xhuff_tbl_bits_write_enable_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_b;
wire [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_a;
wire  p_jinfo_ac_xhuff_tbl_huffval_write_enable_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_a;
wire [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_b;
wire  p_jinfo_ac_xhuff_tbl_huffval_write_enable_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_b;
wire [6:0] p_jinfo_dc_xhuff_tbl_bits_address_a;
wire  p_jinfo_dc_xhuff_tbl_bits_write_enable_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_in_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_a;
wire [6:0] p_jinfo_dc_xhuff_tbl_bits_address_b;
wire  p_jinfo_dc_xhuff_tbl_bits_write_enable_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_b;
wire [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_a;
wire  p_jinfo_dc_xhuff_tbl_huffval_write_enable_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_a;
wire [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_b;
wire  p_jinfo_dc_xhuff_tbl_huffval_write_enable_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_b;
reg [7:0] p_jinfo_quant_tbl_quantval_address_a;
reg  p_jinfo_quant_tbl_quantval_write_enable_a;
reg [31:0] p_jinfo_quant_tbl_quantval_in_a;
wire [31:0] p_jinfo_quant_tbl_quantval_out_a;
wire [7:0] p_jinfo_quant_tbl_quantval_address_b;
wire  p_jinfo_quant_tbl_quantval_write_enable_b;
wire [31:0] p_jinfo_quant_tbl_quantval_in_b;
wire [31:0] p_jinfo_quant_tbl_quantval_out_b;
reg [5:0] zigzag_index_address_a;
reg  zigzag_index_write_enable_a;
wire [31:0] zigzag_index_in_a;
wire [31:0] zigzag_index_out_a;
wire [5:0] zigzag_index_address_b;
wire  zigzag_index_write_enable_b;
wire [31:0] zigzag_index_in_b;
wire [31:0] zigzag_index_out_b;
wire  p_jinfo_MCUWidth_address_a;
wire  p_jinfo_MCUWidth_write_enable_a;
wire [31:0] p_jinfo_MCUWidth_in_a;
wire [31:0] p_jinfo_MCUWidth_out_a;
wire  p_jinfo_MCUWidth_address_b;
wire  p_jinfo_MCUWidth_write_enable_b;
wire [31:0] p_jinfo_MCUWidth_in_b;
wire [31:0] p_jinfo_MCUWidth_out_b;
wire [9:0] rgb_buf_address_a;
wire  rgb_buf_write_enable_a;
wire [31:0] rgb_buf_in_a;
wire [31:0] rgb_buf_out_a;
wire [9:0] rgb_buf_address_b;
wire  rgb_buf_write_enable_b;
wire [31:0] rgb_buf_in_b;
wire [31:0] rgb_buf_out_b;
wire  CurHuffReadBuf_address_a;
wire  CurHuffReadBuf_write_enable_a;
wire [31:0] CurHuffReadBuf_in_a;
wire [31:0] CurHuffReadBuf_out_a;
wire  CurHuffReadBuf_address_b;
wire  CurHuffReadBuf_write_enable_b;
wire [31:0] CurHuffReadBuf_in_b;
wire [31:0] CurHuffReadBuf_out_b;
wire [13:0] OutData_comp_buf_address_a;
wire  OutData_comp_buf_write_enable_a;
wire [7:0] OutData_comp_buf_in_a;
wire [7:0] OutData_comp_buf_out_a;
wire [13:0] OutData_comp_buf_address_b;
wire  OutData_comp_buf_write_enable_b;
wire [7:0] OutData_comp_buf_in_b;
wire [7:0] OutData_comp_buf_out_b;
wire [4:0] bit_set_mask_address_a;
wire  bit_set_mask_write_enable_a;
wire [31:0] bit_set_mask_in_a;
wire [31:0] bit_set_mask_out_a;
wire [4:0] bit_set_mask_address_b;
wire  bit_set_mask_write_enable_b;
wire [31:0] bit_set_mask_in_b;
wire [31:0] bit_set_mask_out_b;
wire [4:0] lmask_address_a;
wire  lmask_write_enable_a;
wire [31:0] lmask_in_a;
wire [31:0] lmask_out_a;
wire [4:0] lmask_address_b;
wire  lmask_write_enable_b;
wire [31:0] lmask_in_b;
wire [31:0] lmask_out_b;
wire  read_position_address_a;
wire  read_position_write_enable_a;
wire [31:0] read_position_in_a;
wire [31:0] read_position_out_a;
wire  read_position_address_b;
wire  read_position_write_enable_b;
wire [31:0] read_position_in_b;
wire [31:0] read_position_out_b;
wire  current_read_byte_address_a;
wire  current_read_byte_write_enable_a;
wire [31:0] current_read_byte_in_a;
wire [31:0] current_read_byte_out_a;
wire  current_read_byte_address_b;
wire  current_read_byte_write_enable_b;
wire [31:0] current_read_byte_in_b;
wire [31:0] current_read_byte_out_b;
wire  p_jinfo_dc_dhuff_tbl_ml_address_a;
wire  p_jinfo_dc_dhuff_tbl_ml_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_a;
wire  p_jinfo_dc_dhuff_tbl_ml_address_b;
wire  p_jinfo_dc_dhuff_tbl_ml_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_a;
wire  p_jinfo_dc_dhuff_tbl_maxcode_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_b;
wire  p_jinfo_dc_dhuff_tbl_maxcode_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_a;
wire  p_jinfo_dc_dhuff_tbl_mincode_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_b;
wire  p_jinfo_dc_dhuff_tbl_mincode_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_b;
wire [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_a;
wire  p_jinfo_dc_dhuff_tbl_valptr_write_enable_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_a;
wire [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_b;
wire  p_jinfo_dc_dhuff_tbl_valptr_write_enable_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_b;
wire [4:0] extend_mask_address_a;
wire  extend_mask_write_enable_a;
wire [31:0] extend_mask_in_a;
wire [31:0] extend_mask_out_a;
wire [4:0] extend_mask_address_b;
wire  extend_mask_write_enable_b;
wire [31:0] extend_mask_in_b;
wire [31:0] extend_mask_out_b;
wire  p_jinfo_ac_dhuff_tbl_ml_address_a;
wire  p_jinfo_ac_dhuff_tbl_ml_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_a;
wire  p_jinfo_ac_dhuff_tbl_ml_address_b;
wire  p_jinfo_ac_dhuff_tbl_ml_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_a;
wire  p_jinfo_ac_dhuff_tbl_maxcode_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_b;
wire  p_jinfo_ac_dhuff_tbl_maxcode_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_a;
wire  p_jinfo_ac_dhuff_tbl_mincode_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_b;
wire  p_jinfo_ac_dhuff_tbl_mincode_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_b;
wire [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_a;
wire  p_jinfo_ac_dhuff_tbl_valptr_write_enable_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_a;
wire [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_b;
wire  p_jinfo_ac_dhuff_tbl_valptr_write_enable_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_b;
wire [1:0] OutData_comp_vpos_address_a;
wire  OutData_comp_vpos_write_enable_a;
wire [31:0] OutData_comp_vpos_in_a;
wire [31:0] OutData_comp_vpos_out_a;
wire [1:0] OutData_comp_vpos_address_b;
wire  OutData_comp_vpos_write_enable_b;
wire [31:0] OutData_comp_vpos_in_b;
wire [31:0] OutData_comp_vpos_out_b;
wire [1:0] OutData_comp_hpos_address_a;
wire  OutData_comp_hpos_write_enable_a;
wire [31:0] OutData_comp_hpos_in_a;
wire [31:0] OutData_comp_hpos_out_a;
wire [1:0] OutData_comp_hpos_address_b;
wire  OutData_comp_hpos_write_enable_b;
wire [31:0] OutData_comp_hpos_in_b;
wire [31:0] OutData_comp_hpos_out_b;
wire [12:0] JpegFileBuf_address_a;
wire  JpegFileBuf_write_enable_a;
wire [7:0] JpegFileBuf_in_a;
wire [7:0] JpegFileBuf_out_a;
wire [12:0] JpegFileBuf_address_b;
wire  JpegFileBuf_write_enable_b;
wire [7:0] JpegFileBuf_in_b;
wire [7:0] JpegFileBuf_out_b;
wire [8:0] huff_make_dhuff_tb_0_huffsize_address_a;
wire  huff_make_dhuff_tb_0_huffsize_write_enable_a;
wire [31:0] huff_make_dhuff_tb_0_huffsize_in_a;
wire [31:0] huff_make_dhuff_tb_0_huffsize_out_a;
wire [8:0] huff_make_dhuff_tb_0_huffsize_address_b;
wire  huff_make_dhuff_tb_0_huffsize_write_enable_b;
wire [31:0] huff_make_dhuff_tb_0_huffsize_in_b;
wire [31:0] huff_make_dhuff_tb_0_huffsize_out_b;
wire [8:0] huff_make_dhuff_tb_0_huffcode_address_a;
wire  huff_make_dhuff_tb_0_huffcode_write_enable_a;
wire [31:0] huff_make_dhuff_tb_0_huffcode_in_a;
wire [31:0] huff_make_dhuff_tb_0_huffcode_out_a;
wire [8:0] huff_make_dhuff_tb_0_huffcode_address_b;
wire  huff_make_dhuff_tb_0_huffcode_write_enable_b;
wire [31:0] huff_make_dhuff_tb_0_huffcode_in_b;
wire [31:0] huff_make_dhuff_tb_0_huffcode_out_b;
wire [5:0] main_0_QuantBuffiii_address_a;
wire  main_0_QuantBuffiii_write_enable_a;
wire [31:0] main_0_QuantBuffiii_in_a;
wire [31:0] main_0_QuantBuffiii_out_a;
wire [5:0] main_0_QuantBuffiii_address_b;
wire  main_0_QuantBuffiii_write_enable_b;
wire [31:0] main_0_QuantBuffiii_in_b;
wire [31:0] main_0_QuantBuffiii_out_b;
wire [7:0] main_0_HuffBuffii_address_a;
wire  main_0_HuffBuffii_write_enable_a;
wire [31:0] main_0_HuffBuffii_in_a;
wire [31:0] main_0_HuffBuffii_out_a;
wire [7:0] main_0_HuffBuffii_address_b;
wire  main_0_HuffBuffii_write_enable_b;
wire [31:0] main_0_HuffBuffii_in_b;
wire [31:0] main_0_HuffBuffii_out_b;
wire [8:0] main_0_IDCTBuffii_address_a;
wire  main_0_IDCTBuffii_write_enable_a;
wire [31:0] main_0_IDCTBuffii_in_a;
wire [31:0] main_0_IDCTBuffii_out_a;
wire [8:0] main_0_IDCTBuffii_address_b;
wire  main_0_IDCTBuffii_write_enable_b;
wire [31:0] main_0_IDCTBuffii_in_b;
wire [31:0] main_0_IDCTBuffii_out_b;
reg  huff_make_dhuff_tb_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_arg_p_xhtbl_bits;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_arg_p_dhtbl_maxcode;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_arg_p_dhtbl_mincode;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_arg_p_dhtbl_valptr;
wire  huff_make_dhuff_tb_memory_controller_enable_a;
wire  huff_make_dhuff_tb_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] huff_make_dhuff_tb_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] huff_make_dhuff_tb_memory_controller_out_a;
wire [1:0] huff_make_dhuff_tb_memory_controller_size_a;
wire  huff_make_dhuff_tb_memory_controller_enable_b;
wire  huff_make_dhuff_tb_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] huff_make_dhuff_tb_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] huff_make_dhuff_tb_memory_controller_out_b;
wire [1:0] huff_make_dhuff_tb_memory_controller_size_b;
reg  huff_make_dhuff_tb_memory_controller_waitrequest;
reg  huff_make_dhuff_tb_finish_final;
reg  huff_make_dhuff_tb_finish_reg;
wire  huff_make_dhuff_tb_finish;
wire [31:0] huff_make_dhuff_tb_return_val;
reg [31:0] huff_make_dhuff_tb_return_val_reg;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg  DecodeHuffMCU_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_arg_out_buf;
reg [31:0] DecodeHuffMCU_arg_num_cmp;
wire  DecodeHuffMCU_memory_controller_enable_a;
wire  DecodeHuffMCU_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] DecodeHuffMCU_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] DecodeHuffMCU_memory_controller_out_a;
wire [1:0] DecodeHuffMCU_memory_controller_size_a;
wire  DecodeHuffMCU_memory_controller_enable_b;
wire  DecodeHuffMCU_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffMCU_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] DecodeHuffMCU_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] DecodeHuffMCU_memory_controller_out_b;
wire [1:0] DecodeHuffMCU_memory_controller_size_b;
reg  DecodeHuffMCU_memory_controller_waitrequest;
reg  DecodeHuffMCU_finish_final;
reg  DecodeHuffMCU_finish_reg;
wire  DecodeHuffMCU_finish;
reg  ChenIDct_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_arg_x;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_arg_y;
wire  ChenIDct_memory_controller_enable_a;
wire  ChenIDct_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ChenIDct_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ChenIDct_memory_controller_out_a;
wire [1:0] ChenIDct_memory_controller_size_a;
wire  ChenIDct_memory_controller_enable_b;
wire  ChenIDct_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ChenIDct_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ChenIDct_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ChenIDct_memory_controller_out_b;
wire [1:0] ChenIDct_memory_controller_size_b;
reg  ChenIDct_memory_controller_waitrequest;
reg  ChenIDct_finish_final;
reg  ChenIDct_finish_reg;
wire  ChenIDct_finish;
reg  Write4Blocks_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_arg_store1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_arg_store2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_arg_store3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_arg_store4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_arg_p_out_vpos;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_arg_p_out_hpos;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_arg_p_out_buf;
wire  Write4Blocks_memory_controller_enable_a;
wire  Write4Blocks_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] Write4Blocks_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] Write4Blocks_memory_controller_out_a;
wire [1:0] Write4Blocks_memory_controller_size_a;
wire  Write4Blocks_memory_controller_enable_b;
wire  Write4Blocks_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] Write4Blocks_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] Write4Blocks_memory_controller_out_b;
wire [1:0] Write4Blocks_memory_controller_size_b;
reg  Write4Blocks_memory_controller_waitrequest;
reg  Write4Blocks_finish_final;
reg  Write4Blocks_finish_reg;
wire  Write4Blocks_finish;
reg [31:0] main_signed_divide_32_0_op0;
reg [31:0] main_signed_divide_32_0_op1;
wire [31:0] lpm_divide_main_read_markersexiti_494_temp_out;
wire [31:0] main_read_markersexiti_494_unused;
reg  lpm_divide_main_read_markersexiti_494_en;
reg [31:0] lpm_divide_main_read_markersexiti_494_out;
reg [31:0] main_signed_divide_32_0;
reg  lpm_divide_main_read_markersexiti_499_en;

/*   %494 = sdiv i32 %493, 8*/
lpm_divide lpm_divide_main_read_markersexiti_494 (
	.quotient (lpm_divide_main_read_markersexiti_494_temp_out),
	.remain (main_read_markersexiti_494_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_read_markersexiti_494_en),
	.numer (main_signed_divide_32_0_op0),
	.denom (main_signed_divide_32_0_op1)
);

defparam
	lpm_divide_main_read_markersexiti_494.lpm_pipeline = 32,
	lpm_divide_main_read_markersexiti_494.lpm_widthn = 32,
	lpm_divide_main_read_markersexiti_494.lpm_widthd = 32,
	lpm_divide_main_read_markersexiti_494.lpm_drepresentation = "SIGNED",
	lpm_divide_main_read_markersexiti_494.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_read_markersexiti_494.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


huff_make_dhuff_tb huff_make_dhuff_tb (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (huff_make_dhuff_tb_memory_controller_enable_a),
	.memory_controller_address_a (huff_make_dhuff_tb_memory_controller_address_a),
	.memory_controller_write_enable_a (huff_make_dhuff_tb_memory_controller_write_enable_a),
	.memory_controller_in_a (huff_make_dhuff_tb_memory_controller_in_a),
	.memory_controller_size_a (huff_make_dhuff_tb_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (huff_make_dhuff_tb_memory_controller_enable_b),
	.memory_controller_address_b (huff_make_dhuff_tb_memory_controller_address_b),
	.memory_controller_write_enable_b (huff_make_dhuff_tb_memory_controller_write_enable_b),
	.memory_controller_in_b (huff_make_dhuff_tb_memory_controller_in_b),
	.memory_controller_size_b (huff_make_dhuff_tb_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (huff_make_dhuff_tb_start),
	.finish (huff_make_dhuff_tb_finish),
	.return_val (huff_make_dhuff_tb_return_val),
	.arg_p_xhtbl_bits (huff_make_dhuff_tb_arg_p_xhtbl_bits),
	.arg_p_dhtbl_maxcode (huff_make_dhuff_tb_arg_p_dhtbl_maxcode),
	.arg_p_dhtbl_mincode (huff_make_dhuff_tb_arg_p_dhtbl_mincode),
	.arg_p_dhtbl_valptr (huff_make_dhuff_tb_arg_p_dhtbl_valptr)
);

defparam
	huff_make_dhuff_tb.tag_offset = tag_offset;


DecodeHuffMCU DecodeHuffMCU (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (DecodeHuffMCU_memory_controller_enable_a),
	.memory_controller_address_a (DecodeHuffMCU_memory_controller_address_a),
	.memory_controller_write_enable_a (DecodeHuffMCU_memory_controller_write_enable_a),
	.memory_controller_in_a (DecodeHuffMCU_memory_controller_in_a),
	.memory_controller_size_a (DecodeHuffMCU_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (DecodeHuffMCU_memory_controller_enable_b),
	.memory_controller_address_b (DecodeHuffMCU_memory_controller_address_b),
	.memory_controller_write_enable_b (DecodeHuffMCU_memory_controller_write_enable_b),
	.memory_controller_in_b (DecodeHuffMCU_memory_controller_in_b),
	.memory_controller_size_b (DecodeHuffMCU_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (DecodeHuffMCU_start),
	.finish (DecodeHuffMCU_finish),
	.arg_out_buf (DecodeHuffMCU_arg_out_buf),
	.arg_num_cmp (DecodeHuffMCU_arg_num_cmp)
);

defparam
	DecodeHuffMCU.tag_offset = tag_offset;


ChenIDct ChenIDct (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (ChenIDct_memory_controller_enable_a),
	.memory_controller_address_a (ChenIDct_memory_controller_address_a),
	.memory_controller_write_enable_a (ChenIDct_memory_controller_write_enable_a),
	.memory_controller_in_a (ChenIDct_memory_controller_in_a),
	.memory_controller_size_a (ChenIDct_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (ChenIDct_memory_controller_enable_b),
	.memory_controller_address_b (ChenIDct_memory_controller_address_b),
	.memory_controller_write_enable_b (ChenIDct_memory_controller_write_enable_b),
	.memory_controller_in_b (ChenIDct_memory_controller_in_b),
	.memory_controller_size_b (ChenIDct_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (ChenIDct_start),
	.finish (ChenIDct_finish),
	.arg_x (ChenIDct_arg_x),
	.arg_y (ChenIDct_arg_y)
);

defparam
	ChenIDct.tag_offset = tag_offset;


Write4Blocks Write4Blocks (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (Write4Blocks_memory_controller_enable_a),
	.memory_controller_address_a (Write4Blocks_memory_controller_address_a),
	.memory_controller_write_enable_a (Write4Blocks_memory_controller_write_enable_a),
	.memory_controller_in_a (Write4Blocks_memory_controller_in_a),
	.memory_controller_size_a (Write4Blocks_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (Write4Blocks_memory_controller_enable_b),
	.memory_controller_address_b (Write4Blocks_memory_controller_address_b),
	.memory_controller_write_enable_b (Write4Blocks_memory_controller_write_enable_b),
	.memory_controller_in_b (Write4Blocks_memory_controller_in_b),
	.memory_controller_size_b (Write4Blocks_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (Write4Blocks_start),
	.finish (Write4Blocks_finish),
	.arg_store1 (Write4Blocks_arg_store1),
	.arg_store2 (Write4Blocks_arg_store2),
	.arg_store3 (Write4Blocks_arg_store3),
	.arg_store4 (Write4Blocks_arg_store4),
	.arg_p_out_vpos (Write4Blocks_arg_p_out_vpos),
	.arg_p_out_hpos (Write4Blocks_arg_p_out_hpos),
	.arg_p_out_buf (Write4Blocks_arg_p_out_buf)
);

defparam
	Write4Blocks.tag_offset = tag_offset;

// Local Rams


// @hana_jpg = internal unnamed_addr constant [5207 x i8] c"\FF\D8\FF\E0\00\10JFIF\00\01\01\00\00\01\00\01\00\00\FF\DB\00C\00\03\02\02\02\02\02\03\02\02\02\03\03\03\03\04\06\04\04\04\04\04\08\06\06\05\06...
rom_dual_port hana_jpg (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( hana_jpg_address_a ),
	.address_b( hana_jpg_address_b ),
	.q_a( hana_jpg_out_a ),
	.q_b( hana_jpg_out_b )
);
defparam hana_jpg.width_a = 8;
defparam hana_jpg.width_b = 8;
defparam hana_jpg.widthad_a = 13;
defparam hana_jpg.widthad_b = 13;
defparam hana_jpg.numwords_a = 5207;
defparam hana_jpg.numwords_b = 5207;
defparam hana_jpg.latency = 1;
defparam hana_jpg.init_file = "hana_jpg.mif";


// @hana_bmp = internal unnamed_addr constant [3 x [5310 x i8]] [[5310 x i8] c"\BC\D1\BE\99\8Fg\95\C0\AC\9D\BD\C0\A4\C3\BC\B5\C1\A7\BC\D2\B1\8E%\0A\1F('4 \1D\22\0E\0A\12\0E\1A\07l\B5\BE\B5\7F[cI$\0B$B]ZA...
rom_dual_port hana_bmp (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( hana_bmp_address_a ),
	.address_b( hana_bmp_address_b ),
	.q_a( hana_bmp_out_a ),
	.q_b( hana_bmp_out_b )
);
defparam hana_bmp.width_a = 8;
defparam hana_bmp.width_b = 8;
defparam hana_bmp.widthad_a = 14;
defparam hana_bmp.widthad_b = 14;
defparam hana_bmp.numwords_a = 15930;
defparam hana_bmp.numwords_b = 15930;
defparam hana_bmp.latency = 1;
defparam hana_bmp.init_file = "hana_bmp.mif";


// @out_unread_marker = internal unnamed_addr constant [10 x i32] [i32 216, i32 224, i32 219, i32 219, i32 192, i32 196, i32 196, i32 196, i32 196, i32 218], align 4
rom_dual_port out_unread_marker (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( out_unread_marker_address_a ),
	.address_b( out_unread_marker_address_b ),
	.q_a( out_unread_marker_out_a ),
	.q_b( out_unread_marker_out_b )
);
defparam out_unread_marker.width_a = 32;
defparam out_unread_marker.width_b = 32;
defparam out_unread_marker.widthad_a = 4;
defparam out_unread_marker.widthad_b = 4;
defparam out_unread_marker.numwords_a = 10;
defparam out_unread_marker.numwords_b = 10;
defparam out_unread_marker.latency = 1;
defparam out_unread_marker.init_file = "out_unread_marker.mif";


// @out_index_get_sof = internal unnamed_addr constant [3 x i32] [i32 0, i32 1, i32 2], align 4
rom_dual_port out_index_get_sof (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( out_index_get_sof_address_a ),
	.address_b( out_index_get_sof_address_b ),
	.q_a( out_index_get_sof_out_a ),
	.q_b( out_index_get_sof_out_b )
);
defparam out_index_get_sof.width_a = 32;
defparam out_index_get_sof.width_b = 32;
defparam out_index_get_sof.widthad_a = 2;
defparam out_index_get_sof.widthad_b = 2;
defparam out_index_get_sof.numwords_a = 3;
defparam out_index_get_sof.numwords_b = 3;
defparam out_index_get_sof.latency = 1;
defparam out_index_get_sof.init_file = "out_index_get_sof.mif";


// @out_v_samp_factor_get_sof = internal unnamed_addr constant [3 x i32] [i32 2, i32 1, i32 1], align 4
rom_dual_port out_v_samp_factor_get_sof (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( out_v_samp_factor_get_sof_address_a ),
	.address_b( out_v_samp_factor_get_sof_address_b ),
	.q_a( out_v_samp_factor_get_sof_out_a ),
	.q_b( out_v_samp_factor_get_sof_out_b )
);
defparam out_v_samp_factor_get_sof.width_a = 32;
defparam out_v_samp_factor_get_sof.width_b = 32;
defparam out_v_samp_factor_get_sof.widthad_a = 2;
defparam out_v_samp_factor_get_sof.widthad_b = 2;
defparam out_v_samp_factor_get_sof.numwords_a = 3;
defparam out_v_samp_factor_get_sof.numwords_b = 3;
defparam out_v_samp_factor_get_sof.latency = 1;
defparam out_v_samp_factor_get_sof.init_file = "out_v_samp_factor_get_sof.mif";


// @out_comp_id_get_sos = internal unnamed_addr constant [3 x i32] [i32 1, i32 2, i32 3], align 4
rom_dual_port out_comp_id_get_sos (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( out_comp_id_get_sos_address_a ),
	.address_b( out_comp_id_get_sos_address_b ),
	.q_a( out_comp_id_get_sos_out_a ),
	.q_b( out_comp_id_get_sos_out_b )
);
defparam out_comp_id_get_sos.width_a = 32;
defparam out_comp_id_get_sos.width_b = 32;
defparam out_comp_id_get_sos.widthad_a = 2;
defparam out_comp_id_get_sos.widthad_b = 2;
defparam out_comp_id_get_sos.numwords_a = 3;
defparam out_comp_id_get_sos.numwords_b = 3;
defparam out_comp_id_get_sos.latency = 1;
defparam out_comp_id_get_sos.init_file = "out_comp_id_get_sos.mif";


// @out_ac_tbl_no_get_sos = internal unnamed_addr constant [3 x i32] [i32 0, i32 1, i32 1], align 4
rom_dual_port out_ac_tbl_no_get_sos (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( out_ac_tbl_no_get_sos_address_a ),
	.address_b( out_ac_tbl_no_get_sos_address_b ),
	.q_a( out_ac_tbl_no_get_sos_out_a ),
	.q_b( out_ac_tbl_no_get_sos_out_b )
);
defparam out_ac_tbl_no_get_sos.width_a = 32;
defparam out_ac_tbl_no_get_sos.width_b = 32;
defparam out_ac_tbl_no_get_sos.widthad_a = 2;
defparam out_ac_tbl_no_get_sos.widthad_b = 2;
defparam out_ac_tbl_no_get_sos.numwords_a = 3;
defparam out_ac_tbl_no_get_sos.numwords_b = 3;
defparam out_ac_tbl_no_get_sos.latency = 1;
defparam out_ac_tbl_no_get_sos.init_file = "out_ac_tbl_no_get_sos.mif";


// @out_length_get_dht = internal unnamed_addr constant [4 x i32] [i32 29, i32 179, i32 29, i32 179], align 4
rom_dual_port out_length_get_dht (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( out_length_get_dht_address_a ),
	.address_b( out_length_get_dht_address_b ),
	.q_a( out_length_get_dht_out_a ),
	.q_b( out_length_get_dht_out_b )
);
defparam out_length_get_dht.width_a = 32;
defparam out_length_get_dht.width_b = 32;
defparam out_length_get_dht.widthad_a = 2;
defparam out_length_get_dht.widthad_b = 2;
defparam out_length_get_dht.numwords_a = 4;
defparam out_length_get_dht.numwords_b = 4;
defparam out_length_get_dht.latency = 1;
defparam out_length_get_dht.init_file = "out_length_get_dht.mif";


// @out_index_get_dht = internal unnamed_addr constant [4 x i32] [i32 0, i32 16, i32 1, i32 17], align 4
rom_dual_port out_index_get_dht (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( out_index_get_dht_address_a ),
	.address_b( out_index_get_dht_address_b ),
	.q_a( out_index_get_dht_out_a ),
	.q_b( out_index_get_dht_out_b )
);
defparam out_index_get_dht.width_a = 32;
defparam out_index_get_dht.width_b = 32;
defparam out_index_get_dht.widthad_a = 2;
defparam out_index_get_dht.widthad_b = 2;
defparam out_index_get_dht.numwords_a = 4;
defparam out_index_get_dht.numwords_b = 4;
defparam out_index_get_dht.latency = 1;
defparam out_index_get_dht.init_file = "out_index_get_dht.mif";


// @out_count_get_dht = internal unnamed_addr constant [4 x i32] [i32 12, i32 162, i32 12, i32 162], align 4
rom_dual_port out_count_get_dht (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( out_count_get_dht_address_a ),
	.address_b( out_count_get_dht_address_b ),
	.q_a( out_count_get_dht_out_a ),
	.q_b( out_count_get_dht_out_b )
);
defparam out_count_get_dht.width_a = 32;
defparam out_count_get_dht.width_b = 32;
defparam out_count_get_dht.widthad_a = 2;
defparam out_count_get_dht.widthad_b = 2;
defparam out_count_get_dht.numwords_a = 4;
defparam out_count_get_dht.numwords_b = 4;
defparam out_count_get_dht.latency = 1;
defparam out_count_get_dht.init_file = "out_count_get_dht.mif";


// @out_length_get_dqt = internal unnamed_addr constant [2 x i32] [i32 65, i32 65], align 4
rom_dual_port out_length_get_dqt (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( out_length_get_dqt_address_a ),
	.address_b( out_length_get_dqt_address_b ),
	.q_a( out_length_get_dqt_out_a ),
	.q_b( out_length_get_dqt_out_b )
);
defparam out_length_get_dqt.width_a = 32;
defparam out_length_get_dqt.width_b = 32;
defparam out_length_get_dqt.widthad_a = 1;
defparam out_length_get_dqt.widthad_b = 1;
defparam out_length_get_dqt.numwords_a = 2;
defparam out_length_get_dqt.numwords_b = 2;
defparam out_length_get_dqt.latency = 1;
defparam out_length_get_dqt.init_file = "out_length_get_dqt.mif";


// @out_prec_get_dht = internal unnamed_addr constant [2 x i32] zeroinitializer, align 4
rom_dual_port out_prec_get_dht (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( out_prec_get_dht_address_a ),
	.address_b( out_prec_get_dht_address_b ),
	.q_a( out_prec_get_dht_out_a ),
	.q_b( out_prec_get_dht_out_b )
);
defparam out_prec_get_dht.width_a = 32;
defparam out_prec_get_dht.width_b = 32;
defparam out_prec_get_dht.widthad_a = 1;
defparam out_prec_get_dht.widthad_b = 1;
defparam out_prec_get_dht.numwords_a = 2;
defparam out_prec_get_dht.numwords_b = 2;
defparam out_prec_get_dht.latency = 1;
defparam out_prec_get_dht.init_file = "out_prec_get_dht.mif";


// @out_num_get_dht = internal unnamed_addr constant [2 x i32] [i32 0, i32 1], align 4
rom_dual_port out_num_get_dht (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( out_num_get_dht_address_a ),
	.address_b( out_num_get_dht_address_b ),
	.q_a( out_num_get_dht_out_a ),
	.q_b( out_num_get_dht_out_b )
);
defparam out_num_get_dht.width_a = 32;
defparam out_num_get_dht.width_b = 32;
defparam out_num_get_dht.widthad_a = 1;
defparam out_num_get_dht.widthad_b = 1;
defparam out_num_get_dht.numwords_a = 2;
defparam out_num_get_dht.numwords_b = 2;
defparam out_num_get_dht.latency = 1;
defparam out_num_get_dht.init_file = "out_num_get_dht.mif";


// @izigzag_index = internal unnamed_addr constant [64 x i32] [i32 0, i32 1, i32 8, i32 16, i32 9, i32 2, i32 3, i32 10, i32 17, i32 24, i32 32, i32 25, i32 18, i32 11, i32 4, i32 5, i32 12, i32 19, i32 ...
rom_dual_port izigzag_index (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( izigzag_index_address_a ),
	.address_b( izigzag_index_address_b ),
	.q_a( izigzag_index_out_a ),
	.q_b( izigzag_index_out_b )
);
defparam izigzag_index.width_a = 32;
defparam izigzag_index.width_b = 32;
defparam izigzag_index.widthad_a = 6;
defparam izigzag_index.widthad_b = 6;
defparam izigzag_index.numwords_a = 64;
defparam izigzag_index.numwords_b = 64;
defparam izigzag_index.latency = 1;
defparam izigzag_index.init_file = "izigzag_index.mif";


// @p_jinfo_comps_info_index = internal unnamed_addr global [3 x i8] zeroinitializer, align 1
ram_dual_port p_jinfo_comps_info_index (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_comps_info_index_address_a ),
	.address_b( p_jinfo_comps_info_index_address_b ),
	.wren_a( p_jinfo_comps_info_index_write_enable_a ),
	.wren_b( p_jinfo_comps_info_index_write_enable_b ),
	.data_a( p_jinfo_comps_info_index_in_a ),
	.data_b( p_jinfo_comps_info_index_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_comps_info_index_out_a ),
	.q_b( p_jinfo_comps_info_index_out_b )
);
defparam p_jinfo_comps_info_index.width_a = 8;
defparam p_jinfo_comps_info_index.width_b = 8;
defparam p_jinfo_comps_info_index.widthad_a = 2;
defparam p_jinfo_comps_info_index.widthad_b = 2;
defparam p_jinfo_comps_info_index.width_be_a = 1;
defparam p_jinfo_comps_info_index.width_be_b = 1;
defparam p_jinfo_comps_info_index.numwords_a = 3;
defparam p_jinfo_comps_info_index.numwords_b = 3;
defparam p_jinfo_comps_info_index.latency = 1;
defparam p_jinfo_comps_info_index.init_file = "p_jinfo_comps_info_index.mif";


// @p_jinfo_comps_info_id = internal unnamed_addr global [3 x i8] zeroinitializer, align 1
ram_dual_port p_jinfo_comps_info_id (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_comps_info_id_address_a ),
	.address_b( p_jinfo_comps_info_id_address_b ),
	.wren_a( p_jinfo_comps_info_id_write_enable_a ),
	.wren_b( p_jinfo_comps_info_id_write_enable_b ),
	.data_a( p_jinfo_comps_info_id_in_a ),
	.data_b( p_jinfo_comps_info_id_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_comps_info_id_out_a ),
	.q_b( p_jinfo_comps_info_id_out_b )
);
defparam p_jinfo_comps_info_id.width_a = 8;
defparam p_jinfo_comps_info_id.width_b = 8;
defparam p_jinfo_comps_info_id.widthad_a = 2;
defparam p_jinfo_comps_info_id.widthad_b = 2;
defparam p_jinfo_comps_info_id.width_be_a = 1;
defparam p_jinfo_comps_info_id.width_be_b = 1;
defparam p_jinfo_comps_info_id.numwords_a = 3;
defparam p_jinfo_comps_info_id.numwords_b = 3;
defparam p_jinfo_comps_info_id.latency = 1;
defparam p_jinfo_comps_info_id.init_file = "p_jinfo_comps_info_id.mif";


// @p_jinfo_comps_info_h_samp_factor = internal unnamed_addr global [3 x i8] zeroinitializer, align 1
ram_dual_port p_jinfo_comps_info_h_samp_factor (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_comps_info_h_samp_factor_address_a ),
	.address_b( p_jinfo_comps_info_h_samp_factor_address_b ),
	.wren_a( p_jinfo_comps_info_h_samp_factor_write_enable_a ),
	.wren_b( p_jinfo_comps_info_h_samp_factor_write_enable_b ),
	.data_a( p_jinfo_comps_info_h_samp_factor_in_a ),
	.data_b( p_jinfo_comps_info_h_samp_factor_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_comps_info_h_samp_factor_out_a ),
	.q_b( p_jinfo_comps_info_h_samp_factor_out_b )
);
defparam p_jinfo_comps_info_h_samp_factor.width_a = 8;
defparam p_jinfo_comps_info_h_samp_factor.width_b = 8;
defparam p_jinfo_comps_info_h_samp_factor.widthad_a = 2;
defparam p_jinfo_comps_info_h_samp_factor.widthad_b = 2;
defparam p_jinfo_comps_info_h_samp_factor.width_be_a = 1;
defparam p_jinfo_comps_info_h_samp_factor.width_be_b = 1;
defparam p_jinfo_comps_info_h_samp_factor.numwords_a = 3;
defparam p_jinfo_comps_info_h_samp_factor.numwords_b = 3;
defparam p_jinfo_comps_info_h_samp_factor.latency = 1;
defparam p_jinfo_comps_info_h_samp_factor.init_file = "p_jinfo_comps_info_h_samp_factor.mif";


// @p_jinfo_comps_info_v_samp_factor = internal unnamed_addr global [3 x i8] zeroinitializer, align 1
ram_dual_port p_jinfo_comps_info_v_samp_factor (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_comps_info_v_samp_factor_address_a ),
	.address_b( p_jinfo_comps_info_v_samp_factor_address_b ),
	.wren_a( p_jinfo_comps_info_v_samp_factor_write_enable_a ),
	.wren_b( p_jinfo_comps_info_v_samp_factor_write_enable_b ),
	.data_a( p_jinfo_comps_info_v_samp_factor_in_a ),
	.data_b( p_jinfo_comps_info_v_samp_factor_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_comps_info_v_samp_factor_out_a ),
	.q_b( p_jinfo_comps_info_v_samp_factor_out_b )
);
defparam p_jinfo_comps_info_v_samp_factor.width_a = 8;
defparam p_jinfo_comps_info_v_samp_factor.width_b = 8;
defparam p_jinfo_comps_info_v_samp_factor.widthad_a = 2;
defparam p_jinfo_comps_info_v_samp_factor.widthad_b = 2;
defparam p_jinfo_comps_info_v_samp_factor.width_be_a = 1;
defparam p_jinfo_comps_info_v_samp_factor.width_be_b = 1;
defparam p_jinfo_comps_info_v_samp_factor.numwords_a = 3;
defparam p_jinfo_comps_info_v_samp_factor.numwords_b = 3;
defparam p_jinfo_comps_info_v_samp_factor.latency = 1;
defparam p_jinfo_comps_info_v_samp_factor.init_file = "p_jinfo_comps_info_v_samp_factor.mif";


// @p_jinfo_comps_info_quant_tbl_no = internal unnamed_addr global [3 x i8] zeroinitializer, align 1
ram_dual_port p_jinfo_comps_info_quant_tbl_no (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_comps_info_quant_tbl_no_address_a ),
	.address_b( p_jinfo_comps_info_quant_tbl_no_address_b ),
	.wren_a( p_jinfo_comps_info_quant_tbl_no_write_enable_a ),
	.wren_b( p_jinfo_comps_info_quant_tbl_no_write_enable_b ),
	.data_a( p_jinfo_comps_info_quant_tbl_no_in_a ),
	.data_b( p_jinfo_comps_info_quant_tbl_no_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_comps_info_quant_tbl_no_out_a ),
	.q_b( p_jinfo_comps_info_quant_tbl_no_out_b )
);
defparam p_jinfo_comps_info_quant_tbl_no.width_a = 8;
defparam p_jinfo_comps_info_quant_tbl_no.width_b = 8;
defparam p_jinfo_comps_info_quant_tbl_no.widthad_a = 2;
defparam p_jinfo_comps_info_quant_tbl_no.widthad_b = 2;
defparam p_jinfo_comps_info_quant_tbl_no.width_be_a = 1;
defparam p_jinfo_comps_info_quant_tbl_no.width_be_b = 1;
defparam p_jinfo_comps_info_quant_tbl_no.numwords_a = 3;
defparam p_jinfo_comps_info_quant_tbl_no.numwords_b = 3;
defparam p_jinfo_comps_info_quant_tbl_no.latency = 1;
defparam p_jinfo_comps_info_quant_tbl_no.init_file = "p_jinfo_comps_info_quant_tbl_no.mif";


// @p_jinfo_comps_info_ac_tbl_no = internal unnamed_addr global [3 x i8] zeroinitializer, align 1
ram_dual_port p_jinfo_comps_info_ac_tbl_no (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_comps_info_ac_tbl_no_address_a ),
	.address_b( p_jinfo_comps_info_ac_tbl_no_address_b ),
	.wren_a( p_jinfo_comps_info_ac_tbl_no_write_enable_a ),
	.wren_b( p_jinfo_comps_info_ac_tbl_no_write_enable_b ),
	.data_a( p_jinfo_comps_info_ac_tbl_no_in_a ),
	.data_b( p_jinfo_comps_info_ac_tbl_no_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_comps_info_ac_tbl_no_out_a ),
	.q_b( p_jinfo_comps_info_ac_tbl_no_out_b )
);
defparam p_jinfo_comps_info_ac_tbl_no.width_a = 8;
defparam p_jinfo_comps_info_ac_tbl_no.width_b = 8;
defparam p_jinfo_comps_info_ac_tbl_no.widthad_a = 2;
defparam p_jinfo_comps_info_ac_tbl_no.widthad_b = 2;
defparam p_jinfo_comps_info_ac_tbl_no.width_be_a = 1;
defparam p_jinfo_comps_info_ac_tbl_no.width_be_b = 1;
defparam p_jinfo_comps_info_ac_tbl_no.numwords_a = 3;
defparam p_jinfo_comps_info_ac_tbl_no.numwords_b = 3;
defparam p_jinfo_comps_info_ac_tbl_no.latency = 1;
defparam p_jinfo_comps_info_ac_tbl_no.init_file = "p_jinfo_comps_info_ac_tbl_no.mif";


// @p_jinfo_quant_tbl_quantval = internal unnamed_addr global [4 x [64 x i32]] zeroinitializer, align 4
ram_dual_port p_jinfo_quant_tbl_quantval (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( p_jinfo_quant_tbl_quantval_address_a ),
	.address_b( p_jinfo_quant_tbl_quantval_address_b ),
	.wren_a( p_jinfo_quant_tbl_quantval_write_enable_a ),
	.wren_b( p_jinfo_quant_tbl_quantval_write_enable_b ),
	.data_a( p_jinfo_quant_tbl_quantval_in_a ),
	.data_b( p_jinfo_quant_tbl_quantval_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_quant_tbl_quantval_out_a ),
	.q_b( p_jinfo_quant_tbl_quantval_out_b )
);
defparam p_jinfo_quant_tbl_quantval.width_a = 32;
defparam p_jinfo_quant_tbl_quantval.width_b = 32;
defparam p_jinfo_quant_tbl_quantval.widthad_a = 8;
defparam p_jinfo_quant_tbl_quantval.widthad_b = 8;
defparam p_jinfo_quant_tbl_quantval.width_be_a = 1;
defparam p_jinfo_quant_tbl_quantval.width_be_b = 1;
defparam p_jinfo_quant_tbl_quantval.numwords_a = 256;
defparam p_jinfo_quant_tbl_quantval.numwords_b = 256;
defparam p_jinfo_quant_tbl_quantval.latency = 1;
defparam p_jinfo_quant_tbl_quantval.init_file = "p_jinfo_quant_tbl_quantval.mif";


// @zigzag_index = internal unnamed_addr constant [64 x i32] [i32 0, i32 1, i32 5, i32 6, i32 14, i32 15, i32 27, i32 28, i32 2, i32 4, i32 7, i32 13, i32 16, i32 26, i32 29, i32 42, i32 3, i32 8, i32 12...
rom_dual_port zigzag_index (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( zigzag_index_address_a ),
	.address_b( zigzag_index_address_b ),
	.q_a( zigzag_index_out_a ),
	.q_b( zigzag_index_out_b )
);
defparam zigzag_index.width_a = 32;
defparam zigzag_index.width_b = 32;
defparam zigzag_index.widthad_a = 6;
defparam zigzag_index.widthad_b = 6;
defparam zigzag_index.numwords_a = 64;
defparam zigzag_index.numwords_b = 64;
defparam zigzag_index.latency = 1;
defparam zigzag_index.init_file = "zigzag_index.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   %8 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @.str23, i32 0, i32 0), i32 216) #2*/
	if ((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_10)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("\nmarker = 0x%0x\n", $signed(32'd216));
		// to fix quartus warning
		if (reset == 1'b0 && ^(32'd216) === 1'bX) finish <= 0;
	end
	/* main: %.us-lcssa.us.i.i*/
	/*   %16 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @.str, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_uslcssausii_20)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Not Jpeg File!\n");
	end
	/* main: %.us-lcssa.us.i.i*/
	/*   tail call void @exit(i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB_uslcssausii_20)) begin
		$finish;
	end
	/* main: %next_marker.exit.i.i*/
	/*   %25 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @.str23, i32 0, i32 0), i32 %24) #2*/
	if ((cur_state == LEGUP_F_main_BB_next_markerexitii_34)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("\nmarker = 0x%0x\n", $signed(main_preheaderiii_24_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_preheaderiii_24_reg) === 1'bX) finish <= 0;
	end
	/* main: %32*/
	/*   %61 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str1, i32 0, i32 0), i32 %41) #2*/
	if ((cur_state == LEGUP_F_main_BB__32_52)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("length         = %d\n", $signed(main_32_41_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_32_41_reg) === 1'bX) finish <= 0;
	end
	/* main: %32*/
	/*   %63 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str2, i32 0, i32 0), i32 %62) #2*/
	if ((cur_state == LEGUP_F_main_BB__32_52)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("data_precision = %d\n", $signed(main_32_62_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_32_62_reg) === 1'bX) finish <= 0;
	end
	/* main: %32*/
	/*   %66 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str3, i32 0, i32 0), i32 %65) #2*/
	if ((cur_state == LEGUP_F_main_BB__32_52)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("image_height   = %d\n", $signed(main_32_65));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_32_65) === 1'bX) finish <= 0;
	end
	/* main: %32*/
	/*   %69 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str4, i32 0, i32 0), i32 %68) #2*/
	if ((cur_state == LEGUP_F_main_BB__32_53)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("image_width    = %d\n", $signed(main_32_68));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_32_68) === 1'bX) finish <= 0;
	end
	/* main: %32*/
	/*   %71 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str5, i32 0, i32 0), i32 %70) #2*/
	if ((cur_state == LEGUP_F_main_BB__32_53)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("num_components = %d\n", $signed(main_32_70_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_32_70_reg) === 1'bX) finish <= 0;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %110 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str6, i32 0, i32 0), i32 %109) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_95)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write(" index         = %d\n", $signed(main_lrphi2ii_109_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_lrphi2ii_109_reg) === 1'bX) finish <= 0;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %113 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str7, i32 0, i32 0), i32 %112) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_95)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write(" id            = %d\n", $signed(main_lrphi2ii_112_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_lrphi2ii_112_reg) === 1'bX) finish <= 0;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %116 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str8, i32 0, i32 0), i32 %115) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_95)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write(" h_samp_factor = %d\n", $signed(main_lrphi2ii_115_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_lrphi2ii_115_reg) === 1'bX) finish <= 0;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %119 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str9, i32 0, i32 0), i32 %118) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_95)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write(" v_samp_factor = %d\n", $signed(main_lrphi2ii_118_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_lrphi2ii_118_reg) === 1'bX) finish <= 0;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %122 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([22 x i8]* @.str10, i32 0, i32 0), i32 %121) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_96)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write(" quant_tbl_no  = %d\n\n", $signed(main_lrphi2ii_121));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_lrphi2ii_121) === 1'bX) finish <= 0;
	end
	/* main: %166*/
	/*   %167 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([27 x i8]* @.str11, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__166_130)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("\nSampling Factor is 4:1:1\n");
	end
	/* main: %168*/
	/*   %169 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([27 x i8]* @.str12, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__168_133)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("\nSampling Factor is 1:1:1\n");
	end
	/* main: %.us-lcssa4.i.i*/
	/*   %181 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str13, i32 0, i32 0), i32 %178) #2*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa4ii_137)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write(" length = %d\n", $signed(main_uslcssa4ii_178));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_uslcssa4ii_178) === 1'bX) finish <= 0;
	end
	/* main: %.us-lcssa4.i.i*/
	/*   %182 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @.str14, i32 0, i32 0), i32 %180) #2*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa4ii_137)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write(" num_comp = %d\n", $signed(main_uslcssa4ii_180));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_uslcssa4ii_180) === 1'bX) finish <= 0;
	end
	/* main: %._crit_edge.i6.i.i*/
	/*   %208 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str15, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei6ii_158)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Bad Component ID!\n");
	end
	/* main: %._crit_edge.i6.i.i*/
	/*   tail call void @exit(i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei6ii_158)) begin
		$finish;
	end
	/* main: %209*/
	/*   %216 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str16, i32 0, i32 0), i32 %198) #2*/
	if ((cur_state == LEGUP_F_main_BB__209_162)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write(" comp_id       = %d\n", $signed(main_lrph10iii_198_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_lrph10iii_198_reg) === 1'bX) finish <= 0;
	end
	/* main: %209*/
	/*   %219 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str17, i32 0, i32 0), i32 %218) #2*/
	if ((cur_state == LEGUP_F_main_BB__209_162)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write(" dc_tbl_no     = %d\n", $signed(main_209_218));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_209_218) === 1'bX) finish <= 0;
	end
	/* main: %209*/
	/*   %222 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str18, i32 0, i32 0), i32 %221) #2*/
	if ((cur_state == LEGUP_F_main_BB__209_162)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write(" ac_tbl_no     = %d\n", $signed(main_209_221_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_209_221_reg) === 1'bX) finish <= 0;
	end
	/* main: %246*/
	/*   %257 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str13, i32 0, i32 0), i32 %256) #2*/
	if ((cur_state == LEGUP_F_main_BB__246_187)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write(" length = %d\n", $signed(main_246_256));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_246_256) === 1'bX) finish <= 0;
	end
	/* main: %.lr.ph5.i.i.i*/
	/*   %270 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str19, i32 0, i32 0), i32 %269) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrph5iii_196)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write(" index = 0x%0x\n", $signed(main_lrph5iii_269));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_lrph5iii_269) === 1'bX) finish <= 0;
	end
	/* main: %286*/
	/*   %366 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str20, i32 0, i32 0), i32 %365) #2*/
	if ((cur_state == LEGUP_F_main_BB__286_253)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write(" count = %d\n", $signed(main_286_365_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_286_365_reg) === 1'bX) finish <= 0;
	end
	/* main: %428*/
	/*   %439 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str13, i32 0, i32 0), i32 %438) #2*/
	if ((cur_state == LEGUP_F_main_BB__428_276)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write(" length = %d\n", $signed(main_428_438));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_428_438) === 1'bX) finish <= 0;
	end
	/* main: %.lr.ph.i13.i.i*/
	/*   %455 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str21, i32 0, i32 0), i32 %453) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrphi13ii_285)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write(" prec = %d\n", $signed(main_lrphi13ii_453));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_lrphi13ii_453) === 1'bX) finish <= 0;
	end
	/* main: %.lr.ph.i13.i.i*/
	/*   %456 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str22, i32 0, i32 0), i32 %454) #2*/
	if ((cur_state == LEGUP_F_main_BB_lrphi13ii_285)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write(" num  = %d\n", $signed(main_lrphi13ii_454));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_lrphi13ii_454) === 1'bX) finish <= 0;
	end
	/* main: %510*/
	/*   %511 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str24, i32 0, i32 0), i32 %501) #2*/
	if ((cur_state == LEGUP_F_main_BB__510_365)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Decode 1:1:1 NumMCU = %d\n", $signed(main_read_markersexiti_501_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_read_markersexiti_501_reg) === 1'bX) finish <= 0;
	end
	/* main: %641*/
	/*   %642 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str25, i32 0, i32 0), i32 %501) #2*/
	if ((cur_state == LEGUP_F_main_BB__641_438)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Decode 4:1:1 NumMCU = %d\n", $signed(main_read_markersexiti_501_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_read_markersexiti_501_reg) === 1'bX) finish <= 0;
	end
	/* main: %jpeg2bmp_main.exit*/
	/*   %865 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str27, i32 0, i32 0), i32 %864) #2*/
	if ((cur_state == LEGUP_F_main_BB_jpeg2bmp_mainexit_656)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Result: %d\n", $signed(main_jpeg2bmp_mainexit_864_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_jpeg2bmp_mainexit_864_reg) === 1'bX) finish <= 0;
	end
	/* main: %868*/
	/*   %869 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str28, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__868_659)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("RESULT: PASS\n");
	end
	/* main: %870*/
	/*   %871 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str29, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__870_660)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
	if (reset)
		cur_state <= LEGUP_0;
	else if (memory_controller_waitrequest == 1'd1)
		cur_state <= cur_state;
	else
		cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB_IQuantizeexiti1ii_571:
		next_state = LEGUP_function_call_572;
LEGUP_F_main_BB_IQuantizeexiti1ii_573:
		next_state = LEGUP_F_main_BB__788_574;
LEGUP_F_main_BB_IQuantizeexiti20ii_487:
		next_state = LEGUP_function_call_488;
LEGUP_F_main_BB_IQuantizeexiti20ii_489:
		next_state = LEGUP_F_main_BB__698_490;
LEGUP_F_main_BB_IQuantizeexiti2ii_602:
		next_state = LEGUP_function_call_603;
LEGUP_F_main_BB_IQuantizeexiti2ii_604:
		next_state = LEGUP_F_main_BB__816_605;
LEGUP_F_main_BB_IQuantizeexiti32ii_518:
		next_state = LEGUP_function_call_519;
LEGUP_F_main_BB_IQuantizeexiti32ii_520:
		next_state = LEGUP_F_main_BB__726_521;
LEGUP_F_main_BB_IQuantizeexiti8ii_455:
		next_state = LEGUP_function_call_456;
LEGUP_F_main_BB_IQuantizeexiti8ii_457:
		next_state = LEGUP_F_main_BB__668_458;
LEGUP_F_main_BB_IQuantizeexitiii_381:
		next_state = LEGUP_function_call_382;
LEGUP_F_main_BB_IQuantizeexitiii_383:
		next_state = LEGUP_F_main_BB__538_384;
LEGUP_F_main_BB_IZigzagMatrixexiti17ii_481:
		next_state = LEGUP_F_main_BB_IZigzagMatrixexiti17ii_482;
LEGUP_F_main_BB_IZigzagMatrixexiti17ii_482:
		next_state = LEGUP_F_main_BB__692_483;
LEGUP_F_main_BB_IZigzagMatrixexiti1ii_565:
		next_state = LEGUP_F_main_BB_IZigzagMatrixexiti1ii_566;
LEGUP_F_main_BB_IZigzagMatrixexiti1ii_566:
		next_state = LEGUP_F_main_BB__782_567;
LEGUP_F_main_BB_IZigzagMatrixexiti29ii_512:
		next_state = LEGUP_F_main_BB_IZigzagMatrixexiti29ii_513;
LEGUP_F_main_BB_IZigzagMatrixexiti29ii_513:
		next_state = LEGUP_F_main_BB__720_514;
LEGUP_F_main_BB_IZigzagMatrixexiti2ii_596:
		next_state = LEGUP_F_main_BB_IZigzagMatrixexiti2ii_597;
LEGUP_F_main_BB_IZigzagMatrixexiti2ii_597:
		next_state = LEGUP_F_main_BB__810_598;
LEGUP_F_main_BB_IZigzagMatrixexiti5ii_449:
		next_state = LEGUP_F_main_BB_IZigzagMatrixexiti5ii_450;
LEGUP_F_main_BB_IZigzagMatrixexiti5ii_450:
		next_state = LEGUP_F_main_BB__662_451;
LEGUP_F_main_BB_IZigzagMatrixexitiii_375:
		next_state = LEGUP_F_main_BB_IZigzagMatrixexitiii_376;
LEGUP_F_main_BB_IZigzagMatrixexitiii_376:
		next_state = LEGUP_F_main_BB__532_377;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_463:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_464;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_464:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_465;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_465:
	if ((main_PostshiftIDctMatrixexiti11ii_675 == 1'd1))
		next_state = LEGUP_F_main_BB__676_466;
	else if ((main_PostshiftIDctMatrixexiti11ii_675 == 1'd0))
		next_state = LEGUP_F_main_BB__677_468;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti11iipreheader_462:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_463;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_579:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_580;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_580:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_581;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_581:
	if ((main_PostshiftIDctMatrixexiti1ii_795 == 1'd1))
		next_state = LEGUP_F_main_BB__799_585;
	else if ((main_PostshiftIDctMatrixexiti1ii_795 == 1'd0))
		next_state = LEGUP_F_main_BB__796_582;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti1iipreheader_578:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_579;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_495:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_496;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_496:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_497;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_497:
	if ((main_PostshiftIDctMatrixexiti23ii_705 == 1'd1))
		next_state = LEGUP_F_main_BB__706_498;
	else if ((main_PostshiftIDctMatrixexiti23ii_705 == 1'd0))
		next_state = LEGUP_F_main_BB__707_500;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti23iipreheader_494:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_495;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_610:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_611;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_611:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_612;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_612:
	if ((main_PostshiftIDctMatrixexiti2ii_823 == 1'd1))
		next_state = LEGUP_F_main_BB__827_616;
	else if ((main_PostshiftIDctMatrixexiti2ii_823 == 1'd0))
		next_state = LEGUP_F_main_BB__824_613;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti2iipreheader_609:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_610;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_526:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_527;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_527:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_528;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_528:
	if ((main_PostshiftIDctMatrixexiti35ii_733 == 1'd1))
		next_state = LEGUP_F_main_BB__734_529;
	else if ((main_PostshiftIDctMatrixexiti35ii_733 == 1'd0))
		next_state = LEGUP_F_main_BB__735_531;
LEGUP_F_main_BB_PostshiftIDctMatrixexiti35iipreheader_525:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_526;
LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_389:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_390;
LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_390:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_391;
LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_391:
	if ((main_PostshiftIDctMatrixexitiii_545 == 1'd1))
		next_state = LEGUP_F_main_BB__546_392;
	else if ((main_PostshiftIDctMatrixexitiii_545 == 1'd0))
		next_state = LEGUP_F_main_BB__547_394;
LEGUP_F_main_BB_PostshiftIDctMatrixexitiiipreheader_388:
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_389;
LEGUP_F_main_BB_WriteBlockexitii_436:
	if ((main_WriteBlockexitii_exitcond86 == 1'd1))
		next_state = LEGUP_F_main_BB__639_437;
	else if ((main_WriteBlockexitii_exitcond86 == 1'd0))
		next_state = LEGUP_F_main_BB__592_417;
LEGUP_F_main_BB_WriteOneBlockexitiii_431:
		next_state = LEGUP_F_main_BB_WriteOneBlockexitiii_432;
LEGUP_F_main_BB_WriteOneBlockexitiii_432:
		next_state = LEGUP_F_main_BB_WriteOneBlockexitiii_433;
LEGUP_F_main_BB_WriteOneBlockexitiii_433:
	if ((main_WriteOneBlockexitiii_636 == 1'd1))
		next_state = LEGUP_F_main_BB_WriteBlockexitii_436;
	else if ((main_WriteOneBlockexitiii_636 == 1'd0))
		next_state = LEGUP_F_main_BB__637_434;
LEGUP_F_main_BB_WriteOneBlockexitiiiloopexit_430:
		next_state = LEGUP_F_main_BB_WriteOneBlockexitiii_431;
LEGUP_F_main_BB_YuvToRgbexit45ii_559:
	if ((main_YuvToRgbexit45ii_exitcond159 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader48ii_536;
	else if ((main_YuvToRgbexit45ii_exitcond159 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader47ii_546;
LEGUP_F_main_BB_YuvToRgbexitpreheaderii_413:
		next_state = LEGUP_F_main_BB_YuvToRgbexitpreheaderii_414;
LEGUP_F_main_BB_YuvToRgbexitpreheaderii_414:
		next_state = LEGUP_F_main_BB_YuvToRgbexitpreheaderii_415;
LEGUP_F_main_BB_YuvToRgbexitpreheaderii_415:
		next_state = LEGUP_F_main_BB_YuvToRgbexitpreheaderii_416;
LEGUP_F_main_BB_YuvToRgbexitpreheaderii_416:
		next_state = LEGUP_F_main_BB__592_417;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_2:
		next_state = LEGUP_F_main_BB__1_3;
LEGUP_F_main_BB__127_100:
		next_state = LEGUP_F_main_BB__130_101;
LEGUP_F_main_BB__127_97:
		next_state = LEGUP_F_main_BB__127_98;
LEGUP_F_main_BB__127_98:
		next_state = LEGUP_F_main_BB__127_99;
LEGUP_F_main_BB__127_99:
		next_state = LEGUP_F_main_BB__127_100;
LEGUP_F_main_BB__130_101:
		next_state = LEGUP_F_main_BB__130_102;
LEGUP_F_main_BB__130_102:
	if ((main_130_134 == 1'd1))
		next_state = LEGUP_F_main_BB__135_103;
	else if ((main_130_134 == 1'd0))
		next_state = LEGUP_F_main_BB__138_107;
LEGUP_F_main_BB__135_103:
		next_state = LEGUP_F_main_BB__135_104;
LEGUP_F_main_BB__135_104:
		next_state = LEGUP_F_main_BB__135_105;
LEGUP_F_main_BB__135_105:
		next_state = LEGUP_F_main_BB__135_106;
LEGUP_F_main_BB__135_106:
		next_state = LEGUP_F_main_BB__138_107;
LEGUP_F_main_BB__138_107:
		next_state = LEGUP_F_main_BB__138_108;
LEGUP_F_main_BB__138_108:
	if ((main_138_142 == 1'd1))
		next_state = LEGUP_F_main_BB__143_109;
	else if ((main_138_142 == 1'd0))
		next_state = LEGUP_F_main_BB__146_113;
LEGUP_F_main_BB__143_109:
		next_state = LEGUP_F_main_BB__143_110;
LEGUP_F_main_BB__143_110:
		next_state = LEGUP_F_main_BB__143_111;
LEGUP_F_main_BB__143_111:
		next_state = LEGUP_F_main_BB__143_112;
LEGUP_F_main_BB__143_112:
		next_state = LEGUP_F_main_BB__146_113;
LEGUP_F_main_BB__146_113:
		next_state = LEGUP_F_main_BB__146_114;
LEGUP_F_main_BB__146_114:
	if ((main_146_149 == 1'd1))
		next_state = LEGUP_F_main_BB__150_115;
	else if ((main_146_149 == 1'd0))
		next_state = LEGUP_F_main_BB__153_119;
LEGUP_F_main_BB__150_115:
		next_state = LEGUP_F_main_BB__150_116;
LEGUP_F_main_BB__150_116:
		next_state = LEGUP_F_main_BB__150_117;
LEGUP_F_main_BB__150_117:
		next_state = LEGUP_F_main_BB__150_118;
LEGUP_F_main_BB__150_118:
		next_state = LEGUP_F_main_BB__153_119;
LEGUP_F_main_BB__153_119:
		next_state = LEGUP_F_main_BB__153_120;
LEGUP_F_main_BB__153_120:
	if ((main_153_157 == 1'd1))
		next_state = LEGUP_F_main_BB__158_121;
	else if ((main_153_157 == 1'd0))
		next_state = LEGUP_F_main_BB__161_125;
LEGUP_F_main_BB__158_121:
		next_state = LEGUP_F_main_BB__158_122;
LEGUP_F_main_BB__158_122:
		next_state = LEGUP_F_main_BB__158_123;
LEGUP_F_main_BB__158_123:
		next_state = LEGUP_F_main_BB__158_124;
LEGUP_F_main_BB__158_124:
		next_state = LEGUP_F_main_BB__161_125;
LEGUP_F_main_BB__161_125:
	if ((main_161_exitcond196 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edgeiiiloopexit_126;
	else if ((main_161_exitcond196 == 1'd0))
		next_state = LEGUP_F_main_BB_lrphi2ii_84;
LEGUP_F_main_BB__166_130:
		next_state = LEGUP_F_main_BB_loopexitipreheaderiiouterbackedge_131;
LEGUP_F_main_BB__168_133:
		next_state = LEGUP_F_main_BB_loopexitipreheaderiiouterbackedge_131;
LEGUP_F_main_BB__184_138:
		next_state = LEGUP_F_main_BB__184_139;
LEGUP_F_main_BB__184_139:
		next_state = LEGUP_F_main_BB__184_140;
LEGUP_F_main_BB__184_140:
		next_state = LEGUP_F_main_BB__184_141;
LEGUP_F_main_BB__184_141:
		next_state = LEGUP_F_main_BB__187_142;
LEGUP_F_main_BB__187_142:
	if ((main_uslcssa4ii_179_reg == 8'd3))
		next_state = LEGUP_F_main_BB_preheader2iiithread_143;
	else if ((main_uslcssa4ii_179_reg == 8'd0))
		next_state = LEGUP_F_main_BB_get_sosexitii_182;
	else if ((main_uslcssa4ii_179_reg != 8'd3) && (main_uslcssa4ii_179_reg != 8'd0))
		next_state = LEGUP_F_main_BB_lrph10iiipreheader_147;
LEGUP_F_main_BB__1_3:
		next_state = LEGUP_F_main_BB__1_4;
LEGUP_F_main_BB__1_4:
		next_state = LEGUP_F_main_BB__1_5;
LEGUP_F_main_BB__1_5:
	if ((main_1_exitcond209_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi_6;
	else if ((main_1_exitcond209_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_3;
LEGUP_F_main_BB__200_153:
	if ((main_200_203 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi4ii_154;
	else if ((main_200_203 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgei6iiloopexit_156;
LEGUP_F_main_BB__209_159:
		next_state = LEGUP_F_main_BB__209_160;
LEGUP_F_main_BB__209_160:
		next_state = LEGUP_F_main_BB__209_161;
LEGUP_F_main_BB__209_161:
		next_state = LEGUP_F_main_BB__209_162;
LEGUP_F_main_BB__209_162:
	if ((main_209_224_reg == 1'd1))
		next_state = LEGUP_F_main_BB__225_163;
	else if ((main_209_224_reg == 1'd0))
		next_state = LEGUP_F_main_BB__228_167;
LEGUP_F_main_BB__225_163:
		next_state = LEGUP_F_main_BB__225_164;
LEGUP_F_main_BB__225_164:
		next_state = LEGUP_F_main_BB__225_165;
LEGUP_F_main_BB__225_165:
		next_state = LEGUP_F_main_BB__225_166;
LEGUP_F_main_BB__225_166:
		next_state = LEGUP_F_main_BB__228_167;
LEGUP_F_main_BB__228_167:
		next_state = LEGUP_F_main_BB__228_168;
LEGUP_F_main_BB__228_168:
		next_state = LEGUP_F_main_BB__228_169;
LEGUP_F_main_BB__228_169:
	if ((main_228_232 == 1'd1))
		next_state = LEGUP_F_main_BB__233_170;
	else if ((main_228_232 == 1'd0))
		next_state = LEGUP_F_main_BB__236_174;
LEGUP_F_main_BB__233_170:
		next_state = LEGUP_F_main_BB__233_171;
LEGUP_F_main_BB__233_171:
		next_state = LEGUP_F_main_BB__233_172;
LEGUP_F_main_BB__233_172:
		next_state = LEGUP_F_main_BB__233_173;
LEGUP_F_main_BB__233_173:
		next_state = LEGUP_F_main_BB__236_174;
LEGUP_F_main_BB__236_174:
		next_state = LEGUP_F_main_BB__236_175;
LEGUP_F_main_BB__236_175:
	if ((main_236_239 == 1'd1))
		next_state = LEGUP_F_main_BB__240_176;
	else if ((main_236_239 == 1'd0))
		next_state = LEGUP_F_main_BB__243_180;
LEGUP_F_main_BB__240_176:
		next_state = LEGUP_F_main_BB__240_177;
LEGUP_F_main_BB__240_177:
		next_state = LEGUP_F_main_BB__240_178;
LEGUP_F_main_BB__240_178:
		next_state = LEGUP_F_main_BB__240_179;
LEGUP_F_main_BB__240_179:
		next_state = LEGUP_F_main_BB__243_180;
LEGUP_F_main_BB__243_180:
	if ((main_243_245 == 1'd1))
		next_state = LEGUP_F_main_BB_lrph10iii_148;
	else if ((main_243_245 == 1'd0))
		next_state = LEGUP_F_main_BB_get_sosexitiiloopexit_181;
LEGUP_F_main_BB__246_184:
		next_state = LEGUP_F_main_BB__246_185;
LEGUP_F_main_BB__246_185:
		next_state = LEGUP_F_main_BB__246_186;
LEGUP_F_main_BB__246_186:
		next_state = LEGUP_F_main_BB__246_187;
LEGUP_F_main_BB__246_187:
	if ((main_246_259 == 1'd1))
		next_state = LEGUP_F_main_BB__260_188;
	else if ((main_246_259 == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi7ii_192;
LEGUP_F_main_BB__260_188:
		next_state = LEGUP_F_main_BB__260_189;
LEGUP_F_main_BB__260_189:
		next_state = LEGUP_F_main_BB__260_190;
LEGUP_F_main_BB__260_190:
		next_state = LEGUP_F_main_BB__260_191;
LEGUP_F_main_BB__260_191:
		next_state = LEGUP_F_main_BB_preheaderi7ii_192;
LEGUP_F_main_BB__273_197:
		next_state = LEGUP_F_main_BB__273_198;
LEGUP_F_main_BB__273_198:
		next_state = LEGUP_F_main_BB__273_199;
LEGUP_F_main_BB__273_199:
		next_state = LEGUP_F_main_BB__273_200;
LEGUP_F_main_BB__273_200:
		next_state = LEGUP_F_main_BB__276_201;
LEGUP_F_main_BB__276_201:
	if ((main_276_278 == 1'd1))
		next_state = LEGUP_F_main_BB__283_204;
	else if ((main_276_278 == 1'd0))
		next_state = LEGUP_F_main_BB__279_202;
LEGUP_F_main_BB__279_202:
		next_state = LEGUP_F_main_BB__279_203;
LEGUP_F_main_BB__279_203:
		next_state = LEGUP_F_main_BB__286_205;
LEGUP_F_main_BB__283_204:
		next_state = LEGUP_F_main_BB__286_205;
LEGUP_F_main_BB__286_205:
		next_state = LEGUP_F_main_BB__286_206;
LEGUP_F_main_BB__286_206:
		next_state = LEGUP_F_main_BB__286_207;
LEGUP_F_main_BB__286_207:
		next_state = LEGUP_F_main_BB__286_208;
LEGUP_F_main_BB__286_208:
		next_state = LEGUP_F_main_BB__286_209;
LEGUP_F_main_BB__286_209:
		next_state = LEGUP_F_main_BB__286_210;
LEGUP_F_main_BB__286_210:
		next_state = LEGUP_F_main_BB__286_211;
LEGUP_F_main_BB__286_211:
		next_state = LEGUP_F_main_BB__286_212;
LEGUP_F_main_BB__286_212:
		next_state = LEGUP_F_main_BB__286_213;
LEGUP_F_main_BB__286_213:
		next_state = LEGUP_F_main_BB__286_214;
LEGUP_F_main_BB__286_214:
		next_state = LEGUP_F_main_BB__286_215;
LEGUP_F_main_BB__286_215:
		next_state = LEGUP_F_main_BB__286_216;
LEGUP_F_main_BB__286_216:
		next_state = LEGUP_F_main_BB__286_217;
LEGUP_F_main_BB__286_217:
		next_state = LEGUP_F_main_BB__286_218;
LEGUP_F_main_BB__286_218:
		next_state = LEGUP_F_main_BB__286_219;
LEGUP_F_main_BB__286_219:
		next_state = LEGUP_F_main_BB__286_220;
LEGUP_F_main_BB__286_220:
		next_state = LEGUP_F_main_BB__286_221;
LEGUP_F_main_BB__286_221:
		next_state = LEGUP_F_main_BB__286_222;
LEGUP_F_main_BB__286_222:
		next_state = LEGUP_F_main_BB__286_223;
LEGUP_F_main_BB__286_223:
		next_state = LEGUP_F_main_BB__286_224;
LEGUP_F_main_BB__286_224:
		next_state = LEGUP_F_main_BB__286_225;
LEGUP_F_main_BB__286_225:
		next_state = LEGUP_F_main_BB__286_226;
LEGUP_F_main_BB__286_226:
		next_state = LEGUP_F_main_BB__286_227;
LEGUP_F_main_BB__286_227:
		next_state = LEGUP_F_main_BB__286_228;
LEGUP_F_main_BB__286_228:
		next_state = LEGUP_F_main_BB__286_229;
LEGUP_F_main_BB__286_229:
		next_state = LEGUP_F_main_BB__286_230;
LEGUP_F_main_BB__286_230:
		next_state = LEGUP_F_main_BB__286_231;
LEGUP_F_main_BB__286_231:
		next_state = LEGUP_F_main_BB__286_232;
LEGUP_F_main_BB__286_232:
		next_state = LEGUP_F_main_BB__286_233;
LEGUP_F_main_BB__286_233:
		next_state = LEGUP_F_main_BB__286_234;
LEGUP_F_main_BB__286_234:
		next_state = LEGUP_F_main_BB__286_235;
LEGUP_F_main_BB__286_235:
		next_state = LEGUP_F_main_BB__286_236;
LEGUP_F_main_BB__286_236:
		next_state = LEGUP_F_main_BB__286_237;
LEGUP_F_main_BB__286_237:
		next_state = LEGUP_F_main_BB__286_238;
LEGUP_F_main_BB__286_238:
		next_state = LEGUP_F_main_BB__286_239;
LEGUP_F_main_BB__286_239:
		next_state = LEGUP_F_main_BB__286_240;
LEGUP_F_main_BB__286_240:
		next_state = LEGUP_F_main_BB__286_241;
LEGUP_F_main_BB__286_241:
		next_state = LEGUP_F_main_BB__286_242;
LEGUP_F_main_BB__286_242:
		next_state = LEGUP_F_main_BB__286_243;
LEGUP_F_main_BB__286_243:
		next_state = LEGUP_F_main_BB__286_244;
LEGUP_F_main_BB__286_244:
		next_state = LEGUP_F_main_BB__286_245;
LEGUP_F_main_BB__286_245:
		next_state = LEGUP_F_main_BB__286_246;
LEGUP_F_main_BB__286_246:
		next_state = LEGUP_F_main_BB__286_247;
LEGUP_F_main_BB__286_247:
		next_state = LEGUP_F_main_BB__286_248;
LEGUP_F_main_BB__286_248:
		next_state = LEGUP_F_main_BB__286_249;
LEGUP_F_main_BB__286_249:
		next_state = LEGUP_F_main_BB__286_250;
LEGUP_F_main_BB__286_250:
		next_state = LEGUP_F_main_BB__286_251;
LEGUP_F_main_BB__286_251:
		next_state = LEGUP_F_main_BB__286_252;
LEGUP_F_main_BB__286_252:
		next_state = LEGUP_F_main_BB__286_253;
LEGUP_F_main_BB__286_253:
	if ((main_286_368_reg == 1'd1))
		next_state = LEGUP_F_main_BB__369_254;
	else if ((main_286_368_reg == 1'd0))
		next_state = LEGUP_F_main_BB__372_258;
LEGUP_F_main_BB__28_36:
		next_state = LEGUP_F_main_BB__28_37;
LEGUP_F_main_BB__28_37:
		next_state = LEGUP_F_main_BB__28_38;
LEGUP_F_main_BB__28_38:
		next_state = LEGUP_F_main_BB__28_39;
LEGUP_F_main_BB__28_39:
		next_state = LEGUP_F_main_BB__31_40;
LEGUP_F_main_BB__31_40:
	if ((main_preheaderiii_24_reg == 32'd217))
		next_state = LEGUP_F_main_BB_read_markersexitiloopexit_311;
	else if ((main_preheaderiii_24_reg == 32'd192))
		next_state = LEGUP_F_main_BB__32_42;
	else if ((main_preheaderiii_24_reg == 32'd218))
		next_state = LEGUP_F_main_BB_uslcssa4ii_134;
	else if ((main_preheaderiii_24_reg == 32'd196))
		next_state = LEGUP_F_main_BB__246_184;
	else if ((main_preheaderiii_24_reg == 32'd219))
		next_state = LEGUP_F_main_BB__428_273;
	else if ((main_preheaderiii_24_reg != 32'd217) && (main_preheaderiii_24_reg != 32'd192) && (main_preheaderiii_24_reg != 32'd218) && (main_preheaderiii_24_reg != 32'd196) && (main_preheaderiii_24_reg != 32'd219))
		next_state = LEGUP_F_main_BB_loopexitipreheaderiibackedge_41;
LEGUP_F_main_BB__32_42:
		next_state = LEGUP_F_main_BB__32_43;
LEGUP_F_main_BB__32_43:
		next_state = LEGUP_F_main_BB__32_44;
LEGUP_F_main_BB__32_44:
		next_state = LEGUP_F_main_BB__32_45;
LEGUP_F_main_BB__32_45:
		next_state = LEGUP_F_main_BB__32_46;
LEGUP_F_main_BB__32_46:
		next_state = LEGUP_F_main_BB__32_47;
LEGUP_F_main_BB__32_47:
		next_state = LEGUP_F_main_BB__32_48;
LEGUP_F_main_BB__32_48:
		next_state = LEGUP_F_main_BB__32_49;
LEGUP_F_main_BB__32_49:
		next_state = LEGUP_F_main_BB__32_50;
LEGUP_F_main_BB__32_50:
		next_state = LEGUP_F_main_BB__32_51;
LEGUP_F_main_BB__32_51:
		next_state = LEGUP_F_main_BB__32_52;
LEGUP_F_main_BB__32_52:
		next_state = LEGUP_F_main_BB__32_53;
LEGUP_F_main_BB__32_53:
	if ((main_32_72_reg == 1'd1))
		next_state = LEGUP_F_main_BB__73_54;
	else if ((main_32_72_reg == 1'd0))
		next_state = LEGUP_F_main_BB__76_58;
LEGUP_F_main_BB__369_254:
		next_state = LEGUP_F_main_BB__369_255;
LEGUP_F_main_BB__369_255:
		next_state = LEGUP_F_main_BB__369_256;
LEGUP_F_main_BB__369_256:
		next_state = LEGUP_F_main_BB__369_257;
LEGUP_F_main_BB__369_257:
		next_state = LEGUP_F_main_BB__372_258;
LEGUP_F_main_BB__372_258:
	if ((main_372_374 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi8ii_259;
	else if ((main_372_374 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgei10ii_272;
LEGUP_F_main_BB__418_264:
		next_state = LEGUP_F_main_BB__418_265;
LEGUP_F_main_BB__418_265:
		next_state = LEGUP_F_main_BB__418_266;
LEGUP_F_main_BB__418_266:
		next_state = LEGUP_F_main_BB__418_267;
LEGUP_F_main_BB__418_267:
		next_state = LEGUP_F_main_BB__418_268;
LEGUP_F_main_BB__418_268:
	if ((main_418_exitcond179_reg == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edgei10iiloopexit_269;
	else if ((main_418_exitcond179_reg == 1'd0))
		next_state = LEGUP_F_main_BB__418_264;
LEGUP_F_main_BB__428_273:
		next_state = LEGUP_F_main_BB__428_274;
LEGUP_F_main_BB__428_274:
		next_state = LEGUP_F_main_BB__428_275;
LEGUP_F_main_BB__428_275:
		next_state = LEGUP_F_main_BB__428_276;
LEGUP_F_main_BB__428_276:
	if ((main_428_441 == 1'd1))
		next_state = LEGUP_F_main_BB__442_277;
	else if ((main_428_441 == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi11ii_281;
LEGUP_F_main_BB__442_277:
		next_state = LEGUP_F_main_BB__442_278;
LEGUP_F_main_BB__442_278:
		next_state = LEGUP_F_main_BB__442_279;
LEGUP_F_main_BB__442_279:
		next_state = LEGUP_F_main_BB__442_280;
LEGUP_F_main_BB__442_280:
		next_state = LEGUP_F_main_BB_preheaderi11ii_281;
LEGUP_F_main_BB__459_286:
		next_state = LEGUP_F_main_BB__459_287;
LEGUP_F_main_BB__459_287:
		next_state = LEGUP_F_main_BB__459_288;
LEGUP_F_main_BB__459_288:
		next_state = LEGUP_F_main_BB__459_289;
LEGUP_F_main_BB__459_289:
		next_state = LEGUP_F_main_BB__462_290;
LEGUP_F_main_BB__462_290:
		next_state = LEGUP_F_main_BB__462_291;
LEGUP_F_main_BB__462_291:
	if ((main_462_464 == 1'd1))
		next_state = LEGUP_F_main_BB__465_292;
	else if ((main_462_464 == 1'd0))
		next_state = LEGUP_F_main_BB__468_296;
LEGUP_F_main_BB__465_292:
		next_state = LEGUP_F_main_BB__465_293;
LEGUP_F_main_BB__465_293:
		next_state = LEGUP_F_main_BB__465_294;
LEGUP_F_main_BB__465_294:
		next_state = LEGUP_F_main_BB__465_295;
LEGUP_F_main_BB__465_295:
		next_state = LEGUP_F_main_BB__468_296;
LEGUP_F_main_BB__468_296:
	if ((main_468_469 == 1'd1))
		next_state = LEGUP_F_main_BB_splitusiiipreheader_298;
	else if ((main_468_469 == 1'd0))
		next_state = LEGUP_F_main_BB_split_crit_edgeiiipreheader_297;
LEGUP_F_main_BB__510_365:
	if ((main_510_512 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader46lrphii_366;
	else if ((main_510_512 == 1'd0))
		next_state = LEGUP_F_main_BB_decode_startexitipreheader_545;
LEGUP_F_main_BB__524_370:
		next_state = LEGUP_F_main_BB__524_371;
LEGUP_F_main_BB__524_371:
		next_state = LEGUP_F_main_BB__524_372;
LEGUP_F_main_BB__524_372:
		next_state = LEGUP_F_main_BB__524_373;
LEGUP_F_main_BB__524_373:
		next_state = LEGUP_F_main_BB__524_374;
LEGUP_F_main_BB__524_374:
	if ((main_524_exitcond19_reg == 1'd1))
		next_state = LEGUP_F_main_BB_IZigzagMatrixexitiii_375;
	else if ((main_524_exitcond19_reg == 1'd0))
		next_state = LEGUP_F_main_BB__524_370;
LEGUP_F_main_BB__532_377:
		next_state = LEGUP_F_main_BB__532_378;
LEGUP_F_main_BB__532_378:
		next_state = LEGUP_F_main_BB__532_379;
LEGUP_F_main_BB__532_379:
		next_state = LEGUP_F_main_BB__532_380;
LEGUP_F_main_BB__532_380:
	if ((main_532_537_reg == 1'd1))
		next_state = LEGUP_F_main_BB__532_377;
	else if ((main_532_537_reg == 1'd0))
		next_state = LEGUP_F_main_BB_IQuantizeexitiii_381;
LEGUP_F_main_BB__538_384:
		next_state = LEGUP_F_main_BB__538_385;
LEGUP_F_main_BB__538_385:
		next_state = LEGUP_F_main_BB__538_386;
LEGUP_F_main_BB__538_386:
		next_state = LEGUP_F_main_BB__538_387;
LEGUP_F_main_BB__538_387:
	if ((main_538_542_reg == 1'd1))
		next_state = LEGUP_F_main_BB__538_384;
	else if ((main_538_542_reg == 1'd0))
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexitiiipreheader_388;
LEGUP_F_main_BB__546_392:
		next_state = LEGUP_F_main_BB__546_393;
LEGUP_F_main_BB__546_393:
		next_state = LEGUP_F_main_BB__550_397;
LEGUP_F_main_BB__547_394:
	if ((main_547_548 == 1'd1))
		next_state = LEGUP_F_main_BB__549_395;
	else if ((main_547_548 == 1'd0))
		next_state = LEGUP_F_main_BB__550_397;
LEGUP_F_main_BB__549_395:
		next_state = LEGUP_F_main_BB__549_396;
LEGUP_F_main_BB__549_396:
		next_state = LEGUP_F_main_BB__550_397;
LEGUP_F_main_BB__550_397:
	if ((main_550_551 == 1'd1))
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_389;
	else if ((main_550_551 == 1'd0))
		next_state = LEGUP_F_main_BB_decode_blockexitii_398;
LEGUP_F_main_BB__571_405:
		next_state = LEGUP_F_main_BB__573_406;
LEGUP_F_main_BB__573_406:
	if ((main_573_574 == 1'd1))
		next_state = LEGUP_F_main_BB__577_408;
	else if ((main_573_574 == 1'd0))
		next_state = LEGUP_F_main_BB__575_407;
LEGUP_F_main_BB__575_407:
		next_state = LEGUP_F_main_BB__577_408;
LEGUP_F_main_BB__577_408:
	if ((main_577_578 == 1'd1))
		next_state = LEGUP_F_main_BB__581_410;
	else if ((main_577_578 == 1'd0))
		next_state = LEGUP_F_main_BB__579_409;
LEGUP_F_main_BB__579_409:
		next_state = LEGUP_F_main_BB__581_410;
LEGUP_F_main_BB__581_410:
		next_state = LEGUP_F_main_BB__581_411;
LEGUP_F_main_BB__581_411:
		next_state = LEGUP_F_main_BB__581_412;
LEGUP_F_main_BB__581_412:
	if ((main_581_exitcond65_reg == 1'd1))
		next_state = LEGUP_F_main_BB_YuvToRgbexitpreheaderii_413;
	else if ((main_581_exitcond65_reg == 1'd0))
		next_state = LEGUP_F_main_BB_decode_blockexit2ii_401;
LEGUP_F_main_BB__592_417:
		next_state = LEGUP_F_main_BB__592_418;
LEGUP_F_main_BB__592_418:
		next_state = LEGUP_F_main_BB__592_419;
LEGUP_F_main_BB__592_419:
	if ((main_592_orcondiii == 1'd1))
		next_state = LEGUP_F_main_BB_lrph8splitusiiii_420;
	else if ((main_592_orcondiii == 1'd0))
		next_state = LEGUP_F_main_BB_WriteOneBlockexitiii_431;
LEGUP_F_main_BB__625_423:
	if ((main_625_exitcond81 == 1'd1))
		next_state = LEGUP_F_main_BB_WriteOneBlockexitiiiloopexit_430;
	else if ((main_625_exitcond81 == 1'd0))
		next_state = LEGUP_F_main_BB_lrphusiiii_429;
LEGUP_F_main_BB__626_424:
		next_state = LEGUP_F_main_BB__626_425;
LEGUP_F_main_BB__626_425:
		next_state = LEGUP_F_main_BB__626_426;
LEGUP_F_main_BB__626_426:
		next_state = LEGUP_F_main_BB__626_427;
LEGUP_F_main_BB__626_427:
		next_state = LEGUP_F_main_BB__626_428;
LEGUP_F_main_BB__626_428:
	if ((main_626_exitcond74_reg == 1'd1))
		next_state = LEGUP_F_main_BB__625_423;
	else if ((main_626_exitcond74_reg == 1'd0))
		next_state = LEGUP_F_main_BB__626_424;
LEGUP_F_main_BB__637_434:
		next_state = LEGUP_F_main_BB__637_435;
LEGUP_F_main_BB__637_435:
		next_state = LEGUP_F_main_BB_WriteBlockexitii_436;
LEGUP_F_main_BB__639_437:
	if ((main_639_exitcond93 == 1'd1))
		next_state = LEGUP_F_main_BB_decode_startexitipreheaderloopexit_543;
	else if ((main_639_exitcond93 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader46ii_367;
LEGUP_F_main_BB__641_438:
	if ((main_641_643 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader49lrphii_439;
	else if ((main_641_643 == 1'd0))
		next_state = LEGUP_F_main_BB_decode_startexitipreheader_545;
LEGUP_F_main_BB__652_441:
		next_state = LEGUP_function_call_442;
LEGUP_F_main_BB__652_443:
		next_state = LEGUP_F_main_BB__654_444;
LEGUP_F_main_BB__654_444:
		next_state = LEGUP_F_main_BB__654_445;
LEGUP_F_main_BB__654_445:
		next_state = LEGUP_F_main_BB__654_446;
LEGUP_F_main_BB__654_446:
		next_state = LEGUP_F_main_BB__654_447;
LEGUP_F_main_BB__654_447:
		next_state = LEGUP_F_main_BB__654_448;
LEGUP_F_main_BB__654_448:
	if ((main_654_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_IZigzagMatrixexiti5ii_449;
	else if ((main_654_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB__654_444;
LEGUP_F_main_BB__662_451:
		next_state = LEGUP_F_main_BB__662_452;
LEGUP_F_main_BB__662_452:
		next_state = LEGUP_F_main_BB__662_453;
LEGUP_F_main_BB__662_453:
		next_state = LEGUP_F_main_BB__662_454;
LEGUP_F_main_BB__662_454:
	if ((main_662_667_reg == 1'd1))
		next_state = LEGUP_F_main_BB__662_451;
	else if ((main_662_667_reg == 1'd0))
		next_state = LEGUP_F_main_BB_IQuantizeexiti8ii_455;
LEGUP_F_main_BB__668_458:
		next_state = LEGUP_F_main_BB__668_459;
LEGUP_F_main_BB__668_459:
		next_state = LEGUP_F_main_BB__668_460;
LEGUP_F_main_BB__668_460:
		next_state = LEGUP_F_main_BB__668_461;
LEGUP_F_main_BB__668_461:
	if ((main_668_672_reg == 1'd1))
		next_state = LEGUP_F_main_BB__668_458;
	else if ((main_668_672_reg == 1'd0))
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti11iipreheader_462;
LEGUP_F_main_BB__676_466:
		next_state = LEGUP_F_main_BB__676_467;
LEGUP_F_main_BB__676_467:
		next_state = LEGUP_F_main_BB__680_471;
LEGUP_F_main_BB__677_468:
	if ((main_677_678 == 1'd1))
		next_state = LEGUP_F_main_BB__679_469;
	else if ((main_677_678 == 1'd0))
		next_state = LEGUP_F_main_BB__680_471;
LEGUP_F_main_BB__679_469:
		next_state = LEGUP_F_main_BB__679_470;
LEGUP_F_main_BB__679_470:
		next_state = LEGUP_F_main_BB__680_471;
LEGUP_F_main_BB__680_471:
	if ((main_680_681 == 1'd1))
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_463;
	else if ((main_680_681 == 1'd0))
		next_state = LEGUP_F_main_BB_decode_blockexit12ii_472;
LEGUP_F_main_BB__683_473:
		next_state = LEGUP_function_call_474;
LEGUP_F_main_BB__683_475:
		next_state = LEGUP_F_main_BB__684_476;
LEGUP_F_main_BB__684_476:
		next_state = LEGUP_F_main_BB__684_477;
LEGUP_F_main_BB__684_477:
		next_state = LEGUP_F_main_BB__684_478;
LEGUP_F_main_BB__684_478:
		next_state = LEGUP_F_main_BB__684_479;
LEGUP_F_main_BB__684_479:
		next_state = LEGUP_F_main_BB__684_480;
LEGUP_F_main_BB__684_480:
	if ((main_684_exitcond120_reg == 1'd1))
		next_state = LEGUP_F_main_BB_IZigzagMatrixexiti17ii_481;
	else if ((main_684_exitcond120_reg == 1'd0))
		next_state = LEGUP_F_main_BB__684_476;
LEGUP_F_main_BB__692_483:
		next_state = LEGUP_F_main_BB__692_484;
LEGUP_F_main_BB__692_484:
		next_state = LEGUP_F_main_BB__692_485;
LEGUP_F_main_BB__692_485:
		next_state = LEGUP_F_main_BB__692_486;
LEGUP_F_main_BB__692_486:
	if ((main_692_697_reg == 1'd1))
		next_state = LEGUP_F_main_BB__692_483;
	else if ((main_692_697_reg == 1'd0))
		next_state = LEGUP_F_main_BB_IQuantizeexiti20ii_487;
LEGUP_F_main_BB__698_490:
		next_state = LEGUP_F_main_BB__698_491;
LEGUP_F_main_BB__698_491:
		next_state = LEGUP_F_main_BB__698_492;
LEGUP_F_main_BB__698_492:
		next_state = LEGUP_F_main_BB__698_493;
LEGUP_F_main_BB__698_493:
	if ((main_698_702_reg == 1'd1))
		next_state = LEGUP_F_main_BB__698_490;
	else if ((main_698_702_reg == 1'd0))
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti23iipreheader_494;
LEGUP_F_main_BB__706_498:
		next_state = LEGUP_F_main_BB__706_499;
LEGUP_F_main_BB__706_499:
		next_state = LEGUP_F_main_BB__710_503;
LEGUP_F_main_BB__707_500:
	if ((main_707_708 == 1'd1))
		next_state = LEGUP_F_main_BB__709_501;
	else if ((main_707_708 == 1'd0))
		next_state = LEGUP_F_main_BB__710_503;
LEGUP_F_main_BB__709_501:
		next_state = LEGUP_F_main_BB__709_502;
LEGUP_F_main_BB__709_502:
		next_state = LEGUP_F_main_BB__710_503;
LEGUP_F_main_BB__710_503:
	if ((main_710_711 == 1'd1))
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_495;
	else if ((main_710_711 == 1'd0))
		next_state = LEGUP_F_main_BB_decode_blockexit24ii_504;
LEGUP_F_main_BB__712_507:
		next_state = LEGUP_F_main_BB__712_508;
LEGUP_F_main_BB__712_508:
		next_state = LEGUP_F_main_BB__712_509;
LEGUP_F_main_BB__712_509:
		next_state = LEGUP_F_main_BB__712_510;
LEGUP_F_main_BB__712_510:
		next_state = LEGUP_F_main_BB__712_511;
LEGUP_F_main_BB__712_511:
	if ((main_712_exitcond136_reg == 1'd1))
		next_state = LEGUP_F_main_BB_IZigzagMatrixexiti29ii_512;
	else if ((main_712_exitcond136_reg == 1'd0))
		next_state = LEGUP_F_main_BB__712_507;
LEGUP_F_main_BB__720_514:
		next_state = LEGUP_F_main_BB__720_515;
LEGUP_F_main_BB__720_515:
		next_state = LEGUP_F_main_BB__720_516;
LEGUP_F_main_BB__720_516:
		next_state = LEGUP_F_main_BB__720_517;
LEGUP_F_main_BB__720_517:
	if ((main_720_725_reg == 1'd1))
		next_state = LEGUP_F_main_BB__720_514;
	else if ((main_720_725_reg == 1'd0))
		next_state = LEGUP_F_main_BB_IQuantizeexiti32ii_518;
LEGUP_F_main_BB__726_521:
		next_state = LEGUP_F_main_BB__726_522;
LEGUP_F_main_BB__726_522:
		next_state = LEGUP_F_main_BB__726_523;
LEGUP_F_main_BB__726_523:
		next_state = LEGUP_F_main_BB__726_524;
LEGUP_F_main_BB__726_524:
	if ((main_726_730_reg == 1'd1))
		next_state = LEGUP_F_main_BB__726_521;
	else if ((main_726_730_reg == 1'd0))
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti35iipreheader_525;
LEGUP_F_main_BB__734_529:
		next_state = LEGUP_F_main_BB__734_530;
LEGUP_F_main_BB__734_530:
		next_state = LEGUP_F_main_BB__738_534;
LEGUP_F_main_BB__735_531:
	if ((main_735_736 == 1'd1))
		next_state = LEGUP_F_main_BB__737_532;
	else if ((main_735_736 == 1'd0))
		next_state = LEGUP_F_main_BB__738_534;
LEGUP_F_main_BB__737_532:
		next_state = LEGUP_F_main_BB__737_533;
LEGUP_F_main_BB__737_533:
		next_state = LEGUP_F_main_BB__738_534;
LEGUP_F_main_BB__738_534:
	if ((main_738_739 == 1'd1))
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_526;
	else if ((main_738_739 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader47iipreheader_535;
LEGUP_F_main_BB__73_54:
		next_state = LEGUP_F_main_BB__73_55;
LEGUP_F_main_BB__73_55:
		next_state = LEGUP_F_main_BB__73_56;
LEGUP_F_main_BB__73_56:
		next_state = LEGUP_F_main_BB__73_57;
LEGUP_F_main_BB__73_57:
		next_state = LEGUP_F_main_BB__76_58;
LEGUP_F_main_BB__741_547:
		next_state = LEGUP_F_main_BB__741_548;
LEGUP_F_main_BB__741_548:
		next_state = LEGUP_F_main_BB__741_549;
LEGUP_F_main_BB__741_549:
		next_state = LEGUP_F_main_BB__741_550;
LEGUP_F_main_BB__741_550:
	if ((main_741_760 == 1'd1))
		next_state = LEGUP_F_main_BB__763_552;
	else if ((main_741_760 == 1'd0))
		next_state = LEGUP_F_main_BB__761_551;
LEGUP_F_main_BB__761_551:
		next_state = LEGUP_F_main_BB__763_552;
LEGUP_F_main_BB__763_552:
	if ((main_763_764 == 1'd1))
		next_state = LEGUP_F_main_BB__767_554;
	else if ((main_763_764 == 1'd0))
		next_state = LEGUP_F_main_BB__765_553;
LEGUP_F_main_BB__765_553:
		next_state = LEGUP_F_main_BB__767_554;
LEGUP_F_main_BB__767_554:
	if ((main_767_768 == 1'd1))
		next_state = LEGUP_F_main_BB__771_556;
	else if ((main_767_768 == 1'd0))
		next_state = LEGUP_F_main_BB__769_555;
LEGUP_F_main_BB__769_555:
		next_state = LEGUP_F_main_BB__771_556;
LEGUP_F_main_BB__76_58:
	if ((main_76_77 == 1'd1))
		next_state = LEGUP_F_main_BB__78_59;
	else if ((main_76_77 == 1'd0))
		next_state = LEGUP_F_main_BB__81_63;
LEGUP_F_main_BB__771_556:
		next_state = LEGUP_F_main_BB__771_557;
LEGUP_F_main_BB__771_557:
		next_state = LEGUP_F_main_BB__771_558;
LEGUP_F_main_BB__771_558:
	if ((main_771_exitcond152_reg == 1'd1))
		next_state = LEGUP_F_main_BB_YuvToRgbexit45ii_559;
	else if ((main_771_exitcond152_reg == 1'd0))
		next_state = LEGUP_F_main_BB__741_547;
LEGUP_F_main_BB__774_560:
		next_state = LEGUP_F_main_BB__774_561;
LEGUP_F_main_BB__774_561:
		next_state = LEGUP_F_main_BB__774_562;
LEGUP_F_main_BB__774_562:
		next_state = LEGUP_F_main_BB__774_563;
LEGUP_F_main_BB__774_563:
		next_state = LEGUP_F_main_BB__774_564;
LEGUP_F_main_BB__774_564:
	if ((main_774_exitcond33_reg == 1'd1))
		next_state = LEGUP_F_main_BB_IZigzagMatrixexiti1ii_565;
	else if ((main_774_exitcond33_reg == 1'd0))
		next_state = LEGUP_F_main_BB__774_560;
LEGUP_F_main_BB__782_567:
		next_state = LEGUP_F_main_BB__782_568;
LEGUP_F_main_BB__782_568:
		next_state = LEGUP_F_main_BB__782_569;
LEGUP_F_main_BB__782_569:
		next_state = LEGUP_F_main_BB__782_570;
LEGUP_F_main_BB__782_570:
	if ((main_782_787_reg == 1'd1))
		next_state = LEGUP_F_main_BB__782_567;
	else if ((main_782_787_reg == 1'd0))
		next_state = LEGUP_F_main_BB_IQuantizeexiti1ii_571;
LEGUP_F_main_BB__788_574:
		next_state = LEGUP_F_main_BB__788_575;
LEGUP_F_main_BB__788_575:
		next_state = LEGUP_F_main_BB__788_576;
LEGUP_F_main_BB__788_576:
		next_state = LEGUP_F_main_BB__788_577;
LEGUP_F_main_BB__788_577:
	if ((main_788_792_reg == 1'd1))
		next_state = LEGUP_F_main_BB__788_574;
	else if ((main_788_792_reg == 1'd0))
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti1iipreheader_578;
LEGUP_F_main_BB__78_59:
		next_state = LEGUP_F_main_BB__78_60;
LEGUP_F_main_BB__78_60:
		next_state = LEGUP_F_main_BB__78_61;
LEGUP_F_main_BB__78_61:
		next_state = LEGUP_F_main_BB__78_62;
LEGUP_F_main_BB__78_62:
		next_state = LEGUP_F_main_BB__81_63;
LEGUP_F_main_BB__796_582:
	if ((main_796_797 == 1'd1))
		next_state = LEGUP_F_main_BB__798_583;
	else if ((main_796_797 == 1'd0))
		next_state = LEGUP_F_main_BB__800_587;
LEGUP_F_main_BB__798_583:
		next_state = LEGUP_F_main_BB__798_584;
LEGUP_F_main_BB__798_584:
		next_state = LEGUP_F_main_BB__800_587;
LEGUP_F_main_BB__799_585:
		next_state = LEGUP_F_main_BB__799_586;
LEGUP_F_main_BB__799_586:
		next_state = LEGUP_F_main_BB__800_587;
LEGUP_F_main_BB__800_587:
	if ((main_800_801 == 1'd1))
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_579;
	else if ((main_800_801 == 1'd0))
		next_state = LEGUP_F_main_BB_decode_blockexit1ii_588;
LEGUP_F_main_BB__802_591:
		next_state = LEGUP_F_main_BB__802_592;
LEGUP_F_main_BB__802_592:
		next_state = LEGUP_F_main_BB__802_593;
LEGUP_F_main_BB__802_593:
		next_state = LEGUP_F_main_BB__802_594;
LEGUP_F_main_BB__802_594:
		next_state = LEGUP_F_main_BB__802_595;
LEGUP_F_main_BB__802_595:
	if ((main_802_exitcond49_reg == 1'd1))
		next_state = LEGUP_F_main_BB_IZigzagMatrixexiti2ii_596;
	else if ((main_802_exitcond49_reg == 1'd0))
		next_state = LEGUP_F_main_BB__802_591;
LEGUP_F_main_BB__810_598:
		next_state = LEGUP_F_main_BB__810_599;
LEGUP_F_main_BB__810_599:
		next_state = LEGUP_F_main_BB__810_600;
LEGUP_F_main_BB__810_600:
		next_state = LEGUP_F_main_BB__810_601;
LEGUP_F_main_BB__810_601:
	if ((main_810_815_reg == 1'd1))
		next_state = LEGUP_F_main_BB__810_598;
	else if ((main_810_815_reg == 1'd0))
		next_state = LEGUP_F_main_BB_IQuantizeexiti2ii_602;
LEGUP_F_main_BB__816_605:
		next_state = LEGUP_F_main_BB__816_606;
LEGUP_F_main_BB__816_606:
		next_state = LEGUP_F_main_BB__816_607;
LEGUP_F_main_BB__816_607:
		next_state = LEGUP_F_main_BB__816_608;
LEGUP_F_main_BB__816_608:
	if ((main_816_820_reg == 1'd1))
		next_state = LEGUP_F_main_BB__816_605;
	else if ((main_816_820_reg == 1'd0))
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti2iipreheader_609;
LEGUP_F_main_BB__81_63:
		next_state = LEGUP_F_main_BB__81_64;
LEGUP_F_main_BB__81_64:
		next_state = LEGUP_F_main_BB__81_65;
LEGUP_F_main_BB__81_65:
	if ((main_81_83 == 1'd1))
		next_state = LEGUP_F_main_BB__84_66;
	else if ((main_81_83 == 1'd0))
		next_state = LEGUP_F_main_BB__87_70;
LEGUP_F_main_BB__824_613:
	if ((main_824_825 == 1'd1))
		next_state = LEGUP_F_main_BB__826_614;
	else if ((main_824_825 == 1'd0))
		next_state = LEGUP_F_main_BB__828_618;
LEGUP_F_main_BB__826_614:
		next_state = LEGUP_F_main_BB__826_615;
LEGUP_F_main_BB__826_615:
		next_state = LEGUP_F_main_BB__828_618;
LEGUP_F_main_BB__827_616:
		next_state = LEGUP_F_main_BB__827_617;
LEGUP_F_main_BB__827_617:
		next_state = LEGUP_F_main_BB__828_618;
LEGUP_F_main_BB__828_618:
	if ((main_828_829 == 1'd1))
		next_state = LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_610;
	else if ((main_828_829 == 1'd0))
		next_state = LEGUP_F_main_BB_decode_blockexit2iipreheader_619;
LEGUP_F_main_BB__833_623:
		next_state = LEGUP_F_main_BB__833_624;
LEGUP_F_main_BB__833_624:
		next_state = LEGUP_F_main_BB__833_625;
LEGUP_F_main_BB__833_625:
		next_state = LEGUP_F_main_BB__833_626;
LEGUP_F_main_BB__833_626:
		next_state = LEGUP_F_main_BB__836_627;
LEGUP_F_main_BB__836_627:
	if ((main_836_exitcond16 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader16ipreheader_628;
	else if ((main_836_exitcond16 == 1'd0))
		next_state = LEGUP_F_main_BB_decode_startexiti_620;
LEGUP_F_main_BB__838_629:
		next_state = LEGUP_F_main_BB__838_630;
LEGUP_F_main_BB__838_630:
		next_state = LEGUP_F_main_BB__838_631;
LEGUP_F_main_BB__838_631:
		next_state = LEGUP_F_main_BB__838_632;
LEGUP_F_main_BB__838_632:
		next_state = LEGUP_F_main_BB__841_633;
LEGUP_F_main_BB__841_633:
		next_state = LEGUP_F_main_BB__841_634;
LEGUP_F_main_BB__841_634:
		next_state = LEGUP_F_main_BB__841_635;
LEGUP_F_main_BB__841_635:
	if ((main_841_842_reg == 1'd1))
		next_state = LEGUP_F_main_BB__844_636;
	else if ((main_841_842_reg == 1'd0))
		next_state = LEGUP_F_main_BB_jpeg2bmp_mainexit_656;
LEGUP_F_main_BB__844_636:
		next_state = LEGUP_F_main_BB__844_637;
LEGUP_F_main_BB__844_637:
		next_state = LEGUP_F_main_BB_jpeg2bmp_mainexit_656;
LEGUP_F_main_BB__849_641:
		next_state = LEGUP_F_main_BB__849_642;
LEGUP_F_main_BB__849_642:
		next_state = LEGUP_F_main_BB__849_643;
LEGUP_F_main_BB__849_643:
		next_state = LEGUP_F_main_BB__849_644;
LEGUP_F_main_BB__849_644:
		next_state = LEGUP_F_main_BB__852_645;
LEGUP_F_main_BB__84_66:
		next_state = LEGUP_F_main_BB__84_67;
LEGUP_F_main_BB__84_67:
		next_state = LEGUP_F_main_BB__84_68;
LEGUP_F_main_BB__84_68:
		next_state = LEGUP_F_main_BB__84_69;
LEGUP_F_main_BB__84_69:
		next_state = LEGUP_F_main_BB__87_70;
LEGUP_F_main_BB__852_645:
	if ((main_852_exitcond13 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader27ipreheader_646;
	else if ((main_852_exitcond13 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader16i_638;
LEGUP_F_main_BB__857_650:
		next_state = LEGUP_F_main_BB__857_651;
LEGUP_F_main_BB__857_651:
		next_state = LEGUP_F_main_BB__857_652;
LEGUP_F_main_BB__857_652:
		next_state = LEGUP_F_main_BB__857_653;
LEGUP_F_main_BB__857_653:
		next_state = LEGUP_F_main_BB__860_654;
LEGUP_F_main_BB__860_654:
	if ((main_860_exitcond11 == 1'd1))
		next_state = LEGUP_F_main_BB__862_655;
	else if ((main_860_exitcond11 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader27i_647;
LEGUP_F_main_BB__862_655:
	if ((main_862_863 == 1'd1))
		next_state = LEGUP_F_main_BB__838_629;
	else if ((main_862_863 == 1'd0))
		next_state = LEGUP_F_main_BB__841_633;
LEGUP_F_main_BB__868_659:
		next_state = LEGUP_F_main_BB__872_661;
LEGUP_F_main_BB__870_660:
		next_state = LEGUP_F_main_BB__872_661;
LEGUP_F_main_BB__872_661:
		next_state = LEGUP_F_main_BB__872_662;
LEGUP_F_main_BB__872_662:
		next_state = LEGUP_F_main_BB__872_663;
LEGUP_F_main_BB__872_663:
		next_state = LEGUP_0;
LEGUP_F_main_BB__87_70:
		next_state = LEGUP_F_main_BB__87_71;
LEGUP_F_main_BB__87_71:
		next_state = LEGUP_F_main_BB__87_72;
LEGUP_F_main_BB__87_72:
	if ((main_87_89 == 1'd1))
		next_state = LEGUP_F_main_BB__90_73;
	else if ((main_87_89 == 1'd0))
		next_state = LEGUP_F_main_BB__93_77;
LEGUP_F_main_BB__90_73:
		next_state = LEGUP_F_main_BB__90_74;
LEGUP_F_main_BB__90_74:
		next_state = LEGUP_F_main_BB__90_75;
LEGUP_F_main_BB__90_75:
		next_state = LEGUP_F_main_BB__90_76;
LEGUP_F_main_BB__90_76:
		next_state = LEGUP_F_main_BB__93_77;
LEGUP_F_main_BB__93_77:
	if ((main_93_94 == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi1iithread_78;
	else if ((main_93_94 == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi1ii_82;
LEGUP_F_main_BB__crit_edgei10ii_272:
	if ((main__crit_edgei10ii_427 == 1'd1))
		next_state = LEGUP_F_main_BB_lrph5iii_194;
	else if ((main__crit_edgei10ii_427 == 1'd0))
		next_state = LEGUP_F_main_BB_loopexitipreheaderiiouter29loopexit_16;
LEGUP_F_main_BB__crit_edgei10iiloopexit_269:
		next_state = LEGUP_F_main_BB__crit_edgei10iiloopexit_270;
LEGUP_F_main_BB__crit_edgei10iiloopexit_270:
		next_state = LEGUP_F_main_BB__crit_edgei10iiloopexit_271;
LEGUP_F_main_BB__crit_edgei10iiloopexit_271:
		next_state = LEGUP_F_main_BB__crit_edgei10ii_272;
LEGUP_F_main_BB__crit_edgei6ii_158:
		next_state = LEGUP_0;
LEGUP_F_main_BB__crit_edgei6iiloopexit2_157:
		next_state = LEGUP_F_main_BB__crit_edgei6ii_158;
LEGUP_F_main_BB__crit_edgei6iiloopexit_156:
		next_state = LEGUP_F_main_BB__crit_edgei6ii_158;
LEGUP_F_main_BB__crit_edgeiii_128:
		next_state = LEGUP_F_main_BB__crit_edgeiii_129;
LEGUP_F_main_BB__crit_edgeiii_129:
	if ((main__crit_edgeiii_165 == 1'd1))
		next_state = LEGUP_F_main_BB__166_130;
	else if ((main__crit_edgeiii_165 == 1'd0))
		next_state = LEGUP_F_main_BB__168_133;
LEGUP_F_main_BB__crit_edgeiiiloopexit_126:
		next_state = LEGUP_F_main_BB__crit_edgeiiiloopexit_127;
LEGUP_F_main_BB__crit_edgeiiiloopexit_127:
		next_state = LEGUP_F_main_BB__crit_edgeiii_128;
LEGUP_F_main_BB_decode_blockexit12ii_472:
	if ((main_decode_blockexit12ii_exitcond113 == 1'd1))
		next_state = LEGUP_F_main_BB__683_473;
	else if ((main_decode_blockexit12ii_exitcond113 == 1'd0))
		next_state = LEGUP_F_main_BB__652_441;
LEGUP_F_main_BB_decode_blockexit1ii_588:
		next_state = LEGUP_function_call_589;
LEGUP_F_main_BB_decode_blockexit1ii_590:
		next_state = LEGUP_F_main_BB__802_591;
LEGUP_F_main_BB_decode_blockexit24ii_504:
		next_state = LEGUP_function_call_505;
LEGUP_F_main_BB_decode_blockexit24ii_506:
		next_state = LEGUP_F_main_BB__712_507;
LEGUP_F_main_BB_decode_blockexit2ii_401:
		next_state = LEGUP_F_main_BB_decode_blockexit2ii_402;
LEGUP_F_main_BB_decode_blockexit2ii_402:
		next_state = LEGUP_F_main_BB_decode_blockexit2ii_403;
LEGUP_F_main_BB_decode_blockexit2ii_403:
		next_state = LEGUP_F_main_BB_decode_blockexit2ii_404;
LEGUP_F_main_BB_decode_blockexit2ii_404:
	if ((main_decode_blockexit2ii_570 == 1'd1))
		next_state = LEGUP_F_main_BB__573_406;
	else if ((main_decode_blockexit2ii_570 == 1'd0))
		next_state = LEGUP_F_main_BB__571_405;
LEGUP_F_main_BB_decode_blockexit2iipreheader_619:
		next_state = LEGUP_F_main_BB_decode_blockexit2ii_401;
LEGUP_F_main_BB_decode_blockexitii_398:
		next_state = LEGUP_function_call_399;
LEGUP_F_main_BB_decode_blockexitii_400:
		next_state = LEGUP_F_main_BB__774_560;
LEGUP_F_main_BB_decode_startexiti_620:
		next_state = LEGUP_F_main_BB_decode_startexiti_621;
LEGUP_F_main_BB_decode_startexiti_621:
		next_state = LEGUP_F_main_BB_decode_startexiti_622;
LEGUP_F_main_BB_decode_startexiti_622:
	if ((main_decode_startexiti_832 == 1'd1))
		next_state = LEGUP_F_main_BB__833_623;
	else if ((main_decode_startexiti_832 == 1'd0))
		next_state = LEGUP_F_main_BB__836_627;
LEGUP_F_main_BB_decode_startexitipreheader_545:
		next_state = LEGUP_F_main_BB_decode_startexiti_620;
LEGUP_F_main_BB_decode_startexitipreheaderloopexit1_544:
		next_state = LEGUP_F_main_BB_decode_startexitipreheader_545;
LEGUP_F_main_BB_decode_startexitipreheaderloopexit_543:
		next_state = LEGUP_F_main_BB_decode_startexitipreheader_545;
LEGUP_F_main_BB_get_sosexitii_182:
		next_state = LEGUP_F_main_BB_get_sosexitii_183;
LEGUP_F_main_BB_get_sosexitii_183:
		next_state = LEGUP_F_main_BB_read_markersexiti_312;
LEGUP_F_main_BB_get_sosexitiiloopexit_181:
		next_state = LEGUP_F_main_BB_get_sosexitii_182;
LEGUP_F_main_BB_jpeg2bmp_mainexit_656:
		next_state = LEGUP_F_main_BB_jpeg2bmp_mainexit_657;
LEGUP_F_main_BB_jpeg2bmp_mainexit_657:
		next_state = LEGUP_F_main_BB_jpeg2bmp_mainexit_658;
LEGUP_F_main_BB_jpeg2bmp_mainexit_658:
	if ((main_jpeg2bmp_mainexit_867 == 1'd1))
		next_state = LEGUP_F_main_BB__868_659;
	else if ((main_jpeg2bmp_mainexit_867 == 1'd0))
		next_state = LEGUP_F_main_BB__870_660;
LEGUP_F_main_BB_loopexitiii_22:
		next_state = LEGUP_F_main_BB_loopexitiii_23;
LEGUP_F_main_BB_loopexitiii_23:
		next_state = LEGUP_F_main_BB_loopexitiii_24;
LEGUP_F_main_BB_loopexitiii_24:
	if ((main_loopexitiii_18 == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderiiipreheader_30;
	else if ((main_loopexitiii_18 == 1'd0))
		next_state = LEGUP_F_main_BB_lrphiiipreheader_25;
LEGUP_F_main_BB_loopexitiiiloopexit_21:
		next_state = LEGUP_F_main_BB_loopexitiii_22;
LEGUP_F_main_BB_loopexitipreheaderii_18:
		next_state = LEGUP_F_main_BB_loopexitipreheaderii_19;
LEGUP_F_main_BB_loopexitipreheaderii_19:
		next_state = LEGUP_F_main_BB_loopexitiii_22;
LEGUP_F_main_BB_loopexitipreheaderiibackedge_41:
		next_state = LEGUP_F_main_BB_loopexitipreheaderii_18;
LEGUP_F_main_BB_loopexitipreheaderiiouter24_15:
		next_state = LEGUP_F_main_BB_loopexitipreheaderiiouter29_17;
LEGUP_F_main_BB_loopexitipreheaderiiouter24loopexit_14:
		next_state = LEGUP_F_main_BB_loopexitipreheaderiiouter24_15;
LEGUP_F_main_BB_loopexitipreheaderiiouter29_17:
		next_state = LEGUP_F_main_BB_loopexitipreheaderii_18;
LEGUP_F_main_BB_loopexitipreheaderiiouter29loopexit_16:
		next_state = LEGUP_F_main_BB_loopexitipreheaderiiouter29_17;
LEGUP_F_main_BB_loopexitipreheaderiiouter_132:
		next_state = LEGUP_F_main_BB_loopexitipreheaderiiouter24_15;
LEGUP_F_main_BB_loopexitipreheaderiiouterbackedge_131:
		next_state = LEGUP_F_main_BB_loopexitipreheaderiiouter_132;
LEGUP_F_main_BB_loopexitipreheaderiipreheader_10:
		next_state = LEGUP_F_main_BB_loopexitipreheaderiipreheader_11;
LEGUP_F_main_BB_loopexitipreheaderiipreheader_11:
		next_state = LEGUP_F_main_BB_loopexitipreheaderiipreheader_12;
LEGUP_F_main_BB_loopexitipreheaderiipreheader_12:
		next_state = LEGUP_F_main_BB_loopexitipreheaderiipreheader_13;
LEGUP_F_main_BB_loopexitipreheaderiipreheader_13:
		next_state = LEGUP_F_main_BB_loopexitipreheaderiiouter_132;
LEGUP_F_main_BB_loopexitipreheaderiipreheader_9:
		next_state = LEGUP_F_main_BB_loopexitipreheaderiipreheader_10;
LEGUP_F_main_BB_lrph10iii_148:
		next_state = LEGUP_F_main_BB_lrph10iii_149;
LEGUP_F_main_BB_lrph10iii_149:
		next_state = LEGUP_F_main_BB_lrph10iii_150;
LEGUP_F_main_BB_lrph10iii_150:
		next_state = LEGUP_F_main_BB_lrph10iii_151;
LEGUP_F_main_BB_lrph10iii_151:
	if ((main_lrph10iiipreheader_190_reg == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi4iipreheader_152;
	else if ((main_lrph10iiipreheader_190_reg == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgei6iiloopexit2_157;
LEGUP_F_main_BB_lrph10iiipreheader_147:
		next_state = LEGUP_F_main_BB_lrph10iii_148;
LEGUP_F_main_BB_lrph5iii_194:
		next_state = LEGUP_F_main_BB_lrph5iii_195;
LEGUP_F_main_BB_lrph5iii_195:
		next_state = LEGUP_F_main_BB_lrph5iii_196;
LEGUP_F_main_BB_lrph5iii_196:
	if ((main_lrph5iii_272 == 1'd1))
		next_state = LEGUP_F_main_BB__273_197;
	else if ((main_lrph5iii_272 == 1'd0))
		next_state = LEGUP_F_main_BB__276_201;
LEGUP_F_main_BB_lrph5iiipreheader_193:
		next_state = LEGUP_F_main_BB_lrph5iii_194;
LEGUP_F_main_BB_lrph8splitusiiii_420:
		next_state = LEGUP_F_main_BB_lrph8splitusiiii_421;
LEGUP_F_main_BB_lrph8splitusiiii_421:
		next_state = LEGUP_F_main_BB_lrph8splitusiiii_422;
LEGUP_F_main_BB_lrph8splitusiiii_422:
		next_state = LEGUP_F_main_BB_lrphusiiii_429;
LEGUP_F_main_BB_lrphi13ii_283:
		next_state = LEGUP_F_main_BB_lrphi13ii_284;
LEGUP_F_main_BB_lrphi13ii_284:
		next_state = LEGUP_F_main_BB_lrphi13ii_285;
LEGUP_F_main_BB_lrphi13ii_285:
	if ((main_lrphi13ii_458 == 1'd1))
		next_state = LEGUP_F_main_BB__459_286;
	else if ((main_lrphi13ii_458 == 1'd0))
		next_state = LEGUP_F_main_BB__462_290;
LEGUP_F_main_BB_lrphi13iiloopexit_282:
		next_state = LEGUP_F_main_BB_lrphi13ii_283;
LEGUP_F_main_BB_lrphi2ii_84:
		next_state = LEGUP_F_main_BB_lrphi2ii_85;
LEGUP_F_main_BB_lrphi2ii_85:
		next_state = LEGUP_F_main_BB_lrphi2ii_86;
LEGUP_F_main_BB_lrphi2ii_86:
		next_state = LEGUP_F_main_BB_lrphi2ii_87;
LEGUP_F_main_BB_lrphi2ii_87:
		next_state = LEGUP_F_main_BB_lrphi2ii_88;
LEGUP_F_main_BB_lrphi2ii_88:
		next_state = LEGUP_F_main_BB_lrphi2ii_89;
LEGUP_F_main_BB_lrphi2ii_89:
		next_state = LEGUP_F_main_BB_lrphi2ii_90;
LEGUP_F_main_BB_lrphi2ii_90:
		next_state = LEGUP_F_main_BB_lrphi2ii_91;
LEGUP_F_main_BB_lrphi2ii_91:
		next_state = LEGUP_F_main_BB_lrphi2ii_92;
LEGUP_F_main_BB_lrphi2ii_92:
		next_state = LEGUP_F_main_BB_lrphi2ii_93;
LEGUP_F_main_BB_lrphi2ii_93:
		next_state = LEGUP_F_main_BB_lrphi2ii_94;
LEGUP_F_main_BB_lrphi2ii_94:
		next_state = LEGUP_F_main_BB_lrphi2ii_95;
LEGUP_F_main_BB_lrphi2ii_95:
		next_state = LEGUP_F_main_BB_lrphi2ii_96;
LEGUP_F_main_BB_lrphi2ii_96:
	if ((main_lrphi2ii_126_reg == 1'd1))
		next_state = LEGUP_F_main_BB__127_97;
	else if ((main_lrphi2ii_126_reg == 1'd0))
		next_state = LEGUP_F_main_BB__130_101;
LEGUP_F_main_BB_lrphi2iipreheader_83:
		next_state = LEGUP_F_main_BB_lrphi2ii_84;
LEGUP_F_main_BB_lrphi4ii_154:
		next_state = LEGUP_F_main_BB_lrphi4ii_155;
LEGUP_F_main_BB_lrphi4ii_155:
	if ((main_lrphi4ii_207 == 1'd1))
		next_state = LEGUP_F_main_BB__209_159;
	else if ((main_lrphi4ii_207 == 1'd0))
		next_state = LEGUP_F_main_BB__200_153;
LEGUP_F_main_BB_lrphi4iipreheader_152:
		next_state = LEGUP_F_main_BB_lrphi4ii_154;
LEGUP_F_main_BB_lrphi8ii_259:
		next_state = LEGUP_F_main_BB_lrphi8ii_260;
LEGUP_F_main_BB_lrphi8ii_260:
		next_state = LEGUP_F_main_BB_lrphi8ii_261;
LEGUP_F_main_BB_lrphi8ii_261:
		next_state = LEGUP_F_main_BB_lrphi8ii_262;
LEGUP_F_main_BB_lrphi8ii_262:
		next_state = LEGUP_F_main_BB_lrphi8ii_263;
LEGUP_F_main_BB_lrphi8ii_263:
		next_state = LEGUP_F_main_BB__418_264;
LEGUP_F_main_BB_lrphiii_26:
		next_state = LEGUP_F_main_BB_lrphiii_27;
LEGUP_F_main_BB_lrphiii_27:
		next_state = LEGUP_F_main_BB_lrphiii_28;
LEGUP_F_main_BB_lrphiii_28:
	if ((main_lrphiii_21 == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderiiipreheaderloopexit_29;
	else if ((main_lrphiii_21 == 1'd0))
		next_state = LEGUP_F_main_BB_lrphiii_26;
LEGUP_F_main_BB_lrphiiipreheader_25:
		next_state = LEGUP_F_main_BB_lrphiii_26;
LEGUP_F_main_BB_lrphusiiii_429:
		next_state = LEGUP_F_main_BB__626_424;
LEGUP_F_main_BB_next_markerexitii_34:
		next_state = LEGUP_F_main_BB_next_markerexitii_35;
LEGUP_F_main_BB_next_markerexitii_35:
	if ((main_next_markerexitii_27 == 1'd1))
		next_state = LEGUP_F_main_BB__28_36;
	else if ((main_next_markerexitii_27 == 1'd0))
		next_state = LEGUP_F_main_BB__31_40;
LEGUP_F_main_BB_preheader16i_638:
		next_state = LEGUP_F_main_BB_preheader16i_639;
LEGUP_F_main_BB_preheader16i_639:
		next_state = LEGUP_F_main_BB_preheader16i_640;
LEGUP_F_main_BB_preheader16i_640:
	if ((main_preheader16i_848 == 1'd1))
		next_state = LEGUP_F_main_BB__849_641;
	else if ((main_preheader16i_848 == 1'd0))
		next_state = LEGUP_F_main_BB__852_645;
LEGUP_F_main_BB_preheader16ipreheader_628:
		next_state = LEGUP_F_main_BB_preheader16i_638;
LEGUP_F_main_BB_preheader27i_647:
		next_state = LEGUP_F_main_BB_preheader27i_648;
LEGUP_F_main_BB_preheader27i_648:
		next_state = LEGUP_F_main_BB_preheader27i_649;
LEGUP_F_main_BB_preheader27i_649:
	if ((main_preheader27i_856 == 1'd1))
		next_state = LEGUP_F_main_BB__857_650;
	else if ((main_preheader27i_856 == 1'd0))
		next_state = LEGUP_F_main_BB__860_654;
LEGUP_F_main_BB_preheader27ipreheader_646:
		next_state = LEGUP_F_main_BB_preheader27i_647;
LEGUP_F_main_BB_preheader2iiithread_143:
		next_state = LEGUP_F_main_BB_preheader2iiithread_144;
LEGUP_F_main_BB_preheader2iiithread_144:
		next_state = LEGUP_F_main_BB_preheader2iiithread_145;
LEGUP_F_main_BB_preheader2iiithread_145:
		next_state = LEGUP_F_main_BB_preheader2iiithread_146;
LEGUP_F_main_BB_preheader2iiithread_146:
		next_state = LEGUP_F_main_BB_lrph10iiipreheader_147;
LEGUP_F_main_BB_preheader46ii_367:
		next_state = LEGUP_function_call_368;
LEGUP_F_main_BB_preheader46ii_369:
		next_state = LEGUP_F_main_BB__524_370;
LEGUP_F_main_BB_preheader46lrphii_366:
		next_state = LEGUP_F_main_BB_preheader46ii_367;
LEGUP_F_main_BB_preheader47ii_546:
		next_state = LEGUP_F_main_BB__741_547;
LEGUP_F_main_BB_preheader47iipreheader_535:
		next_state = LEGUP_F_main_BB_preheader47ii_546;
LEGUP_F_main_BB_preheader48ii_536:
		next_state = LEGUP_function_call_537;
LEGUP_F_main_BB_preheader48ii_538:
		next_state = LEGUP_function_call_539;
LEGUP_F_main_BB_preheader48ii_540:
		next_state = LEGUP_function_call_541;
LEGUP_F_main_BB_preheader48ii_542:
	if ((main_preheader48ii_740_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader49ii_440;
	else if ((main_preheader48ii_740_reg == 1'd0))
		next_state = LEGUP_F_main_BB_decode_startexitipreheaderloopexit1_544;
LEGUP_F_main_BB_preheader49ii_440:
		next_state = LEGUP_F_main_BB__652_441;
LEGUP_F_main_BB_preheader49lrphii_439:
		next_state = LEGUP_F_main_BB_preheader49ii_440;
LEGUP_F_main_BB_preheaderi11ii_281:
	if ((main_preheaderi11ii_445 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi13iiloopexit_282;
	else if ((main_preheaderi11ii_445 == 1'd0))
		next_state = LEGUP_F_main_BB_loopexitipreheaderiibackedge_41;
LEGUP_F_main_BB_preheaderi1ii_82:
	if ((main_preheaderi1ii_97 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi2iipreheader_83;
	else if ((main_preheaderi1ii_97 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgeiii_128;
LEGUP_F_main_BB_preheaderi1iithread_78:
		next_state = LEGUP_F_main_BB_preheaderi1iithread_79;
LEGUP_F_main_BB_preheaderi1iithread_79:
		next_state = LEGUP_F_main_BB_preheaderi1iithread_80;
LEGUP_F_main_BB_preheaderi1iithread_80:
		next_state = LEGUP_F_main_BB_preheaderi1iithread_81;
LEGUP_F_main_BB_preheaderi1iithread_81:
		next_state = LEGUP_F_main_BB_lrphi2iipreheader_83;
LEGUP_F_main_BB_preheaderi7ii_192:
	if ((main_preheaderi7ii_263 == 1'd1))
		next_state = LEGUP_F_main_BB_lrph5iiipreheader_193;
	else if ((main_preheaderi7ii_263 == 1'd0))
		next_state = LEGUP_F_main_BB_loopexitipreheaderiibackedge_41;
LEGUP_F_main_BB_preheaderi_6:
		next_state = LEGUP_F_main_BB_preheaderi_7;
LEGUP_F_main_BB_preheaderi_7:
		next_state = LEGUP_F_main_BB_preheaderi_8;
LEGUP_F_main_BB_preheaderi_8:
	if ((main_preheaderi_orcondiusii == 1'd1))
		next_state = LEGUP_F_main_BB_uslcssausii_20;
	else if ((main_preheaderi_orcondiusii == 1'd0))
		next_state = LEGUP_F_main_BB_loopexitipreheaderiipreheader_9;
LEGUP_F_main_BB_preheaderiii_31:
		next_state = LEGUP_F_main_BB_preheaderiii_32;
LEGUP_F_main_BB_preheaderiii_32:
		next_state = LEGUP_F_main_BB_preheaderiii_33;
LEGUP_F_main_BB_preheaderiii_33:
	if ((main_preheaderiii_24 == 32'd255))
		next_state = LEGUP_F_main_BB_preheaderiii_31;
	else if ((main_preheaderiii_24 == 32'd0))
		next_state = LEGUP_F_main_BB_loopexitiiiloopexit_21;
	else if ((main_preheaderiii_24 != 32'd255) && (main_preheaderiii_24 != 32'd0))
		next_state = LEGUP_F_main_BB_next_markerexitii_34;
LEGUP_F_main_BB_preheaderiiipreheader_30:
		next_state = LEGUP_F_main_BB_preheaderiii_31;
LEGUP_F_main_BB_preheaderiiipreheaderloopexit_29:
		next_state = LEGUP_F_main_BB_preheaderiiipreheader_30;
LEGUP_F_main_BB_read_markersexiti_312:
		next_state = LEGUP_F_main_BB_read_markersexiti_313;
LEGUP_F_main_BB_read_markersexiti_313:
		next_state = LEGUP_F_main_BB_read_markersexiti_314;
LEGUP_F_main_BB_read_markersexiti_314:
		next_state = LEGUP_F_main_BB_read_markersexiti_315;
LEGUP_F_main_BB_read_markersexiti_315:
		next_state = LEGUP_F_main_BB_read_markersexiti_316;
LEGUP_F_main_BB_read_markersexiti_316:
		next_state = LEGUP_F_main_BB_read_markersexiti_317;
LEGUP_F_main_BB_read_markersexiti_317:
		next_state = LEGUP_F_main_BB_read_markersexiti_318;
LEGUP_F_main_BB_read_markersexiti_318:
		next_state = LEGUP_F_main_BB_read_markersexiti_319;
LEGUP_F_main_BB_read_markersexiti_319:
		next_state = LEGUP_F_main_BB_read_markersexiti_320;
LEGUP_F_main_BB_read_markersexiti_320:
		next_state = LEGUP_F_main_BB_read_markersexiti_321;
LEGUP_F_main_BB_read_markersexiti_321:
		next_state = LEGUP_F_main_BB_read_markersexiti_322;
LEGUP_F_main_BB_read_markersexiti_322:
		next_state = LEGUP_F_main_BB_read_markersexiti_323;
LEGUP_F_main_BB_read_markersexiti_323:
		next_state = LEGUP_F_main_BB_read_markersexiti_324;
LEGUP_F_main_BB_read_markersexiti_324:
		next_state = LEGUP_F_main_BB_read_markersexiti_325;
LEGUP_F_main_BB_read_markersexiti_325:
		next_state = LEGUP_F_main_BB_read_markersexiti_326;
LEGUP_F_main_BB_read_markersexiti_326:
		next_state = LEGUP_F_main_BB_read_markersexiti_327;
LEGUP_F_main_BB_read_markersexiti_327:
		next_state = LEGUP_F_main_BB_read_markersexiti_328;
LEGUP_F_main_BB_read_markersexiti_328:
		next_state = LEGUP_F_main_BB_read_markersexiti_329;
LEGUP_F_main_BB_read_markersexiti_329:
		next_state = LEGUP_F_main_BB_read_markersexiti_330;
LEGUP_F_main_BB_read_markersexiti_330:
		next_state = LEGUP_F_main_BB_read_markersexiti_331;
LEGUP_F_main_BB_read_markersexiti_331:
		next_state = LEGUP_F_main_BB_read_markersexiti_332;
LEGUP_F_main_BB_read_markersexiti_332:
		next_state = LEGUP_F_main_BB_read_markersexiti_333;
LEGUP_F_main_BB_read_markersexiti_333:
		next_state = LEGUP_F_main_BB_read_markersexiti_334;
LEGUP_F_main_BB_read_markersexiti_334:
		next_state = LEGUP_F_main_BB_read_markersexiti_335;
LEGUP_F_main_BB_read_markersexiti_335:
		next_state = LEGUP_F_main_BB_read_markersexiti_336;
LEGUP_F_main_BB_read_markersexiti_336:
		next_state = LEGUP_F_main_BB_read_markersexiti_337;
LEGUP_F_main_BB_read_markersexiti_337:
		next_state = LEGUP_F_main_BB_read_markersexiti_338;
LEGUP_F_main_BB_read_markersexiti_338:
		next_state = LEGUP_F_main_BB_read_markersexiti_339;
LEGUP_F_main_BB_read_markersexiti_339:
		next_state = LEGUP_F_main_BB_read_markersexiti_340;
LEGUP_F_main_BB_read_markersexiti_340:
		next_state = LEGUP_F_main_BB_read_markersexiti_341;
LEGUP_F_main_BB_read_markersexiti_341:
		next_state = LEGUP_F_main_BB_read_markersexiti_342;
LEGUP_F_main_BB_read_markersexiti_342:
		next_state = LEGUP_F_main_BB_read_markersexiti_343;
LEGUP_F_main_BB_read_markersexiti_343:
		next_state = LEGUP_F_main_BB_read_markersexiti_344;
LEGUP_F_main_BB_read_markersexiti_344:
		next_state = LEGUP_F_main_BB_read_markersexiti_345;
LEGUP_F_main_BB_read_markersexiti_345:
		next_state = LEGUP_F_main_BB_read_markersexiti_346;
LEGUP_F_main_BB_read_markersexiti_346:
		next_state = LEGUP_F_main_BB_read_markersexiti_347;
LEGUP_F_main_BB_read_markersexiti_347:
		next_state = LEGUP_function_call_348;
LEGUP_F_main_BB_read_markersexiti_349:
		next_state = LEGUP_F_main_BB_read_markersexiti_350;
LEGUP_F_main_BB_read_markersexiti_350:
		next_state = LEGUP_function_call_351;
LEGUP_F_main_BB_read_markersexiti_352:
		next_state = LEGUP_F_main_BB_read_markersexiti_353;
LEGUP_F_main_BB_read_markersexiti_353:
		next_state = LEGUP_function_call_354;
LEGUP_F_main_BB_read_markersexiti_355:
		next_state = LEGUP_F_main_BB_read_markersexiti_356;
LEGUP_F_main_BB_read_markersexiti_356:
		next_state = LEGUP_function_call_357;
LEGUP_F_main_BB_read_markersexiti_358:
		next_state = LEGUP_F_main_BB_read_markersexiti_359;
LEGUP_F_main_BB_read_markersexiti_359:
		next_state = LEGUP_F_main_BB_read_markersexiti_360;
LEGUP_F_main_BB_read_markersexiti_360:
		next_state = LEGUP_F_main_BB_read_markersexiti_361;
LEGUP_F_main_BB_read_markersexiti_361:
		next_state = LEGUP_F_main_BB_read_markersexiti_362;
LEGUP_F_main_BB_read_markersexiti_362:
		next_state = LEGUP_F_main_BB_read_markersexiti_363;
LEGUP_F_main_BB_read_markersexiti_363:
		next_state = LEGUP_F_main_BB_read_markersexiti_364;
LEGUP_F_main_BB_read_markersexiti_364:
	if ((main_read_markersexiti_509_reg == 1'd1))
		next_state = LEGUP_F_main_BB__510_365;
	else if ((main_read_markersexiti_509_reg == 1'd0))
		next_state = LEGUP_F_main_BB__641_438;
LEGUP_F_main_BB_read_markersexitiloopexit_311:
		next_state = LEGUP_F_main_BB_read_markersexiti_312;
LEGUP_F_main_BB_split_crit_edgeiii_303:
		next_state = LEGUP_F_main_BB_split_crit_edgeiii_304;
LEGUP_F_main_BB_split_crit_edgeiii_304:
		next_state = LEGUP_F_main_BB_split_crit_edgeiii_305;
LEGUP_F_main_BB_split_crit_edgeiii_305:
		next_state = LEGUP_F_main_BB_split_crit_edgeiii_306;
LEGUP_F_main_BB_split_crit_edgeiii_306:
		next_state = LEGUP_F_main_BB_split_crit_edgeiii_307;
LEGUP_F_main_BB_split_crit_edgeiii_307:
	if ((main_split_crit_edgeiii_exitcond186_reg == 1'd1))
		next_state = LEGUP_F_main_BB_uslcssausiiiloopexit22_309;
	else if ((main_split_crit_edgeiii_exitcond186_reg == 1'd0))
		next_state = LEGUP_F_main_BB_split_crit_edgeiii_303;
LEGUP_F_main_BB_split_crit_edgeiiipreheader_297:
		next_state = LEGUP_F_main_BB_split_crit_edgeiii_303;
LEGUP_F_main_BB_splitusiii_299:
		next_state = LEGUP_F_main_BB_splitusiii_300;
LEGUP_F_main_BB_splitusiii_300:
		next_state = LEGUP_F_main_BB_splitusiii_301;
LEGUP_F_main_BB_splitusiii_301:
		next_state = LEGUP_F_main_BB_splitusiii_302;
LEGUP_F_main_BB_splitusiii_302:
	if ((main_splitusiii_exitcond190_reg == 1'd1))
		next_state = LEGUP_F_main_BB_uslcssausiiiloopexit_308;
	else if ((main_splitusiii_exitcond190_reg == 1'd0))
		next_state = LEGUP_F_main_BB_splitusiii_299;
LEGUP_F_main_BB_splitusiiipreheader_298:
		next_state = LEGUP_F_main_BB_splitusiii_299;
LEGUP_F_main_BB_uslcssa4ii_134:
		next_state = LEGUP_F_main_BB_uslcssa4ii_135;
LEGUP_F_main_BB_uslcssa4ii_135:
		next_state = LEGUP_F_main_BB_uslcssa4ii_136;
LEGUP_F_main_BB_uslcssa4ii_136:
		next_state = LEGUP_F_main_BB_uslcssa4ii_137;
LEGUP_F_main_BB_uslcssa4ii_137:
	if ((main_uslcssa4ii_183 == 1'd1))
		next_state = LEGUP_F_main_BB__184_138;
	else if ((main_uslcssa4ii_183 == 1'd0))
		next_state = LEGUP_F_main_BB__187_142;
LEGUP_F_main_BB_uslcssausii_20:
		next_state = LEGUP_0;
LEGUP_F_main_BB_uslcssausiii_310:
	if ((main_uslcssausiii_490 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi13ii_283;
	else if ((main_uslcssausiii_490 == 1'd0))
		next_state = LEGUP_F_main_BB_loopexitipreheaderiiouter24loopexit_14;
LEGUP_F_main_BB_uslcssausiiiloopexit22_309:
		next_state = LEGUP_F_main_BB_uslcssausiii_310;
LEGUP_F_main_BB_uslcssausiiiloopexit_308:
		next_state = LEGUP_F_main_BB_uslcssausiii_310;
LEGUP_function_call_348:
	if ((huff_make_dhuff_tb_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_read_markersexiti_349;
LEGUP_function_call_351:
	if ((huff_make_dhuff_tb_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_read_markersexiti_352;
LEGUP_function_call_354:
	if ((huff_make_dhuff_tb_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_read_markersexiti_355;
LEGUP_function_call_357:
	if ((huff_make_dhuff_tb_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_read_markersexiti_358;
LEGUP_function_call_368:
	if ((DecodeHuffMCU_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheader46ii_369;
LEGUP_function_call_382:
	if ((ChenIDct_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_IQuantizeexitiii_383;
LEGUP_function_call_399:
	if ((DecodeHuffMCU_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_decode_blockexitii_400;
LEGUP_function_call_442:
	if ((DecodeHuffMCU_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__652_443;
LEGUP_function_call_456:
	if ((ChenIDct_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_IQuantizeexiti8ii_457;
LEGUP_function_call_474:
	if ((DecodeHuffMCU_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__683_475;
LEGUP_function_call_488:
	if ((ChenIDct_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_IQuantizeexiti20ii_489;
LEGUP_function_call_505:
	if ((DecodeHuffMCU_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_decode_blockexit24ii_506;
LEGUP_function_call_519:
	if ((ChenIDct_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_IQuantizeexiti32ii_520;
LEGUP_function_call_537:
	if ((Write4Blocks_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheader48ii_538;
LEGUP_function_call_539:
	if ((Write4Blocks_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheader48ii_540;
LEGUP_function_call_541:
	if ((Write4Blocks_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheader48ii_542;
LEGUP_function_call_572:
	if ((ChenIDct_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_IQuantizeexiti1ii_573;
LEGUP_function_call_589:
	if ((DecodeHuffMCU_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_decode_blockexit1ii_590;
LEGUP_function_call_603:
	if ((ChenIDct_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_IQuantizeexiti2ii_604;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %i.04.i = phi i32 [ 0, %0 ], [ %3, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_i04i = 32'd0;
	end
	/* main: %1*/
	/*   %i.04.i = phi i32 [ 0, %0 ], [ %3, %1 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__1_5) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond209_reg == 1'd0))) */ begin
		main_1_i04i = main_1_3_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_1_i04i_reg <= 0;
	/* main: %1*/
	/*   %i.04.i = phi i32 [ 0, %0 ], [ %3, %1 ]*/
	else if(((cur_state == LEGUP_F_main_BB__0_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_i04i_reg <= main_1_i04i;
		if (start == 1'b0 && ^(main_1_i04i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i04i_reg"); $finish; end
	end
	/* main: %1*/
	/*   %i.04.i = phi i32 [ 0, %0 ], [ %3, %1 ]*/
	else if((((cur_state == LEGUP_F_main_BB__1_5) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond209_reg == 1'd0))) begin
		main_1_i04i_reg <= main_1_i04i;
		if (start == 1'b0 && ^(main_1_i04i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i04i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep210 = getelementptr [5207 x i8]* @hana_jpg, i32 0, i32 %i.04.i*/
		main_1_scevgep210 = (1'd0 + (1 * main_1_i04i_reg));
end
always @(posedge clk) begin
	if (reset)
		main_1_scevgep210_reg <= 0;
	/* main: %1*/
	/*   %scevgep210 = getelementptr [5207 x i8]* @hana_jpg, i32 0, i32 %i.04.i*/
	else if((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_scevgep210_reg <= main_1_scevgep210;
		if (start == 1'b0 && ^(main_1_scevgep210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %c.03.i = getelementptr [5310 x i8]* @JpegFileBuf, i32 0, i32 %i.04.i*/
		main_1_c03i = (`TAG_g_JpegFileBuf_a + (1 * main_1_i04i_reg));
end
always @(posedge clk) begin
	if (reset)
		main_1_c03i_reg <= 0;
	/* main: %1*/
	/*   %c.03.i = getelementptr [5310 x i8]* @JpegFileBuf, i32 0, i32 %i.04.i*/
	else if((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_c03i_reg <= main_1_c03i;
		if (start == 1'b0 && ^(main_1_c03i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_c03i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %2 = load i8* %scevgep210, align 1, !tbaa !5*/
		main_1_2 = hana_jpg_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_1_2_reg <= 0;
	/* main: %1*/
	/*   %2 = load i8* %scevgep210, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__1_4)) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %3 = add nsw i32 %i.04.i, 1*/
		main_1_3 = (main_1_i04i_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_1_3_reg <= 0;
	/* main: %1*/
	/*   %3 = add nsw i32 %i.04.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond209 = icmp eq i32 %3, 5207*/
		main_1_exitcond209 = (main_1_3 == 32'd5207);
end
always @(posedge clk) begin
	if (reset)
		main_1_exitcond209_reg <= 0;
	/* main: %1*/
	/*   %exitcond209 = icmp eq i32 %3, 5207*/
	else if((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_exitcond209_reg <= main_1_exitcond209;
		if (start == 1'b0 && ^(main_1_exitcond209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %4 = load i8* getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 0), align 1, !tbaa !5*/
		main_preheaderi_4 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_4_reg <= 0;
	/* main: %.preheader.i*/
	/*   %4 = load i8* getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 0), align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_preheaderi_8)) begin
		main_preheaderi_4_reg <= main_preheaderi_4;
		if (start == 1'b0 && ^(main_preheaderi_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %5 = load i8* getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 1), align 1, !tbaa !5*/
		main_preheaderi_5 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_5_reg <= 0;
	/* main: %.preheader.i*/
	/*   %5 = load i8* getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 1), align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_preheaderi_8)) begin
		main_preheaderi_5_reg <= main_preheaderi_5;
		if (start == 1'b0 && ^(main_preheaderi_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %6 = icmp ne i8 %4, -1*/
		main_preheaderi_6 = (main_preheaderi_4 != -8'd1);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_6_reg <= 0;
	/* main: %.preheader.i*/
	/*   %6 = icmp ne i8 %4, -1*/
	else if((cur_state == LEGUP_F_main_BB_preheaderi_8)) begin
		main_preheaderi_6_reg <= main_preheaderi_6;
		if (start == 1'b0 && ^(main_preheaderi_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %7 = icmp ne i8 %5, -40*/
		main_preheaderi_7 = (main_preheaderi_5 != -8'd40);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_7_reg <= 0;
	/* main: %.preheader.i*/
	/*   %7 = icmp ne i8 %5, -40*/
	else if((cur_state == LEGUP_F_main_BB_preheaderi_8)) begin
		main_preheaderi_7_reg <= main_preheaderi_7;
		if (start == 1'b0 && ^(main_preheaderi_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %or.cond.i.us.i.i = or i1 %6, %7*/
		main_preheaderi_orcondiusii = (main_preheaderi_6 | main_preheaderi_7);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_orcondiusii_reg <= 0;
	/* main: %.preheader.i*/
	/*   %or.cond.i.us.i.i = or i1 %6, %7*/
	else if((cur_state == LEGUP_F_main_BB_preheaderi_8)) begin
		main_preheaderi_orcondiusii_reg <= main_preheaderi_orcondiusii;
		if (start == 1'b0 && ^(main_preheaderi_orcondiusii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_orcondiusii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   %9 = load i32* @main_result, align 4, !tbaa !1*/
		main_loopexitipreheaderiipreheader_9 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiipreheader_9_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   %9 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_12)) begin
		main_loopexitipreheaderiipreheader_9_reg <= main_loopexitipreheaderiipreheader_9;
		if (start == 1'b0 && ^(main_loopexitipreheaderiipreheader_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiipreheader_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   %10 = add nsw i32 %9, 1*/
		main_loopexitipreheaderiipreheader_10 = (main_loopexitipreheaderiipreheader_9 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiipreheader_10_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   %10 = add nsw i32 %9, 1*/
	else if((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_12)) begin
		main_loopexitipreheaderiipreheader_10_reg <= main_loopexitipreheaderiipreheader_10;
		if (start == 1'b0 && ^(main_loopexitipreheaderiipreheader_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiipreheader_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %ReadBuf.0.ph25 = phi i8* [ %ReadBuf.0.ph, %.loopexit.i.preheader.i.i.outer ], [ %ReadBuf.7, %.loopexit.i.preheader.i.i.outer24.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter24loopexit_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter24_ReadBuf0ph25 = main_uslcssausiii_ReadBuf7_reg;
	end
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %ReadBuf.0.ph25 = phi i8* [ %ReadBuf.0.ph, %.loopexit.i.preheader.i.i.outer ], [ %ReadBuf.7, %.loopexit.i.preheader.i.i.outer24.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter_132) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitipreheaderiiouter24_ReadBuf0ph25 = main_loopexitipreheaderiiouter_ReadBuf0ph_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouter24_ReadBuf0ph25_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %ReadBuf.0.ph25 = phi i8* [ %ReadBuf.0.ph, %.loopexit.i.preheader.i.i.outer ], [ %ReadBuf.7, %.loopexit.i.preheader.i.i.outer24.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter24loopexit_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter24_ReadBuf0ph25_reg <= main_loopexitipreheaderiiouter24_ReadBuf0ph25;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter24_ReadBuf0ph25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter24_ReadBuf0ph25_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %ReadBuf.0.ph25 = phi i8* [ %ReadBuf.0.ph, %.loopexit.i.preheader.i.i.outer ], [ %ReadBuf.7, %.loopexit.i.preheader.i.i.outer24.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter_132) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter24_ReadBuf0ph25_reg <= main_loopexitipreheaderiiouter24_ReadBuf0ph25;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter24_ReadBuf0ph25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter24_ReadBuf0ph25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %i_get_dqt.0.ph26 = phi i32 [ %i_get_dqt.0.ph, %.loopexit.i.preheader.i.i.outer ], [ %448, %.loopexit.i.preheader.i.i.outer24.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter24loopexit_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter24_i_get_dqt0ph26 = main_lrphi13ii_448_reg;
	end
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %i_get_dqt.0.ph26 = phi i32 [ %i_get_dqt.0.ph, %.loopexit.i.preheader.i.i.outer ], [ %448, %.loopexit.i.preheader.i.i.outer24.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter_132) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitipreheaderiiouter24_i_get_dqt0ph26 = main_loopexitipreheaderiiouter_i_get_dqt0ph_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouter24_i_get_dqt0ph26_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %i_get_dqt.0.ph26 = phi i32 [ %i_get_dqt.0.ph, %.loopexit.i.preheader.i.i.outer ], [ %448, %.loopexit.i.preheader.i.i.outer24.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter24loopexit_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter24_i_get_dqt0ph26_reg <= main_loopexitipreheaderiiouter24_i_get_dqt0ph26;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter24_i_get_dqt0ph26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter24_i_get_dqt0ph26_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %i_get_dqt.0.ph26 = phi i32 [ %i_get_dqt.0.ph, %.loopexit.i.preheader.i.i.outer ], [ %448, %.loopexit.i.preheader.i.i.outer24.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter_132) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter24_i_get_dqt0ph26_reg <= main_loopexitipreheaderiiouter24_i_get_dqt0ph26;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter24_i_get_dqt0ph26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter24_i_get_dqt0ph26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %i_get_dht.0.ph27 = phi i32 [ %i_get_dht.0.ph, %.loopexit.i.preheader.i.i.outer ], [ %i_get_dht.0.ph31, %.loopexit.i.preheader.i.i.outer24.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter24loopexit_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter24_i_get_dht0ph27 = main_loopexitipreheaderiiouter29_i_get_dht0ph31_reg;
	end
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %i_get_dht.0.ph27 = phi i32 [ %i_get_dht.0.ph, %.loopexit.i.preheader.i.i.outer ], [ %i_get_dht.0.ph31, %.loopexit.i.preheader.i.i.outer24.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter_132) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitipreheaderiiouter24_i_get_dht0ph27 = main_loopexitipreheaderiiouter_i_get_dht0ph_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouter24_i_get_dht0ph27_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %i_get_dht.0.ph27 = phi i32 [ %i_get_dht.0.ph, %.loopexit.i.preheader.i.i.outer ], [ %i_get_dht.0.ph31, %.loopexit.i.preheader.i.i.outer24.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter24loopexit_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter24_i_get_dht0ph27_reg <= main_loopexitipreheaderiiouter24_i_get_dht0ph27;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter24_i_get_dht0ph27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter24_i_get_dht0ph27_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %i_get_dht.0.ph27 = phi i32 [ %i_get_dht.0.ph, %.loopexit.i.preheader.i.i.outer ], [ %i_get_dht.0.ph31, %.loopexit.i.preheader.i.i.outer24.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter_132) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter24_i_get_dht0ph27_reg <= main_loopexitipreheaderiiouter24_i_get_dht0ph27;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter24_i_get_dht0ph27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter24_i_get_dht0ph27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %i_marker.0.ph28 = phi i32 [ %i_marker.0.ph, %.loopexit.i.preheader.i.i.outer ], [ %15, %.loopexit.i.preheader.i.i.outer24.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter24loopexit_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter24_i_marker0ph28 = main_loopexitipreheaderii_15_reg;
	end
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %i_marker.0.ph28 = phi i32 [ %i_marker.0.ph, %.loopexit.i.preheader.i.i.outer ], [ %15, %.loopexit.i.preheader.i.i.outer24.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter_132) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitipreheaderiiouter24_i_marker0ph28 = main_loopexitipreheaderiiouter_i_marker0ph_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouter24_i_marker0ph28_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %i_marker.0.ph28 = phi i32 [ %i_marker.0.ph, %.loopexit.i.preheader.i.i.outer ], [ %15, %.loopexit.i.preheader.i.i.outer24.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter24loopexit_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter24_i_marker0ph28_reg <= main_loopexitipreheaderiiouter24_i_marker0ph28;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter24_i_marker0ph28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter24_i_marker0ph28_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %i_marker.0.ph28 = phi i32 [ %i_marker.0.ph, %.loopexit.i.preheader.i.i.outer ], [ %15, %.loopexit.i.preheader.i.i.outer24.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter_132) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter24_i_marker0ph28_reg <= main_loopexitipreheaderiiouter24_i_marker0ph28;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter24_i_marker0ph28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter24_i_marker0ph28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %11 = getelementptr inbounds [2 x i32]* @out_length_get_dqt, i32 0, i32 %i_get_dqt.0.ph26*/
		main_loopexitipreheaderiiouter24_11 = (1'd0 + (4 * main_loopexitipreheaderiiouter24_i_get_dqt0ph26_reg));
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouter24_11_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer24*/
	/*   %11 = getelementptr inbounds [2 x i32]* @out_length_get_dqt, i32 0, i32 %i_get_dqt.0.ph26*/
	else if((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter24_15)) begin
		main_loopexitipreheaderiiouter24_11_reg <= main_loopexitipreheaderiiouter24_11;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter24_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter24_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer29*/
	/*   %ReadBuf.0.ph30 = phi i8* [ %ReadBuf.0.ph25, %.loopexit.i.preheader.i.i.outer24 ], [ %ReadBuf.6, %.loopexit.i.preheader.i.i.outer29.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter24_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter29_ReadBuf0ph30 = main_loopexitipreheaderiiouter24_ReadBuf0ph25_reg;
	end
	/* main: %.loopexit.i.preheader.i.i.outer29*/
	/*   %ReadBuf.0.ph30 = phi i8* [ %ReadBuf.0.ph25, %.loopexit.i.preheader.i.i.outer24 ], [ %ReadBuf.6, %.loopexit.i.preheader.i.i.outer29.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter29loopexit_16) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitipreheaderiiouter29_ReadBuf0ph30 = main__crit_edgei10ii_ReadBuf6_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouter29_ReadBuf0ph30_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer29*/
	/*   %ReadBuf.0.ph30 = phi i8* [ %ReadBuf.0.ph25, %.loopexit.i.preheader.i.i.outer24 ], [ %ReadBuf.6, %.loopexit.i.preheader.i.i.outer29.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter24_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter29_ReadBuf0ph30_reg <= main_loopexitipreheaderiiouter29_ReadBuf0ph30;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter29_ReadBuf0ph30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter29_ReadBuf0ph30_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i.outer29*/
	/*   %ReadBuf.0.ph30 = phi i8* [ %ReadBuf.0.ph25, %.loopexit.i.preheader.i.i.outer24 ], [ %ReadBuf.6, %.loopexit.i.preheader.i.i.outer29.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter29loopexit_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter29_ReadBuf0ph30_reg <= main_loopexitipreheaderiiouter29_ReadBuf0ph30;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter29_ReadBuf0ph30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter29_ReadBuf0ph30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer29*/
	/*   %i_get_dht.0.ph31 = phi i32 [ %i_get_dht.0.ph27, %.loopexit.i.preheader.i.i.outer24 ], [ %265, %.loopexit.i.preheader.i.i.outer29.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter24_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter29_i_get_dht0ph31 = main_loopexitipreheaderiiouter24_i_get_dht0ph27_reg;
	end
	/* main: %.loopexit.i.preheader.i.i.outer29*/
	/*   %i_get_dht.0.ph31 = phi i32 [ %i_get_dht.0.ph27, %.loopexit.i.preheader.i.i.outer24 ], [ %265, %.loopexit.i.preheader.i.i.outer29.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter29loopexit_16) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitipreheaderiiouter29_i_get_dht0ph31 = main_lrph5iii_265_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouter29_i_get_dht0ph31_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer29*/
	/*   %i_get_dht.0.ph31 = phi i32 [ %i_get_dht.0.ph27, %.loopexit.i.preheader.i.i.outer24 ], [ %265, %.loopexit.i.preheader.i.i.outer29.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter24_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter29_i_get_dht0ph31_reg <= main_loopexitipreheaderiiouter29_i_get_dht0ph31;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter29_i_get_dht0ph31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter29_i_get_dht0ph31_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i.outer29*/
	/*   %i_get_dht.0.ph31 = phi i32 [ %i_get_dht.0.ph27, %.loopexit.i.preheader.i.i.outer24 ], [ %265, %.loopexit.i.preheader.i.i.outer29.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter29loopexit_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter29_i_get_dht0ph31_reg <= main_loopexitipreheaderiiouter29_i_get_dht0ph31;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter29_i_get_dht0ph31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter29_i_get_dht0ph31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer29*/
	/*   %i_marker.0.ph32 = phi i32 [ %i_marker.0.ph28, %.loopexit.i.preheader.i.i.outer24 ], [ %15, %.loopexit.i.preheader.i.i.outer29.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter24_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter29_i_marker0ph32 = main_loopexitipreheaderiiouter24_i_marker0ph28_reg;
	end
	/* main: %.loopexit.i.preheader.i.i.outer29*/
	/*   %i_marker.0.ph32 = phi i32 [ %i_marker.0.ph28, %.loopexit.i.preheader.i.i.outer24 ], [ %15, %.loopexit.i.preheader.i.i.outer29.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter29loopexit_16) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitipreheaderiiouter29_i_marker0ph32 = main_loopexitipreheaderii_15_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouter29_i_marker0ph32_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer29*/
	/*   %i_marker.0.ph32 = phi i32 [ %i_marker.0.ph28, %.loopexit.i.preheader.i.i.outer24 ], [ %15, %.loopexit.i.preheader.i.i.outer29.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter24_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter29_i_marker0ph32_reg <= main_loopexitipreheaderiiouter29_i_marker0ph32;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter29_i_marker0ph32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter29_i_marker0ph32_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i.outer29*/
	/*   %i_marker.0.ph32 = phi i32 [ %i_marker.0.ph28, %.loopexit.i.preheader.i.i.outer24 ], [ %15, %.loopexit.i.preheader.i.i.outer29.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter29loopexit_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter29_i_marker0ph32_reg <= main_loopexitipreheaderiiouter29_i_marker0ph32;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter29_i_marker0ph32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter29_i_marker0ph32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer29*/
	/*   %12 = getelementptr inbounds [4 x i32]* @out_length_get_dht, i32 0, i32 %i_get_dht.0.ph31*/
		main_loopexitipreheaderiiouter29_12 = (1'd0 + (4 * main_loopexitipreheaderiiouter29_i_get_dht0ph31_reg));
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouter29_12_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer29*/
	/*   %12 = getelementptr inbounds [4 x i32]* @out_length_get_dht, i32 0, i32 %i_get_dht.0.ph31*/
	else if((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter29_17)) begin
		main_loopexitipreheaderiiouter29_12_reg <= main_loopexitipreheaderiiouter29_12;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter29_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter29_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer29*/
	/*   %13 = add i32 %i_marker.0.ph32, 1*/
		main_loopexitipreheaderiiouter29_13 = (main_loopexitipreheaderiiouter29_i_marker0ph32_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouter29_13_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer29*/
	/*   %13 = add i32 %i_marker.0.ph32, 1*/
	else if((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter29_17)) begin
		main_loopexitipreheaderiiouter29_13_reg <= main_loopexitipreheaderiiouter29_13;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter29_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter29_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i*/
	/*   %indvar176 = phi i32 [ %indvar.next177, %.loopexit.i.preheader.i.i.backedge ], [ 0, %.loopexit.i.preheader.i.i.outer29 ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter29_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderii_indvar176 = 32'd0;
	end
	/* main: %.loopexit.i.preheader.i.i*/
	/*   %indvar176 = phi i32 [ %indvar.next177, %.loopexit.i.preheader.i.i.backedge ], [ 0, %.loopexit.i.preheader.i.i.outer29 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiibackedge_41) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitipreheaderii_indvar176 = main_loopexitipreheaderiibackedge_indvarnext177;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderii_indvar176_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i*/
	/*   %indvar176 = phi i32 [ %indvar.next177, %.loopexit.i.preheader.i.i.backedge ], [ 0, %.loopexit.i.preheader.i.i.outer29 ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter29_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderii_indvar176_reg <= main_loopexitipreheaderii_indvar176;
		if (start == 1'b0 && ^(main_loopexitipreheaderii_indvar176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderii_indvar176_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i*/
	/*   %indvar176 = phi i32 [ %indvar.next177, %.loopexit.i.preheader.i.i.backedge ], [ 0, %.loopexit.i.preheader.i.i.outer29 ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiibackedge_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderii_indvar176_reg <= main_loopexitipreheaderii_indvar176;
		if (start == 1'b0 && ^(main_loopexitipreheaderii_indvar176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderii_indvar176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i*/
	/*   %ReadBuf.0 = phi i8* [ %ReadBuf.0.be, %.loopexit.i.preheader.i.i.backedge ], [ %ReadBuf.0.ph30, %.loopexit.i.preheader.i.i.outer29 ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter29_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderii_ReadBuf0 = main_loopexitipreheaderiiouter29_ReadBuf0ph30_reg;
	end
	/* main: %.loopexit.i.preheader.i.i*/
	/*   %ReadBuf.0 = phi i8* [ %ReadBuf.0.be, %.loopexit.i.preheader.i.i.backedge ], [ %ReadBuf.0.ph30, %.loopexit.i.preheader.i.i.outer29 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiibackedge_41) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitipreheaderii_ReadBuf0 = main_loopexitipreheaderiibackedge_ReadBuf0be_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderii_ReadBuf0_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i*/
	/*   %ReadBuf.0 = phi i8* [ %ReadBuf.0.be, %.loopexit.i.preheader.i.i.backedge ], [ %ReadBuf.0.ph30, %.loopexit.i.preheader.i.i.outer29 ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouter29_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderii_ReadBuf0_reg <= main_loopexitipreheaderii_ReadBuf0;
		if (start == 1'b0 && ^(main_loopexitipreheaderii_ReadBuf0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderii_ReadBuf0_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i*/
	/*   %ReadBuf.0 = phi i8* [ %ReadBuf.0.be, %.loopexit.i.preheader.i.i.backedge ], [ %ReadBuf.0.ph30, %.loopexit.i.preheader.i.i.outer29 ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiibackedge_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderii_ReadBuf0_reg <= main_loopexitipreheaderii_ReadBuf0;
		if (start == 1'b0 && ^(main_loopexitipreheaderii_ReadBuf0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderii_ReadBuf0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i*/
	/*   %14 = add i32 %i_marker.0.ph32, %indvar176*/
		main_loopexitipreheaderii_14 = (main_loopexitipreheaderiiouter29_i_marker0ph32_reg + main_loopexitipreheaderii_indvar176_reg);
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderii_14_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i*/
	/*   %14 = add i32 %i_marker.0.ph32, %indvar176*/
	else if((cur_state == LEGUP_F_main_BB_loopexitipreheaderii_18)) begin
		main_loopexitipreheaderii_14_reg <= main_loopexitipreheaderii_14;
		if (start == 1'b0 && ^(main_loopexitipreheaderii_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderii_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i*/
	/*   %scevgep178 = getelementptr [10 x i32]* @out_unread_marker, i32 0, i32 %14*/
		main_loopexitipreheaderii_scevgep178 = (1'd0 + (4 * main_loopexitipreheaderii_14_reg));
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderii_scevgep178_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i*/
	/*   %scevgep178 = getelementptr [10 x i32]* @out_unread_marker, i32 0, i32 %14*/
	else if((cur_state == LEGUP_F_main_BB_loopexitipreheaderii_19)) begin
		main_loopexitipreheaderii_scevgep178_reg <= main_loopexitipreheaderii_scevgep178;
		if (start == 1'b0 && ^(main_loopexitipreheaderii_scevgep178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderii_scevgep178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i*/
	/*   %15 = add i32 %13, %indvar176*/
		main_loopexitipreheaderii_15 = (main_loopexitipreheaderiiouter29_13_reg + main_loopexitipreheaderii_indvar176_reg);
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderii_15_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i*/
	/*   %15 = add i32 %13, %indvar176*/
	else if((cur_state == LEGUP_F_main_BB_loopexitipreheaderii_18)) begin
		main_loopexitipreheaderii_15_reg <= main_loopexitipreheaderii_15;
		if (start == 1'b0 && ^(main_loopexitipreheaderii_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderii_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i.i*/
	/*   %17 = phi i8* [ %ReadBuf.0, %.loopexit.i.preheader.i.i ], [ %scevgep175, %.loopexit.i.i.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderii_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitiii_17 = main_loopexitipreheaderii_ReadBuf0_reg;
	end
	/* main: %.loopexit.i.i.i*/
	/*   %17 = phi i8* [ %ReadBuf.0, %.loopexit.i.preheader.i.i ], [ %scevgep175, %.loopexit.i.i.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexitiiiloopexit_21) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitiii_17 = main_preheaderiii_scevgep175_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitiii_17_reg <= 0;
	/* main: %.loopexit.i.i.i*/
	/*   %17 = phi i8* [ %ReadBuf.0, %.loopexit.i.preheader.i.i ], [ %scevgep175, %.loopexit.i.i.i.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderii_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitiii_17_reg <= main_loopexitiii_17;
		if (start == 1'b0 && ^(main_loopexitiii_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiii_17_reg"); $finish; end
	end
	/* main: %.loopexit.i.i.i*/
	/*   %17 = phi i8* [ %ReadBuf.0, %.loopexit.i.preheader.i.i ], [ %scevgep175, %.loopexit.i.i.i.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitiiiloopexit_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitiii_17_reg <= main_loopexitiii_17;
		if (start == 1'b0 && ^(main_loopexitiii_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiii_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i.i*/
	/*   %storemerge2.i.i.i = getelementptr inbounds i8* %17, i32 1*/
		main_loopexitiii_storemerge2iii = (main_loopexitiii_17_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	if (reset)
		main_loopexitiii_storemerge2iii_reg <= 0;
	/* main: %.loopexit.i.i.i*/
	/*   %storemerge2.i.i.i = getelementptr inbounds i8* %17, i32 1*/
	else if((cur_state == LEGUP_F_main_BB_loopexitiii_22)) begin
		main_loopexitiii_storemerge2iii_reg <= main_loopexitiii_storemerge2iii;
		if (start == 1'b0 && ^(main_loopexitiii_storemerge2iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiii_storemerge2iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i.i*/
	/*   %.sink3.i.i.i = load i8* %17, align 1*/
		main_loopexitiii_sink3iii = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_loopexitiii_sink3iii_reg <= 0;
	/* main: %.loopexit.i.i.i*/
	/*   %.sink3.i.i.i = load i8* %17, align 1*/
	else if((cur_state == LEGUP_F_main_BB_loopexitiii_24)) begin
		main_loopexitiii_sink3iii_reg <= main_loopexitiii_sink3iii;
		if (start == 1'b0 && ^(main_loopexitiii_sink3iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiii_sink3iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i.i*/
	/*   %18 = icmp eq i8 %.sink3.i.i.i, -1*/
		main_loopexitiii_18 = (main_loopexitiii_sink3iii == -8'd1);
end
always @(posedge clk) begin
	if (reset)
		main_loopexitiii_18_reg <= 0;
	/* main: %.loopexit.i.i.i*/
	/*   %18 = icmp eq i8 %.sink3.i.i.i, -1*/
	else if((cur_state == LEGUP_F_main_BB_loopexitiii_24)) begin
		main_loopexitiii_18_reg <= main_loopexitiii_18;
		if (start == 1'b0 && ^(main_loopexitiii_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiii_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %19 = phi i8* [ %20, %.lr.ph.i.i.i ], [ %17, %.lr.ph.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiiipreheader_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiii_19 = main_loopexitiii_17_reg;
	end
	/* main: %.lr.ph.i.i.i*/
	/*   %19 = phi i8* [ %20, %.lr.ph.i.i.i ], [ %17, %.lr.ph.i.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphiii_28) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiii_21 == 1'd0))) */ begin
		main_lrphiii_19 = main_lrphiii_20_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_lrphiii_19_reg <= 0;
	/* main: %.lr.ph.i.i.i*/
	/*   %19 = phi i8* [ %20, %.lr.ph.i.i.i ], [ %17, %.lr.ph.i.i.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_lrphiiipreheader_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiii_19_reg <= main_lrphiii_19;
		if (start == 1'b0 && ^(main_lrphiii_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_19_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i*/
	/*   %19 = phi i8* [ %20, %.lr.ph.i.i.i ], [ %17, %.lr.ph.i.i.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB_lrphiii_28) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiii_21 == 1'd0))) begin
		main_lrphiii_19_reg <= main_lrphiii_19;
		if (start == 1'b0 && ^(main_lrphiii_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %20 = phi i8* [ %storemerge.i.i.i, %.lr.ph.i.i.i ], [ %storemerge2.i.i.i, %.lr.ph.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiiipreheader_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiii_20 = main_loopexitiii_storemerge2iii_reg;
	end
	/* main: %.lr.ph.i.i.i*/
	/*   %20 = phi i8* [ %storemerge.i.i.i, %.lr.ph.i.i.i ], [ %storemerge2.i.i.i, %.lr.ph.i.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphiii_28) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiii_21 == 1'd0))) */ begin
		main_lrphiii_20 = main_lrphiii_storemergeiii_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_lrphiii_20_reg <= 0;
	/* main: %.lr.ph.i.i.i*/
	/*   %20 = phi i8* [ %storemerge.i.i.i, %.lr.ph.i.i.i ], [ %storemerge2.i.i.i, %.lr.ph.i.i.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_lrphiiipreheader_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiii_20_reg <= main_lrphiii_20;
		if (start == 1'b0 && ^(main_lrphiii_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_20_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i*/
	/*   %20 = phi i8* [ %storemerge.i.i.i, %.lr.ph.i.i.i ], [ %storemerge2.i.i.i, %.lr.ph.i.i.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB_lrphiii_28) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiii_21 == 1'd0))) begin
		main_lrphiii_20_reg <= main_lrphiii_20;
		if (start == 1'b0 && ^(main_lrphiii_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %storemerge.i.i.i = getelementptr inbounds i8* %19, i32 2*/
		main_lrphiii_storemergeiii = (main_lrphiii_19_reg + (1 * 32'd2));
end
always @(posedge clk) begin
	if (reset)
		main_lrphiii_storemergeiii_reg <= 0;
	/* main: %.lr.ph.i.i.i*/
	/*   %storemerge.i.i.i = getelementptr inbounds i8* %19, i32 2*/
	else if((cur_state == LEGUP_F_main_BB_lrphiii_26)) begin
		main_lrphiii_storemergeiii_reg <= main_lrphiii_storemergeiii;
		if (start == 1'b0 && ^(main_lrphiii_storemergeiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_storemergeiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %.sink.i.i.i = load i8* %20, align 1*/
		main_lrphiii_sinkiii = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_lrphiii_sinkiii_reg <= 0;
	/* main: %.lr.ph.i.i.i*/
	/*   %.sink.i.i.i = load i8* %20, align 1*/
	else if((cur_state == LEGUP_F_main_BB_lrphiii_28)) begin
		main_lrphiii_sinkiii_reg <= main_lrphiii_sinkiii;
		if (start == 1'b0 && ^(main_lrphiii_sinkiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_sinkiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %21 = icmp eq i8 %.sink.i.i.i, -1*/
		main_lrphiii_21 = (main_lrphiii_sinkiii == -8'd1);
end
always @(posedge clk) begin
	if (reset)
		main_lrphiii_21_reg <= 0;
	/* main: %.lr.ph.i.i.i*/
	/*   %21 = icmp eq i8 %.sink.i.i.i, -1*/
	else if((cur_state == LEGUP_F_main_BB_lrphiii_28)) begin
		main_lrphiii_21_reg <= main_lrphiii_21;
		if (start == 1'b0 && ^(main_lrphiii_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i.i.preheader*/
	/*   %.ph = phi i8* [ %storemerge2.i.i.i, %.loopexit.i.i.i ], [ %storemerge.i.i.i, %.preheader.i.i.i.preheader.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_loopexitiii_24) & (memory_controller_waitrequest == 1'd0)) & (main_loopexitiii_18 == 1'd1))) begin
		main_preheaderiiipreheader_ph = main_loopexitiii_storemerge2iii_reg;
	end
	/* main: %.preheader.i.i.i.preheader*/
	/*   %.ph = phi i8* [ %storemerge2.i.i.i, %.loopexit.i.i.i ], [ %storemerge.i.i.i, %.preheader.i.i.i.preheader.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheaderiiipreheaderloopexit_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheaderiiipreheader_ph = main_lrphiii_storemergeiii_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderiiipreheader_ph_reg <= 0;
	/* main: %.preheader.i.i.i.preheader*/
	/*   %.ph = phi i8* [ %storemerge2.i.i.i, %.loopexit.i.i.i ], [ %storemerge.i.i.i, %.preheader.i.i.i.preheader.loopexit ]*/
	else if((((cur_state == LEGUP_F_main_BB_loopexitiii_24) & (memory_controller_waitrequest == 1'd0)) & (main_loopexitiii_18 == 1'd1))) begin
		main_preheaderiiipreheader_ph_reg <= main_preheaderiiipreheader_ph;
		if (start == 1'b0 && ^(main_preheaderiiipreheader_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiiipreheader_ph_reg"); $finish; end
	end
	/* main: %.preheader.i.i.i.preheader*/
	/*   %.ph = phi i8* [ %storemerge2.i.i.i, %.loopexit.i.i.i ], [ %storemerge.i.i.i, %.preheader.i.i.i.preheader.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_preheaderiiipreheaderloopexit_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderiiipreheader_ph_reg <= main_preheaderiiipreheader_ph;
		if (start == 1'b0 && ^(main_preheaderiiipreheader_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiiipreheader_ph_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i.i*/
	/*   %indvar172 = phi i32 [ 0, %.preheader.i.i.i.preheader ], [ %indvar.next173, %.preheader.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderiiipreheader_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderiii_indvar172 = 32'd0;
	end
	/* main: %.preheader.i.i.i*/
	/*   %indvar172 = phi i32 [ 0, %.preheader.i.i.i.preheader ], [ %indvar.next173, %.preheader.i.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderiii_33) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderiii_24 == 32'd255))) */ begin
		main_preheaderiii_indvar172 = main_preheaderiii_indvarnext173_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderiii_indvar172_reg <= 0;
	/* main: %.preheader.i.i.i*/
	/*   %indvar172 = phi i32 [ 0, %.preheader.i.i.i.preheader ], [ %indvar.next173, %.preheader.i.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_preheaderiiipreheader_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderiii_indvar172_reg <= main_preheaderiii_indvar172;
		if (start == 1'b0 && ^(main_preheaderiii_indvar172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_indvar172_reg"); $finish; end
	end
	/* main: %.preheader.i.i.i*/
	/*   %indvar172 = phi i32 [ 0, %.preheader.i.i.i.preheader ], [ %indvar.next173, %.preheader.i.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB_preheaderiii_33) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderiii_24 == 32'd255))) begin
		main_preheaderiii_indvar172_reg <= main_preheaderiii_indvar172;
		if (start == 1'b0 && ^(main_preheaderiii_indvar172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_indvar172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i.i*/
	/*   %scevgep174 = getelementptr i8* %.ph, i32 %indvar172*/
		main_preheaderiii_scevgep174 = (main_preheaderiiipreheader_ph_reg + (1 * main_preheaderiii_indvar172_reg));
end
always @(posedge clk) begin
	if (reset)
		main_preheaderiii_scevgep174_reg <= 0;
	/* main: %.preheader.i.i.i*/
	/*   %scevgep174 = getelementptr i8* %.ph, i32 %indvar172*/
	else if((cur_state == LEGUP_F_main_BB_preheaderiii_31)) begin
		main_preheaderiii_scevgep174_reg <= main_preheaderiii_scevgep174;
		if (start == 1'b0 && ^(main_preheaderiii_scevgep174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_scevgep174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i.i*/
	/*   %22 = add i32 %indvar172, 1*/
		main_preheaderiii_22 = (main_preheaderiii_indvar172_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderiii_22_reg <= 0;
	/* main: %.preheader.i.i.i*/
	/*   %22 = add i32 %indvar172, 1*/
	else if((cur_state == LEGUP_F_main_BB_preheaderiii_31)) begin
		main_preheaderiii_22_reg <= main_preheaderiii_22;
		if (start == 1'b0 && ^(main_preheaderiii_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i.i*/
	/*   %scevgep175 = getelementptr i8* %.ph, i32 %22*/
		main_preheaderiii_scevgep175 = (main_preheaderiiipreheader_ph_reg + (1 * main_preheaderiii_22_reg));
end
always @(posedge clk) begin
	if (reset)
		main_preheaderiii_scevgep175_reg <= 0;
	/* main: %.preheader.i.i.i*/
	/*   %scevgep175 = getelementptr i8* %.ph, i32 %22*/
	else if((cur_state == LEGUP_F_main_BB_preheaderiii_32)) begin
		main_preheaderiii_scevgep175_reg <= main_preheaderiii_scevgep175;
		if (start == 1'b0 && ^(main_preheaderiii_scevgep175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_scevgep175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i.i*/
	/*   %23 = load i8* %scevgep174, align 1, !tbaa !5*/
		main_preheaderiii_23 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_preheaderiii_23_reg <= 0;
	/* main: %.preheader.i.i.i*/
	/*   %23 = load i8* %scevgep174, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_preheaderiii_33)) begin
		main_preheaderiii_23_reg <= main_preheaderiii_23;
		if (start == 1'b0 && ^(main_preheaderiii_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i.i*/
	/*   %24 = zext i8 %23 to i32*/
		main_preheaderiii_24 = main_preheaderiii_23;
end
always @(posedge clk) begin
	if (reset)
		main_preheaderiii_24_reg <= 0;
	/* main: %.preheader.i.i.i*/
	/*   %24 = zext i8 %23 to i32*/
	else if((cur_state == LEGUP_F_main_BB_preheaderiii_33)) begin
		main_preheaderiii_24_reg <= main_preheaderiii_24;
		if (start == 1'b0 && ^(main_preheaderiii_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i.i*/
	/*   %indvar.next173 = add i32 %indvar172, 1*/
		main_preheaderiii_indvarnext173 = (main_preheaderiii_indvar172_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderiii_indvarnext173_reg <= 0;
	/* main: %.preheader.i.i.i*/
	/*   %indvar.next173 = add i32 %indvar172, 1*/
	else if((cur_state == LEGUP_F_main_BB_preheaderiii_31)) begin
		main_preheaderiii_indvarnext173_reg <= main_preheaderiii_indvarnext173;
		if (start == 1'b0 && ^(main_preheaderiii_indvarnext173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_indvarnext173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %next_marker.exit.i.i*/
	/*   %26 = load i32* %scevgep178, align 4, !tbaa !1*/
		main_next_markerexitii_26 = out_unread_marker_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_next_markerexitii_26_reg <= 0;
	/* main: %next_marker.exit.i.i*/
	/*   %26 = load i32* %scevgep178, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_next_markerexitii_35)) begin
		main_next_markerexitii_26_reg <= main_next_markerexitii_26;
		if (start == 1'b0 && ^(main_next_markerexitii_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_markerexitii_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %next_marker.exit.i.i*/
	/*   %27 = icmp eq i32 %24, %26*/
		main_next_markerexitii_27 = (main_preheaderiii_24_reg == main_next_markerexitii_26);
end
always @(posedge clk) begin
	if (reset)
		main_next_markerexitii_27_reg <= 0;
	/* main: %next_marker.exit.i.i*/
	/*   %27 = icmp eq i32 %24, %26*/
	else if((cur_state == LEGUP_F_main_BB_next_markerexitii_35)) begin
		main_next_markerexitii_27_reg <= main_next_markerexitii_27;
		if (start == 1'b0 && ^(main_next_markerexitii_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_markerexitii_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %29 = load i32* @main_result, align 4, !tbaa !1*/
		main_28_29 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_28_29_reg <= 0;
	/* main: %28*/
	/*   %29 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__28_38)) begin
		main_28_29_reg <= main_28_29;
		if (start == 1'b0 && ^(main_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %30 = add nsw i32 %29, 1*/
		main_28_30 = (main_28_29 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_28_30_reg <= 0;
	/* main: %28*/
	/*   %30 = add nsw i32 %29, 1*/
	else if((cur_state == LEGUP_F_main_BB__28_38)) begin
		main_28_30_reg <= main_28_30;
		if (start == 1'b0 && ^(main_28_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.backedge*/
	/*   %ReadBuf.0.be = phi i8* [ %scevgep175, %31 ], [ %433, %.preheader.i11.i.i ], [ %251, %.preheader.i7.i.i ]*/
	if ((((((((cur_state == LEGUP_F_main_BB__31_40) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderiii_24_reg != 32'd217)) & (main_preheaderiii_24_reg != 32'd192)) & (main_preheaderiii_24_reg != 32'd218)) & (main_preheaderiii_24_reg != 32'd196)) & (main_preheaderiii_24_reg != 32'd219))) begin
		main_loopexitipreheaderiibackedge_ReadBuf0be = main_preheaderiii_scevgep175_reg;
	end
	/* main: %.loopexit.i.preheader.i.i.backedge*/
	/*   %ReadBuf.0.be = phi i8* [ %scevgep175, %31 ], [ %433, %.preheader.i11.i.i ], [ %251, %.preheader.i7.i.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB_preheaderi7ii_192) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi7ii_263 == 1'd0))) begin
		main_loopexitipreheaderiibackedge_ReadBuf0be = main_246_251_reg;
	end
	/* main: %.loopexit.i.preheader.i.i.backedge*/
	/*   %ReadBuf.0.be = phi i8* [ %scevgep175, %31 ], [ %433, %.preheader.i11.i.i ], [ %251, %.preheader.i7.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi11ii_281) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi11ii_445 == 1'd0))) */ begin
		main_loopexitipreheaderiibackedge_ReadBuf0be = main_428_433_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiibackedge_ReadBuf0be_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.backedge*/
	/*   %ReadBuf.0.be = phi i8* [ %scevgep175, %31 ], [ %433, %.preheader.i11.i.i ], [ %251, %.preheader.i7.i.i ]*/
	else if((((((((cur_state == LEGUP_F_main_BB__31_40) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderiii_24_reg != 32'd217)) & (main_preheaderiii_24_reg != 32'd192)) & (main_preheaderiii_24_reg != 32'd218)) & (main_preheaderiii_24_reg != 32'd196)) & (main_preheaderiii_24_reg != 32'd219))) begin
		main_loopexitipreheaderiibackedge_ReadBuf0be_reg <= main_loopexitipreheaderiibackedge_ReadBuf0be;
		if (start == 1'b0 && ^(main_loopexitipreheaderiibackedge_ReadBuf0be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiibackedge_ReadBuf0be_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i.backedge*/
	/*   %ReadBuf.0.be = phi i8* [ %scevgep175, %31 ], [ %433, %.preheader.i11.i.i ], [ %251, %.preheader.i7.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB_preheaderi7ii_192) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi7ii_263 == 1'd0))) begin
		main_loopexitipreheaderiibackedge_ReadBuf0be_reg <= main_loopexitipreheaderiibackedge_ReadBuf0be;
		if (start == 1'b0 && ^(main_loopexitipreheaderiibackedge_ReadBuf0be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiibackedge_ReadBuf0be_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i.backedge*/
	/*   %ReadBuf.0.be = phi i8* [ %scevgep175, %31 ], [ %433, %.preheader.i11.i.i ], [ %251, %.preheader.i7.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB_preheaderi11ii_281) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi11ii_445 == 1'd0))) begin
		main_loopexitipreheaderiibackedge_ReadBuf0be_reg <= main_loopexitipreheaderiibackedge_ReadBuf0be;
		if (start == 1'b0 && ^(main_loopexitipreheaderiibackedge_ReadBuf0be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiibackedge_ReadBuf0be_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.backedge*/
	/*   %indvar.next177 = add i32 %indvar176, 1*/
		main_loopexitipreheaderiibackedge_indvarnext177 = (main_loopexitipreheaderii_indvar176_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiibackedge_indvarnext177_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.backedge*/
	/*   %indvar.next177 = add i32 %indvar176, 1*/
	else if((cur_state == LEGUP_F_main_BB_loopexitipreheaderiibackedge_41)) begin
		main_loopexitipreheaderiibackedge_indvarnext177_reg <= main_loopexitipreheaderiibackedge_indvarnext177;
		if (start == 1'b0 && ^(main_loopexitipreheaderiibackedge_indvarnext177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiibackedge_indvarnext177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %scevgep174.sum10 = add i32 %indvar172, 2*/
		main_32_scevgep174sum10 = (main_preheaderiii_indvar172_reg + 32'd2);
end
always @(posedge clk) begin
	if (reset)
		main_32_scevgep174sum10_reg <= 0;
	/* main: %32*/
	/*   %scevgep174.sum10 = add i32 %indvar172, 2*/
	else if((cur_state == LEGUP_F_main_BB__32_42)) begin
		main_32_scevgep174sum10_reg <= main_32_scevgep174sum10;
		if (start == 1'b0 && ^(main_32_scevgep174sum10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_scevgep174sum10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %33 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum10*/
		main_32_33 = (main_preheaderiiipreheader_ph_reg + (1 * main_32_scevgep174sum10_reg));
end
always @(posedge clk) begin
	if (reset)
		main_32_33_reg <= 0;
	/* main: %32*/
	/*   %33 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum10*/
	else if((cur_state == LEGUP_F_main_BB__32_43)) begin
		main_32_33_reg <= main_32_33;
		if (start == 1'b0 && ^(main_32_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %34 = load i8* %scevgep175, align 1, !tbaa !5*/
		main_32_34 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_32_34_reg <= 0;
	/* main: %32*/
	/*   %34 = load i8* %scevgep175, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__32_44)) begin
		main_32_34_reg <= main_32_34;
		if (start == 1'b0 && ^(main_32_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %35 = zext i8 %34 to i16*/
		main_32_35 = main_32_34;
end
always @(posedge clk) begin
	if (reset)
		main_32_35_reg <= 0;
	/* main: %32*/
	/*   %35 = zext i8 %34 to i16*/
	else if((cur_state == LEGUP_F_main_BB__32_44)) begin
		main_32_35_reg <= main_32_35;
		if (start == 1'b0 && ^(main_32_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %36 = shl nuw i16 %35, 8*/
		main_32_36 = (main_32_35 <<< (16'd8 % 16'd16));
end
always @(posedge clk) begin
	if (reset)
		main_32_36_reg <= 0;
	/* main: %32*/
	/*   %36 = shl nuw i16 %35, 8*/
	else if((cur_state == LEGUP_F_main_BB__32_44)) begin
		main_32_36_reg <= main_32_36;
		if (start == 1'b0 && ^(main_32_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %scevgep174.sum11 = add i32 %indvar172, 3*/
		main_32_scevgep174sum11 = (main_preheaderiii_indvar172_reg + 32'd3);
end
always @(posedge clk) begin
	if (reset)
		main_32_scevgep174sum11_reg <= 0;
	/* main: %32*/
	/*   %scevgep174.sum11 = add i32 %indvar172, 3*/
	else if((cur_state == LEGUP_F_main_BB__32_42)) begin
		main_32_scevgep174sum11_reg <= main_32_scevgep174sum11;
		if (start == 1'b0 && ^(main_32_scevgep174sum11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_scevgep174sum11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %37 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum11*/
		main_32_37 = (main_preheaderiiipreheader_ph_reg + (1 * main_32_scevgep174sum11_reg));
end
always @(posedge clk) begin
	if (reset)
		main_32_37_reg <= 0;
	/* main: %32*/
	/*   %37 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum11*/
	else if((cur_state == LEGUP_F_main_BB__32_43)) begin
		main_32_37_reg <= main_32_37;
		if (start == 1'b0 && ^(main_32_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %38 = load i8* %33, align 1, !tbaa !5*/
		main_32_38 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_32_38_reg <= 0;
	/* main: %32*/
	/*   %38 = load i8* %33, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__32_45)) begin
		main_32_38_reg <= main_32_38;
		if (start == 1'b0 && ^(main_32_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %39 = zext i8 %38 to i16*/
		main_32_39 = main_32_38;
end
always @(posedge clk) begin
	if (reset)
		main_32_39_reg <= 0;
	/* main: %32*/
	/*   %39 = zext i8 %38 to i16*/
	else if((cur_state == LEGUP_F_main_BB__32_45)) begin
		main_32_39_reg <= main_32_39;
		if (start == 1'b0 && ^(main_32_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %40 = or i16 %36, %39*/
		main_32_40 = (main_32_36_reg | main_32_39);
end
always @(posedge clk) begin
	if (reset)
		main_32_40_reg <= 0;
	/* main: %32*/
	/*   %40 = or i16 %36, %39*/
	else if((cur_state == LEGUP_F_main_BB__32_45)) begin
		main_32_40_reg <= main_32_40;
		if (start == 1'b0 && ^(main_32_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %41 = sext i16 %40 to i32*/
		main_32_41 = $signed(main_32_40);
end
always @(posedge clk) begin
	if (reset)
		main_32_41_reg <= 0;
	/* main: %32*/
	/*   %41 = sext i16 %40 to i32*/
	else if((cur_state == LEGUP_F_main_BB__32_45)) begin
		main_32_41_reg <= main_32_41;
		if (start == 1'b0 && ^(main_32_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %scevgep174.sum12 = add i32 %indvar172, 4*/
		main_32_scevgep174sum12 = (main_preheaderiii_indvar172_reg + 32'd4);
end
always @(posedge clk) begin
	if (reset)
		main_32_scevgep174sum12_reg <= 0;
	/* main: %32*/
	/*   %scevgep174.sum12 = add i32 %indvar172, 4*/
	else if((cur_state == LEGUP_F_main_BB__32_42)) begin
		main_32_scevgep174sum12_reg <= main_32_scevgep174sum12;
		if (start == 1'b0 && ^(main_32_scevgep174sum12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_scevgep174sum12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %42 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum12*/
		main_32_42 = (main_preheaderiiipreheader_ph_reg + (1 * main_32_scevgep174sum12_reg));
end
always @(posedge clk) begin
	if (reset)
		main_32_42_reg <= 0;
	/* main: %32*/
	/*   %42 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum12*/
	else if((cur_state == LEGUP_F_main_BB__32_43)) begin
		main_32_42_reg <= main_32_42;
		if (start == 1'b0 && ^(main_32_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %43 = load i8* %37, align 1, !tbaa !5*/
		main_32_43 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_32_43_reg <= 0;
	/* main: %32*/
	/*   %43 = load i8* %37, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__32_45)) begin
		main_32_43_reg <= main_32_43;
		if (start == 1'b0 && ^(main_32_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %scevgep174.sum13 = add i32 %indvar172, 5*/
		main_32_scevgep174sum13 = (main_preheaderiii_indvar172_reg + 32'd5);
end
always @(posedge clk) begin
	if (reset)
		main_32_scevgep174sum13_reg <= 0;
	/* main: %32*/
	/*   %scevgep174.sum13 = add i32 %indvar172, 5*/
	else if((cur_state == LEGUP_F_main_BB__32_42)) begin
		main_32_scevgep174sum13_reg <= main_32_scevgep174sum13;
		if (start == 1'b0 && ^(main_32_scevgep174sum13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_scevgep174sum13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %44 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum13*/
		main_32_44 = (main_preheaderiiipreheader_ph_reg + (1 * main_32_scevgep174sum13_reg));
end
always @(posedge clk) begin
	if (reset)
		main_32_44_reg <= 0;
	/* main: %32*/
	/*   %44 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum13*/
	else if((cur_state == LEGUP_F_main_BB__32_43)) begin
		main_32_44_reg <= main_32_44;
		if (start == 1'b0 && ^(main_32_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %45 = load i8* %42, align 1, !tbaa !5*/
		main_32_45 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_32_45_reg <= 0;
	/* main: %32*/
	/*   %45 = load i8* %42, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__32_46)) begin
		main_32_45_reg <= main_32_45;
		if (start == 1'b0 && ^(main_32_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %46 = zext i8 %45 to i16*/
		main_32_46 = main_32_45;
end
always @(posedge clk) begin
	if (reset)
		main_32_46_reg <= 0;
	/* main: %32*/
	/*   %46 = zext i8 %45 to i16*/
	else if((cur_state == LEGUP_F_main_BB__32_46)) begin
		main_32_46_reg <= main_32_46;
		if (start == 1'b0 && ^(main_32_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %47 = shl nuw i16 %46, 8*/
		main_32_47 = (main_32_46 <<< (16'd8 % 16'd16));
end
always @(posedge clk) begin
	if (reset)
		main_32_47_reg <= 0;
	/* main: %32*/
	/*   %47 = shl nuw i16 %46, 8*/
	else if((cur_state == LEGUP_F_main_BB__32_46)) begin
		main_32_47_reg <= main_32_47;
		if (start == 1'b0 && ^(main_32_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %scevgep174.sum14 = add i32 %indvar172, 6*/
		main_32_scevgep174sum14 = (main_preheaderiii_indvar172_reg + 32'd6);
end
always @(posedge clk) begin
	if (reset)
		main_32_scevgep174sum14_reg <= 0;
	/* main: %32*/
	/*   %scevgep174.sum14 = add i32 %indvar172, 6*/
	else if((cur_state == LEGUP_F_main_BB__32_42)) begin
		main_32_scevgep174sum14_reg <= main_32_scevgep174sum14;
		if (start == 1'b0 && ^(main_32_scevgep174sum14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_scevgep174sum14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %48 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum14*/
		main_32_48 = (main_preheaderiiipreheader_ph_reg + (1 * main_32_scevgep174sum14_reg));
end
always @(posedge clk) begin
	if (reset)
		main_32_48_reg <= 0;
	/* main: %32*/
	/*   %48 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum14*/
	else if((cur_state == LEGUP_F_main_BB__32_43)) begin
		main_32_48_reg <= main_32_48;
		if (start == 1'b0 && ^(main_32_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %49 = load i8* %44, align 1, !tbaa !5*/
		main_32_49 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_32_49_reg <= 0;
	/* main: %32*/
	/*   %49 = load i8* %44, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__32_46)) begin
		main_32_49_reg <= main_32_49;
		if (start == 1'b0 && ^(main_32_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %50 = zext i8 %49 to i16*/
		main_32_50 = main_32_49;
end
always @(posedge clk) begin
	if (reset)
		main_32_50_reg <= 0;
	/* main: %32*/
	/*   %50 = zext i8 %49 to i16*/
	else if((cur_state == LEGUP_F_main_BB__32_46)) begin
		main_32_50_reg <= main_32_50;
		if (start == 1'b0 && ^(main_32_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %51 = or i16 %47, %50*/
		main_32_51 = (main_32_47 | main_32_50);
end
always @(posedge clk) begin
	if (reset)
		main_32_51_reg <= 0;
	/* main: %32*/
	/*   %51 = or i16 %47, %50*/
	else if((cur_state == LEGUP_F_main_BB__32_46)) begin
		main_32_51_reg <= main_32_51;
		if (start == 1'b0 && ^(main_32_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %scevgep174.sum15 = add i32 %indvar172, 7*/
		main_32_scevgep174sum15 = (main_preheaderiii_indvar172_reg + 32'd7);
end
always @(posedge clk) begin
	if (reset)
		main_32_scevgep174sum15_reg <= 0;
	/* main: %32*/
	/*   %scevgep174.sum15 = add i32 %indvar172, 7*/
	else if((cur_state == LEGUP_F_main_BB__32_42)) begin
		main_32_scevgep174sum15_reg <= main_32_scevgep174sum15;
		if (start == 1'b0 && ^(main_32_scevgep174sum15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_scevgep174sum15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %52 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum15*/
		main_32_52 = (main_preheaderiiipreheader_ph_reg + (1 * main_32_scevgep174sum15_reg));
end
always @(posedge clk) begin
	if (reset)
		main_32_52_reg <= 0;
	/* main: %32*/
	/*   %52 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum15*/
	else if((cur_state == LEGUP_F_main_BB__32_43)) begin
		main_32_52_reg <= main_32_52;
		if (start == 1'b0 && ^(main_32_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %53 = load i8* %48, align 1, !tbaa !5*/
		main_32_53 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_32_53_reg <= 0;
	/* main: %32*/
	/*   %53 = load i8* %48, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__32_49)) begin
		main_32_53_reg <= main_32_53;
		if (start == 1'b0 && ^(main_32_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %54 = zext i8 %53 to i16*/
		main_32_54 = main_32_53;
end
always @(posedge clk) begin
	if (reset)
		main_32_54_reg <= 0;
	/* main: %32*/
	/*   %54 = zext i8 %53 to i16*/
	else if((cur_state == LEGUP_F_main_BB__32_49)) begin
		main_32_54_reg <= main_32_54;
		if (start == 1'b0 && ^(main_32_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %55 = shl nuw i16 %54, 8*/
		main_32_55 = (main_32_54 <<< (16'd8 % 16'd16));
end
always @(posedge clk) begin
	if (reset)
		main_32_55_reg <= 0;
	/* main: %32*/
	/*   %55 = shl nuw i16 %54, 8*/
	else if((cur_state == LEGUP_F_main_BB__32_49)) begin
		main_32_55_reg <= main_32_55;
		if (start == 1'b0 && ^(main_32_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %scevgep174.sum16 = add i32 %indvar172, 8*/
		main_32_scevgep174sum16 = (main_preheaderiii_indvar172_reg + 32'd8);
end
always @(posedge clk) begin
	if (reset)
		main_32_scevgep174sum16_reg <= 0;
	/* main: %32*/
	/*   %scevgep174.sum16 = add i32 %indvar172, 8*/
	else if((cur_state == LEGUP_F_main_BB__32_42)) begin
		main_32_scevgep174sum16_reg <= main_32_scevgep174sum16;
		if (start == 1'b0 && ^(main_32_scevgep174sum16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_scevgep174sum16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %56 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum16*/
		main_32_56 = (main_preheaderiiipreheader_ph_reg + (1 * main_32_scevgep174sum16_reg));
end
always @(posedge clk) begin
	if (reset)
		main_32_56_reg <= 0;
	/* main: %32*/
	/*   %56 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum16*/
	else if((cur_state == LEGUP_F_main_BB__32_43)) begin
		main_32_56_reg <= main_32_56;
		if (start == 1'b0 && ^(main_32_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %57 = load i8* %52, align 1, !tbaa !5*/
		main_32_57 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_32_57_reg <= 0;
	/* main: %32*/
	/*   %57 = load i8* %52, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__32_49)) begin
		main_32_57_reg <= main_32_57;
		if (start == 1'b0 && ^(main_32_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %58 = zext i8 %57 to i16*/
		main_32_58 = main_32_57;
end
always @(posedge clk) begin
	if (reset)
		main_32_58_reg <= 0;
	/* main: %32*/
	/*   %58 = zext i8 %57 to i16*/
	else if((cur_state == LEGUP_F_main_BB__32_49)) begin
		main_32_58_reg <= main_32_58;
		if (start == 1'b0 && ^(main_32_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %59 = or i16 %55, %58*/
		main_32_59 = (main_32_55 | main_32_58);
end
always @(posedge clk) begin
	if (reset)
		main_32_59_reg <= 0;
	/* main: %32*/
	/*   %59 = or i16 %55, %58*/
	else if((cur_state == LEGUP_F_main_BB__32_49)) begin
		main_32_59_reg <= main_32_59;
		if (start == 1'b0 && ^(main_32_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %scevgep174.sum17 = add i32 %indvar172, 9*/
		main_32_scevgep174sum17 = (main_preheaderiii_indvar172_reg + 32'd9);
end
always @(posedge clk) begin
	if (reset)
		main_32_scevgep174sum17_reg <= 0;
	/* main: %32*/
	/*   %scevgep174.sum17 = add i32 %indvar172, 9*/
	else if((cur_state == LEGUP_F_main_BB__32_42)) begin
		main_32_scevgep174sum17_reg <= main_32_scevgep174sum17;
		if (start == 1'b0 && ^(main_32_scevgep174sum17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_scevgep174sum17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %60 = load i8* %56, align 1, !tbaa !5*/
		main_32_60 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_32_60_reg <= 0;
	/* main: %32*/
	/*   %60 = load i8* %56, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__32_52)) begin
		main_32_60_reg <= main_32_60;
		if (start == 1'b0 && ^(main_32_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %62 = sext i8 %43 to i32*/
		main_32_62 = $signed(main_32_43);
end
always @(posedge clk) begin
	if (reset)
		main_32_62_reg <= 0;
	/* main: %32*/
	/*   %62 = sext i8 %43 to i32*/
	else if((cur_state == LEGUP_F_main_BB__32_45)) begin
		main_32_62_reg <= main_32_62;
		if (start == 1'b0 && ^(main_32_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %64 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
		main_32_64 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	if (reset)
		main_32_64_reg <= 0;
	/* main: %32*/
	/*   %64 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	else if((cur_state == LEGUP_F_main_BB__32_52)) begin
		main_32_64_reg <= main_32_64;
		if (start == 1'b0 && ^(main_32_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %65 = sext i16 %64 to i32*/
		main_32_65 = $signed(main_32_64);
end
always @(posedge clk) begin
	if (reset)
		main_32_65_reg <= 0;
	/* main: %32*/
	/*   %65 = sext i16 %64 to i32*/
	else if((cur_state == LEGUP_F_main_BB__32_52)) begin
		main_32_65_reg <= main_32_65;
		if (start == 1'b0 && ^(main_32_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %67 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
		main_32_67 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	if (reset)
		main_32_67_reg <= 0;
	/* main: %32*/
	/*   %67 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	else if((cur_state == LEGUP_F_main_BB__32_53)) begin
		main_32_67_reg <= main_32_67;
		if (start == 1'b0 && ^(main_32_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %68 = sext i16 %67 to i32*/
		main_32_68 = $signed(main_32_67);
end
always @(posedge clk) begin
	if (reset)
		main_32_68_reg <= 0;
	/* main: %32*/
	/*   %68 = sext i16 %67 to i32*/
	else if((cur_state == LEGUP_F_main_BB__32_53)) begin
		main_32_68_reg <= main_32_68;
		if (start == 1'b0 && ^(main_32_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %70 = sext i8 %60 to i32*/
		main_32_70 = $signed(main_32_60);
end
always @(posedge clk) begin
	if (reset)
		main_32_70_reg <= 0;
	/* main: %32*/
	/*   %70 = sext i8 %60 to i32*/
	else if((cur_state == LEGUP_F_main_BB__32_52)) begin
		main_32_70_reg <= main_32_70;
		if (start == 1'b0 && ^(main_32_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %72 = icmp eq i16 %40, 17*/
		main_32_72 = (main_32_40 == 16'd17);
end
always @(posedge clk) begin
	if (reset)
		main_32_72_reg <= 0;
	/* main: %32*/
	/*   %72 = icmp eq i16 %40, 17*/
	else if((cur_state == LEGUP_F_main_BB__32_45)) begin
		main_32_72_reg <= main_32_72;
		if (start == 1'b0 && ^(main_32_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %73*/
	/*   %74 = load i32* @main_result, align 4, !tbaa !1*/
		main_73_74 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_73_74_reg <= 0;
	/* main: %73*/
	/*   %74 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__73_56)) begin
		main_73_74_reg <= main_73_74;
		if (start == 1'b0 && ^(main_73_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_73_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %73*/
	/*   %75 = add nsw i32 %74, 1*/
		main_73_75 = (main_73_74 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_73_75_reg <= 0;
	/* main: %73*/
	/*   %75 = add nsw i32 %74, 1*/
	else if((cur_state == LEGUP_F_main_BB__73_56)) begin
		main_73_75_reg <= main_73_75;
		if (start == 1'b0 && ^(main_73_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_73_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %76*/
	/*   %77 = icmp eq i8 %43, 8*/
		main_76_77 = (main_32_43_reg == 8'd8);
end
always @(posedge clk) begin
	if (reset)
		main_76_77_reg <= 0;
	/* main: %76*/
	/*   %77 = icmp eq i8 %43, 8*/
	else if((cur_state == LEGUP_F_main_BB__76_58)) begin
		main_76_77_reg <= main_76_77;
		if (start == 1'b0 && ^(main_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %78*/
	/*   %79 = load i32* @main_result, align 4, !tbaa !1*/
		main_78_79 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_78_79_reg <= 0;
	/* main: %78*/
	/*   %79 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__78_61)) begin
		main_78_79_reg <= main_78_79;
		if (start == 1'b0 && ^(main_78_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_78_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %78*/
	/*   %80 = add nsw i32 %79, 1*/
		main_78_80 = (main_78_79 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_78_80_reg <= 0;
	/* main: %78*/
	/*   %80 = add nsw i32 %79, 1*/
	else if((cur_state == LEGUP_F_main_BB__78_61)) begin
		main_78_80_reg <= main_78_80;
		if (start == 1'b0 && ^(main_78_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_78_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %82 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
		main_81_82 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	if (reset)
		main_81_82_reg <= 0;
	/* main: %81*/
	/*   %82 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	else if((cur_state == LEGUP_F_main_BB__81_65)) begin
		main_81_82_reg <= main_81_82;
		if (start == 1'b0 && ^(main_81_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %83 = icmp eq i16 %82, 59*/
		main_81_83 = (main_81_82 == 16'd59);
end
always @(posedge clk) begin
	if (reset)
		main_81_83_reg <= 0;
	/* main: %81*/
	/*   %83 = icmp eq i16 %82, 59*/
	else if((cur_state == LEGUP_F_main_BB__81_65)) begin
		main_81_83_reg <= main_81_83;
		if (start == 1'b0 && ^(main_81_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_81_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %84*/
	/*   %85 = load i32* @main_result, align 4, !tbaa !1*/
		main_84_85 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_84_85_reg <= 0;
	/* main: %84*/
	/*   %85 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__84_68)) begin
		main_84_85_reg <= main_84_85;
		if (start == 1'b0 && ^(main_84_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_84_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %84*/
	/*   %86 = add nsw i32 %85, 1*/
		main_84_86 = (main_84_85 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_84_86_reg <= 0;
	/* main: %84*/
	/*   %86 = add nsw i32 %85, 1*/
	else if((cur_state == LEGUP_F_main_BB__84_68)) begin
		main_84_86_reg <= main_84_86;
		if (start == 1'b0 && ^(main_84_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_84_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %88 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
		main_87_88 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	if (reset)
		main_87_88_reg <= 0;
	/* main: %87*/
	/*   %88 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	else if((cur_state == LEGUP_F_main_BB__87_72)) begin
		main_87_88_reg <= main_87_88;
		if (start == 1'b0 && ^(main_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %89 = icmp eq i16 %88, 90*/
		main_87_89 = (main_87_88 == 16'd90);
end
always @(posedge clk) begin
	if (reset)
		main_87_89_reg <= 0;
	/* main: %87*/
	/*   %89 = icmp eq i16 %88, 90*/
	else if((cur_state == LEGUP_F_main_BB__87_72)) begin
		main_87_89_reg <= main_87_89;
		if (start == 1'b0 && ^(main_87_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %91 = load i32* @main_result, align 4, !tbaa !1*/
		main_90_91 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_90_91_reg <= 0;
	/* main: %90*/
	/*   %91 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__90_75)) begin
		main_90_91_reg <= main_90_91;
		if (start == 1'b0 && ^(main_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %92 = add nsw i32 %91, 1*/
		main_90_92 = (main_90_91 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_90_92_reg <= 0;
	/* main: %90*/
	/*   %92 = add nsw i32 %91, 1*/
	else if((cur_state == LEGUP_F_main_BB__90_75)) begin
		main_90_92_reg <= main_90_92;
		if (start == 1'b0 && ^(main_90_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %93*/
	/*   %94 = icmp eq i8 %60, 3*/
		main_93_94 = (main_32_60_reg == 8'd3);
end
always @(posedge clk) begin
	if (reset)
		main_93_94_reg <= 0;
	/* main: %93*/
	/*   %94 = icmp eq i8 %60, 3*/
	else if((cur_state == LEGUP_F_main_BB__93_77)) begin
		main_93_94_reg <= main_93_94;
		if (start == 1'b0 && ^(main_93_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_93_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i1.i.i.thread*/
	/*   %95 = load i32* @main_result, align 4, !tbaa !1*/
		main_preheaderi1iithread_95 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi1iithread_95_reg <= 0;
	/* main: %.preheader.i1.i.i.thread*/
	/*   %95 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_preheaderi1iithread_80)) begin
		main_preheaderi1iithread_95_reg <= main_preheaderi1iithread_95;
		if (start == 1'b0 && ^(main_preheaderi1iithread_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi1iithread_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i1.i.i.thread*/
	/*   %96 = add nsw i32 %95, 1*/
		main_preheaderi1iithread_96 = (main_preheaderi1iithread_95 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi1iithread_96_reg <= 0;
	/* main: %.preheader.i1.i.i.thread*/
	/*   %96 = add nsw i32 %95, 1*/
	else if((cur_state == LEGUP_F_main_BB_preheaderi1iithread_80)) begin
		main_preheaderi1iithread_96_reg <= main_preheaderi1iithread_96;
		if (start == 1'b0 && ^(main_preheaderi1iithread_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi1iithread_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i1.i.i*/
	/*   %97 = icmp sgt i8 %60, 0*/
		main_preheaderi1ii_97 = ($signed(main_32_60_reg) > $signed(8'd0));
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi1ii_97_reg <= 0;
	/* main: %.preheader.i1.i.i*/
	/*   %97 = icmp sgt i8 %60, 0*/
	else if((cur_state == LEGUP_F_main_BB_preheaderi1ii_82)) begin
		main_preheaderi1ii_97_reg <= main_preheaderi1ii_97;
		if (start == 1'b0 && ^(main_preheaderi1ii_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi1ii_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i.preheader*/
	/*   %98 = sext i8 %60 to i32*/
		main_lrphi2iipreheader_98 = $signed(main_32_60_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2iipreheader_98_reg <= 0;
	/* main: %.lr.ph.i2.i.i.preheader*/
	/*   %98 = sext i8 %60 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2iipreheader_83)) begin
		main_lrphi2iipreheader_98_reg <= main_lrphi2iipreheader_98;
		if (start == 1'b0 && ^(main_lrphi2iipreheader_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2iipreheader_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %ci.02.i.i.i = phi i32 [ %162, %161 ], [ 0, %.lr.ph.i2.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi2iipreheader_83) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi2ii_ci02iii = 32'd0;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %ci.02.i.i.i = phi i32 [ %162, %161 ], [ 0, %.lr.ph.i2.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__161_125) & (memory_controller_waitrequest == 1'd0)) & (main_161_exitcond196 == 1'd0))) */ begin
		main_lrphi2ii_ci02iii = main_161_162;
	end
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_ci02iii_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %ci.02.i.i.i = phi i32 [ %162, %161 ], [ 0, %.lr.ph.i2.i.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_lrphi2iipreheader_83) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi2ii_ci02iii_reg <= main_lrphi2ii_ci02iii;
		if (start == 1'b0 && ^(main_lrphi2ii_ci02iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_ci02iii_reg"); $finish; end
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %ci.02.i.i.i = phi i32 [ %162, %161 ], [ 0, %.lr.ph.i2.i.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB__161_125) & (memory_controller_waitrequest == 1'd0)) & (main_161_exitcond196 == 1'd0))) begin
		main_lrphi2ii_ci02iii_reg <= main_lrphi2ii_ci02iii;
		if (start == 1'b0 && ^(main_lrphi2ii_ci02iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_ci02iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %99 = trunc i32 %ci.02.i.i.i to i8*/
		main_lrphi2ii_99 = main_lrphi2ii_ci02iii_reg[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_99_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %99 = trunc i32 %ci.02.i.i.i to i8*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		main_lrphi2ii_99_reg <= main_lrphi2ii_99;
		if (start == 1'b0 && ^(main_lrphi2ii_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %100 = mul i32 %ci.02.i.i.i, 3*/
		main_lrphi2ii_100 = (main_lrphi2ii_ci02iii_reg * 32'd3);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_100_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %100 = mul i32 %ci.02.i.i.i, 3*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		main_lrphi2ii_100_reg <= main_lrphi2ii_100;
		if (start == 1'b0 && ^(main_lrphi2ii_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %101 = add i32 %100, 11*/
		main_lrphi2ii_101 = (main_lrphi2ii_100 + 32'd11);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_101_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %101 = add i32 %100, 11*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		main_lrphi2ii_101_reg <= main_lrphi2ii_101;
		if (start == 1'b0 && ^(main_lrphi2ii_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep174.sum18 = add i32 %indvar172, %101*/
		main_lrphi2ii_scevgep174sum18 = (main_preheaderiii_indvar172_reg + main_lrphi2ii_101_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_scevgep174sum18_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep174.sum18 = add i32 %indvar172, %101*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_85)) begin
		main_lrphi2ii_scevgep174sum18_reg <= main_lrphi2ii_scevgep174sum18;
		if (start == 1'b0 && ^(main_lrphi2ii_scevgep174sum18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_scevgep174sum18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep197 = getelementptr i8* %.ph, i32 %scevgep174.sum18*/
		main_lrphi2ii_scevgep197 = (main_preheaderiiipreheader_ph_reg + (1 * main_lrphi2ii_scevgep174sum18_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_scevgep197_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep197 = getelementptr i8* %.ph, i32 %scevgep174.sum18*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_86)) begin
		main_lrphi2ii_scevgep197_reg <= main_lrphi2ii_scevgep197;
		if (start == 1'b0 && ^(main_lrphi2ii_scevgep197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_scevgep197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %102 = add i32 %100, 9*/
		main_lrphi2ii_102 = (main_lrphi2ii_100 + 32'd9);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_102_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %102 = add i32 %100, 9*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		main_lrphi2ii_102_reg <= main_lrphi2ii_102;
		if (start == 1'b0 && ^(main_lrphi2ii_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep174.sum19 = add i32 %indvar172, %102*/
		main_lrphi2ii_scevgep174sum19 = (main_preheaderiii_indvar172_reg + main_lrphi2ii_102_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_scevgep174sum19_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep174.sum19 = add i32 %indvar172, %102*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_85)) begin
		main_lrphi2ii_scevgep174sum19_reg <= main_lrphi2ii_scevgep174sum19;
		if (start == 1'b0 && ^(main_lrphi2ii_scevgep174sum19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_scevgep174sum19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %ReadBuf.1 = getelementptr i8* %.ph, i32 %scevgep174.sum19*/
		main_lrphi2ii_ReadBuf1 = (main_preheaderiiipreheader_ph_reg + (1 * main_lrphi2ii_scevgep174sum19_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_ReadBuf1_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %ReadBuf.1 = getelementptr i8* %.ph, i32 %scevgep174.sum19*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_86)) begin
		main_lrphi2ii_ReadBuf1_reg <= main_lrphi2ii_ReadBuf1;
		if (start == 1'b0 && ^(main_lrphi2ii_ReadBuf1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_ReadBuf1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %103 = add i32 %100, 10*/
		main_lrphi2ii_103 = (main_lrphi2ii_100 + 32'd10);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_103_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %103 = add i32 %100, 10*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		main_lrphi2ii_103_reg <= main_lrphi2ii_103;
		if (start == 1'b0 && ^(main_lrphi2ii_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep174.sum20 = add i32 %indvar172, %103*/
		main_lrphi2ii_scevgep174sum20 = (main_preheaderiii_indvar172_reg + main_lrphi2ii_103_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_scevgep174sum20_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep174.sum20 = add i32 %indvar172, %103*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_85)) begin
		main_lrphi2ii_scevgep174sum20_reg <= main_lrphi2ii_scevgep174sum20;
		if (start == 1'b0 && ^(main_lrphi2ii_scevgep174sum20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_scevgep174sum20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep199 = getelementptr i8* %.ph, i32 %scevgep174.sum20*/
		main_lrphi2ii_scevgep199 = (main_preheaderiiipreheader_ph_reg + (1 * main_lrphi2ii_scevgep174sum20_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_scevgep199_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep199 = getelementptr i8* %.ph, i32 %scevgep174.sum20*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_86)) begin
		main_lrphi2ii_scevgep199_reg <= main_lrphi2ii_scevgep199;
		if (start == 1'b0 && ^(main_lrphi2ii_scevgep199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_scevgep199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep200 = getelementptr [3 x i32]* @out_ac_tbl_no_get_sos, i32 0, i32 %ci.02.i.i.i*/
		main_lrphi2ii_scevgep200 = (1'd0 + (4 * main_lrphi2ii_ci02iii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_scevgep200_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep200 = getelementptr [3 x i32]* @out_ac_tbl_no_get_sos, i32 0, i32 %ci.02.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		main_lrphi2ii_scevgep200_reg <= main_lrphi2ii_scevgep200;
		if (start == 1'b0 && ^(main_lrphi2ii_scevgep200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_scevgep200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep201 = getelementptr [3 x i32]* @out_v_samp_factor_get_sof, i32 0, i32 %ci.02.i.i.i*/
		main_lrphi2ii_scevgep201 = (1'd0 + (4 * main_lrphi2ii_ci02iii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_scevgep201_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep201 = getelementptr [3 x i32]* @out_v_samp_factor_get_sof, i32 0, i32 %ci.02.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		main_lrphi2ii_scevgep201_reg <= main_lrphi2ii_scevgep201;
		if (start == 1'b0 && ^(main_lrphi2ii_scevgep201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_scevgep201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep202 = getelementptr [3 x i32]* @out_comp_id_get_sos, i32 0, i32 %ci.02.i.i.i*/
		main_lrphi2ii_scevgep202 = (1'd0 + (4 * main_lrphi2ii_ci02iii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_scevgep202_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep202 = getelementptr [3 x i32]* @out_comp_id_get_sos, i32 0, i32 %ci.02.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		main_lrphi2ii_scevgep202_reg <= main_lrphi2ii_scevgep202;
		if (start == 1'b0 && ^(main_lrphi2ii_scevgep202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_scevgep202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep203 = getelementptr [3 x i32]* @out_index_get_sof, i32 0, i32 %ci.02.i.i.i*/
		main_lrphi2ii_scevgep203 = (1'd0 + (4 * main_lrphi2ii_ci02iii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_scevgep203_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep203 = getelementptr [3 x i32]* @out_index_get_sof, i32 0, i32 %ci.02.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		main_lrphi2ii_scevgep203_reg <= main_lrphi2ii_scevgep203;
		if (start == 1'b0 && ^(main_lrphi2ii_scevgep203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_scevgep203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %sext.i.i.i = shl i32 %ci.02.i.i.i, 24*/
		main_lrphi2ii_sextiii = (main_lrphi2ii_ci02iii_reg <<< (32'd24 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_sextiii_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %sext.i.i.i = shl i32 %ci.02.i.i.i, 24*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		main_lrphi2ii_sextiii_reg <= main_lrphi2ii_sextiii;
		if (start == 1'b0 && ^(main_lrphi2ii_sextiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_sextiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep204 = getelementptr [3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 %ci.02.i.i.i*/
		main_lrphi2ii_scevgep204 = (1'd0 + (1 * main_lrphi2ii_ci02iii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_scevgep204_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep204 = getelementptr [3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 %ci.02.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		main_lrphi2ii_scevgep204_reg <= main_lrphi2ii_scevgep204;
		if (start == 1'b0 && ^(main_lrphi2ii_scevgep204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_scevgep204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep205 = getelementptr [3 x i8]* @p_jinfo_comps_info_v_samp_factor, i32 0, i32 %ci.02.i.i.i*/
		main_lrphi2ii_scevgep205 = (1'd0 + (1 * main_lrphi2ii_ci02iii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_scevgep205_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep205 = getelementptr [3 x i8]* @p_jinfo_comps_info_v_samp_factor, i32 0, i32 %ci.02.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		main_lrphi2ii_scevgep205_reg <= main_lrphi2ii_scevgep205;
		if (start == 1'b0 && ^(main_lrphi2ii_scevgep205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_scevgep205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep206 = getelementptr [3 x i8]* @p_jinfo_comps_info_h_samp_factor, i32 0, i32 %ci.02.i.i.i*/
		main_lrphi2ii_scevgep206 = (1'd0 + (1 * main_lrphi2ii_ci02iii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_scevgep206_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep206 = getelementptr [3 x i8]* @p_jinfo_comps_info_h_samp_factor, i32 0, i32 %ci.02.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		main_lrphi2ii_scevgep206_reg <= main_lrphi2ii_scevgep206;
		if (start == 1'b0 && ^(main_lrphi2ii_scevgep206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_scevgep206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep207 = getelementptr [3 x i8]* @p_jinfo_comps_info_id, i32 0, i32 %ci.02.i.i.i*/
		main_lrphi2ii_scevgep207 = (1'd0 + (1 * main_lrphi2ii_ci02iii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_scevgep207_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep207 = getelementptr [3 x i8]* @p_jinfo_comps_info_id, i32 0, i32 %ci.02.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		main_lrphi2ii_scevgep207_reg <= main_lrphi2ii_scevgep207;
		if (start == 1'b0 && ^(main_lrphi2ii_scevgep207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_scevgep207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep208 = getelementptr [3 x i8]* @p_jinfo_comps_info_index, i32 0, i32 %ci.02.i.i.i*/
		main_lrphi2ii_scevgep208 = (1'd0 + (1 * main_lrphi2ii_ci02iii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_scevgep208_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %scevgep208 = getelementptr [3 x i8]* @p_jinfo_comps_info_index, i32 0, i32 %ci.02.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		main_lrphi2ii_scevgep208_reg <= main_lrphi2ii_scevgep208;
		if (start == 1'b0 && ^(main_lrphi2ii_scevgep208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_scevgep208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %104 = load i8* %ReadBuf.1, align 1, !tbaa !5*/
		main_lrphi2ii_104 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_104_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %104 = load i8* %ReadBuf.1, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_88)) begin
		main_lrphi2ii_104_reg <= main_lrphi2ii_104;
		if (start == 1'b0 && ^(main_lrphi2ii_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %105 = load i8* %scevgep199, align 1, !tbaa !5*/
		main_lrphi2ii_105 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_105_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %105 = load i8* %scevgep199, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_91)) begin
		main_lrphi2ii_105_reg <= main_lrphi2ii_105;
		if (start == 1'b0 && ^(main_lrphi2ii_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %106 = lshr i8 %105, 4*/
		main_lrphi2ii_106 = (main_lrphi2ii_105 >>> (8'd4 % 8'd8));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_106_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %106 = lshr i8 %105, 4*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_91)) begin
		main_lrphi2ii_106_reg <= main_lrphi2ii_106;
		if (start == 1'b0 && ^(main_lrphi2ii_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %107 = and i8 %105, 15*/
		main_lrphi2ii_107 = (main_lrphi2ii_105 & 8'd15);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_107_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %107 = and i8 %105, 15*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_91)) begin
		main_lrphi2ii_107_reg <= main_lrphi2ii_107;
		if (start == 1'b0 && ^(main_lrphi2ii_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %108 = load i8* %scevgep197, align 1, !tbaa !5*/
		main_lrphi2ii_108 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_108_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %108 = load i8* %scevgep197, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_94)) begin
		main_lrphi2ii_108_reg <= main_lrphi2ii_108;
		if (start == 1'b0 && ^(main_lrphi2ii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %109 = ashr exact i32 %sext.i.i.i, 24*/
		main_lrphi2ii_109 = ($signed(main_lrphi2ii_sextiii) >>> 32'd24);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_109_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %109 = ashr exact i32 %sext.i.i.i, 24*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		main_lrphi2ii_109_reg <= main_lrphi2ii_109;
		if (start == 1'b0 && ^(main_lrphi2ii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %111 = load i8* %scevgep207, align 1, !tbaa !5*/
		main_lrphi2ii_111 = p_jinfo_comps_info_id_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_111_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %111 = load i8* %scevgep207, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_90)) begin
		main_lrphi2ii_111_reg <= main_lrphi2ii_111;
		if (start == 1'b0 && ^(main_lrphi2ii_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %112 = sext i8 %111 to i32*/
		main_lrphi2ii_112 = $signed(main_lrphi2ii_111);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_112_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %112 = sext i8 %111 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_90)) begin
		main_lrphi2ii_112_reg <= main_lrphi2ii_112;
		if (start == 1'b0 && ^(main_lrphi2ii_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %114 = load i8* %scevgep206, align 1, !tbaa !5*/
		main_lrphi2ii_114 = p_jinfo_comps_info_h_samp_factor_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_114_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %114 = load i8* %scevgep206, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_93)) begin
		main_lrphi2ii_114_reg <= main_lrphi2ii_114;
		if (start == 1'b0 && ^(main_lrphi2ii_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %115 = sext i8 %114 to i32*/
		main_lrphi2ii_115 = $signed(main_lrphi2ii_114);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_115_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %115 = sext i8 %114 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_93)) begin
		main_lrphi2ii_115_reg <= main_lrphi2ii_115;
		if (start == 1'b0 && ^(main_lrphi2ii_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %117 = load i8* %scevgep205, align 1, !tbaa !5*/
		main_lrphi2ii_117 = p_jinfo_comps_info_v_samp_factor_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_117_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %117 = load i8* %scevgep205, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_93)) begin
		main_lrphi2ii_117_reg <= main_lrphi2ii_117;
		if (start == 1'b0 && ^(main_lrphi2ii_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %118 = sext i8 %117 to i32*/
		main_lrphi2ii_118 = $signed(main_lrphi2ii_117);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_118_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %118 = sext i8 %117 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_93)) begin
		main_lrphi2ii_118_reg <= main_lrphi2ii_118;
		if (start == 1'b0 && ^(main_lrphi2ii_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %120 = load i8* %scevgep204, align 1, !tbaa !5*/
		main_lrphi2ii_120 = p_jinfo_comps_info_quant_tbl_no_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_120_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %120 = load i8* %scevgep204, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_96)) begin
		main_lrphi2ii_120_reg <= main_lrphi2ii_120;
		if (start == 1'b0 && ^(main_lrphi2ii_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %121 = sext i8 %120 to i32*/
		main_lrphi2ii_121 = $signed(main_lrphi2ii_120);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_121_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %121 = sext i8 %120 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_96)) begin
		main_lrphi2ii_121_reg <= main_lrphi2ii_121;
		if (start == 1'b0 && ^(main_lrphi2ii_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %123 = load i8* %scevgep208, align 1, !tbaa !5*/
		main_lrphi2ii_123 = p_jinfo_comps_info_index_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_123_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %123 = load i8* %scevgep208, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_86)) begin
		main_lrphi2ii_123_reg <= main_lrphi2ii_123;
		if (start == 1'b0 && ^(main_lrphi2ii_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %124 = sext i8 %123 to i32*/
		main_lrphi2ii_124 = $signed(main_lrphi2ii_123);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_124_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %124 = sext i8 %123 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_86)) begin
		main_lrphi2ii_124_reg <= main_lrphi2ii_124;
		if (start == 1'b0 && ^(main_lrphi2ii_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %125 = load i32* %scevgep203, align 4, !tbaa !1*/
		main_lrphi2ii_125 = out_index_get_sof_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_125_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %125 = load i32* %scevgep203, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_85)) begin
		main_lrphi2ii_125_reg <= main_lrphi2ii_125;
		if (start == 1'b0 && ^(main_lrphi2ii_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i2.i.i*/
	/*   %126 = icmp eq i32 %124, %125*/
		main_lrphi2ii_126 = (main_lrphi2ii_124 == main_lrphi2ii_125_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi2ii_126_reg <= 0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %126 = icmp eq i32 %124, %125*/
	else if((cur_state == LEGUP_F_main_BB_lrphi2ii_86)) begin
		main_lrphi2ii_126_reg <= main_lrphi2ii_126;
		if (start == 1'b0 && ^(main_lrphi2ii_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi2ii_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %127*/
	/*   %128 = load i32* @main_result, align 4, !tbaa !1*/
		main_127_128 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_127_128_reg <= 0;
	/* main: %127*/
	/*   %128 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__127_99)) begin
		main_127_128_reg <= main_127_128;
		if (start == 1'b0 && ^(main_127_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %127*/
	/*   %129 = add nsw i32 %128, 1*/
		main_127_129 = (main_127_128 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_127_129_reg <= 0;
	/* main: %127*/
	/*   %129 = add nsw i32 %128, 1*/
	else if((cur_state == LEGUP_F_main_BB__127_99)) begin
		main_127_129_reg <= main_127_129;
		if (start == 1'b0 && ^(main_127_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %130*/
	/*   %131 = load i8* %scevgep207, align 1, !tbaa !5*/
		main_130_131 = p_jinfo_comps_info_id_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_130_131_reg <= 0;
	/* main: %130*/
	/*   %131 = load i8* %scevgep207, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__130_102)) begin
		main_130_131_reg <= main_130_131;
		if (start == 1'b0 && ^(main_130_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_130_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %130*/
	/*   %132 = sext i8 %131 to i32*/
		main_130_132 = $signed(main_130_131);
end
always @(posedge clk) begin
	if (reset)
		main_130_132_reg <= 0;
	/* main: %130*/
	/*   %132 = sext i8 %131 to i32*/
	else if((cur_state == LEGUP_F_main_BB__130_102)) begin
		main_130_132_reg <= main_130_132;
		if (start == 1'b0 && ^(main_130_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_130_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %130*/
	/*   %133 = load i32* %scevgep202, align 4, !tbaa !1*/
		main_130_133 = out_comp_id_get_sos_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_130_133_reg <= 0;
	/* main: %130*/
	/*   %133 = load i32* %scevgep202, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__130_102)) begin
		main_130_133_reg <= main_130_133;
		if (start == 1'b0 && ^(main_130_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_130_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %130*/
	/*   %134 = icmp eq i32 %132, %133*/
		main_130_134 = (main_130_132 == main_130_133);
end
always @(posedge clk) begin
	if (reset)
		main_130_134_reg <= 0;
	/* main: %130*/
	/*   %134 = icmp eq i32 %132, %133*/
	else if((cur_state == LEGUP_F_main_BB__130_102)) begin
		main_130_134_reg <= main_130_134;
		if (start == 1'b0 && ^(main_130_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_130_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %135*/
	/*   %136 = load i32* @main_result, align 4, !tbaa !1*/
		main_135_136 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_135_136_reg <= 0;
	/* main: %135*/
	/*   %136 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__135_105)) begin
		main_135_136_reg <= main_135_136;
		if (start == 1'b0 && ^(main_135_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_135_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %135*/
	/*   %137 = add nsw i32 %136, 1*/
		main_135_137 = (main_135_136 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_135_137_reg <= 0;
	/* main: %135*/
	/*   %137 = add nsw i32 %136, 1*/
	else if((cur_state == LEGUP_F_main_BB__135_105)) begin
		main_135_137_reg <= main_135_137;
		if (start == 1'b0 && ^(main_135_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_135_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %138*/
	/*   %139 = load i8* %scevgep206, align 1, !tbaa !5*/
		main_138_139 = p_jinfo_comps_info_h_samp_factor_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_138_139_reg <= 0;
	/* main: %138*/
	/*   %139 = load i8* %scevgep206, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__138_108)) begin
		main_138_139_reg <= main_138_139;
		if (start == 1'b0 && ^(main_138_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %138*/
	/*   %140 = sext i8 %139 to i32*/
		main_138_140 = $signed(main_138_139);
end
always @(posedge clk) begin
	if (reset)
		main_138_140_reg <= 0;
	/* main: %138*/
	/*   %140 = sext i8 %139 to i32*/
	else if((cur_state == LEGUP_F_main_BB__138_108)) begin
		main_138_140_reg <= main_138_140;
		if (start == 1'b0 && ^(main_138_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %138*/
	/*   %141 = load i32* %scevgep201, align 4, !tbaa !1*/
		main_138_141 = out_v_samp_factor_get_sof_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_138_141_reg <= 0;
	/* main: %138*/
	/*   %141 = load i32* %scevgep201, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__138_108)) begin
		main_138_141_reg <= main_138_141;
		if (start == 1'b0 && ^(main_138_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %138*/
	/*   %142 = icmp eq i32 %140, %141*/
		main_138_142 = (main_138_140 == main_138_141);
end
always @(posedge clk) begin
	if (reset)
		main_138_142_reg <= 0;
	/* main: %138*/
	/*   %142 = icmp eq i32 %140, %141*/
	else if((cur_state == LEGUP_F_main_BB__138_108)) begin
		main_138_142_reg <= main_138_142;
		if (start == 1'b0 && ^(main_138_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_138_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %143*/
	/*   %144 = load i32* @main_result, align 4, !tbaa !1*/
		main_143_144 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_143_144_reg <= 0;
	/* main: %143*/
	/*   %144 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__143_111)) begin
		main_143_144_reg <= main_143_144;
		if (start == 1'b0 && ^(main_143_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_143_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %143*/
	/*   %145 = add nsw i32 %144, 1*/
		main_143_145 = (main_143_144 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_143_145_reg <= 0;
	/* main: %143*/
	/*   %145 = add nsw i32 %144, 1*/
	else if((cur_state == LEGUP_F_main_BB__143_111)) begin
		main_143_145_reg <= main_143_145;
		if (start == 1'b0 && ^(main_143_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_143_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %146*/
	/*   %147 = load i8* %scevgep205, align 1, !tbaa !5*/
		main_146_147 = p_jinfo_comps_info_v_samp_factor_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_146_147_reg <= 0;
	/* main: %146*/
	/*   %147 = load i8* %scevgep205, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__146_114)) begin
		main_146_147_reg <= main_146_147;
		if (start == 1'b0 && ^(main_146_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %146*/
	/*   %148 = sext i8 %147 to i32*/
		main_146_148 = $signed(main_146_147);
end
always @(posedge clk) begin
	if (reset)
		main_146_148_reg <= 0;
	/* main: %146*/
	/*   %148 = sext i8 %147 to i32*/
	else if((cur_state == LEGUP_F_main_BB__146_114)) begin
		main_146_148_reg <= main_146_148;
		if (start == 1'b0 && ^(main_146_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %146*/
	/*   %149 = icmp eq i32 %148, %141*/
		main_146_149 = (main_146_148 == main_138_141_reg);
end
always @(posedge clk) begin
	if (reset)
		main_146_149_reg <= 0;
	/* main: %146*/
	/*   %149 = icmp eq i32 %148, %141*/
	else if((cur_state == LEGUP_F_main_BB__146_114)) begin
		main_146_149_reg <= main_146_149;
		if (start == 1'b0 && ^(main_146_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %150*/
	/*   %151 = load i32* @main_result, align 4, !tbaa !1*/
		main_150_151 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_150_151_reg <= 0;
	/* main: %150*/
	/*   %151 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__150_117)) begin
		main_150_151_reg <= main_150_151;
		if (start == 1'b0 && ^(main_150_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_150_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %150*/
	/*   %152 = add nsw i32 %151, 1*/
		main_150_152 = (main_150_151 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_150_152_reg <= 0;
	/* main: %150*/
	/*   %152 = add nsw i32 %151, 1*/
	else if((cur_state == LEGUP_F_main_BB__150_117)) begin
		main_150_152_reg <= main_150_152;
		if (start == 1'b0 && ^(main_150_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_150_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %153*/
	/*   %154 = load i8* %scevgep204, align 1, !tbaa !5*/
		main_153_154 = p_jinfo_comps_info_quant_tbl_no_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_153_154_reg <= 0;
	/* main: %153*/
	/*   %154 = load i8* %scevgep204, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__153_120)) begin
		main_153_154_reg <= main_153_154;
		if (start == 1'b0 && ^(main_153_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_153_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %153*/
	/*   %155 = sext i8 %154 to i32*/
		main_153_155 = $signed(main_153_154);
end
always @(posedge clk) begin
	if (reset)
		main_153_155_reg <= 0;
	/* main: %153*/
	/*   %155 = sext i8 %154 to i32*/
	else if((cur_state == LEGUP_F_main_BB__153_120)) begin
		main_153_155_reg <= main_153_155;
		if (start == 1'b0 && ^(main_153_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_153_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %153*/
	/*   %156 = load i32* %scevgep200, align 4, !tbaa !1*/
		main_153_156 = out_ac_tbl_no_get_sos_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_153_156_reg <= 0;
	/* main: %153*/
	/*   %156 = load i32* %scevgep200, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__153_120)) begin
		main_153_156_reg <= main_153_156;
		if (start == 1'b0 && ^(main_153_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_153_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %153*/
	/*   %157 = icmp eq i32 %155, %156*/
		main_153_157 = (main_153_155 == main_153_156);
end
always @(posedge clk) begin
	if (reset)
		main_153_157_reg <= 0;
	/* main: %153*/
	/*   %157 = icmp eq i32 %155, %156*/
	else if((cur_state == LEGUP_F_main_BB__153_120)) begin
		main_153_157_reg <= main_153_157;
		if (start == 1'b0 && ^(main_153_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_153_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %158*/
	/*   %159 = load i32* @main_result, align 4, !tbaa !1*/
		main_158_159 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_158_159_reg <= 0;
	/* main: %158*/
	/*   %159 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__158_123)) begin
		main_158_159_reg <= main_158_159;
		if (start == 1'b0 && ^(main_158_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_158_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %158*/
	/*   %160 = add nsw i32 %159, 1*/
		main_158_160 = (main_158_159 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_158_160_reg <= 0;
	/* main: %158*/
	/*   %160 = add nsw i32 %159, 1*/
	else if((cur_state == LEGUP_F_main_BB__158_123)) begin
		main_158_160_reg <= main_158_160;
		if (start == 1'b0 && ^(main_158_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_158_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %161*/
	/*   %162 = add nsw i32 %ci.02.i.i.i, 1*/
		main_161_162 = (main_lrphi2ii_ci02iii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_161_162_reg <= 0;
	/* main: %161*/
	/*   %162 = add nsw i32 %ci.02.i.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__161_125)) begin
		main_161_162_reg <= main_161_162;
		if (start == 1'b0 && ^(main_161_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_161_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %161*/
	/*   %exitcond196 = icmp eq i32 %162, %98*/
		main_161_exitcond196 = (main_161_162 == main_lrphi2iipreheader_98_reg);
end
always @(posedge clk) begin
	if (reset)
		main_161_exitcond196_reg <= 0;
	/* main: %161*/
	/*   %exitcond196 = icmp eq i32 %162, %98*/
	else if((cur_state == LEGUP_F_main_BB__161_125)) begin
		main_161_exitcond196_reg <= main_161_exitcond196;
		if (start == 1'b0 && ^(main_161_exitcond196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_161_exitcond196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i.i.loopexit*/
	/*   %163 = mul i32 %70, 3*/
		main__crit_edgeiiiloopexit_163 = (main_32_70_reg * 32'd3);
end
always @(posedge clk) begin
	if (reset)
		main__crit_edgeiiiloopexit_163_reg <= 0;
	/* main: %._crit_edge.i.i.i.loopexit*/
	/*   %163 = mul i32 %70, 3*/
	else if((cur_state == LEGUP_F_main_BB__crit_edgeiiiloopexit_126)) begin
		main__crit_edgeiiiloopexit_163_reg <= main__crit_edgeiiiloopexit_163;
		if (start == 1'b0 && ^(main__crit_edgeiiiloopexit_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiiiloopexit_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i.i.loopexit*/
	/*   %.sum = add i32 %163, 9*/
		main__crit_edgeiiiloopexit_sum = (main__crit_edgeiiiloopexit_163 + 32'd9);
end
always @(posedge clk) begin
	if (reset)
		main__crit_edgeiiiloopexit_sum_reg <= 0;
	/* main: %._crit_edge.i.i.i.loopexit*/
	/*   %.sum = add i32 %163, 9*/
	else if((cur_state == LEGUP_F_main_BB__crit_edgeiiiloopexit_126)) begin
		main__crit_edgeiiiloopexit_sum_reg <= main__crit_edgeiiiloopexit_sum;
		if (start == 1'b0 && ^(main__crit_edgeiiiloopexit_sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiiiloopexit_sum_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i.i.loopexit*/
	/*   %scevgep174.sum21 = add i32 %indvar172, %.sum*/
		main__crit_edgeiiiloopexit_scevgep174sum21 = (main_preheaderiii_indvar172_reg + main__crit_edgeiiiloopexit_sum_reg);
end
always @(posedge clk) begin
	if (reset)
		main__crit_edgeiiiloopexit_scevgep174sum21_reg <= 0;
	/* main: %._crit_edge.i.i.i.loopexit*/
	/*   %scevgep174.sum21 = add i32 %indvar172, %.sum*/
	else if((cur_state == LEGUP_F_main_BB__crit_edgeiiiloopexit_127)) begin
		main__crit_edgeiiiloopexit_scevgep174sum21_reg <= main__crit_edgeiiiloopexit_scevgep174sum21;
		if (start == 1'b0 && ^(main__crit_edgeiiiloopexit_scevgep174sum21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiiiloopexit_scevgep174sum21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %scevgep174.sum17.pn = phi i32 [ %scevgep174.sum17, %.preheader.i1.i.i ], [ %scevgep174.sum21, %._crit_edge.i.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi1ii_82) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi1ii_97 == 1'd0))) begin
		main__crit_edgeiii_scevgep174sum17pn = main_32_scevgep174sum17_reg;
	end
	/* main: %._crit_edge.i.i.i*/
	/*   %scevgep174.sum17.pn = phi i32 [ %scevgep174.sum17, %.preheader.i1.i.i ], [ %scevgep174.sum21, %._crit_edge.i.i.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgeiiiloopexit_127) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgeiii_scevgep174sum17pn = main__crit_edgeiiiloopexit_scevgep174sum21;
	end
end
always @(posedge clk) begin
	if (reset)
		main__crit_edgeiii_scevgep174sum17pn_reg <= 0;
	/* main: %._crit_edge.i.i.i*/
	/*   %scevgep174.sum17.pn = phi i32 [ %scevgep174.sum17, %.preheader.i1.i.i ], [ %scevgep174.sum21, %._crit_edge.i.i.i.loopexit ]*/
	else if((((cur_state == LEGUP_F_main_BB_preheaderi1ii_82) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi1ii_97 == 1'd0))) begin
		main__crit_edgeiii_scevgep174sum17pn_reg <= main__crit_edgeiii_scevgep174sum17pn;
		if (start == 1'b0 && ^(main__crit_edgeiii_scevgep174sum17pn) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiii_scevgep174sum17pn_reg"); $finish; end
	end
	/* main: %._crit_edge.i.i.i*/
	/*   %scevgep174.sum17.pn = phi i32 [ %scevgep174.sum17, %.preheader.i1.i.i ], [ %scevgep174.sum21, %._crit_edge.i.i.i.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB__crit_edgeiiiloopexit_127) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgeiii_scevgep174sum17pn_reg <= main__crit_edgeiii_scevgep174sum17pn;
		if (start == 1'b0 && ^(main__crit_edgeiii_scevgep174sum17pn) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiii_scevgep174sum17pn_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %ReadBuf.2 = getelementptr i8* %.ph, i32 %scevgep174.sum17.pn*/
		main__crit_edgeiii_ReadBuf2 = (main_preheaderiiipreheader_ph_reg + (1 * main__crit_edgeiii_scevgep174sum17pn_reg));
end
always @(posedge clk) begin
	if (reset)
		main__crit_edgeiii_ReadBuf2_reg <= 0;
	/* main: %._crit_edge.i.i.i*/
	/*   %ReadBuf.2 = getelementptr i8* %.ph, i32 %scevgep174.sum17.pn*/
	else if((cur_state == LEGUP_F_main_BB__crit_edgeiii_128)) begin
		main__crit_edgeiii_ReadBuf2_reg <= main__crit_edgeiii_ReadBuf2;
		if (start == 1'b0 && ^(main__crit_edgeiii_ReadBuf2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiii_ReadBuf2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %164 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_h_samp_factor, i32 0, i32 0), align 1, !tbaa !5*/
		main__crit_edgeiii_164 = p_jinfo_comps_info_h_samp_factor_out_a;
end
always @(posedge clk) begin
	if (reset)
		main__crit_edgeiii_164_reg <= 0;
	/* main: %._crit_edge.i.i.i*/
	/*   %164 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_h_samp_factor, i32 0, i32 0), align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__crit_edgeiii_129)) begin
		main__crit_edgeiii_164_reg <= main__crit_edgeiii_164;
		if (start == 1'b0 && ^(main__crit_edgeiii_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiii_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %165 = icmp eq i8 %164, 2*/
		main__crit_edgeiii_165 = (main__crit_edgeiii_164 == 8'd2);
end
always @(posedge clk) begin
	if (reset)
		main__crit_edgeiii_165_reg <= 0;
	/* main: %._crit_edge.i.i.i*/
	/*   %165 = icmp eq i8 %164, 2*/
	else if((cur_state == LEGUP_F_main_BB__crit_edgeiii_129)) begin
		main__crit_edgeiii_165_reg <= main__crit_edgeiii_165;
		if (start == 1'b0 && ^(main__crit_edgeiii_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiii_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer.backedge*/
	/*   %p_jinfo_smp_fact.0.ph.be = phi i32 [ 0, %168 ], [ 2, %166 ]*/
	if (((cur_state == LEGUP_F_main_BB__166_130) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouterbackedge_p_jinfo_smp_fact0phbe = 32'd2;
	end
	/* main: %.loopexit.i.preheader.i.i.outer.backedge*/
	/*   %p_jinfo_smp_fact.0.ph.be = phi i32 [ 0, %168 ], [ 2, %166 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__168_133) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitipreheaderiiouterbackedge_p_jinfo_smp_fact0phbe = 32'd0;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouterbackedge_p_jinfo_smp_fact0phbe_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer.backedge*/
	/*   %p_jinfo_smp_fact.0.ph.be = phi i32 [ 0, %168 ], [ 2, %166 ]*/
	else if(((cur_state == LEGUP_F_main_BB__166_130) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouterbackedge_p_jinfo_smp_fact0phbe_reg <= main_loopexitipreheaderiiouterbackedge_p_jinfo_smp_fact0phbe;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouterbackedge_p_jinfo_smp_fact0phbe) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouterbackedge_p_jinfo_smp_fact0phbe_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i.outer.backedge*/
	/*   %p_jinfo_smp_fact.0.ph.be = phi i32 [ 0, %168 ], [ 2, %166 ]*/
	else if(((cur_state == LEGUP_F_main_BB__168_133) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouterbackedge_p_jinfo_smp_fact0phbe_reg <= main_loopexitipreheaderiiouterbackedge_p_jinfo_smp_fact0phbe;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouterbackedge_p_jinfo_smp_fact0phbe) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouterbackedge_p_jinfo_smp_fact0phbe_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %p_jinfo_smp_fact.0.ph = phi i32 [ 0, %.loopexit.i.preheader.i.i.preheader ], [ %p_jinfo_smp_fact.0.ph.be, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_p_jinfo_smp_fact0ph = 32'd0;
	end
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %p_jinfo_smp_fact.0.ph = phi i32 [ 0, %.loopexit.i.preheader.i.i.preheader ], [ %p_jinfo_smp_fact.0.ph.be, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouterbackedge_131) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitipreheaderiiouter_p_jinfo_smp_fact0ph = main_loopexitipreheaderiiouterbackedge_p_jinfo_smp_fact0phbe_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouter_p_jinfo_smp_fact0ph_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %p_jinfo_smp_fact.0.ph = phi i32 [ 0, %.loopexit.i.preheader.i.i.preheader ], [ %p_jinfo_smp_fact.0.ph.be, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_p_jinfo_smp_fact0ph_reg <= main_loopexitipreheaderiiouter_p_jinfo_smp_fact0ph;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter_p_jinfo_smp_fact0ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter_p_jinfo_smp_fact0ph_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %p_jinfo_smp_fact.0.ph = phi i32 [ 0, %.loopexit.i.preheader.i.i.preheader ], [ %p_jinfo_smp_fact.0.ph.be, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouterbackedge_131) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_p_jinfo_smp_fact0ph_reg <= main_loopexitipreheaderiiouter_p_jinfo_smp_fact0ph;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter_p_jinfo_smp_fact0ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter_p_jinfo_smp_fact0ph_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %p_jinfo_num_components.0.ph = phi i8 [ 0, %.loopexit.i.preheader.i.i.preheader ], [ %60, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_p_jinfo_num_components0ph = 8'd0;
	end
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %p_jinfo_num_components.0.ph = phi i8 [ 0, %.loopexit.i.preheader.i.i.preheader ], [ %60, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouterbackedge_131) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitipreheaderiiouter_p_jinfo_num_components0ph = main_32_60_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouter_p_jinfo_num_components0ph_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %p_jinfo_num_components.0.ph = phi i8 [ 0, %.loopexit.i.preheader.i.i.preheader ], [ %60, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_p_jinfo_num_components0ph_reg <= main_loopexitipreheaderiiouter_p_jinfo_num_components0ph;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter_p_jinfo_num_components0ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter_p_jinfo_num_components0ph_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %p_jinfo_num_components.0.ph = phi i8 [ 0, %.loopexit.i.preheader.i.i.preheader ], [ %60, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouterbackedge_131) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_p_jinfo_num_components0ph_reg <= main_loopexitipreheaderiiouter_p_jinfo_num_components0ph;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter_p_jinfo_num_components0ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter_p_jinfo_num_components0ph_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %ReadBuf.0.ph = phi i8* [ getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 2), %.loopexit.i.preheader.i.i.preheader ], [ %ReadBuf.2, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_ReadBuf0ph = (`TAG_g_JpegFileBuf_a + (1 * 32'd2));
	end
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %ReadBuf.0.ph = phi i8* [ getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 2), %.loopexit.i.preheader.i.i.preheader ], [ %ReadBuf.2, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouterbackedge_131) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitipreheaderiiouter_ReadBuf0ph = main__crit_edgeiii_ReadBuf2_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouter_ReadBuf0ph_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %ReadBuf.0.ph = phi i8* [ getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 2), %.loopexit.i.preheader.i.i.preheader ], [ %ReadBuf.2, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_ReadBuf0ph_reg <= main_loopexitipreheaderiiouter_ReadBuf0ph;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter_ReadBuf0ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter_ReadBuf0ph_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %ReadBuf.0.ph = phi i8* [ getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 2), %.loopexit.i.preheader.i.i.preheader ], [ %ReadBuf.2, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouterbackedge_131) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_ReadBuf0ph_reg <= main_loopexitipreheaderiiouter_ReadBuf0ph;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter_ReadBuf0ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter_ReadBuf0ph_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %i_get_dqt.0.ph = phi i32 [ 0, %.loopexit.i.preheader.i.i.preheader ], [ %i_get_dqt.0.ph26, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_i_get_dqt0ph = 32'd0;
	end
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %i_get_dqt.0.ph = phi i32 [ 0, %.loopexit.i.preheader.i.i.preheader ], [ %i_get_dqt.0.ph26, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouterbackedge_131) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitipreheaderiiouter_i_get_dqt0ph = main_loopexitipreheaderiiouter24_i_get_dqt0ph26_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouter_i_get_dqt0ph_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %i_get_dqt.0.ph = phi i32 [ 0, %.loopexit.i.preheader.i.i.preheader ], [ %i_get_dqt.0.ph26, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_i_get_dqt0ph_reg <= main_loopexitipreheaderiiouter_i_get_dqt0ph;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter_i_get_dqt0ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter_i_get_dqt0ph_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %i_get_dqt.0.ph = phi i32 [ 0, %.loopexit.i.preheader.i.i.preheader ], [ %i_get_dqt.0.ph26, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouterbackedge_131) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_i_get_dqt0ph_reg <= main_loopexitipreheaderiiouter_i_get_dqt0ph;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter_i_get_dqt0ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter_i_get_dqt0ph_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %i_get_dht.0.ph = phi i32 [ 0, %.loopexit.i.preheader.i.i.preheader ], [ %i_get_dht.0.ph31, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_i_get_dht0ph = 32'd0;
	end
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %i_get_dht.0.ph = phi i32 [ 0, %.loopexit.i.preheader.i.i.preheader ], [ %i_get_dht.0.ph31, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouterbackedge_131) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitipreheaderiiouter_i_get_dht0ph = main_loopexitipreheaderiiouter29_i_get_dht0ph31_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouter_i_get_dht0ph_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %i_get_dht.0.ph = phi i32 [ 0, %.loopexit.i.preheader.i.i.preheader ], [ %i_get_dht.0.ph31, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_i_get_dht0ph_reg <= main_loopexitipreheaderiiouter_i_get_dht0ph;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter_i_get_dht0ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter_i_get_dht0ph_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %i_get_dht.0.ph = phi i32 [ 0, %.loopexit.i.preheader.i.i.preheader ], [ %i_get_dht.0.ph31, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouterbackedge_131) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_i_get_dht0ph_reg <= main_loopexitipreheaderiiouter_i_get_dht0ph;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter_i_get_dht0ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter_i_get_dht0ph_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %i_marker.0.ph = phi i32 [ 1, %.loopexit.i.preheader.i.i.preheader ], [ %15, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_i_marker0ph = 32'd1;
	end
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %i_marker.0.ph = phi i32 [ 1, %.loopexit.i.preheader.i.i.preheader ], [ %15, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouterbackedge_131) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexitipreheaderiiouter_i_marker0ph = main_loopexitipreheaderii_15_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_loopexitipreheaderiiouter_i_marker0ph_reg <= 0;
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %i_marker.0.ph = phi i32 [ 1, %.loopexit.i.preheader.i.i.preheader ], [ %15, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_i_marker0ph_reg <= main_loopexitipreheaderiiouter_i_marker0ph;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter_i_marker0ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter_i_marker0ph_reg"); $finish; end
	end
	/* main: %.loopexit.i.preheader.i.i.outer*/
	/*   %i_marker.0.ph = phi i32 [ 1, %.loopexit.i.preheader.i.i.preheader ], [ %15, %.loopexit.i.preheader.i.i.outer.backedge ]*/
	else if(((cur_state == LEGUP_F_main_BB_loopexitipreheaderiiouterbackedge_131) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexitipreheaderiiouter_i_marker0ph_reg <= main_loopexitipreheaderiiouter_i_marker0ph;
		if (start == 1'b0 && ^(main_loopexitipreheaderiiouter_i_marker0ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitipreheaderiiouter_i_marker0ph_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa4.i.i*/
	/*   %scevgep174.sum4 = add i32 %indvar172, 2*/
		main_uslcssa4ii_scevgep174sum4 = (main_preheaderiii_indvar172_reg + 32'd2);
end
always @(posedge clk) begin
	if (reset)
		main_uslcssa4ii_scevgep174sum4_reg <= 0;
	/* main: %.us-lcssa4.i.i*/
	/*   %scevgep174.sum4 = add i32 %indvar172, 2*/
	else if((cur_state == LEGUP_F_main_BB_uslcssa4ii_134)) begin
		main_uslcssa4ii_scevgep174sum4_reg <= main_uslcssa4ii_scevgep174sum4;
		if (start == 1'b0 && ^(main_uslcssa4ii_scevgep174sum4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa4ii_scevgep174sum4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa4.i.i*/
	/*   %170 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum4*/
		main_uslcssa4ii_170 = (main_preheaderiiipreheader_ph_reg + (1 * main_uslcssa4ii_scevgep174sum4_reg));
end
always @(posedge clk) begin
	if (reset)
		main_uslcssa4ii_170_reg <= 0;
	/* main: %.us-lcssa4.i.i*/
	/*   %170 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum4*/
	else if((cur_state == LEGUP_F_main_BB_uslcssa4ii_135)) begin
		main_uslcssa4ii_170_reg <= main_uslcssa4ii_170;
		if (start == 1'b0 && ^(main_uslcssa4ii_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa4ii_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa4.i.i*/
	/*   %171 = load i8* %scevgep175, align 1, !tbaa !5*/
		main_uslcssa4ii_171 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_uslcssa4ii_171_reg <= 0;
	/* main: %.us-lcssa4.i.i*/
	/*   %171 = load i8* %scevgep175, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_uslcssa4ii_136)) begin
		main_uslcssa4ii_171_reg <= main_uslcssa4ii_171;
		if (start == 1'b0 && ^(main_uslcssa4ii_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa4ii_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa4.i.i*/
	/*   %172 = zext i8 %171 to i16*/
		main_uslcssa4ii_172 = main_uslcssa4ii_171;
end
always @(posedge clk) begin
	if (reset)
		main_uslcssa4ii_172_reg <= 0;
	/* main: %.us-lcssa4.i.i*/
	/*   %172 = zext i8 %171 to i16*/
	else if((cur_state == LEGUP_F_main_BB_uslcssa4ii_136)) begin
		main_uslcssa4ii_172_reg <= main_uslcssa4ii_172;
		if (start == 1'b0 && ^(main_uslcssa4ii_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa4ii_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa4.i.i*/
	/*   %173 = shl nuw i16 %172, 8*/
		main_uslcssa4ii_173 = (main_uslcssa4ii_172 <<< (16'd8 % 16'd16));
end
always @(posedge clk) begin
	if (reset)
		main_uslcssa4ii_173_reg <= 0;
	/* main: %.us-lcssa4.i.i*/
	/*   %173 = shl nuw i16 %172, 8*/
	else if((cur_state == LEGUP_F_main_BB_uslcssa4ii_136)) begin
		main_uslcssa4ii_173_reg <= main_uslcssa4ii_173;
		if (start == 1'b0 && ^(main_uslcssa4ii_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa4ii_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa4.i.i*/
	/*   %scevgep174.sum5 = add i32 %indvar172, 3*/
		main_uslcssa4ii_scevgep174sum5 = (main_preheaderiii_indvar172_reg + 32'd3);
end
always @(posedge clk) begin
	if (reset)
		main_uslcssa4ii_scevgep174sum5_reg <= 0;
	/* main: %.us-lcssa4.i.i*/
	/*   %scevgep174.sum5 = add i32 %indvar172, 3*/
	else if((cur_state == LEGUP_F_main_BB_uslcssa4ii_134)) begin
		main_uslcssa4ii_scevgep174sum5_reg <= main_uslcssa4ii_scevgep174sum5;
		if (start == 1'b0 && ^(main_uslcssa4ii_scevgep174sum5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa4ii_scevgep174sum5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa4.i.i*/
	/*   %174 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum5*/
		main_uslcssa4ii_174 = (main_preheaderiiipreheader_ph_reg + (1 * main_uslcssa4ii_scevgep174sum5_reg));
end
always @(posedge clk) begin
	if (reset)
		main_uslcssa4ii_174_reg <= 0;
	/* main: %.us-lcssa4.i.i*/
	/*   %174 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum5*/
	else if((cur_state == LEGUP_F_main_BB_uslcssa4ii_135)) begin
		main_uslcssa4ii_174_reg <= main_uslcssa4ii_174;
		if (start == 1'b0 && ^(main_uslcssa4ii_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa4ii_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa4.i.i*/
	/*   %175 = load i8* %170, align 1, !tbaa !5*/
		main_uslcssa4ii_175 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_uslcssa4ii_175_reg <= 0;
	/* main: %.us-lcssa4.i.i*/
	/*   %175 = load i8* %170, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_uslcssa4ii_137)) begin
		main_uslcssa4ii_175_reg <= main_uslcssa4ii_175;
		if (start == 1'b0 && ^(main_uslcssa4ii_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa4ii_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa4.i.i*/
	/*   %176 = zext i8 %175 to i16*/
		main_uslcssa4ii_176 = main_uslcssa4ii_175;
end
always @(posedge clk) begin
	if (reset)
		main_uslcssa4ii_176_reg <= 0;
	/* main: %.us-lcssa4.i.i*/
	/*   %176 = zext i8 %175 to i16*/
	else if((cur_state == LEGUP_F_main_BB_uslcssa4ii_137)) begin
		main_uslcssa4ii_176_reg <= main_uslcssa4ii_176;
		if (start == 1'b0 && ^(main_uslcssa4ii_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa4ii_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa4.i.i*/
	/*   %177 = or i16 %173, %176*/
		main_uslcssa4ii_177 = (main_uslcssa4ii_173_reg | main_uslcssa4ii_176);
end
always @(posedge clk) begin
	if (reset)
		main_uslcssa4ii_177_reg <= 0;
	/* main: %.us-lcssa4.i.i*/
	/*   %177 = or i16 %173, %176*/
	else if((cur_state == LEGUP_F_main_BB_uslcssa4ii_137)) begin
		main_uslcssa4ii_177_reg <= main_uslcssa4ii_177;
		if (start == 1'b0 && ^(main_uslcssa4ii_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa4ii_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa4.i.i*/
	/*   %178 = sext i16 %177 to i32*/
		main_uslcssa4ii_178 = $signed(main_uslcssa4ii_177);
end
always @(posedge clk) begin
	if (reset)
		main_uslcssa4ii_178_reg <= 0;
	/* main: %.us-lcssa4.i.i*/
	/*   %178 = sext i16 %177 to i32*/
	else if((cur_state == LEGUP_F_main_BB_uslcssa4ii_137)) begin
		main_uslcssa4ii_178_reg <= main_uslcssa4ii_178;
		if (start == 1'b0 && ^(main_uslcssa4ii_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa4ii_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa4.i.i*/
	/*   %scevgep174.sum6 = add i32 %indvar172, 4*/
		main_uslcssa4ii_scevgep174sum6 = (main_preheaderiii_indvar172_reg + 32'd4);
end
always @(posedge clk) begin
	if (reset)
		main_uslcssa4ii_scevgep174sum6_reg <= 0;
	/* main: %.us-lcssa4.i.i*/
	/*   %scevgep174.sum6 = add i32 %indvar172, 4*/
	else if((cur_state == LEGUP_F_main_BB_uslcssa4ii_134)) begin
		main_uslcssa4ii_scevgep174sum6_reg <= main_uslcssa4ii_scevgep174sum6;
		if (start == 1'b0 && ^(main_uslcssa4ii_scevgep174sum6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa4ii_scevgep174sum6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa4.i.i*/
	/*   %179 = load i8* %174, align 1, !tbaa !5*/
		main_uslcssa4ii_179 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_uslcssa4ii_179_reg <= 0;
	/* main: %.us-lcssa4.i.i*/
	/*   %179 = load i8* %174, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_uslcssa4ii_137)) begin
		main_uslcssa4ii_179_reg <= main_uslcssa4ii_179;
		if (start == 1'b0 && ^(main_uslcssa4ii_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa4ii_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa4.i.i*/
	/*   %180 = zext i8 %179 to i32*/
		main_uslcssa4ii_180 = main_uslcssa4ii_179;
end
always @(posedge clk) begin
	if (reset)
		main_uslcssa4ii_180_reg <= 0;
	/* main: %.us-lcssa4.i.i*/
	/*   %180 = zext i8 %179 to i32*/
	else if((cur_state == LEGUP_F_main_BB_uslcssa4ii_137)) begin
		main_uslcssa4ii_180_reg <= main_uslcssa4ii_180;
		if (start == 1'b0 && ^(main_uslcssa4ii_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa4ii_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa4.i.i*/
	/*   %183 = icmp eq i16 %177, 12*/
		main_uslcssa4ii_183 = (main_uslcssa4ii_177 == 16'd12);
end
always @(posedge clk) begin
	if (reset)
		main_uslcssa4ii_183_reg <= 0;
	/* main: %.us-lcssa4.i.i*/
	/*   %183 = icmp eq i16 %177, 12*/
	else if((cur_state == LEGUP_F_main_BB_uslcssa4ii_137)) begin
		main_uslcssa4ii_183_reg <= main_uslcssa4ii_183;
		if (start == 1'b0 && ^(main_uslcssa4ii_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa4ii_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %185 = load i32* @main_result, align 4, !tbaa !1*/
		main_184_185 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_184_185_reg <= 0;
	/* main: %184*/
	/*   %185 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__184_140)) begin
		main_184_185_reg <= main_184_185;
		if (start == 1'b0 && ^(main_184_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %186 = add nsw i32 %185, 1*/
		main_184_186 = (main_184_185 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_184_186_reg <= 0;
	/* main: %184*/
	/*   %186 = add nsw i32 %185, 1*/
	else if((cur_state == LEGUP_F_main_BB__184_140)) begin
		main_184_186_reg <= main_184_186;
		if (start == 1'b0 && ^(main_184_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i.i.i.thread*/
	/*   %188 = load i32* @main_result, align 4, !tbaa !1*/
		main_preheader2iiithread_188 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_preheader2iiithread_188_reg <= 0;
	/* main: %.preheader2.i.i.i.thread*/
	/*   %188 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_preheader2iiithread_145)) begin
		main_preheader2iiithread_188_reg <= main_preheader2iiithread_188;
		if (start == 1'b0 && ^(main_preheader2iiithread_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2iiithread_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i.i.i.thread*/
	/*   %189 = add nsw i32 %188, 1*/
		main_preheader2iiithread_189 = (main_preheader2iiithread_188 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_preheader2iiithread_189_reg <= 0;
	/* main: %.preheader2.i.i.i.thread*/
	/*   %189 = add nsw i32 %188, 1*/
	else if((cur_state == LEGUP_F_main_BB_preheader2iiithread_145)) begin
		main_preheader2iiithread_189_reg <= main_preheader2iiithread_189;
		if (start == 1'b0 && ^(main_preheader2iiithread_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2iiithread_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i.preheader*/
	/*   %190 = icmp sgt i8 %p_jinfo_num_components.0.ph, 0*/
		main_lrph10iiipreheader_190 = ($signed(main_loopexitipreheaderiiouter_p_jinfo_num_components0ph_reg) > $signed(8'd0));
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iiipreheader_190_reg <= 0;
	/* main: %.lr.ph10.i.i.i.preheader*/
	/*   %190 = icmp sgt i8 %p_jinfo_num_components.0.ph, 0*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iiipreheader_147)) begin
		main_lrph10iiipreheader_190_reg <= main_lrph10iiipreheader_190;
		if (start == 1'b0 && ^(main_lrph10iiipreheader_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iiipreheader_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i.preheader*/
	/*   %191 = sext i8 %p_jinfo_num_components.0.ph to i32*/
		main_lrph10iiipreheader_191 = $signed(main_loopexitipreheaderiiouter_p_jinfo_num_components0ph_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iiipreheader_191_reg <= 0;
	/* main: %.lr.ph10.i.i.i.preheader*/
	/*   %191 = sext i8 %p_jinfo_num_components.0.ph to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iiipreheader_147)) begin
		main_lrph10iiipreheader_191_reg <= main_lrph10iiipreheader_191;
		if (start == 1'b0 && ^(main_lrph10iiipreheader_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iiipreheader_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i*/
	/*   %i_get_sos.0 = phi i32 [ %244, %243 ], [ 0, %.lr.ph10.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph10iiipreheader_147) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph10iii_i_get_sos0 = 32'd0;
	end
	/* main: %.lr.ph10.i.i.i*/
	/*   %i_get_sos.0 = phi i32 [ %244, %243 ], [ 0, %.lr.ph10.i.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__243_180) & (memory_controller_waitrequest == 1'd0)) & (main_243_245 == 1'd1))) */ begin
		main_lrph10iii_i_get_sos0 = main_243_244;
	end
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iii_i_get_sos0_reg <= 0;
	/* main: %.lr.ph10.i.i.i*/
	/*   %i_get_sos.0 = phi i32 [ %244, %243 ], [ 0, %.lr.ph10.i.i.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_lrph10iiipreheader_147) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph10iii_i_get_sos0_reg <= main_lrph10iii_i_get_sos0;
		if (start == 1'b0 && ^(main_lrph10iii_i_get_sos0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_i_get_sos0_reg"); $finish; end
	end
	/* main: %.lr.ph10.i.i.i*/
	/*   %i_get_sos.0 = phi i32 [ %244, %243 ], [ 0, %.lr.ph10.i.i.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB__243_180) & (memory_controller_waitrequest == 1'd0)) & (main_243_245 == 1'd1))) begin
		main_lrph10iii_i_get_sos0_reg <= main_lrph10iii_i_get_sos0;
		if (start == 1'b0 && ^(main_lrph10iii_i_get_sos0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_i_get_sos0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i*/
	/*   %192 = shl i32 %i_get_sos.0, 1*/
		main_lrph10iii_192 = (main_lrph10iii_i_get_sos0_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iii_192_reg <= 0;
	/* main: %.lr.ph10.i.i.i*/
	/*   %192 = shl i32 %i_get_sos.0, 1*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iii_148)) begin
		main_lrph10iii_192_reg <= main_lrph10iii_192;
		if (start == 1'b0 && ^(main_lrph10iii_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i*/
	/*   %193 = add i32 %192, 6*/
		main_lrph10iii_193 = (main_lrph10iii_192 + 32'd6);
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iii_193_reg <= 0;
	/* main: %.lr.ph10.i.i.i*/
	/*   %193 = add i32 %192, 6*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iii_148)) begin
		main_lrph10iii_193_reg <= main_lrph10iii_193;
		if (start == 1'b0 && ^(main_lrph10iii_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i*/
	/*   %scevgep174.sum7 = add i32 %indvar172, %193*/
		main_lrph10iii_scevgep174sum7 = (main_preheaderiii_indvar172_reg + main_lrph10iii_193);
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iii_scevgep174sum7_reg <= 0;
	/* main: %.lr.ph10.i.i.i*/
	/*   %scevgep174.sum7 = add i32 %indvar172, %193*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iii_148)) begin
		main_lrph10iii_scevgep174sum7_reg <= main_lrph10iii_scevgep174sum7;
		if (start == 1'b0 && ^(main_lrph10iii_scevgep174sum7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_scevgep174sum7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i*/
	/*   %194 = add i32 %192, 4*/
		main_lrph10iii_194 = (main_lrph10iii_192 + 32'd4);
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iii_194_reg <= 0;
	/* main: %.lr.ph10.i.i.i*/
	/*   %194 = add i32 %192, 4*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iii_148)) begin
		main_lrph10iii_194_reg <= main_lrph10iii_194;
		if (start == 1'b0 && ^(main_lrph10iii_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i*/
	/*   %scevgep174.sum8 = add i32 %indvar172, %194*/
		main_lrph10iii_scevgep174sum8 = (main_preheaderiii_indvar172_reg + main_lrph10iii_194);
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iii_scevgep174sum8_reg <= 0;
	/* main: %.lr.ph10.i.i.i*/
	/*   %scevgep174.sum8 = add i32 %indvar172, %194*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iii_148)) begin
		main_lrph10iii_scevgep174sum8_reg <= main_lrph10iii_scevgep174sum8;
		if (start == 1'b0 && ^(main_lrph10iii_scevgep174sum8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_scevgep174sum8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i*/
	/*   %ReadBuf.3 = getelementptr i8* %.ph, i32 %scevgep174.sum8*/
		main_lrph10iii_ReadBuf3 = (main_preheaderiiipreheader_ph_reg + (1 * main_lrph10iii_scevgep174sum8_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iii_ReadBuf3_reg <= 0;
	/* main: %.lr.ph10.i.i.i*/
	/*   %ReadBuf.3 = getelementptr i8* %.ph, i32 %scevgep174.sum8*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iii_149)) begin
		main_lrph10iii_ReadBuf3_reg <= main_lrph10iii_ReadBuf3;
		if (start == 1'b0 && ^(main_lrph10iii_ReadBuf3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_ReadBuf3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i*/
	/*   %195 = add i32 %192, 5*/
		main_lrph10iii_195 = (main_lrph10iii_192 + 32'd5);
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iii_195_reg <= 0;
	/* main: %.lr.ph10.i.i.i*/
	/*   %195 = add i32 %192, 5*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iii_148)) begin
		main_lrph10iii_195_reg <= main_lrph10iii_195;
		if (start == 1'b0 && ^(main_lrph10iii_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i*/
	/*   %scevgep174.sum9 = add i32 %indvar172, %195*/
		main_lrph10iii_scevgep174sum9 = (main_preheaderiii_indvar172_reg + main_lrph10iii_195);
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iii_scevgep174sum9_reg <= 0;
	/* main: %.lr.ph10.i.i.i*/
	/*   %scevgep174.sum9 = add i32 %indvar172, %195*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iii_148)) begin
		main_lrph10iii_scevgep174sum9_reg <= main_lrph10iii_scevgep174sum9;
		if (start == 1'b0 && ^(main_lrph10iii_scevgep174sum9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_scevgep174sum9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i*/
	/*   %scevgep169 = getelementptr i8* %.ph, i32 %scevgep174.sum9*/
		main_lrph10iii_scevgep169 = (main_preheaderiiipreheader_ph_reg + (1 * main_lrph10iii_scevgep174sum9_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iii_scevgep169_reg <= 0;
	/* main: %.lr.ph10.i.i.i*/
	/*   %scevgep169 = getelementptr i8* %.ph, i32 %scevgep174.sum9*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iii_149)) begin
		main_lrph10iii_scevgep169_reg <= main_lrph10iii_scevgep169;
		if (start == 1'b0 && ^(main_lrph10iii_scevgep169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_scevgep169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i*/
	/*   %196 = add i32 %i_get_sos.0, 1*/
		main_lrph10iii_196 = (main_lrph10iii_i_get_sos0_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iii_196_reg <= 0;
	/* main: %.lr.ph10.i.i.i*/
	/*   %196 = add i32 %i_get_sos.0, 1*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iii_148)) begin
		main_lrph10iii_196_reg <= main_lrph10iii_196;
		if (start == 1'b0 && ^(main_lrph10iii_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i*/
	/*   %scevgep170 = getelementptr [3 x i32]* @out_ac_tbl_no_get_sos, i32 0, i32 %i_get_sos.0*/
		main_lrph10iii_scevgep170 = (1'd0 + (4 * main_lrph10iii_i_get_sos0_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iii_scevgep170_reg <= 0;
	/* main: %.lr.ph10.i.i.i*/
	/*   %scevgep170 = getelementptr [3 x i32]* @out_ac_tbl_no_get_sos, i32 0, i32 %i_get_sos.0*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iii_148)) begin
		main_lrph10iii_scevgep170_reg <= main_lrph10iii_scevgep170;
		if (start == 1'b0 && ^(main_lrph10iii_scevgep170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_scevgep170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i*/
	/*   %scevgep171 = getelementptr [3 x i32]* @out_comp_id_get_sos, i32 0, i32 %i_get_sos.0*/
		main_lrph10iii_scevgep171 = (1'd0 + (4 * main_lrph10iii_i_get_sos0_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iii_scevgep171_reg <= 0;
	/* main: %.lr.ph10.i.i.i*/
	/*   %scevgep171 = getelementptr [3 x i32]* @out_comp_id_get_sos, i32 0, i32 %i_get_sos.0*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iii_148)) begin
		main_lrph10iii_scevgep171_reg <= main_lrph10iii_scevgep171;
		if (start == 1'b0 && ^(main_lrph10iii_scevgep171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_scevgep171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i*/
	/*   %197 = load i8* %ReadBuf.3, align 1, !tbaa !5*/
		main_lrph10iii_197 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iii_197_reg <= 0;
	/* main: %.lr.ph10.i.i.i*/
	/*   %197 = load i8* %ReadBuf.3, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iii_151)) begin
		main_lrph10iii_197_reg <= main_lrph10iii_197;
		if (start == 1'b0 && ^(main_lrph10iii_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i*/
	/*   %198 = zext i8 %197 to i32*/
		main_lrph10iii_198 = main_lrph10iii_197;
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iii_198_reg <= 0;
	/* main: %.lr.ph10.i.i.i*/
	/*   %198 = zext i8 %197 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iii_151)) begin
		main_lrph10iii_198_reg <= main_lrph10iii_198;
		if (start == 1'b0 && ^(main_lrph10iii_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.i.i*/
	/*   %199 = load i8* %scevgep169, align 1, !tbaa !5*/
		main_lrph10iii_199 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_lrph10iii_199_reg <= 0;
	/* main: %.lr.ph10.i.i.i*/
	/*   %199 = load i8* %scevgep169, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_lrph10iii_151)) begin
		main_lrph10iii_199_reg <= main_lrph10iii_199;
		if (start == 1'b0 && ^(main_lrph10iii_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph10iii_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %201 = add nsw i32 %204, 1*/
		main_200_201 = (main_lrphi4ii_204_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_200_201_reg <= 0;
	/* main: %200*/
	/*   %201 = add nsw i32 %204, 1*/
	else if((cur_state == LEGUP_F_main_BB__200_153)) begin
		main_200_201_reg <= main_200_201;
		if (start == 1'b0 && ^(main_200_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %202 = add i32 %204, 1*/
		main_200_202 = (main_lrphi4ii_204_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_200_202_reg <= 0;
	/* main: %200*/
	/*   %202 = add i32 %204, 1*/
	else if((cur_state == LEGUP_F_main_BB__200_153)) begin
		main_200_202_reg <= main_200_202;
		if (start == 1'b0 && ^(main_200_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %200*/
	/*   %203 = icmp slt i32 %202, %191*/
		main_200_203 = ($signed(main_200_202) < $signed(main_lrph10iiipreheader_191_reg));
end
always @(posedge clk) begin
	if (reset)
		main_200_203_reg <= 0;
	/* main: %200*/
	/*   %203 = icmp slt i32 %202, %191*/
	else if((cur_state == LEGUP_F_main_BB__200_153)) begin
		main_200_203_reg <= main_200_203;
		if (start == 1'b0 && ^(main_200_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %204 = phi i32 [ %201, %200 ], [ 0, %.lr.ph.i4.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi4iipreheader_152) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi4ii_204 = 32'd0;
	end
	/* main: %.lr.ph.i4.i.i*/
	/*   %204 = phi i32 [ %201, %200 ], [ 0, %.lr.ph.i4.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__200_153) & (memory_controller_waitrequest == 1'd0)) & (main_200_203 == 1'd1))) */ begin
		main_lrphi4ii_204 = main_200_201;
	end
end
always @(posedge clk) begin
	if (reset)
		main_lrphi4ii_204_reg <= 0;
	/* main: %.lr.ph.i4.i.i*/
	/*   %204 = phi i32 [ %201, %200 ], [ 0, %.lr.ph.i4.i.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_lrphi4iipreheader_152) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi4ii_204_reg <= main_lrphi4ii_204;
		if (start == 1'b0 && ^(main_lrphi4ii_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi4ii_204_reg"); $finish; end
	end
	/* main: %.lr.ph.i4.i.i*/
	/*   %204 = phi i32 [ %201, %200 ], [ 0, %.lr.ph.i4.i.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB__200_153) & (memory_controller_waitrequest == 1'd0)) & (main_200_203 == 1'd1))) begin
		main_lrphi4ii_204_reg <= main_lrphi4ii_204;
		if (start == 1'b0 && ^(main_lrphi4ii_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi4ii_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %scevgep166 = getelementptr [3 x i8]* @p_jinfo_comps_info_id, i32 0, i32 %204*/
		main_lrphi4ii_scevgep166 = (1'd0 + (1 * main_lrphi4ii_204_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi4ii_scevgep166_reg <= 0;
	/* main: %.lr.ph.i4.i.i*/
	/*   %scevgep166 = getelementptr [3 x i8]* @p_jinfo_comps_info_id, i32 0, i32 %204*/
	else if((cur_state == LEGUP_F_main_BB_lrphi4ii_154)) begin
		main_lrphi4ii_scevgep166_reg <= main_lrphi4ii_scevgep166;
		if (start == 1'b0 && ^(main_lrphi4ii_scevgep166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi4ii_scevgep166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %205 = load i8* %scevgep166, align 1, !tbaa !5*/
		main_lrphi4ii_205 = p_jinfo_comps_info_id_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi4ii_205_reg <= 0;
	/* main: %.lr.ph.i4.i.i*/
	/*   %205 = load i8* %scevgep166, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_lrphi4ii_155)) begin
		main_lrphi4ii_205_reg <= main_lrphi4ii_205;
		if (start == 1'b0 && ^(main_lrphi4ii_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi4ii_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %206 = sext i8 %205 to i32*/
		main_lrphi4ii_206 = $signed(main_lrphi4ii_205);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi4ii_206_reg <= 0;
	/* main: %.lr.ph.i4.i.i*/
	/*   %206 = sext i8 %205 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi4ii_155)) begin
		main_lrphi4ii_206_reg <= main_lrphi4ii_206;
		if (start == 1'b0 && ^(main_lrphi4ii_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi4ii_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %207 = icmp eq i32 %198, %206*/
		main_lrphi4ii_207 = (main_lrph10iii_198_reg == main_lrphi4ii_206);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi4ii_207_reg <= 0;
	/* main: %.lr.ph.i4.i.i*/
	/*   %207 = icmp eq i32 %198, %206*/
	else if((cur_state == LEGUP_F_main_BB_lrphi4ii_155)) begin
		main_lrphi4ii_207_reg <= main_lrphi4ii_207;
		if (start == 1'b0 && ^(main_lrphi4ii_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi4ii_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %210 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_dc_tbl_no, i32 0, i32 %204*/
		main_209_210 = (`TAG_g_p_jinfo_comps_info_dc_tbl_no_a + (1 * main_lrphi4ii_204_reg));
end
always @(posedge clk) begin
	if (reset)
		main_209_210_reg <= 0;
	/* main: %209*/
	/*   %210 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_dc_tbl_no, i32 0, i32 %204*/
	else if((cur_state == LEGUP_F_main_BB__209_159)) begin
		main_209_210_reg <= main_209_210;
		if (start == 1'b0 && ^(main_209_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %211 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_ac_tbl_no, i32 0, i32 %204*/
		main_209_211 = (1'd0 + (1 * main_lrphi4ii_204_reg));
end
always @(posedge clk) begin
	if (reset)
		main_209_211_reg <= 0;
	/* main: %209*/
	/*   %211 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_ac_tbl_no, i32 0, i32 %204*/
	else if((cur_state == LEGUP_F_main_BB__209_159)) begin
		main_209_211_reg <= main_209_211;
		if (start == 1'b0 && ^(main_209_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %212 = load i32* @main_result, align 4, !tbaa !1*/
		main_209_212 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_209_212_reg <= 0;
	/* main: %209*/
	/*   %212 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__209_161)) begin
		main_209_212_reg <= main_209_212;
		if (start == 1'b0 && ^(main_209_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %213 = add nsw i32 %212, 1*/
		main_209_213 = (main_209_212 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_209_213_reg <= 0;
	/* main: %209*/
	/*   %213 = add nsw i32 %212, 1*/
	else if((cur_state == LEGUP_F_main_BB__209_161)) begin
		main_209_213_reg <= main_209_213;
		if (start == 1'b0 && ^(main_209_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %214 = lshr i8 %199, 4*/
		main_209_214 = (main_lrph10iii_199_reg >>> (8'd4 % 8'd8));
end
always @(posedge clk) begin
	if (reset)
		main_209_214_reg <= 0;
	/* main: %209*/
	/*   %214 = lshr i8 %199, 4*/
	else if((cur_state == LEGUP_F_main_BB__209_159)) begin
		main_209_214_reg <= main_209_214;
		if (start == 1'b0 && ^(main_209_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %215 = and i8 %199, 15*/
		main_209_215 = (main_lrph10iii_199_reg & 8'd15);
end
always @(posedge clk) begin
	if (reset)
		main_209_215_reg <= 0;
	/* main: %209*/
	/*   %215 = and i8 %199, 15*/
	else if((cur_state == LEGUP_F_main_BB__209_159)) begin
		main_209_215_reg <= main_209_215;
		if (start == 1'b0 && ^(main_209_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %217 = load i8* %210, align 1, !tbaa !5*/
		main_209_217 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_209_217_reg <= 0;
	/* main: %209*/
	/*   %217 = load i8* %210, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__209_162)) begin
		main_209_217_reg <= main_209_217;
		if (start == 1'b0 && ^(main_209_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %218 = sext i8 %217 to i32*/
		main_209_218 = $signed(main_209_217);
end
always @(posedge clk) begin
	if (reset)
		main_209_218_reg <= 0;
	/* main: %209*/
	/*   %218 = sext i8 %217 to i32*/
	else if((cur_state == LEGUP_F_main_BB__209_162)) begin
		main_209_218_reg <= main_209_218;
		if (start == 1'b0 && ^(main_209_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %220 = load i8* %211, align 1, !tbaa !5*/
		main_209_220 = p_jinfo_comps_info_ac_tbl_no_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_209_220_reg <= 0;
	/* main: %209*/
	/*   %220 = load i8* %211, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__209_161)) begin
		main_209_220_reg <= main_209_220;
		if (start == 1'b0 && ^(main_209_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %221 = sext i8 %220 to i32*/
		main_209_221 = $signed(main_209_220);
end
always @(posedge clk) begin
	if (reset)
		main_209_221_reg <= 0;
	/* main: %209*/
	/*   %221 = sext i8 %220 to i32*/
	else if((cur_state == LEGUP_F_main_BB__209_161)) begin
		main_209_221_reg <= main_209_221;
		if (start == 1'b0 && ^(main_209_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %223 = load i32* %scevgep171, align 4, !tbaa !1*/
		main_209_223 = out_comp_id_get_sos_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_209_223_reg <= 0;
	/* main: %209*/
	/*   %223 = load i32* %scevgep171, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__209_160)) begin
		main_209_223_reg <= main_209_223;
		if (start == 1'b0 && ^(main_209_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %209*/
	/*   %224 = icmp eq i32 %198, %223*/
		main_209_224 = (main_lrph10iii_198_reg == main_209_223);
end
always @(posedge clk) begin
	if (reset)
		main_209_224_reg <= 0;
	/* main: %209*/
	/*   %224 = icmp eq i32 %198, %223*/
	else if((cur_state == LEGUP_F_main_BB__209_160)) begin
		main_209_224_reg <= main_209_224;
		if (start == 1'b0 && ^(main_209_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_209_224_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %226 = load i32* @main_result, align 4, !tbaa !1*/
		main_225_226 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_225_226_reg <= 0;
	/* main: %225*/
	/*   %226 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__225_165)) begin
		main_225_226_reg <= main_225_226;
		if (start == 1'b0 && ^(main_225_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %227 = add nsw i32 %226, 1*/
		main_225_227 = (main_225_226 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_225_227_reg <= 0;
	/* main: %225*/
	/*   %227 = add nsw i32 %226, 1*/
	else if((cur_state == LEGUP_F_main_BB__225_165)) begin
		main_225_227_reg <= main_225_227;
		if (start == 1'b0 && ^(main_225_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %228*/
	/*   %229 = load i8* %210, align 1, !tbaa !5*/
		main_228_229 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_228_229_reg <= 0;
	/* main: %228*/
	/*   %229 = load i8* %210, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__228_169)) begin
		main_228_229_reg <= main_228_229;
		if (start == 1'b0 && ^(main_228_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_228_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %228*/
	/*   %230 = sext i8 %229 to i32*/
		main_228_230 = $signed(main_228_229);
end
always @(posedge clk) begin
	if (reset)
		main_228_230_reg <= 0;
	/* main: %228*/
	/*   %230 = sext i8 %229 to i32*/
	else if((cur_state == LEGUP_F_main_BB__228_169)) begin
		main_228_230_reg <= main_228_230;
		if (start == 1'b0 && ^(main_228_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_228_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %228*/
	/*   %231 = load i32* %scevgep170, align 4, !tbaa !1*/
		main_228_231 = out_ac_tbl_no_get_sos_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_228_231_reg <= 0;
	/* main: %228*/
	/*   %231 = load i32* %scevgep170, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__228_168)) begin
		main_228_231_reg <= main_228_231;
		if (start == 1'b0 && ^(main_228_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_228_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %228*/
	/*   %232 = icmp eq i32 %230, %231*/
		main_228_232 = (main_228_230 == main_228_231_reg);
end
always @(posedge clk) begin
	if (reset)
		main_228_232_reg <= 0;
	/* main: %228*/
	/*   %232 = icmp eq i32 %230, %231*/
	else if((cur_state == LEGUP_F_main_BB__228_169)) begin
		main_228_232_reg <= main_228_232;
		if (start == 1'b0 && ^(main_228_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_228_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %233*/
	/*   %234 = load i32* @main_result, align 4, !tbaa !1*/
		main_233_234 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_233_234_reg <= 0;
	/* main: %233*/
	/*   %234 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__233_172)) begin
		main_233_234_reg <= main_233_234;
		if (start == 1'b0 && ^(main_233_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_233_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %233*/
	/*   %235 = add nsw i32 %234, 1*/
		main_233_235 = (main_233_234 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_233_235_reg <= 0;
	/* main: %233*/
	/*   %235 = add nsw i32 %234, 1*/
	else if((cur_state == LEGUP_F_main_BB__233_172)) begin
		main_233_235_reg <= main_233_235;
		if (start == 1'b0 && ^(main_233_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_233_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %237 = load i8* %211, align 1, !tbaa !5*/
		main_236_237 = p_jinfo_comps_info_ac_tbl_no_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_236_237_reg <= 0;
	/* main: %236*/
	/*   %237 = load i8* %211, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__236_175)) begin
		main_236_237_reg <= main_236_237;
		if (start == 1'b0 && ^(main_236_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %238 = sext i8 %237 to i32*/
		main_236_238 = $signed(main_236_237);
end
always @(posedge clk) begin
	if (reset)
		main_236_238_reg <= 0;
	/* main: %236*/
	/*   %238 = sext i8 %237 to i32*/
	else if((cur_state == LEGUP_F_main_BB__236_175)) begin
		main_236_238_reg <= main_236_238;
		if (start == 1'b0 && ^(main_236_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %236*/
	/*   %239 = icmp eq i32 %238, %231*/
		main_236_239 = (main_236_238 == main_228_231_reg);
end
always @(posedge clk) begin
	if (reset)
		main_236_239_reg <= 0;
	/* main: %236*/
	/*   %239 = icmp eq i32 %238, %231*/
	else if((cur_state == LEGUP_F_main_BB__236_175)) begin
		main_236_239_reg <= main_236_239;
		if (start == 1'b0 && ^(main_236_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_236_239_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %240*/
	/*   %241 = load i32* @main_result, align 4, !tbaa !1*/
		main_240_241 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_240_241_reg <= 0;
	/* main: %240*/
	/*   %241 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__240_178)) begin
		main_240_241_reg <= main_240_241;
		if (start == 1'b0 && ^(main_240_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %240*/
	/*   %242 = add nsw i32 %241, 1*/
		main_240_242 = (main_240_241 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_240_242_reg <= 0;
	/* main: %240*/
	/*   %242 = add nsw i32 %241, 1*/
	else if((cur_state == LEGUP_F_main_BB__240_178)) begin
		main_240_242_reg <= main_240_242;
		if (start == 1'b0 && ^(main_240_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %243*/
	/*   %244 = add nsw i32 %i_get_sos.0, 1*/
		main_243_244 = (main_lrph10iii_i_get_sos0_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_243_244_reg <= 0;
	/* main: %243*/
	/*   %244 = add nsw i32 %i_get_sos.0, 1*/
	else if((cur_state == LEGUP_F_main_BB__243_180)) begin
		main_243_244_reg <= main_243_244;
		if (start == 1'b0 && ^(main_243_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_243_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %243*/
	/*   %245 = icmp slt i32 %196, %180*/
		main_243_245 = ($signed(main_lrph10iii_196_reg) < $signed(main_uslcssa4ii_180_reg));
end
always @(posedge clk) begin
	if (reset)
		main_243_245_reg <= 0;
	/* main: %243*/
	/*   %245 = icmp slt i32 %196, %180*/
	else if((cur_state == LEGUP_F_main_BB__243_180)) begin
		main_243_245_reg <= main_243_245;
		if (start == 1'b0 && ^(main_243_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_243_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %get_sos.exit.i.i*/
	/*   %scevgep174.sum6.pn = phi i32 [ %scevgep174.sum6, %187 ], [ %scevgep174.sum7, %get_sos.exit.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_142) & (memory_controller_waitrequest == 1'd0)) & (main_uslcssa4ii_179_reg == 8'd0))) begin
		main_get_sosexitii_scevgep174sum6pn = main_uslcssa4ii_scevgep174sum6_reg;
	end
	/* main: %get_sos.exit.i.i*/
	/*   %scevgep174.sum6.pn = phi i32 [ %scevgep174.sum6, %187 ], [ %scevgep174.sum7, %get_sos.exit.i.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_get_sosexitiiloopexit_181) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_get_sosexitii_scevgep174sum6pn = main_lrph10iii_scevgep174sum7_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_get_sosexitii_scevgep174sum6pn_reg <= 0;
	/* main: %get_sos.exit.i.i*/
	/*   %scevgep174.sum6.pn = phi i32 [ %scevgep174.sum6, %187 ], [ %scevgep174.sum7, %get_sos.exit.i.i.loopexit ]*/
	else if((((cur_state == LEGUP_F_main_BB__187_142) & (memory_controller_waitrequest == 1'd0)) & (main_uslcssa4ii_179_reg == 8'd0))) begin
		main_get_sosexitii_scevgep174sum6pn_reg <= main_get_sosexitii_scevgep174sum6pn;
		if (start == 1'b0 && ^(main_get_sosexitii_scevgep174sum6pn) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_get_sosexitii_scevgep174sum6pn_reg"); $finish; end
	end
	/* main: %get_sos.exit.i.i*/
	/*   %scevgep174.sum6.pn = phi i32 [ %scevgep174.sum6, %187 ], [ %scevgep174.sum7, %get_sos.exit.i.i.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_get_sosexitiiloopexit_181) & (memory_controller_waitrequest == 1'd0))) begin
		main_get_sosexitii_scevgep174sum6pn_reg <= main_get_sosexitii_scevgep174sum6pn;
		if (start == 1'b0 && ^(main_get_sosexitii_scevgep174sum6pn) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_get_sosexitii_scevgep174sum6pn_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %get_sos.exit.i.i*/
	/*   %ReadBuf.4.sum = add i32 %scevgep174.sum6.pn, 3*/
		main_get_sosexitii_ReadBuf4sum = (main_get_sosexitii_scevgep174sum6pn_reg + 32'd3);
end
always @(posedge clk) begin
	if (reset)
		main_get_sosexitii_ReadBuf4sum_reg <= 0;
	/* main: %get_sos.exit.i.i*/
	/*   %ReadBuf.4.sum = add i32 %scevgep174.sum6.pn, 3*/
	else if((cur_state == LEGUP_F_main_BB_get_sosexitii_182)) begin
		main_get_sosexitii_ReadBuf4sum_reg <= main_get_sosexitii_ReadBuf4sum;
		if (start == 1'b0 && ^(main_get_sosexitii_ReadBuf4sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_get_sosexitii_ReadBuf4sum_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %get_sos.exit.i.i*/
	/*   %scevgep.i.i.i = getelementptr i8* %.ph, i32 %ReadBuf.4.sum*/
		main_get_sosexitii_scevgepiii = (main_preheaderiiipreheader_ph_reg + (1 * main_get_sosexitii_ReadBuf4sum_reg));
end
always @(posedge clk) begin
	if (reset)
		main_get_sosexitii_scevgepiii_reg <= 0;
	/* main: %get_sos.exit.i.i*/
	/*   %scevgep.i.i.i = getelementptr i8* %.ph, i32 %ReadBuf.4.sum*/
	else if((cur_state == LEGUP_F_main_BB_get_sosexitii_183)) begin
		main_get_sosexitii_scevgepiii_reg <= main_get_sosexitii_scevgepiii;
		if (start == 1'b0 && ^(main_get_sosexitii_scevgepiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_get_sosexitii_scevgepiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %246*/
	/*   %scevgep174.sum2 = add i32 %indvar172, 2*/
		main_246_scevgep174sum2 = (main_preheaderiii_indvar172_reg + 32'd2);
end
always @(posedge clk) begin
	if (reset)
		main_246_scevgep174sum2_reg <= 0;
	/* main: %246*/
	/*   %scevgep174.sum2 = add i32 %indvar172, 2*/
	else if((cur_state == LEGUP_F_main_BB__246_184)) begin
		main_246_scevgep174sum2_reg <= main_246_scevgep174sum2;
		if (start == 1'b0 && ^(main_246_scevgep174sum2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_246_scevgep174sum2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %246*/
	/*   %247 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum2*/
		main_246_247 = (main_preheaderiiipreheader_ph_reg + (1 * main_246_scevgep174sum2_reg));
end
always @(posedge clk) begin
	if (reset)
		main_246_247_reg <= 0;
	/* main: %246*/
	/*   %247 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum2*/
	else if((cur_state == LEGUP_F_main_BB__246_185)) begin
		main_246_247_reg <= main_246_247;
		if (start == 1'b0 && ^(main_246_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_246_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %246*/
	/*   %248 = load i8* %scevgep175, align 1, !tbaa !5*/
		main_246_248 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_246_248_reg <= 0;
	/* main: %246*/
	/*   %248 = load i8* %scevgep175, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__246_186)) begin
		main_246_248_reg <= main_246_248;
		if (start == 1'b0 && ^(main_246_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_246_248_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %246*/
	/*   %249 = zext i8 %248 to i16*/
		main_246_249 = main_246_248;
end
always @(posedge clk) begin
	if (reset)
		main_246_249_reg <= 0;
	/* main: %246*/
	/*   %249 = zext i8 %248 to i16*/
	else if((cur_state == LEGUP_F_main_BB__246_186)) begin
		main_246_249_reg <= main_246_249;
		if (start == 1'b0 && ^(main_246_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_246_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %246*/
	/*   %250 = shl nuw i16 %249, 8*/
		main_246_250 = (main_246_249 <<< (16'd8 % 16'd16));
end
always @(posedge clk) begin
	if (reset)
		main_246_250_reg <= 0;
	/* main: %246*/
	/*   %250 = shl nuw i16 %249, 8*/
	else if((cur_state == LEGUP_F_main_BB__246_186)) begin
		main_246_250_reg <= main_246_250;
		if (start == 1'b0 && ^(main_246_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_246_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %246*/
	/*   %scevgep174.sum3 = add i32 %indvar172, 3*/
		main_246_scevgep174sum3 = (main_preheaderiii_indvar172_reg + 32'd3);
end
always @(posedge clk) begin
	if (reset)
		main_246_scevgep174sum3_reg <= 0;
	/* main: %246*/
	/*   %scevgep174.sum3 = add i32 %indvar172, 3*/
	else if((cur_state == LEGUP_F_main_BB__246_184)) begin
		main_246_scevgep174sum3_reg <= main_246_scevgep174sum3;
		if (start == 1'b0 && ^(main_246_scevgep174sum3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_246_scevgep174sum3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %246*/
	/*   %251 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum3*/
		main_246_251 = (main_preheaderiiipreheader_ph_reg + (1 * main_246_scevgep174sum3_reg));
end
always @(posedge clk) begin
	if (reset)
		main_246_251_reg <= 0;
	/* main: %246*/
	/*   %251 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum3*/
	else if((cur_state == LEGUP_F_main_BB__246_185)) begin
		main_246_251_reg <= main_246_251;
		if (start == 1'b0 && ^(main_246_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_246_251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %246*/
	/*   %252 = load i8* %247, align 1, !tbaa !5*/
		main_246_252 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_246_252_reg <= 0;
	/* main: %246*/
	/*   %252 = load i8* %247, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__246_187)) begin
		main_246_252_reg <= main_246_252;
		if (start == 1'b0 && ^(main_246_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_246_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %246*/
	/*   %253 = zext i8 %252 to i16*/
		main_246_253 = main_246_252;
end
always @(posedge clk) begin
	if (reset)
		main_246_253_reg <= 0;
	/* main: %246*/
	/*   %253 = zext i8 %252 to i16*/
	else if((cur_state == LEGUP_F_main_BB__246_187)) begin
		main_246_253_reg <= main_246_253;
		if (start == 1'b0 && ^(main_246_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_246_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %246*/
	/*   %254 = or i16 %250, %253*/
		main_246_254 = (main_246_250_reg | main_246_253);
end
always @(posedge clk) begin
	if (reset)
		main_246_254_reg <= 0;
	/* main: %246*/
	/*   %254 = or i16 %250, %253*/
	else if((cur_state == LEGUP_F_main_BB__246_187)) begin
		main_246_254_reg <= main_246_254;
		if (start == 1'b0 && ^(main_246_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_246_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %246*/
	/*   %255 = sext i16 %254 to i32*/
		main_246_255 = $signed(main_246_254);
end
always @(posedge clk) begin
	if (reset)
		main_246_255_reg <= 0;
	/* main: %246*/
	/*   %255 = sext i16 %254 to i32*/
	else if((cur_state == LEGUP_F_main_BB__246_187)) begin
		main_246_255_reg <= main_246_255;
		if (start == 1'b0 && ^(main_246_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_246_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %246*/
	/*   %256 = add nsw i32 %255, -2*/
		main_246_256 = (main_246_255 + -32'd2);
end
always @(posedge clk) begin
	if (reset)
		main_246_256_reg <= 0;
	/* main: %246*/
	/*   %256 = add nsw i32 %255, -2*/
	else if((cur_state == LEGUP_F_main_BB__246_187)) begin
		main_246_256_reg <= main_246_256;
		if (start == 1'b0 && ^(main_246_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_246_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %246*/
	/*   %258 = load i32* %12, align 4, !tbaa !1*/
		main_246_258 = out_length_get_dht_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_246_258_reg <= 0;
	/* main: %246*/
	/*   %258 = load i32* %12, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__246_185)) begin
		main_246_258_reg <= main_246_258;
		if (start == 1'b0 && ^(main_246_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_246_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %246*/
	/*   %259 = icmp eq i32 %256, %258*/
		main_246_259 = (main_246_256 == main_246_258_reg);
end
always @(posedge clk) begin
	if (reset)
		main_246_259_reg <= 0;
	/* main: %246*/
	/*   %259 = icmp eq i32 %256, %258*/
	else if((cur_state == LEGUP_F_main_BB__246_187)) begin
		main_246_259_reg <= main_246_259;
		if (start == 1'b0 && ^(main_246_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_246_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %260*/
	/*   %261 = load i32* @main_result, align 4, !tbaa !1*/
		main_260_261 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_260_261_reg <= 0;
	/* main: %260*/
	/*   %261 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__260_190)) begin
		main_260_261_reg <= main_260_261;
		if (start == 1'b0 && ^(main_260_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_260_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %260*/
	/*   %262 = add nsw i32 %261, 1*/
		main_260_262 = (main_260_261 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_260_262_reg <= 0;
	/* main: %260*/
	/*   %262 = add nsw i32 %261, 1*/
	else if((cur_state == LEGUP_F_main_BB__260_190)) begin
		main_260_262_reg <= main_260_262;
		if (start == 1'b0 && ^(main_260_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_260_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i7.i.i*/
	/*   %263 = icmp sgt i32 %256, 16*/
		main_preheaderi7ii_263 = ($signed(main_246_256_reg) > $signed(32'd16));
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi7ii_263_reg <= 0;
	/* main: %.preheader.i7.i.i*/
	/*   %263 = icmp sgt i32 %256, 16*/
	else if((cur_state == LEGUP_F_main_BB_preheaderi7ii_192)) begin
		main_preheaderi7ii_263_reg <= main_preheaderi7ii_263;
		if (start == 1'b0 && ^(main_preheaderi7ii_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi7ii_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph5.i.i.i.preheader*/
	/*   %264 = add i32 %i_get_dht.0.ph31, 1*/
		main_lrph5iiipreheader_264 = (main_loopexitipreheaderiiouter29_i_get_dht0ph31_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_lrph5iiipreheader_264_reg <= 0;
	/* main: %.lr.ph5.i.i.i.preheader*/
	/*   %264 = add i32 %i_get_dht.0.ph31, 1*/
	else if((cur_state == LEGUP_F_main_BB_lrph5iiipreheader_193)) begin
		main_lrph5iiipreheader_264_reg <= main_lrph5iiipreheader_264;
		if (start == 1'b0 && ^(main_lrph5iiipreheader_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5iiipreheader_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph5.i.i.i*/
	/*   %indvar182 = phi i32 [ %indvar.next183, %._crit_edge.i10.i.i ], [ 0, %.lr.ph5.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph5iiipreheader_193) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph5iii_indvar182 = 32'd0;
	end
	/* main: %.lr.ph5.i.i.i*/
	/*   %indvar182 = phi i32 [ %indvar.next183, %._crit_edge.i10.i.i ], [ 0, %.lr.ph5.i.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgei10ii_272) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei10ii_427 == 1'd1))) */ begin
		main_lrph5iii_indvar182 = main__crit_edgei10ii_indvarnext183;
	end
end
always @(posedge clk) begin
	if (reset)
		main_lrph5iii_indvar182_reg <= 0;
	/* main: %.lr.ph5.i.i.i*/
	/*   %indvar182 = phi i32 [ %indvar.next183, %._crit_edge.i10.i.i ], [ 0, %.lr.ph5.i.i.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_lrph5iiipreheader_193) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph5iii_indvar182_reg <= main_lrph5iii_indvar182;
		if (start == 1'b0 && ^(main_lrph5iii_indvar182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5iii_indvar182_reg"); $finish; end
	end
	/* main: %.lr.ph5.i.i.i*/
	/*   %indvar182 = phi i32 [ %indvar.next183, %._crit_edge.i10.i.i ], [ 0, %.lr.ph5.i.i.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB__crit_edgei10ii_272) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei10ii_427 == 1'd1))) begin
		main_lrph5iii_indvar182_reg <= main_lrph5iii_indvar182;
		if (start == 1'b0 && ^(main_lrph5iii_indvar182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5iii_indvar182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph5.i.i.i*/
	/*   %ReadBuf.5 = phi i8* [ %ReadBuf.6, %._crit_edge.i10.i.i ], [ %251, %.lr.ph5.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph5iiipreheader_193) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph5iii_ReadBuf5 = main_246_251_reg;
	end
	/* main: %.lr.ph5.i.i.i*/
	/*   %ReadBuf.5 = phi i8* [ %ReadBuf.6, %._crit_edge.i10.i.i ], [ %251, %.lr.ph5.i.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgei10ii_272) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei10ii_427 == 1'd1))) */ begin
		main_lrph5iii_ReadBuf5 = main__crit_edgei10ii_ReadBuf6_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_lrph5iii_ReadBuf5_reg <= 0;
	/* main: %.lr.ph5.i.i.i*/
	/*   %ReadBuf.5 = phi i8* [ %ReadBuf.6, %._crit_edge.i10.i.i ], [ %251, %.lr.ph5.i.i.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_lrph5iiipreheader_193) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph5iii_ReadBuf5_reg <= main_lrph5iii_ReadBuf5;
		if (start == 1'b0 && ^(main_lrph5iii_ReadBuf5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5iii_ReadBuf5_reg"); $finish; end
	end
	/* main: %.lr.ph5.i.i.i*/
	/*   %ReadBuf.5 = phi i8* [ %ReadBuf.6, %._crit_edge.i10.i.i ], [ %251, %.lr.ph5.i.i.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB__crit_edgei10ii_272) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei10ii_427 == 1'd1))) begin
		main_lrph5iii_ReadBuf5_reg <= main_lrph5iii_ReadBuf5;
		if (start == 1'b0 && ^(main_lrph5iii_ReadBuf5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5iii_ReadBuf5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph5.i.i.i*/
	/*   %length.04.i.i.i = phi i32 [ %426, %._crit_edge.i10.i.i ], [ %256, %.lr.ph5.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph5iiipreheader_193) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph5iii_length04iii = main_246_256_reg;
	end
	/* main: %.lr.ph5.i.i.i*/
	/*   %length.04.i.i.i = phi i32 [ %426, %._crit_edge.i10.i.i ], [ %256, %.lr.ph5.i.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgei10ii_272) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei10ii_427 == 1'd1))) */ begin
		main_lrph5iii_length04iii = main__crit_edgei10ii_426;
	end
end
always @(posedge clk) begin
	if (reset)
		main_lrph5iii_length04iii_reg <= 0;
	/* main: %.lr.ph5.i.i.i*/
	/*   %length.04.i.i.i = phi i32 [ %426, %._crit_edge.i10.i.i ], [ %256, %.lr.ph5.i.i.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_lrph5iiipreheader_193) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph5iii_length04iii_reg <= main_lrph5iii_length04iii;
		if (start == 1'b0 && ^(main_lrph5iii_length04iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5iii_length04iii_reg"); $finish; end
	end
	/* main: %.lr.ph5.i.i.i*/
	/*   %length.04.i.i.i = phi i32 [ %426, %._crit_edge.i10.i.i ], [ %256, %.lr.ph5.i.i.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB__crit_edgei10ii_272) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei10ii_427 == 1'd1))) begin
		main_lrph5iii_length04iii_reg <= main_lrph5iii_length04iii;
		if (start == 1'b0 && ^(main_lrph5iii_length04iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5iii_length04iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph5.i.i.i*/
	/*   %265 = add i32 %264, %indvar182*/
		main_lrph5iii_265 = (main_lrph5iiipreheader_264_reg + main_lrph5iii_indvar182_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrph5iii_265_reg <= 0;
	/* main: %.lr.ph5.i.i.i*/
	/*   %265 = add i32 %264, %indvar182*/
	else if((cur_state == LEGUP_F_main_BB_lrph5iii_194)) begin
		main_lrph5iii_265_reg <= main_lrph5iii_265;
		if (start == 1'b0 && ^(main_lrph5iii_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5iii_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph5.i.i.i*/
	/*   %266 = add i32 %i_get_dht.0.ph31, %indvar182*/
		main_lrph5iii_266 = (main_loopexitipreheaderiiouter29_i_get_dht0ph31_reg + main_lrph5iii_indvar182_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrph5iii_266_reg <= 0;
	/* main: %.lr.ph5.i.i.i*/
	/*   %266 = add i32 %i_get_dht.0.ph31, %indvar182*/
	else if((cur_state == LEGUP_F_main_BB_lrph5iii_194)) begin
		main_lrph5iii_266_reg <= main_lrph5iii_266;
		if (start == 1'b0 && ^(main_lrph5iii_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5iii_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph5.i.i.i*/
	/*   %scevgep184 = getelementptr [4 x i32]* @out_count_get_dht, i32 0, i32 %266*/
		main_lrph5iii_scevgep184 = (1'd0 + (4 * main_lrph5iii_266_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrph5iii_scevgep184_reg <= 0;
	/* main: %.lr.ph5.i.i.i*/
	/*   %scevgep184 = getelementptr [4 x i32]* @out_count_get_dht, i32 0, i32 %266*/
	else if((cur_state == LEGUP_F_main_BB_lrph5iii_195)) begin
		main_lrph5iii_scevgep184_reg <= main_lrph5iii_scevgep184;
		if (start == 1'b0 && ^(main_lrph5iii_scevgep184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5iii_scevgep184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph5.i.i.i*/
	/*   %scevgep185 = getelementptr [4 x i32]* @out_index_get_dht, i32 0, i32 %266*/
		main_lrph5iii_scevgep185 = (1'd0 + (4 * main_lrph5iii_266_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrph5iii_scevgep185_reg <= 0;
	/* main: %.lr.ph5.i.i.i*/
	/*   %scevgep185 = getelementptr [4 x i32]* @out_index_get_dht, i32 0, i32 %266*/
	else if((cur_state == LEGUP_F_main_BB_lrph5iii_195)) begin
		main_lrph5iii_scevgep185_reg <= main_lrph5iii_scevgep185;
		if (start == 1'b0 && ^(main_lrph5iii_scevgep185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5iii_scevgep185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph5.i.i.i*/
	/*   %267 = getelementptr inbounds i8* %ReadBuf.5, i32 1*/
		main_lrph5iii_267 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	if (reset)
		main_lrph5iii_267_reg <= 0;
	/* main: %.lr.ph5.i.i.i*/
	/*   %267 = getelementptr inbounds i8* %ReadBuf.5, i32 1*/
	else if((cur_state == LEGUP_F_main_BB_lrph5iii_194)) begin
		main_lrph5iii_267_reg <= main_lrph5iii_267;
		if (start == 1'b0 && ^(main_lrph5iii_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5iii_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph5.i.i.i*/
	/*   %268 = load i8* %ReadBuf.5, align 1, !tbaa !5*/
		main_lrph5iii_268 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_lrph5iii_268_reg <= 0;
	/* main: %.lr.ph5.i.i.i*/
	/*   %268 = load i8* %ReadBuf.5, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_lrph5iii_196)) begin
		main_lrph5iii_268_reg <= main_lrph5iii_268;
		if (start == 1'b0 && ^(main_lrph5iii_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5iii_268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph5.i.i.i*/
	/*   %269 = zext i8 %268 to i32*/
		main_lrph5iii_269 = main_lrph5iii_268;
end
always @(posedge clk) begin
	if (reset)
		main_lrph5iii_269_reg <= 0;
	/* main: %.lr.ph5.i.i.i*/
	/*   %269 = zext i8 %268 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrph5iii_196)) begin
		main_lrph5iii_269_reg <= main_lrph5iii_269;
		if (start == 1'b0 && ^(main_lrph5iii_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5iii_269_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph5.i.i.i*/
	/*   %271 = load i32* %scevgep185, align 4, !tbaa !1*/
		main_lrph5iii_271 = out_index_get_dht_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_lrph5iii_271_reg <= 0;
	/* main: %.lr.ph5.i.i.i*/
	/*   %271 = load i32* %scevgep185, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_lrph5iii_196)) begin
		main_lrph5iii_271_reg <= main_lrph5iii_271;
		if (start == 1'b0 && ^(main_lrph5iii_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5iii_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph5.i.i.i*/
	/*   %272 = icmp eq i32 %269, %271*/
		main_lrph5iii_272 = (main_lrph5iii_269 == main_lrph5iii_271);
end
always @(posedge clk) begin
	if (reset)
		main_lrph5iii_272_reg <= 0;
	/* main: %.lr.ph5.i.i.i*/
	/*   %272 = icmp eq i32 %269, %271*/
	else if((cur_state == LEGUP_F_main_BB_lrph5iii_196)) begin
		main_lrph5iii_272_reg <= main_lrph5iii_272;
		if (start == 1'b0 && ^(main_lrph5iii_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5iii_272_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %273*/
	/*   %274 = load i32* @main_result, align 4, !tbaa !1*/
		main_273_274 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_273_274_reg <= 0;
	/* main: %273*/
	/*   %274 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__273_199)) begin
		main_273_274_reg <= main_273_274;
		if (start == 1'b0 && ^(main_273_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_273_274_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %273*/
	/*   %275 = add nsw i32 %274, 1*/
		main_273_275 = (main_273_274 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_273_275_reg <= 0;
	/* main: %273*/
	/*   %275 = add nsw i32 %274, 1*/
	else if((cur_state == LEGUP_F_main_BB__273_199)) begin
		main_273_275_reg <= main_273_275;
		if (start == 1'b0 && ^(main_273_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_273_275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %276*/
	/*   %277 = and i32 %269, 16*/
		main_276_277 = (main_lrph5iii_269_reg & 32'd16);
end
always @(posedge clk) begin
	if (reset)
		main_276_277_reg <= 0;
	/* main: %276*/
	/*   %277 = and i32 %269, 16*/
	else if((cur_state == LEGUP_F_main_BB__276_201)) begin
		main_276_277_reg <= main_276_277;
		if (start == 1'b0 && ^(main_276_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_276_277_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %276*/
	/*   %278 = icmp eq i32 %277, 0*/
		main_276_278 = (main_276_277 == 32'd0);
end
always @(posedge clk) begin
	if (reset)
		main_276_278_reg <= 0;
	/* main: %276*/
	/*   %278 = icmp eq i32 %277, 0*/
	else if((cur_state == LEGUP_F_main_BB__276_201)) begin
		main_276_278_reg <= main_276_278;
		if (start == 1'b0 && ^(main_276_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_276_278_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %279*/
	/*   %280 = add nsw i32 %269, -16*/
		main_279_280 = (main_lrph5iii_269_reg + -32'd16);
end
always @(posedge clk) begin
	if (reset)
		main_279_280_reg <= 0;
	/* main: %279*/
	/*   %280 = add nsw i32 %269, -16*/
	else if((cur_state == LEGUP_F_main_BB__279_202)) begin
		main_279_280_reg <= main_279_280;
		if (start == 1'b0 && ^(main_279_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_279_280_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %279*/
	/*   %281 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 %280, i32 0*/
		main_279_281 = (`TAG_g_p_jinfo_ac_xhuff_tbl_bits_a + (144 * main_279_280_reg));
end
always @(posedge clk) begin
	if (reset)
		main_279_281_reg <= 0;
	/* main: %279*/
	/*   %281 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 %280, i32 0*/
	else if((cur_state == LEGUP_F_main_BB__279_203)) begin
		main_279_281_reg <= main_279_281;
		if (start == 1'b0 && ^(main_279_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_279_281_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %279*/
	/*   %282 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_ac_xhuff_tbl_huffval, i32 0, i32 %280, i32 0*/
		main_279_282 = (`TAG_g_p_jinfo_ac_xhuff_tbl_huffval_a + (1028 * main_279_280_reg));
end
always @(posedge clk) begin
	if (reset)
		main_279_282_reg <= 0;
	/* main: %279*/
	/*   %282 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_ac_xhuff_tbl_huffval, i32 0, i32 %280, i32 0*/
	else if((cur_state == LEGUP_F_main_BB__279_203)) begin
		main_279_282_reg <= main_279_282;
		if (start == 1'b0 && ^(main_279_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_279_282_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %283*/
	/*   %284 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 %269, i32 0*/
		main_283_284 = (`TAG_g_p_jinfo_dc_xhuff_tbl_bits_a + (144 * main_lrph5iii_269_reg));
end
always @(posedge clk) begin
	if (reset)
		main_283_284_reg <= 0;
	/* main: %283*/
	/*   %284 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 %269, i32 0*/
	else if((cur_state == LEGUP_F_main_BB__283_204)) begin
		main_283_284_reg <= main_283_284;
		if (start == 1'b0 && ^(main_283_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_283_284_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %283*/
	/*   %285 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_dc_xhuff_tbl_huffval, i32 0, i32 %269, i32 0*/
		main_283_285 = (`TAG_g_p_jinfo_dc_xhuff_tbl_huffval_a + (1028 * main_lrph5iii_269_reg));
end
always @(posedge clk) begin
	if (reset)
		main_283_285_reg <= 0;
	/* main: %283*/
	/*   %285 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_dc_xhuff_tbl_huffval, i32 0, i32 %269, i32 0*/
	else if((cur_state == LEGUP_F_main_BB__283_204)) begin
		main_283_285_reg <= main_283_285;
		if (start == 1'b0 && ^(main_283_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_283_285_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %p_xhtbl_bits.0.i.i.i = phi i32* [ %281, %279 ], [ %284, %283 ]*/
	if (((cur_state == LEGUP_F_main_BB__279_203) & (memory_controller_waitrequest == 1'd0))) begin
		main_286_p_xhtbl_bits0iii = main_279_281;
	end
	/* main: %286*/
	/*   %p_xhtbl_bits.0.i.i.i = phi i32* [ %281, %279 ], [ %284, %283 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__283_204) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_286_p_xhtbl_bits0iii = main_283_284;
	end
end
always @(posedge clk) begin
	if (reset)
		main_286_p_xhtbl_bits0iii_reg <= 0;
	/* main: %286*/
	/*   %p_xhtbl_bits.0.i.i.i = phi i32* [ %281, %279 ], [ %284, %283 ]*/
	else if(((cur_state == LEGUP_F_main_BB__279_203) & (memory_controller_waitrequest == 1'd0))) begin
		main_286_p_xhtbl_bits0iii_reg <= main_286_p_xhtbl_bits0iii;
		if (start == 1'b0 && ^(main_286_p_xhtbl_bits0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_p_xhtbl_bits0iii_reg"); $finish; end
	end
	/* main: %286*/
	/*   %p_xhtbl_bits.0.i.i.i = phi i32* [ %281, %279 ], [ %284, %283 ]*/
	else if(((cur_state == LEGUP_F_main_BB__283_204) & (memory_controller_waitrequest == 1'd0))) begin
		main_286_p_xhtbl_bits0iii_reg <= main_286_p_xhtbl_bits0iii;
		if (start == 1'b0 && ^(main_286_p_xhtbl_bits0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_p_xhtbl_bits0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %p_xhtbl_huffval.0.i.i.i = phi i32* [ %282, %279 ], [ %285, %283 ]*/
	if (((cur_state == LEGUP_F_main_BB__279_203) & (memory_controller_waitrequest == 1'd0))) begin
		main_286_p_xhtbl_huffval0iii = main_279_282;
	end
	/* main: %286*/
	/*   %p_xhtbl_huffval.0.i.i.i = phi i32* [ %282, %279 ], [ %285, %283 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__283_204) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_286_p_xhtbl_huffval0iii = main_283_285;
	end
end
always @(posedge clk) begin
	if (reset)
		main_286_p_xhtbl_huffval0iii_reg <= 0;
	/* main: %286*/
	/*   %p_xhtbl_huffval.0.i.i.i = phi i32* [ %282, %279 ], [ %285, %283 ]*/
	else if(((cur_state == LEGUP_F_main_BB__279_203) & (memory_controller_waitrequest == 1'd0))) begin
		main_286_p_xhtbl_huffval0iii_reg <= main_286_p_xhtbl_huffval0iii;
		if (start == 1'b0 && ^(main_286_p_xhtbl_huffval0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_p_xhtbl_huffval0iii_reg"); $finish; end
	end
	/* main: %286*/
	/*   %p_xhtbl_huffval.0.i.i.i = phi i32* [ %282, %279 ], [ %285, %283 ]*/
	else if(((cur_state == LEGUP_F_main_BB__283_204) & (memory_controller_waitrequest == 1'd0))) begin
		main_286_p_xhtbl_huffval0iii_reg <= main_286_p_xhtbl_huffval0iii;
		if (start == 1'b0 && ^(main_286_p_xhtbl_huffval0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_p_xhtbl_huffval0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %287 = getelementptr inbounds i8* %ReadBuf.5, i32 2*/
		main_286_287 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd2));
end
always @(posedge clk) begin
	if (reset)
		main_286_287_reg <= 0;
	/* main: %286*/
	/*   %287 = getelementptr inbounds i8* %ReadBuf.5, i32 2*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_287_reg <= main_286_287;
		if (start == 1'b0 && ^(main_286_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_287_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %288 = load i8* %267, align 1, !tbaa !5*/
		main_286_288 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_286_288_reg <= 0;
	/* main: %286*/
	/*   %288 = load i8* %267, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__286_207)) begin
		main_286_288_reg <= main_286_288;
		if (start == 1'b0 && ^(main_286_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_288_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %289 = zext i8 %288 to i32*/
		main_286_289 = main_286_288;
end
always @(posedge clk) begin
	if (reset)
		main_286_289_reg <= 0;
	/* main: %286*/
	/*   %289 = zext i8 %288 to i32*/
	else if((cur_state == LEGUP_F_main_BB__286_207)) begin
		main_286_289_reg <= main_286_289;
		if (start == 1'b0 && ^(main_286_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_289_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %290 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 1*/
		main_286_290 = (main_286_p_xhtbl_bits0iii_reg + (4 * 32'd1));
end
always @(posedge clk) begin
	if (reset)
		main_286_290_reg <= 0;
	/* main: %286*/
	/*   %290 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 1*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_290_reg <= main_286_290;
		if (start == 1'b0 && ^(main_286_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_290_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %291 = getelementptr inbounds i8* %ReadBuf.5, i32 3*/
		main_286_291 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd3));
end
always @(posedge clk) begin
	if (reset)
		main_286_291_reg <= 0;
	/* main: %286*/
	/*   %291 = getelementptr inbounds i8* %ReadBuf.5, i32 3*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_291_reg <= main_286_291;
		if (start == 1'b0 && ^(main_286_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_291_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %292 = load i8* %287, align 1, !tbaa !5*/
		main_286_292 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_286_292_reg <= 0;
	/* main: %286*/
	/*   %292 = load i8* %287, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__286_210)) begin
		main_286_292_reg <= main_286_292;
		if (start == 1'b0 && ^(main_286_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_292_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %293 = zext i8 %292 to i32*/
		main_286_293 = main_286_292;
end
always @(posedge clk) begin
	if (reset)
		main_286_293_reg <= 0;
	/* main: %286*/
	/*   %293 = zext i8 %292 to i32*/
	else if((cur_state == LEGUP_F_main_BB__286_210)) begin
		main_286_293_reg <= main_286_293;
		if (start == 1'b0 && ^(main_286_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_293_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %294 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 2*/
		main_286_294 = (main_286_p_xhtbl_bits0iii_reg + (4 * 32'd2));
end
always @(posedge clk) begin
	if (reset)
		main_286_294_reg <= 0;
	/* main: %286*/
	/*   %294 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 2*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_294_reg <= main_286_294;
		if (start == 1'b0 && ^(main_286_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_294_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %295 = add nuw nsw i32 %293, %289*/
		main_286_295 = (main_286_293 + main_286_289_reg);
end
always @(posedge clk) begin
	if (reset)
		main_286_295_reg <= 0;
	/* main: %286*/
	/*   %295 = add nuw nsw i32 %293, %289*/
	else if((cur_state == LEGUP_F_main_BB__286_210)) begin
		main_286_295_reg <= main_286_295;
		if (start == 1'b0 && ^(main_286_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_295_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %296 = getelementptr inbounds i8* %ReadBuf.5, i32 4*/
		main_286_296 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd4));
end
always @(posedge clk) begin
	if (reset)
		main_286_296_reg <= 0;
	/* main: %286*/
	/*   %296 = getelementptr inbounds i8* %ReadBuf.5, i32 4*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_296_reg <= main_286_296;
		if (start == 1'b0 && ^(main_286_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_296_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %297 = load i8* %291, align 1, !tbaa !5*/
		main_286_297 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_286_297_reg <= 0;
	/* main: %286*/
	/*   %297 = load i8* %291, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__286_213)) begin
		main_286_297_reg <= main_286_297;
		if (start == 1'b0 && ^(main_286_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_297_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %298 = zext i8 %297 to i32*/
		main_286_298 = main_286_297;
end
always @(posedge clk) begin
	if (reset)
		main_286_298_reg <= 0;
	/* main: %286*/
	/*   %298 = zext i8 %297 to i32*/
	else if((cur_state == LEGUP_F_main_BB__286_213)) begin
		main_286_298_reg <= main_286_298;
		if (start == 1'b0 && ^(main_286_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_298_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %299 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 3*/
		main_286_299 = (main_286_p_xhtbl_bits0iii_reg + (4 * 32'd3));
end
always @(posedge clk) begin
	if (reset)
		main_286_299_reg <= 0;
	/* main: %286*/
	/*   %299 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 3*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_299_reg <= main_286_299;
		if (start == 1'b0 && ^(main_286_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_299_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %300 = add nuw nsw i32 %298, %295*/
		main_286_300 = (main_286_298 + main_286_295_reg);
end
always @(posedge clk) begin
	if (reset)
		main_286_300_reg <= 0;
	/* main: %286*/
	/*   %300 = add nuw nsw i32 %298, %295*/
	else if((cur_state == LEGUP_F_main_BB__286_213)) begin
		main_286_300_reg <= main_286_300;
		if (start == 1'b0 && ^(main_286_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_300_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %301 = getelementptr inbounds i8* %ReadBuf.5, i32 5*/
		main_286_301 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd5));
end
always @(posedge clk) begin
	if (reset)
		main_286_301_reg <= 0;
	/* main: %286*/
	/*   %301 = getelementptr inbounds i8* %ReadBuf.5, i32 5*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_301_reg <= main_286_301;
		if (start == 1'b0 && ^(main_286_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_301_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %302 = load i8* %296, align 1, !tbaa !5*/
		main_286_302 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_286_302_reg <= 0;
	/* main: %286*/
	/*   %302 = load i8* %296, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__286_216)) begin
		main_286_302_reg <= main_286_302;
		if (start == 1'b0 && ^(main_286_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_302_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %303 = zext i8 %302 to i32*/
		main_286_303 = main_286_302;
end
always @(posedge clk) begin
	if (reset)
		main_286_303_reg <= 0;
	/* main: %286*/
	/*   %303 = zext i8 %302 to i32*/
	else if((cur_state == LEGUP_F_main_BB__286_216)) begin
		main_286_303_reg <= main_286_303;
		if (start == 1'b0 && ^(main_286_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_303_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %304 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 4*/
		main_286_304 = (main_286_p_xhtbl_bits0iii_reg + (4 * 32'd4));
end
always @(posedge clk) begin
	if (reset)
		main_286_304_reg <= 0;
	/* main: %286*/
	/*   %304 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 4*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_304_reg <= main_286_304;
		if (start == 1'b0 && ^(main_286_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_304_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %305 = add nuw nsw i32 %303, %300*/
		main_286_305 = (main_286_303 + main_286_300_reg);
end
always @(posedge clk) begin
	if (reset)
		main_286_305_reg <= 0;
	/* main: %286*/
	/*   %305 = add nuw nsw i32 %303, %300*/
	else if((cur_state == LEGUP_F_main_BB__286_216)) begin
		main_286_305_reg <= main_286_305;
		if (start == 1'b0 && ^(main_286_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_305_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %306 = getelementptr inbounds i8* %ReadBuf.5, i32 6*/
		main_286_306 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd6));
end
always @(posedge clk) begin
	if (reset)
		main_286_306_reg <= 0;
	/* main: %286*/
	/*   %306 = getelementptr inbounds i8* %ReadBuf.5, i32 6*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_306_reg <= main_286_306;
		if (start == 1'b0 && ^(main_286_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %307 = load i8* %301, align 1, !tbaa !5*/
		main_286_307 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_286_307_reg <= 0;
	/* main: %286*/
	/*   %307 = load i8* %301, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__286_219)) begin
		main_286_307_reg <= main_286_307;
		if (start == 1'b0 && ^(main_286_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_307_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %308 = zext i8 %307 to i32*/
		main_286_308 = main_286_307;
end
always @(posedge clk) begin
	if (reset)
		main_286_308_reg <= 0;
	/* main: %286*/
	/*   %308 = zext i8 %307 to i32*/
	else if((cur_state == LEGUP_F_main_BB__286_219)) begin
		main_286_308_reg <= main_286_308;
		if (start == 1'b0 && ^(main_286_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_308_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %309 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 5*/
		main_286_309 = (main_286_p_xhtbl_bits0iii_reg + (4 * 32'd5));
end
always @(posedge clk) begin
	if (reset)
		main_286_309_reg <= 0;
	/* main: %286*/
	/*   %309 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 5*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_309_reg <= main_286_309;
		if (start == 1'b0 && ^(main_286_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_309_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %310 = add nuw nsw i32 %308, %305*/
		main_286_310 = (main_286_308 + main_286_305_reg);
end
always @(posedge clk) begin
	if (reset)
		main_286_310_reg <= 0;
	/* main: %286*/
	/*   %310 = add nuw nsw i32 %308, %305*/
	else if((cur_state == LEGUP_F_main_BB__286_219)) begin
		main_286_310_reg <= main_286_310;
		if (start == 1'b0 && ^(main_286_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_310_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %311 = getelementptr inbounds i8* %ReadBuf.5, i32 7*/
		main_286_311 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd7));
end
always @(posedge clk) begin
	if (reset)
		main_286_311_reg <= 0;
	/* main: %286*/
	/*   %311 = getelementptr inbounds i8* %ReadBuf.5, i32 7*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_311_reg <= main_286_311;
		if (start == 1'b0 && ^(main_286_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_311_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %312 = load i8* %306, align 1, !tbaa !5*/
		main_286_312 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_286_312_reg <= 0;
	/* main: %286*/
	/*   %312 = load i8* %306, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__286_222)) begin
		main_286_312_reg <= main_286_312;
		if (start == 1'b0 && ^(main_286_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_312_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %313 = zext i8 %312 to i32*/
		main_286_313 = main_286_312;
end
always @(posedge clk) begin
	if (reset)
		main_286_313_reg <= 0;
	/* main: %286*/
	/*   %313 = zext i8 %312 to i32*/
	else if((cur_state == LEGUP_F_main_BB__286_222)) begin
		main_286_313_reg <= main_286_313;
		if (start == 1'b0 && ^(main_286_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_313_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %314 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 6*/
		main_286_314 = (main_286_p_xhtbl_bits0iii_reg + (4 * 32'd6));
end
always @(posedge clk) begin
	if (reset)
		main_286_314_reg <= 0;
	/* main: %286*/
	/*   %314 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 6*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_314_reg <= main_286_314;
		if (start == 1'b0 && ^(main_286_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_314_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %315 = add nuw nsw i32 %313, %310*/
		main_286_315 = (main_286_313 + main_286_310_reg);
end
always @(posedge clk) begin
	if (reset)
		main_286_315_reg <= 0;
	/* main: %286*/
	/*   %315 = add nuw nsw i32 %313, %310*/
	else if((cur_state == LEGUP_F_main_BB__286_222)) begin
		main_286_315_reg <= main_286_315;
		if (start == 1'b0 && ^(main_286_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_315_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %316 = getelementptr inbounds i8* %ReadBuf.5, i32 8*/
		main_286_316 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd8));
end
always @(posedge clk) begin
	if (reset)
		main_286_316_reg <= 0;
	/* main: %286*/
	/*   %316 = getelementptr inbounds i8* %ReadBuf.5, i32 8*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_316_reg <= main_286_316;
		if (start == 1'b0 && ^(main_286_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_316_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %317 = load i8* %311, align 1, !tbaa !5*/
		main_286_317 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_286_317_reg <= 0;
	/* main: %286*/
	/*   %317 = load i8* %311, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__286_225)) begin
		main_286_317_reg <= main_286_317;
		if (start == 1'b0 && ^(main_286_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_317_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %318 = zext i8 %317 to i32*/
		main_286_318 = main_286_317;
end
always @(posedge clk) begin
	if (reset)
		main_286_318_reg <= 0;
	/* main: %286*/
	/*   %318 = zext i8 %317 to i32*/
	else if((cur_state == LEGUP_F_main_BB__286_225)) begin
		main_286_318_reg <= main_286_318;
		if (start == 1'b0 && ^(main_286_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_318_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %319 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 7*/
		main_286_319 = (main_286_p_xhtbl_bits0iii_reg + (4 * 32'd7));
end
always @(posedge clk) begin
	if (reset)
		main_286_319_reg <= 0;
	/* main: %286*/
	/*   %319 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 7*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_319_reg <= main_286_319;
		if (start == 1'b0 && ^(main_286_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_319_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %320 = add nuw nsw i32 %318, %315*/
		main_286_320 = (main_286_318 + main_286_315_reg);
end
always @(posedge clk) begin
	if (reset)
		main_286_320_reg <= 0;
	/* main: %286*/
	/*   %320 = add nuw nsw i32 %318, %315*/
	else if((cur_state == LEGUP_F_main_BB__286_225)) begin
		main_286_320_reg <= main_286_320;
		if (start == 1'b0 && ^(main_286_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_320_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %321 = getelementptr inbounds i8* %ReadBuf.5, i32 9*/
		main_286_321 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd9));
end
always @(posedge clk) begin
	if (reset)
		main_286_321_reg <= 0;
	/* main: %286*/
	/*   %321 = getelementptr inbounds i8* %ReadBuf.5, i32 9*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_321_reg <= main_286_321;
		if (start == 1'b0 && ^(main_286_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_321_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %322 = load i8* %316, align 1, !tbaa !5*/
		main_286_322 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_286_322_reg <= 0;
	/* main: %286*/
	/*   %322 = load i8* %316, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__286_228)) begin
		main_286_322_reg <= main_286_322;
		if (start == 1'b0 && ^(main_286_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_322_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %323 = zext i8 %322 to i32*/
		main_286_323 = main_286_322;
end
always @(posedge clk) begin
	if (reset)
		main_286_323_reg <= 0;
	/* main: %286*/
	/*   %323 = zext i8 %322 to i32*/
	else if((cur_state == LEGUP_F_main_BB__286_228)) begin
		main_286_323_reg <= main_286_323;
		if (start == 1'b0 && ^(main_286_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_323_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %324 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 8*/
		main_286_324 = (main_286_p_xhtbl_bits0iii_reg + (4 * 32'd8));
end
always @(posedge clk) begin
	if (reset)
		main_286_324_reg <= 0;
	/* main: %286*/
	/*   %324 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 8*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_324_reg <= main_286_324;
		if (start == 1'b0 && ^(main_286_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_324_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %325 = add nsw i32 %323, %320*/
		main_286_325 = (main_286_323 + main_286_320_reg);
end
always @(posedge clk) begin
	if (reset)
		main_286_325_reg <= 0;
	/* main: %286*/
	/*   %325 = add nsw i32 %323, %320*/
	else if((cur_state == LEGUP_F_main_BB__286_228)) begin
		main_286_325_reg <= main_286_325;
		if (start == 1'b0 && ^(main_286_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_325_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %326 = getelementptr inbounds i8* %ReadBuf.5, i32 10*/
		main_286_326 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd10));
end
always @(posedge clk) begin
	if (reset)
		main_286_326_reg <= 0;
	/* main: %286*/
	/*   %326 = getelementptr inbounds i8* %ReadBuf.5, i32 10*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_326_reg <= main_286_326;
		if (start == 1'b0 && ^(main_286_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_326_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %327 = load i8* %321, align 1, !tbaa !5*/
		main_286_327 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_286_327_reg <= 0;
	/* main: %286*/
	/*   %327 = load i8* %321, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__286_231)) begin
		main_286_327_reg <= main_286_327;
		if (start == 1'b0 && ^(main_286_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_327_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %328 = zext i8 %327 to i32*/
		main_286_328 = main_286_327;
end
always @(posedge clk) begin
	if (reset)
		main_286_328_reg <= 0;
	/* main: %286*/
	/*   %328 = zext i8 %327 to i32*/
	else if((cur_state == LEGUP_F_main_BB__286_231)) begin
		main_286_328_reg <= main_286_328;
		if (start == 1'b0 && ^(main_286_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_328_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %329 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 9*/
		main_286_329 = (main_286_p_xhtbl_bits0iii_reg + (4 * 32'd9));
end
always @(posedge clk) begin
	if (reset)
		main_286_329_reg <= 0;
	/* main: %286*/
	/*   %329 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 9*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_329_reg <= main_286_329;
		if (start == 1'b0 && ^(main_286_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_329_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %330 = add nsw i32 %328, %325*/
		main_286_330 = (main_286_328 + main_286_325_reg);
end
always @(posedge clk) begin
	if (reset)
		main_286_330_reg <= 0;
	/* main: %286*/
	/*   %330 = add nsw i32 %328, %325*/
	else if((cur_state == LEGUP_F_main_BB__286_231)) begin
		main_286_330_reg <= main_286_330;
		if (start == 1'b0 && ^(main_286_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_330_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %331 = getelementptr inbounds i8* %ReadBuf.5, i32 11*/
		main_286_331 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd11));
end
always @(posedge clk) begin
	if (reset)
		main_286_331_reg <= 0;
	/* main: %286*/
	/*   %331 = getelementptr inbounds i8* %ReadBuf.5, i32 11*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_331_reg <= main_286_331;
		if (start == 1'b0 && ^(main_286_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_331_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %332 = load i8* %326, align 1, !tbaa !5*/
		main_286_332 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_286_332_reg <= 0;
	/* main: %286*/
	/*   %332 = load i8* %326, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__286_234)) begin
		main_286_332_reg <= main_286_332;
		if (start == 1'b0 && ^(main_286_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_332_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %333 = zext i8 %332 to i32*/
		main_286_333 = main_286_332;
end
always @(posedge clk) begin
	if (reset)
		main_286_333_reg <= 0;
	/* main: %286*/
	/*   %333 = zext i8 %332 to i32*/
	else if((cur_state == LEGUP_F_main_BB__286_234)) begin
		main_286_333_reg <= main_286_333;
		if (start == 1'b0 && ^(main_286_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_333_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %334 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 10*/
		main_286_334 = (main_286_p_xhtbl_bits0iii_reg + (4 * 32'd10));
end
always @(posedge clk) begin
	if (reset)
		main_286_334_reg <= 0;
	/* main: %286*/
	/*   %334 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 10*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_334_reg <= main_286_334;
		if (start == 1'b0 && ^(main_286_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_334_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %335 = add nsw i32 %333, %330*/
		main_286_335 = (main_286_333 + main_286_330_reg);
end
always @(posedge clk) begin
	if (reset)
		main_286_335_reg <= 0;
	/* main: %286*/
	/*   %335 = add nsw i32 %333, %330*/
	else if((cur_state == LEGUP_F_main_BB__286_234)) begin
		main_286_335_reg <= main_286_335;
		if (start == 1'b0 && ^(main_286_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_335_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %336 = getelementptr inbounds i8* %ReadBuf.5, i32 12*/
		main_286_336 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd12));
end
always @(posedge clk) begin
	if (reset)
		main_286_336_reg <= 0;
	/* main: %286*/
	/*   %336 = getelementptr inbounds i8* %ReadBuf.5, i32 12*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_336_reg <= main_286_336;
		if (start == 1'b0 && ^(main_286_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_336_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %337 = load i8* %331, align 1, !tbaa !5*/
		main_286_337 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_286_337_reg <= 0;
	/* main: %286*/
	/*   %337 = load i8* %331, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__286_237)) begin
		main_286_337_reg <= main_286_337;
		if (start == 1'b0 && ^(main_286_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_337_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %338 = zext i8 %337 to i32*/
		main_286_338 = main_286_337;
end
always @(posedge clk) begin
	if (reset)
		main_286_338_reg <= 0;
	/* main: %286*/
	/*   %338 = zext i8 %337 to i32*/
	else if((cur_state == LEGUP_F_main_BB__286_237)) begin
		main_286_338_reg <= main_286_338;
		if (start == 1'b0 && ^(main_286_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_338_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %339 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 11*/
		main_286_339 = (main_286_p_xhtbl_bits0iii_reg + (4 * 32'd11));
end
always @(posedge clk) begin
	if (reset)
		main_286_339_reg <= 0;
	/* main: %286*/
	/*   %339 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 11*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_339_reg <= main_286_339;
		if (start == 1'b0 && ^(main_286_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_339_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %340 = add nsw i32 %338, %335*/
		main_286_340 = (main_286_338 + main_286_335_reg);
end
always @(posedge clk) begin
	if (reset)
		main_286_340_reg <= 0;
	/* main: %286*/
	/*   %340 = add nsw i32 %338, %335*/
	else if((cur_state == LEGUP_F_main_BB__286_237)) begin
		main_286_340_reg <= main_286_340;
		if (start == 1'b0 && ^(main_286_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_340_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %341 = getelementptr inbounds i8* %ReadBuf.5, i32 13*/
		main_286_341 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd13));
end
always @(posedge clk) begin
	if (reset)
		main_286_341_reg <= 0;
	/* main: %286*/
	/*   %341 = getelementptr inbounds i8* %ReadBuf.5, i32 13*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_341_reg <= main_286_341;
		if (start == 1'b0 && ^(main_286_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_341_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %342 = load i8* %336, align 1, !tbaa !5*/
		main_286_342 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_286_342_reg <= 0;
	/* main: %286*/
	/*   %342 = load i8* %336, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__286_240)) begin
		main_286_342_reg <= main_286_342;
		if (start == 1'b0 && ^(main_286_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_342_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %343 = zext i8 %342 to i32*/
		main_286_343 = main_286_342;
end
always @(posedge clk) begin
	if (reset)
		main_286_343_reg <= 0;
	/* main: %286*/
	/*   %343 = zext i8 %342 to i32*/
	else if((cur_state == LEGUP_F_main_BB__286_240)) begin
		main_286_343_reg <= main_286_343;
		if (start == 1'b0 && ^(main_286_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_343_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %344 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 12*/
		main_286_344 = (main_286_p_xhtbl_bits0iii_reg + (4 * 32'd12));
end
always @(posedge clk) begin
	if (reset)
		main_286_344_reg <= 0;
	/* main: %286*/
	/*   %344 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 12*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_344_reg <= main_286_344;
		if (start == 1'b0 && ^(main_286_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_344_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %345 = add nsw i32 %343, %340*/
		main_286_345 = (main_286_343 + main_286_340_reg);
end
always @(posedge clk) begin
	if (reset)
		main_286_345_reg <= 0;
	/* main: %286*/
	/*   %345 = add nsw i32 %343, %340*/
	else if((cur_state == LEGUP_F_main_BB__286_240)) begin
		main_286_345_reg <= main_286_345;
		if (start == 1'b0 && ^(main_286_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_345_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %346 = getelementptr inbounds i8* %ReadBuf.5, i32 14*/
		main_286_346 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd14));
end
always @(posedge clk) begin
	if (reset)
		main_286_346_reg <= 0;
	/* main: %286*/
	/*   %346 = getelementptr inbounds i8* %ReadBuf.5, i32 14*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_346_reg <= main_286_346;
		if (start == 1'b0 && ^(main_286_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_346_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %347 = load i8* %341, align 1, !tbaa !5*/
		main_286_347 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_286_347_reg <= 0;
	/* main: %286*/
	/*   %347 = load i8* %341, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__286_243)) begin
		main_286_347_reg <= main_286_347;
		if (start == 1'b0 && ^(main_286_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_347_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %348 = zext i8 %347 to i32*/
		main_286_348 = main_286_347;
end
always @(posedge clk) begin
	if (reset)
		main_286_348_reg <= 0;
	/* main: %286*/
	/*   %348 = zext i8 %347 to i32*/
	else if((cur_state == LEGUP_F_main_BB__286_243)) begin
		main_286_348_reg <= main_286_348;
		if (start == 1'b0 && ^(main_286_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_348_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %349 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 13*/
		main_286_349 = (main_286_p_xhtbl_bits0iii_reg + (4 * 32'd13));
end
always @(posedge clk) begin
	if (reset)
		main_286_349_reg <= 0;
	/* main: %286*/
	/*   %349 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 13*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_349_reg <= main_286_349;
		if (start == 1'b0 && ^(main_286_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_349_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %350 = add nsw i32 %348, %345*/
		main_286_350 = (main_286_348 + main_286_345_reg);
end
always @(posedge clk) begin
	if (reset)
		main_286_350_reg <= 0;
	/* main: %286*/
	/*   %350 = add nsw i32 %348, %345*/
	else if((cur_state == LEGUP_F_main_BB__286_243)) begin
		main_286_350_reg <= main_286_350;
		if (start == 1'b0 && ^(main_286_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_350_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %351 = getelementptr inbounds i8* %ReadBuf.5, i32 15*/
		main_286_351 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd15));
end
always @(posedge clk) begin
	if (reset)
		main_286_351_reg <= 0;
	/* main: %286*/
	/*   %351 = getelementptr inbounds i8* %ReadBuf.5, i32 15*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_351_reg <= main_286_351;
		if (start == 1'b0 && ^(main_286_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_351_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %352 = load i8* %346, align 1, !tbaa !5*/
		main_286_352 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_286_352_reg <= 0;
	/* main: %286*/
	/*   %352 = load i8* %346, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__286_246)) begin
		main_286_352_reg <= main_286_352;
		if (start == 1'b0 && ^(main_286_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_352_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %353 = zext i8 %352 to i32*/
		main_286_353 = main_286_352;
end
always @(posedge clk) begin
	if (reset)
		main_286_353_reg <= 0;
	/* main: %286*/
	/*   %353 = zext i8 %352 to i32*/
	else if((cur_state == LEGUP_F_main_BB__286_246)) begin
		main_286_353_reg <= main_286_353;
		if (start == 1'b0 && ^(main_286_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_353_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %354 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 14*/
		main_286_354 = (main_286_p_xhtbl_bits0iii_reg + (4 * 32'd14));
end
always @(posedge clk) begin
	if (reset)
		main_286_354_reg <= 0;
	/* main: %286*/
	/*   %354 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 14*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_354_reg <= main_286_354;
		if (start == 1'b0 && ^(main_286_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_354_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %355 = add nsw i32 %353, %350*/
		main_286_355 = (main_286_353 + main_286_350_reg);
end
always @(posedge clk) begin
	if (reset)
		main_286_355_reg <= 0;
	/* main: %286*/
	/*   %355 = add nsw i32 %353, %350*/
	else if((cur_state == LEGUP_F_main_BB__286_246)) begin
		main_286_355_reg <= main_286_355;
		if (start == 1'b0 && ^(main_286_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_355_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %356 = getelementptr inbounds i8* %ReadBuf.5, i32 16*/
		main_286_356 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd16));
end
always @(posedge clk) begin
	if (reset)
		main_286_356_reg <= 0;
	/* main: %286*/
	/*   %356 = getelementptr inbounds i8* %ReadBuf.5, i32 16*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_356_reg <= main_286_356;
		if (start == 1'b0 && ^(main_286_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_356_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %357 = load i8* %351, align 1, !tbaa !5*/
		main_286_357 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_286_357_reg <= 0;
	/* main: %286*/
	/*   %357 = load i8* %351, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__286_249)) begin
		main_286_357_reg <= main_286_357;
		if (start == 1'b0 && ^(main_286_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_357_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %358 = zext i8 %357 to i32*/
		main_286_358 = main_286_357;
end
always @(posedge clk) begin
	if (reset)
		main_286_358_reg <= 0;
	/* main: %286*/
	/*   %358 = zext i8 %357 to i32*/
	else if((cur_state == LEGUP_F_main_BB__286_249)) begin
		main_286_358_reg <= main_286_358;
		if (start == 1'b0 && ^(main_286_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_358_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %359 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 15*/
		main_286_359 = (main_286_p_xhtbl_bits0iii_reg + (4 * 32'd15));
end
always @(posedge clk) begin
	if (reset)
		main_286_359_reg <= 0;
	/* main: %286*/
	/*   %359 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 15*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_359_reg <= main_286_359;
		if (start == 1'b0 && ^(main_286_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_359_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %360 = add nsw i32 %358, %355*/
		main_286_360 = (main_286_358 + main_286_355_reg);
end
always @(posedge clk) begin
	if (reset)
		main_286_360_reg <= 0;
	/* main: %286*/
	/*   %360 = add nsw i32 %358, %355*/
	else if((cur_state == LEGUP_F_main_BB__286_249)) begin
		main_286_360_reg <= main_286_360;
		if (start == 1'b0 && ^(main_286_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_360_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %361 = getelementptr inbounds i8* %ReadBuf.5, i32 17*/
		main_286_361 = (main_lrph5iii_ReadBuf5_reg + (1 * 32'd17));
end
always @(posedge clk) begin
	if (reset)
		main_286_361_reg <= 0;
	/* main: %286*/
	/*   %361 = getelementptr inbounds i8* %ReadBuf.5, i32 17*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_361_reg <= main_286_361;
		if (start == 1'b0 && ^(main_286_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_361_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %362 = load i8* %356, align 1, !tbaa !5*/
		main_286_362 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_286_362_reg <= 0;
	/* main: %286*/
	/*   %362 = load i8* %356, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__286_252)) begin
		main_286_362_reg <= main_286_362;
		if (start == 1'b0 && ^(main_286_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_362_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %363 = zext i8 %362 to i32*/
		main_286_363 = main_286_362;
end
always @(posedge clk) begin
	if (reset)
		main_286_363_reg <= 0;
	/* main: %286*/
	/*   %363 = zext i8 %362 to i32*/
	else if((cur_state == LEGUP_F_main_BB__286_252)) begin
		main_286_363_reg <= main_286_363;
		if (start == 1'b0 && ^(main_286_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_363_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %364 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 16*/
		main_286_364 = (main_286_p_xhtbl_bits0iii_reg + (4 * 32'd16));
end
always @(posedge clk) begin
	if (reset)
		main_286_364_reg <= 0;
	/* main: %286*/
	/*   %364 = getelementptr inbounds i32* %p_xhtbl_bits.0.i.i.i, i32 16*/
	else if((cur_state == LEGUP_F_main_BB__286_205)) begin
		main_286_364_reg <= main_286_364;
		if (start == 1'b0 && ^(main_286_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_364_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %365 = add nsw i32 %363, %360*/
		main_286_365 = (main_286_363 + main_286_360_reg);
end
always @(posedge clk) begin
	if (reset)
		main_286_365_reg <= 0;
	/* main: %286*/
	/*   %365 = add nsw i32 %363, %360*/
	else if((cur_state == LEGUP_F_main_BB__286_252)) begin
		main_286_365_reg <= main_286_365;
		if (start == 1'b0 && ^(main_286_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_365_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %367 = load i32* %scevgep184, align 4, !tbaa !1*/
		main_286_367 = out_count_get_dht_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_286_367_reg <= 0;
	/* main: %286*/
	/*   %367 = load i32* %scevgep184, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__286_206)) begin
		main_286_367_reg <= main_286_367;
		if (start == 1'b0 && ^(main_286_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_367_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %286*/
	/*   %368 = icmp eq i32 %365, %367*/
		main_286_368 = (main_286_365 == main_286_367_reg);
end
always @(posedge clk) begin
	if (reset)
		main_286_368_reg <= 0;
	/* main: %286*/
	/*   %368 = icmp eq i32 %365, %367*/
	else if((cur_state == LEGUP_F_main_BB__286_252)) begin
		main_286_368_reg <= main_286_368;
		if (start == 1'b0 && ^(main_286_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_368_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %369*/
	/*   %370 = load i32* @main_result, align 4, !tbaa !1*/
		main_369_370 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_369_370_reg <= 0;
	/* main: %369*/
	/*   %370 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__369_256)) begin
		main_369_370_reg <= main_369_370;
		if (start == 1'b0 && ^(main_369_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_369_370_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %369*/
	/*   %371 = add nsw i32 %370, 1*/
		main_369_371 = (main_369_370 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_369_371_reg <= 0;
	/* main: %369*/
	/*   %371 = add nsw i32 %370, 1*/
	else if((cur_state == LEGUP_F_main_BB__369_256)) begin
		main_369_371_reg <= main_369_371;
		if (start == 1'b0 && ^(main_369_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_369_371_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %372*/
	/*   %373 = add nsw i32 %length.04.i.i.i, -17*/
		main_372_373 = (main_lrph5iii_length04iii_reg + -32'd17);
end
always @(posedge clk) begin
	if (reset)
		main_372_373_reg <= 0;
	/* main: %372*/
	/*   %373 = add nsw i32 %length.04.i.i.i, -17*/
	else if((cur_state == LEGUP_F_main_BB__372_258)) begin
		main_372_373_reg <= main_372_373;
		if (start == 1'b0 && ^(main_372_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_372_373_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %372*/
	/*   %374 = icmp sgt i32 %365, 0*/
		main_372_374 = ($signed(main_286_365_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_372_374_reg <= 0;
	/* main: %372*/
	/*   %374 = icmp sgt i32 %365, 0*/
	else if((cur_state == LEGUP_F_main_BB__372_258)) begin
		main_372_374_reg <= main_372_374;
		if (start == 1'b0 && ^(main_372_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_372_374_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %375 = add nuw nsw i32 %363, %358*/
		main_lrphi8ii_375 = (main_286_363_reg + main_286_358_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_375_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %375 = add nuw nsw i32 %363, %358*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_375_reg <= main_lrphi8ii_375;
		if (start == 1'b0 && ^(main_lrphi8ii_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_375_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %376 = add nuw nsw i32 %375, %353*/
		main_lrphi8ii_376 = (main_lrphi8ii_375 + main_286_353_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_376_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %376 = add nuw nsw i32 %375, %353*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_376_reg <= main_lrphi8ii_376;
		if (start == 1'b0 && ^(main_lrphi8ii_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_376_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %377 = add nuw nsw i32 %376, %348*/
		main_lrphi8ii_377 = (main_lrphi8ii_376 + main_286_348_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_377_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %377 = add nuw nsw i32 %376, %348*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_377_reg <= main_lrphi8ii_377;
		if (start == 1'b0 && ^(main_lrphi8ii_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_377_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %378 = add nuw nsw i32 %377, %343*/
		main_lrphi8ii_378 = (main_lrphi8ii_377_reg + main_286_343_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_378_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %378 = add nuw nsw i32 %377, %343*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_260)) begin
		main_lrphi8ii_378_reg <= main_lrphi8ii_378;
		if (start == 1'b0 && ^(main_lrphi8ii_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_378_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %379 = add nuw nsw i32 %378, %338*/
		main_lrphi8ii_379 = (main_lrphi8ii_378 + main_286_338_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_379_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %379 = add nuw nsw i32 %378, %338*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_260)) begin
		main_lrphi8ii_379_reg <= main_lrphi8ii_379;
		if (start == 1'b0 && ^(main_lrphi8ii_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_379_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %380 = add nuw nsw i32 %379, %333*/
		main_lrphi8ii_380 = (main_lrphi8ii_379 + main_286_333_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_380_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %380 = add nuw nsw i32 %379, %333*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_260)) begin
		main_lrphi8ii_380_reg <= main_lrphi8ii_380;
		if (start == 1'b0 && ^(main_lrphi8ii_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_380_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %381 = add i32 %380, %328*/
		main_lrphi8ii_381 = (main_lrphi8ii_380_reg + main_286_328_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_381_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %381 = add i32 %380, %328*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_261)) begin
		main_lrphi8ii_381_reg <= main_lrphi8ii_381;
		if (start == 1'b0 && ^(main_lrphi8ii_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_381_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %382 = add i32 %381, %323*/
		main_lrphi8ii_382 = (main_lrphi8ii_381 + main_286_323_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_382_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %382 = add i32 %381, %323*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_261)) begin
		main_lrphi8ii_382_reg <= main_lrphi8ii_382;
		if (start == 1'b0 && ^(main_lrphi8ii_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_382_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %383 = add i32 %382, %318*/
		main_lrphi8ii_383 = (main_lrphi8ii_382 + main_286_318_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_383_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %383 = add i32 %382, %318*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_261)) begin
		main_lrphi8ii_383_reg <= main_lrphi8ii_383;
		if (start == 1'b0 && ^(main_lrphi8ii_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_383_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %384 = add i32 %383, %313*/
		main_lrphi8ii_384 = (main_lrphi8ii_383_reg + main_286_313_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_384_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %384 = add i32 %383, %313*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_262)) begin
		main_lrphi8ii_384_reg <= main_lrphi8ii_384;
		if (start == 1'b0 && ^(main_lrphi8ii_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_384_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %385 = add i32 %384, %308*/
		main_lrphi8ii_385 = (main_lrphi8ii_384 + main_286_308_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_385_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %385 = add i32 %384, %308*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_262)) begin
		main_lrphi8ii_385_reg <= main_lrphi8ii_385;
		if (start == 1'b0 && ^(main_lrphi8ii_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_385_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %386 = add i32 %385, %303*/
		main_lrphi8ii_386 = (main_lrphi8ii_385 + main_286_303_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_386_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %386 = add i32 %385, %303*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_262)) begin
		main_lrphi8ii_386_reg <= main_lrphi8ii_386;
		if (start == 1'b0 && ^(main_lrphi8ii_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_386_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %387 = zext i8 %292 to i32*/
		main_lrphi8ii_387 = main_286_292_reg;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_387_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %387 = zext i8 %292 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_387_reg <= main_lrphi8ii_387;
		if (start == 1'b0 && ^(main_lrphi8ii_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_387_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %388 = zext i8 %288 to i32*/
		main_lrphi8ii_388 = main_286_288_reg;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_388_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %388 = zext i8 %288 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_388_reg <= main_lrphi8ii_388;
		if (start == 1'b0 && ^(main_lrphi8ii_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_388_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %389 = add nuw nsw i32 %387, %388*/
		main_lrphi8ii_389 = (main_lrphi8ii_387 + main_lrphi8ii_388);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_389_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %389 = add nuw nsw i32 %387, %388*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_389_reg <= main_lrphi8ii_389;
		if (start == 1'b0 && ^(main_lrphi8ii_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_389_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %390 = zext i8 %297 to i32*/
		main_lrphi8ii_390 = main_286_297_reg;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_390_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %390 = zext i8 %297 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_390_reg <= main_lrphi8ii_390;
		if (start == 1'b0 && ^(main_lrphi8ii_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_390_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %391 = add nuw nsw i32 %389, %390*/
		main_lrphi8ii_391 = (main_lrphi8ii_389 + main_lrphi8ii_390);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_391_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %391 = add nuw nsw i32 %389, %390*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_391_reg <= main_lrphi8ii_391;
		if (start == 1'b0 && ^(main_lrphi8ii_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_391_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %392 = zext i8 %302 to i32*/
		main_lrphi8ii_392 = main_286_302_reg;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_392_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %392 = zext i8 %302 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_392_reg <= main_lrphi8ii_392;
		if (start == 1'b0 && ^(main_lrphi8ii_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_392_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %393 = add nuw nsw i32 %391, %392*/
		main_lrphi8ii_393 = (main_lrphi8ii_391 + main_lrphi8ii_392);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_393_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %393 = add nuw nsw i32 %391, %392*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_393_reg <= main_lrphi8ii_393;
		if (start == 1'b0 && ^(main_lrphi8ii_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_393_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %394 = zext i8 %307 to i32*/
		main_lrphi8ii_394 = main_286_307_reg;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_394_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %394 = zext i8 %307 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_394_reg <= main_lrphi8ii_394;
		if (start == 1'b0 && ^(main_lrphi8ii_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_394_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %395 = add nuw nsw i32 %393, %394*/
		main_lrphi8ii_395 = (main_lrphi8ii_393_reg + main_lrphi8ii_394_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_395_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %395 = add nuw nsw i32 %393, %394*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_260)) begin
		main_lrphi8ii_395_reg <= main_lrphi8ii_395;
		if (start == 1'b0 && ^(main_lrphi8ii_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_395_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %396 = zext i8 %312 to i32*/
		main_lrphi8ii_396 = main_286_312_reg;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_396_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %396 = zext i8 %312 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_396_reg <= main_lrphi8ii_396;
		if (start == 1'b0 && ^(main_lrphi8ii_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_396_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %397 = add nuw nsw i32 %395, %396*/
		main_lrphi8ii_397 = (main_lrphi8ii_395 + main_lrphi8ii_396_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_397_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %397 = add nuw nsw i32 %395, %396*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_260)) begin
		main_lrphi8ii_397_reg <= main_lrphi8ii_397;
		if (start == 1'b0 && ^(main_lrphi8ii_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_397_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %398 = zext i8 %317 to i32*/
		main_lrphi8ii_398 = main_286_317_reg;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_398_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %398 = zext i8 %317 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_398_reg <= main_lrphi8ii_398;
		if (start == 1'b0 && ^(main_lrphi8ii_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_398_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %399 = add nuw nsw i32 %397, %398*/
		main_lrphi8ii_399 = (main_lrphi8ii_397 + main_lrphi8ii_398_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_399_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %399 = add nuw nsw i32 %397, %398*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_260)) begin
		main_lrphi8ii_399_reg <= main_lrphi8ii_399;
		if (start == 1'b0 && ^(main_lrphi8ii_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_399_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %400 = zext i8 %322 to i32*/
		main_lrphi8ii_400 = main_286_322_reg;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_400_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %400 = zext i8 %322 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_400_reg <= main_lrphi8ii_400;
		if (start == 1'b0 && ^(main_lrphi8ii_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_400_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %401 = add i32 %399, %400*/
		main_lrphi8ii_401 = (main_lrphi8ii_399_reg + main_lrphi8ii_400_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_401_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %401 = add i32 %399, %400*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_261)) begin
		main_lrphi8ii_401_reg <= main_lrphi8ii_401;
		if (start == 1'b0 && ^(main_lrphi8ii_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_401_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %402 = zext i8 %327 to i32*/
		main_lrphi8ii_402 = main_286_327_reg;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_402_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %402 = zext i8 %327 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_402_reg <= main_lrphi8ii_402;
		if (start == 1'b0 && ^(main_lrphi8ii_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_402_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %403 = add i32 %401, %402*/
		main_lrphi8ii_403 = (main_lrphi8ii_401 + main_lrphi8ii_402_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_403_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %403 = add i32 %401, %402*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_261)) begin
		main_lrphi8ii_403_reg <= main_lrphi8ii_403;
		if (start == 1'b0 && ^(main_lrphi8ii_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_403_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %404 = zext i8 %332 to i32*/
		main_lrphi8ii_404 = main_286_332_reg;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_404_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %404 = zext i8 %332 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_404_reg <= main_lrphi8ii_404;
		if (start == 1'b0 && ^(main_lrphi8ii_404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_404_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %405 = add i32 %403, %404*/
		main_lrphi8ii_405 = (main_lrphi8ii_403 + main_lrphi8ii_404_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_405_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %405 = add i32 %403, %404*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_261)) begin
		main_lrphi8ii_405_reg <= main_lrphi8ii_405;
		if (start == 1'b0 && ^(main_lrphi8ii_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_405_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %406 = zext i8 %337 to i32*/
		main_lrphi8ii_406 = main_286_337_reg;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_406_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %406 = zext i8 %337 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_406_reg <= main_lrphi8ii_406;
		if (start == 1'b0 && ^(main_lrphi8ii_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_406_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %407 = add i32 %405, %406*/
		main_lrphi8ii_407 = (main_lrphi8ii_405_reg + main_lrphi8ii_406_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_407_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %407 = add i32 %405, %406*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_262)) begin
		main_lrphi8ii_407_reg <= main_lrphi8ii_407;
		if (start == 1'b0 && ^(main_lrphi8ii_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_407_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %408 = zext i8 %342 to i32*/
		main_lrphi8ii_408 = main_286_342_reg;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_408_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %408 = zext i8 %342 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_408_reg <= main_lrphi8ii_408;
		if (start == 1'b0 && ^(main_lrphi8ii_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_408_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %409 = add i32 %407, %408*/
		main_lrphi8ii_409 = (main_lrphi8ii_407 + main_lrphi8ii_408_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_409_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %409 = add i32 %407, %408*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_262)) begin
		main_lrphi8ii_409_reg <= main_lrphi8ii_409;
		if (start == 1'b0 && ^(main_lrphi8ii_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_409_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %410 = zext i8 %347 to i32*/
		main_lrphi8ii_410 = main_286_347_reg;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_410_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %410 = zext i8 %347 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_410_reg <= main_lrphi8ii_410;
		if (start == 1'b0 && ^(main_lrphi8ii_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_410_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %411 = add i32 %409, %410*/
		main_lrphi8ii_411 = (main_lrphi8ii_409 + main_lrphi8ii_410_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_411_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %411 = add i32 %409, %410*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_262)) begin
		main_lrphi8ii_411_reg <= main_lrphi8ii_411;
		if (start == 1'b0 && ^(main_lrphi8ii_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_411_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %412 = zext i8 %352 to i32*/
		main_lrphi8ii_412 = main_286_352_reg;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_412_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %412 = zext i8 %352 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_412_reg <= main_lrphi8ii_412;
		if (start == 1'b0 && ^(main_lrphi8ii_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_412_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %413 = add i32 %411, %412*/
		main_lrphi8ii_413 = (main_lrphi8ii_411_reg + main_lrphi8ii_412_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_413_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %413 = add i32 %411, %412*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_263)) begin
		main_lrphi8ii_413_reg <= main_lrphi8ii_413;
		if (start == 1'b0 && ^(main_lrphi8ii_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_413_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %414 = zext i8 %357 to i32*/
		main_lrphi8ii_414 = main_286_357_reg;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_414_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %414 = zext i8 %357 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_414_reg <= main_lrphi8ii_414;
		if (start == 1'b0 && ^(main_lrphi8ii_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_414_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %415 = add i32 %413, %414*/
		main_lrphi8ii_415 = (main_lrphi8ii_413 + main_lrphi8ii_414_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_415_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %415 = add i32 %413, %414*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_263)) begin
		main_lrphi8ii_415_reg <= main_lrphi8ii_415;
		if (start == 1'b0 && ^(main_lrphi8ii_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_415_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %416 = zext i8 %362 to i32*/
		main_lrphi8ii_416 = main_286_362_reg;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_416_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %416 = zext i8 %362 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_259)) begin
		main_lrphi8ii_416_reg <= main_lrphi8ii_416;
		if (start == 1'b0 && ^(main_lrphi8ii_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_416_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %417 = add i32 %415, %416*/
		main_lrphi8ii_417 = (main_lrphi8ii_415 + main_lrphi8ii_416_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi8ii_417_reg <= 0;
	/* main: %.lr.ph.i8.i.i*/
	/*   %417 = add i32 %415, %416*/
	else if((cur_state == LEGUP_F_main_BB_lrphi8ii_263)) begin
		main_lrphi8ii_417_reg <= main_lrphi8ii_417;
		if (start == 1'b0 && ^(main_lrphi8ii_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_417_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %418*/
	/*   %i.13.i.i.i = phi i32 [ 0, %.lr.ph.i8.i.i ], [ %422, %418 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi8ii_263) & (memory_controller_waitrequest == 1'd0))) begin
		main_418_i13iii = 32'd0;
	end
	/* main: %418*/
	/*   %i.13.i.i.i = phi i32 [ 0, %.lr.ph.i8.i.i ], [ %422, %418 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__418_268) & (memory_controller_waitrequest == 1'd0)) & (main_418_exitcond179_reg == 1'd0))) */ begin
		main_418_i13iii = main_418_422_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_418_i13iii_reg <= 0;
	/* main: %418*/
	/*   %i.13.i.i.i = phi i32 [ 0, %.lr.ph.i8.i.i ], [ %422, %418 ]*/
	else if(((cur_state == LEGUP_F_main_BB_lrphi8ii_263) & (memory_controller_waitrequest == 1'd0))) begin
		main_418_i13iii_reg <= main_418_i13iii;
		if (start == 1'b0 && ^(main_418_i13iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_418_i13iii_reg"); $finish; end
	end
	/* main: %418*/
	/*   %i.13.i.i.i = phi i32 [ 0, %.lr.ph.i8.i.i ], [ %422, %418 ]*/
	else if((((cur_state == LEGUP_F_main_BB__418_268) & (memory_controller_waitrequest == 1'd0)) & (main_418_exitcond179_reg == 1'd0))) begin
		main_418_i13iii_reg <= main_418_i13iii;
		if (start == 1'b0 && ^(main_418_i13iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_418_i13iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %418*/
	/*   %419 = add i32 %i.13.i.i.i, 17*/
		main_418_419 = (main_418_i13iii_reg + 32'd17);
end
always @(posedge clk) begin
	if (reset)
		main_418_419_reg <= 0;
	/* main: %418*/
	/*   %419 = add i32 %i.13.i.i.i, 17*/
	else if((cur_state == LEGUP_F_main_BB__418_264)) begin
		main_418_419_reg <= main_418_419;
		if (start == 1'b0 && ^(main_418_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_418_419_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %418*/
	/*   %scevgep180 = getelementptr i8* %ReadBuf.5, i32 %419*/
		main_418_scevgep180 = (main_lrph5iii_ReadBuf5_reg + (1 * main_418_419_reg));
end
always @(posedge clk) begin
	if (reset)
		main_418_scevgep180_reg <= 0;
	/* main: %418*/
	/*   %scevgep180 = getelementptr i8* %ReadBuf.5, i32 %419*/
	else if((cur_state == LEGUP_F_main_BB__418_265)) begin
		main_418_scevgep180_reg <= main_418_scevgep180;
		if (start == 1'b0 && ^(main_418_scevgep180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_418_scevgep180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %418*/
	/*   %scevgep181 = getelementptr i32* %p_xhtbl_huffval.0.i.i.i, i32 %i.13.i.i.i*/
		main_418_scevgep181 = (main_286_p_xhtbl_huffval0iii_reg + (4 * main_418_i13iii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_418_scevgep181_reg <= 0;
	/* main: %418*/
	/*   %scevgep181 = getelementptr i32* %p_xhtbl_huffval.0.i.i.i, i32 %i.13.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB__418_264)) begin
		main_418_scevgep181_reg <= main_418_scevgep181;
		if (start == 1'b0 && ^(main_418_scevgep181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_418_scevgep181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %418*/
	/*   %420 = load i8* %scevgep180, align 1, !tbaa !5*/
		main_418_420 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_418_420_reg <= 0;
	/* main: %418*/
	/*   %420 = load i8* %scevgep180, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__418_267)) begin
		main_418_420_reg <= main_418_420;
		if (start == 1'b0 && ^(main_418_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_418_420_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %418*/
	/*   %421 = zext i8 %420 to i32*/
		main_418_421 = main_418_420;
end
always @(posedge clk) begin
	if (reset)
		main_418_421_reg <= 0;
	/* main: %418*/
	/*   %421 = zext i8 %420 to i32*/
	else if((cur_state == LEGUP_F_main_BB__418_267)) begin
		main_418_421_reg <= main_418_421;
		if (start == 1'b0 && ^(main_418_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_418_421_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %418*/
	/*   %422 = add nsw i32 %i.13.i.i.i, 1*/
		main_418_422 = (main_418_i13iii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_418_422_reg <= 0;
	/* main: %418*/
	/*   %422 = add nsw i32 %i.13.i.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__418_264)) begin
		main_418_422_reg <= main_418_422;
		if (start == 1'b0 && ^(main_418_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_418_422_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %418*/
	/*   %exitcond179 = icmp eq i32 %422, %417*/
		main_418_exitcond179 = (main_418_422 == main_lrphi8ii_417_reg);
end
always @(posedge clk) begin
	if (reset)
		main_418_exitcond179_reg <= 0;
	/* main: %418*/
	/*   %exitcond179 = icmp eq i32 %422, %417*/
	else if((cur_state == LEGUP_F_main_BB__418_264)) begin
		main_418_exitcond179_reg <= main_418_exitcond179;
		if (start == 1'b0 && ^(main_418_exitcond179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_418_exitcond179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i10.i.i.loopexit*/
	/*   %423 = add i32 %386, %298*/
		main__crit_edgei10iiloopexit_423 = (main_lrphi8ii_386_reg + main_286_298_reg);
end
always @(posedge clk) begin
	if (reset)
		main__crit_edgei10iiloopexit_423_reg <= 0;
	/* main: %._crit_edge.i10.i.i.loopexit*/
	/*   %423 = add i32 %386, %298*/
	else if((cur_state == LEGUP_F_main_BB__crit_edgei10iiloopexit_269)) begin
		main__crit_edgei10iiloopexit_423_reg <= main__crit_edgei10iiloopexit_423;
		if (start == 1'b0 && ^(main__crit_edgei10iiloopexit_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei10iiloopexit_423_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i10.i.i.loopexit*/
	/*   %424 = add i32 %423, %289*/
		main__crit_edgei10iiloopexit_424 = (main__crit_edgei10iiloopexit_423 + main_286_289_reg);
end
always @(posedge clk) begin
	if (reset)
		main__crit_edgei10iiloopexit_424_reg <= 0;
	/* main: %._crit_edge.i10.i.i.loopexit*/
	/*   %424 = add i32 %423, %289*/
	else if((cur_state == LEGUP_F_main_BB__crit_edgei10iiloopexit_269)) begin
		main__crit_edgei10iiloopexit_424_reg <= main__crit_edgei10iiloopexit_424;
		if (start == 1'b0 && ^(main__crit_edgei10iiloopexit_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei10iiloopexit_424_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i10.i.i.loopexit*/
	/*   %425 = add i32 %424, %293*/
		main__crit_edgei10iiloopexit_425 = (main__crit_edgei10iiloopexit_424 + main_286_293_reg);
end
always @(posedge clk) begin
	if (reset)
		main__crit_edgei10iiloopexit_425_reg <= 0;
	/* main: %._crit_edge.i10.i.i.loopexit*/
	/*   %425 = add i32 %424, %293*/
	else if((cur_state == LEGUP_F_main_BB__crit_edgei10iiloopexit_269)) begin
		main__crit_edgei10iiloopexit_425_reg <= main__crit_edgei10iiloopexit_425;
		if (start == 1'b0 && ^(main__crit_edgei10iiloopexit_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei10iiloopexit_425_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i10.i.i.loopexit*/
	/*   %scevgep.sum = add i32 %425, 17*/
		main__crit_edgei10iiloopexit_scevgepsum = (main__crit_edgei10iiloopexit_425_reg + 32'd17);
end
always @(posedge clk) begin
	if (reset)
		main__crit_edgei10iiloopexit_scevgepsum_reg <= 0;
	/* main: %._crit_edge.i10.i.i.loopexit*/
	/*   %scevgep.sum = add i32 %425, 17*/
	else if((cur_state == LEGUP_F_main_BB__crit_edgei10iiloopexit_270)) begin
		main__crit_edgei10iiloopexit_scevgepsum_reg <= main__crit_edgei10iiloopexit_scevgepsum;
		if (start == 1'b0 && ^(main__crit_edgei10iiloopexit_scevgepsum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei10iiloopexit_scevgepsum_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i10.i.i.loopexit*/
	/*   %scevgep99 = getelementptr i8* %ReadBuf.5, i32 %scevgep.sum*/
		main__crit_edgei10iiloopexit_scevgep99 = (main_lrph5iii_ReadBuf5_reg + (1 * main__crit_edgei10iiloopexit_scevgepsum_reg));
end
always @(posedge clk) begin
	if (reset)
		main__crit_edgei10iiloopexit_scevgep99_reg <= 0;
	/* main: %._crit_edge.i10.i.i.loopexit*/
	/*   %scevgep99 = getelementptr i8* %ReadBuf.5, i32 %scevgep.sum*/
	else if((cur_state == LEGUP_F_main_BB__crit_edgei10iiloopexit_271)) begin
		main__crit_edgei10iiloopexit_scevgep99_reg <= main__crit_edgei10iiloopexit_scevgep99;
		if (start == 1'b0 && ^(main__crit_edgei10iiloopexit_scevgep99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei10iiloopexit_scevgep99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i10.i.i*/
	/*   %ReadBuf.6 = phi i8* [ %361, %372 ], [ %scevgep99, %._crit_edge.i10.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__372_258) & (memory_controller_waitrequest == 1'd0)) & (main_372_374 == 1'd0))) begin
		main__crit_edgei10ii_ReadBuf6 = main_286_361_reg;
	end
	/* main: %._crit_edge.i10.i.i*/
	/*   %ReadBuf.6 = phi i8* [ %361, %372 ], [ %scevgep99, %._crit_edge.i10.i.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgei10iiloopexit_271) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgei10ii_ReadBuf6 = main__crit_edgei10iiloopexit_scevgep99;
	end
end
always @(posedge clk) begin
	if (reset)
		main__crit_edgei10ii_ReadBuf6_reg <= 0;
	/* main: %._crit_edge.i10.i.i*/
	/*   %ReadBuf.6 = phi i8* [ %361, %372 ], [ %scevgep99, %._crit_edge.i10.i.i.loopexit ]*/
	else if((((cur_state == LEGUP_F_main_BB__372_258) & (memory_controller_waitrequest == 1'd0)) & (main_372_374 == 1'd0))) begin
		main__crit_edgei10ii_ReadBuf6_reg <= main__crit_edgei10ii_ReadBuf6;
		if (start == 1'b0 && ^(main__crit_edgei10ii_ReadBuf6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei10ii_ReadBuf6_reg"); $finish; end
	end
	/* main: %._crit_edge.i10.i.i*/
	/*   %ReadBuf.6 = phi i8* [ %361, %372 ], [ %scevgep99, %._crit_edge.i10.i.i.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB__crit_edgei10iiloopexit_271) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei10ii_ReadBuf6_reg <= main__crit_edgei10ii_ReadBuf6;
		if (start == 1'b0 && ^(main__crit_edgei10ii_ReadBuf6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei10ii_ReadBuf6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i10.i.i*/
	/*   %426 = sub i32 %373, %365*/
		main__crit_edgei10ii_426 = (main_372_373_reg - main_286_365_reg);
end
always @(posedge clk) begin
	if (reset)
		main__crit_edgei10ii_426_reg <= 0;
	/* main: %._crit_edge.i10.i.i*/
	/*   %426 = sub i32 %373, %365*/
	else if((cur_state == LEGUP_F_main_BB__crit_edgei10ii_272)) begin
		main__crit_edgei10ii_426_reg <= main__crit_edgei10ii_426;
		if (start == 1'b0 && ^(main__crit_edgei10ii_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei10ii_426_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i10.i.i*/
	/*   %427 = icmp sgt i32 %426, 16*/
		main__crit_edgei10ii_427 = ($signed(main__crit_edgei10ii_426) > $signed(32'd16));
end
always @(posedge clk) begin
	if (reset)
		main__crit_edgei10ii_427_reg <= 0;
	/* main: %._crit_edge.i10.i.i*/
	/*   %427 = icmp sgt i32 %426, 16*/
	else if((cur_state == LEGUP_F_main_BB__crit_edgei10ii_272)) begin
		main__crit_edgei10ii_427_reg <= main__crit_edgei10ii_427;
		if (start == 1'b0 && ^(main__crit_edgei10ii_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei10ii_427_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i10.i.i*/
	/*   %indvar.next183 = add i32 %indvar182, 1*/
		main__crit_edgei10ii_indvarnext183 = (main_lrph5iii_indvar182_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main__crit_edgei10ii_indvarnext183_reg <= 0;
	/* main: %._crit_edge.i10.i.i*/
	/*   %indvar.next183 = add i32 %indvar182, 1*/
	else if((cur_state == LEGUP_F_main_BB__crit_edgei10ii_272)) begin
		main__crit_edgei10ii_indvarnext183_reg <= main__crit_edgei10ii_indvarnext183;
		if (start == 1'b0 && ^(main__crit_edgei10ii_indvarnext183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei10ii_indvarnext183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %428*/
	/*   %scevgep174.sum = add i32 %indvar172, 2*/
		main_428_scevgep174sum = (main_preheaderiii_indvar172_reg + 32'd2);
end
always @(posedge clk) begin
	if (reset)
		main_428_scevgep174sum_reg <= 0;
	/* main: %428*/
	/*   %scevgep174.sum = add i32 %indvar172, 2*/
	else if((cur_state == LEGUP_F_main_BB__428_273)) begin
		main_428_scevgep174sum_reg <= main_428_scevgep174sum;
		if (start == 1'b0 && ^(main_428_scevgep174sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_428_scevgep174sum_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %428*/
	/*   %429 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum*/
		main_428_429 = (main_preheaderiiipreheader_ph_reg + (1 * main_428_scevgep174sum_reg));
end
always @(posedge clk) begin
	if (reset)
		main_428_429_reg <= 0;
	/* main: %428*/
	/*   %429 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum*/
	else if((cur_state == LEGUP_F_main_BB__428_274)) begin
		main_428_429_reg <= main_428_429;
		if (start == 1'b0 && ^(main_428_429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_428_429_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %428*/
	/*   %430 = load i8* %scevgep175, align 1, !tbaa !5*/
		main_428_430 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_428_430_reg <= 0;
	/* main: %428*/
	/*   %430 = load i8* %scevgep175, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__428_275)) begin
		main_428_430_reg <= main_428_430;
		if (start == 1'b0 && ^(main_428_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_428_430_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %428*/
	/*   %431 = zext i8 %430 to i16*/
		main_428_431 = main_428_430;
end
always @(posedge clk) begin
	if (reset)
		main_428_431_reg <= 0;
	/* main: %428*/
	/*   %431 = zext i8 %430 to i16*/
	else if((cur_state == LEGUP_F_main_BB__428_275)) begin
		main_428_431_reg <= main_428_431;
		if (start == 1'b0 && ^(main_428_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_428_431_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %428*/
	/*   %432 = shl nuw i16 %431, 8*/
		main_428_432 = (main_428_431 <<< (16'd8 % 16'd16));
end
always @(posedge clk) begin
	if (reset)
		main_428_432_reg <= 0;
	/* main: %428*/
	/*   %432 = shl nuw i16 %431, 8*/
	else if((cur_state == LEGUP_F_main_BB__428_275)) begin
		main_428_432_reg <= main_428_432;
		if (start == 1'b0 && ^(main_428_432) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_428_432_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %428*/
	/*   %scevgep174.sum1 = add i32 %indvar172, 3*/
		main_428_scevgep174sum1 = (main_preheaderiii_indvar172_reg + 32'd3);
end
always @(posedge clk) begin
	if (reset)
		main_428_scevgep174sum1_reg <= 0;
	/* main: %428*/
	/*   %scevgep174.sum1 = add i32 %indvar172, 3*/
	else if((cur_state == LEGUP_F_main_BB__428_273)) begin
		main_428_scevgep174sum1_reg <= main_428_scevgep174sum1;
		if (start == 1'b0 && ^(main_428_scevgep174sum1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_428_scevgep174sum1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %428*/
	/*   %433 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum1*/
		main_428_433 = (main_preheaderiiipreheader_ph_reg + (1 * main_428_scevgep174sum1_reg));
end
always @(posedge clk) begin
	if (reset)
		main_428_433_reg <= 0;
	/* main: %428*/
	/*   %433 = getelementptr inbounds i8* %.ph, i32 %scevgep174.sum1*/
	else if((cur_state == LEGUP_F_main_BB__428_274)) begin
		main_428_433_reg <= main_428_433;
		if (start == 1'b0 && ^(main_428_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_428_433_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %428*/
	/*   %434 = load i8* %429, align 1, !tbaa !5*/
		main_428_434 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_428_434_reg <= 0;
	/* main: %428*/
	/*   %434 = load i8* %429, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB__428_276)) begin
		main_428_434_reg <= main_428_434;
		if (start == 1'b0 && ^(main_428_434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_428_434_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %428*/
	/*   %435 = zext i8 %434 to i16*/
		main_428_435 = main_428_434;
end
always @(posedge clk) begin
	if (reset)
		main_428_435_reg <= 0;
	/* main: %428*/
	/*   %435 = zext i8 %434 to i16*/
	else if((cur_state == LEGUP_F_main_BB__428_276)) begin
		main_428_435_reg <= main_428_435;
		if (start == 1'b0 && ^(main_428_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_428_435_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %428*/
	/*   %436 = or i16 %432, %435*/
		main_428_436 = (main_428_432_reg | main_428_435);
end
always @(posedge clk) begin
	if (reset)
		main_428_436_reg <= 0;
	/* main: %428*/
	/*   %436 = or i16 %432, %435*/
	else if((cur_state == LEGUP_F_main_BB__428_276)) begin
		main_428_436_reg <= main_428_436;
		if (start == 1'b0 && ^(main_428_436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_428_436_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %428*/
	/*   %437 = sext i16 %436 to i32*/
		main_428_437 = $signed(main_428_436);
end
always @(posedge clk) begin
	if (reset)
		main_428_437_reg <= 0;
	/* main: %428*/
	/*   %437 = sext i16 %436 to i32*/
	else if((cur_state == LEGUP_F_main_BB__428_276)) begin
		main_428_437_reg <= main_428_437;
		if (start == 1'b0 && ^(main_428_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_428_437_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %428*/
	/*   %438 = add nsw i32 %437, -2*/
		main_428_438 = (main_428_437 + -32'd2);
end
always @(posedge clk) begin
	if (reset)
		main_428_438_reg <= 0;
	/* main: %428*/
	/*   %438 = add nsw i32 %437, -2*/
	else if((cur_state == LEGUP_F_main_BB__428_276)) begin
		main_428_438_reg <= main_428_438;
		if (start == 1'b0 && ^(main_428_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_428_438_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %428*/
	/*   %440 = load i32* %11, align 4, !tbaa !1*/
		main_428_440 = out_length_get_dqt_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_428_440_reg <= 0;
	/* main: %428*/
	/*   %440 = load i32* %11, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__428_274)) begin
		main_428_440_reg <= main_428_440;
		if (start == 1'b0 && ^(main_428_440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_428_440_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %428*/
	/*   %441 = icmp eq i32 %438, %440*/
		main_428_441 = (main_428_438 == main_428_440_reg);
end
always @(posedge clk) begin
	if (reset)
		main_428_441_reg <= 0;
	/* main: %428*/
	/*   %441 = icmp eq i32 %438, %440*/
	else if((cur_state == LEGUP_F_main_BB__428_276)) begin
		main_428_441_reg <= main_428_441;
		if (start == 1'b0 && ^(main_428_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_428_441_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %442*/
	/*   %443 = load i32* @main_result, align 4, !tbaa !1*/
		main_442_443 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_442_443_reg <= 0;
	/* main: %442*/
	/*   %443 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__442_279)) begin
		main_442_443_reg <= main_442_443;
		if (start == 1'b0 && ^(main_442_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_442_443_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %442*/
	/*   %444 = add nsw i32 %443, 1*/
		main_442_444 = (main_442_443 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_442_444_reg <= 0;
	/* main: %442*/
	/*   %444 = add nsw i32 %443, 1*/
	else if((cur_state == LEGUP_F_main_BB__442_279)) begin
		main_442_444_reg <= main_442_444;
		if (start == 1'b0 && ^(main_442_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_442_444_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i11.i.i*/
	/*   %445 = icmp sgt i32 %438, 0*/
		main_preheaderi11ii_445 = ($signed(main_428_438_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi11ii_445_reg <= 0;
	/* main: %.preheader.i11.i.i*/
	/*   %445 = icmp sgt i32 %438, 0*/
	else if((cur_state == LEGUP_F_main_BB_preheaderi11ii_281)) begin
		main_preheaderi11ii_445_reg <= main_preheaderi11ii_445;
		if (start == 1'b0 && ^(main_preheaderi11ii_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi11ii_445_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i13.i.i.loopexit*/
	/*   %446 = add i32 %i_get_dqt.0.ph26, 1*/
		main_lrphi13iiloopexit_446 = (main_loopexitipreheaderiiouter24_i_get_dqt0ph26_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi13iiloopexit_446_reg <= 0;
	/* main: %.lr.ph.i13.i.i.loopexit*/
	/*   %446 = add i32 %i_get_dqt.0.ph26, 1*/
	else if((cur_state == LEGUP_F_main_BB_lrphi13iiloopexit_282)) begin
		main_lrphi13iiloopexit_446_reg <= main_lrphi13iiloopexit_446;
		if (start == 1'b0 && ^(main_lrphi13iiloopexit_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13iiloopexit_446_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i13.i.i*/
	/*   %indvar192 = phi i32 [ %indvar.next193, %.us-lcssa.us.i.i.i ], [ 0, %.lr.ph.i13.i.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi13iiloopexit_282) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi13ii_indvar192 = 32'd0;
	end
	/* main: %.lr.ph.i13.i.i*/
	/*   %indvar192 = phi i32 [ %indvar.next193, %.us-lcssa.us.i.i.i ], [ 0, %.lr.ph.i13.i.i.loopexit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_uslcssausiii_310) & (memory_controller_waitrequest == 1'd0)) & (main_uslcssausiii_490 == 1'd1))) */ begin
		main_lrphi13ii_indvar192 = main_uslcssausiii_indvarnext193;
	end
end
always @(posedge clk) begin
	if (reset)
		main_lrphi13ii_indvar192_reg <= 0;
	/* main: %.lr.ph.i13.i.i*/
	/*   %indvar192 = phi i32 [ %indvar.next193, %.us-lcssa.us.i.i.i ], [ 0, %.lr.ph.i13.i.i.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_lrphi13iiloopexit_282) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi13ii_indvar192_reg <= main_lrphi13ii_indvar192;
		if (start == 1'b0 && ^(main_lrphi13ii_indvar192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_indvar192_reg"); $finish; end
	end
	/* main: %.lr.ph.i13.i.i*/
	/*   %indvar192 = phi i32 [ %indvar.next193, %.us-lcssa.us.i.i.i ], [ 0, %.lr.ph.i13.i.i.loopexit ]*/
	else if((((cur_state == LEGUP_F_main_BB_uslcssausiii_310) & (memory_controller_waitrequest == 1'd0)) & (main_uslcssausiii_490 == 1'd1))) begin
		main_lrphi13ii_indvar192_reg <= main_lrphi13ii_indvar192;
		if (start == 1'b0 && ^(main_lrphi13ii_indvar192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_indvar192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i13.i.i*/
	/*   %447 = phi i8* [ %ReadBuf.7, %.us-lcssa.us.i.i.i ], [ %433, %.lr.ph.i13.i.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi13iiloopexit_282) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi13ii_447 = main_428_433_reg;
	end
	/* main: %.lr.ph.i13.i.i*/
	/*   %447 = phi i8* [ %ReadBuf.7, %.us-lcssa.us.i.i.i ], [ %433, %.lr.ph.i13.i.i.loopexit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_uslcssausiii_310) & (memory_controller_waitrequest == 1'd0)) & (main_uslcssausiii_490 == 1'd1))) */ begin
		main_lrphi13ii_447 = main_uslcssausiii_ReadBuf7_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_lrphi13ii_447_reg <= 0;
	/* main: %.lr.ph.i13.i.i*/
	/*   %447 = phi i8* [ %ReadBuf.7, %.us-lcssa.us.i.i.i ], [ %433, %.lr.ph.i13.i.i.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_lrphi13iiloopexit_282) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi13ii_447_reg <= main_lrphi13ii_447;
		if (start == 1'b0 && ^(main_lrphi13ii_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_447_reg"); $finish; end
	end
	/* main: %.lr.ph.i13.i.i*/
	/*   %447 = phi i8* [ %ReadBuf.7, %.us-lcssa.us.i.i.i ], [ %433, %.lr.ph.i13.i.i.loopexit ]*/
	else if((((cur_state == LEGUP_F_main_BB_uslcssausiii_310) & (memory_controller_waitrequest == 1'd0)) & (main_uslcssausiii_490 == 1'd1))) begin
		main_lrphi13ii_447_reg <= main_lrphi13ii_447;
		if (start == 1'b0 && ^(main_lrphi13ii_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_447_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i13.i.i*/
	/*   %length.02.i.i.i = phi i32 [ %..i.i.i, %.us-lcssa.us.i.i.i ], [ %438, %.lr.ph.i13.i.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi13iiloopexit_282) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi13ii_length02iii = main_428_438_reg;
	end
	/* main: %.lr.ph.i13.i.i*/
	/*   %length.02.i.i.i = phi i32 [ %..i.i.i, %.us-lcssa.us.i.i.i ], [ %438, %.lr.ph.i13.i.i.loopexit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_uslcssausiii_310) & (memory_controller_waitrequest == 1'd0)) & (main_uslcssausiii_490 == 1'd1))) */ begin
		main_lrphi13ii_length02iii = main_uslcssausiii_iii;
	end
end
always @(posedge clk) begin
	if (reset)
		main_lrphi13ii_length02iii_reg <= 0;
	/* main: %.lr.ph.i13.i.i*/
	/*   %length.02.i.i.i = phi i32 [ %..i.i.i, %.us-lcssa.us.i.i.i ], [ %438, %.lr.ph.i13.i.i.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_lrphi13iiloopexit_282) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi13ii_length02iii_reg <= main_lrphi13ii_length02iii;
		if (start == 1'b0 && ^(main_lrphi13ii_length02iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_length02iii_reg"); $finish; end
	end
	/* main: %.lr.ph.i13.i.i*/
	/*   %length.02.i.i.i = phi i32 [ %..i.i.i, %.us-lcssa.us.i.i.i ], [ %438, %.lr.ph.i13.i.i.loopexit ]*/
	else if((((cur_state == LEGUP_F_main_BB_uslcssausiii_310) & (memory_controller_waitrequest == 1'd0)) & (main_uslcssausiii_490 == 1'd1))) begin
		main_lrphi13ii_length02iii_reg <= main_lrphi13ii_length02iii;
		if (start == 1'b0 && ^(main_lrphi13ii_length02iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_length02iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i13.i.i*/
	/*   %448 = add i32 %446, %indvar192*/
		main_lrphi13ii_448 = (main_lrphi13iiloopexit_446_reg + main_lrphi13ii_indvar192_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi13ii_448_reg <= 0;
	/* main: %.lr.ph.i13.i.i*/
	/*   %448 = add i32 %446, %indvar192*/
	else if((cur_state == LEGUP_F_main_BB_lrphi13ii_283)) begin
		main_lrphi13ii_448_reg <= main_lrphi13ii_448;
		if (start == 1'b0 && ^(main_lrphi13ii_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_448_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i13.i.i*/
	/*   %449 = add i32 %i_get_dqt.0.ph26, %indvar192*/
		main_lrphi13ii_449 = (main_loopexitipreheaderiiouter24_i_get_dqt0ph26_reg + main_lrphi13ii_indvar192_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi13ii_449_reg <= 0;
	/* main: %.lr.ph.i13.i.i*/
	/*   %449 = add i32 %i_get_dqt.0.ph26, %indvar192*/
	else if((cur_state == LEGUP_F_main_BB_lrphi13ii_283)) begin
		main_lrphi13ii_449_reg <= main_lrphi13ii_449;
		if (start == 1'b0 && ^(main_lrphi13ii_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_449_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i13.i.i*/
	/*   %scevgep194 = getelementptr [2 x i32]* @out_num_get_dht, i32 0, i32 %449*/
		main_lrphi13ii_scevgep194 = (1'd0 + (4 * main_lrphi13ii_449_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi13ii_scevgep194_reg <= 0;
	/* main: %.lr.ph.i13.i.i*/
	/*   %scevgep194 = getelementptr [2 x i32]* @out_num_get_dht, i32 0, i32 %449*/
	else if((cur_state == LEGUP_F_main_BB_lrphi13ii_284)) begin
		main_lrphi13ii_scevgep194_reg <= main_lrphi13ii_scevgep194;
		if (start == 1'b0 && ^(main_lrphi13ii_scevgep194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_scevgep194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i13.i.i*/
	/*   %scevgep195 = getelementptr [2 x i32]* @out_prec_get_dht, i32 0, i32 %449*/
		main_lrphi13ii_scevgep195 = (1'd0 + (4 * main_lrphi13ii_449_reg));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi13ii_scevgep195_reg <= 0;
	/* main: %.lr.ph.i13.i.i*/
	/*   %scevgep195 = getelementptr [2 x i32]* @out_prec_get_dht, i32 0, i32 %449*/
	else if((cur_state == LEGUP_F_main_BB_lrphi13ii_284)) begin
		main_lrphi13ii_scevgep195_reg <= main_lrphi13ii_scevgep195;
		if (start == 1'b0 && ^(main_lrphi13ii_scevgep195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_scevgep195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i13.i.i*/
	/*   %450 = getelementptr inbounds i8* %447, i32 1*/
		main_lrphi13ii_450 = (main_lrphi13ii_447_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi13ii_450_reg <= 0;
	/* main: %.lr.ph.i13.i.i*/
	/*   %450 = getelementptr inbounds i8* %447, i32 1*/
	else if((cur_state == LEGUP_F_main_BB_lrphi13ii_283)) begin
		main_lrphi13ii_450_reg <= main_lrphi13ii_450;
		if (start == 1'b0 && ^(main_lrphi13ii_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_450_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i13.i.i*/
	/*   %451 = load i8* %447, align 1, !tbaa !5*/
		main_lrphi13ii_451 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_lrphi13ii_451_reg <= 0;
	/* main: %.lr.ph.i13.i.i*/
	/*   %451 = load i8* %447, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_lrphi13ii_285)) begin
		main_lrphi13ii_451_reg <= main_lrphi13ii_451;
		if (start == 1'b0 && ^(main_lrphi13ii_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_451_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i13.i.i*/
	/*   %452 = zext i8 %451 to i32*/
		main_lrphi13ii_452 = main_lrphi13ii_451;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi13ii_452_reg <= 0;
	/* main: %.lr.ph.i13.i.i*/
	/*   %452 = zext i8 %451 to i32*/
	else if((cur_state == LEGUP_F_main_BB_lrphi13ii_285)) begin
		main_lrphi13ii_452_reg <= main_lrphi13ii_452;
		if (start == 1'b0 && ^(main_lrphi13ii_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_452_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i13.i.i*/
	/*   %453 = lshr i32 %452, 4*/
		main_lrphi13ii_453 = (main_lrphi13ii_452 >>> (32'd4 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_lrphi13ii_453_reg <= 0;
	/* main: %.lr.ph.i13.i.i*/
	/*   %453 = lshr i32 %452, 4*/
	else if((cur_state == LEGUP_F_main_BB_lrphi13ii_285)) begin
		main_lrphi13ii_453_reg <= main_lrphi13ii_453;
		if (start == 1'b0 && ^(main_lrphi13ii_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_453_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i13.i.i*/
	/*   %454 = and i32 %452, 15*/
		main_lrphi13ii_454 = (main_lrphi13ii_452 & 32'd15);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi13ii_454_reg <= 0;
	/* main: %.lr.ph.i13.i.i*/
	/*   %454 = and i32 %452, 15*/
	else if((cur_state == LEGUP_F_main_BB_lrphi13ii_285)) begin
		main_lrphi13ii_454_reg <= main_lrphi13ii_454;
		if (start == 1'b0 && ^(main_lrphi13ii_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_454_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i13.i.i*/
	/*   %457 = load i32* %scevgep195, align 4, !tbaa !1*/
		main_lrphi13ii_457 = out_prec_get_dht_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_lrphi13ii_457_reg <= 0;
	/* main: %.lr.ph.i13.i.i*/
	/*   %457 = load i32* %scevgep195, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_lrphi13ii_285)) begin
		main_lrphi13ii_457_reg <= main_lrphi13ii_457;
		if (start == 1'b0 && ^(main_lrphi13ii_457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_457_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i13.i.i*/
	/*   %458 = icmp eq i32 %453, %457*/
		main_lrphi13ii_458 = (main_lrphi13ii_453 == main_lrphi13ii_457);
end
always @(posedge clk) begin
	if (reset)
		main_lrphi13ii_458_reg <= 0;
	/* main: %.lr.ph.i13.i.i*/
	/*   %458 = icmp eq i32 %453, %457*/
	else if((cur_state == LEGUP_F_main_BB_lrphi13ii_285)) begin
		main_lrphi13ii_458_reg <= main_lrphi13ii_458;
		if (start == 1'b0 && ^(main_lrphi13ii_458) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi13ii_458_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %459*/
	/*   %460 = load i32* @main_result, align 4, !tbaa !1*/
		main_459_460 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_459_460_reg <= 0;
	/* main: %459*/
	/*   %460 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__459_288)) begin
		main_459_460_reg <= main_459_460;
		if (start == 1'b0 && ^(main_459_460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_459_460_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %459*/
	/*   %461 = add nsw i32 %460, 1*/
		main_459_461 = (main_459_460 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_459_461_reg <= 0;
	/* main: %459*/
	/*   %461 = add nsw i32 %460, 1*/
	else if((cur_state == LEGUP_F_main_BB__459_288)) begin
		main_459_461_reg <= main_459_461;
		if (start == 1'b0 && ^(main_459_461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_459_461_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %462*/
	/*   %463 = load i32* %scevgep194, align 4, !tbaa !1*/
		main_462_463 = out_num_get_dht_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_462_463_reg <= 0;
	/* main: %462*/
	/*   %463 = load i32* %scevgep194, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__462_291)) begin
		main_462_463_reg <= main_462_463;
		if (start == 1'b0 && ^(main_462_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_462_463_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %462*/
	/*   %464 = icmp eq i32 %454, %463*/
		main_462_464 = (main_lrphi13ii_454_reg == main_462_463);
end
always @(posedge clk) begin
	if (reset)
		main_462_464_reg <= 0;
	/* main: %462*/
	/*   %464 = icmp eq i32 %454, %463*/
	else if((cur_state == LEGUP_F_main_BB__462_291)) begin
		main_462_464_reg <= main_462_464;
		if (start == 1'b0 && ^(main_462_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_462_464_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %465*/
	/*   %466 = load i32* @main_result, align 4, !tbaa !1*/
		main_465_466 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_465_466_reg <= 0;
	/* main: %465*/
	/*   %466 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__465_294)) begin
		main_465_466_reg <= main_465_466;
		if (start == 1'b0 && ^(main_465_466) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_465_466_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %465*/
	/*   %467 = add nsw i32 %466, 1*/
		main_465_467 = (main_465_466 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_465_467_reg <= 0;
	/* main: %465*/
	/*   %467 = add nsw i32 %466, 1*/
	else if((cur_state == LEGUP_F_main_BB__465_294)) begin
		main_465_467_reg <= main_465_467;
		if (start == 1'b0 && ^(main_465_467) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_465_467_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %468*/
	/*   %469 = icmp eq i32 %453, 0*/
		main_468_469 = (main_lrphi13ii_453_reg == 32'd0);
end
always @(posedge clk) begin
	if (reset)
		main_468_469_reg <= 0;
	/* main: %468*/
	/*   %469 = icmp eq i32 %453, 0*/
	else if((cur_state == LEGUP_F_main_BB__468_296)) begin
		main_468_469_reg <= main_468_469;
		if (start == 1'b0 && ^(main_468_469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_468_469_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.split.us.i.i.i*/
	/*   %470 = phi i8* [ %471, %.split.us.i.i.i ], [ %447, %.split.us.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_splitusiiipreheader_298) & (memory_controller_waitrequest == 1'd0))) begin
		main_splitusiii_470 = main_lrphi13ii_447_reg;
	end
	/* main: %.split.us.i.i.i*/
	/*   %470 = phi i8* [ %471, %.split.us.i.i.i ], [ %447, %.split.us.i.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_splitusiii_302) & (memory_controller_waitrequest == 1'd0)) & (main_splitusiii_exitcond190_reg == 1'd0))) */ begin
		main_splitusiii_470 = main_splitusiii_471_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_splitusiii_470_reg <= 0;
	/* main: %.split.us.i.i.i*/
	/*   %470 = phi i8* [ %471, %.split.us.i.i.i ], [ %447, %.split.us.i.i.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_splitusiiipreheader_298) & (memory_controller_waitrequest == 1'd0))) begin
		main_splitusiii_470_reg <= main_splitusiii_470;
		if (start == 1'b0 && ^(main_splitusiii_470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_splitusiii_470_reg"); $finish; end
	end
	/* main: %.split.us.i.i.i*/
	/*   %470 = phi i8* [ %471, %.split.us.i.i.i ], [ %447, %.split.us.i.i.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB_splitusiii_302) & (memory_controller_waitrequest == 1'd0)) & (main_splitusiii_exitcond190_reg == 1'd0))) begin
		main_splitusiii_470_reg <= main_splitusiii_470;
		if (start == 1'b0 && ^(main_splitusiii_470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_splitusiii_470_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.split.us.i.i.i*/
	/*   %471 = phi i8* [ %472, %.split.us.i.i.i ], [ %450, %.split.us.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_splitusiiipreheader_298) & (memory_controller_waitrequest == 1'd0))) begin
		main_splitusiii_471 = main_lrphi13ii_450_reg;
	end
	/* main: %.split.us.i.i.i*/
	/*   %471 = phi i8* [ %472, %.split.us.i.i.i ], [ %450, %.split.us.i.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_splitusiii_302) & (memory_controller_waitrequest == 1'd0)) & (main_splitusiii_exitcond190_reg == 1'd0))) */ begin
		main_splitusiii_471 = main_splitusiii_472_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_splitusiii_471_reg <= 0;
	/* main: %.split.us.i.i.i*/
	/*   %471 = phi i8* [ %472, %.split.us.i.i.i ], [ %450, %.split.us.i.i.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_splitusiiipreheader_298) & (memory_controller_waitrequest == 1'd0))) begin
		main_splitusiii_471_reg <= main_splitusiii_471;
		if (start == 1'b0 && ^(main_splitusiii_471) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_splitusiii_471_reg"); $finish; end
	end
	/* main: %.split.us.i.i.i*/
	/*   %471 = phi i8* [ %472, %.split.us.i.i.i ], [ %450, %.split.us.i.i.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB_splitusiii_302) & (memory_controller_waitrequest == 1'd0)) & (main_splitusiii_exitcond190_reg == 1'd0))) begin
		main_splitusiii_471_reg <= main_splitusiii_471;
		if (start == 1'b0 && ^(main_splitusiii_471) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_splitusiii_471_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.split.us.i.i.i*/
	/*   %i.01.us.i.i.i = phi i32 [ %477, %.split.us.i.i.i ], [ 0, %.split.us.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_splitusiiipreheader_298) & (memory_controller_waitrequest == 1'd0))) begin
		main_splitusiii_i01usiii = 32'd0;
	end
	/* main: %.split.us.i.i.i*/
	/*   %i.01.us.i.i.i = phi i32 [ %477, %.split.us.i.i.i ], [ 0, %.split.us.i.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_splitusiii_302) & (memory_controller_waitrequest == 1'd0)) & (main_splitusiii_exitcond190_reg == 1'd0))) */ begin
		main_splitusiii_i01usiii = main_splitusiii_477_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_splitusiii_i01usiii_reg <= 0;
	/* main: %.split.us.i.i.i*/
	/*   %i.01.us.i.i.i = phi i32 [ %477, %.split.us.i.i.i ], [ 0, %.split.us.i.i.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_splitusiiipreheader_298) & (memory_controller_waitrequest == 1'd0))) begin
		main_splitusiii_i01usiii_reg <= main_splitusiii_i01usiii;
		if (start == 1'b0 && ^(main_splitusiii_i01usiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_splitusiii_i01usiii_reg"); $finish; end
	end
	/* main: %.split.us.i.i.i*/
	/*   %i.01.us.i.i.i = phi i32 [ %477, %.split.us.i.i.i ], [ 0, %.split.us.i.i.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB_splitusiii_302) & (memory_controller_waitrequest == 1'd0)) & (main_splitusiii_exitcond190_reg == 1'd0))) begin
		main_splitusiii_i01usiii_reg <= main_splitusiii_i01usiii;
		if (start == 1'b0 && ^(main_splitusiii_i01usiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_splitusiii_i01usiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.split.us.i.i.i*/
	/*   %scevgep191 = getelementptr [64 x i32]* @izigzag_index, i32 0, i32 %i.01.us.i.i.i*/
		main_splitusiii_scevgep191 = (1'd0 + (4 * main_splitusiii_i01usiii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_splitusiii_scevgep191_reg <= 0;
	/* main: %.split.us.i.i.i*/
	/*   %scevgep191 = getelementptr [64 x i32]* @izigzag_index, i32 0, i32 %i.01.us.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_splitusiii_299)) begin
		main_splitusiii_scevgep191_reg <= main_splitusiii_scevgep191;
		if (start == 1'b0 && ^(main_splitusiii_scevgep191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_splitusiii_scevgep191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.split.us.i.i.i*/
	/*   %472 = getelementptr inbounds i8* %470, i32 2*/
		main_splitusiii_472 = (main_splitusiii_470_reg + (1 * 32'd2));
end
always @(posedge clk) begin
	if (reset)
		main_splitusiii_472_reg <= 0;
	/* main: %.split.us.i.i.i*/
	/*   %472 = getelementptr inbounds i8* %470, i32 2*/
	else if((cur_state == LEGUP_F_main_BB_splitusiii_299)) begin
		main_splitusiii_472_reg <= main_splitusiii_472;
		if (start == 1'b0 && ^(main_splitusiii_472) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_splitusiii_472_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.split.us.i.i.i*/
	/*   %473 = load i8* %471, align 1, !tbaa !5*/
		main_splitusiii_473 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_splitusiii_473_reg <= 0;
	/* main: %.split.us.i.i.i*/
	/*   %473 = load i8* %471, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_splitusiii_301)) begin
		main_splitusiii_473_reg <= main_splitusiii_473;
		if (start == 1'b0 && ^(main_splitusiii_473) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_splitusiii_473_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.split.us.i.i.i*/
	/*   %474 = zext i8 %473 to i32*/
		main_splitusiii_474 = main_splitusiii_473;
end
always @(posedge clk) begin
	if (reset)
		main_splitusiii_474_reg <= 0;
	/* main: %.split.us.i.i.i*/
	/*   %474 = zext i8 %473 to i32*/
	else if((cur_state == LEGUP_F_main_BB_splitusiii_301)) begin
		main_splitusiii_474_reg <= main_splitusiii_474;
		if (start == 1'b0 && ^(main_splitusiii_474) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_splitusiii_474_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.split.us.i.i.i*/
	/*   %475 = load i32* %scevgep191, align 4, !tbaa !1*/
		main_splitusiii_475 = izigzag_index_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_splitusiii_475_reg <= 0;
	/* main: %.split.us.i.i.i*/
	/*   %475 = load i32* %scevgep191, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_splitusiii_300)) begin
		main_splitusiii_475_reg <= main_splitusiii_475;
		if (start == 1'b0 && ^(main_splitusiii_475) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_splitusiii_475_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.split.us.i.i.i*/
	/*   %.sum.us.i.i.i = add i32 %475, 64*/
		main_splitusiii_sumusiii = (main_splitusiii_475 + 32'd64);
end
always @(posedge clk) begin
	if (reset)
		main_splitusiii_sumusiii_reg <= 0;
	/* main: %.split.us.i.i.i*/
	/*   %.sum.us.i.i.i = add i32 %475, 64*/
	else if((cur_state == LEGUP_F_main_BB_splitusiii_300)) begin
		main_splitusiii_sumusiii_reg <= main_splitusiii_sumusiii;
		if (start == 1'b0 && ^(main_splitusiii_sumusiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_splitusiii_sumusiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.split.us.i.i.i*/
	/*   %476 = getelementptr inbounds [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %454, i32 %.sum.us.i.i.i*/
		main_splitusiii_476 = (1'd0 + ((256 * main_lrphi13ii_454_reg) + (4 * main_splitusiii_sumusiii_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_splitusiii_476_reg <= 0;
	/* main: %.split.us.i.i.i*/
	/*   %476 = getelementptr inbounds [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %454, i32 %.sum.us.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_splitusiii_301)) begin
		main_splitusiii_476_reg <= main_splitusiii_476;
		if (start == 1'b0 && ^(main_splitusiii_476) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_splitusiii_476_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.split.us.i.i.i*/
	/*   %477 = add nsw i32 %i.01.us.i.i.i, 1*/
		main_splitusiii_477 = (main_splitusiii_i01usiii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_splitusiii_477_reg <= 0;
	/* main: %.split.us.i.i.i*/
	/*   %477 = add nsw i32 %i.01.us.i.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB_splitusiii_299)) begin
		main_splitusiii_477_reg <= main_splitusiii_477;
		if (start == 1'b0 && ^(main_splitusiii_477) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_splitusiii_477_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.split.us.i.i.i*/
	/*   %exitcond190 = icmp eq i32 %477, 64*/
		main_splitusiii_exitcond190 = (main_splitusiii_477 == 32'd64);
end
always @(posedge clk) begin
	if (reset)
		main_splitusiii_exitcond190_reg <= 0;
	/* main: %.split.us.i.i.i*/
	/*   %exitcond190 = icmp eq i32 %477, 64*/
	else if((cur_state == LEGUP_F_main_BB_splitusiii_299)) begin
		main_splitusiii_exitcond190_reg <= main_splitusiii_exitcond190;
		if (start == 1'b0 && ^(main_splitusiii_exitcond190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_splitusiii_exitcond190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %i.01.i.i.i = phi i32 [ %489, %..split_crit_edge.i.i.i ], [ 0, %..split_crit_edge.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_split_crit_edgeiiipreheader_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_split_crit_edgeiii_i01iii = 32'd0;
	end
	/* main: %..split_crit_edge.i.i.i*/
	/*   %i.01.i.i.i = phi i32 [ %489, %..split_crit_edge.i.i.i ], [ 0, %..split_crit_edge.i.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_307) & (memory_controller_waitrequest == 1'd0)) & (main_split_crit_edgeiii_exitcond186_reg == 1'd0))) */ begin
		main_split_crit_edgeiii_i01iii = main_split_crit_edgeiii_489_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_i01iii_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %i.01.i.i.i = phi i32 [ %489, %..split_crit_edge.i.i.i ], [ 0, %..split_crit_edge.i.i.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_split_crit_edgeiiipreheader_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_split_crit_edgeiii_i01iii_reg <= main_split_crit_edgeiii_i01iii;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_i01iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_i01iii_reg"); $finish; end
	end
	/* main: %..split_crit_edge.i.i.i*/
	/*   %i.01.i.i.i = phi i32 [ %489, %..split_crit_edge.i.i.i ], [ 0, %..split_crit_edge.i.i.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_307) & (memory_controller_waitrequest == 1'd0)) & (main_split_crit_edgeiii_exitcond186_reg == 1'd0))) begin
		main_split_crit_edgeiii_i01iii_reg <= main_split_crit_edgeiii_i01iii;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_i01iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_i01iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %478 = shl i32 %i.01.i.i.i, 1*/
		main_split_crit_edgeiii_478 = (main_split_crit_edgeiii_i01iii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_478_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %478 = shl i32 %i.01.i.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_303)) begin
		main_split_crit_edgeiii_478_reg <= main_split_crit_edgeiii_478;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_478) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_478_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %479 = or i32 %478, 1*/
		main_split_crit_edgeiii_479 = (main_split_crit_edgeiii_478 | 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_479_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %479 = or i32 %478, 1*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_303)) begin
		main_split_crit_edgeiii_479_reg <= main_split_crit_edgeiii_479;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_479) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_479_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %scevgep187 = getelementptr i8* %447, i32 %479*/
		main_split_crit_edgeiii_scevgep187 = (main_lrphi13ii_447_reg + (1 * main_split_crit_edgeiii_479));
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_scevgep187_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %scevgep187 = getelementptr i8* %447, i32 %479*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_303)) begin
		main_split_crit_edgeiii_scevgep187_reg <= main_split_crit_edgeiii_scevgep187;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_scevgep187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_scevgep187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %480 = add i32 %478, 2*/
		main_split_crit_edgeiii_480 = (main_split_crit_edgeiii_478 + 32'd2);
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_480_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %480 = add i32 %478, 2*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_303)) begin
		main_split_crit_edgeiii_480_reg <= main_split_crit_edgeiii_480;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_480) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_480_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %scevgep188 = getelementptr i8* %447, i32 %480*/
		main_split_crit_edgeiii_scevgep188 = (main_lrphi13ii_447_reg + (1 * main_split_crit_edgeiii_480_reg));
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_scevgep188_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %scevgep188 = getelementptr i8* %447, i32 %480*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_304)) begin
		main_split_crit_edgeiii_scevgep188_reg <= main_split_crit_edgeiii_scevgep188;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_scevgep188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_scevgep188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %scevgep189 = getelementptr [64 x i32]* @izigzag_index, i32 0, i32 %i.01.i.i.i*/
		main_split_crit_edgeiii_scevgep189 = (1'd0 + (4 * main_split_crit_edgeiii_i01iii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_scevgep189_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %scevgep189 = getelementptr [64 x i32]* @izigzag_index, i32 0, i32 %i.01.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_303)) begin
		main_split_crit_edgeiii_scevgep189_reg <= main_split_crit_edgeiii_scevgep189;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_scevgep189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_scevgep189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %481 = load i8* %scevgep187, align 1, !tbaa !5*/
		main_split_crit_edgeiii_481 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_481_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %481 = load i8* %scevgep187, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_305)) begin
		main_split_crit_edgeiii_481_reg <= main_split_crit_edgeiii_481;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_481) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_481_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %482 = zext i8 %481 to i32*/
		main_split_crit_edgeiii_482 = main_split_crit_edgeiii_481;
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_482_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %482 = zext i8 %481 to i32*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_305)) begin
		main_split_crit_edgeiii_482_reg <= main_split_crit_edgeiii_482;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_482) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_482_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %483 = shl nuw nsw i32 %482, 8*/
		main_split_crit_edgeiii_483 = (main_split_crit_edgeiii_482 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_483_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %483 = shl nuw nsw i32 %482, 8*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_305)) begin
		main_split_crit_edgeiii_483_reg <= main_split_crit_edgeiii_483;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_483) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_483_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %484 = load i8* %scevgep188, align 1, !tbaa !5*/
		main_split_crit_edgeiii_484 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_484_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %484 = load i8* %scevgep188, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_306)) begin
		main_split_crit_edgeiii_484_reg <= main_split_crit_edgeiii_484;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_484) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_484_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %485 = zext i8 %484 to i32*/
		main_split_crit_edgeiii_485 = main_split_crit_edgeiii_484;
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_485_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %485 = zext i8 %484 to i32*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_306)) begin
		main_split_crit_edgeiii_485_reg <= main_split_crit_edgeiii_485;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_485) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_485_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %486 = or i32 %485, %483*/
		main_split_crit_edgeiii_486 = (main_split_crit_edgeiii_485 | main_split_crit_edgeiii_483_reg);
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_486_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %486 = or i32 %485, %483*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_306)) begin
		main_split_crit_edgeiii_486_reg <= main_split_crit_edgeiii_486;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_486) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_486_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %487 = load i32* %scevgep189, align 4, !tbaa !1*/
		main_split_crit_edgeiii_487 = izigzag_index_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_487_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %487 = load i32* %scevgep189, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_304)) begin
		main_split_crit_edgeiii_487_reg <= main_split_crit_edgeiii_487;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_487) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_487_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %.sum.i.i.i = add i32 %487, 64*/
		main_split_crit_edgeiii_sumiii = (main_split_crit_edgeiii_487 + 32'd64);
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_sumiii_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %.sum.i.i.i = add i32 %487, 64*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_304)) begin
		main_split_crit_edgeiii_sumiii_reg <= main_split_crit_edgeiii_sumiii;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_sumiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_sumiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %488 = getelementptr inbounds [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %454, i32 %.sum.i.i.i*/
		main_split_crit_edgeiii_488 = (1'd0 + ((256 * main_lrphi13ii_454_reg) + (4 * main_split_crit_edgeiii_sumiii_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_488_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %488 = getelementptr inbounds [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %454, i32 %.sum.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_305)) begin
		main_split_crit_edgeiii_488_reg <= main_split_crit_edgeiii_488;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_488) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_488_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %489 = add nsw i32 %i.01.i.i.i, 1*/
		main_split_crit_edgeiii_489 = (main_split_crit_edgeiii_i01iii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_489_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %489 = add nsw i32 %i.01.i.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_303)) begin
		main_split_crit_edgeiii_489_reg <= main_split_crit_edgeiii_489;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_489) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_489_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %..split_crit_edge.i.i.i*/
	/*   %exitcond186 = icmp eq i32 %489, 64*/
		main_split_crit_edgeiii_exitcond186 = (main_split_crit_edgeiii_489 == 32'd64);
end
always @(posedge clk) begin
	if (reset)
		main_split_crit_edgeiii_exitcond186_reg <= 0;
	/* main: %..split_crit_edge.i.i.i*/
	/*   %exitcond186 = icmp eq i32 %489, 64*/
	else if((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_303)) begin
		main_split_crit_edgeiii_exitcond186_reg <= main_split_crit_edgeiii_exitcond186;
		if (start == 1'b0 && ^(main_split_crit_edgeiii_exitcond186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_split_crit_edgeiii_exitcond186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa.us.i.i.i.loopexit*/
	/*   %scevgep101 = getelementptr i8* %447, i32 65*/
		main_uslcssausiiiloopexit_scevgep101 = (main_lrphi13ii_447_reg + (1 * 32'd65));
end
always @(posedge clk) begin
	if (reset)
		main_uslcssausiiiloopexit_scevgep101_reg <= 0;
	/* main: %.us-lcssa.us.i.i.i.loopexit*/
	/*   %scevgep101 = getelementptr i8* %447, i32 65*/
	else if((cur_state == LEGUP_F_main_BB_uslcssausiiiloopexit_308)) begin
		main_uslcssausiiiloopexit_scevgep101_reg <= main_uslcssausiiiloopexit_scevgep101;
		if (start == 1'b0 && ^(main_uslcssausiiiloopexit_scevgep101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssausiiiloopexit_scevgep101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa.us.i.i.i.loopexit22*/
	/*   %scevgep100 = getelementptr i8* %447, i32 129*/
		main_uslcssausiiiloopexit22_scevgep100 = (main_lrphi13ii_447_reg + (1 * 32'd129));
end
always @(posedge clk) begin
	if (reset)
		main_uslcssausiiiloopexit22_scevgep100_reg <= 0;
	/* main: %.us-lcssa.us.i.i.i.loopexit22*/
	/*   %scevgep100 = getelementptr i8* %447, i32 129*/
	else if((cur_state == LEGUP_F_main_BB_uslcssausiiiloopexit22_309)) begin
		main_uslcssausiiiloopexit22_scevgep100_reg <= main_uslcssausiiiloopexit22_scevgep100;
		if (start == 1'b0 && ^(main_uslcssausiiiloopexit22_scevgep100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssausiiiloopexit22_scevgep100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa.us.i.i.i*/
	/*   %ReadBuf.7 = phi i8* [ %scevgep101, %.us-lcssa.us.i.i.i.loopexit ], [ %scevgep100, %.us-lcssa.us.i.i.i.loopexit22 ]*/
	if (((cur_state == LEGUP_F_main_BB_uslcssausiiiloopexit_308) & (memory_controller_waitrequest == 1'd0))) begin
		main_uslcssausiii_ReadBuf7 = main_uslcssausiiiloopexit_scevgep101;
	end
	/* main: %.us-lcssa.us.i.i.i*/
	/*   %ReadBuf.7 = phi i8* [ %scevgep101, %.us-lcssa.us.i.i.i.loopexit ], [ %scevgep100, %.us-lcssa.us.i.i.i.loopexit22 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uslcssausiiiloopexit22_309) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_uslcssausiii_ReadBuf7 = main_uslcssausiiiloopexit22_scevgep100;
	end
end
always @(posedge clk) begin
	if (reset)
		main_uslcssausiii_ReadBuf7_reg <= 0;
	/* main: %.us-lcssa.us.i.i.i*/
	/*   %ReadBuf.7 = phi i8* [ %scevgep101, %.us-lcssa.us.i.i.i.loopexit ], [ %scevgep100, %.us-lcssa.us.i.i.i.loopexit22 ]*/
	else if(((cur_state == LEGUP_F_main_BB_uslcssausiiiloopexit_308) & (memory_controller_waitrequest == 1'd0))) begin
		main_uslcssausiii_ReadBuf7_reg <= main_uslcssausiii_ReadBuf7;
		if (start == 1'b0 && ^(main_uslcssausiii_ReadBuf7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssausiii_ReadBuf7_reg"); $finish; end
	end
	/* main: %.us-lcssa.us.i.i.i*/
	/*   %ReadBuf.7 = phi i8* [ %scevgep101, %.us-lcssa.us.i.i.i.loopexit ], [ %scevgep100, %.us-lcssa.us.i.i.i.loopexit22 ]*/
	else if(((cur_state == LEGUP_F_main_BB_uslcssausiiiloopexit22_309) & (memory_controller_waitrequest == 1'd0))) begin
		main_uslcssausiii_ReadBuf7_reg <= main_uslcssausiii_ReadBuf7;
		if (start == 1'b0 && ^(main_uslcssausiii_ReadBuf7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssausiii_ReadBuf7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa.us.i.i.i*/
	/*   %..v.i.i.i = select i1 %469, i32 -65, i32 -129*/
		main_uslcssausiii_viii = (main_468_469_reg ? -32'd65 : -32'd129);
end
always @(posedge clk) begin
	if (reset)
		main_uslcssausiii_viii_reg <= 0;
	/* main: %.us-lcssa.us.i.i.i*/
	/*   %..v.i.i.i = select i1 %469, i32 -65, i32 -129*/
	else if((cur_state == LEGUP_F_main_BB_uslcssausiii_310)) begin
		main_uslcssausiii_viii_reg <= main_uslcssausiii_viii;
		if (start == 1'b0 && ^(main_uslcssausiii_viii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssausiii_viii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa.us.i.i.i*/
	/*   %..i.i.i = add i32 %..v.i.i.i, %length.02.i.i.i*/
		main_uslcssausiii_iii = (main_uslcssausiii_viii + main_lrphi13ii_length02iii_reg);
end
always @(posedge clk) begin
	if (reset)
		main_uslcssausiii_iii_reg <= 0;
	/* main: %.us-lcssa.us.i.i.i*/
	/*   %..i.i.i = add i32 %..v.i.i.i, %length.02.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_uslcssausiii_310)) begin
		main_uslcssausiii_iii_reg <= main_uslcssausiii_iii;
		if (start == 1'b0 && ^(main_uslcssausiii_iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssausiii_iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa.us.i.i.i*/
	/*   %490 = icmp sgt i32 %..i.i.i, 0*/
		main_uslcssausiii_490 = ($signed(main_uslcssausiii_iii) > $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_uslcssausiii_490_reg <= 0;
	/* main: %.us-lcssa.us.i.i.i*/
	/*   %490 = icmp sgt i32 %..i.i.i, 0*/
	else if((cur_state == LEGUP_F_main_BB_uslcssausiii_310)) begin
		main_uslcssausiii_490_reg <= main_uslcssausiii_490;
		if (start == 1'b0 && ^(main_uslcssausiii_490) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssausiii_490_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa.us.i.i.i*/
	/*   %indvar.next193 = add i32 %indvar192, 1*/
		main_uslcssausiii_indvarnext193 = (main_lrphi13ii_indvar192_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_uslcssausiii_indvarnext193_reg <= 0;
	/* main: %.us-lcssa.us.i.i.i*/
	/*   %indvar.next193 = add i32 %indvar192, 1*/
	else if((cur_state == LEGUP_F_main_BB_uslcssausiii_310)) begin
		main_uslcssausiii_indvarnext193_reg <= main_uslcssausiii_indvarnext193;
		if (start == 1'b0 && ^(main_uslcssausiii_indvarnext193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssausiii_indvarnext193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %p_jinfo_jpeg_data.0 = phi i8* [ %scevgep.i.i.i, %get_sos.exit.i.i ], [ null, %read_markers.exit.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_get_sosexitii_183) & (memory_controller_waitrequest == 1'd0))) begin
		main_read_markersexiti_p_jinfo_jpeg_data0 = main_get_sosexitii_scevgepiii;
	end
	/* main: %read_markers.exit.i*/
	/*   %p_jinfo_jpeg_data.0 = phi i8* [ %scevgep.i.i.i, %get_sos.exit.i.i ], [ null, %read_markers.exit.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_read_markersexitiloopexit_311) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_read_markersexiti_p_jinfo_jpeg_data0 = 0;
	end
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_p_jinfo_jpeg_data0_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %p_jinfo_jpeg_data.0 = phi i8* [ %scevgep.i.i.i, %get_sos.exit.i.i ], [ null, %read_markers.exit.i.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_get_sosexitii_183) & (memory_controller_waitrequest == 1'd0))) begin
		main_read_markersexiti_p_jinfo_jpeg_data0_reg <= main_read_markersexiti_p_jinfo_jpeg_data0;
		if (start == 1'b0 && ^(main_read_markersexiti_p_jinfo_jpeg_data0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_p_jinfo_jpeg_data0_reg"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %p_jinfo_jpeg_data.0 = phi i8* [ %scevgep.i.i.i, %get_sos.exit.i.i ], [ null, %read_markers.exit.i.loopexit ]*/
	else if(((cur_state == LEGUP_F_main_BB_read_markersexitiloopexit_311) & (memory_controller_waitrequest == 1'd0))) begin
		main_read_markersexiti_p_jinfo_jpeg_data0_reg <= main_read_markersexiti_p_jinfo_jpeg_data0;
		if (start == 1'b0 && ^(main_read_markersexiti_p_jinfo_jpeg_data0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_p_jinfo_jpeg_data0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %491 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
		main_read_markersexiti_491 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_491_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %491 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_314)) begin
		main_read_markersexiti_491_reg <= main_read_markersexiti_491;
		if (start == 1'b0 && ^(main_read_markersexiti_491) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_491_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %492 = sext i16 %491 to i32*/
		main_read_markersexiti_492 = $signed(main_read_markersexiti_491);
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_492_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %492 = sext i16 %491 to i32*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_314)) begin
		main_read_markersexiti_492_reg <= main_read_markersexiti_492;
		if (start == 1'b0 && ^(main_read_markersexiti_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_492_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %493 = add nsw i32 %492, -1*/
		main_read_markersexiti_493 = (main_read_markersexiti_492 + -32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_493_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %493 = add nsw i32 %492, -1*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_314)) begin
		main_read_markersexiti_493_reg <= main_read_markersexiti_493;
		if (start == 1'b0 && ^(main_read_markersexiti_493) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_493_reg"); $finish; end
	end
end
always @(*) begin
	main_read_markersexiti_494 = main_signed_divide_32_0;
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_494_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %494 = sdiv i32 %493, 8*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_347)) begin
		main_read_markersexiti_494_reg <= main_read_markersexiti_494;
		if (start == 1'b0 && ^(main_read_markersexiti_494) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_494_reg"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %494 = sdiv i32 %493, 8*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_347)) begin
		main_read_markersexiti_494_reg <= main_read_markersexiti_494;
		if (start == 1'b0 && ^(main_read_markersexiti_494) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_494_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %495 = add i32 %494, 1*/
		main_read_markersexiti_495 = (main_read_markersexiti_494 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_495_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %495 = add i32 %494, 1*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_347)) begin
		main_read_markersexiti_495_reg <= main_read_markersexiti_495;
		if (start == 1'b0 && ^(main_read_markersexiti_495) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_495_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %496 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
		main_read_markersexiti_496 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_496_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %496 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_314)) begin
		main_read_markersexiti_496_reg <= main_read_markersexiti_496;
		if (start == 1'b0 && ^(main_read_markersexiti_496) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_496_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %497 = sext i16 %496 to i32*/
		main_read_markersexiti_497 = $signed(main_read_markersexiti_496);
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_497_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %497 = sext i16 %496 to i32*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_314)) begin
		main_read_markersexiti_497_reg <= main_read_markersexiti_497;
		if (start == 1'b0 && ^(main_read_markersexiti_497) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_497_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %498 = add nsw i32 %497, -1*/
		main_read_markersexiti_498 = (main_read_markersexiti_497 + -32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_498_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %498 = add nsw i32 %497, -1*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_314)) begin
		main_read_markersexiti_498_reg <= main_read_markersexiti_498;
		if (start == 1'b0 && ^(main_read_markersexiti_498) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_498_reg"); $finish; end
	end
end
always @(*) begin
	main_read_markersexiti_499 = main_signed_divide_32_0;
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_499_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %499 = sdiv i32 %498, 8*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_346)) begin
		main_read_markersexiti_499_reg <= main_read_markersexiti_499;
		if (start == 1'b0 && ^(main_read_markersexiti_499) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_499_reg"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %499 = sdiv i32 %498, 8*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_346)) begin
		main_read_markersexiti_499_reg <= main_read_markersexiti_499;
		if (start == 1'b0 && ^(main_read_markersexiti_499) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_499_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %500 = add i32 %499, 1*/
		main_read_markersexiti_500 = (main_read_markersexiti_499 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_500_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %500 = add i32 %499, 1*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_346)) begin
		main_read_markersexiti_500_reg <= main_read_markersexiti_500;
		if (start == 1'b0 && ^(main_read_markersexiti_500) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_500_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %501 = mul i32 %500, %495*/
		main_read_markersexiti_501 = (main_read_markersexiti_500_reg * main_read_markersexiti_495);
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_501_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %501 = mul i32 %500, %495*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_347)) begin
		main_read_markersexiti_501_reg <= main_read_markersexiti_501;
		if (start == 1'b0 && ^(main_read_markersexiti_501) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_501_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
		main_read_markersexiti_502 = huff_make_dhuff_tb_return_val_reg;
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_502_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_function_call_348)) begin
		main_read_markersexiti_502_reg <= main_read_markersexiti_502;
		if (start == 1'b0 && ^(main_read_markersexiti_502) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_502_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
		main_read_markersexiti_503 = huff_make_dhuff_tb_return_val_reg;
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_503_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_function_call_351)) begin
		main_read_markersexiti_503_reg <= main_read_markersexiti_503;
		if (start == 1'b0 && ^(main_read_markersexiti_503) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_503_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
		main_read_markersexiti_504 = huff_make_dhuff_tb_return_val_reg;
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_504_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_function_call_354)) begin
		main_read_markersexiti_504_reg <= main_read_markersexiti_504;
		if (start == 1'b0 && ^(main_read_markersexiti_504) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_504_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
		main_read_markersexiti_505 = huff_make_dhuff_tb_return_val_reg;
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_505_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_function_call_357)) begin
		main_read_markersexiti_505_reg <= main_read_markersexiti_505;
		if (start == 1'b0 && ^(main_read_markersexiti_505) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_505_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %506 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 0, i32 0*/
if (reset) begin main_read_markersexiti_506 = 0; end
		main_read_markersexiti_506 = `TAG_main_0_HuffBuffii_a;
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_506_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %506 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 0, i32 0*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_312)) begin
		main_read_markersexiti_506_reg <= main_read_markersexiti_506;
		if (start == 1'b0 && ^(main_read_markersexiti_506) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_506_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %507 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 1, i32 0*/
if (reset) begin main_read_markersexiti_507 = 0; end
		main_read_markersexiti_507 = (`TAG_main_0_HuffBuffii_a + (256 * 32'd1));
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_507_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %507 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 1, i32 0*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_312)) begin
		main_read_markersexiti_507_reg <= main_read_markersexiti_507;
		if (start == 1'b0 && ^(main_read_markersexiti_507) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_507_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %508 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 2, i32 0*/
if (reset) begin main_read_markersexiti_508 = 0; end
		main_read_markersexiti_508 = (`TAG_main_0_HuffBuffii_a + (256 * 32'd2));
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_508_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %508 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 2, i32 0*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_312)) begin
		main_read_markersexiti_508_reg <= main_read_markersexiti_508;
		if (start == 1'b0 && ^(main_read_markersexiti_508) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_508_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %509 = icmp eq i32 %p_jinfo_smp_fact.0.ph, 0*/
		main_read_markersexiti_509 = (main_loopexitipreheaderiiouter_p_jinfo_smp_fact0ph_reg == 32'd0);
end
always @(posedge clk) begin
	if (reset)
		main_read_markersexiti_509_reg <= 0;
	/* main: %read_markers.exit.i*/
	/*   %509 = icmp eq i32 %p_jinfo_smp_fact.0.ph, 0*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_312)) begin
		main_read_markersexiti_509_reg <= main_read_markersexiti_509;
		if (start == 1'b0 && ^(main_read_markersexiti_509) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markersexiti_509_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %510*/
	/*   %512 = icmp sgt i32 %501, 0*/
		main_510_512 = ($signed(main_read_markersexiti_501_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_510_512_reg <= 0;
	/* main: %510*/
	/*   %512 = icmp sgt i32 %501, 0*/
	else if((cur_state == LEGUP_F_main_BB__510_365)) begin
		main_510_512_reg <= main_510_512;
		if (start == 1'b0 && ^(main_510_512) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_510_512_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %513 = getelementptr inbounds [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 0*/
if (reset) begin main_preheader46lrphii_513 = 0; end
		main_preheader46lrphii_513 = `TAG_main_0_QuantBuffiii_a;
end
always @(posedge clk) begin
	if (reset)
		main_preheader46lrphii_513_reg <= 0;
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %513 = getelementptr inbounds [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 0*/
	else if((cur_state == LEGUP_F_main_BB_preheader46lrphii_366)) begin
		main_preheader46lrphii_513_reg <= main_preheader46lrphii_513;
		if (start == 1'b0 && ^(main_preheader46lrphii_513) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader46lrphii_513_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %514 = getelementptr inbounds [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 64*/
if (reset) begin main_preheader46lrphii_514 = 0; end
		main_preheader46lrphii_514 = (`TAG_main_0_QuantBuffiii_a + (4 * 32'd64));
end
always @(posedge clk) begin
	if (reset)
		main_preheader46lrphii_514_reg <= 0;
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %514 = getelementptr inbounds [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 64*/
	else if((cur_state == LEGUP_F_main_BB_preheader46lrphii_366)) begin
		main_preheader46lrphii_514_reg <= main_preheader46lrphii_514;
		if (start == 1'b0 && ^(main_preheader46lrphii_514) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader46lrphii_514_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %515 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 0*/
if (reset) begin main_preheader46lrphii_515 = 0; end
		main_preheader46lrphii_515 = `TAG_main_0_IDCTBuffii_a;
end
always @(posedge clk) begin
	if (reset)
		main_preheader46lrphii_515_reg <= 0;
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %515 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 0*/
	else if((cur_state == LEGUP_F_main_BB_preheader46lrphii_366)) begin
		main_preheader46lrphii_515_reg <= main_preheader46lrphii_515;
		if (start == 1'b0 && ^(main_preheader46lrphii_515) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader46lrphii_515_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %516 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 64*/
if (reset) begin main_preheader46lrphii_516 = 0; end
		main_preheader46lrphii_516 = (`TAG_main_0_IDCTBuffii_a + (4 * 32'd64));
end
always @(posedge clk) begin
	if (reset)
		main_preheader46lrphii_516_reg <= 0;
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %516 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 64*/
	else if((cur_state == LEGUP_F_main_BB_preheader46lrphii_366)) begin
		main_preheader46lrphii_516_reg <= main_preheader46lrphii_516;
		if (start == 1'b0 && ^(main_preheader46lrphii_516) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader46lrphii_516_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %517 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 0*/
if (reset) begin main_preheader46lrphii_517 = 0; end
		main_preheader46lrphii_517 = (`TAG_main_0_IDCTBuffii_a + (256 * 32'd1));
end
always @(posedge clk) begin
	if (reset)
		main_preheader46lrphii_517_reg <= 0;
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %517 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 0*/
	else if((cur_state == LEGUP_F_main_BB_preheader46lrphii_366)) begin
		main_preheader46lrphii_517_reg <= main_preheader46lrphii_517;
		if (start == 1'b0 && ^(main_preheader46lrphii_517) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader46lrphii_517_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %518 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 64*/
if (reset) begin main_preheader46lrphii_518 = 0; end
		main_preheader46lrphii_518 = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd1) + (4 * 32'd64)));
end
always @(posedge clk) begin
	if (reset)
		main_preheader46lrphii_518_reg <= 0;
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %518 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 64*/
	else if((cur_state == LEGUP_F_main_BB_preheader46lrphii_366)) begin
		main_preheader46lrphii_518_reg <= main_preheader46lrphii_518;
		if (start == 1'b0 && ^(main_preheader46lrphii_518) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader46lrphii_518_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %519 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 0*/
if (reset) begin main_preheader46lrphii_519 = 0; end
		main_preheader46lrphii_519 = (`TAG_main_0_IDCTBuffii_a + (256 * 32'd2));
end
always @(posedge clk) begin
	if (reset)
		main_preheader46lrphii_519_reg <= 0;
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %519 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 0*/
	else if((cur_state == LEGUP_F_main_BB_preheader46lrphii_366)) begin
		main_preheader46lrphii_519_reg <= main_preheader46lrphii_519;
		if (start == 1'b0 && ^(main_preheader46lrphii_519) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader46lrphii_519_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %520 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 64*/
if (reset) begin main_preheader46lrphii_520 = 0; end
		main_preheader46lrphii_520 = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd2) + (4 * 32'd64)));
end
always @(posedge clk) begin
	if (reset)
		main_preheader46lrphii_520_reg <= 0;
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %520 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 64*/
	else if((cur_state == LEGUP_F_main_BB_preheader46lrphii_366)) begin
		main_preheader46lrphii_520_reg <= main_preheader46lrphii_520;
		if (start == 1'b0 && ^(main_preheader46lrphii_520) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader46lrphii_520_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %521 = add i32 %499, 1*/
		main_preheader46lrphii_521 = (main_read_markersexiti_499_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_preheader46lrphii_521_reg <= 0;
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %521 = add i32 %499, 1*/
	else if((cur_state == LEGUP_F_main_BB_preheader46lrphii_366)) begin
		main_preheader46lrphii_521_reg <= main_preheader46lrphii_521;
		if (start == 1'b0 && ^(main_preheader46lrphii_521) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader46lrphii_521_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %522 = add i32 %494, 1*/
		main_preheader46lrphii_522 = (main_read_markersexiti_494_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_preheader46lrphii_522_reg <= 0;
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %522 = add i32 %494, 1*/
	else if((cur_state == LEGUP_F_main_BB_preheader46lrphii_366)) begin
		main_preheader46lrphii_522_reg <= main_preheader46lrphii_522;
		if (start == 1'b0 && ^(main_preheader46lrphii_522) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader46lrphii_522_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %523 = mul i32 %521, %522*/
		main_preheader46lrphii_523 = (main_preheader46lrphii_521 * main_preheader46lrphii_522);
end
always @(posedge clk) begin
	if (reset)
		main_preheader46lrphii_523_reg <= 0;
	/* main: %.preheader46.lr.ph.i.i*/
	/*   %523 = mul i32 %521, %522*/
	else if((cur_state == LEGUP_F_main_BB_preheader46lrphii_366)) begin
		main_preheader46lrphii_523_reg <= main_preheader46lrphii_523;
		if (start == 1'b0 && ^(main_preheader46lrphii_523) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader46lrphii_523_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader46.i.i*/
	/*   %CurrentMCU.054.i.i = phi i32 [ 0, %.preheader46.lr.ph.i.i ], [ %640, %639 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader46lrphii_366) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader46ii_CurrentMCU054ii = 32'd0;
	end
	/* main: %.preheader46.i.i*/
	/*   %CurrentMCU.054.i.i = phi i32 [ 0, %.preheader46.lr.ph.i.i ], [ %640, %639 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__639_437) & (memory_controller_waitrequest == 1'd0)) & (main_639_exitcond93 == 1'd0))) */ begin
		main_preheader46ii_CurrentMCU054ii = main_639_640;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheader46ii_CurrentMCU054ii_reg <= 0;
	/* main: %.preheader46.i.i*/
	/*   %CurrentMCU.054.i.i = phi i32 [ 0, %.preheader46.lr.ph.i.i ], [ %640, %639 ]*/
	else if(((cur_state == LEGUP_F_main_BB_preheader46lrphii_366) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader46ii_CurrentMCU054ii_reg <= main_preheader46ii_CurrentMCU054ii;
		if (start == 1'b0 && ^(main_preheader46ii_CurrentMCU054ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader46ii_CurrentMCU054ii_reg"); $finish; end
	end
	/* main: %.preheader46.i.i*/
	/*   %CurrentMCU.054.i.i = phi i32 [ 0, %.preheader46.lr.ph.i.i ], [ %640, %639 ]*/
	else if((((cur_state == LEGUP_F_main_BB__639_437) & (memory_controller_waitrequest == 1'd0)) & (main_639_exitcond93 == 1'd0))) begin
		main_preheader46ii_CurrentMCU054ii_reg <= main_preheader46ii_CurrentMCU054ii;
		if (start == 1'b0 && ^(main_preheader46ii_CurrentMCU054ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader46ii_CurrentMCU054ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %524*/
	/*   %i.02.i.i.i.i = phi i32 [ 0, %.preheader46.i.i ], [ %528, %524 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader46ii_369) & (memory_controller_waitrequest == 1'd0))) begin
		main_524_i02iiii = 32'd0;
	end
	/* main: %524*/
	/*   %i.02.i.i.i.i = phi i32 [ 0, %.preheader46.i.i ], [ %528, %524 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__524_374) & (memory_controller_waitrequest == 1'd0)) & (main_524_exitcond19_reg == 1'd0))) */ begin
		main_524_i02iiii = main_524_528_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_524_i02iiii_reg <= 0;
	/* main: %524*/
	/*   %i.02.i.i.i.i = phi i32 [ 0, %.preheader46.i.i ], [ %528, %524 ]*/
	else if(((cur_state == LEGUP_F_main_BB_preheader46ii_369) & (memory_controller_waitrequest == 1'd0))) begin
		main_524_i02iiii_reg <= main_524_i02iiii;
		if (start == 1'b0 && ^(main_524_i02iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_i02iiii_reg"); $finish; end
	end
	/* main: %524*/
	/*   %i.02.i.i.i.i = phi i32 [ 0, %.preheader46.i.i ], [ %528, %524 ]*/
	else if((((cur_state == LEGUP_F_main_BB__524_374) & (memory_controller_waitrequest == 1'd0)) & (main_524_exitcond19_reg == 1'd0))) begin
		main_524_i02iiii_reg <= main_524_i02iiii;
		if (start == 1'b0 && ^(main_524_i02iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_i02iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %524*/
	/*   %scevgep20 = getelementptr [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i.i.i*/
		main_524_scevgep20 = (1'd0 + (4 * main_524_i02iiii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_524_scevgep20_reg <= 0;
	/* main: %524*/
	/*   %scevgep20 = getelementptr [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB__524_370)) begin
		main_524_scevgep20_reg <= main_524_scevgep20;
		if (start == 1'b0 && ^(main_524_scevgep20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_scevgep20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %524*/
	/*   %.01.i.i.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %i.02.i.i.i.i*/
		main_524_01iiii = (`TAG_main_0_QuantBuffiii_a + (4 * main_524_i02iiii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_524_01iiii_reg <= 0;
	/* main: %524*/
	/*   %.01.i.i.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %i.02.i.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB__524_370)) begin
		main_524_01iiii_reg <= main_524_01iiii;
		if (start == 1'b0 && ^(main_524_01iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_01iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %524*/
	/*   %525 = load i32* %scevgep20, align 4, !tbaa !1*/
		main_524_525 = zigzag_index_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_524_525_reg <= 0;
	/* main: %524*/
	/*   %525 = load i32* %scevgep20, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__524_371)) begin
		main_524_525_reg <= main_524_525;
		if (start == 1'b0 && ^(main_524_525) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_525_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %524*/
	/*   %526 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 0, i32 %525*/
		main_524_526 = (`TAG_main_0_HuffBuffii_a + (4 * main_524_525));
end
always @(posedge clk) begin
	if (reset)
		main_524_526_reg <= 0;
	/* main: %524*/
	/*   %526 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 0, i32 %525*/
	else if((cur_state == LEGUP_F_main_BB__524_371)) begin
		main_524_526_reg <= main_524_526;
		if (start == 1'b0 && ^(main_524_526) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_526_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %524*/
	/*   %527 = load i32* %526, align 4, !tbaa !1*/
		main_524_527 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_524_527_reg <= 0;
	/* main: %524*/
	/*   %527 = load i32* %526, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__524_373)) begin
		main_524_527_reg <= main_524_527;
		if (start == 1'b0 && ^(main_524_527) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_527_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %524*/
	/*   %528 = add nsw i32 %i.02.i.i.i.i, 1*/
		main_524_528 = (main_524_i02iiii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_524_528_reg <= 0;
	/* main: %524*/
	/*   %528 = add nsw i32 %i.02.i.i.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__524_370)) begin
		main_524_528_reg <= main_524_528;
		if (start == 1'b0 && ^(main_524_528) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_528_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %524*/
	/*   %exitcond19 = icmp eq i32 %528, 64*/
		main_524_exitcond19 = (main_524_528 == 32'd64);
end
always @(posedge clk) begin
	if (reset)
		main_524_exitcond19_reg <= 0;
	/* main: %524*/
	/*   %exitcond19 = icmp eq i32 %528, 64*/
	else if((cur_state == LEGUP_F_main_BB__524_370)) begin
		main_524_exitcond19_reg <= main_524_exitcond19;
		if (start == 1'b0 && ^(main_524_exitcond19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_exitcond19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i.i.i*/
	/*   %529 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 0), align 1, !tbaa !5*/
		main_IZigzagMatrixexitiii_529 = p_jinfo_comps_info_quant_tbl_no_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexitiii_529_reg <= 0;
	/* main: %IZigzagMatrix.exit.i.i.i*/
	/*   %529 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 0), align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexitiii_376)) begin
		main_IZigzagMatrixexitiii_529_reg <= main_IZigzagMatrixexitiii_529;
		if (start == 1'b0 && ^(main_IZigzagMatrixexitiii_529) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexitiii_529_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i.i.i*/
	/*   %530 = sext i8 %529 to i32*/
		main_IZigzagMatrixexitiii_530 = $signed(main_IZigzagMatrixexitiii_529);
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexitiii_530_reg <= 0;
	/* main: %IZigzagMatrix.exit.i.i.i*/
	/*   %530 = sext i8 %529 to i32*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexitiii_376)) begin
		main_IZigzagMatrixexitiii_530_reg <= main_IZigzagMatrixexitiii_530;
		if (start == 1'b0 && ^(main_IZigzagMatrixexitiii_530) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexitiii_530_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i.i.i*/
	/*   %531 = add nsw i32 %530, 1*/
		main_IZigzagMatrixexitiii_531 = (main_IZigzagMatrixexitiii_530 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexitiii_531_reg <= 0;
	/* main: %IZigzagMatrix.exit.i.i.i*/
	/*   %531 = add nsw i32 %530, 1*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexitiii_376)) begin
		main_IZigzagMatrixexitiii_531_reg <= main_IZigzagMatrixexitiii_531;
		if (start == 1'b0 && ^(main_IZigzagMatrixexitiii_531) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexitiii_531_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %indvar = phi i32 [ %indvar.next, %532 ], [ 0, %IZigzagMatrix.exit.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_IZigzagMatrixexitiii_376) & (memory_controller_waitrequest == 1'd0))) begin
		main_532_indvar = 32'd0;
	end
	/* main: %532*/
	/*   %indvar = phi i32 [ %indvar.next, %532 ], [ 0, %IZigzagMatrix.exit.i.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__532_380) & (memory_controller_waitrequest == 1'd0)) & (main_532_537_reg == 1'd1))) */ begin
		main_532_indvar = main_532_indvarnext_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_532_indvar_reg <= 0;
	/* main: %532*/
	/*   %indvar = phi i32 [ %indvar.next, %532 ], [ 0, %IZigzagMatrix.exit.i.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_IZigzagMatrixexitiii_376) & (memory_controller_waitrequest == 1'd0))) begin
		main_532_indvar_reg <= main_532_indvar;
		if (start == 1'b0 && ^(main_532_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_indvar_reg"); $finish; end
	end
	/* main: %532*/
	/*   %indvar = phi i32 [ %indvar.next, %532 ], [ 0, %IZigzagMatrix.exit.i.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB__532_380) & (memory_controller_waitrequest == 1'd0)) & (main_532_537_reg == 1'd1))) begin
		main_532_indvar_reg <= main_532_indvar;
		if (start == 1'b0 && ^(main_532_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %533 = add i32 %indvar, 1*/
		main_532_533 = (main_532_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_532_533_reg <= 0;
	/* main: %532*/
	/*   %533 = add i32 %indvar, 1*/
	else if((cur_state == LEGUP_F_main_BB__532_377)) begin
		main_532_533_reg <= main_532_533;
		if (start == 1'b0 && ^(main_532_533) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_533_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %scevgep22 = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %533*/
		main_532_scevgep22 = (`TAG_main_0_QuantBuffiii_a + (4 * main_532_533_reg));
end
always @(posedge clk) begin
	if (reset)
		main_532_scevgep22_reg <= 0;
	/* main: %532*/
	/*   %scevgep22 = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %533*/
	else if((cur_state == LEGUP_F_main_BB__532_378)) begin
		main_532_scevgep22_reg <= main_532_scevgep22;
		if (start == 1'b0 && ^(main_532_scevgep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_scevgep22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %mptr.02.i.i.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %indvar*/
		main_532_mptr02iiii = (`TAG_main_0_QuantBuffiii_a + (4 * main_532_indvar_reg));
end
always @(posedge clk) begin
	if (reset)
		main_532_mptr02iiii_reg <= 0;
	/* main: %532*/
	/*   %mptr.02.i.i.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %indvar*/
	else if((cur_state == LEGUP_F_main_BB__532_377)) begin
		main_532_mptr02iiii_reg <= main_532_mptr02iiii;
		if (start == 1'b0 && ^(main_532_mptr02iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_mptr02iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %.01.i2.i.i.i = getelementptr [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %531, i32 %indvar*/
		main_532_01i2iii = (1'd0 + ((256 * main_IZigzagMatrixexitiii_531_reg) + (4 * main_532_indvar_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_532_01i2iii_reg <= 0;
	/* main: %532*/
	/*   %.01.i2.i.i.i = getelementptr [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %531, i32 %indvar*/
	else if((cur_state == LEGUP_F_main_BB__532_377)) begin
		main_532_01i2iii_reg <= main_532_01i2iii;
		if (start == 1'b0 && ^(main_532_01i2iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_01i2iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %534 = load i32* %mptr.02.i.i.i.i, align 4, !tbaa !1*/
		main_532_534 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_532_534_reg <= 0;
	/* main: %532*/
	/*   %534 = load i32* %mptr.02.i.i.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__532_379)) begin
		main_532_534_reg <= main_532_534;
		if (start == 1'b0 && ^(main_532_534) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_534_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %535 = load i32* %.01.i2.i.i.i, align 4, !tbaa !1*/
		main_532_535 = p_jinfo_quant_tbl_quantval_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_532_535_reg <= 0;
	/* main: %532*/
	/*   %535 = load i32* %.01.i2.i.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__532_378)) begin
		main_532_535_reg <= main_532_535;
		if (start == 1'b0 && ^(main_532_535) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_535_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %536 = mul nsw i32 %535, %534*/
		main_532_536 = (main_532_535_reg * main_532_534);
end
always @(posedge clk) begin
	if (reset)
		main_532_536_reg <= 0;
	/* main: %532*/
	/*   %536 = mul nsw i32 %535, %534*/
	else if((cur_state == LEGUP_F_main_BB__532_379)) begin
		main_532_536_reg <= main_532_536;
		if (start == 1'b0 && ^(main_532_536) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_536_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %537 = icmp ult i32* %scevgep22, %514*/
		main_532_537 = (main_532_scevgep22_reg < main_preheader46lrphii_514_reg);
end
always @(posedge clk) begin
	if (reset)
		main_532_537_reg <= 0;
	/* main: %532*/
	/*   %537 = icmp ult i32* %scevgep22, %514*/
	else if((cur_state == LEGUP_F_main_BB__532_379)) begin
		main_532_537_reg <= main_532_537;
		if (start == 1'b0 && ^(main_532_537) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_537_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_532_indvarnext = (main_532_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_532_indvarnext_reg <= 0;
	/* main: %532*/
	/*   %indvar.next = add i32 %indvar, 1*/
	else if((cur_state == LEGUP_F_main_BB__532_377)) begin
		main_532_indvarnext_reg <= main_532_indvarnext;
		if (start == 1'b0 && ^(main_532_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %538*/
	/*   %indvar25 = phi i32 [ %indvar.next26, %538 ], [ 0, %IQuantize.exit.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_IQuantizeexitiii_383) & (memory_controller_waitrequest == 1'd0))) begin
		main_538_indvar25 = 32'd0;
	end
	/* main: %538*/
	/*   %indvar25 = phi i32 [ %indvar.next26, %538 ], [ 0, %IQuantize.exit.i.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__538_387) & (memory_controller_waitrequest == 1'd0)) & (main_538_542_reg == 1'd1))) */ begin
		main_538_indvar25 = main_538_indvarnext26_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_538_indvar25_reg <= 0;
	/* main: %538*/
	/*   %indvar25 = phi i32 [ %indvar.next26, %538 ], [ 0, %IQuantize.exit.i.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_IQuantizeexitiii_383) & (memory_controller_waitrequest == 1'd0))) begin
		main_538_indvar25_reg <= main_538_indvar25;
		if (start == 1'b0 && ^(main_538_indvar25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_538_indvar25_reg"); $finish; end
	end
	/* main: %538*/
	/*   %indvar25 = phi i32 [ %indvar.next26, %538 ], [ 0, %IQuantize.exit.i.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB__538_387) & (memory_controller_waitrequest == 1'd0)) & (main_538_542_reg == 1'd1))) begin
		main_538_indvar25_reg <= main_538_indvar25;
		if (start == 1'b0 && ^(main_538_indvar25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_538_indvar25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %538*/
	/*   %539 = add i32 %indvar25, 1*/
		main_538_539 = (main_538_indvar25_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_538_539_reg <= 0;
	/* main: %538*/
	/*   %539 = add i32 %indvar25, 1*/
	else if((cur_state == LEGUP_F_main_BB__538_384)) begin
		main_538_539_reg <= main_538_539;
		if (start == 1'b0 && ^(main_538_539) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_538_539_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %538*/
	/*   %scevgep27 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 %539*/
		main_538_scevgep27 = (`TAG_main_0_IDCTBuffii_a + (4 * main_538_539_reg));
end
always @(posedge clk) begin
	if (reset)
		main_538_scevgep27_reg <= 0;
	/* main: %538*/
	/*   %scevgep27 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 %539*/
	else if((cur_state == LEGUP_F_main_BB__538_385)) begin
		main_538_scevgep27_reg <= main_538_scevgep27;
		if (start == 1'b0 && ^(main_538_scevgep27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_538_scevgep27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %538*/
	/*   %mptr.01.i1.i.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 %indvar25*/
		main_538_mptr01i1iii = (`TAG_main_0_IDCTBuffii_a + (4 * main_538_indvar25_reg));
end
always @(posedge clk) begin
	if (reset)
		main_538_mptr01i1iii_reg <= 0;
	/* main: %538*/
	/*   %mptr.01.i1.i.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 %indvar25*/
	else if((cur_state == LEGUP_F_main_BB__538_384)) begin
		main_538_mptr01i1iii_reg <= main_538_mptr01i1iii;
		if (start == 1'b0 && ^(main_538_mptr01i1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_538_mptr01i1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %538*/
	/*   %540 = load i32* %mptr.01.i1.i.i.i, align 4, !tbaa !1*/
		main_538_540 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_538_540_reg <= 0;
	/* main: %538*/
	/*   %540 = load i32* %mptr.01.i1.i.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__538_386)) begin
		main_538_540_reg <= main_538_540;
		if (start == 1'b0 && ^(main_538_540) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_538_540_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %538*/
	/*   %541 = add nsw i32 %540, 128*/
		main_538_541 = (main_538_540 + 32'd128);
end
always @(posedge clk) begin
	if (reset)
		main_538_541_reg <= 0;
	/* main: %538*/
	/*   %541 = add nsw i32 %540, 128*/
	else if((cur_state == LEGUP_F_main_BB__538_386)) begin
		main_538_541_reg <= main_538_541;
		if (start == 1'b0 && ^(main_538_541) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_538_541_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %538*/
	/*   %542 = icmp ult i32* %scevgep27, %516*/
		main_538_542 = (main_538_scevgep27_reg < main_preheader46lrphii_516_reg);
end
always @(posedge clk) begin
	if (reset)
		main_538_542_reg <= 0;
	/* main: %538*/
	/*   %542 = icmp ult i32* %scevgep27, %516*/
	else if((cur_state == LEGUP_F_main_BB__538_386)) begin
		main_538_542_reg <= main_538_542;
		if (start == 1'b0 && ^(main_538_542) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_538_542_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %538*/
	/*   %indvar.next26 = add i32 %indvar25, 1*/
		main_538_indvarnext26 = (main_538_indvar25_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_538_indvarnext26_reg <= 0;
	/* main: %538*/
	/*   %indvar.next26 = add i32 %indvar25, 1*/
	else if((cur_state == LEGUP_F_main_BB__538_384)) begin
		main_538_indvarnext26_reg <= main_538_indvarnext26;
		if (start == 1'b0 && ^(main_538_indvarnext26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_538_indvarnext26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %indvar29 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i.i.i.preheader ], [ %indvar.next30, %550 ]*/
	if (((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexitiiipreheader_388) & (memory_controller_waitrequest == 1'd0))) begin
		main_PostshiftIDctMatrixexitiii_indvar29 = 32'd0;
	end
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %indvar29 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i.i.i.preheader ], [ %indvar.next30, %550 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__550_397) & (memory_controller_waitrequest == 1'd0)) & (main_550_551 == 1'd1))) */ begin
		main_PostshiftIDctMatrixexitiii_indvar29 = main_550_indvarnext30;
	end
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexitiii_indvar29_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %indvar29 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i.i.i.preheader ], [ %indvar.next30, %550 ]*/
	else if(((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexitiiipreheader_388) & (memory_controller_waitrequest == 1'd0))) begin
		main_PostshiftIDctMatrixexitiii_indvar29_reg <= main_PostshiftIDctMatrixexitiii_indvar29;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexitiii_indvar29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexitiii_indvar29_reg"); $finish; end
	end
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %indvar29 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i.i.i.preheader ], [ %indvar.next30, %550 ]*/
	else if((((cur_state == LEGUP_F_main_BB__550_397) & (memory_controller_waitrequest == 1'd0)) & (main_550_551 == 1'd1))) begin
		main_PostshiftIDctMatrixexitiii_indvar29_reg <= main_PostshiftIDctMatrixexitiii_indvar29;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexitiii_indvar29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexitiii_indvar29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %543 = add i32 %indvar29, 1*/
		main_PostshiftIDctMatrixexitiii_543 = (main_PostshiftIDctMatrixexitiii_indvar29_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexitiii_543_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %543 = add i32 %indvar29, 1*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_389)) begin
		main_PostshiftIDctMatrixexitiii_543_reg <= main_PostshiftIDctMatrixexitiii_543;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexitiii_543) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexitiii_543_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %scevgep31 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 %543*/
		main_PostshiftIDctMatrixexitiii_scevgep31 = (`TAG_main_0_IDCTBuffii_a + (4 * main_PostshiftIDctMatrixexitiii_543_reg));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexitiii_scevgep31_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %scevgep31 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 %543*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_390)) begin
		main_PostshiftIDctMatrixexitiii_scevgep31_reg <= main_PostshiftIDctMatrixexitiii_scevgep31;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexitiii_scevgep31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexitiii_scevgep31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %mptr.01.i.i.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 %indvar29*/
		main_PostshiftIDctMatrixexitiii_mptr01iiii = (`TAG_main_0_IDCTBuffii_a + (4 * main_PostshiftIDctMatrixexitiii_indvar29_reg));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexitiii_mptr01iiii_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %mptr.01.i.i.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 %indvar29*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_389)) begin
		main_PostshiftIDctMatrixexitiii_mptr01iiii_reg <= main_PostshiftIDctMatrixexitiii_mptr01iiii;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexitiii_mptr01iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexitiii_mptr01iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %544 = load i32* %mptr.01.i.i.i.i, align 4, !tbaa !1*/
		main_PostshiftIDctMatrixexitiii_544 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexitiii_544_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %544 = load i32* %mptr.01.i.i.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_391)) begin
		main_PostshiftIDctMatrixexitiii_544_reg <= main_PostshiftIDctMatrixexitiii_544;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexitiii_544) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexitiii_544_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %545 = icmp slt i32 %544, 0*/
		main_PostshiftIDctMatrixexitiii_545 = ($signed(main_PostshiftIDctMatrixexitiii_544) < $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexitiii_545_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %545 = icmp slt i32 %544, 0*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_391)) begin
		main_PostshiftIDctMatrixexitiii_545_reg <= main_PostshiftIDctMatrixexitiii_545;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexitiii_545) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexitiii_545_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %547*/
	/*   %548 = icmp sgt i32 %544, 255*/
		main_547_548 = ($signed(main_PostshiftIDctMatrixexitiii_544_reg) > $signed(32'd255));
end
always @(posedge clk) begin
	if (reset)
		main_547_548_reg <= 0;
	/* main: %547*/
	/*   %548 = icmp sgt i32 %544, 255*/
	else if((cur_state == LEGUP_F_main_BB__547_394)) begin
		main_547_548_reg <= main_547_548;
		if (start == 1'b0 && ^(main_547_548) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_547_548_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %550*/
	/*   %551 = icmp ult i32* %scevgep31, %516*/
		main_550_551 = (main_PostshiftIDctMatrixexitiii_scevgep31_reg < main_preheader46lrphii_516_reg);
end
always @(posedge clk) begin
	if (reset)
		main_550_551_reg <= 0;
	/* main: %550*/
	/*   %551 = icmp ult i32* %scevgep31, %516*/
	else if((cur_state == LEGUP_F_main_BB__550_397)) begin
		main_550_551_reg <= main_550_551;
		if (start == 1'b0 && ^(main_550_551) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_550_551_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %550*/
	/*   %indvar.next30 = add i32 %indvar29, 1*/
		main_550_indvarnext30 = (main_PostshiftIDctMatrixexitiii_indvar29_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_550_indvarnext30_reg <= 0;
	/* main: %550*/
	/*   %indvar.next30 = add i32 %indvar29, 1*/
	else if((cur_state == LEGUP_F_main_BB__550_397)) begin
		main_550_indvarnext30_reg <= main_550_indvarnext30;
		if (start == 1'b0 && ^(main_550_indvarnext30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_550_indvarnext30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %i.03.i.i.i = phi i32 [ %582, %581 ], [ 0, %decode_block.exit.2.i.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__581_412) & (memory_controller_waitrequest == 1'd0)) & (main_581_exitcond65_reg == 1'd0))) begin
		main_decode_blockexit2ii_i03iii = main_581_582_reg;
	end
	/* main: %decode_block.exit.2.i.i*/
	/*   %i.03.i.i.i = phi i32 [ %582, %581 ], [ 0, %decode_block.exit.2.i.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decode_blockexit2iipreheader_619) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_decode_blockexit2ii_i03iii = 32'd0;
	end
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_i03iii_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %i.03.i.i.i = phi i32 [ %582, %581 ], [ 0, %decode_block.exit.2.i.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB__581_412) & (memory_controller_waitrequest == 1'd0)) & (main_581_exitcond65_reg == 1'd0))) begin
		main_decode_blockexit2ii_i03iii_reg <= main_decode_blockexit2ii_i03iii;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_i03iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_i03iii_reg"); $finish; end
	end
	/* main: %decode_block.exit.2.i.i*/
	/*   %i.03.i.i.i = phi i32 [ %582, %581 ], [ 0, %decode_block.exit.2.i.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_decode_blockexit2iipreheader_619) & (memory_controller_waitrequest == 1'd0))) begin
		main_decode_blockexit2ii_i03iii_reg <= main_decode_blockexit2ii_i03iii;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_i03iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_i03iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %scevgep66 = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 %i.03.i.i.i*/
		main_decode_blockexit2ii_scevgep66 = (`TAG_g_rgb_buf_a + ((256 * 32'd2) + (4 * main_decode_blockexit2ii_i03iii_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_scevgep66_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %scevgep66 = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 %i.03.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_401)) begin
		main_decode_blockexit2ii_scevgep66_reg <= main_decode_blockexit2ii_scevgep66;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_scevgep66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_scevgep66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %scevgep67 = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 %i.03.i.i.i*/
		main_decode_blockexit2ii_scevgep67 = (`TAG_g_rgb_buf_a + ((256 * 32'd1) + (4 * main_decode_blockexit2ii_i03iii_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_scevgep67_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %scevgep67 = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 %i.03.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_401)) begin
		main_decode_blockexit2ii_scevgep67_reg <= main_decode_blockexit2ii_scevgep67;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_scevgep67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_scevgep67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %scevgep68 = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 %i.03.i.i.i*/
		main_decode_blockexit2ii_scevgep68 = (`TAG_g_rgb_buf_a + (4 * main_decode_blockexit2ii_i03iii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_scevgep68_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %scevgep68 = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 %i.03.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_401)) begin
		main_decode_blockexit2ii_scevgep68_reg <= main_decode_blockexit2ii_scevgep68;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_scevgep68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_scevgep68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %scevgep69 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 %i.03.i.i.i*/
		main_decode_blockexit2ii_scevgep69 = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd2) + (4 * main_decode_blockexit2ii_i03iii_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_scevgep69_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %scevgep69 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 %i.03.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_401)) begin
		main_decode_blockexit2ii_scevgep69_reg <= main_decode_blockexit2ii_scevgep69;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_scevgep69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_scevgep69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %scevgep70 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 %i.03.i.i.i*/
		main_decode_blockexit2ii_scevgep70 = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd1) + (4 * main_decode_blockexit2ii_i03iii_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_scevgep70_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %scevgep70 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 %i.03.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_401)) begin
		main_decode_blockexit2ii_scevgep70_reg <= main_decode_blockexit2ii_scevgep70;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_scevgep70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_scevgep70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %scevgep71 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 %i.03.i.i.i*/
		main_decode_blockexit2ii_scevgep71 = (`TAG_main_0_IDCTBuffii_a + (4 * main_decode_blockexit2ii_i03iii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_scevgep71_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %scevgep71 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 %i.03.i.i.i*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_401)) begin
		main_decode_blockexit2ii_scevgep71_reg <= main_decode_blockexit2ii_scevgep71;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_scevgep71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_scevgep71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %552 = load i32* %scevgep71, align 4, !tbaa !1*/
		main_decode_blockexit2ii_552 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_552_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %552 = load i32* %scevgep71, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_404)) begin
		main_decode_blockexit2ii_552_reg <= main_decode_blockexit2ii_552;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_552) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_552_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %553 = load i32* %scevgep70, align 4, !tbaa !1*/
		main_decode_blockexit2ii_553 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_553_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %553 = load i32* %scevgep70, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_403)) begin
		main_decode_blockexit2ii_553_reg <= main_decode_blockexit2ii_553;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_553) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_553_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %554 = add nsw i32 %553, -128*/
		main_decode_blockexit2ii_554 = (main_decode_blockexit2ii_553 + -32'd128);
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_554_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %554 = add nsw i32 %553, -128*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_403)) begin
		main_decode_blockexit2ii_554_reg <= main_decode_blockexit2ii_554;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_554) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_554_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %555 = load i32* %scevgep69, align 4, !tbaa !1*/
		main_decode_blockexit2ii_555 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_555_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %555 = load i32* %scevgep69, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_403)) begin
		main_decode_blockexit2ii_555_reg <= main_decode_blockexit2ii_555;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_555) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_555_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %556 = add nsw i32 %555, -128*/
		main_decode_blockexit2ii_556 = (main_decode_blockexit2ii_555 + -32'd128);
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_556_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %556 = add nsw i32 %555, -128*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_403)) begin
		main_decode_blockexit2ii_556_reg <= main_decode_blockexit2ii_556;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_556) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_556_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %557 = shl nsw i32 %552, 8*/
		main_decode_blockexit2ii_557 = (main_decode_blockexit2ii_552 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_557_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %557 = shl nsw i32 %552, 8*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_404)) begin
		main_decode_blockexit2ii_557_reg <= main_decode_blockexit2ii_557;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_557) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_557_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %558 = mul nsw i32 %556, 359*/
		main_decode_blockexit2ii_558 = (main_decode_blockexit2ii_556 * 32'd359);
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_558_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %558 = mul nsw i32 %556, 359*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_403)) begin
		main_decode_blockexit2ii_558_reg <= main_decode_blockexit2ii_558;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_558) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_558_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %559 = or i32 %557, 128*/
		main_decode_blockexit2ii_559 = (main_decode_blockexit2ii_557 | 32'd128);
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_559_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %559 = or i32 %557, 128*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_404)) begin
		main_decode_blockexit2ii_559_reg <= main_decode_blockexit2ii_559;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_559) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_559_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %560 = add i32 %558, %559*/
		main_decode_blockexit2ii_560 = (main_decode_blockexit2ii_558_reg + main_decode_blockexit2ii_559);
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_560_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %560 = add i32 %558, %559*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_404)) begin
		main_decode_blockexit2ii_560_reg <= main_decode_blockexit2ii_560;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_560) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_560_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %561 = ashr i32 %560, 8*/
		main_decode_blockexit2ii_561 = ($signed(main_decode_blockexit2ii_560) >>> 32'd8);
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_561_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %561 = ashr i32 %560, 8*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_404)) begin
		main_decode_blockexit2ii_561_reg <= main_decode_blockexit2ii_561;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_561) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_561_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %562 = mul i32 %554, -88*/
		main_decode_blockexit2ii_562 = (main_decode_blockexit2ii_554 * -32'd88);
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_562_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %562 = mul i32 %554, -88*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_403)) begin
		main_decode_blockexit2ii_562_reg <= main_decode_blockexit2ii_562;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_562) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_562_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %563 = mul i32 %556, -182*/
		main_decode_blockexit2ii_563 = (main_decode_blockexit2ii_556 * -32'd182);
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_563_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %563 = mul i32 %556, -182*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_403)) begin
		main_decode_blockexit2ii_563_reg <= main_decode_blockexit2ii_563;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_563) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_563_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %564 = add i32 %562, %559*/
		main_decode_blockexit2ii_564 = (main_decode_blockexit2ii_562_reg + main_decode_blockexit2ii_559);
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_564_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %564 = add i32 %562, %559*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_404)) begin
		main_decode_blockexit2ii_564_reg <= main_decode_blockexit2ii_564;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_564) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_564_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %565 = add i32 %564, %563*/
		main_decode_blockexit2ii_565 = (main_decode_blockexit2ii_564 + main_decode_blockexit2ii_563_reg);
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_565_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %565 = add i32 %564, %563*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_404)) begin
		main_decode_blockexit2ii_565_reg <= main_decode_blockexit2ii_565;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_565) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_565_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %566 = ashr i32 %565, 8*/
		main_decode_blockexit2ii_566 = ($signed(main_decode_blockexit2ii_565) >>> 32'd8);
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_566_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %566 = ashr i32 %565, 8*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_404)) begin
		main_decode_blockexit2ii_566_reg <= main_decode_blockexit2ii_566;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_566) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_566_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %567 = mul nsw i32 %554, 454*/
		main_decode_blockexit2ii_567 = (main_decode_blockexit2ii_554 * 32'd454);
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_567_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %567 = mul nsw i32 %554, 454*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_403)) begin
		main_decode_blockexit2ii_567_reg <= main_decode_blockexit2ii_567;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_567) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_567_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %568 = add i32 %567, %559*/
		main_decode_blockexit2ii_568 = (main_decode_blockexit2ii_567_reg + main_decode_blockexit2ii_559);
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_568_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %568 = add i32 %567, %559*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_404)) begin
		main_decode_blockexit2ii_568_reg <= main_decode_blockexit2ii_568;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_568) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_568_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %569 = ashr i32 %568, 8*/
		main_decode_blockexit2ii_569 = ($signed(main_decode_blockexit2ii_568) >>> 32'd8);
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_569_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %569 = ashr i32 %568, 8*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_404)) begin
		main_decode_blockexit2ii_569_reg <= main_decode_blockexit2ii_569;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_569) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_569_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit.2.i.i*/
	/*   %570 = icmp slt i32 %561, 0*/
		main_decode_blockexit2ii_570 = ($signed(main_decode_blockexit2ii_561) < $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit2ii_570_reg <= 0;
	/* main: %decode_block.exit.2.i.i*/
	/*   %570 = icmp slt i32 %561, 0*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_404)) begin
		main_decode_blockexit2ii_570_reg <= main_decode_blockexit2ii_570;
		if (start == 1'b0 && ^(main_decode_blockexit2ii_570) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit2ii_570_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %571*/
	/*   %572 = icmp sgt i32 %561, 255*/
		main_571_572 = ($signed(main_decode_blockexit2ii_561_reg) > $signed(32'd255));
end
always @(posedge clk) begin
	if (reset)
		main_571_572_reg <= 0;
	/* main: %571*/
	/*   %572 = icmp sgt i32 %561, 255*/
	else if((cur_state == LEGUP_F_main_BB__571_405)) begin
		main_571_572_reg <= main_571_572;
		if (start == 1'b0 && ^(main_571_572) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_571_572_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %571*/
	/*   %..i.i1.i = select i1 %572, i32 255, i32 %561*/
		main_571_ii1i = (main_571_572 ? 32'd255 : main_decode_blockexit2ii_561_reg);
end
always @(posedge clk) begin
	if (reset)
		main_571_ii1i_reg <= 0;
	/* main: %571*/
	/*   %..i.i1.i = select i1 %572, i32 255, i32 %561*/
	else if((cur_state == LEGUP_F_main_BB__571_405)) begin
		main_571_ii1i_reg <= main_571_ii1i;
		if (start == 1'b0 && ^(main_571_ii1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_571_ii1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %573*/
	/*   %r.0.i.i.i = phi i32 [ 0, %decode_block.exit.2.i.i ], [ %..i.i1.i, %571 ]*/
	if ((((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_404) & (memory_controller_waitrequest == 1'd0)) & (main_decode_blockexit2ii_570 == 1'd1))) begin
		main_573_r0iii = 32'd0;
	end
	/* main: %573*/
	/*   %r.0.i.i.i = phi i32 [ 0, %decode_block.exit.2.i.i ], [ %..i.i1.i, %571 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__571_405) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_573_r0iii = main_571_ii1i;
	end
end
always @(posedge clk) begin
	if (reset)
		main_573_r0iii_reg <= 0;
	/* main: %573*/
	/*   %r.0.i.i.i = phi i32 [ 0, %decode_block.exit.2.i.i ], [ %..i.i1.i, %571 ]*/
	else if((((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_404) & (memory_controller_waitrequest == 1'd0)) & (main_decode_blockexit2ii_570 == 1'd1))) begin
		main_573_r0iii_reg <= main_573_r0iii;
		if (start == 1'b0 && ^(main_573_r0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_573_r0iii_reg"); $finish; end
	end
	/* main: %573*/
	/*   %r.0.i.i.i = phi i32 [ 0, %decode_block.exit.2.i.i ], [ %..i.i1.i, %571 ]*/
	else if(((cur_state == LEGUP_F_main_BB__571_405) & (memory_controller_waitrequest == 1'd0))) begin
		main_573_r0iii_reg <= main_573_r0iii;
		if (start == 1'b0 && ^(main_573_r0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_573_r0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %573*/
	/*   %574 = icmp slt i32 %566, 0*/
		main_573_574 = ($signed(main_decode_blockexit2ii_566_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_573_574_reg <= 0;
	/* main: %573*/
	/*   %574 = icmp slt i32 %566, 0*/
	else if((cur_state == LEGUP_F_main_BB__573_406)) begin
		main_573_574_reg <= main_573_574;
		if (start == 1'b0 && ^(main_573_574) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_573_574_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %575*/
	/*   %576 = icmp sgt i32 %566, 255*/
		main_575_576 = ($signed(main_decode_blockexit2ii_566_reg) > $signed(32'd255));
end
always @(posedge clk) begin
	if (reset)
		main_575_576_reg <= 0;
	/* main: %575*/
	/*   %576 = icmp sgt i32 %566, 255*/
	else if((cur_state == LEGUP_F_main_BB__575_407)) begin
		main_575_576_reg <= main_575_576;
		if (start == 1'b0 && ^(main_575_576) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_575_576_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %575*/
	/*   %.1.i.i.i = select i1 %576, i32 255, i32 %566*/
		main_575_1iii = (main_575_576 ? 32'd255 : main_decode_blockexit2ii_566_reg);
end
always @(posedge clk) begin
	if (reset)
		main_575_1iii_reg <= 0;
	/* main: %575*/
	/*   %.1.i.i.i = select i1 %576, i32 255, i32 %566*/
	else if((cur_state == LEGUP_F_main_BB__575_407)) begin
		main_575_1iii_reg <= main_575_1iii;
		if (start == 1'b0 && ^(main_575_1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_575_1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %577*/
	/*   %g.0.i.i.i = phi i32 [ 0, %573 ], [ %.1.i.i.i, %575 ]*/
	if ((((cur_state == LEGUP_F_main_BB__573_406) & (memory_controller_waitrequest == 1'd0)) & (main_573_574 == 1'd1))) begin
		main_577_g0iii = 32'd0;
	end
	/* main: %577*/
	/*   %g.0.i.i.i = phi i32 [ 0, %573 ], [ %.1.i.i.i, %575 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__575_407) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_577_g0iii = main_575_1iii;
	end
end
always @(posedge clk) begin
	if (reset)
		main_577_g0iii_reg <= 0;
	/* main: %577*/
	/*   %g.0.i.i.i = phi i32 [ 0, %573 ], [ %.1.i.i.i, %575 ]*/
	else if((((cur_state == LEGUP_F_main_BB__573_406) & (memory_controller_waitrequest == 1'd0)) & (main_573_574 == 1'd1))) begin
		main_577_g0iii_reg <= main_577_g0iii;
		if (start == 1'b0 && ^(main_577_g0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_577_g0iii_reg"); $finish; end
	end
	/* main: %577*/
	/*   %g.0.i.i.i = phi i32 [ 0, %573 ], [ %.1.i.i.i, %575 ]*/
	else if(((cur_state == LEGUP_F_main_BB__575_407) & (memory_controller_waitrequest == 1'd0))) begin
		main_577_g0iii_reg <= main_577_g0iii;
		if (start == 1'b0 && ^(main_577_g0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_577_g0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %577*/
	/*   %578 = icmp slt i32 %569, 0*/
		main_577_578 = ($signed(main_decode_blockexit2ii_569_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_577_578_reg <= 0;
	/* main: %577*/
	/*   %578 = icmp slt i32 %569, 0*/
	else if((cur_state == LEGUP_F_main_BB__577_408)) begin
		main_577_578_reg <= main_577_578;
		if (start == 1'b0 && ^(main_577_578) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_577_578_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %579*/
	/*   %580 = icmp sgt i32 %569, 255*/
		main_579_580 = ($signed(main_decode_blockexit2ii_569_reg) > $signed(32'd255));
end
always @(posedge clk) begin
	if (reset)
		main_579_580_reg <= 0;
	/* main: %579*/
	/*   %580 = icmp sgt i32 %569, 255*/
	else if((cur_state == LEGUP_F_main_BB__579_409)) begin
		main_579_580_reg <= main_579_580;
		if (start == 1'b0 && ^(main_579_580) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_579_580_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %579*/
	/*   %.2.i.i.i = select i1 %580, i32 255, i32 %569*/
		main_579_2iii = (main_579_580 ? 32'd255 : main_decode_blockexit2ii_569_reg);
end
always @(posedge clk) begin
	if (reset)
		main_579_2iii_reg <= 0;
	/* main: %579*/
	/*   %.2.i.i.i = select i1 %580, i32 255, i32 %569*/
	else if((cur_state == LEGUP_F_main_BB__579_409)) begin
		main_579_2iii_reg <= main_579_2iii;
		if (start == 1'b0 && ^(main_579_2iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_579_2iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %581*/
	/*   %b.0.i.i.i = phi i32 [ 0, %577 ], [ %.2.i.i.i, %579 ]*/
	if ((((cur_state == LEGUP_F_main_BB__577_408) & (memory_controller_waitrequest == 1'd0)) & (main_577_578 == 1'd1))) begin
		main_581_b0iii = 32'd0;
	end
	/* main: %581*/
	/*   %b.0.i.i.i = phi i32 [ 0, %577 ], [ %.2.i.i.i, %579 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__579_409) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_581_b0iii = main_579_2iii;
	end
end
always @(posedge clk) begin
	if (reset)
		main_581_b0iii_reg <= 0;
	/* main: %581*/
	/*   %b.0.i.i.i = phi i32 [ 0, %577 ], [ %.2.i.i.i, %579 ]*/
	else if((((cur_state == LEGUP_F_main_BB__577_408) & (memory_controller_waitrequest == 1'd0)) & (main_577_578 == 1'd1))) begin
		main_581_b0iii_reg <= main_581_b0iii;
		if (start == 1'b0 && ^(main_581_b0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_581_b0iii_reg"); $finish; end
	end
	/* main: %581*/
	/*   %b.0.i.i.i = phi i32 [ 0, %577 ], [ %.2.i.i.i, %579 ]*/
	else if(((cur_state == LEGUP_F_main_BB__579_409) & (memory_controller_waitrequest == 1'd0))) begin
		main_581_b0iii_reg <= main_581_b0iii;
		if (start == 1'b0 && ^(main_581_b0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_581_b0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %581*/
	/*   %582 = add nsw i32 %i.03.i.i.i, 1*/
		main_581_582 = (main_decode_blockexit2ii_i03iii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_581_582_reg <= 0;
	/* main: %581*/
	/*   %582 = add nsw i32 %i.03.i.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__581_410)) begin
		main_581_582_reg <= main_581_582;
		if (start == 1'b0 && ^(main_581_582) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_581_582_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %581*/
	/*   %exitcond65 = icmp eq i32 %582, 64*/
		main_581_exitcond65 = (main_581_582 == 32'd64);
end
always @(posedge clk) begin
	if (reset)
		main_581_exitcond65_reg <= 0;
	/* main: %581*/
	/*   %exitcond65 = icmp eq i32 %582, 64*/
	else if((cur_state == LEGUP_F_main_BB__581_410)) begin
		main_581_exitcond65_reg <= main_581_exitcond65;
		if (start == 1'b0 && ^(main_581_exitcond65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_581_exitcond65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %583 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
		main_YuvToRgbexitpreheaderii_583 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	if (reset)
		main_YuvToRgbexitpreheaderii_583_reg <= 0;
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %583 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	else if((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_415)) begin
		main_YuvToRgbexitpreheaderii_583_reg <= main_YuvToRgbexitpreheaderii_583;
		if (start == 1'b0 && ^(main_YuvToRgbexitpreheaderii_583) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgbexitpreheaderii_583_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %584 = sext i16 %583 to i32*/
		main_YuvToRgbexitpreheaderii_584 = $signed(main_YuvToRgbexitpreheaderii_583);
end
always @(posedge clk) begin
	if (reset)
		main_YuvToRgbexitpreheaderii_584_reg <= 0;
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %584 = sext i16 %583 to i32*/
	else if((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_415)) begin
		main_YuvToRgbexitpreheaderii_584_reg <= main_YuvToRgbexitpreheaderii_584;
		if (start == 1'b0 && ^(main_YuvToRgbexitpreheaderii_584) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgbexitpreheaderii_584_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %585 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
		main_YuvToRgbexitpreheaderii_585 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	if (reset)
		main_YuvToRgbexitpreheaderii_585_reg <= 0;
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %585 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	else if((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_415)) begin
		main_YuvToRgbexitpreheaderii_585_reg <= main_YuvToRgbexitpreheaderii_585;
		if (start == 1'b0 && ^(main_YuvToRgbexitpreheaderii_585) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgbexitpreheaderii_585_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %586 = sext i16 %585 to i32*/
		main_YuvToRgbexitpreheaderii_586 = $signed(main_YuvToRgbexitpreheaderii_585);
end
always @(posedge clk) begin
	if (reset)
		main_YuvToRgbexitpreheaderii_586_reg <= 0;
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %586 = sext i16 %585 to i32*/
	else if((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_415)) begin
		main_YuvToRgbexitpreheaderii_586_reg <= main_YuvToRgbexitpreheaderii_586;
		if (start == 1'b0 && ^(main_YuvToRgbexitpreheaderii_586) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgbexitpreheaderii_586_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %.pre.i.i = load i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !1*/
		main_YuvToRgbexitpreheaderii_preii = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_YuvToRgbexitpreheaderii_preii_reg <= 0;
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %.pre.i.i = load i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_416)) begin
		main_YuvToRgbexitpreheaderii_preii_reg <= main_YuvToRgbexitpreheaderii_preii;
		if (start == 1'b0 && ^(main_YuvToRgbexitpreheaderii_preii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgbexitpreheaderii_preii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %587 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
		main_YuvToRgbexitpreheaderii_587 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_YuvToRgbexitpreheaderii_587_reg <= 0;
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %587 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_416)) begin
		main_YuvToRgbexitpreheaderii_587_reg <= main_YuvToRgbexitpreheaderii_587;
		if (start == 1'b0 && ^(main_YuvToRgbexitpreheaderii_587) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgbexitpreheaderii_587_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %588 = sext i16 %583 to i32*/
		main_YuvToRgbexitpreheaderii_588 = $signed(main_YuvToRgbexitpreheaderii_583);
end
always @(posedge clk) begin
	if (reset)
		main_YuvToRgbexitpreheaderii_588_reg <= 0;
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %588 = sext i16 %583 to i32*/
	else if((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_415)) begin
		main_YuvToRgbexitpreheaderii_588_reg <= main_YuvToRgbexitpreheaderii_588;
		if (start == 1'b0 && ^(main_YuvToRgbexitpreheaderii_588) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgbexitpreheaderii_588_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %589 = sext i16 %585 to i32*/
		main_YuvToRgbexitpreheaderii_589 = $signed(main_YuvToRgbexitpreheaderii_585);
end
always @(posedge clk) begin
	if (reset)
		main_YuvToRgbexitpreheaderii_589_reg <= 0;
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %589 = sext i16 %585 to i32*/
	else if((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_415)) begin
		main_YuvToRgbexitpreheaderii_589_reg <= main_YuvToRgbexitpreheaderii_589;
		if (start == 1'b0 && ^(main_YuvToRgbexitpreheaderii_589) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgbexitpreheaderii_589_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %590 = sext i16 %583 to i32*/
		main_YuvToRgbexitpreheaderii_590 = $signed(main_YuvToRgbexitpreheaderii_583);
end
always @(posedge clk) begin
	if (reset)
		main_YuvToRgbexitpreheaderii_590_reg <= 0;
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %590 = sext i16 %583 to i32*/
	else if((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_415)) begin
		main_YuvToRgbexitpreheaderii_590_reg <= main_YuvToRgbexitpreheaderii_590;
		if (start == 1'b0 && ^(main_YuvToRgbexitpreheaderii_590) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgbexitpreheaderii_590_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %591 = shl nsw i32 %590, 3*/
		main_YuvToRgbexitpreheaderii_591 = (main_YuvToRgbexitpreheaderii_590 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_YuvToRgbexitpreheaderii_591_reg <= 0;
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %591 = shl nsw i32 %590, 3*/
	else if((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_415)) begin
		main_YuvToRgbexitpreheaderii_591_reg <= main_YuvToRgbexitpreheaderii_591;
		if (start == 1'b0 && ^(main_YuvToRgbexitpreheaderii_591) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgbexitpreheaderii_591_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %592*/
	/*   %593 = phi i32 [ %.pre.i.i, %YuvToRgb.exit.preheader.i.i ], [ %638, %WriteBlock.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_416) & (memory_controller_waitrequest == 1'd0))) begin
		main_592_593 = main_YuvToRgbexitpreheaderii_preii;
	end
	/* main: %592*/
	/*   %593 = phi i32 [ %.pre.i.i, %YuvToRgb.exit.preheader.i.i ], [ %638, %WriteBlock.exit.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_WriteBlockexitii_436) & (memory_controller_waitrequest == 1'd0)) & (main_WriteBlockexitii_exitcond86 == 1'd0))) */ begin
		main_592_593 = main_WriteBlockexitii_638_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_592_593_reg <= 0;
	/* main: %592*/
	/*   %593 = phi i32 [ %.pre.i.i, %YuvToRgb.exit.preheader.i.i ], [ %638, %WriteBlock.exit.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_416) & (memory_controller_waitrequest == 1'd0))) begin
		main_592_593_reg <= main_592_593;
		if (start == 1'b0 && ^(main_592_593) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_592_593_reg"); $finish; end
	end
	/* main: %592*/
	/*   %593 = phi i32 [ %.pre.i.i, %YuvToRgb.exit.preheader.i.i ], [ %638, %WriteBlock.exit.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB_WriteBlockexitii_436) & (memory_controller_waitrequest == 1'd0)) & (main_WriteBlockexitii_exitcond86 == 1'd0))) begin
		main_592_593_reg <= main_592_593;
		if (start == 1'b0 && ^(main_592_593) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_592_593_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %592*/
	/*   %i.352.i.i = phi i32 [ 0, %YuvToRgb.exit.preheader.i.i ], [ %634, %WriteBlock.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_416) & (memory_controller_waitrequest == 1'd0))) begin
		main_592_i352ii = 32'd0;
	end
	/* main: %592*/
	/*   %i.352.i.i = phi i32 [ 0, %YuvToRgb.exit.preheader.i.i ], [ %634, %WriteBlock.exit.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_WriteBlockexitii_436) & (memory_controller_waitrequest == 1'd0)) & (main_WriteBlockexitii_exitcond86 == 1'd0))) */ begin
		main_592_i352ii = main_WriteOneBlockexitiii_634_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_592_i352ii_reg <= 0;
	/* main: %592*/
	/*   %i.352.i.i = phi i32 [ 0, %YuvToRgb.exit.preheader.i.i ], [ %634, %WriteBlock.exit.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_416) & (memory_controller_waitrequest == 1'd0))) begin
		main_592_i352ii_reg <= main_592_i352ii;
		if (start == 1'b0 && ^(main_592_i352ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_592_i352ii_reg"); $finish; end
	end
	/* main: %592*/
	/*   %i.352.i.i = phi i32 [ 0, %YuvToRgb.exit.preheader.i.i ], [ %634, %WriteBlock.exit.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB_WriteBlockexitii_436) & (memory_controller_waitrequest == 1'd0)) & (main_WriteBlockexitii_exitcond86 == 1'd0))) begin
		main_592_i352ii_reg <= main_592_i352ii;
		if (start == 1'b0 && ^(main_592_i352ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_592_i352ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %592*/
	/*   %.sum.i.i = add i32 %i.352.i.i, 1*/
		main_592_sumii = (main_592_i352ii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_592_sumii_reg <= 0;
	/* main: %592*/
	/*   %.sum.i.i = add i32 %i.352.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__592_417)) begin
		main_592_sumii_reg <= main_592_sumii;
		if (start == 1'b0 && ^(main_592_sumii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_592_sumii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %592*/
	/*   %scevgep91 = getelementptr [3 x i32]* @OutData_comp_hpos, i32 0, i32 %.sum.i.i*/
		main_592_scevgep91 = (`TAG_g_OutData_comp_hpos_a + (4 * main_592_sumii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_592_scevgep91_reg <= 0;
	/* main: %592*/
	/*   %scevgep91 = getelementptr [3 x i32]* @OutData_comp_hpos, i32 0, i32 %.sum.i.i*/
	else if((cur_state == LEGUP_F_main_BB__592_418)) begin
		main_592_scevgep91_reg <= main_592_scevgep91;
		if (start == 1'b0 && ^(main_592_scevgep91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_592_scevgep91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %592*/
	/*   %scevgep92 = getelementptr [3 x i32]* @OutData_comp_vpos, i32 0, i32 %i.352.i.i*/
		main_592_scevgep92 = (`TAG_g_OutData_comp_vpos_a + (4 * main_592_i352ii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_592_scevgep92_reg <= 0;
	/* main: %592*/
	/*   %scevgep92 = getelementptr [3 x i32]* @OutData_comp_vpos, i32 0, i32 %i.352.i.i*/
	else if((cur_state == LEGUP_F_main_BB__592_417)) begin
		main_592_scevgep92_reg <= main_592_scevgep92;
		if (start == 1'b0 && ^(main_592_scevgep92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_592_scevgep92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %592*/
	/*   %594 = load i32* %scevgep92, align 4, !tbaa !1*/
		main_592_594 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_592_594_reg <= 0;
	/* main: %592*/
	/*   %594 = load i32* %scevgep92, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__592_419)) begin
		main_592_594_reg <= main_592_594;
		if (start == 1'b0 && ^(main_592_594) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_592_594_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %592*/
	/*   %595 = shl nsw i32 %594, 3*/
		main_592_595 = (main_592_594 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_592_595_reg <= 0;
	/* main: %592*/
	/*   %595 = shl nsw i32 %594, 3*/
	else if((cur_state == LEGUP_F_main_BB__592_419)) begin
		main_592_595_reg <= main_592_595;
		if (start == 1'b0 && ^(main_592_595) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_592_595_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %592*/
	/*   %596 = shl nsw i32 %593, 3*/
		main_592_596 = (main_592_593_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_592_596_reg <= 0;
	/* main: %592*/
	/*   %596 = shl nsw i32 %593, 3*/
	else if((cur_state == LEGUP_F_main_BB__592_417)) begin
		main_592_596_reg <= main_592_596;
		if (start == 1'b0 && ^(main_592_596) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_592_596_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %592*/
	/*   %597 = icmp slt i32 %595, %586*/
		main_592_597 = ($signed(main_592_595) < $signed(main_YuvToRgbexitpreheaderii_586_reg));
end
always @(posedge clk) begin
	if (reset)
		main_592_597_reg <= 0;
	/* main: %592*/
	/*   %597 = icmp slt i32 %595, %586*/
	else if((cur_state == LEGUP_F_main_BB__592_419)) begin
		main_592_597_reg <= main_592_597;
		if (start == 1'b0 && ^(main_592_597) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_592_597_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %592*/
	/*   %598 = icmp slt i32 %596, %584*/
		main_592_598 = ($signed(main_592_596) < $signed(main_YuvToRgbexitpreheaderii_584_reg));
end
always @(posedge clk) begin
	if (reset)
		main_592_598_reg <= 0;
	/* main: %592*/
	/*   %598 = icmp slt i32 %596, %584*/
	else if((cur_state == LEGUP_F_main_BB__592_417)) begin
		main_592_598_reg <= main_592_598;
		if (start == 1'b0 && ^(main_592_598) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_592_598_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %592*/
	/*   %or.cond.i.i.i = and i1 %597, %598*/
		main_592_orcondiii = (main_592_597 & main_592_598_reg);
end
always @(posedge clk) begin
	if (reset)
		main_592_orcondiii_reg <= 0;
	/* main: %592*/
	/*   %or.cond.i.i.i = and i1 %597, %598*/
	else if((cur_state == LEGUP_F_main_BB__592_419)) begin
		main_592_orcondiii_reg <= main_592_orcondiii;
		if (start == 1'b0 && ^(main_592_orcondiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_592_orcondiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %599 = shl i32 %593, 3*/
		main_lrph8splitusiiii_599 = (main_592_593_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_599_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %599 = shl i32 %593, 3*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_599_reg <= main_lrph8splitusiiii_599;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_599) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_599_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %600 = add i32 %599, -1*/
		main_lrph8splitusiiii_600 = (main_lrph8splitusiiii_599 + -32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_600_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %600 = add i32 %599, -1*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_600_reg <= main_lrph8splitusiiii_600;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_600) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_600_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %601 = or i32 %599, 7*/
		main_lrph8splitusiiii_601 = (main_lrph8splitusiiii_599 | 32'd7);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_601_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %601 = or i32 %599, 7*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_601_reg <= main_lrph8splitusiiii_601;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_601) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_601_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %602 = icmp sgt i32 %599, %601*/
		main_lrph8splitusiiii_602 = ($signed(main_lrph8splitusiiii_599) > $signed(main_lrph8splitusiiii_601));
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_602_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %602 = icmp sgt i32 %599, %601*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_602_reg <= main_lrph8splitusiiii_602;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_602) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_602_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %smax = select i1 %602, i32 %599, i32 %601*/
		main_lrph8splitusiiii_smax = (main_lrph8splitusiiii_602 ? main_lrph8splitusiiii_599 : main_lrph8splitusiiii_601);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_smax_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %smax = select i1 %602, i32 %599, i32 %601*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_smax_reg <= main_lrph8splitusiiii_smax;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_smax) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_smax_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %603 = sub i32 %600, %smax*/
		main_lrph8splitusiiii_603 = (main_lrph8splitusiiii_600 - main_lrph8splitusiiii_smax);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_603_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %603 = sub i32 %600, %smax*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_603_reg <= main_lrph8splitusiiii_603;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_603) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_603_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %604 = sub i32 %599, %588*/
		main_lrph8splitusiiii_604 = (main_lrph8splitusiiii_599 - main_YuvToRgbexitpreheaderii_588_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_604_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %604 = sub i32 %599, %588*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_604_reg <= main_lrph8splitusiiii_604;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_604) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_604_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %605 = icmp ugt i32 %603, %604*/
		main_lrph8splitusiiii_605 = (main_lrph8splitusiiii_603_reg > main_lrph8splitusiiii_604_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_605_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %605 = icmp ugt i32 %603, %604*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_421)) begin
		main_lrph8splitusiiii_605_reg <= main_lrph8splitusiiii_605;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_605) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_605_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %umax = select i1 %605, i32 %603, i32 %604*/
		main_lrph8splitusiiii_umax = (main_lrph8splitusiiii_605 ? main_lrph8splitusiiii_603_reg : main_lrph8splitusiiii_604_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_umax_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %umax = select i1 %605, i32 %603, i32 %604*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_421)) begin
		main_lrph8splitusiiii_umax_reg <= main_lrph8splitusiiii_umax;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_umax) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_umax_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %606 = sub i32 0, %umax*/
		main_lrph8splitusiiii_606 = (32'd0 - main_lrph8splitusiiii_umax);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_606_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %606 = sub i32 0, %umax*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_421)) begin
		main_lrph8splitusiiii_606_reg <= main_lrph8splitusiiii_606;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_606) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_606_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %607 = shl i32 %594, 3*/
		main_lrph8splitusiiii_607 = (main_592_594_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_607_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %607 = shl i32 %594, 3*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_607_reg <= main_lrph8splitusiiii_607;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_607) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_607_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %608 = add i32 %607, 8*/
		main_lrph8splitusiiii_608 = (main_lrph8splitusiiii_607 + 32'd8);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_608_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %608 = add i32 %607, 8*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_608_reg <= main_lrph8splitusiiii_608;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_608) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_608_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %609 = or i32 %607, 1*/
		main_lrph8splitusiiii_609 = (main_lrph8splitusiiii_607 | 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_609_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %609 = or i32 %607, 1*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_609_reg <= main_lrph8splitusiiii_609;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_609) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_609_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %610 = icmp sgt i32 %608, %609*/
		main_lrph8splitusiiii_610 = ($signed(main_lrph8splitusiiii_608) > $signed(main_lrph8splitusiiii_609));
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_610_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %610 = icmp sgt i32 %608, %609*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_610_reg <= main_lrph8splitusiiii_610;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_610) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_610_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %smax79 = select i1 %610, i32 %608, i32 %609*/
		main_lrph8splitusiiii_smax79 = (main_lrph8splitusiiii_610 ? main_lrph8splitusiiii_608 : main_lrph8splitusiiii_609);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_smax79_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %smax79 = select i1 %610, i32 %608, i32 %609*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_smax79_reg <= main_lrph8splitusiiii_smax79;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_smax79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_smax79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %611 = sub i32 %607, %smax79*/
		main_lrph8splitusiiii_611 = (main_lrph8splitusiiii_607_reg - main_lrph8splitusiiii_smax79_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_611_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %611 = sub i32 %607, %smax79*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_421)) begin
		main_lrph8splitusiiii_611_reg <= main_lrph8splitusiiii_611;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_611) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_611_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %612 = sub i32 %607, %589*/
		main_lrph8splitusiiii_612 = (main_lrph8splitusiiii_607 - main_YuvToRgbexitpreheaderii_589_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_612_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %612 = sub i32 %607, %589*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_612_reg <= main_lrph8splitusiiii_612;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_612) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_612_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %613 = icmp ugt i32 %611, %612*/
		main_lrph8splitusiiii_613 = (main_lrph8splitusiiii_611 > main_lrph8splitusiiii_612_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_613_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %613 = icmp ugt i32 %611, %612*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_421)) begin
		main_lrph8splitusiiii_613_reg <= main_lrph8splitusiiii_613;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_613) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_613_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %umax80 = select i1 %613, i32 %611, i32 %612*/
		main_lrph8splitusiiii_umax80 = (main_lrph8splitusiiii_613 ? main_lrph8splitusiiii_611 : main_lrph8splitusiiii_612_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_umax80_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %umax80 = select i1 %613, i32 %611, i32 %612*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_421)) begin
		main_lrph8splitusiiii_umax80_reg <= main_lrph8splitusiiii_umax80;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_umax80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_umax80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %614 = sub i32 0, %umax80*/
		main_lrph8splitusiiii_614 = (32'd0 - main_lrph8splitusiiii_umax80_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_614_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %614 = sub i32 0, %umax80*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_422)) begin
		main_lrph8splitusiiii_614_reg <= main_lrph8splitusiiii_614;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_614) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_614_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %615 = shl i32 %593, 3*/
		main_lrph8splitusiiii_615 = (main_592_593_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_615_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %615 = shl i32 %593, 3*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_615_reg <= main_lrph8splitusiiii_615;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_615) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_615_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %616 = add i32 %615, -1*/
		main_lrph8splitusiiii_616 = (main_lrph8splitusiiii_615 + -32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_616_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %616 = add i32 %615, -1*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_616_reg <= main_lrph8splitusiiii_616;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_616) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_616_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %617 = or i32 %615, 7*/
		main_lrph8splitusiiii_617 = (main_lrph8splitusiiii_615 | 32'd7);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_617_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %617 = or i32 %615, 7*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_617_reg <= main_lrph8splitusiiii_617;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_617) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_617_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %618 = icmp sgt i32 %615, %617*/
		main_lrph8splitusiiii_618 = ($signed(main_lrph8splitusiiii_615) > $signed(main_lrph8splitusiiii_617));
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_618_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %618 = icmp sgt i32 %615, %617*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_618_reg <= main_lrph8splitusiiii_618;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_618) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_618_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %smax87 = select i1 %618, i32 %615, i32 %617*/
		main_lrph8splitusiiii_smax87 = (main_lrph8splitusiiii_618 ? main_lrph8splitusiiii_615 : main_lrph8splitusiiii_617);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_smax87_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %smax87 = select i1 %618, i32 %615, i32 %617*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_smax87_reg <= main_lrph8splitusiiii_smax87;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_smax87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_smax87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %619 = sub i32 %616, %smax87*/
		main_lrph8splitusiiii_619 = (main_lrph8splitusiiii_616 - main_lrph8splitusiiii_smax87);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_619_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %619 = sub i32 %616, %smax87*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_619_reg <= main_lrph8splitusiiii_619;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_619) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_619_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %620 = sub i32 %615, %590*/
		main_lrph8splitusiiii_620 = (main_lrph8splitusiiii_615 - main_YuvToRgbexitpreheaderii_590_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_620_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %620 = sub i32 %615, %590*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_620_reg <= main_lrph8splitusiiii_620;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_620) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_620_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %621 = icmp ugt i32 %619, %620*/
		main_lrph8splitusiiii_621 = (main_lrph8splitusiiii_619_reg > main_lrph8splitusiiii_620_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_621_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %621 = icmp ugt i32 %619, %620*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_421)) begin
		main_lrph8splitusiiii_621_reg <= main_lrph8splitusiiii_621;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_621) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_621_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %umax88 = select i1 %621, i32 %619, i32 %620*/
		main_lrph8splitusiiii_umax88 = (main_lrph8splitusiiii_621 ? main_lrph8splitusiiii_619_reg : main_lrph8splitusiiii_620_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_umax88_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %umax88 = select i1 %621, i32 %619, i32 %620*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_421)) begin
		main_lrph8splitusiiii_umax88_reg <= main_lrph8splitusiiii_umax88;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_umax88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_umax88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %622 = sub i32 0, %umax88*/
		main_lrph8splitusiiii_622 = (32'd0 - main_lrph8splitusiiii_umax88);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_622_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %622 = sub i32 0, %umax88*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_421)) begin
		main_lrph8splitusiiii_622_reg <= main_lrph8splitusiiii_622;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_622) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_622_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %623 = mul i32 %591, %594*/
		main_lrph8splitusiiii_623 = (main_YuvToRgbexitpreheaderii_591_reg * main_592_594_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_623_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %623 = mul i32 %591, %594*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_623_reg <= main_lrph8splitusiiii_623;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_623) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_623_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %624 = add i32 %623, %615*/
		main_lrph8splitusiiii_624 = (main_lrph8splitusiiii_623 + main_lrph8splitusiiii_615);
end
always @(posedge clk) begin
	if (reset)
		main_lrph8splitusiiii_624_reg <= 0;
	/* main: %.lr.ph8.split.us.i.i.i.i*/
	/*   %624 = add i32 %623, %615*/
	else if((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_420)) begin
		main_lrph8splitusiiii_624_reg <= main_lrph8splitusiiii_624;
		if (start == 1'b0 && ^(main_lrph8splitusiiii_624) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph8splitusiiii_624_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %625*/
	/*   %indvar.next76 = add i32 %indvar75, 1*/
		main_625_indvarnext76 = (main_lrphusiiii_indvar75_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_625_indvarnext76_reg <= 0;
	/* main: %625*/
	/*   %indvar.next76 = add i32 %indvar75, 1*/
	else if((cur_state == LEGUP_F_main_BB__625_423)) begin
		main_625_indvarnext76_reg <= main_625_indvarnext76;
		if (start == 1'b0 && ^(main_625_indvarnext76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_625_indvarnext76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %625*/
	/*   %exitcond81 = icmp eq i32 %indvar.next76, %614*/
		main_625_exitcond81 = (main_625_indvarnext76 == main_lrph8splitusiiii_614_reg);
end
always @(posedge clk) begin
	if (reset)
		main_625_exitcond81_reg <= 0;
	/* main: %625*/
	/*   %exitcond81 = icmp eq i32 %indvar.next76, %614*/
	else if((cur_state == LEGUP_F_main_BB__625_423)) begin
		main_625_exitcond81_reg <= main_625_exitcond81;
		if (start == 1'b0 && ^(main_625_exitcond81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_625_exitcond81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %626*/
	/*   %indvar72 = phi i32 [ 0, %.lr.ph.us.i.i.i.i ], [ %indvar.next73, %626 ]*/
	if ((((cur_state == LEGUP_F_main_BB__626_428) & (memory_controller_waitrequest == 1'd0)) & (main_626_exitcond74_reg == 1'd0))) begin
		main_626_indvar72 = main_626_indvarnext73_reg;
	end
	/* main: %626*/
	/*   %indvar72 = phi i32 [ 0, %.lr.ph.us.i.i.i.i ], [ %indvar.next73, %626 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_lrphusiiii_429) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_626_indvar72 = 32'd0;
	end
end
always @(posedge clk) begin
	if (reset)
		main_626_indvar72_reg <= 0;
	/* main: %626*/
	/*   %indvar72 = phi i32 [ 0, %.lr.ph.us.i.i.i.i ], [ %indvar.next73, %626 ]*/
	else if((((cur_state == LEGUP_F_main_BB__626_428) & (memory_controller_waitrequest == 1'd0)) & (main_626_exitcond74_reg == 1'd0))) begin
		main_626_indvar72_reg <= main_626_indvar72;
		if (start == 1'b0 && ^(main_626_indvar72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_626_indvar72_reg"); $finish; end
	end
	/* main: %626*/
	/*   %indvar72 = phi i32 [ 0, %.lr.ph.us.i.i.i.i ], [ %indvar.next73, %626 ]*/
	else if(((cur_state == LEGUP_F_main_BB_lrphusiiii_429) & (memory_controller_waitrequest == 1'd0))) begin
		main_626_indvar72_reg <= main_626_indvar72;
		if (start == 1'b0 && ^(main_626_indvar72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_626_indvar72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %626*/
	/*   %627 = add i32 %631, %indvar72*/
		main_626_627 = (main_lrphusiiii_631_reg + main_626_indvar72_reg);
end
always @(posedge clk) begin
	if (reset)
		main_626_627_reg <= 0;
	/* main: %626*/
	/*   %627 = add i32 %631, %indvar72*/
	else if((cur_state == LEGUP_F_main_BB__626_424)) begin
		main_626_627_reg <= main_626_627;
		if (start == 1'b0 && ^(main_626_627) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_626_627_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %626*/
	/*   %.14.us.i.i.i.i = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 %i.352.i.i, i32 %627*/
		main_626_14usiiii = (`TAG_g_rgb_buf_a + ((256 * main_592_i352ii_reg) + (4 * main_626_627_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_626_14usiiii_reg <= 0;
	/* main: %626*/
	/*   %.14.us.i.i.i.i = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 %i.352.i.i, i32 %627*/
	else if((cur_state == LEGUP_F_main_BB__626_425)) begin
		main_626_14usiiii_reg <= main_626_14usiiii;
		if (start == 1'b0 && ^(main_626_14usiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_626_14usiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %626*/
	/*   %628 = add i32 %633, %indvar72*/
		main_626_628 = (main_lrphusiiii_633_reg + main_626_indvar72_reg);
end
always @(posedge clk) begin
	if (reset)
		main_626_628_reg <= 0;
	/* main: %626*/
	/*   %628 = add i32 %633, %indvar72*/
	else if((cur_state == LEGUP_F_main_BB__626_424)) begin
		main_626_628_reg <= main_626_628;
		if (start == 1'b0 && ^(main_626_628) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_626_628_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %626*/
	/*   %scevgep78 = getelementptr [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 %i.352.i.i, i32 %628*/
		main_626_scevgep78 = (`TAG_g_OutData_comp_buf_a + ((5310 * main_592_i352ii_reg) + (1 * main_626_628_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_626_scevgep78_reg <= 0;
	/* main: %626*/
	/*   %scevgep78 = getelementptr [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 %i.352.i.i, i32 %628*/
	else if((cur_state == LEGUP_F_main_BB__626_425)) begin
		main_626_scevgep78_reg <= main_626_scevgep78;
		if (start == 1'b0 && ^(main_626_scevgep78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_626_scevgep78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %626*/
	/*   %629 = load i32* %.14.us.i.i.i.i, align 4, !tbaa !1*/
		main_626_629 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_626_629_reg <= 0;
	/* main: %626*/
	/*   %629 = load i32* %.14.us.i.i.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__626_427)) begin
		main_626_629_reg <= main_626_629;
		if (start == 1'b0 && ^(main_626_629) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_626_629_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %626*/
	/*   %630 = trunc i32 %629 to i8*/
		main_626_630 = main_626_629[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_626_630_reg <= 0;
	/* main: %626*/
	/*   %630 = trunc i32 %629 to i8*/
	else if((cur_state == LEGUP_F_main_BB__626_427)) begin
		main_626_630_reg <= main_626_630;
		if (start == 1'b0 && ^(main_626_630) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_626_630_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %626*/
	/*   %indvar.next73 = add i32 %indvar72, 1*/
		main_626_indvarnext73 = (main_626_indvar72_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_626_indvarnext73_reg <= 0;
	/* main: %626*/
	/*   %indvar.next73 = add i32 %indvar72, 1*/
	else if((cur_state == LEGUP_F_main_BB__626_424)) begin
		main_626_indvarnext73_reg <= main_626_indvarnext73;
		if (start == 1'b0 && ^(main_626_indvarnext73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_626_indvarnext73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %626*/
	/*   %exitcond74 = icmp eq i32 %indvar.next73, %606*/
		main_626_exitcond74 = (main_626_indvarnext73 == main_lrph8splitusiiii_606_reg);
end
always @(posedge clk) begin
	if (reset)
		main_626_exitcond74_reg <= 0;
	/* main: %626*/
	/*   %exitcond74 = icmp eq i32 %indvar.next73, %606*/
	else if((cur_state == LEGUP_F_main_BB__626_424)) begin
		main_626_exitcond74_reg <= main_626_exitcond74;
		if (start == 1'b0 && ^(main_626_exitcond74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_626_exitcond74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.us.i.i.i.i*/
	/*   %indvar75 = phi i32 [ %indvar.next76, %625 ], [ 0, %.lr.ph8.split.us.i.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_422) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphusiiii_indvar75 = 32'd0;
	end
	/* main: %.lr.ph.us.i.i.i.i*/
	/*   %indvar75 = phi i32 [ %indvar.next76, %625 ], [ 0, %.lr.ph8.split.us.i.i.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__625_423) & (memory_controller_waitrequest == 1'd0)) & (main_625_exitcond81 == 1'd0))) */ begin
		main_lrphusiiii_indvar75 = main_625_indvarnext76;
	end
end
always @(posedge clk) begin
	if (reset)
		main_lrphusiiii_indvar75_reg <= 0;
	/* main: %.lr.ph.us.i.i.i.i*/
	/*   %indvar75 = phi i32 [ %indvar.next76, %625 ], [ 0, %.lr.ph8.split.us.i.i.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_lrph8splitusiiii_422) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphusiiii_indvar75_reg <= main_lrphusiiii_indvar75;
		if (start == 1'b0 && ^(main_lrphusiiii_indvar75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphusiiii_indvar75_reg"); $finish; end
	end
	/* main: %.lr.ph.us.i.i.i.i*/
	/*   %indvar75 = phi i32 [ %indvar.next76, %625 ], [ 0, %.lr.ph8.split.us.i.i.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB__625_423) & (memory_controller_waitrequest == 1'd0)) & (main_625_exitcond81 == 1'd0))) begin
		main_lrphusiiii_indvar75_reg <= main_lrphusiiii_indvar75;
		if (start == 1'b0 && ^(main_lrphusiiii_indvar75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphusiiii_indvar75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.us.i.i.i.i*/
	/*   %631 = mul i32 %indvar75, %622*/
		main_lrphusiiii_631 = (main_lrphusiiii_indvar75_reg * main_lrph8splitusiiii_622_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphusiiii_631_reg <= 0;
	/* main: %.lr.ph.us.i.i.i.i*/
	/*   %631 = mul i32 %indvar75, %622*/
	else if((cur_state == LEGUP_F_main_BB_lrphusiiii_429)) begin
		main_lrphusiiii_631_reg <= main_lrphusiiii_631;
		if (start == 1'b0 && ^(main_lrphusiiii_631) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphusiiii_631_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.us.i.i.i.i*/
	/*   %632 = mul i32 %590, %indvar75*/
		main_lrphusiiii_632 = (main_YuvToRgbexitpreheaderii_590_reg * main_lrphusiiii_indvar75_reg);
end
always @(posedge clk) begin
	if (reset)
		main_lrphusiiii_632_reg <= 0;
	/* main: %.lr.ph.us.i.i.i.i*/
	/*   %632 = mul i32 %590, %indvar75*/
	else if((cur_state == LEGUP_F_main_BB_lrphusiiii_429)) begin
		main_lrphusiiii_632_reg <= main_lrphusiiii_632;
		if (start == 1'b0 && ^(main_lrphusiiii_632) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphusiiii_632_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.us.i.i.i.i*/
	/*   %633 = add i32 %624, %632*/
		main_lrphusiiii_633 = (main_lrph8splitusiiii_624_reg + main_lrphusiiii_632);
end
always @(posedge clk) begin
	if (reset)
		main_lrphusiiii_633_reg <= 0;
	/* main: %.lr.ph.us.i.i.i.i*/
	/*   %633 = add i32 %624, %632*/
	else if((cur_state == LEGUP_F_main_BB_lrphusiiii_429)) begin
		main_lrphusiiii_633_reg <= main_lrphusiiii_633;
		if (start == 1'b0 && ^(main_lrphusiiii_633) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphusiiii_633_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %WriteOneBlock.exit.i.i.i*/
	/*   %634 = add i32 %i.352.i.i, 1*/
		main_WriteOneBlockexitiii_634 = (main_592_i352ii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_WriteOneBlockexitiii_634_reg <= 0;
	/* main: %WriteOneBlock.exit.i.i.i*/
	/*   %634 = add i32 %i.352.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB_WriteOneBlockexitiii_431)) begin
		main_WriteOneBlockexitiii_634_reg <= main_WriteOneBlockexitiii_634;
		if (start == 1'b0 && ^(main_WriteOneBlockexitiii_634) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_WriteOneBlockexitiii_634_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %WriteOneBlock.exit.i.i.i*/
	/*   %635 = load i32* %scevgep91, align 4, !tbaa !1*/
		main_WriteOneBlockexitiii_635 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_WriteOneBlockexitiii_635_reg <= 0;
	/* main: %WriteOneBlock.exit.i.i.i*/
	/*   %635 = load i32* %scevgep91, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_WriteOneBlockexitiii_433)) begin
		main_WriteOneBlockexitiii_635_reg <= main_WriteOneBlockexitiii_635;
		if (start == 1'b0 && ^(main_WriteOneBlockexitiii_635) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_WriteOneBlockexitiii_635_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %WriteOneBlock.exit.i.i.i*/
	/*   %636 = icmp slt i32 %635, %587*/
		main_WriteOneBlockexitiii_636 = ($signed(main_WriteOneBlockexitiii_635) < $signed(main_YuvToRgbexitpreheaderii_587_reg));
end
always @(posedge clk) begin
	if (reset)
		main_WriteOneBlockexitiii_636_reg <= 0;
	/* main: %WriteOneBlock.exit.i.i.i*/
	/*   %636 = icmp slt i32 %635, %587*/
	else if((cur_state == LEGUP_F_main_BB_WriteOneBlockexitiii_433)) begin
		main_WriteOneBlockexitiii_636_reg <= main_WriteOneBlockexitiii_636;
		if (start == 1'b0 && ^(main_WriteOneBlockexitiii_636) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_WriteOneBlockexitiii_636_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %WriteBlock.exit.i.i*/
	/*   %638 = phi i32 [ %635, %WriteOneBlock.exit.i.i.i ], [ 0, %637 ]*/
	if ((((cur_state == LEGUP_F_main_BB_WriteOneBlockexitiii_433) & (memory_controller_waitrequest == 1'd0)) & (main_WriteOneBlockexitiii_636 == 1'd1))) begin
		main_WriteBlockexitii_638 = main_WriteOneBlockexitiii_635;
	end
	/* main: %WriteBlock.exit.i.i*/
	/*   %638 = phi i32 [ %635, %WriteOneBlock.exit.i.i.i ], [ 0, %637 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__637_435) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_WriteBlockexitii_638 = 32'd0;
	end
end
always @(posedge clk) begin
	if (reset)
		main_WriteBlockexitii_638_reg <= 0;
	/* main: %WriteBlock.exit.i.i*/
	/*   %638 = phi i32 [ %635, %WriteOneBlock.exit.i.i.i ], [ 0, %637 ]*/
	else if((((cur_state == LEGUP_F_main_BB_WriteOneBlockexitiii_433) & (memory_controller_waitrequest == 1'd0)) & (main_WriteOneBlockexitiii_636 == 1'd1))) begin
		main_WriteBlockexitii_638_reg <= main_WriteBlockexitii_638;
		if (start == 1'b0 && ^(main_WriteBlockexitii_638) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_WriteBlockexitii_638_reg"); $finish; end
	end
	/* main: %WriteBlock.exit.i.i*/
	/*   %638 = phi i32 [ %635, %WriteOneBlock.exit.i.i.i ], [ 0, %637 ]*/
	else if(((cur_state == LEGUP_F_main_BB__637_435) & (memory_controller_waitrequest == 1'd0))) begin
		main_WriteBlockexitii_638_reg <= main_WriteBlockexitii_638;
		if (start == 1'b0 && ^(main_WriteBlockexitii_638) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_WriteBlockexitii_638_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %WriteBlock.exit.i.i*/
	/*   %exitcond86 = icmp eq i32 %634, 3*/
		main_WriteBlockexitii_exitcond86 = (main_WriteOneBlockexitiii_634_reg == 32'd3);
end
always @(posedge clk) begin
	if (reset)
		main_WriteBlockexitii_exitcond86_reg <= 0;
	/* main: %WriteBlock.exit.i.i*/
	/*   %exitcond86 = icmp eq i32 %634, 3*/
	else if((cur_state == LEGUP_F_main_BB_WriteBlockexitii_436)) begin
		main_WriteBlockexitii_exitcond86_reg <= main_WriteBlockexitii_exitcond86;
		if (start == 1'b0 && ^(main_WriteBlockexitii_exitcond86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_WriteBlockexitii_exitcond86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %639*/
	/*   %640 = add nsw i32 %CurrentMCU.054.i.i, 1*/
		main_639_640 = (main_preheader46ii_CurrentMCU054ii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_639_640_reg <= 0;
	/* main: %639*/
	/*   %640 = add nsw i32 %CurrentMCU.054.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__639_437)) begin
		main_639_640_reg <= main_639_640;
		if (start == 1'b0 && ^(main_639_640) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_639_640_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %639*/
	/*   %exitcond93 = icmp eq i32 %640, %523*/
		main_639_exitcond93 = (main_639_640 == main_preheader46lrphii_523_reg);
end
always @(posedge clk) begin
	if (reset)
		main_639_exitcond93_reg <= 0;
	/* main: %639*/
	/*   %exitcond93 = icmp eq i32 %640, %523*/
	else if((cur_state == LEGUP_F_main_BB__639_437)) begin
		main_639_exitcond93_reg <= main_639_exitcond93;
		if (start == 1'b0 && ^(main_639_exitcond93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_639_exitcond93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %641*/
	/*   %643 = icmp sgt i32 %501, 0*/
		main_641_643 = ($signed(main_read_markersexiti_501_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_641_643_reg <= 0;
	/* main: %641*/
	/*   %643 = icmp sgt i32 %501, 0*/
	else if((cur_state == LEGUP_F_main_BB__641_438)) begin
		main_641_643_reg <= main_641_643;
		if (start == 1'b0 && ^(main_641_643) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_641_643_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader49.lr.ph.i.i*/
	/*   %644 = getelementptr inbounds [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 0*/
if (reset) begin main_preheader49lrphii_644 = 0; end
		main_preheader49lrphii_644 = `TAG_main_0_QuantBuffiii_a;
end
always @(posedge clk) begin
	if (reset)
		main_preheader49lrphii_644_reg <= 0;
	/* main: %.preheader49.lr.ph.i.i*/
	/*   %644 = getelementptr inbounds [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 0*/
	else if((cur_state == LEGUP_F_main_BB_preheader49lrphii_439)) begin
		main_preheader49lrphii_644_reg <= main_preheader49lrphii_644;
		if (start == 1'b0 && ^(main_preheader49lrphii_644) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader49lrphii_644_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader49.lr.ph.i.i*/
	/*   %645 = getelementptr inbounds [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 64*/
if (reset) begin main_preheader49lrphii_645 = 0; end
		main_preheader49lrphii_645 = (`TAG_main_0_QuantBuffiii_a + (4 * 32'd64));
end
always @(posedge clk) begin
	if (reset)
		main_preheader49lrphii_645_reg <= 0;
	/* main: %.preheader49.lr.ph.i.i*/
	/*   %645 = getelementptr inbounds [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 64*/
	else if((cur_state == LEGUP_F_main_BB_preheader49lrphii_439)) begin
		main_preheader49lrphii_645_reg <= main_preheader49lrphii_645;
		if (start == 1'b0 && ^(main_preheader49lrphii_645) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader49lrphii_645_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader49.lr.ph.i.i*/
	/*   %646 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 0*/
if (reset) begin main_preheader49lrphii_646 = 0; end
		main_preheader49lrphii_646 = (`TAG_main_0_IDCTBuffii_a + (256 * 32'd4));
end
always @(posedge clk) begin
	if (reset)
		main_preheader49lrphii_646_reg <= 0;
	/* main: %.preheader49.lr.ph.i.i*/
	/*   %646 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 0*/
	else if((cur_state == LEGUP_F_main_BB_preheader49lrphii_439)) begin
		main_preheader49lrphii_646_reg <= main_preheader49lrphii_646;
		if (start == 1'b0 && ^(main_preheader49lrphii_646) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader49lrphii_646_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader49.lr.ph.i.i*/
	/*   %647 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 64*/
if (reset) begin main_preheader49lrphii_647 = 0; end
		main_preheader49lrphii_647 = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd4) + (4 * 32'd64)));
end
always @(posedge clk) begin
	if (reset)
		main_preheader49lrphii_647_reg <= 0;
	/* main: %.preheader49.lr.ph.i.i*/
	/*   %647 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 64*/
	else if((cur_state == LEGUP_F_main_BB_preheader49lrphii_439)) begin
		main_preheader49lrphii_647_reg <= main_preheader49lrphii_647;
		if (start == 1'b0 && ^(main_preheader49lrphii_647) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader49lrphii_647_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader49.lr.ph.i.i*/
	/*   %648 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 0*/
if (reset) begin main_preheader49lrphii_648 = 0; end
		main_preheader49lrphii_648 = (`TAG_main_0_IDCTBuffii_a + (256 * 32'd5));
end
always @(posedge clk) begin
	if (reset)
		main_preheader49lrphii_648_reg <= 0;
	/* main: %.preheader49.lr.ph.i.i*/
	/*   %648 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 0*/
	else if((cur_state == LEGUP_F_main_BB_preheader49lrphii_439)) begin
		main_preheader49lrphii_648_reg <= main_preheader49lrphii_648;
		if (start == 1'b0 && ^(main_preheader49lrphii_648) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader49lrphii_648_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader49.lr.ph.i.i*/
	/*   %649 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 64*/
if (reset) begin main_preheader49lrphii_649 = 0; end
		main_preheader49lrphii_649 = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd5) + (4 * 32'd64)));
end
always @(posedge clk) begin
	if (reset)
		main_preheader49lrphii_649_reg <= 0;
	/* main: %.preheader49.lr.ph.i.i*/
	/*   %649 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 64*/
	else if((cur_state == LEGUP_F_main_BB_preheader49lrphii_439)) begin
		main_preheader49lrphii_649_reg <= main_preheader49lrphii_649;
		if (start == 1'b0 && ^(main_preheader49lrphii_649) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader49lrphii_649_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader49.i.i*/
	/*   %indvar164 = phi i32 [ %indvar.next165, %.preheader48.i.i ], [ 0, %.preheader49.lr.ph.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader49lrphii_439) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader49ii_indvar164 = 32'd0;
	end
	/* main: %.preheader49.i.i*/
	/*   %indvar164 = phi i32 [ %indvar.next165, %.preheader48.i.i ], [ 0, %.preheader49.lr.ph.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheader48ii_542) & (memory_controller_waitrequest == 1'd0)) & (main_preheader48ii_740_reg == 1'd1))) */ begin
		main_preheader49ii_indvar164 = main_preheader48ii_indvarnext165_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheader49ii_indvar164_reg <= 0;
	/* main: %.preheader49.i.i*/
	/*   %indvar164 = phi i32 [ %indvar.next165, %.preheader48.i.i ], [ 0, %.preheader49.lr.ph.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_preheader49lrphii_439) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader49ii_indvar164_reg <= main_preheader49ii_indvar164;
		if (start == 1'b0 && ^(main_preheader49ii_indvar164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader49ii_indvar164_reg"); $finish; end
	end
	/* main: %.preheader49.i.i*/
	/*   %indvar164 = phi i32 [ %indvar.next165, %.preheader48.i.i ], [ 0, %.preheader49.lr.ph.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB_preheader48ii_542) & (memory_controller_waitrequest == 1'd0)) & (main_preheader48ii_740_reg == 1'd1))) begin
		main_preheader49ii_indvar164_reg <= main_preheader49ii_indvar164;
		if (start == 1'b0 && ^(main_preheader49ii_indvar164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader49ii_indvar164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader49.i.i*/
	/*   %650 = shl i32 %indvar164, 2*/
		main_preheader49ii_650 = (main_preheader49ii_indvar164_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_preheader49ii_650_reg <= 0;
	/* main: %.preheader49.i.i*/
	/*   %650 = shl i32 %indvar164, 2*/
	else if((cur_state == LEGUP_F_main_BB_preheader49ii_440)) begin
		main_preheader49ii_650_reg <= main_preheader49ii_650;
		if (start == 1'b0 && ^(main_preheader49ii_650) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader49ii_650_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader49.i.i*/
	/*   %651 = add i32 %650, 4*/
		main_preheader49ii_651 = (main_preheader49ii_650 + 32'd4);
end
always @(posedge clk) begin
	if (reset)
		main_preheader49ii_651_reg <= 0;
	/* main: %.preheader49.i.i*/
	/*   %651 = add i32 %650, 4*/
	else if((cur_state == LEGUP_F_main_BB_preheader49ii_440)) begin
		main_preheader49ii_651_reg <= main_preheader49ii_651;
		if (start == 1'b0 && ^(main_preheader49ii_651) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader49ii_651_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %652*/
	/*   %i.455.i.i = phi i32 [ 0, %.preheader49.i.i ], [ %682, %decode_block.exit12.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader49ii_440) & (memory_controller_waitrequest == 1'd0))) begin
		main_652_i455ii = 32'd0;
	end
	/* main: %652*/
	/*   %i.455.i.i = phi i32 [ 0, %.preheader49.i.i ], [ %682, %decode_block.exit12.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decode_blockexit12ii_472) & (memory_controller_waitrequest == 1'd0)) & (main_decode_blockexit12ii_exitcond113 == 1'd0))) */ begin
		main_652_i455ii = main_decode_blockexit12ii_682;
	end
end
always @(posedge clk) begin
	if (reset)
		main_652_i455ii_reg <= 0;
	/* main: %652*/
	/*   %i.455.i.i = phi i32 [ 0, %.preheader49.i.i ], [ %682, %decode_block.exit12.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_preheader49ii_440) & (memory_controller_waitrequest == 1'd0))) begin
		main_652_i455ii_reg <= main_652_i455ii;
		if (start == 1'b0 && ^(main_652_i455ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_652_i455ii_reg"); $finish; end
	end
	/* main: %652*/
	/*   %i.455.i.i = phi i32 [ 0, %.preheader49.i.i ], [ %682, %decode_block.exit12.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB_decode_blockexit12ii_472) & (memory_controller_waitrequest == 1'd0)) & (main_decode_blockexit12ii_exitcond113 == 1'd0))) begin
		main_652_i455ii_reg <= main_652_i455ii;
		if (start == 1'b0 && ^(main_652_i455ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_652_i455ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %652*/
	/*   %653 = add i32 %i.455.i.i, 1*/
		main_652_653 = (main_652_i455ii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_652_653_reg <= 0;
	/* main: %652*/
	/*   %653 = add i32 %i.455.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__652_441)) begin
		main_652_653_reg <= main_652_653;
		if (start == 1'b0 && ^(main_652_653) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_652_653_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %652*/
	/*   %scevgep118 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 %653, i32 0*/
		main_652_scevgep118 = (`TAG_main_0_IDCTBuffii_a + (256 * main_652_653_reg));
end
always @(posedge clk) begin
	if (reset)
		main_652_scevgep118_reg <= 0;
	/* main: %652*/
	/*   %scevgep118 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 %653, i32 0*/
	else if((cur_state == LEGUP_F_main_BB__652_443)) begin
		main_652_scevgep118_reg <= main_652_scevgep118;
		if (start == 1'b0 && ^(main_652_scevgep118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_652_scevgep118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %652*/
	/*   %scevgep119 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 %i.455.i.i, i32 0*/
		main_652_scevgep119 = (`TAG_main_0_IDCTBuffii_a + (256 * main_652_i455ii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_652_scevgep119_reg <= 0;
	/* main: %652*/
	/*   %scevgep119 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 %i.455.i.i, i32 0*/
	else if((cur_state == LEGUP_F_main_BB__652_441)) begin
		main_652_scevgep119_reg <= main_652_scevgep119;
		if (start == 1'b0 && ^(main_652_scevgep119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_652_scevgep119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %654*/
	/*   %i.02.i.i2.i.i = phi i32 [ 0, %652 ], [ %658, %654 ]*/
	if (((cur_state == LEGUP_F_main_BB__652_443) & (memory_controller_waitrequest == 1'd0))) begin
		main_654_i02ii2ii = 32'd0;
	end
	/* main: %654*/
	/*   %i.02.i.i2.i.i = phi i32 [ 0, %652 ], [ %658, %654 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__654_448) & (memory_controller_waitrequest == 1'd0)) & (main_654_exitcond_reg == 1'd0))) */ begin
		main_654_i02ii2ii = main_654_658_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_654_i02ii2ii_reg <= 0;
	/* main: %654*/
	/*   %i.02.i.i2.i.i = phi i32 [ 0, %652 ], [ %658, %654 ]*/
	else if(((cur_state == LEGUP_F_main_BB__652_443) & (memory_controller_waitrequest == 1'd0))) begin
		main_654_i02ii2ii_reg <= main_654_i02ii2ii;
		if (start == 1'b0 && ^(main_654_i02ii2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_654_i02ii2ii_reg"); $finish; end
	end
	/* main: %654*/
	/*   %i.02.i.i2.i.i = phi i32 [ 0, %652 ], [ %658, %654 ]*/
	else if((((cur_state == LEGUP_F_main_BB__654_448) & (memory_controller_waitrequest == 1'd0)) & (main_654_exitcond_reg == 1'd0))) begin
		main_654_i02ii2ii_reg <= main_654_i02ii2ii;
		if (start == 1'b0 && ^(main_654_i02ii2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_654_i02ii2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %654*/
	/*   %scevgep94 = getelementptr [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i2.i.i*/
		main_654_scevgep94 = (1'd0 + (4 * main_654_i02ii2ii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_654_scevgep94_reg <= 0;
	/* main: %654*/
	/*   %scevgep94 = getelementptr [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i2.i.i*/
	else if((cur_state == LEGUP_F_main_BB__654_444)) begin
		main_654_scevgep94_reg <= main_654_scevgep94;
		if (start == 1'b0 && ^(main_654_scevgep94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_654_scevgep94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %654*/
	/*   %.01.i.i3.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %i.02.i.i2.i.i*/
		main_654_01ii3ii = (`TAG_main_0_QuantBuffiii_a + (4 * main_654_i02ii2ii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_654_01ii3ii_reg <= 0;
	/* main: %654*/
	/*   %.01.i.i3.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %i.02.i.i2.i.i*/
	else if((cur_state == LEGUP_F_main_BB__654_444)) begin
		main_654_01ii3ii_reg <= main_654_01ii3ii;
		if (start == 1'b0 && ^(main_654_01ii3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_654_01ii3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %654*/
	/*   %655 = load i32* %scevgep94, align 4, !tbaa !1*/
		main_654_655 = zigzag_index_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_654_655_reg <= 0;
	/* main: %654*/
	/*   %655 = load i32* %scevgep94, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__654_445)) begin
		main_654_655_reg <= main_654_655;
		if (start == 1'b0 && ^(main_654_655) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_654_655_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %654*/
	/*   %656 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 0, i32 %655*/
		main_654_656 = (`TAG_main_0_HuffBuffii_a + (4 * main_654_655));
end
always @(posedge clk) begin
	if (reset)
		main_654_656_reg <= 0;
	/* main: %654*/
	/*   %656 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 0, i32 %655*/
	else if((cur_state == LEGUP_F_main_BB__654_445)) begin
		main_654_656_reg <= main_654_656;
		if (start == 1'b0 && ^(main_654_656) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_654_656_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %654*/
	/*   %657 = load i32* %656, align 4, !tbaa !1*/
		main_654_657 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_654_657_reg <= 0;
	/* main: %654*/
	/*   %657 = load i32* %656, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__654_447)) begin
		main_654_657_reg <= main_654_657;
		if (start == 1'b0 && ^(main_654_657) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_654_657_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %654*/
	/*   %658 = add nsw i32 %i.02.i.i2.i.i, 1*/
		main_654_658 = (main_654_i02ii2ii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_654_658_reg <= 0;
	/* main: %654*/
	/*   %658 = add nsw i32 %i.02.i.i2.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__654_444)) begin
		main_654_658_reg <= main_654_658;
		if (start == 1'b0 && ^(main_654_658) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_654_658_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %654*/
	/*   %exitcond = icmp eq i32 %658, 64*/
		main_654_exitcond = (main_654_658 == 32'd64);
end
always @(posedge clk) begin
	if (reset)
		main_654_exitcond_reg <= 0;
	/* main: %654*/
	/*   %exitcond = icmp eq i32 %658, 64*/
	else if((cur_state == LEGUP_F_main_BB__654_444)) begin
		main_654_exitcond_reg <= main_654_exitcond;
		if (start == 1'b0 && ^(main_654_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_654_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i5.i.i*/
	/*   %659 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 0), align 1, !tbaa !5*/
		main_IZigzagMatrixexiti5ii_659 = p_jinfo_comps_info_quant_tbl_no_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexiti5ii_659_reg <= 0;
	/* main: %IZigzagMatrix.exit.i5.i.i*/
	/*   %659 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 0), align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti5ii_450)) begin
		main_IZigzagMatrixexiti5ii_659_reg <= main_IZigzagMatrixexiti5ii_659;
		if (start == 1'b0 && ^(main_IZigzagMatrixexiti5ii_659) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexiti5ii_659_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i5.i.i*/
	/*   %660 = sext i8 %659 to i32*/
		main_IZigzagMatrixexiti5ii_660 = $signed(main_IZigzagMatrixexiti5ii_659);
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexiti5ii_660_reg <= 0;
	/* main: %IZigzagMatrix.exit.i5.i.i*/
	/*   %660 = sext i8 %659 to i32*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti5ii_450)) begin
		main_IZigzagMatrixexiti5ii_660_reg <= main_IZigzagMatrixexiti5ii_660;
		if (start == 1'b0 && ^(main_IZigzagMatrixexiti5ii_660) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexiti5ii_660_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i5.i.i*/
	/*   %661 = add nsw i32 %660, 1*/
		main_IZigzagMatrixexiti5ii_661 = (main_IZigzagMatrixexiti5ii_660 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexiti5ii_661_reg <= 0;
	/* main: %IZigzagMatrix.exit.i5.i.i*/
	/*   %661 = add nsw i32 %660, 1*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti5ii_450)) begin
		main_IZigzagMatrixexiti5ii_661_reg <= main_IZigzagMatrixexiti5ii_661;
		if (start == 1'b0 && ^(main_IZigzagMatrixexiti5ii_661) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexiti5ii_661_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %662*/
	/*   %indvar96 = phi i32 [ %indvar.next97, %662 ], [ 0, %IZigzagMatrix.exit.i5.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti5ii_450) & (memory_controller_waitrequest == 1'd0))) begin
		main_662_indvar96 = 32'd0;
	end
	/* main: %662*/
	/*   %indvar96 = phi i32 [ %indvar.next97, %662 ], [ 0, %IZigzagMatrix.exit.i5.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__662_454) & (memory_controller_waitrequest == 1'd0)) & (main_662_667_reg == 1'd1))) */ begin
		main_662_indvar96 = main_662_indvarnext97_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_662_indvar96_reg <= 0;
	/* main: %662*/
	/*   %indvar96 = phi i32 [ %indvar.next97, %662 ], [ 0, %IZigzagMatrix.exit.i5.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti5ii_450) & (memory_controller_waitrequest == 1'd0))) begin
		main_662_indvar96_reg <= main_662_indvar96;
		if (start == 1'b0 && ^(main_662_indvar96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_662_indvar96_reg"); $finish; end
	end
	/* main: %662*/
	/*   %indvar96 = phi i32 [ %indvar.next97, %662 ], [ 0, %IZigzagMatrix.exit.i5.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB__662_454) & (memory_controller_waitrequest == 1'd0)) & (main_662_667_reg == 1'd1))) begin
		main_662_indvar96_reg <= main_662_indvar96;
		if (start == 1'b0 && ^(main_662_indvar96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_662_indvar96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %662*/
	/*   %663 = add i32 %indvar96, 1*/
		main_662_663 = (main_662_indvar96_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_662_663_reg <= 0;
	/* main: %662*/
	/*   %663 = add i32 %indvar96, 1*/
	else if((cur_state == LEGUP_F_main_BB__662_451)) begin
		main_662_663_reg <= main_662_663;
		if (start == 1'b0 && ^(main_662_663) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_662_663_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %662*/
	/*   %scevgep98 = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %663*/
		main_662_scevgep98 = (`TAG_main_0_QuantBuffiii_a + (4 * main_662_663_reg));
end
always @(posedge clk) begin
	if (reset)
		main_662_scevgep98_reg <= 0;
	/* main: %662*/
	/*   %scevgep98 = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %663*/
	else if((cur_state == LEGUP_F_main_BB__662_452)) begin
		main_662_scevgep98_reg <= main_662_scevgep98;
		if (start == 1'b0 && ^(main_662_scevgep98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_662_scevgep98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %662*/
	/*   %mptr.02.i.i6.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %indvar96*/
		main_662_mptr02ii6ii = (`TAG_main_0_QuantBuffiii_a + (4 * main_662_indvar96_reg));
end
always @(posedge clk) begin
	if (reset)
		main_662_mptr02ii6ii_reg <= 0;
	/* main: %662*/
	/*   %mptr.02.i.i6.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %indvar96*/
	else if((cur_state == LEGUP_F_main_BB__662_451)) begin
		main_662_mptr02ii6ii_reg <= main_662_mptr02ii6ii;
		if (start == 1'b0 && ^(main_662_mptr02ii6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_662_mptr02ii6ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %662*/
	/*   %.01.i2.i7.i.i = getelementptr [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %661, i32 %indvar96*/
		main_662_01i2i7ii = (1'd0 + ((256 * main_IZigzagMatrixexiti5ii_661_reg) + (4 * main_662_indvar96_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_662_01i2i7ii_reg <= 0;
	/* main: %662*/
	/*   %.01.i2.i7.i.i = getelementptr [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %661, i32 %indvar96*/
	else if((cur_state == LEGUP_F_main_BB__662_451)) begin
		main_662_01i2i7ii_reg <= main_662_01i2i7ii;
		if (start == 1'b0 && ^(main_662_01i2i7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_662_01i2i7ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %662*/
	/*   %664 = load i32* %mptr.02.i.i6.i.i, align 4, !tbaa !1*/
		main_662_664 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_662_664_reg <= 0;
	/* main: %662*/
	/*   %664 = load i32* %mptr.02.i.i6.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__662_453)) begin
		main_662_664_reg <= main_662_664;
		if (start == 1'b0 && ^(main_662_664) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_662_664_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %662*/
	/*   %665 = load i32* %.01.i2.i7.i.i, align 4, !tbaa !1*/
		main_662_665 = p_jinfo_quant_tbl_quantval_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_662_665_reg <= 0;
	/* main: %662*/
	/*   %665 = load i32* %.01.i2.i7.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__662_452)) begin
		main_662_665_reg <= main_662_665;
		if (start == 1'b0 && ^(main_662_665) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_662_665_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %662*/
	/*   %666 = mul nsw i32 %665, %664*/
		main_662_666 = (main_662_665_reg * main_662_664);
end
always @(posedge clk) begin
	if (reset)
		main_662_666_reg <= 0;
	/* main: %662*/
	/*   %666 = mul nsw i32 %665, %664*/
	else if((cur_state == LEGUP_F_main_BB__662_453)) begin
		main_662_666_reg <= main_662_666;
		if (start == 1'b0 && ^(main_662_666) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_662_666_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %662*/
	/*   %667 = icmp ult i32* %scevgep98, %645*/
		main_662_667 = (main_662_scevgep98_reg < main_preheader49lrphii_645_reg);
end
always @(posedge clk) begin
	if (reset)
		main_662_667_reg <= 0;
	/* main: %662*/
	/*   %667 = icmp ult i32* %scevgep98, %645*/
	else if((cur_state == LEGUP_F_main_BB__662_453)) begin
		main_662_667_reg <= main_662_667;
		if (start == 1'b0 && ^(main_662_667) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_662_667_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %662*/
	/*   %indvar.next97 = add i32 %indvar96, 1*/
		main_662_indvarnext97 = (main_662_indvar96_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_662_indvarnext97_reg <= 0;
	/* main: %662*/
	/*   %indvar.next97 = add i32 %indvar96, 1*/
	else if((cur_state == LEGUP_F_main_BB__662_451)) begin
		main_662_indvarnext97_reg <= main_662_indvarnext97;
		if (start == 1'b0 && ^(main_662_indvarnext97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_662_indvarnext97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %668*/
	/*   %indvar105 = phi i32 [ %indvar.next106, %668 ], [ 0, %IQuantize.exit.i8.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_IQuantizeexiti8ii_457) & (memory_controller_waitrequest == 1'd0))) begin
		main_668_indvar105 = 32'd0;
	end
	/* main: %668*/
	/*   %indvar105 = phi i32 [ %indvar.next106, %668 ], [ 0, %IQuantize.exit.i8.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__668_461) & (memory_controller_waitrequest == 1'd0)) & (main_668_672_reg == 1'd1))) */ begin
		main_668_indvar105 = main_668_indvarnext106_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_668_indvar105_reg <= 0;
	/* main: %668*/
	/*   %indvar105 = phi i32 [ %indvar.next106, %668 ], [ 0, %IQuantize.exit.i8.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_IQuantizeexiti8ii_457) & (memory_controller_waitrequest == 1'd0))) begin
		main_668_indvar105_reg <= main_668_indvar105;
		if (start == 1'b0 && ^(main_668_indvar105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_668_indvar105_reg"); $finish; end
	end
	/* main: %668*/
	/*   %indvar105 = phi i32 [ %indvar.next106, %668 ], [ 0, %IQuantize.exit.i8.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB__668_461) & (memory_controller_waitrequest == 1'd0)) & (main_668_672_reg == 1'd1))) begin
		main_668_indvar105_reg <= main_668_indvar105;
		if (start == 1'b0 && ^(main_668_indvar105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_668_indvar105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %668*/
	/*   %mptr.01.i1.i9.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 %i.455.i.i, i32 %indvar105*/
		main_668_mptr01i1i9ii = (`TAG_main_0_IDCTBuffii_a + ((256 * main_652_i455ii_reg) + (4 * main_668_indvar105_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_668_mptr01i1i9ii_reg <= 0;
	/* main: %668*/
	/*   %mptr.01.i1.i9.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 %i.455.i.i, i32 %indvar105*/
	else if((cur_state == LEGUP_F_main_BB__668_458)) begin
		main_668_mptr01i1i9ii_reg <= main_668_mptr01i1i9ii;
		if (start == 1'b0 && ^(main_668_mptr01i1i9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_668_mptr01i1i9ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %668*/
	/*   %669 = add i32 %indvar105, 1*/
		main_668_669 = (main_668_indvar105_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_668_669_reg <= 0;
	/* main: %668*/
	/*   %669 = add i32 %indvar105, 1*/
	else if((cur_state == LEGUP_F_main_BB__668_458)) begin
		main_668_669_reg <= main_668_669;
		if (start == 1'b0 && ^(main_668_669) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_668_669_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %668*/
	/*   %scevgep107 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 %i.455.i.i, i32 %669*/
		main_668_scevgep107 = (`TAG_main_0_IDCTBuffii_a + ((256 * main_652_i455ii_reg) + (4 * main_668_669_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_668_scevgep107_reg <= 0;
	/* main: %668*/
	/*   %scevgep107 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 %i.455.i.i, i32 %669*/
	else if((cur_state == LEGUP_F_main_BB__668_459)) begin
		main_668_scevgep107_reg <= main_668_scevgep107;
		if (start == 1'b0 && ^(main_668_scevgep107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_668_scevgep107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %668*/
	/*   %670 = load i32* %mptr.01.i1.i9.i.i, align 4, !tbaa !1*/
		main_668_670 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_668_670_reg <= 0;
	/* main: %668*/
	/*   %670 = load i32* %mptr.01.i1.i9.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__668_460)) begin
		main_668_670_reg <= main_668_670;
		if (start == 1'b0 && ^(main_668_670) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_668_670_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %668*/
	/*   %671 = add nsw i32 %670, 128*/
		main_668_671 = (main_668_670 + 32'd128);
end
always @(posedge clk) begin
	if (reset)
		main_668_671_reg <= 0;
	/* main: %668*/
	/*   %671 = add nsw i32 %670, 128*/
	else if((cur_state == LEGUP_F_main_BB__668_460)) begin
		main_668_671_reg <= main_668_671;
		if (start == 1'b0 && ^(main_668_671) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_668_671_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %668*/
	/*   %672 = icmp ult i32* %scevgep107, %scevgep118*/
		main_668_672 = (main_668_scevgep107_reg < main_652_scevgep118_reg);
end
always @(posedge clk) begin
	if (reset)
		main_668_672_reg <= 0;
	/* main: %668*/
	/*   %672 = icmp ult i32* %scevgep107, %scevgep118*/
	else if((cur_state == LEGUP_F_main_BB__668_460)) begin
		main_668_672_reg <= main_668_672;
		if (start == 1'b0 && ^(main_668_672) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_668_672_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %668*/
	/*   %indvar.next106 = add i32 %indvar105, 1*/
		main_668_indvarnext106 = (main_668_indvar105_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_668_indvarnext106_reg <= 0;
	/* main: %668*/
	/*   %indvar.next106 = add i32 %indvar105, 1*/
	else if((cur_state == LEGUP_F_main_BB__668_458)) begin
		main_668_indvarnext106_reg <= main_668_indvarnext106;
		if (start == 1'b0 && ^(main_668_indvarnext106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_668_indvarnext106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %indvar109 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i11.i.i.preheader ], [ %indvar.next110, %680 ]*/
	if (((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti11iipreheader_462) & (memory_controller_waitrequest == 1'd0))) begin
		main_PostshiftIDctMatrixexiti11ii_indvar109 = 32'd0;
	end
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %indvar109 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i11.i.i.preheader ], [ %indvar.next110, %680 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__680_471) & (memory_controller_waitrequest == 1'd0)) & (main_680_681 == 1'd1))) */ begin
		main_PostshiftIDctMatrixexiti11ii_indvar109 = main_680_indvarnext110;
	end
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti11ii_indvar109_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %indvar109 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i11.i.i.preheader ], [ %indvar.next110, %680 ]*/
	else if(((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti11iipreheader_462) & (memory_controller_waitrequest == 1'd0))) begin
		main_PostshiftIDctMatrixexiti11ii_indvar109_reg <= main_PostshiftIDctMatrixexiti11ii_indvar109;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti11ii_indvar109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti11ii_indvar109_reg"); $finish; end
	end
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %indvar109 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i11.i.i.preheader ], [ %indvar.next110, %680 ]*/
	else if((((cur_state == LEGUP_F_main_BB__680_471) & (memory_controller_waitrequest == 1'd0)) & (main_680_681 == 1'd1))) begin
		main_PostshiftIDctMatrixexiti11ii_indvar109_reg <= main_PostshiftIDctMatrixexiti11ii_indvar109;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti11ii_indvar109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti11ii_indvar109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %mptr.01.i.i10.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 %i.455.i.i, i32 %indvar109*/
		main_PostshiftIDctMatrixexiti11ii_mptr01ii10ii = (`TAG_main_0_IDCTBuffii_a + ((256 * main_652_i455ii_reg) + (4 * main_PostshiftIDctMatrixexiti11ii_indvar109_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti11ii_mptr01ii10ii_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %mptr.01.i.i10.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 %i.455.i.i, i32 %indvar109*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_463)) begin
		main_PostshiftIDctMatrixexiti11ii_mptr01ii10ii_reg <= main_PostshiftIDctMatrixexiti11ii_mptr01ii10ii;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti11ii_mptr01ii10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti11ii_mptr01ii10ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %673 = add i32 %indvar109, 1*/
		main_PostshiftIDctMatrixexiti11ii_673 = (main_PostshiftIDctMatrixexiti11ii_indvar109_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti11ii_673_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %673 = add i32 %indvar109, 1*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_463)) begin
		main_PostshiftIDctMatrixexiti11ii_673_reg <= main_PostshiftIDctMatrixexiti11ii_673;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti11ii_673) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti11ii_673_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %scevgep111 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 %i.455.i.i, i32 %673*/
		main_PostshiftIDctMatrixexiti11ii_scevgep111 = (`TAG_main_0_IDCTBuffii_a + ((256 * main_652_i455ii_reg) + (4 * main_PostshiftIDctMatrixexiti11ii_673_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti11ii_scevgep111_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %scevgep111 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 %i.455.i.i, i32 %673*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_464)) begin
		main_PostshiftIDctMatrixexiti11ii_scevgep111_reg <= main_PostshiftIDctMatrixexiti11ii_scevgep111;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti11ii_scevgep111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti11ii_scevgep111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %674 = load i32* %mptr.01.i.i10.i.i, align 4, !tbaa !1*/
		main_PostshiftIDctMatrixexiti11ii_674 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti11ii_674_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %674 = load i32* %mptr.01.i.i10.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_465)) begin
		main_PostshiftIDctMatrixexiti11ii_674_reg <= main_PostshiftIDctMatrixexiti11ii_674;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti11ii_674) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti11ii_674_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %675 = icmp slt i32 %674, 0*/
		main_PostshiftIDctMatrixexiti11ii_675 = ($signed(main_PostshiftIDctMatrixexiti11ii_674) < $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti11ii_675_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %675 = icmp slt i32 %674, 0*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_465)) begin
		main_PostshiftIDctMatrixexiti11ii_675_reg <= main_PostshiftIDctMatrixexiti11ii_675;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti11ii_675) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti11ii_675_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %677*/
	/*   %678 = icmp sgt i32 %674, 255*/
		main_677_678 = ($signed(main_PostshiftIDctMatrixexiti11ii_674_reg) > $signed(32'd255));
end
always @(posedge clk) begin
	if (reset)
		main_677_678_reg <= 0;
	/* main: %677*/
	/*   %678 = icmp sgt i32 %674, 255*/
	else if((cur_state == LEGUP_F_main_BB__677_468)) begin
		main_677_678_reg <= main_677_678;
		if (start == 1'b0 && ^(main_677_678) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_677_678_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %680*/
	/*   %681 = icmp ult i32* %scevgep111, %scevgep118*/
		main_680_681 = (main_PostshiftIDctMatrixexiti11ii_scevgep111_reg < main_652_scevgep118_reg);
end
always @(posedge clk) begin
	if (reset)
		main_680_681_reg <= 0;
	/* main: %680*/
	/*   %681 = icmp ult i32* %scevgep111, %scevgep118*/
	else if((cur_state == LEGUP_F_main_BB__680_471)) begin
		main_680_681_reg <= main_680_681;
		if (start == 1'b0 && ^(main_680_681) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_680_681_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %680*/
	/*   %indvar.next110 = add i32 %indvar109, 1*/
		main_680_indvarnext110 = (main_PostshiftIDctMatrixexiti11ii_indvar109_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_680_indvarnext110_reg <= 0;
	/* main: %680*/
	/*   %indvar.next110 = add i32 %indvar109, 1*/
	else if((cur_state == LEGUP_F_main_BB__680_471)) begin
		main_680_indvarnext110_reg <= main_680_indvarnext110;
		if (start == 1'b0 && ^(main_680_indvarnext110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_680_indvarnext110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit12.i.i*/
	/*   %682 = add nsw i32 %i.455.i.i, 1*/
		main_decode_blockexit12ii_682 = (main_652_i455ii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit12ii_682_reg <= 0;
	/* main: %decode_block.exit12.i.i*/
	/*   %682 = add nsw i32 %i.455.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit12ii_472)) begin
		main_decode_blockexit12ii_682_reg <= main_decode_blockexit12ii_682;
		if (start == 1'b0 && ^(main_decode_blockexit12ii_682) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit12ii_682_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_block.exit12.i.i*/
	/*   %exitcond113 = icmp eq i32 %682, 4*/
		main_decode_blockexit12ii_exitcond113 = (main_decode_blockexit12ii_682 == 32'd4);
end
always @(posedge clk) begin
	if (reset)
		main_decode_blockexit12ii_exitcond113_reg <= 0;
	/* main: %decode_block.exit12.i.i*/
	/*   %exitcond113 = icmp eq i32 %682, 4*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit12ii_472)) begin
		main_decode_blockexit12ii_exitcond113_reg <= main_decode_blockexit12ii_exitcond113;
		if (start == 1'b0 && ^(main_decode_blockexit12ii_exitcond113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_blockexit12ii_exitcond113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %684*/
	/*   %i.02.i.i14.i.i = phi i32 [ 0, %683 ], [ %688, %684 ]*/
	if (((cur_state == LEGUP_F_main_BB__683_475) & (memory_controller_waitrequest == 1'd0))) begin
		main_684_i02ii14ii = 32'd0;
	end
	/* main: %684*/
	/*   %i.02.i.i14.i.i = phi i32 [ 0, %683 ], [ %688, %684 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__684_480) & (memory_controller_waitrequest == 1'd0)) & (main_684_exitcond120_reg == 1'd0))) */ begin
		main_684_i02ii14ii = main_684_688_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_684_i02ii14ii_reg <= 0;
	/* main: %684*/
	/*   %i.02.i.i14.i.i = phi i32 [ 0, %683 ], [ %688, %684 ]*/
	else if(((cur_state == LEGUP_F_main_BB__683_475) & (memory_controller_waitrequest == 1'd0))) begin
		main_684_i02ii14ii_reg <= main_684_i02ii14ii;
		if (start == 1'b0 && ^(main_684_i02ii14ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_684_i02ii14ii_reg"); $finish; end
	end
	/* main: %684*/
	/*   %i.02.i.i14.i.i = phi i32 [ 0, %683 ], [ %688, %684 ]*/
	else if((((cur_state == LEGUP_F_main_BB__684_480) & (memory_controller_waitrequest == 1'd0)) & (main_684_exitcond120_reg == 1'd0))) begin
		main_684_i02ii14ii_reg <= main_684_i02ii14ii;
		if (start == 1'b0 && ^(main_684_i02ii14ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_684_i02ii14ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %684*/
	/*   %scevgep121 = getelementptr [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i14.i.i*/
		main_684_scevgep121 = (1'd0 + (4 * main_684_i02ii14ii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_684_scevgep121_reg <= 0;
	/* main: %684*/
	/*   %scevgep121 = getelementptr [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i14.i.i*/
	else if((cur_state == LEGUP_F_main_BB__684_476)) begin
		main_684_scevgep121_reg <= main_684_scevgep121;
		if (start == 1'b0 && ^(main_684_scevgep121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_684_scevgep121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %684*/
	/*   %.01.i.i15.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %i.02.i.i14.i.i*/
		main_684_01ii15ii = (`TAG_main_0_QuantBuffiii_a + (4 * main_684_i02ii14ii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_684_01ii15ii_reg <= 0;
	/* main: %684*/
	/*   %.01.i.i15.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %i.02.i.i14.i.i*/
	else if((cur_state == LEGUP_F_main_BB__684_476)) begin
		main_684_01ii15ii_reg <= main_684_01ii15ii;
		if (start == 1'b0 && ^(main_684_01ii15ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_684_01ii15ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %684*/
	/*   %685 = load i32* %scevgep121, align 4, !tbaa !1*/
		main_684_685 = zigzag_index_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_684_685_reg <= 0;
	/* main: %684*/
	/*   %685 = load i32* %scevgep121, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__684_477)) begin
		main_684_685_reg <= main_684_685;
		if (start == 1'b0 && ^(main_684_685) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_684_685_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %684*/
	/*   %686 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 1, i32 %685*/
		main_684_686 = (`TAG_main_0_HuffBuffii_a + ((256 * 32'd1) + (4 * main_684_685)));
end
always @(posedge clk) begin
	if (reset)
		main_684_686_reg <= 0;
	/* main: %684*/
	/*   %686 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 1, i32 %685*/
	else if((cur_state == LEGUP_F_main_BB__684_477)) begin
		main_684_686_reg <= main_684_686;
		if (start == 1'b0 && ^(main_684_686) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_684_686_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %684*/
	/*   %687 = load i32* %686, align 4, !tbaa !1*/
		main_684_687 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_684_687_reg <= 0;
	/* main: %684*/
	/*   %687 = load i32* %686, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__684_479)) begin
		main_684_687_reg <= main_684_687;
		if (start == 1'b0 && ^(main_684_687) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_684_687_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %684*/
	/*   %688 = add nsw i32 %i.02.i.i14.i.i, 1*/
		main_684_688 = (main_684_i02ii14ii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_684_688_reg <= 0;
	/* main: %684*/
	/*   %688 = add nsw i32 %i.02.i.i14.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__684_476)) begin
		main_684_688_reg <= main_684_688;
		if (start == 1'b0 && ^(main_684_688) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_684_688_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %684*/
	/*   %exitcond120 = icmp eq i32 %688, 64*/
		main_684_exitcond120 = (main_684_688 == 32'd64);
end
always @(posedge clk) begin
	if (reset)
		main_684_exitcond120_reg <= 0;
	/* main: %684*/
	/*   %exitcond120 = icmp eq i32 %688, 64*/
	else if((cur_state == LEGUP_F_main_BB__684_476)) begin
		main_684_exitcond120_reg <= main_684_exitcond120;
		if (start == 1'b0 && ^(main_684_exitcond120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_684_exitcond120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i17.i.i*/
	/*   %689 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 1), align 1, !tbaa !5*/
		main_IZigzagMatrixexiti17ii_689 = p_jinfo_comps_info_quant_tbl_no_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexiti17ii_689_reg <= 0;
	/* main: %IZigzagMatrix.exit.i17.i.i*/
	/*   %689 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 1), align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti17ii_482)) begin
		main_IZigzagMatrixexiti17ii_689_reg <= main_IZigzagMatrixexiti17ii_689;
		if (start == 1'b0 && ^(main_IZigzagMatrixexiti17ii_689) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexiti17ii_689_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i17.i.i*/
	/*   %690 = sext i8 %689 to i32*/
		main_IZigzagMatrixexiti17ii_690 = $signed(main_IZigzagMatrixexiti17ii_689);
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexiti17ii_690_reg <= 0;
	/* main: %IZigzagMatrix.exit.i17.i.i*/
	/*   %690 = sext i8 %689 to i32*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti17ii_482)) begin
		main_IZigzagMatrixexiti17ii_690_reg <= main_IZigzagMatrixexiti17ii_690;
		if (start == 1'b0 && ^(main_IZigzagMatrixexiti17ii_690) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexiti17ii_690_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i17.i.i*/
	/*   %691 = add nsw i32 %690, 1*/
		main_IZigzagMatrixexiti17ii_691 = (main_IZigzagMatrixexiti17ii_690 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexiti17ii_691_reg <= 0;
	/* main: %IZigzagMatrix.exit.i17.i.i*/
	/*   %691 = add nsw i32 %690, 1*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti17ii_482)) begin
		main_IZigzagMatrixexiti17ii_691_reg <= main_IZigzagMatrixexiti17ii_691;
		if (start == 1'b0 && ^(main_IZigzagMatrixexiti17ii_691) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexiti17ii_691_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %indvar123 = phi i32 [ %indvar.next124, %692 ], [ 0, %IZigzagMatrix.exit.i17.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti17ii_482) & (memory_controller_waitrequest == 1'd0))) begin
		main_692_indvar123 = 32'd0;
	end
	/* main: %692*/
	/*   %indvar123 = phi i32 [ %indvar.next124, %692 ], [ 0, %IZigzagMatrix.exit.i17.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__692_486) & (memory_controller_waitrequest == 1'd0)) & (main_692_697_reg == 1'd1))) */ begin
		main_692_indvar123 = main_692_indvarnext124_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_692_indvar123_reg <= 0;
	/* main: %692*/
	/*   %indvar123 = phi i32 [ %indvar.next124, %692 ], [ 0, %IZigzagMatrix.exit.i17.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti17ii_482) & (memory_controller_waitrequest == 1'd0))) begin
		main_692_indvar123_reg <= main_692_indvar123;
		if (start == 1'b0 && ^(main_692_indvar123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_indvar123_reg"); $finish; end
	end
	/* main: %692*/
	/*   %indvar123 = phi i32 [ %indvar.next124, %692 ], [ 0, %IZigzagMatrix.exit.i17.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB__692_486) & (memory_controller_waitrequest == 1'd0)) & (main_692_697_reg == 1'd1))) begin
		main_692_indvar123_reg <= main_692_indvar123;
		if (start == 1'b0 && ^(main_692_indvar123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_indvar123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %693 = add i32 %indvar123, 1*/
		main_692_693 = (main_692_indvar123_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_692_693_reg <= 0;
	/* main: %692*/
	/*   %693 = add i32 %indvar123, 1*/
	else if((cur_state == LEGUP_F_main_BB__692_483)) begin
		main_692_693_reg <= main_692_693;
		if (start == 1'b0 && ^(main_692_693) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_693_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %scevgep125 = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %693*/
		main_692_scevgep125 = (`TAG_main_0_QuantBuffiii_a + (4 * main_692_693_reg));
end
always @(posedge clk) begin
	if (reset)
		main_692_scevgep125_reg <= 0;
	/* main: %692*/
	/*   %scevgep125 = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %693*/
	else if((cur_state == LEGUP_F_main_BB__692_484)) begin
		main_692_scevgep125_reg <= main_692_scevgep125;
		if (start == 1'b0 && ^(main_692_scevgep125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_scevgep125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %mptr.02.i.i18.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %indvar123*/
		main_692_mptr02ii18ii = (`TAG_main_0_QuantBuffiii_a + (4 * main_692_indvar123_reg));
end
always @(posedge clk) begin
	if (reset)
		main_692_mptr02ii18ii_reg <= 0;
	/* main: %692*/
	/*   %mptr.02.i.i18.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %indvar123*/
	else if((cur_state == LEGUP_F_main_BB__692_483)) begin
		main_692_mptr02ii18ii_reg <= main_692_mptr02ii18ii;
		if (start == 1'b0 && ^(main_692_mptr02ii18ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_mptr02ii18ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %.01.i2.i19.i.i = getelementptr [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %691, i32 %indvar123*/
		main_692_01i2i19ii = (1'd0 + ((256 * main_IZigzagMatrixexiti17ii_691_reg) + (4 * main_692_indvar123_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_692_01i2i19ii_reg <= 0;
	/* main: %692*/
	/*   %.01.i2.i19.i.i = getelementptr [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %691, i32 %indvar123*/
	else if((cur_state == LEGUP_F_main_BB__692_483)) begin
		main_692_01i2i19ii_reg <= main_692_01i2i19ii;
		if (start == 1'b0 && ^(main_692_01i2i19ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_01i2i19ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %694 = load i32* %mptr.02.i.i18.i.i, align 4, !tbaa !1*/
		main_692_694 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_692_694_reg <= 0;
	/* main: %692*/
	/*   %694 = load i32* %mptr.02.i.i18.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__692_485)) begin
		main_692_694_reg <= main_692_694;
		if (start == 1'b0 && ^(main_692_694) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_694_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %695 = load i32* %.01.i2.i19.i.i, align 4, !tbaa !1*/
		main_692_695 = p_jinfo_quant_tbl_quantval_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_692_695_reg <= 0;
	/* main: %692*/
	/*   %695 = load i32* %.01.i2.i19.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__692_484)) begin
		main_692_695_reg <= main_692_695;
		if (start == 1'b0 && ^(main_692_695) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_695_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %696 = mul nsw i32 %695, %694*/
		main_692_696 = (main_692_695_reg * main_692_694);
end
always @(posedge clk) begin
	if (reset)
		main_692_696_reg <= 0;
	/* main: %692*/
	/*   %696 = mul nsw i32 %695, %694*/
	else if((cur_state == LEGUP_F_main_BB__692_485)) begin
		main_692_696_reg <= main_692_696;
		if (start == 1'b0 && ^(main_692_696) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_696_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %697 = icmp ult i32* %scevgep125, %645*/
		main_692_697 = (main_692_scevgep125_reg < main_preheader49lrphii_645_reg);
end
always @(posedge clk) begin
	if (reset)
		main_692_697_reg <= 0;
	/* main: %692*/
	/*   %697 = icmp ult i32* %scevgep125, %645*/
	else if((cur_state == LEGUP_F_main_BB__692_485)) begin
		main_692_697_reg <= main_692_697;
		if (start == 1'b0 && ^(main_692_697) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_697_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %692*/
	/*   %indvar.next124 = add i32 %indvar123, 1*/
		main_692_indvarnext124 = (main_692_indvar123_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_692_indvarnext124_reg <= 0;
	/* main: %692*/
	/*   %indvar.next124 = add i32 %indvar123, 1*/
	else if((cur_state == LEGUP_F_main_BB__692_483)) begin
		main_692_indvarnext124_reg <= main_692_indvarnext124;
		if (start == 1'b0 && ^(main_692_indvarnext124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_692_indvarnext124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %indvar128 = phi i32 [ %indvar.next129, %698 ], [ 0, %IQuantize.exit.i20.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_IQuantizeexiti20ii_489) & (memory_controller_waitrequest == 1'd0))) begin
		main_698_indvar128 = 32'd0;
	end
	/* main: %698*/
	/*   %indvar128 = phi i32 [ %indvar.next129, %698 ], [ 0, %IQuantize.exit.i20.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__698_493) & (memory_controller_waitrequest == 1'd0)) & (main_698_702_reg == 1'd1))) */ begin
		main_698_indvar128 = main_698_indvarnext129_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_698_indvar128_reg <= 0;
	/* main: %698*/
	/*   %indvar128 = phi i32 [ %indvar.next129, %698 ], [ 0, %IQuantize.exit.i20.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_IQuantizeexiti20ii_489) & (memory_controller_waitrequest == 1'd0))) begin
		main_698_indvar128_reg <= main_698_indvar128;
		if (start == 1'b0 && ^(main_698_indvar128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_indvar128_reg"); $finish; end
	end
	/* main: %698*/
	/*   %indvar128 = phi i32 [ %indvar.next129, %698 ], [ 0, %IQuantize.exit.i20.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB__698_493) & (memory_controller_waitrequest == 1'd0)) & (main_698_702_reg == 1'd1))) begin
		main_698_indvar128_reg <= main_698_indvar128;
		if (start == 1'b0 && ^(main_698_indvar128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_indvar128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %699 = add i32 %indvar128, 1*/
		main_698_699 = (main_698_indvar128_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_698_699_reg <= 0;
	/* main: %698*/
	/*   %699 = add i32 %indvar128, 1*/
	else if((cur_state == LEGUP_F_main_BB__698_490)) begin
		main_698_699_reg <= main_698_699;
		if (start == 1'b0 && ^(main_698_699) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_699_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %scevgep130 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 %699*/
		main_698_scevgep130 = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd4) + (4 * main_698_699_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_698_scevgep130_reg <= 0;
	/* main: %698*/
	/*   %scevgep130 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 %699*/
	else if((cur_state == LEGUP_F_main_BB__698_491)) begin
		main_698_scevgep130_reg <= main_698_scevgep130;
		if (start == 1'b0 && ^(main_698_scevgep130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_scevgep130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %mptr.01.i1.i21.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 %indvar128*/
		main_698_mptr01i1i21ii = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd4) + (4 * main_698_indvar128_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_698_mptr01i1i21ii_reg <= 0;
	/* main: %698*/
	/*   %mptr.01.i1.i21.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 %indvar128*/
	else if((cur_state == LEGUP_F_main_BB__698_490)) begin
		main_698_mptr01i1i21ii_reg <= main_698_mptr01i1i21ii;
		if (start == 1'b0 && ^(main_698_mptr01i1i21ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_mptr01i1i21ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %700 = load i32* %mptr.01.i1.i21.i.i, align 4, !tbaa !1*/
		main_698_700 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_698_700_reg <= 0;
	/* main: %698*/
	/*   %700 = load i32* %mptr.01.i1.i21.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__698_492)) begin
		main_698_700_reg <= main_698_700;
		if (start == 1'b0 && ^(main_698_700) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_700_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %701 = add nsw i32 %700, 128*/
		main_698_701 = (main_698_700 + 32'd128);
end
always @(posedge clk) begin
	if (reset)
		main_698_701_reg <= 0;
	/* main: %698*/
	/*   %701 = add nsw i32 %700, 128*/
	else if((cur_state == LEGUP_F_main_BB__698_492)) begin
		main_698_701_reg <= main_698_701;
		if (start == 1'b0 && ^(main_698_701) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_701_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %702 = icmp ult i32* %scevgep130, %647*/
		main_698_702 = (main_698_scevgep130_reg < main_preheader49lrphii_647_reg);
end
always @(posedge clk) begin
	if (reset)
		main_698_702_reg <= 0;
	/* main: %698*/
	/*   %702 = icmp ult i32* %scevgep130, %647*/
	else if((cur_state == LEGUP_F_main_BB__698_492)) begin
		main_698_702_reg <= main_698_702;
		if (start == 1'b0 && ^(main_698_702) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_702_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %indvar.next129 = add i32 %indvar128, 1*/
		main_698_indvarnext129 = (main_698_indvar128_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_698_indvarnext129_reg <= 0;
	/* main: %698*/
	/*   %indvar.next129 = add i32 %indvar128, 1*/
	else if((cur_state == LEGUP_F_main_BB__698_490)) begin
		main_698_indvarnext129_reg <= main_698_indvarnext129;
		if (start == 1'b0 && ^(main_698_indvarnext129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_indvarnext129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %indvar132 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i23.i.i.preheader ], [ %indvar.next133, %710 ]*/
	if (((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti23iipreheader_494) & (memory_controller_waitrequest == 1'd0))) begin
		main_PostshiftIDctMatrixexiti23ii_indvar132 = 32'd0;
	end
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %indvar132 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i23.i.i.preheader ], [ %indvar.next133, %710 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__710_503) & (memory_controller_waitrequest == 1'd0)) & (main_710_711 == 1'd1))) */ begin
		main_PostshiftIDctMatrixexiti23ii_indvar132 = main_710_indvarnext133;
	end
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti23ii_indvar132_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %indvar132 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i23.i.i.preheader ], [ %indvar.next133, %710 ]*/
	else if(((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti23iipreheader_494) & (memory_controller_waitrequest == 1'd0))) begin
		main_PostshiftIDctMatrixexiti23ii_indvar132_reg <= main_PostshiftIDctMatrixexiti23ii_indvar132;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti23ii_indvar132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti23ii_indvar132_reg"); $finish; end
	end
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %indvar132 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i23.i.i.preheader ], [ %indvar.next133, %710 ]*/
	else if((((cur_state == LEGUP_F_main_BB__710_503) & (memory_controller_waitrequest == 1'd0)) & (main_710_711 == 1'd1))) begin
		main_PostshiftIDctMatrixexiti23ii_indvar132_reg <= main_PostshiftIDctMatrixexiti23ii_indvar132;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti23ii_indvar132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti23ii_indvar132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %703 = add i32 %indvar132, 1*/
		main_PostshiftIDctMatrixexiti23ii_703 = (main_PostshiftIDctMatrixexiti23ii_indvar132_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti23ii_703_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %703 = add i32 %indvar132, 1*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_495)) begin
		main_PostshiftIDctMatrixexiti23ii_703_reg <= main_PostshiftIDctMatrixexiti23ii_703;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti23ii_703) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti23ii_703_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %scevgep134 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 %703*/
		main_PostshiftIDctMatrixexiti23ii_scevgep134 = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd4) + (4 * main_PostshiftIDctMatrixexiti23ii_703_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti23ii_scevgep134_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %scevgep134 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 %703*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_496)) begin
		main_PostshiftIDctMatrixexiti23ii_scevgep134_reg <= main_PostshiftIDctMatrixexiti23ii_scevgep134;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti23ii_scevgep134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti23ii_scevgep134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %mptr.01.i.i22.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 %indvar132*/
		main_PostshiftIDctMatrixexiti23ii_mptr01ii22ii = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd4) + (4 * main_PostshiftIDctMatrixexiti23ii_indvar132_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti23ii_mptr01ii22ii_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %mptr.01.i.i22.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 %indvar132*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_495)) begin
		main_PostshiftIDctMatrixexiti23ii_mptr01ii22ii_reg <= main_PostshiftIDctMatrixexiti23ii_mptr01ii22ii;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti23ii_mptr01ii22ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti23ii_mptr01ii22ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %704 = load i32* %mptr.01.i.i22.i.i, align 4, !tbaa !1*/
		main_PostshiftIDctMatrixexiti23ii_704 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti23ii_704_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %704 = load i32* %mptr.01.i.i22.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_497)) begin
		main_PostshiftIDctMatrixexiti23ii_704_reg <= main_PostshiftIDctMatrixexiti23ii_704;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti23ii_704) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti23ii_704_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %705 = icmp slt i32 %704, 0*/
		main_PostshiftIDctMatrixexiti23ii_705 = ($signed(main_PostshiftIDctMatrixexiti23ii_704) < $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti23ii_705_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %705 = icmp slt i32 %704, 0*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_497)) begin
		main_PostshiftIDctMatrixexiti23ii_705_reg <= main_PostshiftIDctMatrixexiti23ii_705;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti23ii_705) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti23ii_705_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %707*/
	/*   %708 = icmp sgt i32 %704, 255*/
		main_707_708 = ($signed(main_PostshiftIDctMatrixexiti23ii_704_reg) > $signed(32'd255));
end
always @(posedge clk) begin
	if (reset)
		main_707_708_reg <= 0;
	/* main: %707*/
	/*   %708 = icmp sgt i32 %704, 255*/
	else if((cur_state == LEGUP_F_main_BB__707_500)) begin
		main_707_708_reg <= main_707_708;
		if (start == 1'b0 && ^(main_707_708) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_707_708_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %710*/
	/*   %711 = icmp ult i32* %scevgep134, %647*/
		main_710_711 = (main_PostshiftIDctMatrixexiti23ii_scevgep134_reg < main_preheader49lrphii_647_reg);
end
always @(posedge clk) begin
	if (reset)
		main_710_711_reg <= 0;
	/* main: %710*/
	/*   %711 = icmp ult i32* %scevgep134, %647*/
	else if((cur_state == LEGUP_F_main_BB__710_503)) begin
		main_710_711_reg <= main_710_711;
		if (start == 1'b0 && ^(main_710_711) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_710_711_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %710*/
	/*   %indvar.next133 = add i32 %indvar132, 1*/
		main_710_indvarnext133 = (main_PostshiftIDctMatrixexiti23ii_indvar132_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_710_indvarnext133_reg <= 0;
	/* main: %710*/
	/*   %indvar.next133 = add i32 %indvar132, 1*/
	else if((cur_state == LEGUP_F_main_BB__710_503)) begin
		main_710_indvarnext133_reg <= main_710_indvarnext133;
		if (start == 1'b0 && ^(main_710_indvarnext133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_710_indvarnext133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %712*/
	/*   %i.02.i.i26.i.i = phi i32 [ 0, %decode_block.exit24.i.i ], [ %716, %712 ]*/
	if (((cur_state == LEGUP_F_main_BB_decode_blockexit24ii_506) & (memory_controller_waitrequest == 1'd0))) begin
		main_712_i02ii26ii = 32'd0;
	end
	/* main: %712*/
	/*   %i.02.i.i26.i.i = phi i32 [ 0, %decode_block.exit24.i.i ], [ %716, %712 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__712_511) & (memory_controller_waitrequest == 1'd0)) & (main_712_exitcond136_reg == 1'd0))) */ begin
		main_712_i02ii26ii = main_712_716_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_712_i02ii26ii_reg <= 0;
	/* main: %712*/
	/*   %i.02.i.i26.i.i = phi i32 [ 0, %decode_block.exit24.i.i ], [ %716, %712 ]*/
	else if(((cur_state == LEGUP_F_main_BB_decode_blockexit24ii_506) & (memory_controller_waitrequest == 1'd0))) begin
		main_712_i02ii26ii_reg <= main_712_i02ii26ii;
		if (start == 1'b0 && ^(main_712_i02ii26ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_712_i02ii26ii_reg"); $finish; end
	end
	/* main: %712*/
	/*   %i.02.i.i26.i.i = phi i32 [ 0, %decode_block.exit24.i.i ], [ %716, %712 ]*/
	else if((((cur_state == LEGUP_F_main_BB__712_511) & (memory_controller_waitrequest == 1'd0)) & (main_712_exitcond136_reg == 1'd0))) begin
		main_712_i02ii26ii_reg <= main_712_i02ii26ii;
		if (start == 1'b0 && ^(main_712_i02ii26ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_712_i02ii26ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %712*/
	/*   %scevgep137 = getelementptr [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i26.i.i*/
		main_712_scevgep137 = (1'd0 + (4 * main_712_i02ii26ii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_712_scevgep137_reg <= 0;
	/* main: %712*/
	/*   %scevgep137 = getelementptr [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i26.i.i*/
	else if((cur_state == LEGUP_F_main_BB__712_507)) begin
		main_712_scevgep137_reg <= main_712_scevgep137;
		if (start == 1'b0 && ^(main_712_scevgep137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_712_scevgep137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %712*/
	/*   %.01.i.i27.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %i.02.i.i26.i.i*/
		main_712_01ii27ii = (`TAG_main_0_QuantBuffiii_a + (4 * main_712_i02ii26ii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_712_01ii27ii_reg <= 0;
	/* main: %712*/
	/*   %.01.i.i27.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %i.02.i.i26.i.i*/
	else if((cur_state == LEGUP_F_main_BB__712_507)) begin
		main_712_01ii27ii_reg <= main_712_01ii27ii;
		if (start == 1'b0 && ^(main_712_01ii27ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_712_01ii27ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %712*/
	/*   %713 = load i32* %scevgep137, align 4, !tbaa !1*/
		main_712_713 = zigzag_index_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_712_713_reg <= 0;
	/* main: %712*/
	/*   %713 = load i32* %scevgep137, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__712_508)) begin
		main_712_713_reg <= main_712_713;
		if (start == 1'b0 && ^(main_712_713) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_712_713_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %712*/
	/*   %714 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 2, i32 %713*/
		main_712_714 = (`TAG_main_0_HuffBuffii_a + ((256 * 32'd2) + (4 * main_712_713)));
end
always @(posedge clk) begin
	if (reset)
		main_712_714_reg <= 0;
	/* main: %712*/
	/*   %714 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 2, i32 %713*/
	else if((cur_state == LEGUP_F_main_BB__712_508)) begin
		main_712_714_reg <= main_712_714;
		if (start == 1'b0 && ^(main_712_714) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_712_714_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %712*/
	/*   %715 = load i32* %714, align 4, !tbaa !1*/
		main_712_715 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_712_715_reg <= 0;
	/* main: %712*/
	/*   %715 = load i32* %714, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__712_510)) begin
		main_712_715_reg <= main_712_715;
		if (start == 1'b0 && ^(main_712_715) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_712_715_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %712*/
	/*   %716 = add nsw i32 %i.02.i.i26.i.i, 1*/
		main_712_716 = (main_712_i02ii26ii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_712_716_reg <= 0;
	/* main: %712*/
	/*   %716 = add nsw i32 %i.02.i.i26.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__712_507)) begin
		main_712_716_reg <= main_712_716;
		if (start == 1'b0 && ^(main_712_716) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_712_716_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %712*/
	/*   %exitcond136 = icmp eq i32 %716, 64*/
		main_712_exitcond136 = (main_712_716 == 32'd64);
end
always @(posedge clk) begin
	if (reset)
		main_712_exitcond136_reg <= 0;
	/* main: %712*/
	/*   %exitcond136 = icmp eq i32 %716, 64*/
	else if((cur_state == LEGUP_F_main_BB__712_507)) begin
		main_712_exitcond136_reg <= main_712_exitcond136;
		if (start == 1'b0 && ^(main_712_exitcond136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_712_exitcond136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i29.i.i*/
	/*   %717 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 2), align 1, !tbaa !5*/
		main_IZigzagMatrixexiti29ii_717 = p_jinfo_comps_info_quant_tbl_no_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexiti29ii_717_reg <= 0;
	/* main: %IZigzagMatrix.exit.i29.i.i*/
	/*   %717 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 2), align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti29ii_513)) begin
		main_IZigzagMatrixexiti29ii_717_reg <= main_IZigzagMatrixexiti29ii_717;
		if (start == 1'b0 && ^(main_IZigzagMatrixexiti29ii_717) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexiti29ii_717_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i29.i.i*/
	/*   %718 = sext i8 %717 to i32*/
		main_IZigzagMatrixexiti29ii_718 = $signed(main_IZigzagMatrixexiti29ii_717);
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexiti29ii_718_reg <= 0;
	/* main: %IZigzagMatrix.exit.i29.i.i*/
	/*   %718 = sext i8 %717 to i32*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti29ii_513)) begin
		main_IZigzagMatrixexiti29ii_718_reg <= main_IZigzagMatrixexiti29ii_718;
		if (start == 1'b0 && ^(main_IZigzagMatrixexiti29ii_718) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexiti29ii_718_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i29.i.i*/
	/*   %719 = add nsw i32 %718, 1*/
		main_IZigzagMatrixexiti29ii_719 = (main_IZigzagMatrixexiti29ii_718 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexiti29ii_719_reg <= 0;
	/* main: %IZigzagMatrix.exit.i29.i.i*/
	/*   %719 = add nsw i32 %718, 1*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti29ii_513)) begin
		main_IZigzagMatrixexiti29ii_719_reg <= main_IZigzagMatrixexiti29ii_719;
		if (start == 1'b0 && ^(main_IZigzagMatrixexiti29ii_719) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexiti29ii_719_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %720*/
	/*   %indvar139 = phi i32 [ %indvar.next140, %720 ], [ 0, %IZigzagMatrix.exit.i29.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti29ii_513) & (memory_controller_waitrequest == 1'd0))) begin
		main_720_indvar139 = 32'd0;
	end
	/* main: %720*/
	/*   %indvar139 = phi i32 [ %indvar.next140, %720 ], [ 0, %IZigzagMatrix.exit.i29.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__720_517) & (memory_controller_waitrequest == 1'd0)) & (main_720_725_reg == 1'd1))) */ begin
		main_720_indvar139 = main_720_indvarnext140_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_720_indvar139_reg <= 0;
	/* main: %720*/
	/*   %indvar139 = phi i32 [ %indvar.next140, %720 ], [ 0, %IZigzagMatrix.exit.i29.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti29ii_513) & (memory_controller_waitrequest == 1'd0))) begin
		main_720_indvar139_reg <= main_720_indvar139;
		if (start == 1'b0 && ^(main_720_indvar139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_720_indvar139_reg"); $finish; end
	end
	/* main: %720*/
	/*   %indvar139 = phi i32 [ %indvar.next140, %720 ], [ 0, %IZigzagMatrix.exit.i29.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB__720_517) & (memory_controller_waitrequest == 1'd0)) & (main_720_725_reg == 1'd1))) begin
		main_720_indvar139_reg <= main_720_indvar139;
		if (start == 1'b0 && ^(main_720_indvar139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_720_indvar139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %720*/
	/*   %721 = add i32 %indvar139, 1*/
		main_720_721 = (main_720_indvar139_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_720_721_reg <= 0;
	/* main: %720*/
	/*   %721 = add i32 %indvar139, 1*/
	else if((cur_state == LEGUP_F_main_BB__720_514)) begin
		main_720_721_reg <= main_720_721;
		if (start == 1'b0 && ^(main_720_721) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_720_721_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %720*/
	/*   %scevgep141 = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %721*/
		main_720_scevgep141 = (`TAG_main_0_QuantBuffiii_a + (4 * main_720_721_reg));
end
always @(posedge clk) begin
	if (reset)
		main_720_scevgep141_reg <= 0;
	/* main: %720*/
	/*   %scevgep141 = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %721*/
	else if((cur_state == LEGUP_F_main_BB__720_515)) begin
		main_720_scevgep141_reg <= main_720_scevgep141;
		if (start == 1'b0 && ^(main_720_scevgep141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_720_scevgep141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %720*/
	/*   %mptr.02.i.i30.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %indvar139*/
		main_720_mptr02ii30ii = (`TAG_main_0_QuantBuffiii_a + (4 * main_720_indvar139_reg));
end
always @(posedge clk) begin
	if (reset)
		main_720_mptr02ii30ii_reg <= 0;
	/* main: %720*/
	/*   %mptr.02.i.i30.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %indvar139*/
	else if((cur_state == LEGUP_F_main_BB__720_514)) begin
		main_720_mptr02ii30ii_reg <= main_720_mptr02ii30ii;
		if (start == 1'b0 && ^(main_720_mptr02ii30ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_720_mptr02ii30ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %720*/
	/*   %.01.i2.i31.i.i = getelementptr [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %719, i32 %indvar139*/
		main_720_01i2i31ii = (1'd0 + ((256 * main_IZigzagMatrixexiti29ii_719_reg) + (4 * main_720_indvar139_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_720_01i2i31ii_reg <= 0;
	/* main: %720*/
	/*   %.01.i2.i31.i.i = getelementptr [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %719, i32 %indvar139*/
	else if((cur_state == LEGUP_F_main_BB__720_514)) begin
		main_720_01i2i31ii_reg <= main_720_01i2i31ii;
		if (start == 1'b0 && ^(main_720_01i2i31ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_720_01i2i31ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %720*/
	/*   %722 = load i32* %mptr.02.i.i30.i.i, align 4, !tbaa !1*/
		main_720_722 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_720_722_reg <= 0;
	/* main: %720*/
	/*   %722 = load i32* %mptr.02.i.i30.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__720_516)) begin
		main_720_722_reg <= main_720_722;
		if (start == 1'b0 && ^(main_720_722) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_720_722_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %720*/
	/*   %723 = load i32* %.01.i2.i31.i.i, align 4, !tbaa !1*/
		main_720_723 = p_jinfo_quant_tbl_quantval_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_720_723_reg <= 0;
	/* main: %720*/
	/*   %723 = load i32* %.01.i2.i31.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__720_515)) begin
		main_720_723_reg <= main_720_723;
		if (start == 1'b0 && ^(main_720_723) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_720_723_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %720*/
	/*   %724 = mul nsw i32 %723, %722*/
		main_720_724 = (main_720_723_reg * main_720_722);
end
always @(posedge clk) begin
	if (reset)
		main_720_724_reg <= 0;
	/* main: %720*/
	/*   %724 = mul nsw i32 %723, %722*/
	else if((cur_state == LEGUP_F_main_BB__720_516)) begin
		main_720_724_reg <= main_720_724;
		if (start == 1'b0 && ^(main_720_724) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_720_724_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %720*/
	/*   %725 = icmp ult i32* %scevgep141, %645*/
		main_720_725 = (main_720_scevgep141_reg < main_preheader49lrphii_645_reg);
end
always @(posedge clk) begin
	if (reset)
		main_720_725_reg <= 0;
	/* main: %720*/
	/*   %725 = icmp ult i32* %scevgep141, %645*/
	else if((cur_state == LEGUP_F_main_BB__720_516)) begin
		main_720_725_reg <= main_720_725;
		if (start == 1'b0 && ^(main_720_725) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_720_725_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %720*/
	/*   %indvar.next140 = add i32 %indvar139, 1*/
		main_720_indvarnext140 = (main_720_indvar139_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_720_indvarnext140_reg <= 0;
	/* main: %720*/
	/*   %indvar.next140 = add i32 %indvar139, 1*/
	else if((cur_state == LEGUP_F_main_BB__720_514)) begin
		main_720_indvarnext140_reg <= main_720_indvarnext140;
		if (start == 1'b0 && ^(main_720_indvarnext140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_720_indvarnext140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %726*/
	/*   %indvar144 = phi i32 [ %indvar.next145, %726 ], [ 0, %IQuantize.exit.i32.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_IQuantizeexiti32ii_520) & (memory_controller_waitrequest == 1'd0))) begin
		main_726_indvar144 = 32'd0;
	end
	/* main: %726*/
	/*   %indvar144 = phi i32 [ %indvar.next145, %726 ], [ 0, %IQuantize.exit.i32.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__726_524) & (memory_controller_waitrequest == 1'd0)) & (main_726_730_reg == 1'd1))) */ begin
		main_726_indvar144 = main_726_indvarnext145_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_726_indvar144_reg <= 0;
	/* main: %726*/
	/*   %indvar144 = phi i32 [ %indvar.next145, %726 ], [ 0, %IQuantize.exit.i32.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_IQuantizeexiti32ii_520) & (memory_controller_waitrequest == 1'd0))) begin
		main_726_indvar144_reg <= main_726_indvar144;
		if (start == 1'b0 && ^(main_726_indvar144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_726_indvar144_reg"); $finish; end
	end
	/* main: %726*/
	/*   %indvar144 = phi i32 [ %indvar.next145, %726 ], [ 0, %IQuantize.exit.i32.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB__726_524) & (memory_controller_waitrequest == 1'd0)) & (main_726_730_reg == 1'd1))) begin
		main_726_indvar144_reg <= main_726_indvar144;
		if (start == 1'b0 && ^(main_726_indvar144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_726_indvar144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %726*/
	/*   %727 = add i32 %indvar144, 1*/
		main_726_727 = (main_726_indvar144_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_726_727_reg <= 0;
	/* main: %726*/
	/*   %727 = add i32 %indvar144, 1*/
	else if((cur_state == LEGUP_F_main_BB__726_521)) begin
		main_726_727_reg <= main_726_727;
		if (start == 1'b0 && ^(main_726_727) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_726_727_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %726*/
	/*   %scevgep146 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 %727*/
		main_726_scevgep146 = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd5) + (4 * main_726_727_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_726_scevgep146_reg <= 0;
	/* main: %726*/
	/*   %scevgep146 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 %727*/
	else if((cur_state == LEGUP_F_main_BB__726_522)) begin
		main_726_scevgep146_reg <= main_726_scevgep146;
		if (start == 1'b0 && ^(main_726_scevgep146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_726_scevgep146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %726*/
	/*   %mptr.01.i1.i33.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 %indvar144*/
		main_726_mptr01i1i33ii = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd5) + (4 * main_726_indvar144_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_726_mptr01i1i33ii_reg <= 0;
	/* main: %726*/
	/*   %mptr.01.i1.i33.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 %indvar144*/
	else if((cur_state == LEGUP_F_main_BB__726_521)) begin
		main_726_mptr01i1i33ii_reg <= main_726_mptr01i1i33ii;
		if (start == 1'b0 && ^(main_726_mptr01i1i33ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_726_mptr01i1i33ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %726*/
	/*   %728 = load i32* %mptr.01.i1.i33.i.i, align 4, !tbaa !1*/
		main_726_728 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_726_728_reg <= 0;
	/* main: %726*/
	/*   %728 = load i32* %mptr.01.i1.i33.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__726_523)) begin
		main_726_728_reg <= main_726_728;
		if (start == 1'b0 && ^(main_726_728) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_726_728_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %726*/
	/*   %729 = add nsw i32 %728, 128*/
		main_726_729 = (main_726_728 + 32'd128);
end
always @(posedge clk) begin
	if (reset)
		main_726_729_reg <= 0;
	/* main: %726*/
	/*   %729 = add nsw i32 %728, 128*/
	else if((cur_state == LEGUP_F_main_BB__726_523)) begin
		main_726_729_reg <= main_726_729;
		if (start == 1'b0 && ^(main_726_729) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_726_729_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %726*/
	/*   %730 = icmp ult i32* %scevgep146, %649*/
		main_726_730 = (main_726_scevgep146_reg < main_preheader49lrphii_649_reg);
end
always @(posedge clk) begin
	if (reset)
		main_726_730_reg <= 0;
	/* main: %726*/
	/*   %730 = icmp ult i32* %scevgep146, %649*/
	else if((cur_state == LEGUP_F_main_BB__726_523)) begin
		main_726_730_reg <= main_726_730;
		if (start == 1'b0 && ^(main_726_730) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_726_730_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %726*/
	/*   %indvar.next145 = add i32 %indvar144, 1*/
		main_726_indvarnext145 = (main_726_indvar144_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_726_indvarnext145_reg <= 0;
	/* main: %726*/
	/*   %indvar.next145 = add i32 %indvar144, 1*/
	else if((cur_state == LEGUP_F_main_BB__726_521)) begin
		main_726_indvarnext145_reg <= main_726_indvarnext145;
		if (start == 1'b0 && ^(main_726_indvarnext145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_726_indvarnext145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %indvar148 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i35.i.i.preheader ], [ %indvar.next149, %738 ]*/
	if (((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti35iipreheader_525) & (memory_controller_waitrequest == 1'd0))) begin
		main_PostshiftIDctMatrixexiti35ii_indvar148 = 32'd0;
	end
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %indvar148 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i35.i.i.preheader ], [ %indvar.next149, %738 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__738_534) & (memory_controller_waitrequest == 1'd0)) & (main_738_739 == 1'd1))) */ begin
		main_PostshiftIDctMatrixexiti35ii_indvar148 = main_738_indvarnext149;
	end
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti35ii_indvar148_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %indvar148 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i35.i.i.preheader ], [ %indvar.next149, %738 ]*/
	else if(((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti35iipreheader_525) & (memory_controller_waitrequest == 1'd0))) begin
		main_PostshiftIDctMatrixexiti35ii_indvar148_reg <= main_PostshiftIDctMatrixexiti35ii_indvar148;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti35ii_indvar148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti35ii_indvar148_reg"); $finish; end
	end
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %indvar148 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i35.i.i.preheader ], [ %indvar.next149, %738 ]*/
	else if((((cur_state == LEGUP_F_main_BB__738_534) & (memory_controller_waitrequest == 1'd0)) & (main_738_739 == 1'd1))) begin
		main_PostshiftIDctMatrixexiti35ii_indvar148_reg <= main_PostshiftIDctMatrixexiti35ii_indvar148;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti35ii_indvar148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti35ii_indvar148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %731 = add i32 %indvar148, 1*/
		main_PostshiftIDctMatrixexiti35ii_731 = (main_PostshiftIDctMatrixexiti35ii_indvar148_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti35ii_731_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %731 = add i32 %indvar148, 1*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_526)) begin
		main_PostshiftIDctMatrixexiti35ii_731_reg <= main_PostshiftIDctMatrixexiti35ii_731;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti35ii_731) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti35ii_731_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %scevgep150 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 %731*/
		main_PostshiftIDctMatrixexiti35ii_scevgep150 = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd5) + (4 * main_PostshiftIDctMatrixexiti35ii_731_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti35ii_scevgep150_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %scevgep150 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 %731*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_527)) begin
		main_PostshiftIDctMatrixexiti35ii_scevgep150_reg <= main_PostshiftIDctMatrixexiti35ii_scevgep150;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti35ii_scevgep150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti35ii_scevgep150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %mptr.01.i.i34.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 %indvar148*/
		main_PostshiftIDctMatrixexiti35ii_mptr01ii34ii = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd5) + (4 * main_PostshiftIDctMatrixexiti35ii_indvar148_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti35ii_mptr01ii34ii_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %mptr.01.i.i34.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 %indvar148*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_526)) begin
		main_PostshiftIDctMatrixexiti35ii_mptr01ii34ii_reg <= main_PostshiftIDctMatrixexiti35ii_mptr01ii34ii;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti35ii_mptr01ii34ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti35ii_mptr01ii34ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %732 = load i32* %mptr.01.i.i34.i.i, align 4, !tbaa !1*/
		main_PostshiftIDctMatrixexiti35ii_732 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti35ii_732_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %732 = load i32* %mptr.01.i.i34.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_528)) begin
		main_PostshiftIDctMatrixexiti35ii_732_reg <= main_PostshiftIDctMatrixexiti35ii_732;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti35ii_732) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti35ii_732_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %733 = icmp slt i32 %732, 0*/
		main_PostshiftIDctMatrixexiti35ii_733 = ($signed(main_PostshiftIDctMatrixexiti35ii_732) < $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti35ii_733_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %733 = icmp slt i32 %732, 0*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_528)) begin
		main_PostshiftIDctMatrixexiti35ii_733_reg <= main_PostshiftIDctMatrixexiti35ii_733;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti35ii_733) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti35ii_733_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %735*/
	/*   %736 = icmp sgt i32 %732, 255*/
		main_735_736 = ($signed(main_PostshiftIDctMatrixexiti35ii_732_reg) > $signed(32'd255));
end
always @(posedge clk) begin
	if (reset)
		main_735_736_reg <= 0;
	/* main: %735*/
	/*   %736 = icmp sgt i32 %732, 255*/
	else if((cur_state == LEGUP_F_main_BB__735_531)) begin
		main_735_736_reg <= main_735_736;
		if (start == 1'b0 && ^(main_735_736) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_735_736_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %738*/
	/*   %739 = icmp ult i32* %scevgep150, %649*/
		main_738_739 = (main_PostshiftIDctMatrixexiti35ii_scevgep150_reg < main_preheader49lrphii_649_reg);
end
always @(posedge clk) begin
	if (reset)
		main_738_739_reg <= 0;
	/* main: %738*/
	/*   %739 = icmp ult i32* %scevgep150, %649*/
	else if((cur_state == LEGUP_F_main_BB__738_534)) begin
		main_738_739_reg <= main_738_739;
		if (start == 1'b0 && ^(main_738_739) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_738_739_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %738*/
	/*   %indvar.next149 = add i32 %indvar148, 1*/
		main_738_indvarnext149 = (main_PostshiftIDctMatrixexiti35ii_indvar148_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_738_indvarnext149_reg <= 0;
	/* main: %738*/
	/*   %indvar.next149 = add i32 %indvar148, 1*/
	else if((cur_state == LEGUP_F_main_BB__738_534)) begin
		main_738_indvarnext149_reg <= main_738_indvarnext149;
		if (start == 1'b0 && ^(main_738_indvarnext149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_738_indvarnext149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader48.i.i*/
	/*   %740 = icmp slt i32 %651, %501*/
		main_preheader48ii_740 = ($signed(main_preheader49ii_651_reg) < $signed(main_read_markersexiti_501_reg));
end
always @(posedge clk) begin
	if (reset)
		main_preheader48ii_740_reg <= 0;
	/* main: %.preheader48.i.i*/
	/*   %740 = icmp slt i32 %651, %501*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_536)) begin
		main_preheader48ii_740_reg <= main_preheader48ii_740;
		if (start == 1'b0 && ^(main_preheader48ii_740) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader48ii_740_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader48.i.i*/
	/*   %indvar.next165 = add i32 %indvar164, 1*/
		main_preheader48ii_indvarnext165 = (main_preheader49ii_indvar164_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_preheader48ii_indvarnext165_reg <= 0;
	/* main: %.preheader48.i.i*/
	/*   %indvar.next165 = add i32 %indvar164, 1*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_536)) begin
		main_preheader48ii_indvarnext165_reg <= main_preheader48ii_indvarnext165;
		if (start == 1'b0 && ^(main_preheader48ii_indvarnext165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader48ii_indvarnext165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader47.i.i*/
	/*   %i.556.i.i = phi i32 [ %773, %YuvToRgb.exit45.i.i ], [ 0, %.preheader47.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader47iipreheader_535) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader47ii_i556ii = 32'd0;
	end
	/* main: %.preheader47.i.i*/
	/*   %i.556.i.i = phi i32 [ %773, %YuvToRgb.exit45.i.i ], [ 0, %.preheader47.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_YuvToRgbexit45ii_559) & (memory_controller_waitrequest == 1'd0)) & (main_YuvToRgbexit45ii_exitcond159 == 1'd0))) */ begin
		main_preheader47ii_i556ii = main_YuvToRgbexit45ii_773;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheader47ii_i556ii_reg <= 0;
	/* main: %.preheader47.i.i*/
	/*   %i.556.i.i = phi i32 [ %773, %YuvToRgb.exit45.i.i ], [ 0, %.preheader47.i.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_preheader47iipreheader_535) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader47ii_i556ii_reg <= main_preheader47ii_i556ii;
		if (start == 1'b0 && ^(main_preheader47ii_i556ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader47ii_i556ii_reg"); $finish; end
	end
	/* main: %.preheader47.i.i*/
	/*   %i.556.i.i = phi i32 [ %773, %YuvToRgb.exit45.i.i ], [ 0, %.preheader47.i.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB_YuvToRgbexit45ii_559) & (memory_controller_waitrequest == 1'd0)) & (main_YuvToRgbexit45ii_exitcond159 == 1'd0))) begin
		main_preheader47ii_i556ii_reg <= main_preheader47ii_i556ii;
		if (start == 1'b0 && ^(main_preheader47ii_i556ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader47ii_i556ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %i.03.i37.i.i = phi i32 [ %772, %771 ], [ 0, %.preheader47.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader47ii_546) & (memory_controller_waitrequest == 1'd0))) begin
		main_741_i03i37ii = 32'd0;
	end
	/* main: %741*/
	/*   %i.03.i37.i.i = phi i32 [ %772, %771 ], [ 0, %.preheader47.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__771_558) & (memory_controller_waitrequest == 1'd0)) & (main_771_exitcond152_reg == 1'd0))) */ begin
		main_741_i03i37ii = main_771_772_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_741_i03i37ii_reg <= 0;
	/* main: %741*/
	/*   %i.03.i37.i.i = phi i32 [ %772, %771 ], [ 0, %.preheader47.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_preheader47ii_546) & (memory_controller_waitrequest == 1'd0))) begin
		main_741_i03i37ii_reg <= main_741_i03i37ii;
		if (start == 1'b0 && ^(main_741_i03i37ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_i03i37ii_reg"); $finish; end
	end
	/* main: %741*/
	/*   %i.03.i37.i.i = phi i32 [ %772, %771 ], [ 0, %.preheader47.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB__771_558) & (memory_controller_waitrequest == 1'd0)) & (main_771_exitcond152_reg == 1'd0))) begin
		main_741_i03i37ii_reg <= main_741_i03i37ii;
		if (start == 1'b0 && ^(main_741_i03i37ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_i03i37ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %scevgep158 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 %i.556.i.i, i32 %i.03.i37.i.i*/
		main_741_scevgep158 = (`TAG_main_0_IDCTBuffii_a + ((256 * main_preheader47ii_i556ii_reg) + (4 * main_741_i03i37ii_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_741_scevgep158_reg <= 0;
	/* main: %741*/
	/*   %scevgep158 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 %i.556.i.i, i32 %i.03.i37.i.i*/
	else if((cur_state == LEGUP_F_main_BB__741_547)) begin
		main_741_scevgep158_reg <= main_741_scevgep158;
		if (start == 1'b0 && ^(main_741_scevgep158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_scevgep158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %scevgep155 = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %i.556.i.i, i32 0, i32 %i.03.i37.i.i*/
		main_741_scevgep155 = (`TAG_g_rgb_buf_a + ((768 * main_preheader47ii_i556ii_reg) + (4 * main_741_i03i37ii_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_741_scevgep155_reg <= 0;
	/* main: %741*/
	/*   %scevgep155 = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %i.556.i.i, i32 0, i32 %i.03.i37.i.i*/
	else if((cur_state == LEGUP_F_main_BB__741_547)) begin
		main_741_scevgep155_reg <= main_741_scevgep155;
		if (start == 1'b0 && ^(main_741_scevgep155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_scevgep155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %scevgep154 = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %i.556.i.i, i32 1, i32 %i.03.i37.i.i*/
		main_741_scevgep154 = (`TAG_g_rgb_buf_a + (((768 * main_preheader47ii_i556ii_reg) + (256 * 32'd1)) + (4 * main_741_i03i37ii_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_741_scevgep154_reg <= 0;
	/* main: %741*/
	/*   %scevgep154 = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %i.556.i.i, i32 1, i32 %i.03.i37.i.i*/
	else if((cur_state == LEGUP_F_main_BB__741_547)) begin
		main_741_scevgep154_reg <= main_741_scevgep154;
		if (start == 1'b0 && ^(main_741_scevgep154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_scevgep154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %scevgep153 = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %i.556.i.i, i32 2, i32 %i.03.i37.i.i*/
		main_741_scevgep153 = (`TAG_g_rgb_buf_a + (((768 * main_preheader47ii_i556ii_reg) + (256 * 32'd2)) + (4 * main_741_i03i37ii_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_741_scevgep153_reg <= 0;
	/* main: %741*/
	/*   %scevgep153 = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %i.556.i.i, i32 2, i32 %i.03.i37.i.i*/
	else if((cur_state == LEGUP_F_main_BB__741_547)) begin
		main_741_scevgep153_reg <= main_741_scevgep153;
		if (start == 1'b0 && ^(main_741_scevgep153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_scevgep153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %scevgep156 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 %i.03.i37.i.i*/
		main_741_scevgep156 = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd5) + (4 * main_741_i03i37ii_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_741_scevgep156_reg <= 0;
	/* main: %741*/
	/*   %scevgep156 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 %i.03.i37.i.i*/
	else if((cur_state == LEGUP_F_main_BB__741_547)) begin
		main_741_scevgep156_reg <= main_741_scevgep156;
		if (start == 1'b0 && ^(main_741_scevgep156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_scevgep156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %scevgep157 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 %i.03.i37.i.i*/
		main_741_scevgep157 = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd4) + (4 * main_741_i03i37ii_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_741_scevgep157_reg <= 0;
	/* main: %741*/
	/*   %scevgep157 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 %i.03.i37.i.i*/
	else if((cur_state == LEGUP_F_main_BB__741_547)) begin
		main_741_scevgep157_reg <= main_741_scevgep157;
		if (start == 1'b0 && ^(main_741_scevgep157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_scevgep157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %742 = load i32* %scevgep158, align 4, !tbaa !1*/
		main_741_742 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_741_742_reg <= 0;
	/* main: %741*/
	/*   %742 = load i32* %scevgep158, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__741_550)) begin
		main_741_742_reg <= main_741_742;
		if (start == 1'b0 && ^(main_741_742) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_742_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %743 = load i32* %scevgep157, align 4, !tbaa !1*/
		main_741_743 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_741_743_reg <= 0;
	/* main: %741*/
	/*   %743 = load i32* %scevgep157, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__741_549)) begin
		main_741_743_reg <= main_741_743;
		if (start == 1'b0 && ^(main_741_743) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_743_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %744 = add nsw i32 %743, -128*/
		main_741_744 = (main_741_743 + -32'd128);
end
always @(posedge clk) begin
	if (reset)
		main_741_744_reg <= 0;
	/* main: %741*/
	/*   %744 = add nsw i32 %743, -128*/
	else if((cur_state == LEGUP_F_main_BB__741_549)) begin
		main_741_744_reg <= main_741_744;
		if (start == 1'b0 && ^(main_741_744) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_744_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %745 = load i32* %scevgep156, align 4, !tbaa !1*/
		main_741_745 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_741_745_reg <= 0;
	/* main: %741*/
	/*   %745 = load i32* %scevgep156, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__741_549)) begin
		main_741_745_reg <= main_741_745;
		if (start == 1'b0 && ^(main_741_745) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_745_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %746 = add nsw i32 %745, -128*/
		main_741_746 = (main_741_745 + -32'd128);
end
always @(posedge clk) begin
	if (reset)
		main_741_746_reg <= 0;
	/* main: %741*/
	/*   %746 = add nsw i32 %745, -128*/
	else if((cur_state == LEGUP_F_main_BB__741_549)) begin
		main_741_746_reg <= main_741_746;
		if (start == 1'b0 && ^(main_741_746) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_746_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %747 = shl nsw i32 %742, 8*/
		main_741_747 = (main_741_742 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_741_747_reg <= 0;
	/* main: %741*/
	/*   %747 = shl nsw i32 %742, 8*/
	else if((cur_state == LEGUP_F_main_BB__741_550)) begin
		main_741_747_reg <= main_741_747;
		if (start == 1'b0 && ^(main_741_747) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_747_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %748 = mul nsw i32 %746, 359*/
		main_741_748 = (main_741_746 * 32'd359);
end
always @(posedge clk) begin
	if (reset)
		main_741_748_reg <= 0;
	/* main: %741*/
	/*   %748 = mul nsw i32 %746, 359*/
	else if((cur_state == LEGUP_F_main_BB__741_549)) begin
		main_741_748_reg <= main_741_748;
		if (start == 1'b0 && ^(main_741_748) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_748_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %749 = or i32 %747, 128*/
		main_741_749 = (main_741_747 | 32'd128);
end
always @(posedge clk) begin
	if (reset)
		main_741_749_reg <= 0;
	/* main: %741*/
	/*   %749 = or i32 %747, 128*/
	else if((cur_state == LEGUP_F_main_BB__741_550)) begin
		main_741_749_reg <= main_741_749;
		if (start == 1'b0 && ^(main_741_749) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_749_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %750 = add i32 %748, %749*/
		main_741_750 = (main_741_748_reg + main_741_749);
end
always @(posedge clk) begin
	if (reset)
		main_741_750_reg <= 0;
	/* main: %741*/
	/*   %750 = add i32 %748, %749*/
	else if((cur_state == LEGUP_F_main_BB__741_550)) begin
		main_741_750_reg <= main_741_750;
		if (start == 1'b0 && ^(main_741_750) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_750_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %751 = ashr i32 %750, 8*/
		main_741_751 = ($signed(main_741_750) >>> 32'd8);
end
always @(posedge clk) begin
	if (reset)
		main_741_751_reg <= 0;
	/* main: %741*/
	/*   %751 = ashr i32 %750, 8*/
	else if((cur_state == LEGUP_F_main_BB__741_550)) begin
		main_741_751_reg <= main_741_751;
		if (start == 1'b0 && ^(main_741_751) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_751_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %752 = mul i32 %744, -88*/
		main_741_752 = (main_741_744 * -32'd88);
end
always @(posedge clk) begin
	if (reset)
		main_741_752_reg <= 0;
	/* main: %741*/
	/*   %752 = mul i32 %744, -88*/
	else if((cur_state == LEGUP_F_main_BB__741_549)) begin
		main_741_752_reg <= main_741_752;
		if (start == 1'b0 && ^(main_741_752) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_752_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %753 = mul i32 %746, -182*/
		main_741_753 = (main_741_746 * -32'd182);
end
always @(posedge clk) begin
	if (reset)
		main_741_753_reg <= 0;
	/* main: %741*/
	/*   %753 = mul i32 %746, -182*/
	else if((cur_state == LEGUP_F_main_BB__741_549)) begin
		main_741_753_reg <= main_741_753;
		if (start == 1'b0 && ^(main_741_753) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_753_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %754 = add i32 %752, %749*/
		main_741_754 = (main_741_752_reg + main_741_749);
end
always @(posedge clk) begin
	if (reset)
		main_741_754_reg <= 0;
	/* main: %741*/
	/*   %754 = add i32 %752, %749*/
	else if((cur_state == LEGUP_F_main_BB__741_550)) begin
		main_741_754_reg <= main_741_754;
		if (start == 1'b0 && ^(main_741_754) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_754_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %755 = add i32 %754, %753*/
		main_741_755 = (main_741_754 + main_741_753_reg);
end
always @(posedge clk) begin
	if (reset)
		main_741_755_reg <= 0;
	/* main: %741*/
	/*   %755 = add i32 %754, %753*/
	else if((cur_state == LEGUP_F_main_BB__741_550)) begin
		main_741_755_reg <= main_741_755;
		if (start == 1'b0 && ^(main_741_755) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_755_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %756 = ashr i32 %755, 8*/
		main_741_756 = ($signed(main_741_755) >>> 32'd8);
end
always @(posedge clk) begin
	if (reset)
		main_741_756_reg <= 0;
	/* main: %741*/
	/*   %756 = ashr i32 %755, 8*/
	else if((cur_state == LEGUP_F_main_BB__741_550)) begin
		main_741_756_reg <= main_741_756;
		if (start == 1'b0 && ^(main_741_756) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_756_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %757 = mul nsw i32 %744, 454*/
		main_741_757 = (main_741_744 * 32'd454);
end
always @(posedge clk) begin
	if (reset)
		main_741_757_reg <= 0;
	/* main: %741*/
	/*   %757 = mul nsw i32 %744, 454*/
	else if((cur_state == LEGUP_F_main_BB__741_549)) begin
		main_741_757_reg <= main_741_757;
		if (start == 1'b0 && ^(main_741_757) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_757_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %758 = add i32 %757, %749*/
		main_741_758 = (main_741_757_reg + main_741_749);
end
always @(posedge clk) begin
	if (reset)
		main_741_758_reg <= 0;
	/* main: %741*/
	/*   %758 = add i32 %757, %749*/
	else if((cur_state == LEGUP_F_main_BB__741_550)) begin
		main_741_758_reg <= main_741_758;
		if (start == 1'b0 && ^(main_741_758) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_758_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %759 = ashr i32 %758, 8*/
		main_741_759 = ($signed(main_741_758) >>> 32'd8);
end
always @(posedge clk) begin
	if (reset)
		main_741_759_reg <= 0;
	/* main: %741*/
	/*   %759 = ashr i32 %758, 8*/
	else if((cur_state == LEGUP_F_main_BB__741_550)) begin
		main_741_759_reg <= main_741_759;
		if (start == 1'b0 && ^(main_741_759) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_759_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %741*/
	/*   %760 = icmp slt i32 %751, 0*/
		main_741_760 = ($signed(main_741_751) < $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_741_760_reg <= 0;
	/* main: %741*/
	/*   %760 = icmp slt i32 %751, 0*/
	else if((cur_state == LEGUP_F_main_BB__741_550)) begin
		main_741_760_reg <= main_741_760;
		if (start == 1'b0 && ^(main_741_760) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_741_760_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %761*/
	/*   %762 = icmp sgt i32 %751, 255*/
		main_761_762 = ($signed(main_741_751_reg) > $signed(32'd255));
end
always @(posedge clk) begin
	if (reset)
		main_761_762_reg <= 0;
	/* main: %761*/
	/*   %762 = icmp sgt i32 %751, 255*/
	else if((cur_state == LEGUP_F_main_BB__761_551)) begin
		main_761_762_reg <= main_761_762;
		if (start == 1'b0 && ^(main_761_762) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_761_762_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %761*/
	/*   %..i38.i.i = select i1 %762, i32 255, i32 %751*/
		main_761_i38ii = (main_761_762 ? 32'd255 : main_741_751_reg);
end
always @(posedge clk) begin
	if (reset)
		main_761_i38ii_reg <= 0;
	/* main: %761*/
	/*   %..i38.i.i = select i1 %762, i32 255, i32 %751*/
	else if((cur_state == LEGUP_F_main_BB__761_551)) begin
		main_761_i38ii_reg <= main_761_i38ii;
		if (start == 1'b0 && ^(main_761_i38ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_761_i38ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %763*/
	/*   %r.0.i39.i.i = phi i32 [ 0, %741 ], [ %..i38.i.i, %761 ]*/
	if ((((cur_state == LEGUP_F_main_BB__741_550) & (memory_controller_waitrequest == 1'd0)) & (main_741_760 == 1'd1))) begin
		main_763_r0i39ii = 32'd0;
	end
	/* main: %763*/
	/*   %r.0.i39.i.i = phi i32 [ 0, %741 ], [ %..i38.i.i, %761 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__761_551) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_763_r0i39ii = main_761_i38ii;
	end
end
always @(posedge clk) begin
	if (reset)
		main_763_r0i39ii_reg <= 0;
	/* main: %763*/
	/*   %r.0.i39.i.i = phi i32 [ 0, %741 ], [ %..i38.i.i, %761 ]*/
	else if((((cur_state == LEGUP_F_main_BB__741_550) & (memory_controller_waitrequest == 1'd0)) & (main_741_760 == 1'd1))) begin
		main_763_r0i39ii_reg <= main_763_r0i39ii;
		if (start == 1'b0 && ^(main_763_r0i39ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_763_r0i39ii_reg"); $finish; end
	end
	/* main: %763*/
	/*   %r.0.i39.i.i = phi i32 [ 0, %741 ], [ %..i38.i.i, %761 ]*/
	else if(((cur_state == LEGUP_F_main_BB__761_551) & (memory_controller_waitrequest == 1'd0))) begin
		main_763_r0i39ii_reg <= main_763_r0i39ii;
		if (start == 1'b0 && ^(main_763_r0i39ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_763_r0i39ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %763*/
	/*   %764 = icmp slt i32 %756, 0*/
		main_763_764 = ($signed(main_741_756_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_763_764_reg <= 0;
	/* main: %763*/
	/*   %764 = icmp slt i32 %756, 0*/
	else if((cur_state == LEGUP_F_main_BB__763_552)) begin
		main_763_764_reg <= main_763_764;
		if (start == 1'b0 && ^(main_763_764) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_763_764_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %765*/
	/*   %766 = icmp sgt i32 %756, 255*/
		main_765_766 = ($signed(main_741_756_reg) > $signed(32'd255));
end
always @(posedge clk) begin
	if (reset)
		main_765_766_reg <= 0;
	/* main: %765*/
	/*   %766 = icmp sgt i32 %756, 255*/
	else if((cur_state == LEGUP_F_main_BB__765_553)) begin
		main_765_766_reg <= main_765_766;
		if (start == 1'b0 && ^(main_765_766) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_765_766_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %765*/
	/*   %.1.i40.i.i = select i1 %766, i32 255, i32 %756*/
		main_765_1i40ii = (main_765_766 ? 32'd255 : main_741_756_reg);
end
always @(posedge clk) begin
	if (reset)
		main_765_1i40ii_reg <= 0;
	/* main: %765*/
	/*   %.1.i40.i.i = select i1 %766, i32 255, i32 %756*/
	else if((cur_state == LEGUP_F_main_BB__765_553)) begin
		main_765_1i40ii_reg <= main_765_1i40ii;
		if (start == 1'b0 && ^(main_765_1i40ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_765_1i40ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %767*/
	/*   %g.0.i41.i.i = phi i32 [ 0, %763 ], [ %.1.i40.i.i, %765 ]*/
	if ((((cur_state == LEGUP_F_main_BB__763_552) & (memory_controller_waitrequest == 1'd0)) & (main_763_764 == 1'd1))) begin
		main_767_g0i41ii = 32'd0;
	end
	/* main: %767*/
	/*   %g.0.i41.i.i = phi i32 [ 0, %763 ], [ %.1.i40.i.i, %765 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__765_553) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_767_g0i41ii = main_765_1i40ii;
	end
end
always @(posedge clk) begin
	if (reset)
		main_767_g0i41ii_reg <= 0;
	/* main: %767*/
	/*   %g.0.i41.i.i = phi i32 [ 0, %763 ], [ %.1.i40.i.i, %765 ]*/
	else if((((cur_state == LEGUP_F_main_BB__763_552) & (memory_controller_waitrequest == 1'd0)) & (main_763_764 == 1'd1))) begin
		main_767_g0i41ii_reg <= main_767_g0i41ii;
		if (start == 1'b0 && ^(main_767_g0i41ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_767_g0i41ii_reg"); $finish; end
	end
	/* main: %767*/
	/*   %g.0.i41.i.i = phi i32 [ 0, %763 ], [ %.1.i40.i.i, %765 ]*/
	else if(((cur_state == LEGUP_F_main_BB__765_553) & (memory_controller_waitrequest == 1'd0))) begin
		main_767_g0i41ii_reg <= main_767_g0i41ii;
		if (start == 1'b0 && ^(main_767_g0i41ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_767_g0i41ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %767*/
	/*   %768 = icmp slt i32 %759, 0*/
		main_767_768 = ($signed(main_741_759_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_767_768_reg <= 0;
	/* main: %767*/
	/*   %768 = icmp slt i32 %759, 0*/
	else if((cur_state == LEGUP_F_main_BB__767_554)) begin
		main_767_768_reg <= main_767_768;
		if (start == 1'b0 && ^(main_767_768) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_767_768_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %769*/
	/*   %770 = icmp sgt i32 %759, 255*/
		main_769_770 = ($signed(main_741_759_reg) > $signed(32'd255));
end
always @(posedge clk) begin
	if (reset)
		main_769_770_reg <= 0;
	/* main: %769*/
	/*   %770 = icmp sgt i32 %759, 255*/
	else if((cur_state == LEGUP_F_main_BB__769_555)) begin
		main_769_770_reg <= main_769_770;
		if (start == 1'b0 && ^(main_769_770) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_769_770_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %769*/
	/*   %.2.i42.i.i = select i1 %770, i32 255, i32 %759*/
		main_769_2i42ii = (main_769_770 ? 32'd255 : main_741_759_reg);
end
always @(posedge clk) begin
	if (reset)
		main_769_2i42ii_reg <= 0;
	/* main: %769*/
	/*   %.2.i42.i.i = select i1 %770, i32 255, i32 %759*/
	else if((cur_state == LEGUP_F_main_BB__769_555)) begin
		main_769_2i42ii_reg <= main_769_2i42ii;
		if (start == 1'b0 && ^(main_769_2i42ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_769_2i42ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %771*/
	/*   %b.0.i43.i.i = phi i32 [ 0, %767 ], [ %.2.i42.i.i, %769 ]*/
	if ((((cur_state == LEGUP_F_main_BB__767_554) & (memory_controller_waitrequest == 1'd0)) & (main_767_768 == 1'd1))) begin
		main_771_b0i43ii = 32'd0;
	end
	/* main: %771*/
	/*   %b.0.i43.i.i = phi i32 [ 0, %767 ], [ %.2.i42.i.i, %769 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__769_555) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_771_b0i43ii = main_769_2i42ii;
	end
end
always @(posedge clk) begin
	if (reset)
		main_771_b0i43ii_reg <= 0;
	/* main: %771*/
	/*   %b.0.i43.i.i = phi i32 [ 0, %767 ], [ %.2.i42.i.i, %769 ]*/
	else if((((cur_state == LEGUP_F_main_BB__767_554) & (memory_controller_waitrequest == 1'd0)) & (main_767_768 == 1'd1))) begin
		main_771_b0i43ii_reg <= main_771_b0i43ii;
		if (start == 1'b0 && ^(main_771_b0i43ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_771_b0i43ii_reg"); $finish; end
	end
	/* main: %771*/
	/*   %b.0.i43.i.i = phi i32 [ 0, %767 ], [ %.2.i42.i.i, %769 ]*/
	else if(((cur_state == LEGUP_F_main_BB__769_555) & (memory_controller_waitrequest == 1'd0))) begin
		main_771_b0i43ii_reg <= main_771_b0i43ii;
		if (start == 1'b0 && ^(main_771_b0i43ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_771_b0i43ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %771*/
	/*   %772 = add nsw i32 %i.03.i37.i.i, 1*/
		main_771_772 = (main_741_i03i37ii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_771_772_reg <= 0;
	/* main: %771*/
	/*   %772 = add nsw i32 %i.03.i37.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__771_556)) begin
		main_771_772_reg <= main_771_772;
		if (start == 1'b0 && ^(main_771_772) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_771_772_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %771*/
	/*   %exitcond152 = icmp eq i32 %772, 64*/
		main_771_exitcond152 = (main_771_772 == 32'd64);
end
always @(posedge clk) begin
	if (reset)
		main_771_exitcond152_reg <= 0;
	/* main: %771*/
	/*   %exitcond152 = icmp eq i32 %772, 64*/
	else if((cur_state == LEGUP_F_main_BB__771_556)) begin
		main_771_exitcond152_reg <= main_771_exitcond152;
		if (start == 1'b0 && ^(main_771_exitcond152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_771_exitcond152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %YuvToRgb.exit45.i.i*/
	/*   %773 = add nsw i32 %i.556.i.i, 1*/
		main_YuvToRgbexit45ii_773 = (main_preheader47ii_i556ii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_YuvToRgbexit45ii_773_reg <= 0;
	/* main: %YuvToRgb.exit45.i.i*/
	/*   %773 = add nsw i32 %i.556.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB_YuvToRgbexit45ii_559)) begin
		main_YuvToRgbexit45ii_773_reg <= main_YuvToRgbexit45ii_773;
		if (start == 1'b0 && ^(main_YuvToRgbexit45ii_773) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgbexit45ii_773_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %YuvToRgb.exit45.i.i*/
	/*   %exitcond159 = icmp eq i32 %773, 4*/
		main_YuvToRgbexit45ii_exitcond159 = (main_YuvToRgbexit45ii_773 == 32'd4);
end
always @(posedge clk) begin
	if (reset)
		main_YuvToRgbexit45ii_exitcond159_reg <= 0;
	/* main: %YuvToRgb.exit45.i.i*/
	/*   %exitcond159 = icmp eq i32 %773, 4*/
	else if((cur_state == LEGUP_F_main_BB_YuvToRgbexit45ii_559)) begin
		main_YuvToRgbexit45ii_exitcond159_reg <= main_YuvToRgbexit45ii_exitcond159;
		if (start == 1'b0 && ^(main_YuvToRgbexit45ii_exitcond159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgbexit45ii_exitcond159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %774*/
	/*   %i.02.i.i.1.i.i = phi i32 [ 0, %decode_block.exit.i.i ], [ %778, %774 ]*/
	if (((cur_state == LEGUP_F_main_BB_decode_blockexitii_400) & (memory_controller_waitrequest == 1'd0))) begin
		main_774_i02ii1ii = 32'd0;
	end
	/* main: %774*/
	/*   %i.02.i.i.1.i.i = phi i32 [ 0, %decode_block.exit.i.i ], [ %778, %774 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__774_564) & (memory_controller_waitrequest == 1'd0)) & (main_774_exitcond33_reg == 1'd0))) */ begin
		main_774_i02ii1ii = main_774_778_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_774_i02ii1ii_reg <= 0;
	/* main: %774*/
	/*   %i.02.i.i.1.i.i = phi i32 [ 0, %decode_block.exit.i.i ], [ %778, %774 ]*/
	else if(((cur_state == LEGUP_F_main_BB_decode_blockexitii_400) & (memory_controller_waitrequest == 1'd0))) begin
		main_774_i02ii1ii_reg <= main_774_i02ii1ii;
		if (start == 1'b0 && ^(main_774_i02ii1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_774_i02ii1ii_reg"); $finish; end
	end
	/* main: %774*/
	/*   %i.02.i.i.1.i.i = phi i32 [ 0, %decode_block.exit.i.i ], [ %778, %774 ]*/
	else if((((cur_state == LEGUP_F_main_BB__774_564) & (memory_controller_waitrequest == 1'd0)) & (main_774_exitcond33_reg == 1'd0))) begin
		main_774_i02ii1ii_reg <= main_774_i02ii1ii;
		if (start == 1'b0 && ^(main_774_i02ii1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_774_i02ii1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %774*/
	/*   %scevgep34 = getelementptr [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i.1.i.i*/
		main_774_scevgep34 = (1'd0 + (4 * main_774_i02ii1ii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_774_scevgep34_reg <= 0;
	/* main: %774*/
	/*   %scevgep34 = getelementptr [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i.1.i.i*/
	else if((cur_state == LEGUP_F_main_BB__774_560)) begin
		main_774_scevgep34_reg <= main_774_scevgep34;
		if (start == 1'b0 && ^(main_774_scevgep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_774_scevgep34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %774*/
	/*   %.01.i.i.1.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %i.02.i.i.1.i.i*/
		main_774_01ii1ii = (`TAG_main_0_QuantBuffiii_a + (4 * main_774_i02ii1ii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_774_01ii1ii_reg <= 0;
	/* main: %774*/
	/*   %.01.i.i.1.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %i.02.i.i.1.i.i*/
	else if((cur_state == LEGUP_F_main_BB__774_560)) begin
		main_774_01ii1ii_reg <= main_774_01ii1ii;
		if (start == 1'b0 && ^(main_774_01ii1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_774_01ii1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %774*/
	/*   %775 = load i32* %scevgep34, align 4, !tbaa !1*/
		main_774_775 = zigzag_index_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_774_775_reg <= 0;
	/* main: %774*/
	/*   %775 = load i32* %scevgep34, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__774_561)) begin
		main_774_775_reg <= main_774_775;
		if (start == 1'b0 && ^(main_774_775) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_774_775_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %774*/
	/*   %776 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 1, i32 %775*/
		main_774_776 = (`TAG_main_0_HuffBuffii_a + ((256 * 32'd1) + (4 * main_774_775)));
end
always @(posedge clk) begin
	if (reset)
		main_774_776_reg <= 0;
	/* main: %774*/
	/*   %776 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 1, i32 %775*/
	else if((cur_state == LEGUP_F_main_BB__774_561)) begin
		main_774_776_reg <= main_774_776;
		if (start == 1'b0 && ^(main_774_776) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_774_776_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %774*/
	/*   %777 = load i32* %776, align 4, !tbaa !1*/
		main_774_777 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_774_777_reg <= 0;
	/* main: %774*/
	/*   %777 = load i32* %776, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__774_563)) begin
		main_774_777_reg <= main_774_777;
		if (start == 1'b0 && ^(main_774_777) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_774_777_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %774*/
	/*   %778 = add nsw i32 %i.02.i.i.1.i.i, 1*/
		main_774_778 = (main_774_i02ii1ii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_774_778_reg <= 0;
	/* main: %774*/
	/*   %778 = add nsw i32 %i.02.i.i.1.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__774_560)) begin
		main_774_778_reg <= main_774_778;
		if (start == 1'b0 && ^(main_774_778) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_774_778_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %774*/
	/*   %exitcond33 = icmp eq i32 %778, 64*/
		main_774_exitcond33 = (main_774_778 == 32'd64);
end
always @(posedge clk) begin
	if (reset)
		main_774_exitcond33_reg <= 0;
	/* main: %774*/
	/*   %exitcond33 = icmp eq i32 %778, 64*/
	else if((cur_state == LEGUP_F_main_BB__774_560)) begin
		main_774_exitcond33_reg <= main_774_exitcond33;
		if (start == 1'b0 && ^(main_774_exitcond33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_774_exitcond33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i.1.i.i*/
	/*   %779 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 1), align 1, !tbaa !5*/
		main_IZigzagMatrixexiti1ii_779 = p_jinfo_comps_info_quant_tbl_no_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexiti1ii_779_reg <= 0;
	/* main: %IZigzagMatrix.exit.i.1.i.i*/
	/*   %779 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 1), align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti1ii_566)) begin
		main_IZigzagMatrixexiti1ii_779_reg <= main_IZigzagMatrixexiti1ii_779;
		if (start == 1'b0 && ^(main_IZigzagMatrixexiti1ii_779) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexiti1ii_779_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i.1.i.i*/
	/*   %780 = sext i8 %779 to i32*/
		main_IZigzagMatrixexiti1ii_780 = $signed(main_IZigzagMatrixexiti1ii_779);
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexiti1ii_780_reg <= 0;
	/* main: %IZigzagMatrix.exit.i.1.i.i*/
	/*   %780 = sext i8 %779 to i32*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti1ii_566)) begin
		main_IZigzagMatrixexiti1ii_780_reg <= main_IZigzagMatrixexiti1ii_780;
		if (start == 1'b0 && ^(main_IZigzagMatrixexiti1ii_780) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexiti1ii_780_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i.1.i.i*/
	/*   %781 = add nsw i32 %780, 1*/
		main_IZigzagMatrixexiti1ii_781 = (main_IZigzagMatrixexiti1ii_780 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexiti1ii_781_reg <= 0;
	/* main: %IZigzagMatrix.exit.i.1.i.i*/
	/*   %781 = add nsw i32 %780, 1*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti1ii_566)) begin
		main_IZigzagMatrixexiti1ii_781_reg <= main_IZigzagMatrixexiti1ii_781;
		if (start == 1'b0 && ^(main_IZigzagMatrixexiti1ii_781) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexiti1ii_781_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %782*/
	/*   %indvar36 = phi i32 [ %indvar.next37, %782 ], [ 0, %IZigzagMatrix.exit.i.1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti1ii_566) & (memory_controller_waitrequest == 1'd0))) begin
		main_782_indvar36 = 32'd0;
	end
	/* main: %782*/
	/*   %indvar36 = phi i32 [ %indvar.next37, %782 ], [ 0, %IZigzagMatrix.exit.i.1.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__782_570) & (memory_controller_waitrequest == 1'd0)) & (main_782_787_reg == 1'd1))) */ begin
		main_782_indvar36 = main_782_indvarnext37_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_782_indvar36_reg <= 0;
	/* main: %782*/
	/*   %indvar36 = phi i32 [ %indvar.next37, %782 ], [ 0, %IZigzagMatrix.exit.i.1.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti1ii_566) & (memory_controller_waitrequest == 1'd0))) begin
		main_782_indvar36_reg <= main_782_indvar36;
		if (start == 1'b0 && ^(main_782_indvar36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_782_indvar36_reg"); $finish; end
	end
	/* main: %782*/
	/*   %indvar36 = phi i32 [ %indvar.next37, %782 ], [ 0, %IZigzagMatrix.exit.i.1.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB__782_570) & (memory_controller_waitrequest == 1'd0)) & (main_782_787_reg == 1'd1))) begin
		main_782_indvar36_reg <= main_782_indvar36;
		if (start == 1'b0 && ^(main_782_indvar36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_782_indvar36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %782*/
	/*   %783 = add i32 %indvar36, 1*/
		main_782_783 = (main_782_indvar36_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_782_783_reg <= 0;
	/* main: %782*/
	/*   %783 = add i32 %indvar36, 1*/
	else if((cur_state == LEGUP_F_main_BB__782_567)) begin
		main_782_783_reg <= main_782_783;
		if (start == 1'b0 && ^(main_782_783) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_782_783_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %782*/
	/*   %scevgep38 = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %783*/
		main_782_scevgep38 = (`TAG_main_0_QuantBuffiii_a + (4 * main_782_783_reg));
end
always @(posedge clk) begin
	if (reset)
		main_782_scevgep38_reg <= 0;
	/* main: %782*/
	/*   %scevgep38 = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %783*/
	else if((cur_state == LEGUP_F_main_BB__782_568)) begin
		main_782_scevgep38_reg <= main_782_scevgep38;
		if (start == 1'b0 && ^(main_782_scevgep38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_782_scevgep38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %782*/
	/*   %mptr.02.i.i.1.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %indvar36*/
		main_782_mptr02ii1ii = (`TAG_main_0_QuantBuffiii_a + (4 * main_782_indvar36_reg));
end
always @(posedge clk) begin
	if (reset)
		main_782_mptr02ii1ii_reg <= 0;
	/* main: %782*/
	/*   %mptr.02.i.i.1.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %indvar36*/
	else if((cur_state == LEGUP_F_main_BB__782_567)) begin
		main_782_mptr02ii1ii_reg <= main_782_mptr02ii1ii;
		if (start == 1'b0 && ^(main_782_mptr02ii1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_782_mptr02ii1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %782*/
	/*   %.01.i2.i.1.i.i = getelementptr [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %781, i32 %indvar36*/
		main_782_01i2i1ii = (1'd0 + ((256 * main_IZigzagMatrixexiti1ii_781_reg) + (4 * main_782_indvar36_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_782_01i2i1ii_reg <= 0;
	/* main: %782*/
	/*   %.01.i2.i.1.i.i = getelementptr [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %781, i32 %indvar36*/
	else if((cur_state == LEGUP_F_main_BB__782_567)) begin
		main_782_01i2i1ii_reg <= main_782_01i2i1ii;
		if (start == 1'b0 && ^(main_782_01i2i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_782_01i2i1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %782*/
	/*   %784 = load i32* %mptr.02.i.i.1.i.i, align 4, !tbaa !1*/
		main_782_784 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_782_784_reg <= 0;
	/* main: %782*/
	/*   %784 = load i32* %mptr.02.i.i.1.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__782_569)) begin
		main_782_784_reg <= main_782_784;
		if (start == 1'b0 && ^(main_782_784) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_782_784_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %782*/
	/*   %785 = load i32* %.01.i2.i.1.i.i, align 4, !tbaa !1*/
		main_782_785 = p_jinfo_quant_tbl_quantval_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_782_785_reg <= 0;
	/* main: %782*/
	/*   %785 = load i32* %.01.i2.i.1.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__782_568)) begin
		main_782_785_reg <= main_782_785;
		if (start == 1'b0 && ^(main_782_785) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_782_785_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %782*/
	/*   %786 = mul nsw i32 %785, %784*/
		main_782_786 = (main_782_785_reg * main_782_784);
end
always @(posedge clk) begin
	if (reset)
		main_782_786_reg <= 0;
	/* main: %782*/
	/*   %786 = mul nsw i32 %785, %784*/
	else if((cur_state == LEGUP_F_main_BB__782_569)) begin
		main_782_786_reg <= main_782_786;
		if (start == 1'b0 && ^(main_782_786) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_782_786_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %782*/
	/*   %787 = icmp ult i32* %scevgep38, %514*/
		main_782_787 = (main_782_scevgep38_reg < main_preheader46lrphii_514_reg);
end
always @(posedge clk) begin
	if (reset)
		main_782_787_reg <= 0;
	/* main: %782*/
	/*   %787 = icmp ult i32* %scevgep38, %514*/
	else if((cur_state == LEGUP_F_main_BB__782_569)) begin
		main_782_787_reg <= main_782_787;
		if (start == 1'b0 && ^(main_782_787) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_782_787_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %782*/
	/*   %indvar.next37 = add i32 %indvar36, 1*/
		main_782_indvarnext37 = (main_782_indvar36_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_782_indvarnext37_reg <= 0;
	/* main: %782*/
	/*   %indvar.next37 = add i32 %indvar36, 1*/
	else if((cur_state == LEGUP_F_main_BB__782_567)) begin
		main_782_indvarnext37_reg <= main_782_indvarnext37;
		if (start == 1'b0 && ^(main_782_indvarnext37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_782_indvarnext37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %788*/
	/*   %indvar41 = phi i32 [ %indvar.next42, %788 ], [ 0, %IQuantize.exit.i.1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_IQuantizeexiti1ii_573) & (memory_controller_waitrequest == 1'd0))) begin
		main_788_indvar41 = 32'd0;
	end
	/* main: %788*/
	/*   %indvar41 = phi i32 [ %indvar.next42, %788 ], [ 0, %IQuantize.exit.i.1.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__788_577) & (memory_controller_waitrequest == 1'd0)) & (main_788_792_reg == 1'd1))) */ begin
		main_788_indvar41 = main_788_indvarnext42_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_788_indvar41_reg <= 0;
	/* main: %788*/
	/*   %indvar41 = phi i32 [ %indvar.next42, %788 ], [ 0, %IQuantize.exit.i.1.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_IQuantizeexiti1ii_573) & (memory_controller_waitrequest == 1'd0))) begin
		main_788_indvar41_reg <= main_788_indvar41;
		if (start == 1'b0 && ^(main_788_indvar41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_788_indvar41_reg"); $finish; end
	end
	/* main: %788*/
	/*   %indvar41 = phi i32 [ %indvar.next42, %788 ], [ 0, %IQuantize.exit.i.1.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB__788_577) & (memory_controller_waitrequest == 1'd0)) & (main_788_792_reg == 1'd1))) begin
		main_788_indvar41_reg <= main_788_indvar41;
		if (start == 1'b0 && ^(main_788_indvar41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_788_indvar41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %788*/
	/*   %789 = add i32 %indvar41, 1*/
		main_788_789 = (main_788_indvar41_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_788_789_reg <= 0;
	/* main: %788*/
	/*   %789 = add i32 %indvar41, 1*/
	else if((cur_state == LEGUP_F_main_BB__788_574)) begin
		main_788_789_reg <= main_788_789;
		if (start == 1'b0 && ^(main_788_789) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_788_789_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %788*/
	/*   %scevgep43 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 %789*/
		main_788_scevgep43 = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd1) + (4 * main_788_789_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_788_scevgep43_reg <= 0;
	/* main: %788*/
	/*   %scevgep43 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 %789*/
	else if((cur_state == LEGUP_F_main_BB__788_575)) begin
		main_788_scevgep43_reg <= main_788_scevgep43;
		if (start == 1'b0 && ^(main_788_scevgep43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_788_scevgep43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %788*/
	/*   %mptr.01.i1.i.1.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 %indvar41*/
		main_788_mptr01i1i1ii = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd1) + (4 * main_788_indvar41_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_788_mptr01i1i1ii_reg <= 0;
	/* main: %788*/
	/*   %mptr.01.i1.i.1.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 %indvar41*/
	else if((cur_state == LEGUP_F_main_BB__788_574)) begin
		main_788_mptr01i1i1ii_reg <= main_788_mptr01i1i1ii;
		if (start == 1'b0 && ^(main_788_mptr01i1i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_788_mptr01i1i1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %788*/
	/*   %790 = load i32* %mptr.01.i1.i.1.i.i, align 4, !tbaa !1*/
		main_788_790 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_788_790_reg <= 0;
	/* main: %788*/
	/*   %790 = load i32* %mptr.01.i1.i.1.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__788_576)) begin
		main_788_790_reg <= main_788_790;
		if (start == 1'b0 && ^(main_788_790) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_788_790_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %788*/
	/*   %791 = add nsw i32 %790, 128*/
		main_788_791 = (main_788_790 + 32'd128);
end
always @(posedge clk) begin
	if (reset)
		main_788_791_reg <= 0;
	/* main: %788*/
	/*   %791 = add nsw i32 %790, 128*/
	else if((cur_state == LEGUP_F_main_BB__788_576)) begin
		main_788_791_reg <= main_788_791;
		if (start == 1'b0 && ^(main_788_791) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_788_791_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %788*/
	/*   %792 = icmp ult i32* %scevgep43, %518*/
		main_788_792 = (main_788_scevgep43_reg < main_preheader46lrphii_518_reg);
end
always @(posedge clk) begin
	if (reset)
		main_788_792_reg <= 0;
	/* main: %788*/
	/*   %792 = icmp ult i32* %scevgep43, %518*/
	else if((cur_state == LEGUP_F_main_BB__788_576)) begin
		main_788_792_reg <= main_788_792;
		if (start == 1'b0 && ^(main_788_792) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_788_792_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %788*/
	/*   %indvar.next42 = add i32 %indvar41, 1*/
		main_788_indvarnext42 = (main_788_indvar41_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_788_indvarnext42_reg <= 0;
	/* main: %788*/
	/*   %indvar.next42 = add i32 %indvar41, 1*/
	else if((cur_state == LEGUP_F_main_BB__788_574)) begin
		main_788_indvarnext42_reg <= main_788_indvarnext42;
		if (start == 1'b0 && ^(main_788_indvarnext42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_788_indvarnext42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %indvar45 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i.1.i.i.preheader ], [ %indvar.next46, %800 ]*/
	if (((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti1iipreheader_578) & (memory_controller_waitrequest == 1'd0))) begin
		main_PostshiftIDctMatrixexiti1ii_indvar45 = 32'd0;
	end
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %indvar45 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i.1.i.i.preheader ], [ %indvar.next46, %800 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__800_587) & (memory_controller_waitrequest == 1'd0)) & (main_800_801 == 1'd1))) */ begin
		main_PostshiftIDctMatrixexiti1ii_indvar45 = main_800_indvarnext46;
	end
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti1ii_indvar45_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %indvar45 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i.1.i.i.preheader ], [ %indvar.next46, %800 ]*/
	else if(((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti1iipreheader_578) & (memory_controller_waitrequest == 1'd0))) begin
		main_PostshiftIDctMatrixexiti1ii_indvar45_reg <= main_PostshiftIDctMatrixexiti1ii_indvar45;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti1ii_indvar45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti1ii_indvar45_reg"); $finish; end
	end
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %indvar45 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i.1.i.i.preheader ], [ %indvar.next46, %800 ]*/
	else if((((cur_state == LEGUP_F_main_BB__800_587) & (memory_controller_waitrequest == 1'd0)) & (main_800_801 == 1'd1))) begin
		main_PostshiftIDctMatrixexiti1ii_indvar45_reg <= main_PostshiftIDctMatrixexiti1ii_indvar45;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti1ii_indvar45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti1ii_indvar45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %793 = add i32 %indvar45, 1*/
		main_PostshiftIDctMatrixexiti1ii_793 = (main_PostshiftIDctMatrixexiti1ii_indvar45_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti1ii_793_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %793 = add i32 %indvar45, 1*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_579)) begin
		main_PostshiftIDctMatrixexiti1ii_793_reg <= main_PostshiftIDctMatrixexiti1ii_793;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti1ii_793) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti1ii_793_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %scevgep47 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 %793*/
		main_PostshiftIDctMatrixexiti1ii_scevgep47 = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd1) + (4 * main_PostshiftIDctMatrixexiti1ii_793_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti1ii_scevgep47_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %scevgep47 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 %793*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_580)) begin
		main_PostshiftIDctMatrixexiti1ii_scevgep47_reg <= main_PostshiftIDctMatrixexiti1ii_scevgep47;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti1ii_scevgep47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti1ii_scevgep47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %mptr.01.i.i.1.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 %indvar45*/
		main_PostshiftIDctMatrixexiti1ii_mptr01ii1ii = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd1) + (4 * main_PostshiftIDctMatrixexiti1ii_indvar45_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti1ii_mptr01ii1ii_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %mptr.01.i.i.1.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 %indvar45*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_579)) begin
		main_PostshiftIDctMatrixexiti1ii_mptr01ii1ii_reg <= main_PostshiftIDctMatrixexiti1ii_mptr01ii1ii;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti1ii_mptr01ii1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti1ii_mptr01ii1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %794 = load i32* %mptr.01.i.i.1.i.i, align 4, !tbaa !1*/
		main_PostshiftIDctMatrixexiti1ii_794 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti1ii_794_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %794 = load i32* %mptr.01.i.i.1.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_581)) begin
		main_PostshiftIDctMatrixexiti1ii_794_reg <= main_PostshiftIDctMatrixexiti1ii_794;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti1ii_794) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti1ii_794_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %795 = icmp slt i32 %794, 0*/
		main_PostshiftIDctMatrixexiti1ii_795 = ($signed(main_PostshiftIDctMatrixexiti1ii_794) < $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti1ii_795_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %795 = icmp slt i32 %794, 0*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_581)) begin
		main_PostshiftIDctMatrixexiti1ii_795_reg <= main_PostshiftIDctMatrixexiti1ii_795;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti1ii_795) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti1ii_795_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %796*/
	/*   %797 = icmp sgt i32 %794, 255*/
		main_796_797 = ($signed(main_PostshiftIDctMatrixexiti1ii_794_reg) > $signed(32'd255));
end
always @(posedge clk) begin
	if (reset)
		main_796_797_reg <= 0;
	/* main: %796*/
	/*   %797 = icmp sgt i32 %794, 255*/
	else if((cur_state == LEGUP_F_main_BB__796_582)) begin
		main_796_797_reg <= main_796_797;
		if (start == 1'b0 && ^(main_796_797) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_796_797_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %800*/
	/*   %801 = icmp ult i32* %scevgep47, %518*/
		main_800_801 = (main_PostshiftIDctMatrixexiti1ii_scevgep47_reg < main_preheader46lrphii_518_reg);
end
always @(posedge clk) begin
	if (reset)
		main_800_801_reg <= 0;
	/* main: %800*/
	/*   %801 = icmp ult i32* %scevgep47, %518*/
	else if((cur_state == LEGUP_F_main_BB__800_587)) begin
		main_800_801_reg <= main_800_801;
		if (start == 1'b0 && ^(main_800_801) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_800_801_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %800*/
	/*   %indvar.next46 = add i32 %indvar45, 1*/
		main_800_indvarnext46 = (main_PostshiftIDctMatrixexiti1ii_indvar45_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_800_indvarnext46_reg <= 0;
	/* main: %800*/
	/*   %indvar.next46 = add i32 %indvar45, 1*/
	else if((cur_state == LEGUP_F_main_BB__800_587)) begin
		main_800_indvarnext46_reg <= main_800_indvarnext46;
		if (start == 1'b0 && ^(main_800_indvarnext46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_800_indvarnext46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %802*/
	/*   %i.02.i.i.2.i.i = phi i32 [ 0, %decode_block.exit.1.i.i ], [ %806, %802 ]*/
	if (((cur_state == LEGUP_F_main_BB_decode_blockexit1ii_590) & (memory_controller_waitrequest == 1'd0))) begin
		main_802_i02ii2ii = 32'd0;
	end
	/* main: %802*/
	/*   %i.02.i.i.2.i.i = phi i32 [ 0, %decode_block.exit.1.i.i ], [ %806, %802 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__802_595) & (memory_controller_waitrequest == 1'd0)) & (main_802_exitcond49_reg == 1'd0))) */ begin
		main_802_i02ii2ii = main_802_806_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_802_i02ii2ii_reg <= 0;
	/* main: %802*/
	/*   %i.02.i.i.2.i.i = phi i32 [ 0, %decode_block.exit.1.i.i ], [ %806, %802 ]*/
	else if(((cur_state == LEGUP_F_main_BB_decode_blockexit1ii_590) & (memory_controller_waitrequest == 1'd0))) begin
		main_802_i02ii2ii_reg <= main_802_i02ii2ii;
		if (start == 1'b0 && ^(main_802_i02ii2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_802_i02ii2ii_reg"); $finish; end
	end
	/* main: %802*/
	/*   %i.02.i.i.2.i.i = phi i32 [ 0, %decode_block.exit.1.i.i ], [ %806, %802 ]*/
	else if((((cur_state == LEGUP_F_main_BB__802_595) & (memory_controller_waitrequest == 1'd0)) & (main_802_exitcond49_reg == 1'd0))) begin
		main_802_i02ii2ii_reg <= main_802_i02ii2ii;
		if (start == 1'b0 && ^(main_802_i02ii2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_802_i02ii2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %802*/
	/*   %scevgep50 = getelementptr [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i.2.i.i*/
		main_802_scevgep50 = (1'd0 + (4 * main_802_i02ii2ii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_802_scevgep50_reg <= 0;
	/* main: %802*/
	/*   %scevgep50 = getelementptr [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i.2.i.i*/
	else if((cur_state == LEGUP_F_main_BB__802_591)) begin
		main_802_scevgep50_reg <= main_802_scevgep50;
		if (start == 1'b0 && ^(main_802_scevgep50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_802_scevgep50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %802*/
	/*   %.01.i.i.2.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %i.02.i.i.2.i.i*/
		main_802_01ii2ii = (`TAG_main_0_QuantBuffiii_a + (4 * main_802_i02ii2ii_reg));
end
always @(posedge clk) begin
	if (reset)
		main_802_01ii2ii_reg <= 0;
	/* main: %802*/
	/*   %.01.i.i.2.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %i.02.i.i.2.i.i*/
	else if((cur_state == LEGUP_F_main_BB__802_591)) begin
		main_802_01ii2ii_reg <= main_802_01ii2ii;
		if (start == 1'b0 && ^(main_802_01ii2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_802_01ii2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %802*/
	/*   %803 = load i32* %scevgep50, align 4, !tbaa !1*/
		main_802_803 = zigzag_index_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_802_803_reg <= 0;
	/* main: %802*/
	/*   %803 = load i32* %scevgep50, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__802_592)) begin
		main_802_803_reg <= main_802_803;
		if (start == 1'b0 && ^(main_802_803) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_802_803_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %802*/
	/*   %804 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 2, i32 %803*/
		main_802_804 = (`TAG_main_0_HuffBuffii_a + ((256 * 32'd2) + (4 * main_802_803)));
end
always @(posedge clk) begin
	if (reset)
		main_802_804_reg <= 0;
	/* main: %802*/
	/*   %804 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 2, i32 %803*/
	else if((cur_state == LEGUP_F_main_BB__802_592)) begin
		main_802_804_reg <= main_802_804;
		if (start == 1'b0 && ^(main_802_804) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_802_804_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %802*/
	/*   %805 = load i32* %804, align 4, !tbaa !1*/
		main_802_805 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_802_805_reg <= 0;
	/* main: %802*/
	/*   %805 = load i32* %804, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__802_594)) begin
		main_802_805_reg <= main_802_805;
		if (start == 1'b0 && ^(main_802_805) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_802_805_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %802*/
	/*   %806 = add nsw i32 %i.02.i.i.2.i.i, 1*/
		main_802_806 = (main_802_i02ii2ii_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_802_806_reg <= 0;
	/* main: %802*/
	/*   %806 = add nsw i32 %i.02.i.i.2.i.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__802_591)) begin
		main_802_806_reg <= main_802_806;
		if (start == 1'b0 && ^(main_802_806) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_802_806_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %802*/
	/*   %exitcond49 = icmp eq i32 %806, 64*/
		main_802_exitcond49 = (main_802_806 == 32'd64);
end
always @(posedge clk) begin
	if (reset)
		main_802_exitcond49_reg <= 0;
	/* main: %802*/
	/*   %exitcond49 = icmp eq i32 %806, 64*/
	else if((cur_state == LEGUP_F_main_BB__802_591)) begin
		main_802_exitcond49_reg <= main_802_exitcond49;
		if (start == 1'b0 && ^(main_802_exitcond49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_802_exitcond49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i.2.i.i*/
	/*   %807 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 2), align 1, !tbaa !5*/
		main_IZigzagMatrixexiti2ii_807 = p_jinfo_comps_info_quant_tbl_no_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexiti2ii_807_reg <= 0;
	/* main: %IZigzagMatrix.exit.i.2.i.i*/
	/*   %807 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 2), align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti2ii_597)) begin
		main_IZigzagMatrixexiti2ii_807_reg <= main_IZigzagMatrixexiti2ii_807;
		if (start == 1'b0 && ^(main_IZigzagMatrixexiti2ii_807) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexiti2ii_807_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i.2.i.i*/
	/*   %808 = sext i8 %807 to i32*/
		main_IZigzagMatrixexiti2ii_808 = $signed(main_IZigzagMatrixexiti2ii_807);
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexiti2ii_808_reg <= 0;
	/* main: %IZigzagMatrix.exit.i.2.i.i*/
	/*   %808 = sext i8 %807 to i32*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti2ii_597)) begin
		main_IZigzagMatrixexiti2ii_808_reg <= main_IZigzagMatrixexiti2ii_808;
		if (start == 1'b0 && ^(main_IZigzagMatrixexiti2ii_808) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexiti2ii_808_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %IZigzagMatrix.exit.i.2.i.i*/
	/*   %809 = add nsw i32 %808, 1*/
		main_IZigzagMatrixexiti2ii_809 = (main_IZigzagMatrixexiti2ii_808 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_IZigzagMatrixexiti2ii_809_reg <= 0;
	/* main: %IZigzagMatrix.exit.i.2.i.i*/
	/*   %809 = add nsw i32 %808, 1*/
	else if((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti2ii_597)) begin
		main_IZigzagMatrixexiti2ii_809_reg <= main_IZigzagMatrixexiti2ii_809;
		if (start == 1'b0 && ^(main_IZigzagMatrixexiti2ii_809) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_IZigzagMatrixexiti2ii_809_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %810*/
	/*   %indvar52 = phi i32 [ %indvar.next53, %810 ], [ 0, %IZigzagMatrix.exit.i.2.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti2ii_597) & (memory_controller_waitrequest == 1'd0))) begin
		main_810_indvar52 = 32'd0;
	end
	/* main: %810*/
	/*   %indvar52 = phi i32 [ %indvar.next53, %810 ], [ 0, %IZigzagMatrix.exit.i.2.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__810_601) & (memory_controller_waitrequest == 1'd0)) & (main_810_815_reg == 1'd1))) */ begin
		main_810_indvar52 = main_810_indvarnext53_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_810_indvar52_reg <= 0;
	/* main: %810*/
	/*   %indvar52 = phi i32 [ %indvar.next53, %810 ], [ 0, %IZigzagMatrix.exit.i.2.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti2ii_597) & (memory_controller_waitrequest == 1'd0))) begin
		main_810_indvar52_reg <= main_810_indvar52;
		if (start == 1'b0 && ^(main_810_indvar52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_810_indvar52_reg"); $finish; end
	end
	/* main: %810*/
	/*   %indvar52 = phi i32 [ %indvar.next53, %810 ], [ 0, %IZigzagMatrix.exit.i.2.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB__810_601) & (memory_controller_waitrequest == 1'd0)) & (main_810_815_reg == 1'd1))) begin
		main_810_indvar52_reg <= main_810_indvar52;
		if (start == 1'b0 && ^(main_810_indvar52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_810_indvar52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %810*/
	/*   %811 = add i32 %indvar52, 1*/
		main_810_811 = (main_810_indvar52_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_810_811_reg <= 0;
	/* main: %810*/
	/*   %811 = add i32 %indvar52, 1*/
	else if((cur_state == LEGUP_F_main_BB__810_598)) begin
		main_810_811_reg <= main_810_811;
		if (start == 1'b0 && ^(main_810_811) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_810_811_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %810*/
	/*   %scevgep54 = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %811*/
		main_810_scevgep54 = (`TAG_main_0_QuantBuffiii_a + (4 * main_810_811_reg));
end
always @(posedge clk) begin
	if (reset)
		main_810_scevgep54_reg <= 0;
	/* main: %810*/
	/*   %scevgep54 = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %811*/
	else if((cur_state == LEGUP_F_main_BB__810_599)) begin
		main_810_scevgep54_reg <= main_810_scevgep54;
		if (start == 1'b0 && ^(main_810_scevgep54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_810_scevgep54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %810*/
	/*   %mptr.02.i.i.2.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %indvar52*/
		main_810_mptr02ii2ii = (`TAG_main_0_QuantBuffiii_a + (4 * main_810_indvar52_reg));
end
always @(posedge clk) begin
	if (reset)
		main_810_mptr02ii2ii_reg <= 0;
	/* main: %810*/
	/*   %mptr.02.i.i.2.i.i = getelementptr [64 x i32]* %QuantBuff.i.i.i, i32 0, i32 %indvar52*/
	else if((cur_state == LEGUP_F_main_BB__810_598)) begin
		main_810_mptr02ii2ii_reg <= main_810_mptr02ii2ii;
		if (start == 1'b0 && ^(main_810_mptr02ii2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_810_mptr02ii2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %810*/
	/*   %.01.i2.i.2.i.i = getelementptr [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %809, i32 %indvar52*/
		main_810_01i2i2ii = (1'd0 + ((256 * main_IZigzagMatrixexiti2ii_809_reg) + (4 * main_810_indvar52_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_810_01i2i2ii_reg <= 0;
	/* main: %810*/
	/*   %.01.i2.i.2.i.i = getelementptr [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %809, i32 %indvar52*/
	else if((cur_state == LEGUP_F_main_BB__810_598)) begin
		main_810_01i2i2ii_reg <= main_810_01i2i2ii;
		if (start == 1'b0 && ^(main_810_01i2i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_810_01i2i2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %810*/
	/*   %812 = load i32* %mptr.02.i.i.2.i.i, align 4, !tbaa !1*/
		main_810_812 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_810_812_reg <= 0;
	/* main: %810*/
	/*   %812 = load i32* %mptr.02.i.i.2.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__810_600)) begin
		main_810_812_reg <= main_810_812;
		if (start == 1'b0 && ^(main_810_812) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_810_812_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %810*/
	/*   %813 = load i32* %.01.i2.i.2.i.i, align 4, !tbaa !1*/
		main_810_813 = p_jinfo_quant_tbl_quantval_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_810_813_reg <= 0;
	/* main: %810*/
	/*   %813 = load i32* %.01.i2.i.2.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__810_599)) begin
		main_810_813_reg <= main_810_813;
		if (start == 1'b0 && ^(main_810_813) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_810_813_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %810*/
	/*   %814 = mul nsw i32 %813, %812*/
		main_810_814 = (main_810_813_reg * main_810_812);
end
always @(posedge clk) begin
	if (reset)
		main_810_814_reg <= 0;
	/* main: %810*/
	/*   %814 = mul nsw i32 %813, %812*/
	else if((cur_state == LEGUP_F_main_BB__810_600)) begin
		main_810_814_reg <= main_810_814;
		if (start == 1'b0 && ^(main_810_814) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_810_814_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %810*/
	/*   %815 = icmp ult i32* %scevgep54, %514*/
		main_810_815 = (main_810_scevgep54_reg < main_preheader46lrphii_514_reg);
end
always @(posedge clk) begin
	if (reset)
		main_810_815_reg <= 0;
	/* main: %810*/
	/*   %815 = icmp ult i32* %scevgep54, %514*/
	else if((cur_state == LEGUP_F_main_BB__810_600)) begin
		main_810_815_reg <= main_810_815;
		if (start == 1'b0 && ^(main_810_815) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_810_815_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %810*/
	/*   %indvar.next53 = add i32 %indvar52, 1*/
		main_810_indvarnext53 = (main_810_indvar52_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_810_indvarnext53_reg <= 0;
	/* main: %810*/
	/*   %indvar.next53 = add i32 %indvar52, 1*/
	else if((cur_state == LEGUP_F_main_BB__810_598)) begin
		main_810_indvarnext53_reg <= main_810_indvarnext53;
		if (start == 1'b0 && ^(main_810_indvarnext53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_810_indvarnext53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %816*/
	/*   %indvar57 = phi i32 [ %indvar.next58, %816 ], [ 0, %IQuantize.exit.i.2.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_IQuantizeexiti2ii_604) & (memory_controller_waitrequest == 1'd0))) begin
		main_816_indvar57 = 32'd0;
	end
	/* main: %816*/
	/*   %indvar57 = phi i32 [ %indvar.next58, %816 ], [ 0, %IQuantize.exit.i.2.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__816_608) & (memory_controller_waitrequest == 1'd0)) & (main_816_820_reg == 1'd1))) */ begin
		main_816_indvar57 = main_816_indvarnext58_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_816_indvar57_reg <= 0;
	/* main: %816*/
	/*   %indvar57 = phi i32 [ %indvar.next58, %816 ], [ 0, %IQuantize.exit.i.2.i.i ]*/
	else if(((cur_state == LEGUP_F_main_BB_IQuantizeexiti2ii_604) & (memory_controller_waitrequest == 1'd0))) begin
		main_816_indvar57_reg <= main_816_indvar57;
		if (start == 1'b0 && ^(main_816_indvar57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_816_indvar57_reg"); $finish; end
	end
	/* main: %816*/
	/*   %indvar57 = phi i32 [ %indvar.next58, %816 ], [ 0, %IQuantize.exit.i.2.i.i ]*/
	else if((((cur_state == LEGUP_F_main_BB__816_608) & (memory_controller_waitrequest == 1'd0)) & (main_816_820_reg == 1'd1))) begin
		main_816_indvar57_reg <= main_816_indvar57;
		if (start == 1'b0 && ^(main_816_indvar57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_816_indvar57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %816*/
	/*   %817 = add i32 %indvar57, 1*/
		main_816_817 = (main_816_indvar57_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_816_817_reg <= 0;
	/* main: %816*/
	/*   %817 = add i32 %indvar57, 1*/
	else if((cur_state == LEGUP_F_main_BB__816_605)) begin
		main_816_817_reg <= main_816_817;
		if (start == 1'b0 && ^(main_816_817) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_816_817_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %816*/
	/*   %scevgep59 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 %817*/
		main_816_scevgep59 = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd2) + (4 * main_816_817_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_816_scevgep59_reg <= 0;
	/* main: %816*/
	/*   %scevgep59 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 %817*/
	else if((cur_state == LEGUP_F_main_BB__816_606)) begin
		main_816_scevgep59_reg <= main_816_scevgep59;
		if (start == 1'b0 && ^(main_816_scevgep59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_816_scevgep59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %816*/
	/*   %mptr.01.i1.i.2.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 %indvar57*/
		main_816_mptr01i1i2ii = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd2) + (4 * main_816_indvar57_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_816_mptr01i1i2ii_reg <= 0;
	/* main: %816*/
	/*   %mptr.01.i1.i.2.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 %indvar57*/
	else if((cur_state == LEGUP_F_main_BB__816_605)) begin
		main_816_mptr01i1i2ii_reg <= main_816_mptr01i1i2ii;
		if (start == 1'b0 && ^(main_816_mptr01i1i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_816_mptr01i1i2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %816*/
	/*   %818 = load i32* %mptr.01.i1.i.2.i.i, align 4, !tbaa !1*/
		main_816_818 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_816_818_reg <= 0;
	/* main: %816*/
	/*   %818 = load i32* %mptr.01.i1.i.2.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__816_607)) begin
		main_816_818_reg <= main_816_818;
		if (start == 1'b0 && ^(main_816_818) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_816_818_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %816*/
	/*   %819 = add nsw i32 %818, 128*/
		main_816_819 = (main_816_818 + 32'd128);
end
always @(posedge clk) begin
	if (reset)
		main_816_819_reg <= 0;
	/* main: %816*/
	/*   %819 = add nsw i32 %818, 128*/
	else if((cur_state == LEGUP_F_main_BB__816_607)) begin
		main_816_819_reg <= main_816_819;
		if (start == 1'b0 && ^(main_816_819) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_816_819_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %816*/
	/*   %820 = icmp ult i32* %scevgep59, %520*/
		main_816_820 = (main_816_scevgep59_reg < main_preheader46lrphii_520_reg);
end
always @(posedge clk) begin
	if (reset)
		main_816_820_reg <= 0;
	/* main: %816*/
	/*   %820 = icmp ult i32* %scevgep59, %520*/
	else if((cur_state == LEGUP_F_main_BB__816_607)) begin
		main_816_820_reg <= main_816_820;
		if (start == 1'b0 && ^(main_816_820) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_816_820_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %816*/
	/*   %indvar.next58 = add i32 %indvar57, 1*/
		main_816_indvarnext58 = (main_816_indvar57_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_816_indvarnext58_reg <= 0;
	/* main: %816*/
	/*   %indvar.next58 = add i32 %indvar57, 1*/
	else if((cur_state == LEGUP_F_main_BB__816_605)) begin
		main_816_indvarnext58_reg <= main_816_indvarnext58;
		if (start == 1'b0 && ^(main_816_indvarnext58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_816_indvarnext58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %indvar61 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i.2.i.i.preheader ], [ %indvar.next62, %828 ]*/
	if (((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti2iipreheader_609) & (memory_controller_waitrequest == 1'd0))) begin
		main_PostshiftIDctMatrixexiti2ii_indvar61 = 32'd0;
	end
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %indvar61 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i.2.i.i.preheader ], [ %indvar.next62, %828 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__828_618) & (memory_controller_waitrequest == 1'd0)) & (main_828_829 == 1'd1))) */ begin
		main_PostshiftIDctMatrixexiti2ii_indvar61 = main_828_indvarnext62;
	end
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti2ii_indvar61_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %indvar61 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i.2.i.i.preheader ], [ %indvar.next62, %828 ]*/
	else if(((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti2iipreheader_609) & (memory_controller_waitrequest == 1'd0))) begin
		main_PostshiftIDctMatrixexiti2ii_indvar61_reg <= main_PostshiftIDctMatrixexiti2ii_indvar61;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti2ii_indvar61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti2ii_indvar61_reg"); $finish; end
	end
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %indvar61 = phi i32 [ 0, %PostshiftIDctMatrix.exit.i.2.i.i.preheader ], [ %indvar.next62, %828 ]*/
	else if((((cur_state == LEGUP_F_main_BB__828_618) & (memory_controller_waitrequest == 1'd0)) & (main_828_829 == 1'd1))) begin
		main_PostshiftIDctMatrixexiti2ii_indvar61_reg <= main_PostshiftIDctMatrixexiti2ii_indvar61;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti2ii_indvar61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti2ii_indvar61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %821 = add i32 %indvar61, 1*/
		main_PostshiftIDctMatrixexiti2ii_821 = (main_PostshiftIDctMatrixexiti2ii_indvar61_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti2ii_821_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %821 = add i32 %indvar61, 1*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_610)) begin
		main_PostshiftIDctMatrixexiti2ii_821_reg <= main_PostshiftIDctMatrixexiti2ii_821;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti2ii_821) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti2ii_821_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %scevgep63 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 %821*/
		main_PostshiftIDctMatrixexiti2ii_scevgep63 = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd2) + (4 * main_PostshiftIDctMatrixexiti2ii_821_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti2ii_scevgep63_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %scevgep63 = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 %821*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_611)) begin
		main_PostshiftIDctMatrixexiti2ii_scevgep63_reg <= main_PostshiftIDctMatrixexiti2ii_scevgep63;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti2ii_scevgep63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti2ii_scevgep63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %mptr.01.i.i.2.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 %indvar61*/
		main_PostshiftIDctMatrixexiti2ii_mptr01ii2ii = (`TAG_main_0_IDCTBuffii_a + ((256 * 32'd2) + (4 * main_PostshiftIDctMatrixexiti2ii_indvar61_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti2ii_mptr01ii2ii_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %mptr.01.i.i.2.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 %indvar61*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_610)) begin
		main_PostshiftIDctMatrixexiti2ii_mptr01ii2ii_reg <= main_PostshiftIDctMatrixexiti2ii_mptr01ii2ii;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti2ii_mptr01ii2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti2ii_mptr01ii2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %822 = load i32* %mptr.01.i.i.2.i.i, align 4, !tbaa !1*/
		main_PostshiftIDctMatrixexiti2ii_822 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti2ii_822_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %822 = load i32* %mptr.01.i.i.2.i.i, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_612)) begin
		main_PostshiftIDctMatrixexiti2ii_822_reg <= main_PostshiftIDctMatrixexiti2ii_822;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti2ii_822) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti2ii_822_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %823 = icmp slt i32 %822, 0*/
		main_PostshiftIDctMatrixexiti2ii_823 = ($signed(main_PostshiftIDctMatrixexiti2ii_822) < $signed(32'd0));
end
always @(posedge clk) begin
	if (reset)
		main_PostshiftIDctMatrixexiti2ii_823_reg <= 0;
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %823 = icmp slt i32 %822, 0*/
	else if((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_612)) begin
		main_PostshiftIDctMatrixexiti2ii_823_reg <= main_PostshiftIDctMatrixexiti2ii_823;
		if (start == 1'b0 && ^(main_PostshiftIDctMatrixexiti2ii_823) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_PostshiftIDctMatrixexiti2ii_823_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %824*/
	/*   %825 = icmp sgt i32 %822, 255*/
		main_824_825 = ($signed(main_PostshiftIDctMatrixexiti2ii_822_reg) > $signed(32'd255));
end
always @(posedge clk) begin
	if (reset)
		main_824_825_reg <= 0;
	/* main: %824*/
	/*   %825 = icmp sgt i32 %822, 255*/
	else if((cur_state == LEGUP_F_main_BB__824_613)) begin
		main_824_825_reg <= main_824_825;
		if (start == 1'b0 && ^(main_824_825) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_824_825_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %828*/
	/*   %829 = icmp ult i32* %scevgep63, %520*/
		main_828_829 = (main_PostshiftIDctMatrixexiti2ii_scevgep63_reg < main_preheader46lrphii_520_reg);
end
always @(posedge clk) begin
	if (reset)
		main_828_829_reg <= 0;
	/* main: %828*/
	/*   %829 = icmp ult i32* %scevgep63, %520*/
	else if((cur_state == LEGUP_F_main_BB__828_618)) begin
		main_828_829_reg <= main_828_829;
		if (start == 1'b0 && ^(main_828_829) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_828_829_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %828*/
	/*   %indvar.next62 = add i32 %indvar61, 1*/
		main_828_indvarnext62 = (main_PostshiftIDctMatrixexiti2ii_indvar61_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_828_indvarnext62_reg <= 0;
	/* main: %828*/
	/*   %indvar.next62 = add i32 %indvar61, 1*/
	else if((cur_state == LEGUP_F_main_BB__828_618)) begin
		main_828_indvarnext62_reg <= main_828_indvarnext62;
		if (start == 1'b0 && ^(main_828_indvarnext62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_828_indvarnext62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_start.exit.i*/
	/*   %j.01.i = phi i32 [ %837, %836 ], [ 0, %decode_start.exit.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_decode_startexitipreheader_545) & (memory_controller_waitrequest == 1'd0))) begin
		main_decode_startexiti_j01i = 32'd0;
	end
	/* main: %decode_start.exit.i*/
	/*   %j.01.i = phi i32 [ %837, %836 ], [ 0, %decode_start.exit.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__836_627) & (memory_controller_waitrequest == 1'd0)) & (main_836_exitcond16 == 1'd0))) */ begin
		main_decode_startexiti_j01i = main_836_837;
	end
end
always @(posedge clk) begin
	if (reset)
		main_decode_startexiti_j01i_reg <= 0;
	/* main: %decode_start.exit.i*/
	/*   %j.01.i = phi i32 [ %837, %836 ], [ 0, %decode_start.exit.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_decode_startexitipreheader_545) & (memory_controller_waitrequest == 1'd0))) begin
		main_decode_startexiti_j01i_reg <= main_decode_startexiti_j01i;
		if (start == 1'b0 && ^(main_decode_startexiti_j01i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_startexiti_j01i_reg"); $finish; end
	end
	/* main: %decode_start.exit.i*/
	/*   %j.01.i = phi i32 [ %837, %836 ], [ 0, %decode_start.exit.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB__836_627) & (memory_controller_waitrequest == 1'd0)) & (main_836_exitcond16 == 1'd0))) begin
		main_decode_startexiti_j01i_reg <= main_decode_startexiti_j01i;
		if (start == 1'b0 && ^(main_decode_startexiti_j01i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_startexiti_j01i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_start.exit.i*/
	/*   %scevgep17 = getelementptr [3 x [5310 x i8]]* @hana_bmp, i32 0, i32 0, i32 %j.01.i*/
		main_decode_startexiti_scevgep17 = (1'd0 + (1 * main_decode_startexiti_j01i_reg));
end
always @(posedge clk) begin
	if (reset)
		main_decode_startexiti_scevgep17_reg <= 0;
	/* main: %decode_start.exit.i*/
	/*   %scevgep17 = getelementptr [3 x [5310 x i8]]* @hana_bmp, i32 0, i32 0, i32 %j.01.i*/
	else if((cur_state == LEGUP_F_main_BB_decode_startexiti_620)) begin
		main_decode_startexiti_scevgep17_reg <= main_decode_startexiti_scevgep17;
		if (start == 1'b0 && ^(main_decode_startexiti_scevgep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_startexiti_scevgep17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_start.exit.i*/
	/*   %scevgep18 = getelementptr [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 %j.01.i*/
		main_decode_startexiti_scevgep18 = (`TAG_g_OutData_comp_buf_a + (1 * main_decode_startexiti_j01i_reg));
end
always @(posedge clk) begin
	if (reset)
		main_decode_startexiti_scevgep18_reg <= 0;
	/* main: %decode_start.exit.i*/
	/*   %scevgep18 = getelementptr [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 %j.01.i*/
	else if((cur_state == LEGUP_F_main_BB_decode_startexiti_620)) begin
		main_decode_startexiti_scevgep18_reg <= main_decode_startexiti_scevgep18;
		if (start == 1'b0 && ^(main_decode_startexiti_scevgep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_startexiti_scevgep18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_start.exit.i*/
	/*   %830 = load i8* %scevgep18, align 1, !tbaa !5*/
		main_decode_startexiti_830 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_decode_startexiti_830_reg <= 0;
	/* main: %decode_start.exit.i*/
	/*   %830 = load i8* %scevgep18, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_decode_startexiti_622)) begin
		main_decode_startexiti_830_reg <= main_decode_startexiti_830;
		if (start == 1'b0 && ^(main_decode_startexiti_830) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_startexiti_830_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_start.exit.i*/
	/*   %831 = load i8* %scevgep17, align 1, !tbaa !5*/
		main_decode_startexiti_831 = hana_bmp_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_decode_startexiti_831_reg <= 0;
	/* main: %decode_start.exit.i*/
	/*   %831 = load i8* %scevgep17, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_decode_startexiti_621)) begin
		main_decode_startexiti_831_reg <= main_decode_startexiti_831;
		if (start == 1'b0 && ^(main_decode_startexiti_831) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_startexiti_831_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_start.exit.i*/
	/*   %832 = icmp eq i8 %830, %831*/
		main_decode_startexiti_832 = (main_decode_startexiti_830 == main_decode_startexiti_831_reg);
end
always @(posedge clk) begin
	if (reset)
		main_decode_startexiti_832_reg <= 0;
	/* main: %decode_start.exit.i*/
	/*   %832 = icmp eq i8 %830, %831*/
	else if((cur_state == LEGUP_F_main_BB_decode_startexiti_622)) begin
		main_decode_startexiti_832_reg <= main_decode_startexiti_832;
		if (start == 1'b0 && ^(main_decode_startexiti_832) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_startexiti_832_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %833*/
	/*   %834 = load i32* @main_result, align 4, !tbaa !1*/
		main_833_834 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_833_834_reg <= 0;
	/* main: %833*/
	/*   %834 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__833_625)) begin
		main_833_834_reg <= main_833_834;
		if (start == 1'b0 && ^(main_833_834) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_833_834_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %833*/
	/*   %835 = add nsw i32 %834, 1*/
		main_833_835 = (main_833_834 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_833_835_reg <= 0;
	/* main: %833*/
	/*   %835 = add nsw i32 %834, 1*/
	else if((cur_state == LEGUP_F_main_BB__833_625)) begin
		main_833_835_reg <= main_833_835;
		if (start == 1'b0 && ^(main_833_835) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_833_835_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %836*/
	/*   %837 = add nsw i32 %j.01.i, 1*/
		main_836_837 = (main_decode_startexiti_j01i_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_836_837_reg <= 0;
	/* main: %836*/
	/*   %837 = add nsw i32 %j.01.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__836_627)) begin
		main_836_837_reg <= main_836_837;
		if (start == 1'b0 && ^(main_836_837) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_836_837_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %836*/
	/*   %exitcond16 = icmp eq i32 %837, 5310*/
		main_836_exitcond16 = (main_836_837 == 32'd5310);
end
always @(posedge clk) begin
	if (reset)
		main_836_exitcond16_reg <= 0;
	/* main: %836*/
	/*   %exitcond16 = icmp eq i32 %837, 5310*/
	else if((cur_state == LEGUP_F_main_BB__836_627)) begin
		main_836_exitcond16_reg <= main_836_exitcond16;
		if (start == 1'b0 && ^(main_836_exitcond16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_836_exitcond16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %838*/
	/*   %839 = load i32* @main_result, align 4, !tbaa !1*/
		main_838_839 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_838_839_reg <= 0;
	/* main: %838*/
	/*   %839 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__838_631)) begin
		main_838_839_reg <= main_838_839;
		if (start == 1'b0 && ^(main_838_839) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_838_839_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %838*/
	/*   %840 = add nsw i32 %839, 1*/
		main_838_840 = (main_838_839 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_838_840_reg <= 0;
	/* main: %838*/
	/*   %840 = add nsw i32 %839, 1*/
	else if((cur_state == LEGUP_F_main_BB__838_631)) begin
		main_838_840_reg <= main_838_840;
		if (start == 1'b0 && ^(main_838_840) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_838_840_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %841*/
	/*   %842 = icmp eq i16 %491, 59*/
		main_841_842 = (main_read_markersexiti_491_reg == 16'd59);
end
always @(posedge clk) begin
	if (reset)
		main_841_842_reg <= 0;
	/* main: %841*/
	/*   %842 = icmp eq i16 %491, 59*/
	else if((cur_state == LEGUP_F_main_BB__841_633)) begin
		main_841_842_reg <= main_841_842;
		if (start == 1'b0 && ^(main_841_842) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_841_842_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %841*/
	/*   %843 = load i32* @main_result, align 4, !tbaa !1*/
		main_841_843 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_841_843_reg <= 0;
	/* main: %841*/
	/*   %843 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__841_635)) begin
		main_841_843_reg <= main_841_843;
		if (start == 1'b0 && ^(main_841_843) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_841_843_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %844*/
	/*   %845 = add nsw i32 %843, 1*/
		main_844_845 = (main_841_843_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_844_845_reg <= 0;
	/* main: %844*/
	/*   %845 = add nsw i32 %843, 1*/
	else if((cur_state == LEGUP_F_main_BB__844_636)) begin
		main_844_845_reg <= main_844_845;
		if (start == 1'b0 && ^(main_844_845) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_844_845_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.16.i*/
	/*   %j.01.1.i = phi i32 [ %853, %852 ], [ 0, %.preheader.16.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader16ipreheader_628) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader16i_j011i = 32'd0;
	end
	/* main: %.preheader.16.i*/
	/*   %j.01.1.i = phi i32 [ %853, %852 ], [ 0, %.preheader.16.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__852_645) & (memory_controller_waitrequest == 1'd0)) & (main_852_exitcond13 == 1'd0))) */ begin
		main_preheader16i_j011i = main_852_853;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheader16i_j011i_reg <= 0;
	/* main: %.preheader.16.i*/
	/*   %j.01.1.i = phi i32 [ %853, %852 ], [ 0, %.preheader.16.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_preheader16ipreheader_628) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader16i_j011i_reg <= main_preheader16i_j011i;
		if (start == 1'b0 && ^(main_preheader16i_j011i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader16i_j011i_reg"); $finish; end
	end
	/* main: %.preheader.16.i*/
	/*   %j.01.1.i = phi i32 [ %853, %852 ], [ 0, %.preheader.16.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB__852_645) & (memory_controller_waitrequest == 1'd0)) & (main_852_exitcond13 == 1'd0))) begin
		main_preheader16i_j011i_reg <= main_preheader16i_j011i;
		if (start == 1'b0 && ^(main_preheader16i_j011i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader16i_j011i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.16.i*/
	/*   %scevgep14 = getelementptr [3 x [5310 x i8]]* @hana_bmp, i32 0, i32 1, i32 %j.01.1.i*/
		main_preheader16i_scevgep14 = (1'd0 + ((5310 * 32'd1) + (1 * main_preheader16i_j011i_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_preheader16i_scevgep14_reg <= 0;
	/* main: %.preheader.16.i*/
	/*   %scevgep14 = getelementptr [3 x [5310 x i8]]* @hana_bmp, i32 0, i32 1, i32 %j.01.1.i*/
	else if((cur_state == LEGUP_F_main_BB_preheader16i_638)) begin
		main_preheader16i_scevgep14_reg <= main_preheader16i_scevgep14;
		if (start == 1'b0 && ^(main_preheader16i_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader16i_scevgep14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.16.i*/
	/*   %scevgep15 = getelementptr [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 %j.01.1.i*/
		main_preheader16i_scevgep15 = (`TAG_g_OutData_comp_buf_a + ((5310 * 32'd1) + (1 * main_preheader16i_j011i_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_preheader16i_scevgep15_reg <= 0;
	/* main: %.preheader.16.i*/
	/*   %scevgep15 = getelementptr [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 %j.01.1.i*/
	else if((cur_state == LEGUP_F_main_BB_preheader16i_638)) begin
		main_preheader16i_scevgep15_reg <= main_preheader16i_scevgep15;
		if (start == 1'b0 && ^(main_preheader16i_scevgep15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader16i_scevgep15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.16.i*/
	/*   %846 = load i8* %scevgep15, align 1, !tbaa !5*/
		main_preheader16i_846 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_preheader16i_846_reg <= 0;
	/* main: %.preheader.16.i*/
	/*   %846 = load i8* %scevgep15, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_preheader16i_640)) begin
		main_preheader16i_846_reg <= main_preheader16i_846;
		if (start == 1'b0 && ^(main_preheader16i_846) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader16i_846_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.16.i*/
	/*   %847 = load i8* %scevgep14, align 1, !tbaa !5*/
		main_preheader16i_847 = hana_bmp_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_preheader16i_847_reg <= 0;
	/* main: %.preheader.16.i*/
	/*   %847 = load i8* %scevgep14, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_preheader16i_639)) begin
		main_preheader16i_847_reg <= main_preheader16i_847;
		if (start == 1'b0 && ^(main_preheader16i_847) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader16i_847_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.16.i*/
	/*   %848 = icmp eq i8 %846, %847*/
		main_preheader16i_848 = (main_preheader16i_846 == main_preheader16i_847_reg);
end
always @(posedge clk) begin
	if (reset)
		main_preheader16i_848_reg <= 0;
	/* main: %.preheader.16.i*/
	/*   %848 = icmp eq i8 %846, %847*/
	else if((cur_state == LEGUP_F_main_BB_preheader16i_640)) begin
		main_preheader16i_848_reg <= main_preheader16i_848;
		if (start == 1'b0 && ^(main_preheader16i_848) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader16i_848_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %849*/
	/*   %850 = load i32* @main_result, align 4, !tbaa !1*/
		main_849_850 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_849_850_reg <= 0;
	/* main: %849*/
	/*   %850 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__849_643)) begin
		main_849_850_reg <= main_849_850;
		if (start == 1'b0 && ^(main_849_850) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_849_850_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %849*/
	/*   %851 = add nsw i32 %850, 1*/
		main_849_851 = (main_849_850 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_849_851_reg <= 0;
	/* main: %849*/
	/*   %851 = add nsw i32 %850, 1*/
	else if((cur_state == LEGUP_F_main_BB__849_643)) begin
		main_849_851_reg <= main_849_851;
		if (start == 1'b0 && ^(main_849_851) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_849_851_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %852*/
	/*   %853 = add nsw i32 %j.01.1.i, 1*/
		main_852_853 = (main_preheader16i_j011i_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_852_853_reg <= 0;
	/* main: %852*/
	/*   %853 = add nsw i32 %j.01.1.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__852_645)) begin
		main_852_853_reg <= main_852_853;
		if (start == 1'b0 && ^(main_852_853) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_852_853_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %852*/
	/*   %exitcond13 = icmp eq i32 %853, 5310*/
		main_852_exitcond13 = (main_852_853 == 32'd5310);
end
always @(posedge clk) begin
	if (reset)
		main_852_exitcond13_reg <= 0;
	/* main: %852*/
	/*   %exitcond13 = icmp eq i32 %853, 5310*/
	else if((cur_state == LEGUP_F_main_BB__852_645)) begin
		main_852_exitcond13_reg <= main_852_exitcond13;
		if (start == 1'b0 && ^(main_852_exitcond13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_852_exitcond13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.27.i*/
	/*   %j.01.2.i = phi i32 [ %861, %860 ], [ 0, %.preheader.27.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader27ipreheader_646) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader27i_j012i = 32'd0;
	end
	/* main: %.preheader.27.i*/
	/*   %j.01.2.i = phi i32 [ %861, %860 ], [ 0, %.preheader.27.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__860_654) & (memory_controller_waitrequest == 1'd0)) & (main_860_exitcond11 == 1'd0))) */ begin
		main_preheader27i_j012i = main_860_861;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheader27i_j012i_reg <= 0;
	/* main: %.preheader.27.i*/
	/*   %j.01.2.i = phi i32 [ %861, %860 ], [ 0, %.preheader.27.i.preheader ]*/
	else if(((cur_state == LEGUP_F_main_BB_preheader27ipreheader_646) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader27i_j012i_reg <= main_preheader27i_j012i;
		if (start == 1'b0 && ^(main_preheader27i_j012i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader27i_j012i_reg"); $finish; end
	end
	/* main: %.preheader.27.i*/
	/*   %j.01.2.i = phi i32 [ %861, %860 ], [ 0, %.preheader.27.i.preheader ]*/
	else if((((cur_state == LEGUP_F_main_BB__860_654) & (memory_controller_waitrequest == 1'd0)) & (main_860_exitcond11 == 1'd0))) begin
		main_preheader27i_j012i_reg <= main_preheader27i_j012i;
		if (start == 1'b0 && ^(main_preheader27i_j012i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader27i_j012i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.27.i*/
	/*   %scevgep = getelementptr [3 x [5310 x i8]]* @hana_bmp, i32 0, i32 2, i32 %j.01.2.i*/
		main_preheader27i_scevgep = (1'd0 + ((5310 * 32'd2) + (1 * main_preheader27i_j012i_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_preheader27i_scevgep_reg <= 0;
	/* main: %.preheader.27.i*/
	/*   %scevgep = getelementptr [3 x [5310 x i8]]* @hana_bmp, i32 0, i32 2, i32 %j.01.2.i*/
	else if((cur_state == LEGUP_F_main_BB_preheader27i_647)) begin
		main_preheader27i_scevgep_reg <= main_preheader27i_scevgep;
		if (start == 1'b0 && ^(main_preheader27i_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader27i_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.27.i*/
	/*   %scevgep12 = getelementptr [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 %j.01.2.i*/
		main_preheader27i_scevgep12 = (`TAG_g_OutData_comp_buf_a + ((5310 * 32'd2) + (1 * main_preheader27i_j012i_reg)));
end
always @(posedge clk) begin
	if (reset)
		main_preheader27i_scevgep12_reg <= 0;
	/* main: %.preheader.27.i*/
	/*   %scevgep12 = getelementptr [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 %j.01.2.i*/
	else if((cur_state == LEGUP_F_main_BB_preheader27i_647)) begin
		main_preheader27i_scevgep12_reg <= main_preheader27i_scevgep12;
		if (start == 1'b0 && ^(main_preheader27i_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader27i_scevgep12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.27.i*/
	/*   %854 = load i8* %scevgep12, align 1, !tbaa !5*/
		main_preheader27i_854 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	if (reset)
		main_preheader27i_854_reg <= 0;
	/* main: %.preheader.27.i*/
	/*   %854 = load i8* %scevgep12, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_preheader27i_649)) begin
		main_preheader27i_854_reg <= main_preheader27i_854;
		if (start == 1'b0 && ^(main_preheader27i_854) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader27i_854_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.27.i*/
	/*   %855 = load i8* %scevgep, align 1, !tbaa !5*/
		main_preheader27i_855 = hana_bmp_out_a;
end
always @(posedge clk) begin
	if (reset)
		main_preheader27i_855_reg <= 0;
	/* main: %.preheader.27.i*/
	/*   %855 = load i8* %scevgep, align 1, !tbaa !5*/
	else if((cur_state == LEGUP_F_main_BB_preheader27i_648)) begin
		main_preheader27i_855_reg <= main_preheader27i_855;
		if (start == 1'b0 && ^(main_preheader27i_855) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader27i_855_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.27.i*/
	/*   %856 = icmp eq i8 %854, %855*/
		main_preheader27i_856 = (main_preheader27i_854 == main_preheader27i_855_reg);
end
always @(posedge clk) begin
	if (reset)
		main_preheader27i_856_reg <= 0;
	/* main: %.preheader.27.i*/
	/*   %856 = icmp eq i8 %854, %855*/
	else if((cur_state == LEGUP_F_main_BB_preheader27i_649)) begin
		main_preheader27i_856_reg <= main_preheader27i_856;
		if (start == 1'b0 && ^(main_preheader27i_856) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader27i_856_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %857*/
	/*   %858 = load i32* @main_result, align 4, !tbaa !1*/
		main_857_858 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_857_858_reg <= 0;
	/* main: %857*/
	/*   %858 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__857_652)) begin
		main_857_858_reg <= main_857_858;
		if (start == 1'b0 && ^(main_857_858) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_857_858_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %857*/
	/*   %859 = add nsw i32 %858, 1*/
		main_857_859 = (main_857_858 + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_857_859_reg <= 0;
	/* main: %857*/
	/*   %859 = add nsw i32 %858, 1*/
	else if((cur_state == LEGUP_F_main_BB__857_652)) begin
		main_857_859_reg <= main_857_859;
		if (start == 1'b0 && ^(main_857_859) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_857_859_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %860*/
	/*   %861 = add nsw i32 %j.01.2.i, 1*/
		main_860_861 = (main_preheader27i_j012i_reg + 32'd1);
end
always @(posedge clk) begin
	if (reset)
		main_860_861_reg <= 0;
	/* main: %860*/
	/*   %861 = add nsw i32 %j.01.2.i, 1*/
	else if((cur_state == LEGUP_F_main_BB__860_654)) begin
		main_860_861_reg <= main_860_861;
		if (start == 1'b0 && ^(main_860_861) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_860_861_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %860*/
	/*   %exitcond11 = icmp eq i32 %861, 5310*/
		main_860_exitcond11 = (main_860_861 == 32'd5310);
end
always @(posedge clk) begin
	if (reset)
		main_860_exitcond11_reg <= 0;
	/* main: %860*/
	/*   %exitcond11 = icmp eq i32 %861, 5310*/
	else if((cur_state == LEGUP_F_main_BB__860_654)) begin
		main_860_exitcond11_reg <= main_860_exitcond11;
		if (start == 1'b0 && ^(main_860_exitcond11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_860_exitcond11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %862*/
	/*   %863 = icmp eq i16 %496, 90*/
		main_862_863 = (main_read_markersexiti_496_reg == 16'd90);
end
always @(posedge clk) begin
	if (reset)
		main_862_863_reg <= 0;
	/* main: %862*/
	/*   %863 = icmp eq i16 %496, 90*/
	else if((cur_state == LEGUP_F_main_BB__862_655)) begin
		main_862_863_reg <= main_862_863;
		if (start == 1'b0 && ^(main_862_863) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_862_863_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %jpeg2bmp_main.exit*/
	/*   %864 = phi i32 [ %845, %844 ], [ %843, %841 ]*/
	if ((((cur_state == LEGUP_F_main_BB__841_635) & (memory_controller_waitrequest == 1'd0)) & (main_841_842_reg == 1'd0))) begin
		main_jpeg2bmp_mainexit_864 = main_841_843;
	end
	/* main: %jpeg2bmp_main.exit*/
	/*   %864 = phi i32 [ %845, %844 ], [ %843, %841 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__844_637) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_jpeg2bmp_mainexit_864 = main_844_845_reg;
	end
end
always @(posedge clk) begin
	if (reset)
		main_jpeg2bmp_mainexit_864_reg <= 0;
	/* main: %jpeg2bmp_main.exit*/
	/*   %864 = phi i32 [ %845, %844 ], [ %843, %841 ]*/
	else if((((cur_state == LEGUP_F_main_BB__841_635) & (memory_controller_waitrequest == 1'd0)) & (main_841_842_reg == 1'd0))) begin
		main_jpeg2bmp_mainexit_864_reg <= main_jpeg2bmp_mainexit_864;
		if (start == 1'b0 && ^(main_jpeg2bmp_mainexit_864) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_jpeg2bmp_mainexit_864_reg"); $finish; end
	end
	/* main: %jpeg2bmp_main.exit*/
	/*   %864 = phi i32 [ %845, %844 ], [ %843, %841 ]*/
	else if(((cur_state == LEGUP_F_main_BB__844_637) & (memory_controller_waitrequest == 1'd0))) begin
		main_jpeg2bmp_mainexit_864_reg <= main_jpeg2bmp_mainexit_864;
		if (start == 1'b0 && ^(main_jpeg2bmp_mainexit_864) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_jpeg2bmp_mainexit_864_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %jpeg2bmp_main.exit*/
	/*   %866 = load i32* @main_result, align 4, !tbaa !1*/
		main_jpeg2bmp_mainexit_866 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_jpeg2bmp_mainexit_866_reg <= 0;
	/* main: %jpeg2bmp_main.exit*/
	/*   %866 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB_jpeg2bmp_mainexit_658)) begin
		main_jpeg2bmp_mainexit_866_reg <= main_jpeg2bmp_mainexit_866;
		if (start == 1'b0 && ^(main_jpeg2bmp_mainexit_866) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_jpeg2bmp_mainexit_866_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %jpeg2bmp_main.exit*/
	/*   %867 = icmp eq i32 %866, 21745*/
		main_jpeg2bmp_mainexit_867 = (main_jpeg2bmp_mainexit_866 == 32'd21745);
end
always @(posedge clk) begin
	if (reset)
		main_jpeg2bmp_mainexit_867_reg <= 0;
	/* main: %jpeg2bmp_main.exit*/
	/*   %867 = icmp eq i32 %866, 21745*/
	else if((cur_state == LEGUP_F_main_BB_jpeg2bmp_mainexit_658)) begin
		main_jpeg2bmp_mainexit_867_reg <= main_jpeg2bmp_mainexit_867;
		if (start == 1'b0 && ^(main_jpeg2bmp_mainexit_867) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_jpeg2bmp_mainexit_867_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %872*/
	/*   %873 = load i32* @main_result, align 4, !tbaa !1*/
		main_872_873 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_872_873_reg <= 0;
	/* main: %872*/
	/*   %873 = load i32* @main_result, align 4, !tbaa !1*/
	else if((cur_state == LEGUP_F_main_BB__872_663)) begin
		main_872_873_reg <= main_872_873;
		if (start == 1'b0 && ^(main_872_873) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_872_873_reg"); $finish; end
	end
end
always @(*) begin
	hana_jpg_address_a = 1'd0;
	/* main: %1*/
	/*   %2 = load i8* %scevgep210, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		hana_jpg_address_a = (main_1_scevgep210 >>> 3'd0);
	end
end
always @(*) begin
	hana_jpg_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %2 = load i8* %scevgep210, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		hana_jpg_write_enable_a = 1'd0;
	end
end
always @(*) begin
	hana_bmp_address_a = 1'd0;
	/* main: %decode_start.exit.i*/
	/*   %831 = load i8* %scevgep17, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_decode_startexiti_620)) begin
		hana_bmp_address_a = (main_decode_startexiti_scevgep17 >>> 3'd0);
	end
	/* main: %.preheader.16.i*/
	/*   %847 = load i8* %scevgep14, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheader16i_638)) begin
		hana_bmp_address_a = (main_preheader16i_scevgep14 >>> 3'd0);
	end
	/* main: %.preheader.27.i*/
	/*   %855 = load i8* %scevgep, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheader27i_647)) begin
		hana_bmp_address_a = (main_preheader27i_scevgep >>> 3'd0);
	end
end
always @(*) begin
	hana_bmp_write_enable_a = 1'd0;
	/* main: %decode_start.exit.i*/
	/*   %831 = load i8* %scevgep17, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_decode_startexiti_620)) begin
		hana_bmp_write_enable_a = 1'd0;
	end
	/* main: %.preheader.16.i*/
	/*   %847 = load i8* %scevgep14, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheader16i_638)) begin
		hana_bmp_write_enable_a = 1'd0;
	end
	/* main: %.preheader.27.i*/
	/*   %855 = load i8* %scevgep, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheader27i_647)) begin
		hana_bmp_write_enable_a = 1'd0;
	end
end
always @(*) begin
	out_unread_marker_address_a = 1'd0;
	/* main: %next_marker.exit.i.i*/
	/*   %26 = load i32* %scevgep178, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_next_markerexitii_34)) begin
		out_unread_marker_address_a = (main_loopexitipreheaderii_scevgep178_reg >>> 3'd2);
	end
end
always @(*) begin
	out_unread_marker_write_enable_a = 1'd0;
	/* main: %next_marker.exit.i.i*/
	/*   %26 = load i32* %scevgep178, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_next_markerexitii_34)) begin
		out_unread_marker_write_enable_a = 1'd0;
	end
end
always @(*) begin
	out_index_get_sof_address_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %125 = load i32* %scevgep203, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		out_index_get_sof_address_a = (main_lrphi2ii_scevgep203 >>> 3'd2);
	end
end
always @(*) begin
	out_index_get_sof_write_enable_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   %125 = load i32* %scevgep203, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		out_index_get_sof_write_enable_a = 1'd0;
	end
end
always @(*) begin
	out_v_samp_factor_get_sof_address_a = 1'd0;
	/* main: %138*/
	/*   %141 = load i32* %scevgep201, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__138_107)) begin
		out_v_samp_factor_get_sof_address_a = (main_lrphi2ii_scevgep201_reg >>> 3'd2);
	end
end
always @(*) begin
	out_v_samp_factor_get_sof_write_enable_a = 1'd0;
	/* main: %138*/
	/*   %141 = load i32* %scevgep201, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__138_107)) begin
		out_v_samp_factor_get_sof_write_enable_a = 1'd0;
	end
end
always @(*) begin
	out_comp_id_get_sos_address_a = 1'd0;
	/* main: %130*/
	/*   %133 = load i32* %scevgep202, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__130_101)) begin
		out_comp_id_get_sos_address_a = (main_lrphi2ii_scevgep202_reg >>> 3'd2);
	end
	/* main: %209*/
	/*   %223 = load i32* %scevgep171, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_159)) begin
		out_comp_id_get_sos_address_a = (main_lrph10iii_scevgep171_reg >>> 3'd2);
	end
end
always @(*) begin
	out_comp_id_get_sos_write_enable_a = 1'd0;
	/* main: %130*/
	/*   %133 = load i32* %scevgep202, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__130_101)) begin
		out_comp_id_get_sos_write_enable_a = 1'd0;
	end
	/* main: %209*/
	/*   %223 = load i32* %scevgep171, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_159)) begin
		out_comp_id_get_sos_write_enable_a = 1'd0;
	end
end
always @(*) begin
	out_ac_tbl_no_get_sos_address_a = 1'd0;
	/* main: %153*/
	/*   %156 = load i32* %scevgep200, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_119)) begin
		out_ac_tbl_no_get_sos_address_a = (main_lrphi2ii_scevgep200_reg >>> 3'd2);
	end
	/* main: %228*/
	/*   %231 = load i32* %scevgep170, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__228_167)) begin
		out_ac_tbl_no_get_sos_address_a = (main_lrph10iii_scevgep170_reg >>> 3'd2);
	end
end
always @(*) begin
	out_ac_tbl_no_get_sos_write_enable_a = 1'd0;
	/* main: %153*/
	/*   %156 = load i32* %scevgep200, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__153_119)) begin
		out_ac_tbl_no_get_sos_write_enable_a = 1'd0;
	end
	/* main: %228*/
	/*   %231 = load i32* %scevgep170, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__228_167)) begin
		out_ac_tbl_no_get_sos_write_enable_a = 1'd0;
	end
end
always @(*) begin
	out_length_get_dht_address_a = 1'd0;
	/* main: %246*/
	/*   %258 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__246_184)) begin
		out_length_get_dht_address_a = (main_loopexitipreheaderiiouter29_12_reg >>> 3'd2);
	end
end
always @(*) begin
	out_length_get_dht_write_enable_a = 1'd0;
	/* main: %246*/
	/*   %258 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__246_184)) begin
		out_length_get_dht_write_enable_a = 1'd0;
	end
end
always @(*) begin
	out_index_get_dht_address_a = 1'd0;
	/* main: %.lr.ph5.i.i.i*/
	/*   %271 = load i32* %scevgep185, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph5iii_195)) begin
		out_index_get_dht_address_a = (main_lrph5iii_scevgep185 >>> 3'd2);
	end
end
always @(*) begin
	out_index_get_dht_write_enable_a = 1'd0;
	/* main: %.lr.ph5.i.i.i*/
	/*   %271 = load i32* %scevgep185, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph5iii_195)) begin
		out_index_get_dht_write_enable_a = 1'd0;
	end
end
always @(*) begin
	out_count_get_dht_address_a = 1'd0;
	/* main: %286*/
	/*   %367 = load i32* %scevgep184, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_205)) begin
		out_count_get_dht_address_a = (main_lrph5iii_scevgep184_reg >>> 3'd2);
	end
end
always @(*) begin
	out_count_get_dht_write_enable_a = 1'd0;
	/* main: %286*/
	/*   %367 = load i32* %scevgep184, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_205)) begin
		out_count_get_dht_write_enable_a = 1'd0;
	end
end
always @(*) begin
	out_length_get_dqt_address_a = 1'd0;
	/* main: %428*/
	/*   %440 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__428_273)) begin
		out_length_get_dqt_address_a = (main_loopexitipreheaderiiouter24_11_reg >>> 3'd2);
	end
end
always @(*) begin
	out_length_get_dqt_write_enable_a = 1'd0;
	/* main: %428*/
	/*   %440 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__428_273)) begin
		out_length_get_dqt_write_enable_a = 1'd0;
	end
end
always @(*) begin
	out_prec_get_dht_address_a = 1'd0;
	/* main: %.lr.ph.i13.i.i*/
	/*   %457 = load i32* %scevgep195, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi13ii_284)) begin
		out_prec_get_dht_address_a = (main_lrphi13ii_scevgep195 >>> 3'd2);
	end
end
always @(*) begin
	out_prec_get_dht_write_enable_a = 1'd0;
	/* main: %.lr.ph.i13.i.i*/
	/*   %457 = load i32* %scevgep195, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi13ii_284)) begin
		out_prec_get_dht_write_enable_a = 1'd0;
	end
end
always @(*) begin
	out_num_get_dht_address_a = 1'd0;
	/* main: %462*/
	/*   %463 = load i32* %scevgep194, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__462_290)) begin
		out_num_get_dht_address_a = (main_lrphi13ii_scevgep194_reg >>> 3'd2);
	end
end
always @(*) begin
	out_num_get_dht_write_enable_a = 1'd0;
	/* main: %462*/
	/*   %463 = load i32* %scevgep194, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__462_290)) begin
		out_num_get_dht_write_enable_a = 1'd0;
	end
end
always @(*) begin
	izigzag_index_address_a = 1'd0;
	/* main: %.split.us.i.i.i*/
	/*   %475 = load i32* %scevgep191, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_splitusiii_299)) begin
		izigzag_index_address_a = (main_splitusiii_scevgep191 >>> 3'd2);
	end
	/* main: %..split_crit_edge.i.i.i*/
	/*   %487 = load i32* %scevgep189, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_303)) begin
		izigzag_index_address_a = (main_split_crit_edgeiii_scevgep189 >>> 3'd2);
	end
end
always @(*) begin
	izigzag_index_write_enable_a = 1'd0;
	/* main: %.split.us.i.i.i*/
	/*   %475 = load i32* %scevgep191, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_splitusiii_299)) begin
		izigzag_index_write_enable_a = 1'd0;
	end
	/* main: %..split_crit_edge.i.i.i*/
	/*   %487 = load i32* %scevgep189, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_303)) begin
		izigzag_index_write_enable_a = 1'd0;
	end
end
always @(*) begin
	p_jinfo_comps_info_index_address_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   store i8 %99, i8* %scevgep208, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		p_jinfo_comps_info_index_address_a = (main_lrphi2ii_scevgep208 >>> 3'd0);
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %123 = load i8* %scevgep208, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_85)) begin
		p_jinfo_comps_info_index_address_a = (main_lrphi2ii_scevgep208_reg >>> 3'd0);
	end
end
always @(*) begin
	p_jinfo_comps_info_index_write_enable_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   store i8 %99, i8* %scevgep208, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		p_jinfo_comps_info_index_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %123 = load i8* %scevgep208, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_85)) begin
		p_jinfo_comps_info_index_write_enable_a = 1'd0;
	end
end
always @(*) begin
	p_jinfo_comps_info_index_in_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   store i8 %99, i8* %scevgep208, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_84)) begin
		p_jinfo_comps_info_index_in_a = main_lrphi2ii_99;
	end
end
always @(*) begin
	p_jinfo_comps_info_id_address_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   store i8 %104, i8* %scevgep207, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_88)) begin
		p_jinfo_comps_info_id_address_a = (main_lrphi2ii_scevgep207_reg >>> 3'd0);
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %111 = load i8* %scevgep207, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_89)) begin
		p_jinfo_comps_info_id_address_a = (main_lrphi2ii_scevgep207_reg >>> 3'd0);
	end
	/* main: %130*/
	/*   %131 = load i8* %scevgep207, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__130_101)) begin
		p_jinfo_comps_info_id_address_a = (main_lrphi2ii_scevgep207_reg >>> 3'd0);
	end
	/* main: %.lr.ph.i4.i.i*/
	/*   %205 = load i8* %scevgep166, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi4ii_154)) begin
		p_jinfo_comps_info_id_address_a = (main_lrphi4ii_scevgep166 >>> 3'd0);
	end
end
always @(*) begin
	p_jinfo_comps_info_id_write_enable_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   store i8 %104, i8* %scevgep207, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_88)) begin
		p_jinfo_comps_info_id_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %111 = load i8* %scevgep207, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_89)) begin
		p_jinfo_comps_info_id_write_enable_a = 1'd0;
	end
	/* main: %130*/
	/*   %131 = load i8* %scevgep207, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__130_101)) begin
		p_jinfo_comps_info_id_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i4.i.i*/
	/*   %205 = load i8* %scevgep166, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi4ii_154)) begin
		p_jinfo_comps_info_id_write_enable_a = 1'd0;
	end
end
always @(*) begin
	p_jinfo_comps_info_id_in_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   store i8 %104, i8* %scevgep207, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_88)) begin
		p_jinfo_comps_info_id_in_a = main_lrphi2ii_104;
	end
end
always @(*) begin
	p_jinfo_comps_info_h_samp_factor_address_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   store i8 %106, i8* %scevgep206, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_91)) begin
		p_jinfo_comps_info_h_samp_factor_address_a = (main_lrphi2ii_scevgep206_reg >>> 3'd0);
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %114 = load i8* %scevgep206, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_92)) begin
		p_jinfo_comps_info_h_samp_factor_address_a = (main_lrphi2ii_scevgep206_reg >>> 3'd0);
	end
	/* main: %138*/
	/*   %139 = load i8* %scevgep206, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__138_107)) begin
		p_jinfo_comps_info_h_samp_factor_address_a = (main_lrphi2ii_scevgep206_reg >>> 3'd0);
	end
	/* main: %._crit_edge.i.i.i*/
	/*   %164 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_h_samp_factor, i32 0, i32 0), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeiii_128)) begin
		p_jinfo_comps_info_h_samp_factor_address_a = (1'd0 >>> 3'd0);
	end
end
always @(*) begin
	p_jinfo_comps_info_h_samp_factor_write_enable_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   store i8 %106, i8* %scevgep206, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_91)) begin
		p_jinfo_comps_info_h_samp_factor_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %114 = load i8* %scevgep206, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_92)) begin
		p_jinfo_comps_info_h_samp_factor_write_enable_a = 1'd0;
	end
	/* main: %138*/
	/*   %139 = load i8* %scevgep206, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__138_107)) begin
		p_jinfo_comps_info_h_samp_factor_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i.i.i*/
	/*   %164 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_h_samp_factor, i32 0, i32 0), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeiii_128)) begin
		p_jinfo_comps_info_h_samp_factor_write_enable_a = 1'd0;
	end
end
always @(*) begin
	p_jinfo_comps_info_h_samp_factor_in_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   store i8 %106, i8* %scevgep206, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_91)) begin
		p_jinfo_comps_info_h_samp_factor_in_a = main_lrphi2ii_106;
	end
end
always @(*) begin
	p_jinfo_comps_info_v_samp_factor_address_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   store i8 %107, i8* %scevgep205, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_91)) begin
		p_jinfo_comps_info_v_samp_factor_address_a = (main_lrphi2ii_scevgep205_reg >>> 3'd0);
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %117 = load i8* %scevgep205, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_92)) begin
		p_jinfo_comps_info_v_samp_factor_address_a = (main_lrphi2ii_scevgep205_reg >>> 3'd0);
	end
	/* main: %146*/
	/*   %147 = load i8* %scevgep205, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__146_113)) begin
		p_jinfo_comps_info_v_samp_factor_address_a = (main_lrphi2ii_scevgep205_reg >>> 3'd0);
	end
end
always @(*) begin
	p_jinfo_comps_info_v_samp_factor_write_enable_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   store i8 %107, i8* %scevgep205, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_91)) begin
		p_jinfo_comps_info_v_samp_factor_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %117 = load i8* %scevgep205, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_92)) begin
		p_jinfo_comps_info_v_samp_factor_write_enable_a = 1'd0;
	end
	/* main: %146*/
	/*   %147 = load i8* %scevgep205, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__146_113)) begin
		p_jinfo_comps_info_v_samp_factor_write_enable_a = 1'd0;
	end
end
always @(*) begin
	p_jinfo_comps_info_v_samp_factor_in_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   store i8 %107, i8* %scevgep205, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_91)) begin
		p_jinfo_comps_info_v_samp_factor_in_a = main_lrphi2ii_107;
	end
end
always @(*) begin
	p_jinfo_comps_info_quant_tbl_no_address_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   store i8 %108, i8* %scevgep204, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_94)) begin
		p_jinfo_comps_info_quant_tbl_no_address_a = (main_lrphi2ii_scevgep204_reg >>> 3'd0);
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %120 = load i8* %scevgep204, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_95)) begin
		p_jinfo_comps_info_quant_tbl_no_address_a = (main_lrphi2ii_scevgep204_reg >>> 3'd0);
	end
	/* main: %153*/
	/*   %154 = load i8* %scevgep204, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__153_119)) begin
		p_jinfo_comps_info_quant_tbl_no_address_a = (main_lrphi2ii_scevgep204_reg >>> 3'd0);
	end
	/* main: %IZigzagMatrix.exit.i.i.i*/
	/*   %529 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 0), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_IZigzagMatrixexitiii_375)) begin
		p_jinfo_comps_info_quant_tbl_no_address_a = (1'd0 >>> 3'd0);
	end
	/* main: %IZigzagMatrix.exit.i5.i.i*/
	/*   %659 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 0), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti5ii_449)) begin
		p_jinfo_comps_info_quant_tbl_no_address_a = (1'd0 >>> 3'd0);
	end
	/* main: %IZigzagMatrix.exit.i17.i.i*/
	/*   %689 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 1), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti17ii_481)) begin
		p_jinfo_comps_info_quant_tbl_no_address_a = ((1'd0 + (1 * 32'd1)) >>> 3'd0);
	end
	/* main: %IZigzagMatrix.exit.i29.i.i*/
	/*   %717 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 2), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti29ii_512)) begin
		p_jinfo_comps_info_quant_tbl_no_address_a = ((1'd0 + (1 * 32'd2)) >>> 3'd0);
	end
	/* main: %IZigzagMatrix.exit.i.1.i.i*/
	/*   %779 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 1), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti1ii_565)) begin
		p_jinfo_comps_info_quant_tbl_no_address_a = ((1'd0 + (1 * 32'd1)) >>> 3'd0);
	end
	/* main: %IZigzagMatrix.exit.i.2.i.i*/
	/*   %807 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 2), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti2ii_596)) begin
		p_jinfo_comps_info_quant_tbl_no_address_a = ((1'd0 + (1 * 32'd2)) >>> 3'd0);
	end
end
always @(*) begin
	p_jinfo_comps_info_quant_tbl_no_write_enable_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   store i8 %108, i8* %scevgep204, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_94)) begin
		p_jinfo_comps_info_quant_tbl_no_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %120 = load i8* %scevgep204, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_95)) begin
		p_jinfo_comps_info_quant_tbl_no_write_enable_a = 1'd0;
	end
	/* main: %153*/
	/*   %154 = load i8* %scevgep204, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__153_119)) begin
		p_jinfo_comps_info_quant_tbl_no_write_enable_a = 1'd0;
	end
	/* main: %IZigzagMatrix.exit.i.i.i*/
	/*   %529 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 0), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_IZigzagMatrixexitiii_375)) begin
		p_jinfo_comps_info_quant_tbl_no_write_enable_a = 1'd0;
	end
	/* main: %IZigzagMatrix.exit.i5.i.i*/
	/*   %659 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 0), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti5ii_449)) begin
		p_jinfo_comps_info_quant_tbl_no_write_enable_a = 1'd0;
	end
	/* main: %IZigzagMatrix.exit.i17.i.i*/
	/*   %689 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 1), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti17ii_481)) begin
		p_jinfo_comps_info_quant_tbl_no_write_enable_a = 1'd0;
	end
	/* main: %IZigzagMatrix.exit.i29.i.i*/
	/*   %717 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 2), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti29ii_512)) begin
		p_jinfo_comps_info_quant_tbl_no_write_enable_a = 1'd0;
	end
	/* main: %IZigzagMatrix.exit.i.1.i.i*/
	/*   %779 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 1), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti1ii_565)) begin
		p_jinfo_comps_info_quant_tbl_no_write_enable_a = 1'd0;
	end
	/* main: %IZigzagMatrix.exit.i.2.i.i*/
	/*   %807 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 2), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_IZigzagMatrixexiti2ii_596)) begin
		p_jinfo_comps_info_quant_tbl_no_write_enable_a = 1'd0;
	end
end
always @(*) begin
	p_jinfo_comps_info_quant_tbl_no_in_a = 1'd0;
	/* main: %.lr.ph.i2.i.i*/
	/*   store i8 %108, i8* %scevgep204, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_94)) begin
		p_jinfo_comps_info_quant_tbl_no_in_a = main_lrphi2ii_108;
	end
end
always @(*) begin
	p_jinfo_comps_info_ac_tbl_no_address_a = 1'd0;
	/* main: %209*/
	/*   store i8 %215, i8* %211, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__209_159)) begin
		p_jinfo_comps_info_ac_tbl_no_address_a = (main_209_211 >>> 3'd0);
	end
	/* main: %209*/
	/*   %220 = load i8* %211, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__209_160)) begin
		p_jinfo_comps_info_ac_tbl_no_address_a = (main_209_211_reg >>> 3'd0);
	end
	/* main: %236*/
	/*   %237 = load i8* %211, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__236_174)) begin
		p_jinfo_comps_info_ac_tbl_no_address_a = (main_209_211_reg >>> 3'd0);
	end
end
always @(*) begin
	p_jinfo_comps_info_ac_tbl_no_write_enable_a = 1'd0;
	/* main: %209*/
	/*   store i8 %215, i8* %211, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__209_159)) begin
		p_jinfo_comps_info_ac_tbl_no_write_enable_a = 1'd1;
	end
	/* main: %209*/
	/*   %220 = load i8* %211, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__209_160)) begin
		p_jinfo_comps_info_ac_tbl_no_write_enable_a = 1'd0;
	end
	/* main: %236*/
	/*   %237 = load i8* %211, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__236_174)) begin
		p_jinfo_comps_info_ac_tbl_no_write_enable_a = 1'd0;
	end
end
always @(*) begin
	p_jinfo_comps_info_ac_tbl_no_in_a = 1'd0;
	/* main: %209*/
	/*   store i8 %215, i8* %211, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__209_159)) begin
		p_jinfo_comps_info_ac_tbl_no_in_a = main_209_215;
	end
end
always @(*) begin
	p_jinfo_quant_tbl_quantval_address_a = 1'd0;
	/* main: %.split.us.i.i.i*/
	/*   store i32 %474, i32* %476, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_splitusiii_301)) begin
		p_jinfo_quant_tbl_quantval_address_a = (main_splitusiii_476 >>> 3'd2);
	end
	/* main: %..split_crit_edge.i.i.i*/
	/*   store i32 %486, i32* %488, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_306)) begin
		p_jinfo_quant_tbl_quantval_address_a = (main_split_crit_edgeiii_488_reg >>> 3'd2);
	end
	/* main: %532*/
	/*   %535 = load i32* %.01.i2.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__532_377)) begin
		p_jinfo_quant_tbl_quantval_address_a = (main_532_01i2iii >>> 3'd2);
	end
	/* main: %662*/
	/*   %665 = load i32* %.01.i2.i7.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__662_451)) begin
		p_jinfo_quant_tbl_quantval_address_a = (main_662_01i2i7ii >>> 3'd2);
	end
	/* main: %692*/
	/*   %695 = load i32* %.01.i2.i19.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_483)) begin
		p_jinfo_quant_tbl_quantval_address_a = (main_692_01i2i19ii >>> 3'd2);
	end
	/* main: %720*/
	/*   %723 = load i32* %.01.i2.i31.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__720_514)) begin
		p_jinfo_quant_tbl_quantval_address_a = (main_720_01i2i31ii >>> 3'd2);
	end
	/* main: %782*/
	/*   %785 = load i32* %.01.i2.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_567)) begin
		p_jinfo_quant_tbl_quantval_address_a = (main_782_01i2i1ii >>> 3'd2);
	end
	/* main: %810*/
	/*   %813 = load i32* %.01.i2.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__810_598)) begin
		p_jinfo_quant_tbl_quantval_address_a = (main_810_01i2i2ii >>> 3'd2);
	end
end
always @(*) begin
	p_jinfo_quant_tbl_quantval_write_enable_a = 1'd0;
	/* main: %.split.us.i.i.i*/
	/*   store i32 %474, i32* %476, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_splitusiii_301)) begin
		p_jinfo_quant_tbl_quantval_write_enable_a = 1'd1;
	end
	/* main: %..split_crit_edge.i.i.i*/
	/*   store i32 %486, i32* %488, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_306)) begin
		p_jinfo_quant_tbl_quantval_write_enable_a = 1'd1;
	end
	/* main: %532*/
	/*   %535 = load i32* %.01.i2.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__532_377)) begin
		p_jinfo_quant_tbl_quantval_write_enable_a = 1'd0;
	end
	/* main: %662*/
	/*   %665 = load i32* %.01.i2.i7.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__662_451)) begin
		p_jinfo_quant_tbl_quantval_write_enable_a = 1'd0;
	end
	/* main: %692*/
	/*   %695 = load i32* %.01.i2.i19.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_483)) begin
		p_jinfo_quant_tbl_quantval_write_enable_a = 1'd0;
	end
	/* main: %720*/
	/*   %723 = load i32* %.01.i2.i31.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__720_514)) begin
		p_jinfo_quant_tbl_quantval_write_enable_a = 1'd0;
	end
	/* main: %782*/
	/*   %785 = load i32* %.01.i2.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_567)) begin
		p_jinfo_quant_tbl_quantval_write_enable_a = 1'd0;
	end
	/* main: %810*/
	/*   %813 = load i32* %.01.i2.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__810_598)) begin
		p_jinfo_quant_tbl_quantval_write_enable_a = 1'd0;
	end
end
always @(*) begin
	p_jinfo_quant_tbl_quantval_in_a = 1'd0;
	/* main: %.split.us.i.i.i*/
	/*   store i32 %474, i32* %476, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_splitusiii_301)) begin
		p_jinfo_quant_tbl_quantval_in_a = main_splitusiii_474;
	end
	/* main: %..split_crit_edge.i.i.i*/
	/*   store i32 %486, i32* %488, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_306)) begin
		p_jinfo_quant_tbl_quantval_in_a = main_split_crit_edgeiii_486;
	end
end
always @(*) begin
	zigzag_index_address_a = 1'd0;
	/* main: %524*/
	/*   %525 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_370)) begin
		zigzag_index_address_a = (main_524_scevgep20 >>> 3'd2);
	end
	/* main: %654*/
	/*   %655 = load i32* %scevgep94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__654_444)) begin
		zigzag_index_address_a = (main_654_scevgep94 >>> 3'd2);
	end
	/* main: %684*/
	/*   %685 = load i32* %scevgep121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__684_476)) begin
		zigzag_index_address_a = (main_684_scevgep121 >>> 3'd2);
	end
	/* main: %712*/
	/*   %713 = load i32* %scevgep137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__712_507)) begin
		zigzag_index_address_a = (main_712_scevgep137 >>> 3'd2);
	end
	/* main: %774*/
	/*   %775 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__774_560)) begin
		zigzag_index_address_a = (main_774_scevgep34 >>> 3'd2);
	end
	/* main: %802*/
	/*   %803 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__802_591)) begin
		zigzag_index_address_a = (main_802_scevgep50 >>> 3'd2);
	end
end
always @(*) begin
	zigzag_index_write_enable_a = 1'd0;
	/* main: %524*/
	/*   %525 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_370)) begin
		zigzag_index_write_enable_a = 1'd0;
	end
	/* main: %654*/
	/*   %655 = load i32* %scevgep94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__654_444)) begin
		zigzag_index_write_enable_a = 1'd0;
	end
	/* main: %684*/
	/*   %685 = load i32* %scevgep121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__684_476)) begin
		zigzag_index_write_enable_a = 1'd0;
	end
	/* main: %712*/
	/*   %713 = load i32* %scevgep137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__712_507)) begin
		zigzag_index_write_enable_a = 1'd0;
	end
	/* main: %774*/
	/*   %775 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__774_560)) begin
		zigzag_index_write_enable_a = 1'd0;
	end
	/* main: %802*/
	/*   %803 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__802_591)) begin
		zigzag_index_write_enable_a = 1'd0;
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_start <= 0;
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_347)) begin
		huff_make_dhuff_tb_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_348)) begin
		huff_make_dhuff_tb_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_start"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_350)) begin
		huff_make_dhuff_tb_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_351)) begin
		huff_make_dhuff_tb_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_start"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_353)) begin
		huff_make_dhuff_tb_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_354)) begin
		huff_make_dhuff_tb_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_start"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_356)) begin
		huff_make_dhuff_tb_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_357)) begin
		huff_make_dhuff_tb_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_start"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_arg_p_xhtbl_bits <= 0;
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_347)) begin
		huff_make_dhuff_tb_arg_p_xhtbl_bits <= `TAG_g_p_jinfo_dc_xhuff_tbl_bits_a;
		if (start == 1'b0 && ^(`TAG_g_p_jinfo_dc_xhuff_tbl_bits_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_xhtbl_bits"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_350)) begin
		huff_make_dhuff_tb_arg_p_xhtbl_bits <= (`TAG_g_p_jinfo_dc_xhuff_tbl_bits_a + (144 * 32'd1));
		if (start == 1'b0 && ^((`TAG_g_p_jinfo_dc_xhuff_tbl_bits_a + (144 * 32'd1))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_xhtbl_bits"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_353)) begin
		huff_make_dhuff_tb_arg_p_xhtbl_bits <= `TAG_g_p_jinfo_ac_xhuff_tbl_bits_a;
		if (start == 1'b0 && ^(`TAG_g_p_jinfo_ac_xhuff_tbl_bits_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_xhtbl_bits"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_356)) begin
		huff_make_dhuff_tb_arg_p_xhtbl_bits <= (`TAG_g_p_jinfo_ac_xhuff_tbl_bits_a + (144 * 32'd1));
		if (start == 1'b0 && ^((`TAG_g_p_jinfo_ac_xhuff_tbl_bits_a + (144 * 32'd1))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_xhtbl_bits"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_arg_p_dhtbl_maxcode <= 0;
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_347)) begin
		huff_make_dhuff_tb_arg_p_dhtbl_maxcode <= `TAG_g_p_jinfo_dc_dhuff_tbl_maxcode_a;
		if (start == 1'b0 && ^(`TAG_g_p_jinfo_dc_dhuff_tbl_maxcode_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_maxcode"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_350)) begin
		huff_make_dhuff_tb_arg_p_dhtbl_maxcode <= (`TAG_g_p_jinfo_dc_dhuff_tbl_maxcode_a + (144 * 32'd1));
		if (start == 1'b0 && ^((`TAG_g_p_jinfo_dc_dhuff_tbl_maxcode_a + (144 * 32'd1))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_maxcode"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_353)) begin
		huff_make_dhuff_tb_arg_p_dhtbl_maxcode <= `TAG_g_p_jinfo_ac_dhuff_tbl_maxcode_a;
		if (start == 1'b0 && ^(`TAG_g_p_jinfo_ac_dhuff_tbl_maxcode_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_maxcode"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_356)) begin
		huff_make_dhuff_tb_arg_p_dhtbl_maxcode <= (`TAG_g_p_jinfo_ac_dhuff_tbl_maxcode_a + (144 * 32'd1));
		if (start == 1'b0 && ^((`TAG_g_p_jinfo_ac_dhuff_tbl_maxcode_a + (144 * 32'd1))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_maxcode"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_arg_p_dhtbl_mincode <= 0;
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_347)) begin
		huff_make_dhuff_tb_arg_p_dhtbl_mincode <= `TAG_g_p_jinfo_dc_dhuff_tbl_mincode_a;
		if (start == 1'b0 && ^(`TAG_g_p_jinfo_dc_dhuff_tbl_mincode_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_mincode"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_350)) begin
		huff_make_dhuff_tb_arg_p_dhtbl_mincode <= (`TAG_g_p_jinfo_dc_dhuff_tbl_mincode_a + (144 * 32'd1));
		if (start == 1'b0 && ^((`TAG_g_p_jinfo_dc_dhuff_tbl_mincode_a + (144 * 32'd1))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_mincode"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_353)) begin
		huff_make_dhuff_tb_arg_p_dhtbl_mincode <= `TAG_g_p_jinfo_ac_dhuff_tbl_mincode_a;
		if (start == 1'b0 && ^(`TAG_g_p_jinfo_ac_dhuff_tbl_mincode_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_mincode"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_356)) begin
		huff_make_dhuff_tb_arg_p_dhtbl_mincode <= (`TAG_g_p_jinfo_ac_dhuff_tbl_mincode_a + (144 * 32'd1));
		if (start == 1'b0 && ^((`TAG_g_p_jinfo_ac_dhuff_tbl_mincode_a + (144 * 32'd1))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_mincode"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_arg_p_dhtbl_valptr <= 0;
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_347)) begin
		huff_make_dhuff_tb_arg_p_dhtbl_valptr <= `TAG_g_p_jinfo_dc_dhuff_tbl_valptr_a;
		if (start == 1'b0 && ^(`TAG_g_p_jinfo_dc_dhuff_tbl_valptr_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_valptr"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_350)) begin
		huff_make_dhuff_tb_arg_p_dhtbl_valptr <= (`TAG_g_p_jinfo_dc_dhuff_tbl_valptr_a + (144 * 32'd1));
		if (start == 1'b0 && ^((`TAG_g_p_jinfo_dc_dhuff_tbl_valptr_a + (144 * 32'd1))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_valptr"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_353)) begin
		huff_make_dhuff_tb_arg_p_dhtbl_valptr <= `TAG_g_p_jinfo_ac_dhuff_tbl_valptr_a;
		if (start == 1'b0 && ^(`TAG_g_p_jinfo_ac_dhuff_tbl_valptr_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_valptr"); $finish; end
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_read_markersexiti_356)) begin
		huff_make_dhuff_tb_arg_p_dhtbl_valptr <= (`TAG_g_p_jinfo_ac_dhuff_tbl_valptr_a + (144 * 32'd1));
		if (start == 1'b0 && ^((`TAG_g_p_jinfo_ac_dhuff_tbl_valptr_a + (144 * 32'd1))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_valptr"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		huff_make_dhuff_tb_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	else if ((cur_state == LEGUP_function_call_351)) begin
		huff_make_dhuff_tb_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	else if ((cur_state == LEGUP_function_call_354)) begin
		huff_make_dhuff_tb_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	else /* if ((cur_state == LEGUP_function_call_357)) */ begin
		huff_make_dhuff_tb_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		huff_make_dhuff_tb_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	else if ((cur_state == LEGUP_function_call_351)) begin
		huff_make_dhuff_tb_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	else if ((cur_state == LEGUP_function_call_354)) begin
		huff_make_dhuff_tb_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	else /* if ((cur_state == LEGUP_function_call_357)) */ begin
		huff_make_dhuff_tb_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	huff_make_dhuff_tb_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	huff_make_dhuff_tb_finish_final = huff_make_dhuff_tb_finish_reg;
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_finish_reg <= 0;
	else if((reset | (cur_state == LEGUP_F_main_BB_read_markersexiti_347))) begin
		huff_make_dhuff_tb_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_finish_reg"); $finish; end
	end
	else if(huff_make_dhuff_tb_finish) begin
		huff_make_dhuff_tb_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB_read_markersexiti_350))) begin
		huff_make_dhuff_tb_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_finish_reg"); $finish; end
	end
	else if(huff_make_dhuff_tb_finish) begin
		huff_make_dhuff_tb_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB_read_markersexiti_353))) begin
		huff_make_dhuff_tb_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_finish_reg"); $finish; end
	end
	else if(huff_make_dhuff_tb_finish) begin
		huff_make_dhuff_tb_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB_read_markersexiti_356))) begin
		huff_make_dhuff_tb_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_finish_reg"); $finish; end
	end
	else if(huff_make_dhuff_tb_finish) begin
		huff_make_dhuff_tb_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		huff_make_dhuff_tb_return_val_reg <= 0;
	else if((reset | (cur_state == LEGUP_F_main_BB_read_markersexiti_347))) begin
		huff_make_dhuff_tb_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_return_val_reg"); $finish; end
	end
	else if(huff_make_dhuff_tb_finish) begin
		huff_make_dhuff_tb_return_val_reg <= huff_make_dhuff_tb_return_val;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_return_val_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB_read_markersexiti_350))) begin
		huff_make_dhuff_tb_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_return_val_reg"); $finish; end
	end
	else if(huff_make_dhuff_tb_finish) begin
		huff_make_dhuff_tb_return_val_reg <= huff_make_dhuff_tb_return_val;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_return_val_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB_read_markersexiti_353))) begin
		huff_make_dhuff_tb_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_return_val_reg"); $finish; end
	end
	else if(huff_make_dhuff_tb_finish) begin
		huff_make_dhuff_tb_return_val_reg <= huff_make_dhuff_tb_return_val;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_return_val_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB_read_markersexiti_356))) begin
		huff_make_dhuff_tb_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_return_val_reg"); $finish; end
	end
	else if(huff_make_dhuff_tb_finish) begin
		huff_make_dhuff_tb_return_val_reg <= huff_make_dhuff_tb_return_val;
		if (start == 1'b0 && ^(huff_make_dhuff_tb_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		legup_function_call = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		legup_function_call = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		legup_function_call = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		legup_function_call = 1'd1;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		legup_function_call = 1'd1;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		legup_function_call = 1'd1;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		legup_function_call = 1'd1;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		legup_function_call = 1'd1;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		legup_function_call = 1'd1;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		legup_function_call = 1'd1;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		legup_function_call = 1'd1;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		legup_function_call = 1'd1;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		legup_function_call = 1'd1;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		legup_function_call = 1'd1;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_start <= 0;
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader46ii_367)) begin
		DecodeHuffMCU_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_368)) begin
		DecodeHuffMCU_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_start"); $finish; end
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexitii_398)) begin
		DecodeHuffMCU_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_399)) begin
		DecodeHuffMCU_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_start"); $finish; end
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	else if((cur_state == LEGUP_F_main_BB__652_441)) begin
		DecodeHuffMCU_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_442)) begin
		DecodeHuffMCU_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_start"); $finish; end
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	else if((cur_state == LEGUP_F_main_BB__683_473)) begin
		DecodeHuffMCU_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_474)) begin
		DecodeHuffMCU_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_start"); $finish; end
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit24ii_504)) begin
		DecodeHuffMCU_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_505)) begin
		DecodeHuffMCU_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_start"); $finish; end
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit1ii_588)) begin
		DecodeHuffMCU_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_589)) begin
		DecodeHuffMCU_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_start"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_arg_out_buf <= 0;
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader46ii_367)) begin
		DecodeHuffMCU_arg_out_buf <= main_read_markersexiti_506_reg;
		if (start == 1'b0 && ^(main_read_markersexiti_506_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_arg_out_buf"); $finish; end
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexitii_398)) begin
		DecodeHuffMCU_arg_out_buf <= main_read_markersexiti_507_reg;
		if (start == 1'b0 && ^(main_read_markersexiti_507_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_arg_out_buf"); $finish; end
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	else if((cur_state == LEGUP_F_main_BB__652_441)) begin
		DecodeHuffMCU_arg_out_buf <= main_read_markersexiti_506_reg;
		if (start == 1'b0 && ^(main_read_markersexiti_506_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_arg_out_buf"); $finish; end
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	else if((cur_state == LEGUP_F_main_BB__683_473)) begin
		DecodeHuffMCU_arg_out_buf <= main_read_markersexiti_507_reg;
		if (start == 1'b0 && ^(main_read_markersexiti_507_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_arg_out_buf"); $finish; end
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit24ii_504)) begin
		DecodeHuffMCU_arg_out_buf <= main_read_markersexiti_508_reg;
		if (start == 1'b0 && ^(main_read_markersexiti_508_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_arg_out_buf"); $finish; end
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit1ii_588)) begin
		DecodeHuffMCU_arg_out_buf <= main_read_markersexiti_508_reg;
		if (start == 1'b0 && ^(main_read_markersexiti_508_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_arg_out_buf"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_arg_num_cmp <= 0;
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader46ii_367)) begin
		DecodeHuffMCU_arg_num_cmp <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_arg_num_cmp"); $finish; end
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexitii_398)) begin
		DecodeHuffMCU_arg_num_cmp <= 32'd1;
		if (start == 1'b0 && ^(32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_arg_num_cmp"); $finish; end
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	else if((cur_state == LEGUP_F_main_BB__652_441)) begin
		DecodeHuffMCU_arg_num_cmp <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_arg_num_cmp"); $finish; end
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	else if((cur_state == LEGUP_F_main_BB__683_473)) begin
		DecodeHuffMCU_arg_num_cmp <= 32'd1;
		if (start == 1'b0 && ^(32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_arg_num_cmp"); $finish; end
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit24ii_504)) begin
		DecodeHuffMCU_arg_num_cmp <= 32'd2;
		if (start == 1'b0 && ^(32'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_arg_num_cmp"); $finish; end
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	else if((cur_state == LEGUP_F_main_BB_decode_blockexit1ii_588)) begin
		DecodeHuffMCU_arg_num_cmp <= 32'd2;
		if (start == 1'b0 && ^(32'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_arg_num_cmp"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		DecodeHuffMCU_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	else if ((cur_state == LEGUP_function_call_399)) begin
		DecodeHuffMCU_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	else if ((cur_state == LEGUP_function_call_442)) begin
		DecodeHuffMCU_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	else if ((cur_state == LEGUP_function_call_474)) begin
		DecodeHuffMCU_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	else if ((cur_state == LEGUP_function_call_505)) begin
		DecodeHuffMCU_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	else /* if ((cur_state == LEGUP_function_call_589)) */ begin
		DecodeHuffMCU_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		DecodeHuffMCU_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	else if ((cur_state == LEGUP_function_call_399)) begin
		DecodeHuffMCU_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	else if ((cur_state == LEGUP_function_call_442)) begin
		DecodeHuffMCU_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	else if ((cur_state == LEGUP_function_call_474)) begin
		DecodeHuffMCU_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	else if ((cur_state == LEGUP_function_call_505)) begin
		DecodeHuffMCU_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	else /* if ((cur_state == LEGUP_function_call_589)) */ begin
		DecodeHuffMCU_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	DecodeHuffMCU_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	DecodeHuffMCU_finish_final = DecodeHuffMCU_finish_reg;
end
always @(posedge clk) begin
	if (reset)
		DecodeHuffMCU_finish_reg <= 0;
	else if((reset | (cur_state == LEGUP_F_main_BB_preheader46ii_367))) begin
		DecodeHuffMCU_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_finish_reg"); $finish; end
	end
	else if(DecodeHuffMCU_finish) begin
		DecodeHuffMCU_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB_decode_blockexitii_398))) begin
		DecodeHuffMCU_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_finish_reg"); $finish; end
	end
	else if(DecodeHuffMCU_finish) begin
		DecodeHuffMCU_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB__652_441))) begin
		DecodeHuffMCU_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_finish_reg"); $finish; end
	end
	else if(DecodeHuffMCU_finish) begin
		DecodeHuffMCU_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB__683_473))) begin
		DecodeHuffMCU_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_finish_reg"); $finish; end
	end
	else if(DecodeHuffMCU_finish) begin
		DecodeHuffMCU_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB_decode_blockexit24ii_504))) begin
		DecodeHuffMCU_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_finish_reg"); $finish; end
	end
	else if(DecodeHuffMCU_finish) begin
		DecodeHuffMCU_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB_decode_blockexit1ii_588))) begin
		DecodeHuffMCU_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_finish_reg"); $finish; end
	end
	else if(DecodeHuffMCU_finish) begin
		DecodeHuffMCU_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffMCU_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_start <= 0;
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexitiii_381)) begin
		ChenIDct_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_382)) begin
		ChenIDct_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_start"); $finish; end
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexiti8ii_455)) begin
		ChenIDct_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_456)) begin
		ChenIDct_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_start"); $finish; end
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexiti20ii_487)) begin
		ChenIDct_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_488)) begin
		ChenIDct_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_start"); $finish; end
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexiti32ii_518)) begin
		ChenIDct_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_519)) begin
		ChenIDct_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_start"); $finish; end
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexiti1ii_571)) begin
		ChenIDct_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_572)) begin
		ChenIDct_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_start"); $finish; end
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexiti2ii_602)) begin
		ChenIDct_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_603)) begin
		ChenIDct_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_start"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_arg_x <= 0;
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexitiii_381)) begin
		ChenIDct_arg_x <= main_preheader46lrphii_513_reg;
		if (start == 1'b0 && ^(main_preheader46lrphii_513_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_arg_x"); $finish; end
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexiti8ii_455)) begin
		ChenIDct_arg_x <= main_preheader49lrphii_644_reg;
		if (start == 1'b0 && ^(main_preheader49lrphii_644_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_arg_x"); $finish; end
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexiti20ii_487)) begin
		ChenIDct_arg_x <= main_preheader49lrphii_644_reg;
		if (start == 1'b0 && ^(main_preheader49lrphii_644_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_arg_x"); $finish; end
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexiti32ii_518)) begin
		ChenIDct_arg_x <= main_preheader49lrphii_644_reg;
		if (start == 1'b0 && ^(main_preheader49lrphii_644_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_arg_x"); $finish; end
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexiti1ii_571)) begin
		ChenIDct_arg_x <= main_preheader46lrphii_513_reg;
		if (start == 1'b0 && ^(main_preheader46lrphii_513_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_arg_x"); $finish; end
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexiti2ii_602)) begin
		ChenIDct_arg_x <= main_preheader46lrphii_513_reg;
		if (start == 1'b0 && ^(main_preheader46lrphii_513_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_arg_x"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_arg_y <= 0;
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexitiii_381)) begin
		ChenIDct_arg_y <= main_preheader46lrphii_515_reg;
		if (start == 1'b0 && ^(main_preheader46lrphii_515_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_arg_y"); $finish; end
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexiti8ii_455)) begin
		ChenIDct_arg_y <= main_652_scevgep119_reg;
		if (start == 1'b0 && ^(main_652_scevgep119_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_arg_y"); $finish; end
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexiti20ii_487)) begin
		ChenIDct_arg_y <= main_preheader49lrphii_646_reg;
		if (start == 1'b0 && ^(main_preheader49lrphii_646_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_arg_y"); $finish; end
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexiti32ii_518)) begin
		ChenIDct_arg_y <= main_preheader49lrphii_648_reg;
		if (start == 1'b0 && ^(main_preheader49lrphii_648_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_arg_y"); $finish; end
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexiti1ii_571)) begin
		ChenIDct_arg_y <= main_preheader46lrphii_517_reg;
		if (start == 1'b0 && ^(main_preheader46lrphii_517_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_arg_y"); $finish; end
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	else if((cur_state == LEGUP_F_main_BB_IQuantizeexiti2ii_602)) begin
		ChenIDct_arg_y <= main_preheader46lrphii_519_reg;
		if (start == 1'b0 && ^(main_preheader46lrphii_519_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_arg_y"); $finish; end
	end
end
always @(*) begin
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		ChenIDct_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	else if ((cur_state == LEGUP_function_call_456)) begin
		ChenIDct_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	else if ((cur_state == LEGUP_function_call_488)) begin
		ChenIDct_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	else if ((cur_state == LEGUP_function_call_519)) begin
		ChenIDct_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	else if ((cur_state == LEGUP_function_call_572)) begin
		ChenIDct_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	else /* if ((cur_state == LEGUP_function_call_603)) */ begin
		ChenIDct_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		ChenIDct_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	else if ((cur_state == LEGUP_function_call_456)) begin
		ChenIDct_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	else if ((cur_state == LEGUP_function_call_488)) begin
		ChenIDct_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	else if ((cur_state == LEGUP_function_call_519)) begin
		ChenIDct_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	else if ((cur_state == LEGUP_function_call_572)) begin
		ChenIDct_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	else /* if ((cur_state == LEGUP_function_call_603)) */ begin
		ChenIDct_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	ChenIDct_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	ChenIDct_finish_final = ChenIDct_finish_reg;
end
always @(posedge clk) begin
	if (reset)
		ChenIDct_finish_reg <= 0;
	else if((reset | (cur_state == LEGUP_F_main_BB_IQuantizeexitiii_381))) begin
		ChenIDct_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_finish_reg"); $finish; end
	end
	else if(ChenIDct_finish) begin
		ChenIDct_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB_IQuantizeexiti8ii_455))) begin
		ChenIDct_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_finish_reg"); $finish; end
	end
	else if(ChenIDct_finish) begin
		ChenIDct_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB_IQuantizeexiti20ii_487))) begin
		ChenIDct_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_finish_reg"); $finish; end
	end
	else if(ChenIDct_finish) begin
		ChenIDct_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB_IQuantizeexiti32ii_518))) begin
		ChenIDct_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_finish_reg"); $finish; end
	end
	else if(ChenIDct_finish) begin
		ChenIDct_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB_IQuantizeexiti1ii_571))) begin
		ChenIDct_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_finish_reg"); $finish; end
	end
	else if(ChenIDct_finish) begin
		ChenIDct_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB_IQuantizeexiti2ii_602))) begin
		ChenIDct_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_finish_reg"); $finish; end
	end
	else if(ChenIDct_finish) begin
		ChenIDct_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ChenIDct_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_start <= 0;
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_536)) begin
		Write4Blocks_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_537)) begin
		Write4Blocks_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_start"); $finish; end
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_538)) begin
		Write4Blocks_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_539)) begin
		Write4Blocks_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_start"); $finish; end
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_540)) begin
		Write4Blocks_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_start"); $finish; end
	end
	else if((cur_state == LEGUP_function_call_541)) begin
		Write4Blocks_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_start"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_arg_store1 <= 0;
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_536)) begin
		Write4Blocks_arg_store1 <= `TAG_g_rgb_buf_a;
		if (start == 1'b0 && ^(`TAG_g_rgb_buf_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store1"); $finish; end
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_538)) begin
		Write4Blocks_arg_store1 <= (`TAG_g_rgb_buf_a + (256 * 32'd1));
		if (start == 1'b0 && ^((`TAG_g_rgb_buf_a + (256 * 32'd1))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store1"); $finish; end
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_540)) begin
		Write4Blocks_arg_store1 <= (`TAG_g_rgb_buf_a + (256 * 32'd2));
		if (start == 1'b0 && ^((`TAG_g_rgb_buf_a + (256 * 32'd2))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_arg_store2 <= 0;
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_536)) begin
		Write4Blocks_arg_store2 <= (`TAG_g_rgb_buf_a + (768 * 32'd1));
		if (start == 1'b0 && ^((`TAG_g_rgb_buf_a + (768 * 32'd1))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store2"); $finish; end
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_538)) begin
		Write4Blocks_arg_store2 <= (`TAG_g_rgb_buf_a + ((768 * 32'd1) + (256 * 32'd1)));
		if (start == 1'b0 && ^((`TAG_g_rgb_buf_a + ((768 * 32'd1) + (256 * 32'd1)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store2"); $finish; end
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_540)) begin
		Write4Blocks_arg_store2 <= (`TAG_g_rgb_buf_a + ((768 * 32'd1) + (256 * 32'd2)));
		if (start == 1'b0 && ^((`TAG_g_rgb_buf_a + ((768 * 32'd1) + (256 * 32'd2)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store2"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_arg_store3 <= 0;
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_536)) begin
		Write4Blocks_arg_store3 <= (`TAG_g_rgb_buf_a + (768 * 32'd2));
		if (start == 1'b0 && ^((`TAG_g_rgb_buf_a + (768 * 32'd2))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store3"); $finish; end
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_538)) begin
		Write4Blocks_arg_store3 <= (`TAG_g_rgb_buf_a + ((768 * 32'd2) + (256 * 32'd1)));
		if (start == 1'b0 && ^((`TAG_g_rgb_buf_a + ((768 * 32'd2) + (256 * 32'd1)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store3"); $finish; end
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_540)) begin
		Write4Blocks_arg_store3 <= (`TAG_g_rgb_buf_a + ((768 * 32'd2) + (256 * 32'd2)));
		if (start == 1'b0 && ^((`TAG_g_rgb_buf_a + ((768 * 32'd2) + (256 * 32'd2)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store3"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_arg_store4 <= 0;
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_536)) begin
		Write4Blocks_arg_store4 <= (`TAG_g_rgb_buf_a + (768 * 32'd3));
		if (start == 1'b0 && ^((`TAG_g_rgb_buf_a + (768 * 32'd3))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store4"); $finish; end
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_538)) begin
		Write4Blocks_arg_store4 <= (`TAG_g_rgb_buf_a + ((768 * 32'd3) + (256 * 32'd1)));
		if (start == 1'b0 && ^((`TAG_g_rgb_buf_a + ((768 * 32'd3) + (256 * 32'd1)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store4"); $finish; end
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_540)) begin
		Write4Blocks_arg_store4 <= (`TAG_g_rgb_buf_a + ((768 * 32'd3) + (256 * 32'd2)));
		if (start == 1'b0 && ^((`TAG_g_rgb_buf_a + ((768 * 32'd3) + (256 * 32'd2)))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store4"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_arg_p_out_vpos <= 0;
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_536)) begin
		Write4Blocks_arg_p_out_vpos <= `TAG_g_OutData_comp_vpos_a;
		if (start == 1'b0 && ^(`TAG_g_OutData_comp_vpos_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_vpos"); $finish; end
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_538)) begin
		Write4Blocks_arg_p_out_vpos <= (`TAG_g_OutData_comp_vpos_a + (4 * 32'd1));
		if (start == 1'b0 && ^((`TAG_g_OutData_comp_vpos_a + (4 * 32'd1))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_vpos"); $finish; end
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_540)) begin
		Write4Blocks_arg_p_out_vpos <= (`TAG_g_OutData_comp_vpos_a + (4 * 32'd2));
		if (start == 1'b0 && ^((`TAG_g_OutData_comp_vpos_a + (4 * 32'd2))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_vpos"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_arg_p_out_hpos <= 0;
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_536)) begin
		Write4Blocks_arg_p_out_hpos <= `TAG_g_OutData_comp_hpos_a;
		if (start == 1'b0 && ^(`TAG_g_OutData_comp_hpos_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_hpos"); $finish; end
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_538)) begin
		Write4Blocks_arg_p_out_hpos <= (`TAG_g_OutData_comp_hpos_a + (4 * 32'd1));
		if (start == 1'b0 && ^((`TAG_g_OutData_comp_hpos_a + (4 * 32'd1))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_hpos"); $finish; end
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_540)) begin
		Write4Blocks_arg_p_out_hpos <= (`TAG_g_OutData_comp_hpos_a + (4 * 32'd2));
		if (start == 1'b0 && ^((`TAG_g_OutData_comp_hpos_a + (4 * 32'd2))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_hpos"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_arg_p_out_buf <= 0;
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_536)) begin
		Write4Blocks_arg_p_out_buf <= `TAG_g_OutData_comp_buf_a;
		if (start == 1'b0 && ^(`TAG_g_OutData_comp_buf_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_buf"); $finish; end
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_538)) begin
		Write4Blocks_arg_p_out_buf <= (`TAG_g_OutData_comp_buf_a + (5310 * 32'd1));
		if (start == 1'b0 && ^((`TAG_g_OutData_comp_buf_a + (5310 * 32'd1))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_buf"); $finish; end
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	else if((cur_state == LEGUP_F_main_BB_preheader48ii_540)) begin
		Write4Blocks_arg_p_out_buf <= (`TAG_g_OutData_comp_buf_a + (5310 * 32'd2));
		if (start == 1'b0 && ^((`TAG_g_OutData_comp_buf_a + (5310 * 32'd2))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_buf"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		Write4Blocks_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	else if ((cur_state == LEGUP_function_call_539)) begin
		Write4Blocks_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	else /* if ((cur_state == LEGUP_function_call_541)) */ begin
		Write4Blocks_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		Write4Blocks_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	else if ((cur_state == LEGUP_function_call_539)) begin
		Write4Blocks_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	else /* if ((cur_state == LEGUP_function_call_541)) */ begin
		Write4Blocks_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	Write4Blocks_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	Write4Blocks_finish_final = Write4Blocks_finish_reg;
end
always @(posedge clk) begin
	if (reset)
		Write4Blocks_finish_reg <= 0;
	else if((reset | (cur_state == LEGUP_F_main_BB_preheader48ii_536))) begin
		Write4Blocks_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_finish_reg"); $finish; end
	end
	else if(Write4Blocks_finish) begin
		Write4Blocks_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB_preheader48ii_538))) begin
		Write4Blocks_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_finish_reg"); $finish; end
	end
	else if(Write4Blocks_finish) begin
		Write4Blocks_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_finish_reg"); $finish; end
	end
	else if((reset | (cur_state == LEGUP_F_main_BB_preheader48ii_540))) begin
		Write4Blocks_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_finish_reg"); $finish; end
	end
	else if(Write4Blocks_finish) begin
		Write4Blocks_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_finish_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %499 = sdiv i32 %498, 8*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_314)) begin
		main_signed_divide_32_0_op0 = main_read_markersexiti_498;
	end
	/* main: %read_markers.exit.i*/
	/*   %494 = sdiv i32 %493, 8*/
	else /* if ((cur_state == LEGUP_F_main_BB_read_markersexiti_315)) */ begin
		main_signed_divide_32_0_op0 = main_read_markersexiti_493_reg;
	end
end
always @(*) begin
	/* main: %read_markers.exit.i*/
	/*   %499 = sdiv i32 %498, 8*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_314)) begin
		main_signed_divide_32_0_op1 = 32'd8;
	end
	/* main: %read_markers.exit.i*/
	/*   %494 = sdiv i32 %493, 8*/
	else /* if ((cur_state == LEGUP_F_main_BB_read_markersexiti_315)) */ begin
		main_signed_divide_32_0_op1 = 32'd8;
	end
end
always @(*) begin
	lpm_divide_main_read_markersexiti_494_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_divide_main_read_markersexiti_494_out = lpm_divide_main_read_markersexiti_494_temp_out;
end
always @(*) begin
	main_signed_divide_32_0 = lpm_divide_main_read_markersexiti_494_out;
end
always @(*) begin
	lpm_divide_main_read_markersexiti_499_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end


//voter


//port drive
always @(posedge clk) begin
	if (reset)
		finish <= 0;
	else if((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %872*/
	/*   ret i32 %873*/
	else if((cur_state == LEGUP_F_main_BB__872_663)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_enable_a = huff_make_dhuff_tb_memory_controller_enable_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_enable_a = huff_make_dhuff_tb_memory_controller_enable_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_enable_a = huff_make_dhuff_tb_memory_controller_enable_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_enable_a = huff_make_dhuff_tb_memory_controller_enable_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_enable_a = huff_make_dhuff_tb_memory_controller_enable_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_enable_a = huff_make_dhuff_tb_memory_controller_enable_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_enable_a = huff_make_dhuff_tb_memory_controller_enable_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_enable_a = huff_make_dhuff_tb_memory_controller_enable_a;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_enable_a = DecodeHuffMCU_memory_controller_enable_a;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_enable_a = DecodeHuffMCU_memory_controller_enable_a;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_enable_a = ChenIDct_memory_controller_enable_a;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_enable_a = ChenIDct_memory_controller_enable_a;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_enable_a = DecodeHuffMCU_memory_controller_enable_a;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_enable_a = DecodeHuffMCU_memory_controller_enable_a;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_enable_a = DecodeHuffMCU_memory_controller_enable_a;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_enable_a = DecodeHuffMCU_memory_controller_enable_a;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_enable_a = ChenIDct_memory_controller_enable_a;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_enable_a = ChenIDct_memory_controller_enable_a;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_enable_a = DecodeHuffMCU_memory_controller_enable_a;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_enable_a = DecodeHuffMCU_memory_controller_enable_a;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_enable_a = ChenIDct_memory_controller_enable_a;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_enable_a = ChenIDct_memory_controller_enable_a;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_enable_a = DecodeHuffMCU_memory_controller_enable_a;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_enable_a = DecodeHuffMCU_memory_controller_enable_a;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_enable_a = ChenIDct_memory_controller_enable_a;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_enable_a = ChenIDct_memory_controller_enable_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_enable_a = Write4Blocks_memory_controller_enable_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_enable_a = Write4Blocks_memory_controller_enable_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_enable_a = Write4Blocks_memory_controller_enable_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_enable_a = Write4Blocks_memory_controller_enable_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_enable_a = Write4Blocks_memory_controller_enable_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_enable_a = Write4Blocks_memory_controller_enable_a;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_enable_a = ChenIDct_memory_controller_enable_a;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_enable_a = ChenIDct_memory_controller_enable_a;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_enable_a = DecodeHuffMCU_memory_controller_enable_a;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_enable_a = DecodeHuffMCU_memory_controller_enable_a;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_enable_a = ChenIDct_memory_controller_enable_a;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_enable_a = ChenIDct_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i8 %2, i8* %c.03.i, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__1_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %4 = load i8* getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 0), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i.i*/
	/*   %.sink.i.i.i = load i8* %20, align 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %28*/
	/*   %29 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %28*/
	/*   store i32 %30, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_38)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %32*/
	/*   %38 = load i8* %33, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_43)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %32*/
	/*   %45 = load i8* %42, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_44)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %32*/
	/*   store i16 %51, i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_46)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %32*/
	/*   %53 = load i8* %48, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_47)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %32*/
	/*   %60 = load i8* %56, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_50)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %78*/
	/*   %79 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__78_59)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %78*/
	/*   store i32 %80, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__78_61)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %87*/
	/*   %88 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__87_70)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %90*/
	/*   %91 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__90_73)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %90*/
	/*   store i32 %92, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__90_75)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %104 = load i8* %ReadBuf.1, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_86)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %108 = load i8* %scevgep197, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_92)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %135*/
	/*   %136 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_103)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %135*/
	/*   store i32 %137, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_105)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %150*/
	/*   %151 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__150_115)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %150*/
	/*   store i32 %152, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__150_117)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.us-lcssa4.i.i*/
	/*   %175 = load i8* %170, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa4ii_135)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %184*/
	/*   %185 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__184_138)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %184*/
	/*   store i32 %186, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__184_140)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.i.i*/
	/*   %197 = load i8* %ReadBuf.3, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph10iii_149)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %209*/
	/*   %212 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_159)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %209*/
	/*   store i32 %213, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_161)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %225*/
	/*   %226 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_163)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %225*/
	/*   store i32 %227, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_165)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %233*/
	/*   %234 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__233_170)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %233*/
	/*   store i32 %235, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__233_172)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %246*/
	/*   %252 = load i8* %247, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__246_185)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph5.i.i.i*/
	/*   %268 = load i8* %ReadBuf.5, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph5iii_194)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   %288 = load i8* %267, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_205)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   %292 = load i8* %287, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_208)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %293, i32* %294, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_210)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   %302 = load i8* %296, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_214)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %303, i32* %304, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_216)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   %312 = load i8* %306, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_220)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %313, i32* %314, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_222)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   %322 = load i8* %316, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_226)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %323, i32* %324, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_228)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   %332 = load i8* %326, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_232)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %333, i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_234)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   %342 = load i8* %336, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_238)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %343, i32* %344, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_240)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   %352 = load i8* %346, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_244)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %353, i32* %354, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_246)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   %362 = load i8* %356, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_250)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %363, i32* %364, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_252)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %418*/
	/*   store i32 %421, i32* %scevgep181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__418_267)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i13.i.i*/
	/*   %451 = load i8* %447, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi13ii_283)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %465*/
	/*   %466 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_292)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %465*/
	/*   store i32 %467, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_294)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %..split_crit_edge.i.i.i*/
	/*   %481 = load i8* %scevgep187, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_303)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   %491 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_312)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %500, i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_346)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %503, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_352)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %505, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_358)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* %506, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_359)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_360)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_361)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_362)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %524*/
	/*   store i32 %527, i32* %.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_373)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %538*/
	/*   %540 = load i32* %mptr.01.i1.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__538_384)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %538*/
	/*   store i32 %541, i32* %mptr.01.i1.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__538_386)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %decode_block.exit.2.i.i*/
	/*   %553 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_401)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %581*/
	/*   store i32 %r.0.i.i.i, i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_410)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %581*/
	/*   store i32 %b.0.i.i.i, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_411)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %583 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_413)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %.pre.i.i = load i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_414)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %626*/
	/*   store i8 %630, i8* %scevgep78, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__626_427)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %654*/
	/*   store i32 %657, i32* %.01.i.i3.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__654_447)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %668*/
	/*   %670 = load i32* %mptr.01.i1.i9.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__668_458)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %668*/
	/*   store i32 %671, i32* %mptr.01.i1.i9.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__668_460)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %684*/
	/*   store i32 %687, i32* %.01.i.i15.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__684_479)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %698*/
	/*   %700 = load i32* %mptr.01.i1.i21.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_490)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %698*/
	/*   store i32 %701, i32* %mptr.01.i1.i21.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_492)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %712*/
	/*   store i32 %715, i32* %.01.i.i27.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__712_510)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %726*/
	/*   %728 = load i32* %mptr.01.i1.i33.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__726_521)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %726*/
	/*   store i32 %729, i32* %mptr.01.i1.i33.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__726_523)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %741*/
	/*   %743 = load i32* %scevgep157, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_547)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %771*/
	/*   store i32 %r.0.i39.i.i, i32* %scevgep155, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__771_556)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %771*/
	/*   store i32 %b.0.i43.i.i, i32* %scevgep153, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__771_557)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %782*/
	/*   %784 = load i32* %mptr.02.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_567)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %782*/
	/*   store i32 %786, i32* %mptr.02.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_569)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %794 = load i32* %mptr.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_579)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %798*/
	/*   store i32 255, i32* %mptr.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__798_583)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %799*/
	/*   store i32 0, i32* %mptr.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__799_585)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %802*/
	/*   %805 = load i32* %804, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__802_592)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %810*/
	/*   %812 = load i32* %mptr.02.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__810_598)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %810*/
	/*   store i32 %814, i32* %mptr.02.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__810_600)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %822 = load i32* %mptr.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_610)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %826*/
	/*   store i32 255, i32* %mptr.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__826_614)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %827*/
	/*   store i32 0, i32* %mptr.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__827_616)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %decode_start.exit.i*/
	/*   %830 = load i8* %scevgep18, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_decode_startexiti_620)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %838*/
	/*   %839 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__838_629)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %838*/
	/*   store i32 %840, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__838_631)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.16.i*/
	/*   %846 = load i8* %scevgep15, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheader16i_638)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.27.i*/
	/*   %854 = load i8* %scevgep12, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheader27i_647)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %jpeg2bmp_main.exit*/
	/*   %866 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_jpeg2bmp_mainexit_656)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %872*/
	/*   %873 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__872_661)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_address_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_address_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_address_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_address_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_address_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_address_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_address_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_address_a;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_a;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_a;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_a;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_a;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_a;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_a;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_a;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_a;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_a;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_a;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_a;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_a;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_a;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_a;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_a;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_a;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_a;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Write4Blocks_memory_controller_address_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Write4Blocks_memory_controller_address_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Write4Blocks_memory_controller_address_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Write4Blocks_memory_controller_address_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Write4Blocks_memory_controller_address_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Write4Blocks_memory_controller_address_a;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_a;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_a;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_a;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_a;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_a;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %1*/
	/*   store i8 %2, i8* %c.03.i, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__1_4)) begin
		memory_controller_address_a = main_1_c03i_reg;
	end
	/* main: %.preheader.i*/
	/*   %4 = load i8* getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 0), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_6)) begin
		memory_controller_address_a = `TAG_g_JpegFileBuf_a;
	end
	/* main: %.lr.ph.i.i.i*/
	/*   %.sink.i.i.i = load i8* %20, align 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_26)) begin
		memory_controller_address_a = main_lrphiii_20_reg;
	end
	/* main: %28*/
	/*   %29 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_36)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %28*/
	/*   store i32 %30, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_38)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %32*/
	/*   %38 = load i8* %33, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_43)) begin
		memory_controller_address_a = main_32_33;
	end
	/* main: %32*/
	/*   %45 = load i8* %42, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_44)) begin
		memory_controller_address_a = main_32_42_reg;
	end
	/* main: %32*/
	/*   store i16 %51, i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_46)) begin
		memory_controller_address_a = `TAG_g_p_jinfo_image_height_a;
	end
	/* main: %32*/
	/*   %53 = load i8* %48, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_47)) begin
		memory_controller_address_a = main_32_48_reg;
	end
	/* main: %32*/
	/*   %60 = load i8* %56, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_50)) begin
		memory_controller_address_a = main_32_56_reg;
	end
	/* main: %78*/
	/*   %79 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__78_59)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %78*/
	/*   store i32 %80, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__78_61)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %87*/
	/*   %88 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__87_70)) begin
		memory_controller_address_a = `TAG_g_p_jinfo_image_width_a;
	end
	/* main: %90*/
	/*   %91 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__90_73)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %90*/
	/*   store i32 %92, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__90_75)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %104 = load i8* %ReadBuf.1, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_86)) begin
		memory_controller_address_a = main_lrphi2ii_ReadBuf1;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %108 = load i8* %scevgep197, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_92)) begin
		memory_controller_address_a = main_lrphi2ii_scevgep197_reg;
	end
	/* main: %135*/
	/*   %136 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_103)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %135*/
	/*   store i32 %137, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_105)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %150*/
	/*   %151 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__150_115)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %150*/
	/*   store i32 %152, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__150_117)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %.us-lcssa4.i.i*/
	/*   %175 = load i8* %170, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa4ii_135)) begin
		memory_controller_address_a = main_uslcssa4ii_170;
	end
	/* main: %184*/
	/*   %185 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__184_138)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %184*/
	/*   store i32 %186, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__184_140)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %.lr.ph10.i.i.i*/
	/*   %197 = load i8* %ReadBuf.3, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph10iii_149)) begin
		memory_controller_address_a = main_lrph10iii_ReadBuf3;
	end
	/* main: %209*/
	/*   %212 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_159)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %209*/
	/*   store i32 %213, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_161)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %225*/
	/*   %226 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_163)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %225*/
	/*   store i32 %227, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_165)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %233*/
	/*   %234 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__233_170)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %233*/
	/*   store i32 %235, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__233_172)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %246*/
	/*   %252 = load i8* %247, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__246_185)) begin
		memory_controller_address_a = main_246_247;
	end
	/* main: %.lr.ph5.i.i.i*/
	/*   %268 = load i8* %ReadBuf.5, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph5iii_194)) begin
		memory_controller_address_a = main_lrph5iii_ReadBuf5_reg;
	end
	/* main: %286*/
	/*   %288 = load i8* %267, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_205)) begin
		memory_controller_address_a = main_lrph5iii_267_reg;
	end
	/* main: %286*/
	/*   %292 = load i8* %287, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_208)) begin
		memory_controller_address_a = main_286_287_reg;
	end
	/* main: %286*/
	/*   store i32 %293, i32* %294, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_210)) begin
		memory_controller_address_a = main_286_294_reg;
	end
	/* main: %286*/
	/*   %302 = load i8* %296, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_214)) begin
		memory_controller_address_a = main_286_296_reg;
	end
	/* main: %286*/
	/*   store i32 %303, i32* %304, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_216)) begin
		memory_controller_address_a = main_286_304_reg;
	end
	/* main: %286*/
	/*   %312 = load i8* %306, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_220)) begin
		memory_controller_address_a = main_286_306_reg;
	end
	/* main: %286*/
	/*   store i32 %313, i32* %314, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_222)) begin
		memory_controller_address_a = main_286_314_reg;
	end
	/* main: %286*/
	/*   %322 = load i8* %316, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_226)) begin
		memory_controller_address_a = main_286_316_reg;
	end
	/* main: %286*/
	/*   store i32 %323, i32* %324, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_228)) begin
		memory_controller_address_a = main_286_324_reg;
	end
	/* main: %286*/
	/*   %332 = load i8* %326, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_232)) begin
		memory_controller_address_a = main_286_326_reg;
	end
	/* main: %286*/
	/*   store i32 %333, i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_234)) begin
		memory_controller_address_a = main_286_334_reg;
	end
	/* main: %286*/
	/*   %342 = load i8* %336, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_238)) begin
		memory_controller_address_a = main_286_336_reg;
	end
	/* main: %286*/
	/*   store i32 %343, i32* %344, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_240)) begin
		memory_controller_address_a = main_286_344_reg;
	end
	/* main: %286*/
	/*   %352 = load i8* %346, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_244)) begin
		memory_controller_address_a = main_286_346_reg;
	end
	/* main: %286*/
	/*   store i32 %353, i32* %354, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_246)) begin
		memory_controller_address_a = main_286_354_reg;
	end
	/* main: %286*/
	/*   %362 = load i8* %356, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_250)) begin
		memory_controller_address_a = main_286_356_reg;
	end
	/* main: %286*/
	/*   store i32 %363, i32* %364, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_252)) begin
		memory_controller_address_a = main_286_364_reg;
	end
	/* main: %418*/
	/*   store i32 %421, i32* %scevgep181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__418_267)) begin
		memory_controller_address_a = main_418_scevgep181_reg;
	end
	/* main: %.lr.ph.i13.i.i*/
	/*   %451 = load i8* %447, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi13ii_283)) begin
		memory_controller_address_a = main_lrphi13ii_447_reg;
	end
	/* main: %465*/
	/*   %466 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_292)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %465*/
	/*   store i32 %467, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_294)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %..split_crit_edge.i.i.i*/
	/*   %481 = load i8* %scevgep187, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_303)) begin
		memory_controller_address_a = main_split_crit_edgeiii_scevgep187;
	end
	/* main: %read_markers.exit.i*/
	/*   %491 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_312)) begin
		memory_controller_address_a = `TAG_g_p_jinfo_image_height_a;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %500, i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_346)) begin
		memory_controller_address_a = `TAG_g_p_jinfo_MCUWidth_a;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %503, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_352)) begin
		memory_controller_address_a = (`TAG_g_p_jinfo_dc_dhuff_tbl_ml_a + (4 * 32'd1));
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %505, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_358)) begin
		memory_controller_address_a = (`TAG_g_p_jinfo_ac_dhuff_tbl_ml_a + (4 * 32'd1));
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* %506, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_359)) begin
		memory_controller_address_a = main_read_markersexiti_506_reg;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_360)) begin
		memory_controller_address_a = main_read_markersexiti_508_reg;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_361)) begin
		memory_controller_address_a = `TAG_g_OutData_comp_hpos_a;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_362)) begin
		memory_controller_address_a = (`TAG_g_OutData_comp_hpos_a + (4 * 32'd1));
	end
	/* main: %524*/
	/*   store i32 %527, i32* %.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_373)) begin
		memory_controller_address_a = main_524_01iiii_reg;
	end
	/* main: %538*/
	/*   %540 = load i32* %mptr.01.i1.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__538_384)) begin
		memory_controller_address_a = main_538_mptr01i1iii;
	end
	/* main: %538*/
	/*   store i32 %541, i32* %mptr.01.i1.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__538_386)) begin
		memory_controller_address_a = main_538_mptr01i1iii_reg;
	end
	/* main: %decode_block.exit.2.i.i*/
	/*   %553 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_401)) begin
		memory_controller_address_a = main_decode_blockexit2ii_scevgep70;
	end
	/* main: %581*/
	/*   store i32 %r.0.i.i.i, i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_410)) begin
		memory_controller_address_a = main_decode_blockexit2ii_scevgep68_reg;
	end
	/* main: %581*/
	/*   store i32 %b.0.i.i.i, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_411)) begin
		memory_controller_address_a = main_decode_blockexit2ii_scevgep66_reg;
	end
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %583 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_413)) begin
		memory_controller_address_a = `TAG_g_p_jinfo_image_width_a;
	end
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %.pre.i.i = load i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_414)) begin
		memory_controller_address_a = `TAG_g_OutData_comp_hpos_a;
	end
	/* main: %626*/
	/*   store i8 %630, i8* %scevgep78, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__626_427)) begin
		memory_controller_address_a = main_626_scevgep78_reg;
	end
	/* main: %654*/
	/*   store i32 %657, i32* %.01.i.i3.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__654_447)) begin
		memory_controller_address_a = main_654_01ii3ii_reg;
	end
	/* main: %668*/
	/*   %670 = load i32* %mptr.01.i1.i9.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__668_458)) begin
		memory_controller_address_a = main_668_mptr01i1i9ii;
	end
	/* main: %668*/
	/*   store i32 %671, i32* %mptr.01.i1.i9.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__668_460)) begin
		memory_controller_address_a = main_668_mptr01i1i9ii_reg;
	end
	/* main: %684*/
	/*   store i32 %687, i32* %.01.i.i15.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__684_479)) begin
		memory_controller_address_a = main_684_01ii15ii_reg;
	end
	/* main: %698*/
	/*   %700 = load i32* %mptr.01.i1.i21.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_490)) begin
		memory_controller_address_a = main_698_mptr01i1i21ii;
	end
	/* main: %698*/
	/*   store i32 %701, i32* %mptr.01.i1.i21.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_492)) begin
		memory_controller_address_a = main_698_mptr01i1i21ii_reg;
	end
	/* main: %712*/
	/*   store i32 %715, i32* %.01.i.i27.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__712_510)) begin
		memory_controller_address_a = main_712_01ii27ii_reg;
	end
	/* main: %726*/
	/*   %728 = load i32* %mptr.01.i1.i33.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__726_521)) begin
		memory_controller_address_a = main_726_mptr01i1i33ii;
	end
	/* main: %726*/
	/*   store i32 %729, i32* %mptr.01.i1.i33.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__726_523)) begin
		memory_controller_address_a = main_726_mptr01i1i33ii_reg;
	end
	/* main: %741*/
	/*   %743 = load i32* %scevgep157, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_547)) begin
		memory_controller_address_a = main_741_scevgep157;
	end
	/* main: %771*/
	/*   store i32 %r.0.i39.i.i, i32* %scevgep155, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__771_556)) begin
		memory_controller_address_a = main_741_scevgep155_reg;
	end
	/* main: %771*/
	/*   store i32 %b.0.i43.i.i, i32* %scevgep153, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__771_557)) begin
		memory_controller_address_a = main_741_scevgep153_reg;
	end
	/* main: %782*/
	/*   %784 = load i32* %mptr.02.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_567)) begin
		memory_controller_address_a = main_782_mptr02ii1ii;
	end
	/* main: %782*/
	/*   store i32 %786, i32* %mptr.02.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_569)) begin
		memory_controller_address_a = main_782_mptr02ii1ii_reg;
	end
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %794 = load i32* %mptr.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_579)) begin
		memory_controller_address_a = main_PostshiftIDctMatrixexiti1ii_mptr01ii1ii;
	end
	/* main: %798*/
	/*   store i32 255, i32* %mptr.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__798_583)) begin
		memory_controller_address_a = main_PostshiftIDctMatrixexiti1ii_mptr01ii1ii_reg;
	end
	/* main: %799*/
	/*   store i32 0, i32* %mptr.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__799_585)) begin
		memory_controller_address_a = main_PostshiftIDctMatrixexiti1ii_mptr01ii1ii_reg;
	end
	/* main: %802*/
	/*   %805 = load i32* %804, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__802_592)) begin
		memory_controller_address_a = main_802_804;
	end
	/* main: %810*/
	/*   %812 = load i32* %mptr.02.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__810_598)) begin
		memory_controller_address_a = main_810_mptr02ii2ii;
	end
	/* main: %810*/
	/*   store i32 %814, i32* %mptr.02.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__810_600)) begin
		memory_controller_address_a = main_810_mptr02ii2ii_reg;
	end
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %822 = load i32* %mptr.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_610)) begin
		memory_controller_address_a = main_PostshiftIDctMatrixexiti2ii_mptr01ii2ii;
	end
	/* main: %826*/
	/*   store i32 255, i32* %mptr.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__826_614)) begin
		memory_controller_address_a = main_PostshiftIDctMatrixexiti2ii_mptr01ii2ii_reg;
	end
	/* main: %827*/
	/*   store i32 0, i32* %mptr.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__827_616)) begin
		memory_controller_address_a = main_PostshiftIDctMatrixexiti2ii_mptr01ii2ii_reg;
	end
	/* main: %decode_start.exit.i*/
	/*   %830 = load i8* %scevgep18, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_decode_startexiti_620)) begin
		memory_controller_address_a = main_decode_startexiti_scevgep18;
	end
	/* main: %838*/
	/*   %839 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__838_629)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %838*/
	/*   store i32 %840, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__838_631)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %.preheader.16.i*/
	/*   %846 = load i8* %scevgep15, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheader16i_638)) begin
		memory_controller_address_a = main_preheader16i_scevgep15;
	end
	/* main: %.preheader.27.i*/
	/*   %854 = load i8* %scevgep12, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheader27i_647)) begin
		memory_controller_address_a = main_preheader27i_scevgep12;
	end
	/* main: %jpeg2bmp_main.exit*/
	/*   %866 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_jpeg2bmp_mainexit_656)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
	/* main: %872*/
	/*   %873 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__872_661)) begin
		memory_controller_address_a = `TAG_g_main_result_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_write_enable_a = huff_make_dhuff_tb_memory_controller_write_enable_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_write_enable_a = huff_make_dhuff_tb_memory_controller_write_enable_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_write_enable_a = huff_make_dhuff_tb_memory_controller_write_enable_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_write_enable_a = huff_make_dhuff_tb_memory_controller_write_enable_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_write_enable_a = huff_make_dhuff_tb_memory_controller_write_enable_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_write_enable_a = huff_make_dhuff_tb_memory_controller_write_enable_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_write_enable_a = huff_make_dhuff_tb_memory_controller_write_enable_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_write_enable_a = huff_make_dhuff_tb_memory_controller_write_enable_a;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_write_enable_a = DecodeHuffMCU_memory_controller_write_enable_a;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_write_enable_a = DecodeHuffMCU_memory_controller_write_enable_a;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_write_enable_a = ChenIDct_memory_controller_write_enable_a;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_write_enable_a = ChenIDct_memory_controller_write_enable_a;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_write_enable_a = DecodeHuffMCU_memory_controller_write_enable_a;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_write_enable_a = DecodeHuffMCU_memory_controller_write_enable_a;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_write_enable_a = DecodeHuffMCU_memory_controller_write_enable_a;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_write_enable_a = DecodeHuffMCU_memory_controller_write_enable_a;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_write_enable_a = ChenIDct_memory_controller_write_enable_a;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_write_enable_a = ChenIDct_memory_controller_write_enable_a;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_write_enable_a = DecodeHuffMCU_memory_controller_write_enable_a;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_write_enable_a = DecodeHuffMCU_memory_controller_write_enable_a;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_write_enable_a = ChenIDct_memory_controller_write_enable_a;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_write_enable_a = ChenIDct_memory_controller_write_enable_a;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_write_enable_a = DecodeHuffMCU_memory_controller_write_enable_a;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_write_enable_a = DecodeHuffMCU_memory_controller_write_enable_a;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_write_enable_a = ChenIDct_memory_controller_write_enable_a;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_write_enable_a = ChenIDct_memory_controller_write_enable_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_write_enable_a = Write4Blocks_memory_controller_write_enable_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_write_enable_a = Write4Blocks_memory_controller_write_enable_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_write_enable_a = Write4Blocks_memory_controller_write_enable_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_write_enable_a = Write4Blocks_memory_controller_write_enable_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_write_enable_a = Write4Blocks_memory_controller_write_enable_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_write_enable_a = Write4Blocks_memory_controller_write_enable_a;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_write_enable_a = ChenIDct_memory_controller_write_enable_a;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_write_enable_a = ChenIDct_memory_controller_write_enable_a;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_write_enable_a = DecodeHuffMCU_memory_controller_write_enable_a;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_write_enable_a = DecodeHuffMCU_memory_controller_write_enable_a;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_write_enable_a = ChenIDct_memory_controller_write_enable_a;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_write_enable_a = ChenIDct_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i8 %2, i8* %c.03.i, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__1_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %4 = load i8* getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 0), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.i.i*/
	/*   %.sink.i.i.i = load i8* %20, align 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_26)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %28*/
	/*   %29 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_36)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %28*/
	/*   store i32 %30, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_38)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %32*/
	/*   %38 = load i8* %33, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_43)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %32*/
	/*   %45 = load i8* %42, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_44)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %32*/
	/*   store i16 %51, i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_46)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %32*/
	/*   %53 = load i8* %48, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_47)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %32*/
	/*   %60 = load i8* %56, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_50)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %78*/
	/*   %79 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__78_59)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %78*/
	/*   store i32 %80, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__78_61)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %87*/
	/*   %88 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__87_70)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %90*/
	/*   %91 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__90_73)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %90*/
	/*   store i32 %92, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__90_75)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %104 = load i8* %ReadBuf.1, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_86)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %108 = load i8* %scevgep197, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_92)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %135*/
	/*   %136 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_103)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %135*/
	/*   store i32 %137, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_105)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %150*/
	/*   %151 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__150_115)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %150*/
	/*   store i32 %152, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__150_117)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.us-lcssa4.i.i*/
	/*   %175 = load i8* %170, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa4ii_135)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %184*/
	/*   %185 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__184_138)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %184*/
	/*   store i32 %186, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__184_140)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph10.i.i.i*/
	/*   %197 = load i8* %ReadBuf.3, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph10iii_149)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %209*/
	/*   %212 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_159)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %209*/
	/*   store i32 %213, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_161)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %225*/
	/*   %226 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_163)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %225*/
	/*   store i32 %227, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_165)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %233*/
	/*   %234 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__233_170)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %233*/
	/*   store i32 %235, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__233_172)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %246*/
	/*   %252 = load i8* %247, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__246_185)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph5.i.i.i*/
	/*   %268 = load i8* %ReadBuf.5, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph5iii_194)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %286*/
	/*   %288 = load i8* %267, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_205)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %286*/
	/*   %292 = load i8* %287, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_208)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %286*/
	/*   store i32 %293, i32* %294, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_210)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   %302 = load i8* %296, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_214)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %286*/
	/*   store i32 %303, i32* %304, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_216)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   %312 = load i8* %306, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_220)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %286*/
	/*   store i32 %313, i32* %314, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_222)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   %322 = load i8* %316, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_226)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %286*/
	/*   store i32 %323, i32* %324, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_228)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   %332 = load i8* %326, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_232)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %286*/
	/*   store i32 %333, i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_234)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   %342 = load i8* %336, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_238)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %286*/
	/*   store i32 %343, i32* %344, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_240)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   %352 = load i8* %346, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_244)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %286*/
	/*   store i32 %353, i32* %354, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_246)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %286*/
	/*   %362 = load i8* %356, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_250)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %286*/
	/*   store i32 %363, i32* %364, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_252)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %418*/
	/*   store i32 %421, i32* %scevgep181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__418_267)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i13.i.i*/
	/*   %451 = load i8* %447, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi13ii_283)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %465*/
	/*   %466 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_292)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %465*/
	/*   store i32 %467, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_294)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %..split_crit_edge.i.i.i*/
	/*   %481 = load i8* %scevgep187, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_303)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %read_markers.exit.i*/
	/*   %491 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_312)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %500, i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_346)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %503, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_352)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %505, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_358)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* %506, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_359)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_360)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_361)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_362)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %524*/
	/*   store i32 %527, i32* %.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_373)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %538*/
	/*   %540 = load i32* %mptr.01.i1.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__538_384)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %538*/
	/*   store i32 %541, i32* %mptr.01.i1.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__538_386)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %decode_block.exit.2.i.i*/
	/*   %553 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_401)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %581*/
	/*   store i32 %r.0.i.i.i, i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_410)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %581*/
	/*   store i32 %b.0.i.i.i, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_411)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %583 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_413)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %.pre.i.i = load i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_414)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %626*/
	/*   store i8 %630, i8* %scevgep78, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__626_427)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %654*/
	/*   store i32 %657, i32* %.01.i.i3.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__654_447)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %668*/
	/*   %670 = load i32* %mptr.01.i1.i9.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__668_458)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %668*/
	/*   store i32 %671, i32* %mptr.01.i1.i9.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__668_460)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %684*/
	/*   store i32 %687, i32* %.01.i.i15.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__684_479)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %698*/
	/*   %700 = load i32* %mptr.01.i1.i21.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_490)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %698*/
	/*   store i32 %701, i32* %mptr.01.i1.i21.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_492)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %712*/
	/*   store i32 %715, i32* %.01.i.i27.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__712_510)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %726*/
	/*   %728 = load i32* %mptr.01.i1.i33.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__726_521)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %726*/
	/*   store i32 %729, i32* %mptr.01.i1.i33.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__726_523)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %741*/
	/*   %743 = load i32* %scevgep157, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_547)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %771*/
	/*   store i32 %r.0.i39.i.i, i32* %scevgep155, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__771_556)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %771*/
	/*   store i32 %b.0.i43.i.i, i32* %scevgep153, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__771_557)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %782*/
	/*   %784 = load i32* %mptr.02.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_567)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %782*/
	/*   store i32 %786, i32* %mptr.02.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_569)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %794 = load i32* %mptr.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_579)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %798*/
	/*   store i32 255, i32* %mptr.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__798_583)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %799*/
	/*   store i32 0, i32* %mptr.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__799_585)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %802*/
	/*   %805 = load i32* %804, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__802_592)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %810*/
	/*   %812 = load i32* %mptr.02.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__810_598)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %810*/
	/*   store i32 %814, i32* %mptr.02.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__810_600)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %822 = load i32* %mptr.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_610)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %826*/
	/*   store i32 255, i32* %mptr.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__826_614)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %827*/
	/*   store i32 0, i32* %mptr.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__827_616)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %decode_start.exit.i*/
	/*   %830 = load i8* %scevgep18, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_decode_startexiti_620)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %838*/
	/*   %839 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__838_629)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %838*/
	/*   store i32 %840, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__838_631)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.16.i*/
	/*   %846 = load i8* %scevgep15, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheader16i_638)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.27.i*/
	/*   %854 = load i8* %scevgep12, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheader27i_647)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %jpeg2bmp_main.exit*/
	/*   %866 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_jpeg2bmp_mainexit_656)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %872*/
	/*   %873 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__872_661)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_in_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_in_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_in_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_in_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_in_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_in_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_in_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_in_a;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_a;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_a;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_a;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_a;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_a;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_a;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_a;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_a;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_a;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_a;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_a;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_a;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_a;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_a;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_a;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_a;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_a;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Write4Blocks_memory_controller_in_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Write4Blocks_memory_controller_in_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Write4Blocks_memory_controller_in_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Write4Blocks_memory_controller_in_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Write4Blocks_memory_controller_in_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Write4Blocks_memory_controller_in_a;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_a;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_a;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_a;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_a;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_a;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %1*/
	/*   store i8 %2, i8* %c.03.i, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__1_4)) begin
		memory_controller_in_a = main_1_2;
	end
	/* main: %28*/
	/*   store i32 %30, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_38)) begin
		memory_controller_in_a = main_28_30;
	end
	/* main: %32*/
	/*   store i16 %51, i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_46)) begin
		memory_controller_in_a = main_32_51;
	end
	/* main: %78*/
	/*   store i32 %80, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__78_61)) begin
		memory_controller_in_a = main_78_80;
	end
	/* main: %90*/
	/*   store i32 %92, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__90_75)) begin
		memory_controller_in_a = main_90_92;
	end
	/* main: %135*/
	/*   store i32 %137, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_105)) begin
		memory_controller_in_a = main_135_137;
	end
	/* main: %150*/
	/*   store i32 %152, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__150_117)) begin
		memory_controller_in_a = main_150_152;
	end
	/* main: %184*/
	/*   store i32 %186, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__184_140)) begin
		memory_controller_in_a = main_184_186;
	end
	/* main: %209*/
	/*   store i32 %213, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_161)) begin
		memory_controller_in_a = main_209_213;
	end
	/* main: %225*/
	/*   store i32 %227, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_165)) begin
		memory_controller_in_a = main_225_227;
	end
	/* main: %233*/
	/*   store i32 %235, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__233_172)) begin
		memory_controller_in_a = main_233_235;
	end
	/* main: %286*/
	/*   store i32 %293, i32* %294, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_210)) begin
		memory_controller_in_a = main_286_293;
	end
	/* main: %286*/
	/*   store i32 %303, i32* %304, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_216)) begin
		memory_controller_in_a = main_286_303;
	end
	/* main: %286*/
	/*   store i32 %313, i32* %314, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_222)) begin
		memory_controller_in_a = main_286_313;
	end
	/* main: %286*/
	/*   store i32 %323, i32* %324, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_228)) begin
		memory_controller_in_a = main_286_323;
	end
	/* main: %286*/
	/*   store i32 %333, i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_234)) begin
		memory_controller_in_a = main_286_333;
	end
	/* main: %286*/
	/*   store i32 %343, i32* %344, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_240)) begin
		memory_controller_in_a = main_286_343;
	end
	/* main: %286*/
	/*   store i32 %353, i32* %354, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_246)) begin
		memory_controller_in_a = main_286_353;
	end
	/* main: %286*/
	/*   store i32 %363, i32* %364, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_252)) begin
		memory_controller_in_a = main_286_363;
	end
	/* main: %418*/
	/*   store i32 %421, i32* %scevgep181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__418_267)) begin
		memory_controller_in_a = main_418_421;
	end
	/* main: %465*/
	/*   store i32 %467, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_294)) begin
		memory_controller_in_a = main_465_467;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %500, i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_346)) begin
		memory_controller_in_a = main_read_markersexiti_500;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %503, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_352)) begin
		memory_controller_in_a = main_read_markersexiti_503_reg;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %505, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_358)) begin
		memory_controller_in_a = main_read_markersexiti_505_reg;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* %506, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_359)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_360)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_361)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_362)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %524*/
	/*   store i32 %527, i32* %.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_373)) begin
		memory_controller_in_a = main_524_527;
	end
	/* main: %538*/
	/*   store i32 %541, i32* %mptr.01.i1.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__538_386)) begin
		memory_controller_in_a = main_538_541;
	end
	/* main: %581*/
	/*   store i32 %r.0.i.i.i, i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_410)) begin
		memory_controller_in_a = main_573_r0iii_reg;
	end
	/* main: %581*/
	/*   store i32 %b.0.i.i.i, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_411)) begin
		memory_controller_in_a = main_581_b0iii_reg;
	end
	/* main: %626*/
	/*   store i8 %630, i8* %scevgep78, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__626_427)) begin
		memory_controller_in_a = main_626_630;
	end
	/* main: %654*/
	/*   store i32 %657, i32* %.01.i.i3.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__654_447)) begin
		memory_controller_in_a = main_654_657;
	end
	/* main: %668*/
	/*   store i32 %671, i32* %mptr.01.i1.i9.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__668_460)) begin
		memory_controller_in_a = main_668_671;
	end
	/* main: %684*/
	/*   store i32 %687, i32* %.01.i.i15.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__684_479)) begin
		memory_controller_in_a = main_684_687;
	end
	/* main: %698*/
	/*   store i32 %701, i32* %mptr.01.i1.i21.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_492)) begin
		memory_controller_in_a = main_698_701;
	end
	/* main: %712*/
	/*   store i32 %715, i32* %.01.i.i27.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__712_510)) begin
		memory_controller_in_a = main_712_715;
	end
	/* main: %726*/
	/*   store i32 %729, i32* %mptr.01.i1.i33.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__726_523)) begin
		memory_controller_in_a = main_726_729;
	end
	/* main: %771*/
	/*   store i32 %r.0.i39.i.i, i32* %scevgep155, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__771_556)) begin
		memory_controller_in_a = main_763_r0i39ii_reg;
	end
	/* main: %771*/
	/*   store i32 %b.0.i43.i.i, i32* %scevgep153, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__771_557)) begin
		memory_controller_in_a = main_771_b0i43ii_reg;
	end
	/* main: %782*/
	/*   store i32 %786, i32* %mptr.02.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_569)) begin
		memory_controller_in_a = main_782_786;
	end
	/* main: %798*/
	/*   store i32 255, i32* %mptr.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__798_583)) begin
		memory_controller_in_a = 32'd255;
	end
	/* main: %799*/
	/*   store i32 0, i32* %mptr.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__799_585)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %810*/
	/*   store i32 %814, i32* %mptr.02.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__810_600)) begin
		memory_controller_in_a = main_810_814;
	end
	/* main: %826*/
	/*   store i32 255, i32* %mptr.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__826_614)) begin
		memory_controller_in_a = 32'd255;
	end
	/* main: %827*/
	/*   store i32 0, i32* %mptr.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__827_616)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %838*/
	/*   store i32 %840, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__838_631)) begin
		memory_controller_in_a = main_838_840;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_size_a[1:0] = huff_make_dhuff_tb_memory_controller_size_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_size_a[1:0] = huff_make_dhuff_tb_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_size_a[1:0] = huff_make_dhuff_tb_memory_controller_size_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_size_a[1:0] = huff_make_dhuff_tb_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_size_a[1:0] = huff_make_dhuff_tb_memory_controller_size_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_size_a[1:0] = huff_make_dhuff_tb_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_size_a[1:0] = huff_make_dhuff_tb_memory_controller_size_a;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_size_a[1:0] = huff_make_dhuff_tb_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_size_a[1:0] = DecodeHuffMCU_memory_controller_size_a;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_size_a[1:0] = DecodeHuffMCU_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_size_a[1:0] = ChenIDct_memory_controller_size_a;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_size_a[1:0] = ChenIDct_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_size_a[1:0] = DecodeHuffMCU_memory_controller_size_a;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_size_a[1:0] = DecodeHuffMCU_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_size_a[1:0] = DecodeHuffMCU_memory_controller_size_a;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_size_a[1:0] = DecodeHuffMCU_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_size_a[1:0] = ChenIDct_memory_controller_size_a;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_size_a[1:0] = ChenIDct_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_size_a[1:0] = DecodeHuffMCU_memory_controller_size_a;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_size_a[1:0] = DecodeHuffMCU_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_size_a[1:0] = ChenIDct_memory_controller_size_a;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_size_a[1:0] = ChenIDct_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_size_a[1:0] = DecodeHuffMCU_memory_controller_size_a;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_size_a[1:0] = DecodeHuffMCU_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_size_a[1:0] = ChenIDct_memory_controller_size_a;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_size_a[1:0] = ChenIDct_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_size_a[1:0] = Write4Blocks_memory_controller_size_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_size_a[1:0] = Write4Blocks_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_size_a[1:0] = Write4Blocks_memory_controller_size_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_size_a[1:0] = Write4Blocks_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_size_a[1:0] = Write4Blocks_memory_controller_size_a;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_size_a[1:0] = Write4Blocks_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_size_a[1:0] = ChenIDct_memory_controller_size_a;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_size_a[1:0] = ChenIDct_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_size_a[1:0] = DecodeHuffMCU_memory_controller_size_a;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_size_a[1:0] = DecodeHuffMCU_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_size_a[1:0] = ChenIDct_memory_controller_size_a;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_size_a[1:0] = ChenIDct_memory_controller_size_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   store i8 %2, i8* %c.03.i, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__1_4)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.preheader.i*/
	/*   %4 = load i8* getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 0), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_6)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.lr.ph.i.i.i*/
	/*   %.sink.i.i.i = load i8* %20, align 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_26)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %28*/
	/*   %29 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %28*/
	/*   store i32 %30, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_38)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %32*/
	/*   %38 = load i8* %33, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_43)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %32*/
	/*   %45 = load i8* %42, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_44)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %32*/
	/*   store i16 %51, i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_46)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %32*/
	/*   %53 = load i8* %48, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_47)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %32*/
	/*   %60 = load i8* %56, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_50)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %78*/
	/*   %79 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__78_59)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %78*/
	/*   store i32 %80, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__78_61)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %87*/
	/*   %88 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__87_70)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %90*/
	/*   %91 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__90_73)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %90*/
	/*   store i32 %92, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__90_75)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %104 = load i8* %ReadBuf.1, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_86)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %108 = load i8* %scevgep197, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_92)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %135*/
	/*   %136 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_103)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %135*/
	/*   store i32 %137, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__135_105)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %150*/
	/*   %151 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__150_115)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %150*/
	/*   store i32 %152, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__150_117)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.us-lcssa4.i.i*/
	/*   %175 = load i8* %170, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa4ii_135)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %184*/
	/*   %185 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__184_138)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %184*/
	/*   store i32 %186, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__184_140)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph10.i.i.i*/
	/*   %197 = load i8* %ReadBuf.3, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph10iii_149)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %209*/
	/*   %212 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_159)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %209*/
	/*   store i32 %213, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__209_161)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %225*/
	/*   %226 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_163)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %225*/
	/*   store i32 %227, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__225_165)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %233*/
	/*   %234 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__233_170)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %233*/
	/*   store i32 %235, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__233_172)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %246*/
	/*   %252 = load i8* %247, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__246_185)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.lr.ph5.i.i.i*/
	/*   %268 = load i8* %ReadBuf.5, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph5iii_194)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %286*/
	/*   %288 = load i8* %267, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_205)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %286*/
	/*   %292 = load i8* %287, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_208)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %286*/
	/*   store i32 %293, i32* %294, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_210)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %286*/
	/*   %302 = load i8* %296, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_214)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %286*/
	/*   store i32 %303, i32* %304, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_216)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %286*/
	/*   %312 = load i8* %306, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_220)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %286*/
	/*   store i32 %313, i32* %314, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_222)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %286*/
	/*   %322 = load i8* %316, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_226)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %286*/
	/*   store i32 %323, i32* %324, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_228)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %286*/
	/*   %332 = load i8* %326, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_232)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %286*/
	/*   store i32 %333, i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_234)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %286*/
	/*   %342 = load i8* %336, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_238)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %286*/
	/*   store i32 %343, i32* %344, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_240)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %286*/
	/*   %352 = load i8* %346, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_244)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %286*/
	/*   store i32 %353, i32* %354, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_246)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %286*/
	/*   %362 = load i8* %356, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_250)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %286*/
	/*   store i32 %363, i32* %364, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_252)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %418*/
	/*   store i32 %421, i32* %scevgep181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__418_267)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i13.i.i*/
	/*   %451 = load i8* %447, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi13ii_283)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %465*/
	/*   %466 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_292)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %465*/
	/*   store i32 %467, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__465_294)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %..split_crit_edge.i.i.i*/
	/*   %481 = load i8* %scevgep187, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_303)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %read_markers.exit.i*/
	/*   %491 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_312)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %500, i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_346)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %503, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_352)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %505, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_358)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* %506, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_359)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_360)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_361)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_362)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %524*/
	/*   store i32 %527, i32* %.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_373)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %538*/
	/*   %540 = load i32* %mptr.01.i1.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__538_384)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %538*/
	/*   store i32 %541, i32* %mptr.01.i1.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__538_386)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %decode_block.exit.2.i.i*/
	/*   %553 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_401)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %581*/
	/*   store i32 %r.0.i.i.i, i32* %scevgep68, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_410)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %581*/
	/*   store i32 %b.0.i.i.i, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_411)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %583 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_413)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %.pre.i.i = load i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_414)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %626*/
	/*   store i8 %630, i8* %scevgep78, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__626_427)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %654*/
	/*   store i32 %657, i32* %.01.i.i3.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__654_447)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %668*/
	/*   %670 = load i32* %mptr.01.i1.i9.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__668_458)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %668*/
	/*   store i32 %671, i32* %mptr.01.i1.i9.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__668_460)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %684*/
	/*   store i32 %687, i32* %.01.i.i15.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__684_479)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %698*/
	/*   %700 = load i32* %mptr.01.i1.i21.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_490)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %698*/
	/*   store i32 %701, i32* %mptr.01.i1.i21.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_492)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %712*/
	/*   store i32 %715, i32* %.01.i.i27.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__712_510)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %726*/
	/*   %728 = load i32* %mptr.01.i1.i33.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__726_521)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %726*/
	/*   store i32 %729, i32* %mptr.01.i1.i33.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__726_523)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %741*/
	/*   %743 = load i32* %scevgep157, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_547)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %771*/
	/*   store i32 %r.0.i39.i.i, i32* %scevgep155, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__771_556)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %771*/
	/*   store i32 %b.0.i43.i.i, i32* %scevgep153, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__771_557)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %782*/
	/*   %784 = load i32* %mptr.02.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_567)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %782*/
	/*   store i32 %786, i32* %mptr.02.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__782_569)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %PostshiftIDctMatrix.exit.i.1.i.i*/
	/*   %794 = load i32* %mptr.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti1ii_579)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %798*/
	/*   store i32 255, i32* %mptr.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__798_583)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %799*/
	/*   store i32 0, i32* %mptr.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__799_585)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %802*/
	/*   %805 = load i32* %804, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__802_592)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %810*/
	/*   %812 = load i32* %mptr.02.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__810_598)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %810*/
	/*   store i32 %814, i32* %mptr.02.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__810_600)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %PostshiftIDctMatrix.exit.i.2.i.i*/
	/*   %822 = load i32* %mptr.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti2ii_610)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %826*/
	/*   store i32 255, i32* %mptr.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__826_614)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %827*/
	/*   store i32 0, i32* %mptr.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__827_616)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %decode_start.exit.i*/
	/*   %830 = load i8* %scevgep18, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_decode_startexiti_620)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %838*/
	/*   %839 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__838_629)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %838*/
	/*   store i32 %840, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__838_631)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.16.i*/
	/*   %846 = load i8* %scevgep15, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheader16i_638)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.preheader.27.i*/
	/*   %854 = load i8* %scevgep12, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheader27i_647)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %jpeg2bmp_main.exit*/
	/*   %866 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_jpeg2bmp_mainexit_656)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %872*/
	/*   %873 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__872_661)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_enable_b = huff_make_dhuff_tb_memory_controller_enable_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_enable_b = huff_make_dhuff_tb_memory_controller_enable_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_enable_b = huff_make_dhuff_tb_memory_controller_enable_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_enable_b = huff_make_dhuff_tb_memory_controller_enable_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_enable_b = huff_make_dhuff_tb_memory_controller_enable_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_enable_b = huff_make_dhuff_tb_memory_controller_enable_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_enable_b = huff_make_dhuff_tb_memory_controller_enable_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_enable_b = huff_make_dhuff_tb_memory_controller_enable_b;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_enable_b = DecodeHuffMCU_memory_controller_enable_b;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_enable_b = DecodeHuffMCU_memory_controller_enable_b;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_enable_b = ChenIDct_memory_controller_enable_b;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_enable_b = ChenIDct_memory_controller_enable_b;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_enable_b = DecodeHuffMCU_memory_controller_enable_b;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_enable_b = DecodeHuffMCU_memory_controller_enable_b;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_enable_b = DecodeHuffMCU_memory_controller_enable_b;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_enable_b = DecodeHuffMCU_memory_controller_enable_b;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_enable_b = ChenIDct_memory_controller_enable_b;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_enable_b = ChenIDct_memory_controller_enable_b;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_enable_b = DecodeHuffMCU_memory_controller_enable_b;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_enable_b = DecodeHuffMCU_memory_controller_enable_b;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_enable_b = ChenIDct_memory_controller_enable_b;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_enable_b = ChenIDct_memory_controller_enable_b;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_enable_b = DecodeHuffMCU_memory_controller_enable_b;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_enable_b = DecodeHuffMCU_memory_controller_enable_b;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_enable_b = ChenIDct_memory_controller_enable_b;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_enable_b = ChenIDct_memory_controller_enable_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_enable_b = Write4Blocks_memory_controller_enable_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_enable_b = Write4Blocks_memory_controller_enable_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_enable_b = Write4Blocks_memory_controller_enable_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_enable_b = Write4Blocks_memory_controller_enable_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_enable_b = Write4Blocks_memory_controller_enable_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_enable_b = Write4Blocks_memory_controller_enable_b;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_enable_b = ChenIDct_memory_controller_enable_b;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_enable_b = ChenIDct_memory_controller_enable_b;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_enable_b = DecodeHuffMCU_memory_controller_enable_b;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_enable_b = DecodeHuffMCU_memory_controller_enable_b;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_enable_b = ChenIDct_memory_controller_enable_b;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_enable_b = ChenIDct_memory_controller_enable_b;
	end
	/* main: %.preheader.i*/
	/*   %5 = load i8* getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 1), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   store i32 1, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   %9 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   store i32 %10, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit.i.i.i*/
	/*   %.sink3.i.i.i = load i8* %17, align 1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiii_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i.i*/
	/*   %23 = load i8* %scevgep174, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheaderiii_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %32*/
	/*   %34 = load i8* %scevgep175, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_42)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %32*/
	/*   %43 = load i8* %37, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_43)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %32*/
	/*   %49 = load i8* %44, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_44)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %32*/
	/*   %57 = load i8* %52, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_47)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %32*/
	/*   store i16 %59, i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_49)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %32*/
	/*   %64 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_50)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %32*/
	/*   %67 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_51)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %73*/
	/*   %74 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_54)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %73*/
	/*   store i32 %75, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_56)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %81*/
	/*   %82 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__81_63)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %84*/
	/*   %85 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__84_66)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %84*/
	/*   store i32 %86, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__84_68)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i1.i.i.thread*/
	/*   %95 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi1iithread_78)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i1.i.i.thread*/
	/*   store i32 %96, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi1iithread_80)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %105 = load i8* %scevgep199, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_89)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %127*/
	/*   %128 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__127_97)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %127*/
	/*   store i32 %129, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__127_99)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %143*/
	/*   %144 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__143_109)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %143*/
	/*   store i32 %145, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__143_111)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %158*/
	/*   %159 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__158_121)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %158*/
	/*   store i32 %160, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__158_123)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.us-lcssa4.i.i*/
	/*   %171 = load i8* %scevgep175, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa4ii_134)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.us-lcssa4.i.i*/
	/*   %179 = load i8* %174, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa4ii_135)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader2.i.i.i.thread*/
	/*   %188 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2iiithread_143)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader2.i.i.i.thread*/
	/*   store i32 %189, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2iiithread_145)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.i.i*/
	/*   %199 = load i8* %scevgep169, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph10iii_149)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %209*/
	/*   store i8 %214, i8* %210, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__209_159)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %209*/
	/*   %217 = load i8* %210, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__209_160)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %228*/
	/*   %229 = load i8* %210, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__228_167)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %240*/
	/*   %241 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__240_176)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %240*/
	/*   store i32 %242, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__240_178)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %246*/
	/*   %248 = load i8* %scevgep175, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__246_184)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %260*/
	/*   %261 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__260_188)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %260*/
	/*   store i32 %262, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__260_190)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %273*/
	/*   %274 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__273_197)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %273*/
	/*   store i32 %275, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__273_199)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %289, i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_207)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   %297 = load i8* %291, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_211)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %298, i32* %299, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_213)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   %307 = load i8* %301, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_217)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %308, i32* %309, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_219)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   %317 = load i8* %311, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_223)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %318, i32* %319, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_225)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   %327 = load i8* %321, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_229)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %328, i32* %329, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_231)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   %337 = load i8* %331, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_235)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %338, i32* %339, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_237)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   %347 = load i8* %341, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_241)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %348, i32* %349, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_243)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   %357 = load i8* %351, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_247)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %358, i32* %359, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_249)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %369*/
	/*   %370 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__369_254)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %369*/
	/*   store i32 %371, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__369_256)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %418*/
	/*   %420 = load i8* %scevgep180, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__418_265)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %428*/
	/*   %430 = load i8* %scevgep175, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__428_273)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %428*/
	/*   %434 = load i8* %429, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__428_274)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %442*/
	/*   %443 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__442_277)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %442*/
	/*   store i32 %444, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__442_279)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %459*/
	/*   %460 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__459_286)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %459*/
	/*   store i32 %461, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__459_288)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.split.us.i.i.i*/
	/*   %473 = load i8* %471, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_splitusiii_299)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %..split_crit_edge.i.i.i*/
	/*   %484 = load i8* %scevgep188, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_304)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   %496 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_312)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %502, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_349)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %504, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_355)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i8* %p_jinfo_jpeg_data.0, i8** @CurHuffReadBuf, align 4, !tbaa !8*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_358)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* %507, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_359)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_360)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_361)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_362)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_363)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %524*/
	/*   %527 = load i32* %526, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_371)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %532*/
	/*   %534 = load i32* %mptr.02.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__532_377)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %532*/
	/*   store i32 %536, i32* %mptr.02.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__532_379)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %544 = load i32* %mptr.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_389)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %546*/
	/*   store i32 0, i32* %mptr.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__546_392)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %549*/
	/*   store i32 255, i32* %mptr.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_395)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %decode_block.exit.2.i.i*/
	/*   %555 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_401)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %decode_block.exit.2.i.i*/
	/*   %552 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_402)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %581*/
	/*   store i32 %g.0.i.i.i, i32* %scevgep67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_410)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %585 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_413)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %587 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_414)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %592*/
	/*   %594 = load i32* %scevgep92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__592_417)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %626*/
	/*   %629 = load i32* %.14.us.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__626_425)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %WriteOneBlock.exit.i.i.i*/
	/*   %635 = load i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_WriteOneBlockexitiii_431)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %637*/
	/*   store i32 0, i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__637_434)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %654*/
	/*   %657 = load i32* %656, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__654_445)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %662*/
	/*   %664 = load i32* %mptr.02.i.i6.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__662_451)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %662*/
	/*   store i32 %666, i32* %mptr.02.i.i6.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__662_453)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %674 = load i32* %mptr.01.i.i10.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_463)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %676*/
	/*   store i32 0, i32* %mptr.01.i.i10.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__676_466)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %679*/
	/*   store i32 255, i32* %mptr.01.i.i10.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__679_469)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %684*/
	/*   %687 = load i32* %686, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__684_477)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %692*/
	/*   %694 = load i32* %mptr.02.i.i18.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_483)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %692*/
	/*   store i32 %696, i32* %mptr.02.i.i18.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_485)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %704 = load i32* %mptr.01.i.i22.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_495)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %706*/
	/*   store i32 0, i32* %mptr.01.i.i22.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__706_498)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %709*/
	/*   store i32 255, i32* %mptr.01.i.i22.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__709_501)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %712*/
	/*   %715 = load i32* %714, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__712_508)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %720*/
	/*   %722 = load i32* %mptr.02.i.i30.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__720_514)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %720*/
	/*   store i32 %724, i32* %mptr.02.i.i30.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__720_516)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %732 = load i32* %mptr.01.i.i34.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_526)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %734*/
	/*   store i32 0, i32* %mptr.01.i.i34.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__734_529)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %737*/
	/*   store i32 255, i32* %mptr.01.i.i34.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__737_532)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %741*/
	/*   %745 = load i32* %scevgep156, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_547)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %741*/
	/*   %742 = load i32* %scevgep158, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_548)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %771*/
	/*   store i32 %g.0.i41.i.i, i32* %scevgep154, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__771_556)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %774*/
	/*   %777 = load i32* %776, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__774_561)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %774*/
	/*   store i32 %777, i32* %.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__774_563)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %788*/
	/*   %790 = load i32* %mptr.01.i1.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__788_574)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %788*/
	/*   store i32 %791, i32* %mptr.01.i1.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__788_576)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %802*/
	/*   store i32 %805, i32* %.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__802_594)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %816*/
	/*   %818 = load i32* %mptr.01.i1.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__816_605)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %816*/
	/*   store i32 %819, i32* %mptr.01.i1.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__816_607)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %833*/
	/*   %834 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__833_623)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %833*/
	/*   store i32 %835, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__833_625)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %841*/
	/*   %843 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__841_633)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %844*/
	/*   store i32 %845, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__844_636)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %849*/
	/*   %850 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__849_641)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %849*/
	/*   store i32 %851, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__849_643)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %857*/
	/*   %858 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__857_650)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %857*/
	/*   store i32 %859, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__857_652)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_address_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_address_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_address_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_address_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_address_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_address_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_address_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_address_b;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_b;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_b;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_b;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_b;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_b;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_b;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_b;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_b;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_b;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_b;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_b;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_b;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_b;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_b;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_b;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_b;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_b;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Write4Blocks_memory_controller_address_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Write4Blocks_memory_controller_address_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Write4Blocks_memory_controller_address_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Write4Blocks_memory_controller_address_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Write4Blocks_memory_controller_address_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Write4Blocks_memory_controller_address_b;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_b;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_b;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_b;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DecodeHuffMCU_memory_controller_address_b;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_b;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ChenIDct_memory_controller_address_b;
	end
	/* main: %.preheader.i*/
	/*   %5 = load i8* getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 1), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_6)) begin
		memory_controller_address_b = (`TAG_g_JpegFileBuf_a + (1 * 32'd1));
	end
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   store i32 1, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_9)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   %9 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_10)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   store i32 %10, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_12)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %.loopexit.i.i.i*/
	/*   %.sink3.i.i.i = load i8* %17, align 1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiii_22)) begin
		memory_controller_address_b = main_loopexitiii_17_reg;
	end
	/* main: %.preheader.i.i.i*/
	/*   %23 = load i8* %scevgep174, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheaderiii_31)) begin
		memory_controller_address_b = main_preheaderiii_scevgep174;
	end
	/* main: %32*/
	/*   %34 = load i8* %scevgep175, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_42)) begin
		memory_controller_address_b = main_preheaderiii_scevgep175_reg;
	end
	/* main: %32*/
	/*   %43 = load i8* %37, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_43)) begin
		memory_controller_address_b = main_32_37;
	end
	/* main: %32*/
	/*   %49 = load i8* %44, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_44)) begin
		memory_controller_address_b = main_32_44_reg;
	end
	/* main: %32*/
	/*   %57 = load i8* %52, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_47)) begin
		memory_controller_address_b = main_32_52_reg;
	end
	/* main: %32*/
	/*   store i16 %59, i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_49)) begin
		memory_controller_address_b = `TAG_g_p_jinfo_image_width_a;
	end
	/* main: %32*/
	/*   %64 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_50)) begin
		memory_controller_address_b = `TAG_g_p_jinfo_image_height_a;
	end
	/* main: %32*/
	/*   %67 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_51)) begin
		memory_controller_address_b = `TAG_g_p_jinfo_image_width_a;
	end
	/* main: %73*/
	/*   %74 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_54)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %73*/
	/*   store i32 %75, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_56)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %81*/
	/*   %82 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__81_63)) begin
		memory_controller_address_b = `TAG_g_p_jinfo_image_height_a;
	end
	/* main: %84*/
	/*   %85 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__84_66)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %84*/
	/*   store i32 %86, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__84_68)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %.preheader.i1.i.i.thread*/
	/*   %95 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi1iithread_78)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %.preheader.i1.i.i.thread*/
	/*   store i32 %96, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi1iithread_80)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %105 = load i8* %scevgep199, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_89)) begin
		memory_controller_address_b = main_lrphi2ii_scevgep199_reg;
	end
	/* main: %127*/
	/*   %128 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__127_97)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %127*/
	/*   store i32 %129, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__127_99)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %143*/
	/*   %144 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__143_109)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %143*/
	/*   store i32 %145, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__143_111)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %158*/
	/*   %159 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__158_121)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %158*/
	/*   store i32 %160, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__158_123)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %.us-lcssa4.i.i*/
	/*   %171 = load i8* %scevgep175, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa4ii_134)) begin
		memory_controller_address_b = main_preheaderiii_scevgep175_reg;
	end
	/* main: %.us-lcssa4.i.i*/
	/*   %179 = load i8* %174, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa4ii_135)) begin
		memory_controller_address_b = main_uslcssa4ii_174;
	end
	/* main: %.preheader2.i.i.i.thread*/
	/*   %188 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2iiithread_143)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %.preheader2.i.i.i.thread*/
	/*   store i32 %189, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2iiithread_145)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %.lr.ph10.i.i.i*/
	/*   %199 = load i8* %scevgep169, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph10iii_149)) begin
		memory_controller_address_b = main_lrph10iii_scevgep169;
	end
	/* main: %209*/
	/*   store i8 %214, i8* %210, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__209_159)) begin
		memory_controller_address_b = main_209_210;
	end
	/* main: %209*/
	/*   %217 = load i8* %210, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__209_160)) begin
		memory_controller_address_b = main_209_210_reg;
	end
	/* main: %228*/
	/*   %229 = load i8* %210, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__228_167)) begin
		memory_controller_address_b = main_209_210_reg;
	end
	/* main: %240*/
	/*   %241 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__240_176)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %240*/
	/*   store i32 %242, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__240_178)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %246*/
	/*   %248 = load i8* %scevgep175, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__246_184)) begin
		memory_controller_address_b = main_preheaderiii_scevgep175_reg;
	end
	/* main: %260*/
	/*   %261 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__260_188)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %260*/
	/*   store i32 %262, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__260_190)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %273*/
	/*   %274 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__273_197)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %273*/
	/*   store i32 %275, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__273_199)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %286*/
	/*   store i32 %289, i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_207)) begin
		memory_controller_address_b = main_286_290_reg;
	end
	/* main: %286*/
	/*   %297 = load i8* %291, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_211)) begin
		memory_controller_address_b = main_286_291_reg;
	end
	/* main: %286*/
	/*   store i32 %298, i32* %299, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_213)) begin
		memory_controller_address_b = main_286_299_reg;
	end
	/* main: %286*/
	/*   %307 = load i8* %301, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_217)) begin
		memory_controller_address_b = main_286_301_reg;
	end
	/* main: %286*/
	/*   store i32 %308, i32* %309, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_219)) begin
		memory_controller_address_b = main_286_309_reg;
	end
	/* main: %286*/
	/*   %317 = load i8* %311, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_223)) begin
		memory_controller_address_b = main_286_311_reg;
	end
	/* main: %286*/
	/*   store i32 %318, i32* %319, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_225)) begin
		memory_controller_address_b = main_286_319_reg;
	end
	/* main: %286*/
	/*   %327 = load i8* %321, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_229)) begin
		memory_controller_address_b = main_286_321_reg;
	end
	/* main: %286*/
	/*   store i32 %328, i32* %329, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_231)) begin
		memory_controller_address_b = main_286_329_reg;
	end
	/* main: %286*/
	/*   %337 = load i8* %331, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_235)) begin
		memory_controller_address_b = main_286_331_reg;
	end
	/* main: %286*/
	/*   store i32 %338, i32* %339, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_237)) begin
		memory_controller_address_b = main_286_339_reg;
	end
	/* main: %286*/
	/*   %347 = load i8* %341, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_241)) begin
		memory_controller_address_b = main_286_341_reg;
	end
	/* main: %286*/
	/*   store i32 %348, i32* %349, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_243)) begin
		memory_controller_address_b = main_286_349_reg;
	end
	/* main: %286*/
	/*   %357 = load i8* %351, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_247)) begin
		memory_controller_address_b = main_286_351_reg;
	end
	/* main: %286*/
	/*   store i32 %358, i32* %359, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_249)) begin
		memory_controller_address_b = main_286_359_reg;
	end
	/* main: %369*/
	/*   %370 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__369_254)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %369*/
	/*   store i32 %371, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__369_256)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %418*/
	/*   %420 = load i8* %scevgep180, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__418_265)) begin
		memory_controller_address_b = main_418_scevgep180;
	end
	/* main: %428*/
	/*   %430 = load i8* %scevgep175, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__428_273)) begin
		memory_controller_address_b = main_preheaderiii_scevgep175_reg;
	end
	/* main: %428*/
	/*   %434 = load i8* %429, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__428_274)) begin
		memory_controller_address_b = main_428_429;
	end
	/* main: %442*/
	/*   %443 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__442_277)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %442*/
	/*   store i32 %444, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__442_279)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %459*/
	/*   %460 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__459_286)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %459*/
	/*   store i32 %461, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__459_288)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %.split.us.i.i.i*/
	/*   %473 = load i8* %471, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_splitusiii_299)) begin
		memory_controller_address_b = main_splitusiii_471_reg;
	end
	/* main: %..split_crit_edge.i.i.i*/
	/*   %484 = load i8* %scevgep188, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_304)) begin
		memory_controller_address_b = main_split_crit_edgeiii_scevgep188;
	end
	/* main: %read_markers.exit.i*/
	/*   %496 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_312)) begin
		memory_controller_address_b = `TAG_g_p_jinfo_image_width_a;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %502, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_349)) begin
		memory_controller_address_b = `TAG_g_p_jinfo_dc_dhuff_tbl_ml_a;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %504, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_355)) begin
		memory_controller_address_b = `TAG_g_p_jinfo_ac_dhuff_tbl_ml_a;
	end
	/* main: %read_markers.exit.i*/
	/*   store i8* %p_jinfo_jpeg_data.0, i8** @CurHuffReadBuf, align 4, !tbaa !8*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_358)) begin
		memory_controller_address_b = `TAG_g_CurHuffReadBuf_a;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* %507, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_359)) begin
		memory_controller_address_b = main_read_markersexiti_507_reg;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_360)) begin
		memory_controller_address_b = `TAG_g_OutData_comp_vpos_a;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_361)) begin
		memory_controller_address_b = (`TAG_g_OutData_comp_vpos_a + (4 * 32'd1));
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_362)) begin
		memory_controller_address_b = (`TAG_g_OutData_comp_vpos_a + (4 * 32'd2));
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_363)) begin
		memory_controller_address_b = (`TAG_g_OutData_comp_hpos_a + (4 * 32'd2));
	end
	/* main: %524*/
	/*   %527 = load i32* %526, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_371)) begin
		memory_controller_address_b = main_524_526;
	end
	/* main: %532*/
	/*   %534 = load i32* %mptr.02.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__532_377)) begin
		memory_controller_address_b = main_532_mptr02iiii;
	end
	/* main: %532*/
	/*   store i32 %536, i32* %mptr.02.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__532_379)) begin
		memory_controller_address_b = main_532_mptr02iiii_reg;
	end
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %544 = load i32* %mptr.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_389)) begin
		memory_controller_address_b = main_PostshiftIDctMatrixexitiii_mptr01iiii;
	end
	/* main: %546*/
	/*   store i32 0, i32* %mptr.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__546_392)) begin
		memory_controller_address_b = main_PostshiftIDctMatrixexitiii_mptr01iiii_reg;
	end
	/* main: %549*/
	/*   store i32 255, i32* %mptr.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_395)) begin
		memory_controller_address_b = main_PostshiftIDctMatrixexitiii_mptr01iiii_reg;
	end
	/* main: %decode_block.exit.2.i.i*/
	/*   %555 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_401)) begin
		memory_controller_address_b = main_decode_blockexit2ii_scevgep69;
	end
	/* main: %decode_block.exit.2.i.i*/
	/*   %552 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_402)) begin
		memory_controller_address_b = main_decode_blockexit2ii_scevgep71_reg;
	end
	/* main: %581*/
	/*   store i32 %g.0.i.i.i, i32* %scevgep67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_410)) begin
		memory_controller_address_b = main_decode_blockexit2ii_scevgep67_reg;
	end
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %585 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_413)) begin
		memory_controller_address_b = `TAG_g_p_jinfo_image_height_a;
	end
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %587 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_414)) begin
		memory_controller_address_b = `TAG_g_p_jinfo_MCUWidth_a;
	end
	/* main: %592*/
	/*   %594 = load i32* %scevgep92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__592_417)) begin
		memory_controller_address_b = main_592_scevgep92;
	end
	/* main: %626*/
	/*   %629 = load i32* %.14.us.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__626_425)) begin
		memory_controller_address_b = main_626_14usiiii;
	end
	/* main: %WriteOneBlock.exit.i.i.i*/
	/*   %635 = load i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_WriteOneBlockexitiii_431)) begin
		memory_controller_address_b = main_592_scevgep91_reg;
	end
	/* main: %637*/
	/*   store i32 0, i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__637_434)) begin
		memory_controller_address_b = main_592_scevgep91_reg;
	end
	/* main: %654*/
	/*   %657 = load i32* %656, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__654_445)) begin
		memory_controller_address_b = main_654_656;
	end
	/* main: %662*/
	/*   %664 = load i32* %mptr.02.i.i6.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__662_451)) begin
		memory_controller_address_b = main_662_mptr02ii6ii;
	end
	/* main: %662*/
	/*   store i32 %666, i32* %mptr.02.i.i6.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__662_453)) begin
		memory_controller_address_b = main_662_mptr02ii6ii_reg;
	end
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %674 = load i32* %mptr.01.i.i10.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_463)) begin
		memory_controller_address_b = main_PostshiftIDctMatrixexiti11ii_mptr01ii10ii;
	end
	/* main: %676*/
	/*   store i32 0, i32* %mptr.01.i.i10.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__676_466)) begin
		memory_controller_address_b = main_PostshiftIDctMatrixexiti11ii_mptr01ii10ii_reg;
	end
	/* main: %679*/
	/*   store i32 255, i32* %mptr.01.i.i10.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__679_469)) begin
		memory_controller_address_b = main_PostshiftIDctMatrixexiti11ii_mptr01ii10ii_reg;
	end
	/* main: %684*/
	/*   %687 = load i32* %686, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__684_477)) begin
		memory_controller_address_b = main_684_686;
	end
	/* main: %692*/
	/*   %694 = load i32* %mptr.02.i.i18.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_483)) begin
		memory_controller_address_b = main_692_mptr02ii18ii;
	end
	/* main: %692*/
	/*   store i32 %696, i32* %mptr.02.i.i18.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_485)) begin
		memory_controller_address_b = main_692_mptr02ii18ii_reg;
	end
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %704 = load i32* %mptr.01.i.i22.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_495)) begin
		memory_controller_address_b = main_PostshiftIDctMatrixexiti23ii_mptr01ii22ii;
	end
	/* main: %706*/
	/*   store i32 0, i32* %mptr.01.i.i22.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__706_498)) begin
		memory_controller_address_b = main_PostshiftIDctMatrixexiti23ii_mptr01ii22ii_reg;
	end
	/* main: %709*/
	/*   store i32 255, i32* %mptr.01.i.i22.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__709_501)) begin
		memory_controller_address_b = main_PostshiftIDctMatrixexiti23ii_mptr01ii22ii_reg;
	end
	/* main: %712*/
	/*   %715 = load i32* %714, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__712_508)) begin
		memory_controller_address_b = main_712_714;
	end
	/* main: %720*/
	/*   %722 = load i32* %mptr.02.i.i30.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__720_514)) begin
		memory_controller_address_b = main_720_mptr02ii30ii;
	end
	/* main: %720*/
	/*   store i32 %724, i32* %mptr.02.i.i30.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__720_516)) begin
		memory_controller_address_b = main_720_mptr02ii30ii_reg;
	end
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %732 = load i32* %mptr.01.i.i34.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_526)) begin
		memory_controller_address_b = main_PostshiftIDctMatrixexiti35ii_mptr01ii34ii;
	end
	/* main: %734*/
	/*   store i32 0, i32* %mptr.01.i.i34.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__734_529)) begin
		memory_controller_address_b = main_PostshiftIDctMatrixexiti35ii_mptr01ii34ii_reg;
	end
	/* main: %737*/
	/*   store i32 255, i32* %mptr.01.i.i34.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__737_532)) begin
		memory_controller_address_b = main_PostshiftIDctMatrixexiti35ii_mptr01ii34ii_reg;
	end
	/* main: %741*/
	/*   %745 = load i32* %scevgep156, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_547)) begin
		memory_controller_address_b = main_741_scevgep156;
	end
	/* main: %741*/
	/*   %742 = load i32* %scevgep158, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_548)) begin
		memory_controller_address_b = main_741_scevgep158_reg;
	end
	/* main: %771*/
	/*   store i32 %g.0.i41.i.i, i32* %scevgep154, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__771_556)) begin
		memory_controller_address_b = main_741_scevgep154_reg;
	end
	/* main: %774*/
	/*   %777 = load i32* %776, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__774_561)) begin
		memory_controller_address_b = main_774_776;
	end
	/* main: %774*/
	/*   store i32 %777, i32* %.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__774_563)) begin
		memory_controller_address_b = main_774_01ii1ii_reg;
	end
	/* main: %788*/
	/*   %790 = load i32* %mptr.01.i1.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__788_574)) begin
		memory_controller_address_b = main_788_mptr01i1i1ii;
	end
	/* main: %788*/
	/*   store i32 %791, i32* %mptr.01.i1.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__788_576)) begin
		memory_controller_address_b = main_788_mptr01i1i1ii_reg;
	end
	/* main: %802*/
	/*   store i32 %805, i32* %.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__802_594)) begin
		memory_controller_address_b = main_802_01ii2ii_reg;
	end
	/* main: %816*/
	/*   %818 = load i32* %mptr.01.i1.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__816_605)) begin
		memory_controller_address_b = main_816_mptr01i1i2ii;
	end
	/* main: %816*/
	/*   store i32 %819, i32* %mptr.01.i1.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__816_607)) begin
		memory_controller_address_b = main_816_mptr01i1i2ii_reg;
	end
	/* main: %833*/
	/*   %834 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__833_623)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %833*/
	/*   store i32 %835, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__833_625)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %841*/
	/*   %843 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__841_633)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %844*/
	/*   store i32 %845, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__844_636)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %849*/
	/*   %850 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__849_641)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %849*/
	/*   store i32 %851, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__849_643)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %857*/
	/*   %858 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__857_650)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
	/* main: %857*/
	/*   store i32 %859, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__857_652)) begin
		memory_controller_address_b = `TAG_g_main_result_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_write_enable_b = huff_make_dhuff_tb_memory_controller_write_enable_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_write_enable_b = huff_make_dhuff_tb_memory_controller_write_enable_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_write_enable_b = huff_make_dhuff_tb_memory_controller_write_enable_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_write_enable_b = huff_make_dhuff_tb_memory_controller_write_enable_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_write_enable_b = huff_make_dhuff_tb_memory_controller_write_enable_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_write_enable_b = huff_make_dhuff_tb_memory_controller_write_enable_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_write_enable_b = huff_make_dhuff_tb_memory_controller_write_enable_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_write_enable_b = huff_make_dhuff_tb_memory_controller_write_enable_b;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_write_enable_b = DecodeHuffMCU_memory_controller_write_enable_b;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_write_enable_b = DecodeHuffMCU_memory_controller_write_enable_b;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_write_enable_b = ChenIDct_memory_controller_write_enable_b;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_write_enable_b = ChenIDct_memory_controller_write_enable_b;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_write_enable_b = DecodeHuffMCU_memory_controller_write_enable_b;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_write_enable_b = DecodeHuffMCU_memory_controller_write_enable_b;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_write_enable_b = DecodeHuffMCU_memory_controller_write_enable_b;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_write_enable_b = DecodeHuffMCU_memory_controller_write_enable_b;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_write_enable_b = ChenIDct_memory_controller_write_enable_b;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_write_enable_b = ChenIDct_memory_controller_write_enable_b;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_write_enable_b = DecodeHuffMCU_memory_controller_write_enable_b;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_write_enable_b = DecodeHuffMCU_memory_controller_write_enable_b;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_write_enable_b = ChenIDct_memory_controller_write_enable_b;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_write_enable_b = ChenIDct_memory_controller_write_enable_b;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_write_enable_b = DecodeHuffMCU_memory_controller_write_enable_b;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_write_enable_b = DecodeHuffMCU_memory_controller_write_enable_b;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_write_enable_b = ChenIDct_memory_controller_write_enable_b;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_write_enable_b = ChenIDct_memory_controller_write_enable_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_write_enable_b = Write4Blocks_memory_controller_write_enable_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_write_enable_b = Write4Blocks_memory_controller_write_enable_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_write_enable_b = Write4Blocks_memory_controller_write_enable_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_write_enable_b = Write4Blocks_memory_controller_write_enable_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_write_enable_b = Write4Blocks_memory_controller_write_enable_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_write_enable_b = Write4Blocks_memory_controller_write_enable_b;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_write_enable_b = ChenIDct_memory_controller_write_enable_b;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_write_enable_b = ChenIDct_memory_controller_write_enable_b;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_write_enable_b = DecodeHuffMCU_memory_controller_write_enable_b;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_write_enable_b = DecodeHuffMCU_memory_controller_write_enable_b;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_write_enable_b = ChenIDct_memory_controller_write_enable_b;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_write_enable_b = ChenIDct_memory_controller_write_enable_b;
	end
	/* main: %.preheader.i*/
	/*   %5 = load i8* getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 1), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   store i32 1, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   %9 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   store i32 %10, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.loopexit.i.i.i*/
	/*   %.sink3.i.i.i = load i8* %17, align 1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiii_22)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i.i*/
	/*   %23 = load i8* %scevgep174, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheaderiii_31)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %32*/
	/*   %34 = load i8* %scevgep175, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_42)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %32*/
	/*   %43 = load i8* %37, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_43)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %32*/
	/*   %49 = load i8* %44, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_44)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %32*/
	/*   %57 = load i8* %52, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_47)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %32*/
	/*   store i16 %59, i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_49)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %32*/
	/*   %64 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_50)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %32*/
	/*   %67 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_51)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %73*/
	/*   %74 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_54)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %73*/
	/*   store i32 %75, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_56)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %81*/
	/*   %82 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__81_63)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %84*/
	/*   %85 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__84_66)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %84*/
	/*   store i32 %86, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__84_68)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i1.i.i.thread*/
	/*   %95 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi1iithread_78)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i1.i.i.thread*/
	/*   store i32 %96, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi1iithread_80)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %105 = load i8* %scevgep199, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_89)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %127*/
	/*   %128 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__127_97)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %127*/
	/*   store i32 %129, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__127_99)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %143*/
	/*   %144 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__143_109)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %143*/
	/*   store i32 %145, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__143_111)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %158*/
	/*   %159 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__158_121)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %158*/
	/*   store i32 %160, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__158_123)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.us-lcssa4.i.i*/
	/*   %171 = load i8* %scevgep175, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa4ii_134)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.us-lcssa4.i.i*/
	/*   %179 = load i8* %174, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa4ii_135)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader2.i.i.i.thread*/
	/*   %188 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2iiithread_143)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader2.i.i.i.thread*/
	/*   store i32 %189, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2iiithread_145)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph10.i.i.i*/
	/*   %199 = load i8* %scevgep169, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph10iii_149)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %209*/
	/*   store i8 %214, i8* %210, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__209_159)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %209*/
	/*   %217 = load i8* %210, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__209_160)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %228*/
	/*   %229 = load i8* %210, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__228_167)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %240*/
	/*   %241 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__240_176)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %240*/
	/*   store i32 %242, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__240_178)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %246*/
	/*   %248 = load i8* %scevgep175, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__246_184)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %260*/
	/*   %261 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__260_188)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %260*/
	/*   store i32 %262, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__260_190)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %273*/
	/*   %274 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__273_197)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %273*/
	/*   store i32 %275, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__273_199)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   store i32 %289, i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_207)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   %297 = load i8* %291, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_211)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %286*/
	/*   store i32 %298, i32* %299, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_213)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   %307 = load i8* %301, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_217)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %286*/
	/*   store i32 %308, i32* %309, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_219)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   %317 = load i8* %311, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_223)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %286*/
	/*   store i32 %318, i32* %319, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_225)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   %327 = load i8* %321, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_229)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %286*/
	/*   store i32 %328, i32* %329, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_231)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   %337 = load i8* %331, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_235)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %286*/
	/*   store i32 %338, i32* %339, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_237)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   %347 = load i8* %341, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_241)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %286*/
	/*   store i32 %348, i32* %349, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_243)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %286*/
	/*   %357 = load i8* %351, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_247)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %286*/
	/*   store i32 %358, i32* %359, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_249)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %369*/
	/*   %370 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__369_254)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %369*/
	/*   store i32 %371, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__369_256)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %418*/
	/*   %420 = load i8* %scevgep180, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__418_265)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %428*/
	/*   %430 = load i8* %scevgep175, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__428_273)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %428*/
	/*   %434 = load i8* %429, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__428_274)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %442*/
	/*   %443 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__442_277)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %442*/
	/*   store i32 %444, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__442_279)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %459*/
	/*   %460 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__459_286)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %459*/
	/*   store i32 %461, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__459_288)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.split.us.i.i.i*/
	/*   %473 = load i8* %471, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_splitusiii_299)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %..split_crit_edge.i.i.i*/
	/*   %484 = load i8* %scevgep188, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_304)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %read_markers.exit.i*/
	/*   %496 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_312)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %502, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_349)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %504, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_355)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i8* %p_jinfo_jpeg_data.0, i8** @CurHuffReadBuf, align 4, !tbaa !8*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_358)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* %507, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_359)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_360)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_361)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_362)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_363)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %524*/
	/*   %527 = load i32* %526, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_371)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %532*/
	/*   %534 = load i32* %mptr.02.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__532_377)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %532*/
	/*   store i32 %536, i32* %mptr.02.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__532_379)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %544 = load i32* %mptr.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_389)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %546*/
	/*   store i32 0, i32* %mptr.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__546_392)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %549*/
	/*   store i32 255, i32* %mptr.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_395)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %decode_block.exit.2.i.i*/
	/*   %555 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_401)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %decode_block.exit.2.i.i*/
	/*   %552 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_402)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %581*/
	/*   store i32 %g.0.i.i.i, i32* %scevgep67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_410)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %585 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_413)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %587 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_414)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %592*/
	/*   %594 = load i32* %scevgep92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__592_417)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %626*/
	/*   %629 = load i32* %.14.us.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__626_425)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %WriteOneBlock.exit.i.i.i*/
	/*   %635 = load i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_WriteOneBlockexitiii_431)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %637*/
	/*   store i32 0, i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__637_434)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %654*/
	/*   %657 = load i32* %656, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__654_445)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %662*/
	/*   %664 = load i32* %mptr.02.i.i6.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__662_451)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %662*/
	/*   store i32 %666, i32* %mptr.02.i.i6.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__662_453)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %674 = load i32* %mptr.01.i.i10.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_463)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %676*/
	/*   store i32 0, i32* %mptr.01.i.i10.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__676_466)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %679*/
	/*   store i32 255, i32* %mptr.01.i.i10.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__679_469)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %684*/
	/*   %687 = load i32* %686, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__684_477)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %692*/
	/*   %694 = load i32* %mptr.02.i.i18.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_483)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %692*/
	/*   store i32 %696, i32* %mptr.02.i.i18.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_485)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %704 = load i32* %mptr.01.i.i22.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_495)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %706*/
	/*   store i32 0, i32* %mptr.01.i.i22.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__706_498)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %709*/
	/*   store i32 255, i32* %mptr.01.i.i22.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__709_501)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %712*/
	/*   %715 = load i32* %714, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__712_508)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %720*/
	/*   %722 = load i32* %mptr.02.i.i30.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__720_514)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %720*/
	/*   store i32 %724, i32* %mptr.02.i.i30.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__720_516)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %732 = load i32* %mptr.01.i.i34.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_526)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %734*/
	/*   store i32 0, i32* %mptr.01.i.i34.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__734_529)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %737*/
	/*   store i32 255, i32* %mptr.01.i.i34.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__737_532)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %741*/
	/*   %745 = load i32* %scevgep156, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_547)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %741*/
	/*   %742 = load i32* %scevgep158, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_548)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %771*/
	/*   store i32 %g.0.i41.i.i, i32* %scevgep154, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__771_556)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %774*/
	/*   %777 = load i32* %776, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__774_561)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %774*/
	/*   store i32 %777, i32* %.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__774_563)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %788*/
	/*   %790 = load i32* %mptr.01.i1.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__788_574)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %788*/
	/*   store i32 %791, i32* %mptr.01.i1.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__788_576)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %802*/
	/*   store i32 %805, i32* %.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__802_594)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %816*/
	/*   %818 = load i32* %mptr.01.i1.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__816_605)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %816*/
	/*   store i32 %819, i32* %mptr.01.i1.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__816_607)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %833*/
	/*   %834 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__833_623)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %833*/
	/*   store i32 %835, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__833_625)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %841*/
	/*   %843 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__841_633)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %844*/
	/*   store i32 %845, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__844_636)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %849*/
	/*   %850 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__849_641)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %849*/
	/*   store i32 %851, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__849_643)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %857*/
	/*   %858 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__857_650)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %857*/
	/*   store i32 %859, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__857_652)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_in_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_in_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_in_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_in_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_in_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_in_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_in_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = huff_make_dhuff_tb_memory_controller_in_b;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_b;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_b;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_b;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_b;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_b;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_b;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_b;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_b;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_b;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_b;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_b;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_b;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_b;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_b;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_b;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_b;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_b;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Write4Blocks_memory_controller_in_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Write4Blocks_memory_controller_in_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Write4Blocks_memory_controller_in_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Write4Blocks_memory_controller_in_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Write4Blocks_memory_controller_in_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Write4Blocks_memory_controller_in_b;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_b;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_b;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_b;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DecodeHuffMCU_memory_controller_in_b;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_b;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ChenIDct_memory_controller_in_b;
	end
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   store i32 1, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_9)) begin
		memory_controller_in_b = 32'd1;
	end
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   store i32 %10, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_12)) begin
		memory_controller_in_b = main_loopexitipreheaderiipreheader_10;
	end
	/* main: %32*/
	/*   store i16 %59, i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_49)) begin
		memory_controller_in_b = main_32_59;
	end
	/* main: %73*/
	/*   store i32 %75, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_56)) begin
		memory_controller_in_b = main_73_75;
	end
	/* main: %84*/
	/*   store i32 %86, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__84_68)) begin
		memory_controller_in_b = main_84_86;
	end
	/* main: %.preheader.i1.i.i.thread*/
	/*   store i32 %96, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi1iithread_80)) begin
		memory_controller_in_b = main_preheaderi1iithread_96;
	end
	/* main: %127*/
	/*   store i32 %129, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__127_99)) begin
		memory_controller_in_b = main_127_129;
	end
	/* main: %143*/
	/*   store i32 %145, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__143_111)) begin
		memory_controller_in_b = main_143_145;
	end
	/* main: %158*/
	/*   store i32 %160, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__158_123)) begin
		memory_controller_in_b = main_158_160;
	end
	/* main: %.preheader2.i.i.i.thread*/
	/*   store i32 %189, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2iiithread_145)) begin
		memory_controller_in_b = main_preheader2iiithread_189;
	end
	/* main: %209*/
	/*   store i8 %214, i8* %210, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__209_159)) begin
		memory_controller_in_b = main_209_214;
	end
	/* main: %240*/
	/*   store i32 %242, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__240_178)) begin
		memory_controller_in_b = main_240_242;
	end
	/* main: %260*/
	/*   store i32 %262, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__260_190)) begin
		memory_controller_in_b = main_260_262;
	end
	/* main: %273*/
	/*   store i32 %275, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__273_199)) begin
		memory_controller_in_b = main_273_275;
	end
	/* main: %286*/
	/*   store i32 %289, i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_207)) begin
		memory_controller_in_b = main_286_289;
	end
	/* main: %286*/
	/*   store i32 %298, i32* %299, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_213)) begin
		memory_controller_in_b = main_286_298;
	end
	/* main: %286*/
	/*   store i32 %308, i32* %309, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_219)) begin
		memory_controller_in_b = main_286_308;
	end
	/* main: %286*/
	/*   store i32 %318, i32* %319, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_225)) begin
		memory_controller_in_b = main_286_318;
	end
	/* main: %286*/
	/*   store i32 %328, i32* %329, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_231)) begin
		memory_controller_in_b = main_286_328;
	end
	/* main: %286*/
	/*   store i32 %338, i32* %339, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_237)) begin
		memory_controller_in_b = main_286_338;
	end
	/* main: %286*/
	/*   store i32 %348, i32* %349, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_243)) begin
		memory_controller_in_b = main_286_348;
	end
	/* main: %286*/
	/*   store i32 %358, i32* %359, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_249)) begin
		memory_controller_in_b = main_286_358;
	end
	/* main: %369*/
	/*   store i32 %371, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__369_256)) begin
		memory_controller_in_b = main_369_371;
	end
	/* main: %442*/
	/*   store i32 %444, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__442_279)) begin
		memory_controller_in_b = main_442_444;
	end
	/* main: %459*/
	/*   store i32 %461, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__459_288)) begin
		memory_controller_in_b = main_459_461;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %502, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_349)) begin
		memory_controller_in_b = main_read_markersexiti_502_reg;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %504, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_355)) begin
		memory_controller_in_b = main_read_markersexiti_504_reg;
	end
	/* main: %read_markers.exit.i*/
	/*   store i8* %p_jinfo_jpeg_data.0, i8** @CurHuffReadBuf, align 4, !tbaa !8*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_358)) begin
		memory_controller_in_b = main_read_markersexiti_p_jinfo_jpeg_data0_reg;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* %507, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_359)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_360)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_361)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_362)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_363)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %532*/
	/*   store i32 %536, i32* %mptr.02.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__532_379)) begin
		memory_controller_in_b = main_532_536;
	end
	/* main: %546*/
	/*   store i32 0, i32* %mptr.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__546_392)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %549*/
	/*   store i32 255, i32* %mptr.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_395)) begin
		memory_controller_in_b = 32'd255;
	end
	/* main: %581*/
	/*   store i32 %g.0.i.i.i, i32* %scevgep67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_410)) begin
		memory_controller_in_b = main_577_g0iii_reg;
	end
	/* main: %637*/
	/*   store i32 0, i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__637_434)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %662*/
	/*   store i32 %666, i32* %mptr.02.i.i6.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__662_453)) begin
		memory_controller_in_b = main_662_666;
	end
	/* main: %676*/
	/*   store i32 0, i32* %mptr.01.i.i10.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__676_466)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %679*/
	/*   store i32 255, i32* %mptr.01.i.i10.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__679_469)) begin
		memory_controller_in_b = 32'd255;
	end
	/* main: %692*/
	/*   store i32 %696, i32* %mptr.02.i.i18.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_485)) begin
		memory_controller_in_b = main_692_696;
	end
	/* main: %706*/
	/*   store i32 0, i32* %mptr.01.i.i22.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__706_498)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %709*/
	/*   store i32 255, i32* %mptr.01.i.i22.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__709_501)) begin
		memory_controller_in_b = 32'd255;
	end
	/* main: %720*/
	/*   store i32 %724, i32* %mptr.02.i.i30.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__720_516)) begin
		memory_controller_in_b = main_720_724;
	end
	/* main: %734*/
	/*   store i32 0, i32* %mptr.01.i.i34.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__734_529)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %737*/
	/*   store i32 255, i32* %mptr.01.i.i34.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__737_532)) begin
		memory_controller_in_b = 32'd255;
	end
	/* main: %771*/
	/*   store i32 %g.0.i41.i.i, i32* %scevgep154, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__771_556)) begin
		memory_controller_in_b = main_767_g0i41ii_reg;
	end
	/* main: %774*/
	/*   store i32 %777, i32* %.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__774_563)) begin
		memory_controller_in_b = main_774_777;
	end
	/* main: %788*/
	/*   store i32 %791, i32* %mptr.01.i1.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__788_576)) begin
		memory_controller_in_b = main_788_791;
	end
	/* main: %802*/
	/*   store i32 %805, i32* %.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__802_594)) begin
		memory_controller_in_b = main_802_805;
	end
	/* main: %816*/
	/*   store i32 %819, i32* %mptr.01.i1.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__816_607)) begin
		memory_controller_in_b = main_816_819;
	end
	/* main: %833*/
	/*   store i32 %835, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__833_625)) begin
		memory_controller_in_b = main_833_835;
	end
	/* main: %844*/
	/*   store i32 %845, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__844_636)) begin
		memory_controller_in_b = main_844_845;
	end
	/* main: %849*/
	/*   store i32 %851, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__849_643)) begin
		memory_controller_in_b = main_849_851;
	end
	/* main: %857*/
	/*   store i32 %859, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__857_652)) begin
		memory_controller_in_b = main_857_859;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_size_b[1:0] = huff_make_dhuff_tb_memory_controller_size_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %502 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_348)) begin
		memory_controller_size_b[1:0] = huff_make_dhuff_tb_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_size_b[1:0] = huff_make_dhuff_tb_memory_controller_size_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %503 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_351)) begin
		memory_controller_size_b[1:0] = huff_make_dhuff_tb_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_size_b[1:0] = huff_make_dhuff_tb_memory_controller_size_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %504 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_354)) begin
		memory_controller_size_b[1:0] = huff_make_dhuff_tb_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_size_b[1:0] = huff_make_dhuff_tb_memory_controller_size_b;
	end
	/* main: %read_markers.exit.i*/
	/*   %505 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_357)) begin
		memory_controller_size_b[1:0] = huff_make_dhuff_tb_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_size_b[1:0] = DecodeHuffMCU_memory_controller_size_b;
	end
	/* main: %.preheader46.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_368)) begin
		memory_controller_size_b[1:0] = DecodeHuffMCU_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_size_b[1:0] = ChenIDct_memory_controller_size_b;
	end
	/* main: %IQuantize.exit.i.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %515) #2*/
	if ((cur_state == LEGUP_function_call_382)) begin
		memory_controller_size_b[1:0] = ChenIDct_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_size_b[1:0] = DecodeHuffMCU_memory_controller_size_b;
	end
	/* main: %decode_block.exit.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_399)) begin
		memory_controller_size_b[1:0] = DecodeHuffMCU_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_size_b[1:0] = DecodeHuffMCU_memory_controller_size_b;
	end
	/* main: %652*/
	/*   call fastcc void @DecodeHuffMCU(i32* %506, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_442)) begin
		memory_controller_size_b[1:0] = DecodeHuffMCU_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_size_b[1:0] = ChenIDct_memory_controller_size_b;
	end
	/* main: %IQuantize.exit.i8.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %scevgep119) #2*/
	if ((cur_state == LEGUP_function_call_456)) begin
		memory_controller_size_b[1:0] = ChenIDct_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_size_b[1:0] = DecodeHuffMCU_memory_controller_size_b;
	end
	/* main: %683*/
	/*   call fastcc void @DecodeHuffMCU(i32* %507, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_474)) begin
		memory_controller_size_b[1:0] = DecodeHuffMCU_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_size_b[1:0] = ChenIDct_memory_controller_size_b;
	end
	/* main: %IQuantize.exit.i20.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %646) #2*/
	if ((cur_state == LEGUP_function_call_488)) begin
		memory_controller_size_b[1:0] = ChenIDct_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_size_b[1:0] = DecodeHuffMCU_memory_controller_size_b;
	end
	/* main: %decode_block.exit24.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_505)) begin
		memory_controller_size_b[1:0] = DecodeHuffMCU_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_size_b[1:0] = ChenIDct_memory_controller_size_b;
	end
	/* main: %IQuantize.exit.i32.i.i*/
	/*   call fastcc void @ChenIDct(i32* %644, i32* %648) #2*/
	if ((cur_state == LEGUP_function_call_519)) begin
		memory_controller_size_b[1:0] = ChenIDct_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_size_b[1:0] = Write4Blocks_memory_controller_size_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_537)) begin
		memory_controller_size_b[1:0] = Write4Blocks_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_size_b[1:0] = Write4Blocks_memory_controller_size_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_539)) begin
		memory_controller_size_b[1:0] = Write4Blocks_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_size_b[1:0] = Write4Blocks_memory_controller_size_b;
	end
	/* main: %.preheader48.i.i*/
	/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #2*/
	if ((cur_state == LEGUP_function_call_541)) begin
		memory_controller_size_b[1:0] = Write4Blocks_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_size_b[1:0] = ChenIDct_memory_controller_size_b;
	end
	/* main: %IQuantize.exit.i.1.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %517) #2*/
	if ((cur_state == LEGUP_function_call_572)) begin
		memory_controller_size_b[1:0] = ChenIDct_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_size_b[1:0] = DecodeHuffMCU_memory_controller_size_b;
	end
	/* main: %decode_block.exit.1.i.i*/
	/*   call fastcc void @DecodeHuffMCU(i32* %508, i32 2) #2*/
	if ((cur_state == LEGUP_function_call_589)) begin
		memory_controller_size_b[1:0] = DecodeHuffMCU_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_size_b[1:0] = ChenIDct_memory_controller_size_b;
	end
	/* main: %IQuantize.exit.i.2.i.i*/
	/*   call fastcc void @ChenIDct(i32* %513, i32* %519) #2*/
	if ((cur_state == LEGUP_function_call_603)) begin
		memory_controller_size_b[1:0] = ChenIDct_memory_controller_size_b;
	end
	/* main: %.preheader.i*/
	/*   %5 = load i8* getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 1), align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_6)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   store i32 1, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   %9 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.loopexit.i.preheader.i.i.preheader*/
	/*   store i32 %10, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitipreheaderiipreheader_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.loopexit.i.i.i*/
	/*   %.sink3.i.i.i = load i8* %17, align 1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiii_22)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %.preheader.i.i.i*/
	/*   %23 = load i8* %scevgep174, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_preheaderiii_31)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %32*/
	/*   %34 = load i8* %scevgep175, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_42)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %32*/
	/*   %43 = load i8* %37, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_43)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %32*/
	/*   %49 = load i8* %44, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_44)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %32*/
	/*   %57 = load i8* %52, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__32_47)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %32*/
	/*   store i16 %59, i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_49)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %32*/
	/*   %64 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_50)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %32*/
	/*   %67 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__32_51)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %73*/
	/*   %74 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_54)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %73*/
	/*   store i32 %75, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_56)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %81*/
	/*   %82 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB__81_63)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %84*/
	/*   %85 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__84_66)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %84*/
	/*   store i32 %86, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__84_68)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i1.i.i.thread*/
	/*   %95 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi1iithread_78)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i1.i.i.thread*/
	/*   store i32 %96, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi1iithread_80)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i2.i.i*/
	/*   %105 = load i8* %scevgep199, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrphi2ii_89)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %127*/
	/*   %128 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__127_97)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %127*/
	/*   store i32 %129, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__127_99)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %143*/
	/*   %144 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__143_109)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %143*/
	/*   store i32 %145, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__143_111)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %158*/
	/*   %159 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__158_121)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %158*/
	/*   store i32 %160, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__158_123)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.us-lcssa4.i.i*/
	/*   %171 = load i8* %scevgep175, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa4ii_134)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %.us-lcssa4.i.i*/
	/*   %179 = load i8* %174, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa4ii_135)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %.preheader2.i.i.i.thread*/
	/*   %188 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2iiithread_143)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader2.i.i.i.thread*/
	/*   store i32 %189, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2iiithread_145)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph10.i.i.i*/
	/*   %199 = load i8* %scevgep169, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_lrph10iii_149)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %209*/
	/*   store i8 %214, i8* %210, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__209_159)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %209*/
	/*   %217 = load i8* %210, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__209_160)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %228*/
	/*   %229 = load i8* %210, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__228_167)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %240*/
	/*   %241 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__240_176)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %240*/
	/*   store i32 %242, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__240_178)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %246*/
	/*   %248 = load i8* %scevgep175, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__246_184)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %260*/
	/*   %261 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__260_188)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %260*/
	/*   store i32 %262, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__260_190)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %273*/
	/*   %274 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__273_197)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %273*/
	/*   store i32 %275, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__273_199)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %286*/
	/*   store i32 %289, i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_207)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %286*/
	/*   %297 = load i8* %291, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_211)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %286*/
	/*   store i32 %298, i32* %299, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_213)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %286*/
	/*   %307 = load i8* %301, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_217)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %286*/
	/*   store i32 %308, i32* %309, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_219)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %286*/
	/*   %317 = load i8* %311, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_223)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %286*/
	/*   store i32 %318, i32* %319, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_225)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %286*/
	/*   %327 = load i8* %321, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_229)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %286*/
	/*   store i32 %328, i32* %329, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_231)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %286*/
	/*   %337 = load i8* %331, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_235)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %286*/
	/*   store i32 %338, i32* %339, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_237)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %286*/
	/*   %347 = load i8* %341, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_241)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %286*/
	/*   store i32 %348, i32* %349, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_243)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %286*/
	/*   %357 = load i8* %351, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__286_247)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %286*/
	/*   store i32 %358, i32* %359, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__286_249)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %369*/
	/*   %370 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__369_254)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %369*/
	/*   store i32 %371, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__369_256)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %418*/
	/*   %420 = load i8* %scevgep180, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__418_265)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %428*/
	/*   %430 = load i8* %scevgep175, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__428_273)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %428*/
	/*   %434 = load i8* %429, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__428_274)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %442*/
	/*   %443 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__442_277)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %442*/
	/*   store i32 %444, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__442_279)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %459*/
	/*   %460 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__459_286)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %459*/
	/*   store i32 %461, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__459_288)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.split.us.i.i.i*/
	/*   %473 = load i8* %471, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_splitusiii_299)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %..split_crit_edge.i.i.i*/
	/*   %484 = load i8* %scevgep188, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_split_crit_edgeiii_304)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %read_markers.exit.i*/
	/*   %496 = load i16* @p_jinfo_image_width, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_312)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %502, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_349)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 %504, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_355)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %read_markers.exit.i*/
	/*   store i8* %p_jinfo_jpeg_data.0, i8** @CurHuffReadBuf, align 4, !tbaa !8*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_358)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* %507, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_359)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_360)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_361)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_362)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %read_markers.exit.i*/
	/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_read_markersexiti_363)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %524*/
	/*   %527 = load i32* %526, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__524_371)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %532*/
	/*   %534 = load i32* %mptr.02.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__532_377)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %532*/
	/*   store i32 %536, i32* %mptr.02.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__532_379)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %PostshiftIDctMatrix.exit.i.i.i*/
	/*   %544 = load i32* %mptr.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexitiii_389)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %546*/
	/*   store i32 0, i32* %mptr.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__546_392)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %549*/
	/*   store i32 255, i32* %mptr.01.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__549_395)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %decode_block.exit.2.i.i*/
	/*   %555 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_401)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %decode_block.exit.2.i.i*/
	/*   %552 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decode_blockexit2ii_402)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %581*/
	/*   store i32 %g.0.i.i.i, i32* %scevgep67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__581_410)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %585 = load i16* @p_jinfo_image_height, align 2, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_413)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %YuvToRgb.exit.preheader.i.i*/
	/*   %587 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_YuvToRgbexitpreheaderii_414)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %592*/
	/*   %594 = load i32* %scevgep92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__592_417)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %626*/
	/*   %629 = load i32* %.14.us.i.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__626_425)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %WriteOneBlock.exit.i.i.i*/
	/*   %635 = load i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_WriteOneBlockexitiii_431)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %637*/
	/*   store i32 0, i32* %scevgep91, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__637_434)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %654*/
	/*   %657 = load i32* %656, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__654_445)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %662*/
	/*   %664 = load i32* %mptr.02.i.i6.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__662_451)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %662*/
	/*   store i32 %666, i32* %mptr.02.i.i6.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__662_453)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %PostshiftIDctMatrix.exit.i11.i.i*/
	/*   %674 = load i32* %mptr.01.i.i10.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti11ii_463)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %676*/
	/*   store i32 0, i32* %mptr.01.i.i10.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__676_466)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %679*/
	/*   store i32 255, i32* %mptr.01.i.i10.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__679_469)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %684*/
	/*   %687 = load i32* %686, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__684_477)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %692*/
	/*   %694 = load i32* %mptr.02.i.i18.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_483)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %692*/
	/*   store i32 %696, i32* %mptr.02.i.i18.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__692_485)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %PostshiftIDctMatrix.exit.i23.i.i*/
	/*   %704 = load i32* %mptr.01.i.i22.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti23ii_495)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %706*/
	/*   store i32 0, i32* %mptr.01.i.i22.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__706_498)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %709*/
	/*   store i32 255, i32* %mptr.01.i.i22.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__709_501)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %712*/
	/*   %715 = load i32* %714, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__712_508)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %720*/
	/*   %722 = load i32* %mptr.02.i.i30.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__720_514)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %720*/
	/*   store i32 %724, i32* %mptr.02.i.i30.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__720_516)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %PostshiftIDctMatrix.exit.i35.i.i*/
	/*   %732 = load i32* %mptr.01.i.i34.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_PostshiftIDctMatrixexiti35ii_526)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %734*/
	/*   store i32 0, i32* %mptr.01.i.i34.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__734_529)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %737*/
	/*   store i32 255, i32* %mptr.01.i.i34.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__737_532)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %741*/
	/*   %745 = load i32* %scevgep156, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_547)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %741*/
	/*   %742 = load i32* %scevgep158, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__741_548)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %771*/
	/*   store i32 %g.0.i41.i.i, i32* %scevgep154, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__771_556)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %774*/
	/*   %777 = load i32* %776, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__774_561)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %774*/
	/*   store i32 %777, i32* %.01.i.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__774_563)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %788*/
	/*   %790 = load i32* %mptr.01.i1.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__788_574)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %788*/
	/*   store i32 %791, i32* %mptr.01.i1.i.1.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__788_576)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %802*/
	/*   store i32 %805, i32* %.01.i.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__802_594)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %816*/
	/*   %818 = load i32* %mptr.01.i1.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__816_605)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %816*/
	/*   store i32 %819, i32* %mptr.01.i1.i.2.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__816_607)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %833*/
	/*   %834 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__833_623)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %833*/
	/*   store i32 %835, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__833_625)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %841*/
	/*   %843 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__841_633)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %844*/
	/*   store i32 %845, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__844_636)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %849*/
	/*   %850 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__849_641)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %849*/
	/*   store i32 %851, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__849_643)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %857*/
	/*   %858 = load i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__857_650)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %857*/
	/*   store i32 %859, i32* @main_result, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__857_652)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if (reset)
		return_val <= 0;
	else if((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %872*/
	/*   ret i32 %873*/
	else if((cur_state == LEGUP_F_main_BB__872_663)) begin
		return_val <= main_872_873;
		if (start == 1'b0 && ^(main_872_873) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../../boards/CycloneII/DE2/top.v


module de2(
	input         iCLK_50,
	input  [17:0] iSW,
	input  [ 3:0] iKEY,
	output [17:0] oLEDR,
	output [ 8:0] oLEDG,
	output [ 7:0] oHEX0_D,
	output [ 7:0] oHEX1_D,
	output [ 7:0] oHEX2_D,
	output [ 7:0] oHEX3_D,
	output [ 7:0] oHEX4_D,
	output [ 7:0] oHEX5_D,
	output [ 7:0] oHEX6_D,
	output [ 7:0] oHEX7_D
	//output [19:0] oSRAM_A,
	//output        oSRAM_ADSC_N,
	//output        oSRAM_ADSP_N,
	//output        oSRAM_ADV_N,
	//output [ 3:0] oSRAM_BE_N,
	//output        oSRAM_CE1_N,
	//output        oSRAM_CE2,
	//output        oSRAM_CE3_N,
	//output        oSRAM_CLK,
	//inout  [ 3:0] SRAM_DPA,
	//inout  [31:0] SRAM_DQ,
	//output        oSRAM_GW_N,
	//output        oSRAM_OE_N,
	//output        oSRAM_WE_N
);

wire clk;
wire nReset = iKEY[0];

assign clk = iCLK_50;
//clockGen clockGen(
//	.inclk0(iCLK_50),
//	.c0(clk)
//);

reg [3:0] rKEY, rKEY_d1;
always @(posedge clk or negedge nReset) begin
	if(!nReset) begin
		rKEY <= 0;
		rKEY_d1 <= 0;
	end
	else begin
		rKEY <= ~iKEY;
		rKEY_d1 <= rKEY;
	end
end

wire start = rKEY[1] & ~rKEY_d1[1];
wire finish;
wire [31:0] return_val;
wire reset = ~nReset;

reg        rFinish;
reg [31:0] rRet;
always @(posedge clk or negedge nReset) begin
	if(!nReset) begin
		rRet <= 0;
		rFinish <= 0;
	end
	else if(finish) begin
		rRet <= return_val;
		rFinish <= 1;
	end
end

assign oLEDG[8] = rFinish;

assign oHEX7_D = HEX2SEG(rRet[4*7+3:4*7]);
assign oHEX6_D = HEX2SEG(rRet[4*6+3:4*6]);
assign oHEX5_D = HEX2SEG(rRet[4*5+3:4*5]);
assign oHEX4_D = HEX2SEG(rRet[4*4+3:4*4]);
assign oHEX3_D = HEX2SEG(rRet[4*3+3:4*3]);
assign oHEX2_D = HEX2SEG(rRet[4*2+3:4*2]);
assign oHEX1_D = HEX2SEG(rRet[4*1+3:4*1]);
assign oHEX0_D = HEX2SEG(rRet[4*0+3:4*0]);

top top_inst(
	.clk(clk),
	.reset(reset),
	.finish(finish),
	.return_val(return_val),
	.start(start)
);

function [7:0] HEX2SEG;
	input [3:0] num;
begin
	if     (num==4'h0) HEX2SEG = 8'b11000000;
	else if(num==4'h1) HEX2SEG = 8'b11111001;
	else if(num==4'h2) HEX2SEG = 8'b10100100;
	else if(num==4'h3) HEX2SEG = 8'b10110000;
	else if(num==4'h4) HEX2SEG = 8'b10011001;
	else if(num==4'h5) HEX2SEG = 8'b10010010;
	else if(num==4'h6) HEX2SEG = 8'b10000010;
	else if(num==4'h7) HEX2SEG = 8'b11111000;
	else if(num==4'h8) HEX2SEG = 8'b10000000;
	else if(num==4'h9) HEX2SEG = 8'b10010000;
	else if(num==4'hA) HEX2SEG = 8'b10001000;
	else if(num==4'hb) HEX2SEG = 8'b10000011;
	else if(num==4'hC) HEX2SEG = 8'b11000110;
	else if(num==4'hd) HEX2SEG = 8'b10100001;
	else if(num==4'hE) HEX2SEG = 8'b10000110;
	else if(num==4'hF) HEX2SEG = 8'b10001110;
	else               HEX2SEG = 8'b11111111;
end
endfunction

endmodule


module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

integer i;
reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams




//voter


//port drive

initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
