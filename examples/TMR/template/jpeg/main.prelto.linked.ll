; ModuleID = 'main.prelto.linked.bc'
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"
target triple = "i386-unknown-linux-gnu"

@hana_jpg = constant [5207 x i8] c}\01\02\03\00\04\11\05\12!1A\06\13Qa\07\22q\142\81\91\A1\08#B\B1\C1\15R\D1\F0$3br\82\09\0A\16\17\18\19\1A%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\83\84\85\86\87\88\89\8A\92\93\94\95\96\97\98\99\9A\A2\A3\A4\A5\A6\A7\A8\A9\AA\B2\B3\B4\B5\B6\B7\B8\B9\BA\C2\C3\C4\C5\C6\C7\C8\C9\CA\D2\D3\D4\D5\D6\D7\D8\D9\DA\E1\E2\E3\E4\E5\E6\E7\E8\E9\EA\F1\F2\F3\F4\F5\F6\F7\F8\F9\FA\FF\C4\00\1F\01\00\03\01\01\01\01\01\01\01\01\01\00\00\00\00\00\00\01\02\03\04\05\06\07\08\09\0A\0B\FF\C4\00\B5\11\00\02\01\02\04\04\03\04\07\05\04\04\00\01\02w\00\01\02\03\11\04\05!1\06\12AQ\07aq\13\222\81\08\14B\91\A1\B1\C1\09#3R\F0\15br\D1\0A\16$4\E1%\F1\17\18\19\1A&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\82\83\84\85\86\87\88\89\8A\92\93\94\95\96\97\98\99\9A\A2\A3\A4\A5\A6\A7\A8\A9\AA\B2\B3\B4\B5\B6\B7\B8\B9\BA\C2\C3\C4\C5\C6\C7\C8\C9\CA\D2\D3\D4\D5\D6\D7\D8\D9\DA\E2\E3\E4\E5\E6\E7\E8\E9\EA\F2\F3\F4\F5\F6\F7\F8\F9\FA\FF\DA\00\0C\03\01\00\02\11\03\11\00?\00\F5\AF\00Z\EA\17\B3\AF\8A<O1\F1\A4z\9B\CF\A9\E9\BE\22\B0g\16zlV\F1*[\DA\AC\0CI,\C7\CC&@\19d,x\E3\0B\C0\E8\BA7\ED;\A3M\E3M;[\F1\7F\855M\06\D2\D6\E2\F6;\B8D\F0\DDXKr\04\883\90V(\90<\98,U\BEQ\EC\BF*x3\F6\8B\F1\0F\C2_\88m\A4E\AC\EAg\C2\D1\DE,q\DA\C3u\98#\B6\91\8C\8C!\8D\B7\04C\BF  \00\02p:W\B0\F8\17\F6\C6\F0\C0\F1a\F1G\88\FC1,\1A\BF\8E\AE#\B6\BA\D5\12\FF\00\CB\B6\D2t\F5\8E;h\A4r\DC\C8\04\B0\B3HY@\0A\C4\8E\A5\1F\B7\0D\8E\A5\CF\19)k6\9B\BE\9A5\B7\9E\BD\FE\F3\17$\D2\E8}\0B\A9j\16\1E5\F8\18&\F1N\81\A4x\96MF\DA;\E9-t\EBi\EF\EDu\0ByD[\AF\E3\8Au\8EH\90\0D\D3\18\93,\81AR\E1\81?(\F8\93\F6a\F0\AB\93\A6\E8\CF\ACK\7Fs1k;\AB\0By/t\BB\A8\E5]\E9\11\5C\97\B7u\1F.r\C1\80\1DI\C0\FA\AB\C5\9E\0A\BA\D7\BE\C9\1B\F8\AA\D6\EEAcu5\BE\95gk\1D\C5\94\93\88\D53\05\C7\DD\B7<C\22\92\E1\882/(^\BC'\E1\87\C5O\8C\B0|G\82\D3\C4cV\9FE\B4i-f\D2\ACm\12[\95s\84\86m\EB\F2\ACFV`\1D\9F\0EU\8F@q\EA\CA\18Z\8B\92\B2Ml\B4\F4\D2\FD\1D\FF\00\22\BC\D9\F3O\C2\CDC\C7\1F\03\BE%\E9^+\83E}(C\A8\BF\87\EFn\AE\AD\9F\EC\F1\C9$\8A\B2\C5\B9\86\03\AA\ECoP;W\D6\1F\B5d+`\9AE\97\88\FC\09\A0\9B]P\C5\A8\B6\A5\16\9E\0C\DFhRCB\D2\E0a\F2\01 \9EGn\E3c\E1o\C3/\09|E\B6\F1/\8A|u>\BFn\D6~6\D7\E6\B8\85T\BA1i\96#\94\19\8D\DC(d%y\04\B1\07\1C\8E\B7\C3\FE(]Am>\0A|J\B5\D4\B5\D3\A9\D9\DF\ED\D4.\ED\A11j\91\C5\B5D\DEd` fY\10\02\83vv\93\8E\B5\E7R\C0\CA\AE\0EXjS\B7:\DE\D7\B5\FA|\CC\B5\94O\84<I\06\B3\ACG}\AB\5C\DA\AC\96\9206\A8\17\E4\B7\80\1C\02=s\EC;\F1\C5i|!\F8\07\E2\AF\8E\1A\F3\BE\9D\AC\DB\DA\C3\A4_Z\A6\A1n\087\11\D9I\9F\DFD\87\87;\94\A6\DE\C4\E7\9C`\FD\11\F1\13\E0\9F\82</\E1\F7\F0W\87m\AE\13Y\F0\ED\BCz\C5\AD\C5\C9\95\EE\1BO\09\FB\D5\B8\91\9B\CB~Y\86\11r\18\02\00\C1\AF\09\F8}\E1o\88V\9E;\8F\E2\0F\C2-@K<\12\AD\AC\D0)>K\DC\05\12$\05A\07k\0EA\CF^\87\9C\0F\03\0F\95\D5\C1b\A1N\B2RMtv\FC\EC\F4\EA\EC4\EF-t\B1\CE\FCm\F8\0B\F1\13\E1\7F\89\B5K{\AB5\B9\D2\22\BC[}>\EAX\D6)o\22\C2\95m\99\E0\E0\95=\06S#\AE+\99\F1w\81g\9B[\82\E6\C3M\91U\EC\95\B7\05\C0F\F9\BA\FE\95\EC?\17>>\F8\EB\E2\B7\8Auo\02\F8\DBQ\B7\D1om\8A\DB\C3k\0C*\B1\F9\E8\A0\EDgpd\CE}\FF\00\A8\A6|.\B6\F1\CE\B1\E1{\CB\1F\16\E8\B33\08d\FB-\D2[\B3)t\18 \B0\18\EF\EB^fsVP\C5?\AB\A7\EE\E8\D3\F3\FC\D7\99\A2i\E8\D9\F3v\9Bm\A8h\B7\D1\DDj\9AD\B3$3n\90\94;[\19\F5\EA+\AA\7F\11\F8vWi\17E\DA\1C\96\03j\F0\0F\E3Qj\BA7\8C[u\F5\D5\B5\CB\DA),\E2<\10\07Q\909\EE?\ADr\0F\1D\E1v)m1RN8#\8A\BAx\87k\E8_;\A7\A2G\AF\FC$\F8u\17\8En\AFo\F5\DD[K\83O\B3\B8\D2\AC^9\E4Xo$\8A\E2\EE\18D\D6\CA\E3\1B\11X\A3\15c\B0\B4}\B1\9FL\F8\A1\FB?M\F0\EF\C1V\97\FA\C6\89\F6\BD\13S\B3?\D8\BA\EA\98\18:\CD\03M\F6y\C0a\221\C6\E5#1\B9s\80K(\AE+\E1\BF\C4\8D[\E0g\ED\10\FE\13\F0\D6\A6\97^\16\83V\1Ar?\88\A5\FB'\D9,\AE\1E0\F2y\B20[`\AA\CC\CC\DC#\A2|\C3\A1\1FP|F\F1\EE\81\E3Mc\E2.\91\E1\BDoC\D4\FC\05\A0\F8j56\F1_\DB\CDay\AF\DD\C3!\86KI\1C\C8\B1\A5\BC,\F3J\B1\15_\B50\0F\B5\D0M_K\83\8E\1ExX\CA\1A\BB>\8B\AAo\CE\EB_\91\CE\E1k\A7\B8\BF\095_\88^)\B0\F0\96\A1\F1\93Z}WL\F1N\995\C8\B1\93X[x\E3\D3\E1\B6\1E]\E1Y\08Y\1C\80\B1\BA\E1T,\8D\B9\C3\90k\85\F1?\83\FC-\E1O\07\FC]\D5\FE\19\FCn\BB\D4|)\A4[\A3\C9\A5A\A5\BD\F4\F1\86\8D\02\B4\170L\825\F3\83\C4fua\09\8C\97iO\CD^%\E0\FF\00\DA\03\E2\87\84\ED\CC\9An\AF\0CI\E1\BD\1E\FF\00\C3\16\8B=\A2\C8#\B5\BC\1B\C6\C0\C5p\C2eP\C5\9B\05B\8CeJ\BF\D8\BF\00a\F8j\9E\11\F0\D6\9D\E2M\1F\C3\1An\B3\A6\DAG\A4\A0\B3\D7\AD\22\96{P\88\D0\A4r\CF,r,\B2\0F \14$o\957+H\85V-\B0S\86c\15\DA\1B\B6\9D\F5[][\C9\EF\AA\DCw\BA\B9\F3\AF\EC\CD\F1sT\D3<K\E2\AF\0C\CD\E1\0D\0A\FEC\E1\8DOS\B6\D6g\D2\FC\EB\BB\1B\B7\B21\ED\92l\11$w\12\98\D5\84\D8\05\C0\C3\1C\98d\F5\EF\8B\1F\17\BC-\A5x\A7\C0\9E,\BC\D2u?\0DxN\E8\8D[I\F1n\9Fl\D2KglaI\A1\D3\84 \B4N\A1'A6\E4\95\C8VU\89>\FAu\DF\13~\1Bh_\0B~\1D\CD\AB|\1A\9FH\16\F0\DE\DD\E8\FE'h\A4\82\E2}R\01 .\CF\1C_\BB\17Q\F9\9B7H\81\A3B\A2?/\E4e\E1\AC\BE x\93J\FD\9D\FC!\E1\7F\08xr\E2\0DN\E6K\9B\09u\B9F\FB;k\BBY\96\D7\CE]\E1\97sG\22\C2a\0A\A5\9F-\B7j\C8\E1a\E7W\0D(Q\A5S\9B\DD\BE\9EM-\15\FEW\D0\13\E5\F7d\B5G\B4\BF\8A\BE\1C|a\F0\A6\A6\DAn\A3\E1?\17\E2\C2V\D2\EDm#\B8\D2\B5\18o\17\CE\8E\7F1&gh\C4\CCG\96\EE\9BJ\C8\BB\81\18\91\BEx\F8Q\1E\B1\F03\C4\F1\F8\A2?\0E\1F\15\E8\9E<\10\BE\92\D1\C5-\B4k\229`\E8\85I\F9\06\EC\B9\00aA\CA\F7\E0\BCY\E3}O\C4>\1F\F0P\F8h\B6\B6z\A4\FAy\B7\D45Km>\0B\09,.-\94[\0BQ,gv\C5\8D\0Ch2Y\91W\92\0E\17\D9\FE\16\FC\5C\D4\FE%i>\09\F0?\C6\AF\14Xi\16\BA\AD\DD\ED\C4\17-\1A\C1>\BB$\8D$\96\CA\E5\00UY\DAH\F0\AA#YT\C2\18\16h\98c\88\CCiT\94SO\9A\FA?7m5\EC\9B\BA{|\8B\94Z\D5\1E[\F1\BF\C0\E3\C6?\1Dc\F1W\8C\FC=\ABj\1E\10\B5E\B8\9BJ\D3\9A+{\D8\92M\A2I\96h\F1\E6\95%\18\82A#\1E\A0\1F\A3\93[\D0?g=6\D2\185\1Dt\F8V\DDc\B7\BBcz\935\BD\C3\8D\F0\0C\9C\B6F\C6\DC1\B4\EF\03<\F1\F2\8F\C5}\7F\C6\BF\0E<c\AFx k\8E\9A\CC\16\E8/\05\CCj\EFw\1C\CB\E6\B8\CA\91\1A`0\04.9\C0\18\0A\B4\DB\9D\1F\C5\91\FC\1A\B7\D7\AE~\D6\BA\1F\89m\A32\DD\5C\93<l\D1\B9u\D8\D9&&\0C\A4\15\EB\80x\CA\A8<\F5\F3\08\C2SS\83rW\BF[.\97k\A6\DA\8D-9\91\8B\FBE\EB\7F\08d\D6f\F1\0F\C1\8DFE\8FW\BB72Z\012Gj\C7\E6\90\04\93;T\B9a\B0p\0E\ECq\8A\E2\AD\F5M-\E0\8D\E7K3+ .A\1F{\1C\FE\B5\CD\D8\E8v\FA\CC\1A\84\CF+F\22\965\0EO\0A\A5\B0\C4\8F\A63]:\F8#\C1\B1\01\19\F1\CD\BEPm\E0\8Cq_5\88\9D\1CD\DC\9A\E5\F2_\D3\1Cj$\BD\E4hx\8BD\F0\EC\DA\FE\BD\AF\DB\C7}v\FA\143\D9j6\80,r\C1; \84]\C6\1CbH\C5\C3\10\F1\FC\AD\1C\8F\B86\D9\03/\A7\FF\00\C33\FCg\F0\B7\84-\B4\81\AFF<\0B\AF\DB\DBk\17\D70D\B761}\A6(Q\AE\15#o2\E3t-\1Cp\BE\E8\C7\EFH\DC\8C\ECOU\F0\9B\C0^$\F8\EF\E3s\E2?\8A\DE\0F\D2\BCg\E1\D1\A7Z\E9W\DA\9F\9Fqc\A9\D8\8Bv\91b\B9\83\0Cf\95\D1\DAHK0\C9\8A\DD\17\92\BE[}W\A9\DD|=\D0t%\F1&\9Fq\AC}\8F\E1\D6\B5\A9Y\BD\B6\96\A2\CE\0Bx\84\9B/\8D\EA\A1+9B\AF\BB\04\0C\DC\B1\95v;\13\F4X\5C\05\E3*\94\FD\E8\B7\A5\9D\B4OU\D9\AD\F6\ECe\0Fy\DD\BB\1F\9D\BA\97\86\F4\AF\0F\FCo\D6\FC1m\E2KX\B4m3V.\D7\9A\B5\A1x\A6\8E9\BE\D1\E6\CBn\84\99#\DF\13n\0A\C3\F7{\B3\91\95<\FF\00\85\BCY\E1/\05x\F6\DF\C5.\FAu\C5\AD\B6\A3\1E\A7x4\DD\AB\05\B4\B0\DC\BB\C5\1D\BC2\A3\06\0A\C69U$\12!\87pq\94ll|r\F8\BBs\E3/\8A\1A\CC\B6\B7\16\17\F6\10\EA\DA\8C\B6\8Dnd\B8\B7\9DRi\13z\97fa\14\D1nc\FC;]I\1DZ\BE\BF\F8\11c\F0[\E2\AF\82\FC\03\A7^[j:\B7\88\FC*~\CBk\ACjJ\B6\BA\B5\94+\14\A0\B43\08\1A)\92\22\1B\CAG2\15\F2\B2K\BCjB\C0a\AF^q\A3-\22\EE\BE\FB=/}?\22i\DF\E18?\89\DF\B5\E7\88\AD|\14\9F\0F\BC\15\E0\AF\B0x\A3]\BF\9A\F7Q\83T\B33,\FAu\D8\DDmv\AD\03\A4\91\5C#\14\81\D6BWq&0\CAvG\B3\F0\83\F6\BE\D1\87\81c\B4\F1v\AB\A7\F8~\EBF6\16\B3XY\E9A\AD\F5%x\A5\8E\E2\F3P\88!\CC\B1Lb\90\C7\A7\B47\13\CA\E4\BAl;\E0\D1\F8E\1F\C6\FB\F7\F8\EB\F0\DA\F7\E1\F7\855\9F\12\DCj\0F4\96v,[M\92{\BD8%\893\19U\E4\B6\95 (\9F0e\F2\E52\FE\F0\92\BE5\E1\BF\D9\E7\C5\B7\82o\05\E8\B0iz\D6\A5v\91I\7Fk\7Ff\22kK=\CC\B2^\88\E4\1Ed\8B\1C\8A\B1\AE\C0\AD\BEdwX\95\B1]\15\E1\8B\A7(\FDV\F2[[kk\FDm\F9\1A7\AD\CB\BE?\93\C2^ \9F\5C\F0-\B6\B1u\AEi\B7\9Fek\8F\14\DD\DB\C9\0D\D2\DE\86P\B0\A5\B9(c\91mb\86\09\8B\87\91v\CF\08'1\AC\1E{\A1\F8\FF\00O\D0\BE%Z]x\F3P\BB\F1F\A4\B3Ci,\AA\D0%\8Ai\EC\88\B2C$1)\8Cl\8DB\18\D0++\AB.U\94\14\E8\BE\12\E9\16\13\F8\8B\C3\BA\A6\BD}w\F1\17[\D6$m\17J\D1,\EE%\B4\B7\96\F2e\8E\D2\07\B8\D5.\15E\ACB\08`+\B0K#\83\82\109a\EB\7F\0F\BFf\0F\01k\DAF\9F\E3\0Dg\C7\11\F8v\DAk\FB\AB}b\DE=z\D9\ACmZ{\B9\A0\B7\F2\DEEK\88\97\CFkr\AB1\DE\EB!G\D9*\18_\9AXj\D9\8E!\D4\82IG\A3v\DD\F5z\E9\F7\BB\5Cm\CDI4p\9F\B4L\D6\DF\1A4K\7F\1D\F8\1Et\D5-4=:\DBQ\BB\8AV\8A\19\ED\1Eg\9A'\B5D\00O*,P\A4\8E\8F&\E8\FC\E8\88/\92\AA\9F\06\FF\00i\EF\86\F3\E9\93\FC!\F8\89\E1\8BX\BC?\AC\A2[L\EDq\04V\B0\CAT\01(\8A\0Bx\8Ce\9D\E4b\E6F#\E5\0B\B7\15\85\F0W\C0z\CD\FF\00\C4\AB\9DM\F5K[\BD\17N\BC\D44\D5\8FV\BD{\08\B5;t\9C\C2TO\83$\8C@$\AB#,`\B0(w\15\AF\A0\FE*|\19\F06\A1\E2O\16x\97\C2\16\DAe\96\8F\A5h\10jW\1A\B4\D6\90\B6\9Fr&3\AB\B5\AC\FB\85\BF\96\BES,\9F\BD\01\1D\19I\DB\90j\8F\B6\C5M\D4\83I\FC-=S\B7Eu\B7M\CB\A74\9D\E4\AE|i\A2\D9h>\1F\F1\C6\A3\E1\9DKN\B9\BC\F0\A4\B7\93\C0\93\99\95\84\A03\18\D0H\BC6U}\89\EB\C5t\D2\F8\AB\C1\91J\F1\DA|9\F0B\C0\8CV%\97Q\888@x\0C3\D7\18\CDrwShv\DAe\AD\87\87\B5\18o\D2=jb\F7\A2\DDbF\90\A32\C4\02I\222\8C*\EFV \EF?\DD9\E6W\E0\ACZ\8A\8DA$\D5Qn\87\9C\15lr\00np\0Ey\1C\D7\CB\D5\A3\05^q\C4>F\9FGu\BF\935\E5\E4v\86\D6Ok\EEwZ\7F\EDC\E2\CF\0E\FD\A2\FB\C2z\80\D3u;9\A3\B3[x\96H\A1\D44\FF\00:96\F9\8A\DEnL\B0\A7\98\85\D7zH\FB\B7|\CB_[x\EB\E2\B6\BB\FBA\FC9\F1\F7\86$6>\1E\D3\A7\D2\B4\F5\86;m\5C\BD\E24\862\C8b$3\C4\B3G*\17\09\1Al\94\A9F\12\B9\87\F3W\C5\96\D0\E9\1E(\D5\EC\F4\E0\F1Ei\AB\5C\C1\0F\CE\CC\CA\91\CA\E1\06\E2I8\00rNx\AFG\F1W\8E<K\A3|(\F8i\E2\CD>\F6\14\D5\A7]G}\D3\D9\C3#\16\8E\F2\E1Q\F0\E8@u\120\0E\06\E1\C6\0F\CA\B8\FA\DC\1C\1E\1E\94\A9\D3\D9kn\8F\A3[7gs\99F\D7G\0E\F7\EF\A7\B2\88l\A0\86\E2\13\22;\A4\8CX\1F\99J\19\14\ED`F\FF\00\BB\F2\B2\B7\19\19\07\DC\B4\9F\8A_\19\FC#\E1\8F\0Cj\B3i\D7v\9A5\95\C4phS\CB\A0\BC\16\F2\DB\B2\CF\89\8C\B1*4\DB\D5\AEB\E6BY\BC\D2\8A[\CCj\F1\ED*\CA\DBV\F07\89|A\A9\C6n\B5/\ED\0B47R\B1i\08\9AW2\FC\C4\E7,FI\EB\C9\F55\FA\F1\FB.x3\C2\9F\13\7Fd\AF\87:'\8E\F4\0B=_O\F8\85\15\FE\99\E2;ic\0B\1D\F46R\5C\C3h\DBS\02)\A2\8E\DE\DDRx\F6\CA<\88\8E\FC\C6\A4pP\9DE7\1AN\DD\1F\E0\D7\AE\B6*\14\D4\93g\8B|3\F8\BB\F0?\C4\BF\B3\DE\8D\1F\8F<O\06\90\DA\95\EE\FF\00\14\E9\BAN\9Ds\15\C6\9B\22j)\9B\D9\EEm\22O.<\CB\04\D2\CB\88\F7<\FBQ\BC\C2\AE\9BZ\BF\8D>5k>?\F1>\B7\F0\E7\C4Z4zM\96\9Bm\E2\1B\0DRG{\8D?\C4\17\82&h\AD\C4\F7\12\C7o\1C/\14R,\D7^c\15\F3\90\0Cob<\07\F6\8F\F0\AE\8D\F0C^\F1\85\9F\C2\A8\EE\FC;\0D\B7\C2\FD*(\D6\DA\FAv\F95\0DS\EC\97\AA\DB\DD\B7\89afR\1B8c\BCa\C0j\FAO\E05\85\BE\8D\E0-%4\FF\005!\B7\D3|oa\15\BC\93<\B0,\1An\BFg\05\92\F9NJf8\DEA\BB\1B\98\BB\B3\96f$\FB8:\8E\A5G*\9B\AB'n\BA\FF\00\C1\B9J-\FB\B7\D8\F9\CBE\D6\FE#|$\F1\B7\8B~(|=\F8qi7\87d\B0\D5\AF\F4m*\EBQ\8AX\F4\DD\08$\91\A3\C3\E5\B1w\8E\19dYf\B6\8F'm\BBE!\1EZ\C8\BC\B7\EC\E7\F1\C3\C4\B6\9E9O\16\FCK\8EMkE\D5dkKa-\9D\B4p\C7*\5C[L\D3\C4\1B\08\B2\A9\B5\85\9As\CA<0\B1\93x\DD_\A1\BA\BF\86\B4+O\8CV\DA\AD\BE\9B\12\5C\E9\DE\0D\D4-m\9B\92\AB\14wZd\88\85O\CA\C1]\98\8D\C0\E3s\0E\84\8A\F8\03\FE\0A\0Fikc\FBTj\90X\C0\96\C9\A8Yi3\5C\88F\CF2G\0F\0B\B1\C7s\1C1\A9=N\DFRI\BCm9e\EB\DA\D2w\8A\96\CF\D3\CA\DD\CC\B9\A4\9D\AEV\F1/\C4-/[\F0\DD\F7\89\A5\BC6\DE\22\D5$}CR\98\EE\9E\DFMiT\ECX\D5\DBj\DDJ\C0\05n\91\A8\DF!\DD\B1Y>\1D|~\F8\A1\A3\F8\07\C3~\1F\F0\D4^\1A\B7\F0\7F\84o\AE\BE\DD\1D\FC\B6\B6\F6\BA\A4W\1B\D9\AC$\86w\DFu\0E\C9n\01\11$\B27\DA0\E1\D9\93w\85\F8\8FR\D44-Z\DA\1D\1E\FA\E2\CE8\D4\00\B0\C8Ts\C9'\D4\9C\9C\93\C9\EFW\EE/&\D7t=kR\D4\84oua0H%\8E%\84\80f*wl\03\7F\03\F8\B3\DC\F5&\BER8\BA\91\93\C4\C5\D9\CF{i\BE\BF\99\973VH\B5\E2\1B\9F\09=\ED\CD\8F\86t\D3\A5\E8\E6\F1\EE\ED\AC-\E73-\B9n\06\E7 \09%U\C2\B1\8Cye\95\CAnR\09\F5\1B\1F\DA?\C4\96VV\F6v\FF\00\0D\B4\C6\8A\08\92$;\E3\5C\AA\80\07\1B\B8\E0t\AE7\E2/\86t\1D\1FA\B4\9BL\D3\22\B7p\96\E8Y3\96\049\CBs\F3\1C\A8\E4\E4\F5\E7\93^\CD\E1\8F\02xZ\F3\C3zM\DD\CE\9A\EF4\F60I#}\A6Q\B9\9A5$\E06:\9A\F01R\85G\CD5}^\F7\FD\19\DDJ\B5X\D4\92R?\FF\D9", align 1
@hana_bmp = constant [3 x [5310 x i8]] [[5310 x i8] c"\BC\D1\BE\99\8Fg\95\C0\AC\9D\BD\C0\A4\C3\BC\B5\C1\A7\BC\D2\B1\8E%\0A\1F('4 \1D\22\0E\0A\12\0E\1A\07l\B5\BE\B5\7F[cI$\0B$B]ZA3 $#&58#\19\19 1)6 \1F\1F\22\18\19&+ \0B\09\0D\14\19\17\11\10\12\1E\19!-$\1D\A6\C1eZ\AA\81\92\D5\A9X\91\C7\CF\A5\89q\C9\9B\8B\D1\BF\C9\ABg3\1D\11\09\1D+!$\18\0E\18\18\04l\B9\B4\BA\BC\B7\C3\C0l0KgUE1.7,*23)\1E\12\0E\1E006\22(&$\1F\1C47-\0F\0E\10\17\15\0F\0B\11\19\1F\1A,I\22'\91\84.\B5\CD\D1\BB\AA\8C84\8Ez\B0\C6S\9A\D7\C8\D1\B8\A4\C4\AE\807YL\1C&/.#\1B'\1F\10:t\89\A9\B8\B4\AF\A6xI[aT $>:()0- \14\0F\10\0C\1B\18$(\10\22\18\16!=A7\12\15\16\1D\13\12\0F\15\1C!\1D0K$&o\0F>\E2\CF\BB\CD\BC=\02\0D\1F\09i\8C1\18\BF\D1\C6\BA\B8\93uY:\8A\B3\87>43\17\14\22\1C\1A\0A*p\97\9D\8Bzq6OT`.\13 5:(('&\15\15\11\17\06ne\0E\12\07\0F\1B\07\1B@F?\16\1E &\16\08\0A\12\14\1A\1B+:,(\8B\8C\81\9Cq\B1\D7\AEoe$\0E\14\8BbjQ%a\DF\C8\D9\95\99\94\83F\92\B2\AC\83P\0D\11+\10\12\14\18b\82\A3\90UGQNXD\1D'8;1()'\14\0B?P\01Y\B3\BA`\00%\0F\15\14\1B@LI\1D\1F!+\22\0D\0C\13\10\10\0E\1C&<2\B3\C4\D9\847y\D5\B4\B1\B7\AEf\A1\B6\8C\93\C5\CE\A4\D6\D9\AF(\8D\AE\B7{Daw{~1\15'\11\17\1C\0E{\95\C2\C1_KIF?;207:*06 $\0CU\9Fn}\B1\BB\89\196:7\12\13;ML\22\1E 0/\22\12\0D\0D\0C\05\0C\1249\88\86\AF\D6\86\A1\BE\8D\B1\BD\8D\A4\CB\B3\B9\90I\8D\CE\94\B5\C0qE\95\B0\8DtS.epO\1F\19(\1E\1A\0Cb\A2\C3\D7z7A=D@.DACP8$,/\1B7\B1\C8\AF\A9\B2\9Cr~k=.2<NL.*0;:-\19\14\16\1A\13\13\0F8:)r\C4\C3\D0\C5\BA\B0\AE\CCy\88\D0\CD\C9V\0C\BE\B4\B1\94\B2\DD\91a\92\88\99\A9\8A\93\BF\A79/\A8|!\056\BD\B4\C5\BC\88D6?2NSJPZ:,<-,\12\80\C2\B0\C9\CB\C4\AF\8Ek=,=JVS>@GH??7941'$\18=9\13K\C2\A5\A8\BA\C4\BB\CB\CFVA\82\C0\D6\B8\90\AE\B4\D1\93Llt\9B\9A\BB\AC\B3\B4\BB\C7\CC96\A5\7F/ZC\BD\B3\AA\D6\C3\9Fg( @aB55CM./'\0A5z\97\CA\D5\D6\BC\A1\91j<:N]aefVUG927664+(\15\16q\0B.Bh\8C\A4\A7\B1\D2Gsi\BE\A3\B5\BB\B8\8E\B1k\CF\80qy\9C\99\8F\A1\9A\A5\B6\B67-t*4x^}\B4\BB\BA\C7\BF\BAN\00+`vR\13LLG7\1D\09\08;o\A8\BD\CD\BB\A6\8Ao2)7L^kte\5CH32/'+%\1D(\19\1BdD3.8Q\5C\98\B0\CAG\8E\CF\C4\C5\90\B5\B5ixO@\B3pfa@?3^\B4\A4\93%D\A9^da\8A\01D\B2\B5\AD\A6\B6\A33w\A5\BB\BBA'ORG\0F\0E\0A\0C@\90\B9\B0tF<)'\19\17+?VnndK1\1B \1B\12\15$%\1D ]>\22\1FG>f\AF\90j:\C9\AA\BF\BD\A7n\AA\AE\86yT\A1xU>@+\09N\BA\B9\AA\14d\B4\9F\B0\AC\BDdj\A9\AA\99\B4\BD\BB\BF\96g\8A\9B}1M=>H\17\12\15\1B'RP55GT:!\04\12#?exkF'\1C\1D\19\1C\18 !\22\1Fb; \11\22\1CEy\1A.L\ACk\13\8E\99\88\92\D6\A5\BB\CF\B3~?Q&-&a\AD\B8\9B\18d\CE\B0\C6\CE\E2\98k\81\99\92\BC\BB\AA\B3\B3|\9B\B3\9A]IAQB9\14:<$/8\191JZU,\08\0C\180SzxW%\1D\1C\17\17\14\1D\1F\17\14a3\09\0F\0E\10\17X %K0\12\11\18\C5\C8\AA\C4\BF\CA\CD\B6d8#\1Cq\5CG]VV\22N\BA\C2\B6\C1\B4\A5NVz@i\C3\A3\94\BC\94\96\96vx_IMKF?O_@R;\1F\14+F]T\1D\1D,>Npx],\22\22#\11\11\1C\14\17\1AU:\15\18\1D\11\0D\1F\0D\15Y\1F-\13\15\92\E1\D2\CE\B9B\A4\B7\BF\95<Bw4J7\8E\9E\14K\9A\A1\C9\93\8A\B6\8FzT\15t\AE\AE\A8\C6\80IN\A6\9FNI5$q|X\80\7FjB\09\17\14)JYA4>I?[ob6F=?<2\1D\16\19\1C%P\19\17\10\04\0B\16\0D\16V\1D\122\19\08w\A3\A0\B9\A1\9E\BD\B3\84wt'\81\AB\89\B4\AE\13u\C2\C0\C1\AE\9Fw\A5\B1\A8,y\A1\B9\C8\C2\A7RR\A2\A2J37\0Fc\9Cv\7F\B1\A3H\09\0D\0A\05%GMFm\8D{\85\89uIOESPRC/\1C\1A\0DM\17\12\0F\10\10\22!\15U\0E\00%,\00\B3\E1\BB\CE\D1\8D\95N9?H\81\9F\A4mas\1F$[\19]\D7ld\B4\B5xDR\A8\C3\C2\95\B9\B3\83H\83K7. =\90\96\81\C4\B6yWQ\06\05\14&8d\99\AC\CC\CC\C6\D4V A3;9;43,+\1E \142F1\13\1A(EdK2(\12d\C0hdiv\83\81*L#I|\92h\01\1CKb\C5\A6\B1\D4\C9\AF\AE\C0\8Ec!W\D8\BD\C1\D1\B9\BC~~\5CV:#\1Ct\AE\B5\BC\B4\A6\88V\10\01\00\06\17?g\88\AE\C0\9B\C6\AD#\10*3(&:+,\1A\1D\19\0E%K#;\13;=e7QO\1D0VmQB\BB\8F\B6\8E\0D\02'N\90i\1C\22T\1B]\FD\A9\F2]\D8\A1\9B\C2\E7\8B\07[\CD\CC\E2\B8\DF\EA\BEp\5C+%\14\84\C2\C6\CB\AE\8A:\07\00\1Afn[yx\84m\AB\A7\A5\D9\B0RMD3\16&,,\05\16\1D\1D\07c\1E\8Be5<d\87L@ $36Wo\93\F0\BA\AC\CD.\00.\15\0B>%-\1A\00.\C2\BA<\EFb\8C\C0y\13\B2\A4^\B7CW\C2\C2\C4\BES\22 8U\AB\B6\AF\CE\99=\01\06@\A1\C6\B3\AC\B3\AAp\A2\DD\BF\B9\B5\88ZV9\1D\1B,+5\14\0C\12!`8\9C\8B\84=/uqe$\1B\05?\A6{\15\A3\CF\E0\B4\81\D4\9F\C1\CD*\143\17\1B\110\F04\B1\B1\95@\01\8C\BA\B4\CC\D3\D5e\BB\C6\96:p\81V7?MJf\92\9Ac50\1CW\B3\B1\AF\B2\AFt\86\9D\B2\C1\B4\94}U\1C\14\12:;\1F+\0AG\B1\92-\99v\B8\8D3\1B8M-\1EH\91\9FZX\A8\8E\B7\D4V\AD\CC\C9\84\00!1\15\09\00}\BE=Q\B1_H\17\0F`\AD\D6\B4\E5\DA\BA\B9\DFH\92\A0\81V>NB]oqZIRJ\03B\96\BF\B5hxZtr}\ABz\84B\15\19\1B;<%!\0D\1A\C9\BF4\AA\89\BD\D9\D0\98\1Ao(\0A\94\A9\A2\99\86\CC\CB\AB\92=e\CA\8E\00\09,6\13\0C\00$\A7R\1C\D9{f\0C5\17\00/\00\C3\C2\BC\AC\B0\AE=e\9D\88m(,}\92\93\80MaqS6\AC\BE\A5\9F\BFUA?!-?<!\15\13\10?=\22390$\89\18zZ\E6\C2\D2\BEP*3\12\95\D3\9F'{\AC`?\09J*\94\E0w\0054\1E\00+\BDu^%\9F\9D\D6g\16\1E\0D:<,Cd\A8\A3\B36\8B\DB\C1qD\8C\8F\8D\A5y~W\92|_\A6\A7\82\9C\BDl*+)\11(\1E\1D\17\13\12=<\0D#^z2u\CD\AC\93l\DD\BA\B7\89&%\1Fj\D0\9C\12\AF\E5\8B\00irc\0C\92\8D\A24*\00>\B1\BA\88^ {\92\D2\C1l\A8\91\08\C1$=E=\A6\9C\CB\7F\C3\E4\92\A9\8DZ\88m_bZ\99\8FVRa`c\7F\84&.$\1E\18#\17\19\1B\0C\10\1E\0E\00\04\16r\99\9E\AD\BC\BC/p\F8m\CD.\22O\B5j,\B6\C9\8D\00\96\AC~\AA\A0\86zk7\CCm>\98\EB\5C&\86e\B7\D9\94\98\9Fs\BF\B0\9B\90_>4\BA\92\D8\B2\FB`I~\8A8a7gx~I0\2290\8D\8A9!\22#\17\16\1F\1C\14\17!\1E.\01\13\1D\1B|\A4\AC\CA\DA\B0d\18n\BD2,%c\1D\1Fb\A40G\C5\99\CA\A7\9C\C4\C08\80\D9\AF}\991j\0F\80\EF\B6\C3\AB\5C%nVv\94b7\22\1E\150\E8\D1jWk\AC\1EGVXH>1B.@PDLo-*#\22\1C\1A1+\16\1D  \90)\00\15\02\00X\A0\A7\C0\A8W\00\A9\EB2#\16\0Cb\00\17=\00G5\F0\90\CE\B2\BC\E1\C8\A7\CE\DFv\0CKm$Q\E1\C2\90\B6I  p\A7]2,\1E\113+]uqI\D2\A2cWWA\22\22\16\15#Hgc:8/-(\1A\1E\22>9 %\1E\1E\B7p\00\08\0B\1A\00w\CD\94\D2\00<\E1S:#\1E\06%=\07i\1F$\07Y\E5\AB\AC\C3\DB\D3\AF\B1\DB\90J/j%2\C2\BCdS\19@1\BB\AF\84\19+\19 0\1EJlZ\8B\D2\C5\83jO*V@#$&D]Wg6W))\15\18\1D=:&7\14\1E\91L\05\0A\02#\00\91\BF\D7;\05\96\B3\89.,\18\09\18F>\15\0BA\8DW\7F\AD\8B\A9l\D4\B5\96\C2\CA\9AR:P<Y\8DT\00hh\1AR\A1U\0C\10<LH\02R|a\A2\F1\B9t\91*1XD*\14\1BAUdO]:L\1E\16\15\1C=:%A \1Cc(\05\09\0B\17*\DC\C4\FF\00\1A\E2\A4\82n\1D\1F\00\1FF)%'f~\9C\D1\9E\D7\F9\E2\DE\C3\E8\E2\CA\A3]?T3\83\9D\00\8BKr;\0B|^\1CEna/,\91hc'\B5\BC\B9\B76\12'.C-\07g\A3\86mMK(\1A\16\18#>@%2 \1F\87h\0A\02\14\14\1A\00\1E\0E\15O\88le&8\16\19\1FA=\0E\16;w:RbJ)\9D\C8HR\DA\9D\A6yRq\11\9E\D1\92\7F>~8\07FbaIIb\04\A6ju*%\01\B6\CB\B2<\1E\19-7)\16@\B7\C5\B4aB'\22\15\16(8D,\1F\1F!U >\00\14\11#,\13\17\00\93\D0IU\0EF\09$%:N\17/\04\0B\14\03>A\12\92\C5\86o\C0\DF\BA\A0\7F}<\AB\D2\D4\CF\A8\AE\90\BF\00\94x#B\1DO\B6_G\19^rG\A6\BF\93`\18\14/\1F'(p\A8\D1\98M'\11\0C\1D3AJ,\0F\07\15QB\0C(\00\0DZ\18\13#\01\95/\5C[\07D\0A,\1C\1C_\00\A0j\0E\1D\0CE+\15\F5\BFz\C3\E5\D1\CF\9Ba\8A\FE\AFv\F7\D9\D9\B7^ksBf\8A\0D\10\9C\80/\16\0F,\A2\8A\9B\A5\A7\ACX\03#\1F\87\86\B4\9B\C0\BE\A55\09\11\1C5KNF7\1E&9q\07!\0A\1FE\17*\0D\1C\08\017\1B;=\1B)!\0D%(\84\8F\08\16\10,XTH\98\A8\AC\C1\93\C9\B2e\00\E0\E7\FA0\03\C1\E9<N!\9F\8F\D4\002\00\09\0BK'AC\C6\C8\918RO\142S'i3F\B9\D2\D0\BD9\0F\19);HPp\1F$@ra\00\18X\95\1C\0F.\10\096>\01\00n?\10\1B!8\17\11\00+.B>\0C\7F\A7\BD9\FB\E3z\02\00\07D6_P\F7\A5\D4@o>\DB2\7F+S8$\111B{oy\91\7F\AF\BBT`_\0F!8\82\82\CE\A8\BB\CE\B3\90-+\1B\18Knz#\1D^IK\86\0D\22PJ\0Byo-3\1D\22\BE\D5z\11\19\19\0Bns!,B\0A+\05Bs\859J\F4\82\00#\10\14Y*<\E6\DBN\C5\EB\8B\93.\0AzuoZ68CR:\10\8B\91\9E\D2g\12%0# %\09!#x\A1\AFyD.\0E\168gzG\5CWS\00\5C\7F\14,\0Fv|yP/S\95\8C\B6A\11\1A1Af\BAt\16\82\0D\00?(7\18e\0A\1C\82\02\15.\08/:z\FB\13j\D0\B4\D4e\067\5C>}AY'\22\1E\02!oVw\D5\00\A3]\11\19#\1B\1B%#?i\AA}2\18\02\10+RNbaX\12\1B\00o|\17\22\8F\D7\9C\B9\9F|n\5C\A1@\16\0F;BAN9#\16*\0CX\00\17!wS+\00\12 6\1627\03%\9D@\00\0B\92\16BcD\5CNF\A7\1A\18\07\0C,<\05W\904\C2\AAU\19\1C\1E\0F\19\16\155|~R6\0C\1C$8=gk\87\0D\19)\18\8E-\1C\13\F3\CA\BA\AA\EB`o\8CP,\08#\15d\14\0F\09\00\0B%\00\1F\01g\8Ed\00\0CV(h>\0C\14023\135\8E\13<TdC?]X\02)\16\16\1C*2(,#Vx\8Bw9\12\14\08\02\12\16\07&3C:<[&0Gjr\A8\F8F\14)\00\138m0\D1\BD\9Cy\FB\AC\CAu\82s>\11Q\10+\BF\A5C\02\120\B2\A0r\00\8F\CC\BB\A9+($.#N9\06\11V\B4\1Eg\1C\17sb>\14A:7HVRQPA\179\5C\9A@aN:(!+['\19\0A IH!18\0C\00N\8C\BE\00\5Cl\12\0D\8B\C4\C7\D7:J]\D7\AD`:U_\151R\00f\DB\BE\96\03\97\7F\9E\9D\00\CD\DD\AD\BCg+0$H[{k8\09]\02X\0EQ`I<\14>-6D)9\1F\18<Z\084S\81\C3\81]NX\83lh4\1D/YM34T\01\03ZF\82\01\8A\C1\CC\85\9F\AF\B8\DCMg\B6\B9\D1\83h,0-\1AJ\16\00\88\DF\BB\B4\A2D\E291\A9\98\D6\D6\B2\152,<5Qg=& \162\02C\AC\B7\B1\1B#\17\0F\0ErP(-\1C\0C\09V\AC\AF\B7\B7}W}X\82Z;\12AoN%\22<\01\05\0C\1E\08\11\17|\C4\DF\D4\92y\C6\E6\E6\A2\D4\83C#'\0E\1E\11&+\BA\C0\B3\DA\B8\D8\F9\1E\16\05+\AD\A5\9C\005\05:4Dg\1F)\0E\10P \0Ec\F8\C3Vh\BC\CAWR\B6\8CY\14\12\12/0l\E1\B0\C6\CEbauZG)\0E*c5\1D\1C)\07\00\1Ff\1A6\09\00\9C\C5\E3\C7\CB\C8\EB\C2\8A\CA\9F\0E/ \004$\0Cl\96\A4\B3\B3b\9D\CF\01\0E\00gv\98\9F\00\22\99`M\7F\12\04g\13\1AN@\A1\E54\00\00D\A9\82\E7H\D0\C5|\05.]/GT7\E5\CA\CCaq\96\9A\88\8A\84}4I\16K)\16\00YK8IL\88q\E2\B5\86\B0\D6\D6g\96\87\D5\00/\12\05\0F5\18\1C?\7F\C6\C5\AB\A1\DB\CC\1E\00u]n\9A4\95^g\8F\91\00\7F\92}C\B3\B4k\00\09Y\C3\00\D1\9A\8C\C3\97\EB\A9\02-1G\9A\94\B0\BD\DAkG\BC\C7\97K5PJ2D\15D8\04\0B !M\87\C5\C0\B4\93\CF[\93\8D\C3\B6ad\93\01,\14\0C\0D\08! \19\1ERs\96\D2\C0\DF\D6\00-\C6\B1\B9\DCW\5C\844\A9\BA\9A\A6:)X-\14\18W\FFR\A2\BE\E6\D4\C0\C1\F1S\13.>\81\B4\A8\B6\E4\EDe\07\AE\BF\AB\A4mC\0A;<\1B\1F6\0F\0CU\1F\89\5C\AD\CA\C0\BC\EB\1A[\DD\9F\D0\B5\18\0B\13\0C\12\04\0EA\19(\1AnL\86m\CB\C0\A0\ABC\00\F7\C7\D4\F1\A6\8D\8DJ\1C\D9\CE\BF\0B@0gd<<\E6{1\83z\AE\D7\00wh\00k\88W\5Ct\82Ob\F9\82\CF\D5\A0\00\00\13!:M)'?\11\12WHxYJ\DE\DD\AF\B6\D3\DF\AB\E1\C1\88\08\0C\0B\0F\00\0D\01R\19\22-\AFP\9B>\A3\A2\85\00\8D\AC\C0\C8G\92\F8\C3\8C\B5\F0\9D\D8\D3\02UqY\1A\A0\E0\A8\99aQ\C1*\C9\03\D1\BEZG\81Y??j\04\04\D2\B1\D6\9C\EC&\0B\07\19_`)1=@\816|g`_\B9\12\93\D0\B8\A0\B9\A8\D1\00\0F\16\07\15\1A\1B\15\04\1E\18\8D\A5\BCm-~y\8F\B4\BA\C1\E7\A4D\08\A4\C1q|\8D\AF\A8\E3~$4\00\A0\88\BB\CBj\AAR;8\CB\E8\AA\98b*,Ob\849\0BX\C6\C1\ADV\A5\F6?!\0CI8*)1z|miQT\16HA\94\C3\DC\B8\D3\87\CA4\00\0E ./,\19#\1D\19&D\089NY\87,\8B\A5\BE\AA\CAY\C7\C1\C8\88\80\9Bb$\C5\EA:\00%Hr\EF\A15\00\13\00?\A3\9A\B8\96Ybhf{J\07Y\06~\E88\11>\C6uiC%\1C+2\1C\83\8D/\1C#[F#\10\16\CE\BCAT\C8\8Em\1A%\15\06\1D\05\1E\0F\11\1F\0B\0B+>&\08\14^f\B2\A1\9C\92\EB\AD\9D\87ob\18'#&\D4s\000?\14\EE\00\05\0C\01\12\22\86\8F\CF>Ua}\9A@\004\09#:d\16\13\19f\D61. 74.1\8C\89;\17\08Wn\00\17\02\1A\A2%Y1\BEvO\03\0B\11\15\15\0B\15\04.\11\17-3.\1A6\00\0D\FE\E9\B8\D0\96\F0\A8\90S\08\04\EC\CC\06\B8\00\22;4\0F\00\19-\03\0B7\1Chv\B6\1BD^\9E\82\0Av;\1E)?\15\12+,\0B`\07,33-35m\93D\00\01\00[A\07\0AKoJ\18\C7\8F\8Dc\00\0A/\0C\16\19\10\10&\0A\05<Y\08\15D\127\EB\DB\FF\C3k\FF\D3\C0z\0B\A3\A6\B2\17L#!O\190\0E,\0D\0D\13\07\1A<GS\1B3\85{\00]h\13'  \1F\00\02\15h\06\8C+# *!6\88\90\13\18\06\00\02/\04\13EXb\84\DB\C7atS\00\12\12\08\14\1B\0C\0E\0D\14C\04\0C/\09\19\10L\ACU\17\19b\C4\B8J\13\B1\8D\DA\F2[\BB\80Uk\D8\5C\00\10\0F\0B9U\125\92\17VU\03X: 3\1D\10\0A*\C8\9B\A8$a\15\16\1B\1D1*\1D\98\9D\1A\0B\0F\0A\0C\0C\0A\19PPM\1B_\A1sh\15\11\0C\0F(\0E\12\0D\04s\D4m\C0!\1E7.\1B\0FO \DE>\08\06\8F\A8\A0\AC\B2\B3UUA\CDx7\89\D1\0B\0E\00Mx\22'K1)4\12+[C\0E\0F\06\16\1Ak?\1C\00' \18\1D\14 \1F'-\98\9B\0F\0D\00\00\0E\0C\04\22>5]8I\06'xn\00\10\00\00\09\0D\00 \BC(\CF\F3\E2\00\06\0E\14`/\18\B3\F8+\06V\DC\96\B3\CF\A3\A2\8A\CC\D2J+\C6\A6\BE\D3\AE\074'\228\1E\1F\0B3?7;WSF,2\1B \22# &\1F!\1A;9-4CI\00\00\06\03\0B\08\02\05,#\AA3L:\8DR\0F\00\00\10!<\05\00<\AE\C5i\E2\F4\F2\00\00RA\1B\10-\A4\00\00\83qqH\D7\BF\CD\AE\C7\D0\89\00\CF\AF\EA\D2\F0:#\1A\22\19\14\0C8<\12\16\16\1A.B^OV\1E\10\12\1D\16PM9\1E8&-FL[\02\04\09\12\01\03\04\00\00}c\1A\02\00\00\07\06\06\1C`>\04\16\1F\1D\F9\F9\D1\A4\EC\EF\A4\CE\AE\07B\A8\00\07\8C\00\C1\EF2\DA\B9\97\CF\D8\AD\BDK\DC\CB\A8\E0\CD\80\00'\14\03*34,\17\0C\0A\0A\14)\0A!\22>D\19\12NVUEQ1%#S[", [5310 x i8] c"\BF\D5\C2\9B\8Fc\93\BC\AF\A1\C1\C2\A4\BF\BA\B1\C1\A5\B9\D3\BC\92/\12\1F&$5+!,\16\13\1A\11\18\08k\BB\D2\BE\87^aJ#\118TjbMC.( 8B@/)'$.*7!!%&\1E$',!\0D\0F\11\1A$$\1B\15\13\1C\15\1B&1'\A7\BFbW\AC\88\96\D4\AAV\8E\C4\D1\AC\8Dp\C8\97\88\CF\BE\C6\ADj2\19\0E\07\1C(#'!\18\1D\18\01j\C1\C7\C3\C6\BC\C3\BDj8^vZI=?F4-A8-*#\1D&36;$/2-&&:</\16\1A\19\1E\1F\18\12\13\17\1B\13%A'(\8D\81/\AF\CA\D9\C2\AB\8855\88w\B8\CDT\9A\D6\C7\D0\B6\A2\BE\AA\806XK\1A$)*.&/!\0D?\83\A0\B4\C3\BC\B1\A3}XrjZ'0NH.)93' \1F\1E\12\1B\1B*/\1A0&!*@G>\1C#$(\1C\15\12\16\1A\1F\19.H\22\22p\0C=\DE\CE\C5\D2\BC>\00\0C\1B\08s\911\17\BF\D4\C5\B9\B6\8DnX:\8D\B2\86<.,\22\1E' \1B\109\85\A2\A7\90~r<^ik; /EF)#23\22$!#\07id\10\17\10\19&\11%?HD\1F(+0 \0E\0F\17\18\1E\1F/@&!\96\8C\7F\96q\BB\DB\A7ze\22\08\14\95fcQ$e\DC\C2\D1\8F\95\94\82J\8F\AC\A4}L\19\18.\12\14\14\1Bj\8E\AA\93WIQQ`W,7IH5'':#\1BP]\05X\B1\BC`\00,\19\1D\1C\22BLH$))3)\13\14\1A\19\1B\19'1E9\C7\CA\DB\88:|\D3\AD\C5\BD\B0j\A4\B9\8A\8C\C4\C9\A5\D1\D8\A7#\8D\AD\B2|?`ov~=\1B(\13\19\1C\0E}\A1\C8\C2aMIFA?4>JG022$&\1Ah\ACt\7F\AD\BC\8D >@A\1C\18<QS*$*:4'\19\16\17\18\11\19\1F67\9D\90\B5\DC\8C\AB\C6\8B\C6\C7\93\AA\D1\BD\C1\8EJ\8C\CB\92\B7\BFsE\96\AF\8ArU-gp\5C%\1A*\1F\1A\0Db\AF\C9\D8|8A>DB3OKGQ8#.4&A\B5\C9\AF\A8\B2\A5\83\8CtH:9<W]<3;GA1\1E\1A\1F$\1D\1D\19438v\C6\CC\DD\D6\CB\BB\BD\D0{\91\DD\DE\DAa\0B\C0\B3\AD\90\B5\E5\92`\94\87\95\A5\8D\9B\C0\B5@2\A9v\1C\053\CB\BB\C8\BD\82?6<'MYU_a?61,2\1D\8F\C9\B5\D3\CC\CB\BE\A2{J8IK]bRPTTK@9=;81+\1F61\16O\C6\A7\A8\B6\C2\B7\CE\D3ZC\82\BC\D4\B4\90\AC\B1\D2\9EPv|\9B\98\B8\AD\BE\B8\C5\CF\D5A9\A3\80.`W\C6\BB\AD\D4\C4\9Em<2MiNECGJ@</\16E\88\9B\C7\D6\D7\BD\A3\97nBEO^bglZ[RF<<740%!\22 r\09+?j\93\A8\A6\B2\D0Dpk\C5\A7\B4\BA\B4\8B\AFj\CC\82tx\98\96\8D\A0\97\A7\B9\BFA2t'2\80q\86\BE\C0\BA\C4\BD\C2a\0F0d\82c\22TOV<!\15\19Jw\AB\C3\D2\BD\AD\96x93=Q`r\80ncR<91%'\1E\16 \1E\1C`A4(5Yc\99\AC\C7H\88\CC\CC\CC\91\B5\B4hwM>\ADlf`?>1\5C\AE\A0\9E0L\AB[ip\A1\0CO\BA\B7\AA\AB\C5\BA<}\AC\C7\CBO-O[M\16\1A\1A\1AF\90\BC\B6{PJ72\22\1A1F`||oT4\1E!\19\10\11\22\22\1B\1C^;!\1BFHk\AF\91g9\C5\A9\C9\C2\A7m\AA\B1\85xR\9BqT>C*\08L\B4\B2\B5\1Ei\B8\A0\B6\BB\D2ot\AE\AE\9A\BA\CC\D0\CA\A3t\99\AB\892HHKU&\22!\1C\22QR:>Q_D+\03\14(Ho\83uP-!\22\1D \1C$'\1C\18m;\1E\0B\22&Ir%.J\A6k\1D\92\92\88\91\DA\A2\B5\C7\ADz?P** Y\A7\B4\A7\1Fg\D0\B2\C6\D1\EA\A4r\84\9B\94\BC\BE\B2\C6\C2\8C\AC\C0\9E\5CGT`RJ!>;\2218\188Tb]3\0A\0C\177]\82\80^+%# \22\1F(* \1Bu9\0B\13\11\13\15Q4+M4\15\14\16\BE\C7\A5\C5\BA\C9\C5\B1d7\1E\1Dl[?XVb(O\BC\C4\B6\C1\B6\B1TW|Bi\C3\A5\98\BE\A2\A9\A3|z[MOYYLUa<S?&\1C1PgY\1E!3FTz\82b1)+-\1D\1D)!\19\18jD\1B\1E#\1B\15\1D\22\1F_%3\1D\1D\90\E2\D1\CB\B7D\A3\B9\BF\96;?u6I9\8E\AB\1AL\9C\A2\C9\94\8A\C3\95{V\16t\AF\AE\AA\CB\8BSR\A7\9FMK:/{\80Y\80~jK\1A%\1D4V`A=OWHf{i:KCHF<' \15\154T\1B \1D\15\1C!\1C\1AX&\1FC*\13v\A5\9F\B5\9D\A1\C5\B4\83ys#}\AE\91\B5\BC\1Ax\C3\BA\BC\AE\9C\85\AC\B4\A9&t\A1\B6\BD\C1\AD]a\A9\A7T(6\15n\AB}\84\BB\A4O\18!\1A\121SNM|\A1\8B\92\95\81JQIZW\5CJ6\15\12\16[\22%\1B\1B\182*#`!\0B04\09\B4\E2\BC\D0\DD\95\98T:@I\83\AB\ACpg\85!\22W\1Cd\D9cv\B6\B3tGY\AA\BA\BF\94\BA\B7\89P\82J4-!A\96\9E\80\C3\B6y]X\0E\06\13%8d\9F\B3\D4\CD\C5\D3_'I:BAD@<36.'\1B9P4\1D%8LkR<+\1Ck\C0gcj|\8D\891L\22H}\98r\09,Ob\C6\AB\B4\D4\C5\BF\B2\C0\8Fh$W\D4\BD\C8\D2\BA\BF\8A\80\5CVA$\1Dw\BA\B7\BC\B7\AA\8CZ\15\03\00\07\1ACk\8C\B3\C2\9B\C7\AE&\14.5.,@33'+!\14&P)I IEk8VU+8^pNE\C1\8E\B6\96\15\05$Q\96h\1C6_\19[\FE\A7\F4Y\EC\AC\99\C0\E8\89\09W\C8\CE\E5\B7\E2\F0\C6xW-(\13\87\C8\CE\D3\AF\90>\08\00\1Cfl\5C\7F|\85n\AD\A7\A3\D6\AFRNE5\18(34\14#$!\03`!\9AtBCh\83IC/)6:Xr\9F\F3\C2\B1\D02\001!\0EF<;\1F\010\C0\BE<\FFp\91\C1{\11\B6\A4^\B5CU\C8\C3\CD\C5S  6[\AC\BF\B6\CB\9E=\00\04D\A2\CB\B0\B1\B3\A9n\A6\DE\C4\C1\BC\8E]V6\1A\1757?\19\0C\0E\1F`8\A9\95\89=+sqe1%\0AD\AC|\1A\A3\CF\EA\B9\86\DA\A0\C6\CD*$9\1A \1B3\F38\C1\B7\98E\0B\8F\BD\B8\C9\D4\D4f\C2\C9\9FCm\82U8FPSo\97\A2c40\1EY\BF\B6\B7\B2\AEt\88\9F\BE\CF\C1\9F\86Y\1F\18\17;>&2\12H\B1\93/\A1}\BF\954\1B9O5,U\95\A3ZV\A7\91\C5\E1Z\B1\CC\C7\83\00$5 \16\07\80\C5JT\B5jU$\12g\BA\D6\B0\E8\E0\BF\BD\ECR\92\9C\84\5CCROgw{^JTQ\0BL\9E\C9\B9iza||\91\BD\89\8FJ\1D\22&?@& \16!\CA\C27\B0\8A\BC\E2\D7\99\1Dr.\1A\A4\B6\AB\9C\86\D1\CF\BB\A2Jn\CD\8E\03\0D$8\19\18\0C&\AEZ\14\DB\81r\1A7\1E\027\00\C8\C5\C2\B1\BC\B0Eb\A2\8Bs-8\7F\95\99\87Oex]A\AF\C4\AC\A1\C3\5CKJ/;KH-!#\22AC$3A8,\8E\16}\5C\E6\CA\DA\C6U(6#\A1\E3\A1\22y\AFfP\15Z,\8F\DEz\02+4$\09?\BEwa\1B\9F\A3\E9{\17 \108@/?e\B1\A8\B74\8F\DE\BDrM\91\93\95\A9\81\84V\8A}k\AE\AB\8A\A2\BCd+72\1C4*)$\22\22CB\161i\8D>\80\D5\BC\9Cz\E8\CD\C3\94.5 k\D1\9E\1E\B7\E8\91\00jse\18\9A\90\A8F,\00:\B4\C1\8AU2}\90\CE\C4s\AA\88\05\C0%AKE\A5\9B\C8~\C4\E8\98\B1\8CY\88meib\9A\8EURafj\87\85%--% *\1E!$\18\19%\19\10\0B\1Dy\A3\A1\B7\C7\CC6w\FFw\D08)O\B4i-\BC\D3\95\04\96\AB}\AB\A6\90\82{;\CCnC\9B\EBX6\8Ae\B8\DE\97\98\9Bs\C6\B1\9C\93k@4\BA\99\D9\B3\FElK~\8D<e;lz~J3&=4\92\8C9\22#&\1B\1A!\22\1A\1D)%;\0F\1B#\1C\81\AA\BA\D7\E8\B8j\19s\C3@4-f\1A\22h\A30O\CD\9C\C7\AA\A2\C3\C0L\8B\D7\AD~\973f#\8B\ED\B4\C4\A9^!iXy\93e=*&\102\EB\D0m]s\B4\1FMZYI@1@/FTEMq-( !\1C\1B2-\18\1F'(\9F6\00\19\00\00[\AF\B6\CD\AF[\00\A6\EEA(\19\10c\02#@\04L8\F4\91\D1\BE\BF\E9\DF\B5\D3\E0x\0AOm;_\E6\C3\92\B4M  n\A7[8-'\183)]swJ\DB\A9`\5CW@ &\17\1A Mgb8<020!$%>6\1D!'*\C1u\00\04\09\1A\00\84\D7\99\D2\00:\E1SG-#\0B+>\0Ci\1F.\0C^\EB\AC\B1\C3\DB\E3\B5\B4\E0\9AM2n58\C5\C1nV\1CD.\BC\AE\85 .\22)-\1FIma\8E\DB\CE\88rO)VB%0+L]Vg8Y57\22#&A=*<\15!\98S\0D\0B\02$\00\99\C6\DEC\06\96\B4\8B6:%\0D\1CF<\14\0EO\9A[\83\AD\89\A8o\D7\B9\A1\CF\D7\9DYGS@d\9Aa\01ou\1AN\A4[\11\14IVH\00U\82f\A6\FE\C3|\9B.2ZK2\1E#KYeQdBV2($'EB.L$ d'\0E\10\0C\1A-\E2\C5\FE\09!\E3\A7\85t-/\0D(I)*+v\8E\A9\DA\A1\D7\FE\E6\D6\C5\EE\EE\D8\A5dGL5\89\A9\0A\8DRzC\08\81a\22Jzc7)\96ki,\C1\BE\BC\BD=\14+5M8\0Am\AA\88qTU3($$/JL5D\22%\89h\12\0A\1C\19\18\00 \0E\1DW\90qc)I\22)!<;\11\1CL\83JT]H,\A3\BEHX\ED\B1\A7{Ug\11\A4\E4\A6\80@\816\0BI^bRNf\02\AAmq+.\06\BA\D3\B6D$\18%85\1ED\BF\CB\B3YC3+ \224DQ;/%'a+G\0E\1D\13#-\1F\22\09\A1\D9KU\0F[\1A2(;S\1A0\19\1C\22\06?F\15\93\C9\86m\C2\E3\BD\A0|\81<\A9\D4\D8\D2\A8\AB\8C\BD\00\99\81*?\17K\B4^L\22eoA\A2\B7\94j \15.&# q\B2\D9\99L.!#*6FP4\16\17,VN\1A9\08\1Ae\1E\18/\0F\A6<if\0DW\1F:\22!g\03\A3}#+\12J3\1B\F8\BE}\C5\EE\D9\D2\A0c\89\FF\B1\7F\FF\DC\DE\B9^kqGu\95\13\0B\9C\80-\1B\1E7\A8\85\9C\A6\AB\B3X\00\19\11\88\87\B8\A2\C0\B8\9B'\15!&9II>-+)?~\15.\12-T\1F0\1A*\15\09E*CJ-8+\16+/\87\9C\1A%\1A5^[K\9B\AA\B2\CB\9E\D2\B7f\03\E2\ED\FF;\0C\C6\EA7O&\A7\A0\E3\070\00\0A\10S8PM\C4\C9\96>ZQ\0E'>(n9N\BB\CC\C5\A89\0F\1F5DOZv$*G\7Ft\0D\1E\5C\9B\1C\16;#\18<B\07\00}O!(*? \19\0B;?OG\13\88\AF\BC>\FF\ED\85\0A\05\0DC;cZ\FF\AD\DCFqA\E0C\92<]<&\146S\8E\80\83\95\8B\B8\BEVbZ\08\15D\8B\85\D0\AA\B6\C7\A7\8B$--'X\82\8B+$iUY\91\14 PF\16\85}8:\1B\22\BA\DC\84\22) \0Eqs(6S\1A2\08Es\84:J\FA\8C\0A2\1A\13Z*B\F0\E7]\CF\EF\90\9B>\19\8B\84\7F^;@SaK\1F\9B\9F\A8\DBo\17(/$./\12)({\A0\B0{7.\1F\17,`nSle_\07]\80\11*\07\84\88\82Q0P\93\84\BCO!.<Bk\B6z$\92!\0A@-3\1Bf\0A\1F\8B\10\228\0B0:}\FF!w\DA\BC\DCj\0CAdIzIa,((\0A,l\5C\81\E0\00\A4`\13\1F)%&($Bk\B0\82 \17\1A\14#UJlea $\03ox\12 \98\E5\A5\BC\9FxiZ\AAP!\1DC?AKB3!8\14U\00\14#}U0\01\16(9\1889\08*\A1H\00\0F\95\18FgC\5CEJ\AA\1C\1C\0B\0B,3\0Ad\9D:\C6\AEW\1A!+\1C\1F\1A\197}}40('%LOef\97\1E\1C-\1C\95/##\FF\CD\BE\AE\F2bv\94`;\161\17_\0E\17\19\08\193\00\1A\00i\92f\00\0EX*f@\10\16145\153\8F\13=XdB=ZY\02*\1A\16\1B(/1<,Xy\8Dw4\1B$\11\04\13\18\07!B-5TV\131Fbh\B4\FFO\222\00\139y;\DA\CB\A5{\FB\AD\DF\86\90v?\16T\11@\D0\B3F\03\173\B3\A4r\00\91\D0\BE\A9(,$,%R<\06\0ER\B2\1Dl%\1Ep\5C:\12@?@OSLMHB!A]\99G]F;2),Z.)!-LM'9?\1C\0DS\98\CC\0Aiy\1D\13\90\D0\D5\E8GWh\DD\C0uH[d\1D7U\0D{\E9\C4\9B\0B\9D\82\9D\A0\00\D6\E5\B0\C1i*3&Qc~p:\09]\00]\1D\5CfD<\14<2EO/4 \19@a\08.Is\C4\82aUX}bZ@-9]K.,J\0E\06`S\90\0E\92\CF\DB\8D\A5\BC\C6\E9Uu\C5\C1\DE\95w693!M#\0A\97\E9\C4\BA\A9G\E5;7\B3\A3\DF\DB\B3\1842F@Zl>!!\1B:\13R\B6\B5\AC\1C(\1F \1D|N)2\22\14\0BP\A1\9A\B8\BC\83_\7FRwE;\12G{W,,B\06\0B\13+\1B \1D\80\CA\DF\DB\9F\8C\D5\EC\EA\A8\D4\92S44\17%\1A.:\CA\D1\C0\E3\BF\E1\FF\1D\1B\095\B8\AD\A4\034\0A>>Oo'/\10\13U1!t\FF\C7Xk\C1\DBjc\C0\90e\1D\15\141+e\D5\BC\CF\D1dcpS;$\05,uD*0:\0F\06*r(A\10\00\9C\C1\EE\D3\D9\D3\F2\C0\8A\C6\A6\18@0\077'\0Cs\A0\B5\C3\BAe\A0\CF\00\0F\00m\80\A4\AE\07!\9A`S\89\1E\13q\17\1FVP\B0\F6C\0C\00I\B1\92\F6Y\DF\D5\8A\0F7e4JS8\F3\D4\D5iv\99\99\89\8Cw}EJ\0AD\1D\22\0DgWAJM\85o\DA\C3\92\B9\D7\D7d\94\7F\DB\0D?&\10\10:\14\22M\8F\DA\D0\AC\A6\D7\CF\1F\00xf|\A7>\98_g\92\9A\0A\8C\9C\85K\B8\BAu\05\14V\CB\08\D6\A0\96\CB\A2\E8\AF\0C84H\9D\96\B6\C3\E4vJ\BD\CA\99Q:>IJH\0DG4\0E\0F)/V\8A\C5\BC\AF\91\D8i\9C\90\C3\B2\5Cb\9C\117\22\14\0A\08\1E)))`{\93\D2\BD\E1\DC\002\CB\B5\C1\DFYb\869\AE\BE\A2\A9>,Z1\18\17W\F6V\A5\C0\EA\D8\BF\C1\E8X ;D\85\B8\AA\B7\E9\FAr\0D\B2\C3\AD\A5l%\04WG\1C3H\0D\07e0\8C`\B1\D1\C2\C3\FB+^\E1\A3\D7\B7\1F\13#\1B \12\10<\130*}Z\94o\C6\BA\A2\AFE\00\F9\C9\D6\EF\A8\91\8FK\1E\DB\D0\BD\0C@1kd;:\E3|1\84~\AE\D6\00tq\0Et\8AX^t}Xr\FF\84\D0\D7\A0\00\09\00\1CRH\16(>\09\08j[\84_G\DD\DA\BB\C9\E6\EB\B1\DE\C0\85\14\15\18\1F\0C\17\00[!+:\BF^\A5:\AC\AA\89\00\84\AB\BE\C7F\8E\FC\C2\83\B4\EE\9C\D7\CF\03WpT\12\9F\DB\A2\9AcP\BC\22\C8\00\CB\C8jR\8Da??h\0E\14\DD\BD\DE\9C\EC$\00\02\19[U\17\1D+0|E\8DucZ\BA\13\98\DF\C9\AE\BC\A3\D2\00\14 \12!'%\16\0C%\22\98\B1\C9w.\86\80\97\B5\B5\C2\E8\A8H\06\AC\C2l}\8E\B3\AC\E1\82)9\03\9F\8C\BB\C9n\AFW>7\CF\E8\A8\A0n27Zj\8CA\13d\CE\CC\B8^\AD\FE:'\19Q8#!,zxtt`]\16OG\97\CA\E7\C7\DC\87\D1:\00\14+982\1C)&\1F1O\11?Q_\90:\8E\A4\C0\AF\D3_\C8\CF\CB\87\82\A0k*\C6\F3E\06/P}\F3\A2>\05\1F\04G\AE\9E\B9\A1emtt\89X\15d\12\89\F4F\1FL\D4yyY6&,1\1Ex{8%-aC\22\14\19\D7\C5KZ\C5\8Dq\1D+\1E\10$\09!\10\1A%\14\152B)\09\1Dlm\B6\A6\9F\96\EC\AA\AB\8Esg\1B+$#\D4x\089J$\FA\08\05\11\0B\1B-\96\9B\D9Pcm\8A\ABT\07B\1B1Fq'''t\DDCF7I@8<xw?\1D\11_o\00\1A\0F\1E\A8.a2\BCy\5C\0B\14\1A\18\15\0D\13\076\1A 030\189\03\12\FF\EC\B6\CB\92\E9\AB\95V\0B\02\E7\C8\00\B4\00)?;\1B\07\22)\03\12;#t\80\BF-Pi\AC\92 \87K05J#\22A=\1B_\12>DA5:>h\99B\04\09\04]:\05\0EItR \C9\88\8Bg\05\139\0D\13\16\0B\10/\13\0F=V\05\10D\0D:\F1\DE\FD\B7h\FA\CE\C3\80\0E\A0\9A\AF\0FG\22%Q\1D7\164\08\0C\17\09\1ECO[-?\92\88\08sz!9,-,\0C\18'v\05\96=4*,\227\95\98\10\1C\0D\03\04*\06\1AB\5Ci\89\DD\C2c{Z\05\1F\15\03\0A\18\0C\15\16!F\00\02,\09\11\11U\B3R\0C\14]\BC\B9S\1A\AE\82\D5\EDV\BA\84Vo\E1f\07\0B\0E\0F:Y\1B?\9B+cb\11jN0>1\1D\178\DA\AF\B8/^ ),*7.\22\98\96\19\0D\15\10\0F\06\0A\1BORS!b\9Bsj \1C\1A\11$\04\11\0B\0F~\E2o\BC\17\1D5(\1D\1DX\1E\D68\01\00\91\B6\A9\AA\AA\ADNP@\D4{=\93\DD\15\09\00T{(1W;>A\1F:mW \1B\1B#'zQ0\0F3\22'4).',3\90\96\22 \0A\03\0B\0B\01.QHi>F\05$\84w\07 \09\09\05\16\06)\C98\DD\FD\DE\03\0E\12\13W.\16\B2\F7'\0AU\D3\95\B1\CE\A2\9E\8B\CE\D1E#\C5\A1\B8\D4\B0\06/\1F!3\18)\1B>K?;WQP<='(\22#\1E\16\1A!\160'\19\223D\0A\0A\14\06\06\09\03\0A;4\B86G;\8EW\19\09\0C\1D+=\0D\01F\B9\D1v\EC\F5\FA\01\02S<\1C\111\A8\00\06\84lrI\DB\C3\CB\B2\CC\D5\8C\00\D3\AF\E8\D6\F5?&\19&\19\12\14DD\1D!\1E\226JjWa)\18\1A%\11VZA\1E1\1E(FHb\0D\13\12\12\08\09\07\03\08\8Cl\1A\09\03\00\0D\11\11%fA\0A\1F%(\FF\FF\D7\A7\F2\F8\B2\D1\AD\09G\B1\00\08\9A\03\C0\F17\E3\BF\98\D8\E3\B9\C7S\E7\CF\A9\E9\D8\8C\06/\1F\07+>@7#\1A\18\18\224\16,.LR' RfkV[2$%HI", [5310 x i8] c"\EC\DE\B4\96\A9\95\BB\D4\DC\AA\B3\BD\BE\F1\E2\C9\C1\BD\D8\E7\9E\93\0C\00\1F>CI\0D\22\09\00\00\03\180\1C\93\D3\9F\A9pey^K)\05 ?=%\1F\13\19\19\04\17\1B\07\05\0C\15'.2\1B\0A\00\15\14\00+'\1B\00\00\00\10\00\09\03\00\01\0D\09\0F\1C\16\0F\B9\CCkh\B9\8E\AF\FE\BCc\97\D5\DE\B2\A6\9A\DA\BC\B3\F4\DD\F5\BCaD>9,;W2\1E\0C\00\170.\99\CB\99\AE\AC\B6\DB\EA\99B0=B1\0F\153'\1C\08 \15\00\00\0A\19\22*4\1F\0E\00\02\14\0E.5*\00\00\00\0C\07\05\02\05\0B\12\0D\1F>\11\16\A8z\0F\C9\F7\DB\D4\D7\A3.\15\A2\A4\BA\DF\80\B6\F8\E7\F0\DE\C7\EC\CD\9CXxkBIWM \15 .8UbX\A6\B2\AD\BE\CE\937*=4\06\0C*;<A\0C\0D\06\00\00\11 3.&\1D\00\00\00\00\0FSC,\00\00\00\00\01\00\00\06\0D\12\0E\22?\13\16r\1F9\F9\ED\BD\E7\E0@\12\086'k\A6U6\D9\D9\E4\DB\CD\BB\A4wT\92\D1\A8S\5Cb\1C\1D*,7\1C\1CL\9C\A6\93\8A\8EHA0C\05\00\08\142EK\0A\00\00\00\00\0F#\91\8E'\13\00\00\00\00\00i_@\00\00\00\00\00\00\00\00\00\05\06\16&\1A\17\92\AE\94\C2\89\98\DC\D3v\8774,rg\8FwLh\FF\F2\FF\BF\B6\BA\AAM\BE\DC\DF\ADm\15(M+*6<u\8A\BA\B2p_srk\1F\0D\1D\1D\1A$,*\02\04\01$/\00]\B4\C9|\0C\0B\00\00\00\00OhV\03\00\00\00\00\00\00\00\00\00\00\09\132)\A2\E2\E7\89C\81\EB\CC\A0\D5\BCk\AD\BE\A2\AB\E3\FF\BB\F9\EA\E0K\A9\CC\E8\92gr\A8\9E\9A95T,%>@\A4\9D\E2\EEzYkxhdmI\1D\1B\0C\1AAI_%;\80Pg\BC\C1\7F\00\17\1A\05\00\00AC1\03\00\00\00\00\07\00\00\00\00\00\00\04(+e\88\AB\CE\8A\A2\C8\B3\8E\BF\89\9C\CF\B4\C3\B6`\AB\E6\AA\B2\CD\80k\AC\CE\A5\8AP;t\96U=9912)\86\A8\E1\F7\8BJYZhNPeURUBM:Q<K\C0\CD\B9\D2\CC\8A;[a\1E\00\0FV<\15\0B \11\07\17\10\00\00\04\0A\03\03\00+-\0Fw\C5\AF\C2\B6\A9\BF\94\D1zt\C2\BE\B8e*\BB\C3\D0\B1\BA\DA\B0\7F\8F\97\B8\C6\92\90\DE\A4RA\BB\A6D\1Fj\BA\CD\D7\CF\B2gPsOm{W4QU@YLT\1Fd\B9\CB\DD\E8\D3\97eW/\12#ge;\15,9.%\16\12\1A\19\17\0F\09\000.CX\B8\A2\C2\E8\EA\CF\FB\DCL>\9C\EE\FC\CC\90\C4\D0\E6\80QSc\9B\B0\D7\C1\A0\B9\A2\B6\C0*@\BB\94Vx$\B1\A4\B4\EC\D8\C6\85\09\00\22D&!(8C\0C\11\0A\00!m\8C\C0\DA\D2\B7\8Cq]8\1DSY\5CPFIQ*+$&%%$\19\17\07\08\84\164Pw\99\C1\D0\C4\DDM\81x\CB\C0\DE\CC\D9\B6\D4\89\FB\91k\8A\BD\C1\B2\BF\C6\B6\B0\AA',\8CTa\8ACq\A4\BA\D2\F1\EC\CC3\00\18LT9\0FG>\1D$\09\00\007j\9A\B7\CB\B8\8CXM'\1B1J[QBCQ:))#\19\1E\18\10\1D\08\0A{:\14Bb[u\C5\C7\C0(\A2\F9\CE\DE\BD\D1\D6\88\97uc\DB\8F\82\82_^Y\81\DC\C3\90\1F=\B8\86\7FOY\00>\AB\C4\D5\C1\A4r\0FW\8B\A3\A7B;g.'\00\00\00\0DT\A8\CF\B2i-\0F\00\0A\07--4=AAG9\1F\0B\11\0C\03\06\16\19\0C\10`N\1D6e@\80\D3\93z5\E0\C8\C1\D7\CB\8C\C4\B6\A4\9Ai\C9\A7sXHI*c\E2\E8\AF\1Dl\C4\BC\C2\9E\99is\B1\BA\B6\C6\AF\97\A2mHrzuNp \15)\00\00\0D8J{i6\1F\1D%\0F\00-+$);I@\1B\0B\01\04\02\07\03\0B\0D\10\0Ei]37:\03J\9E!P_\D2\83\00\93\BE\AE\B9\DD\D1\E5\FF\DD\9Bex-YP\94\D7\D5\A3/\86\E9\C8\E8\F2\F5\A0\82\A3\B4\AA\DE\DF\BD\8E\A3r\80\92\8DaJ\1CA8\1E\00-@%>T&\17\18'!\00\17(%\16!GD\1B\05\00\01\01\04\01\0A\0C\0D\0BPQ\17\14\1A\18-p\0FCY5\1E\19.\DD\E6\DB\DB\E2\DB\FE\D9\80VT3\94mx\80r^B{\D5\D0\D8\F3\DD\ADn\83\95N\8B\F5\CC\BD\F7\AD|wXbjr\88d, 1IKX1\04\00\0B\14 !#\13\11\1F.>;*\11\0A\0E\13\05\05\0E\06\0B\0C2<\11\10!\12\17E\00\17U\171\14\1F\B8\F8\F0\E6\CF?\B1\C6\E5\ACZZ\8D1WF\B4\A42k\AB\B4\E1\B0\AE\BC\AD\9Ae(\8C\CB\D2\B6\E8\A1]]\AB\A9wWWE\85\8B]\8A\A8\840\00\00\0A\0A\166[\22\07&5<;?\19+'-,\22\0D\05\0C\0F\0BU\1A\03\02\00\00%\00\1BW\09\04#\08\17\95\A0\AF\D8\BE\A6\BA\D2\A2t\83F\9E\B3\86\D3\AB,\87\D5\EA\E4\C8\D3t\BE\C3\BBV\9C\BB\ED\E5\E1\CF_6\99\BD^PV7p\80m\9A\C5\C0W\00\00\00\00\0B-jUUdgwo[ *&86:(\14\0F\0F\007(\08\0D\0D#\15\0B\00f\04\00\22?\00\C8\F8\D0\E7\B7\88\ABTNV]\9A\85\9F\83g_77\89G\81\FF\A2P\CC\C8\A6rv\D1\F9\EA\BE\D6\C3\877\92\5C_W=M\94\85\90\D5\D8\9D]P\00\18\18!Z\88\9F\AB\C5\DF\CA\CFD\06\22\11\19\18\17\0E!\12%\09D5AH_)\14\13i\85Z4V([\DA\89\8D\88|s~!fDr\9B\98X\00\0FXb\C0\AE\D7\EC\DE\A2\BB\C0\89kGo\ED\D9\C1\EE\D9\D0d\8Cvr:@<\88\94\C3\D6\BE\B6\97e\18\12\09\01!Ov\97\B6\D1\A5\C1\B2\1D\00\0B\0D\02\00\10\0C\0A\13\12. 8J7<\0C0RwJPc\1E+O\7F{X\BD\BA\DC\89\06\14Qd\92\94B\10Q$`\F9\BE\F3r\C6\9E\A4\C5\E3\A0\08p\F0\DD\F6\DF\F5\FC\B9m\7F<9;\9A\D4\C1\C8\C5\82?\1C\13(~\81rq}\99\82\B9\BF\B8\F5\BDH/\1D\06\00\00\0A\0B\00\1C4,&}D\97S;Ss\A6ff,-IFn{w\FF\C5\B5\E3>\14:\00!I\10 \1B\00\22\CB\B0D\DAU\8D\BCm\1C\A8\ACj\CC[\86\C6\EF\CC\CB_78gY\D8\BE\BC\F8\97G\12\19G\B6\C5\DD\AA\BD\BB\83\A9\F2\BE\B6\AAt><#\0B\0B\08\056.>@7l^\A0\8C\9Eo]\8B}\8B(\1C\1FJ\9E\90\1E\C7\FF\E1\CE\8C\CC\B4\CA\F1\5C\1A]E&\008\FFQ\B7\DB\C3K\00\94\D0\D1\DA\D6\E2|\BA\DC\9EJ~\84cN>cRv\91\8Bo:2\1Be\9B\B0\A0\BE\B4v\85\AB\9A\B4\A5\81kA\0A\00\00?5\04+\15f\C9\97E\A3[\B8\98R3=e7\11:\A0\A6r\88\D3\B4\AA\C6e\B4\E4\F9\AF E[4\0F\00\91\CF8u\DB~N\08#q\A8\D6\C9\D5\C6\AB\C0\C1G\92\B5qB/U$\5ChVMB<(\001\8F\A4\A8ab8ca^\8D^o1\06\07\06&\1D\04%\05+\E9\CB@\AEh\C1\D1\E1\B8&{,\00\80\88\8C\A1\A8\E6\E8\96~\1CO\D2\B0\18&9G;$\00<\B6d)\EA\A3~\03M&\0C\08\12\AA\B2\9E\9B\8E\C6\16w\84xO\17\0A\95\B8\95f7@L+\17\D2\C0\8B\89\9E0\19 \0E\18% \07\00\00\00\19\17\00)6B.\92;\84\1B\DC\BF\E4\C8YM=\00\97\A5\AEX\A1\D0t,\0B\1C9\C5\FF\9B\10\1F(>\00\00\DD\90\84\0F\93\BD\C9<693C(\14PUx\90\BA?w\C3\CEb\14y\96\A2\B2XXD\B1\7F9\BB\B4av\AA\8B-\05\13\00\04\00\00\00\00\00\15\12\00\0Dop0r\E0\9F}V\EE\B0\B5\869\184\81\E5\B5\00\AA\FB\91\12\80\87|\00\8D\A3\A8 B\12l\DF\DE\B1\94\0C\93\A5\FF\EF\90\D1\C70\EAAMI,\B5\AD\F3\A8\E0\F4\96\98\9Ck\AA\91eaS\AC\93Qt\85fbx\97*)\12\04\00\01\00\00\00\00\00\04\08\00(7\81\9B\CC\C3\B6\A7S\91\FFo\FBD\19i\D6\93K\BC\B9\8A\00\B0\CD\A7\C9\A6vw^D\CChF\BE\FFq\19\93e\B2\E1\BA\B0\B4\8F\BF\CD\BB\A4ELN\D6\92\F5\D2\FFFW\98\94HpFo\89\88D:2H?\95\9BC\1C'\1D\02\00\00\00\00\00\02\00'\00(/.{\B8\AD\C3\CF\C5v+m\D13'\1EuG5d\CFVB\BE\AB\F4\BD\9E\EF\E6&}\E2\B2y\AE2\7F\00}\F8\B9\BF\C0]:\91g\8A\BBxI\1D\1B8A\FC\F8\80if\A95?[m]LIUE8UYa}E=?/\12\00\0A\00\00\00\00\00~/\10$!\19~\AC\95\C6\BFf\1E\C3\FF>,,\1Cy\0B\00S\07PK\FF\A7\DA\96\D2\EC\B3\9A\CF\DBj\15Au\0FD\E2\BE\84\BF?(,\85\BF\8C6Y&\1E?@u\A4uv\DA\AF\8DUaR5)+\14MFqtM?D,%\0F\0A\06$#\0E\15\00\00\B8\8A06!&\22{\CE\AE\FF+R\EDy>$8\11\1DR\10\8DQ%!d\DD\C0\B5\E7\FF\D9\D9\DF\E6wRE\87+\5C\F0\C7K[/]?\BE\BC\9B\18A!0>!W\83Y\A1\DA\D5\82[[/X?1\0C%5i\5Ci5e\11\1C\06\05\0B)(\11\1E\19\18vL\10)\1A(\14\9B\A4\D7F$\AE\B8\A18\1F\0A\18\1F^n@14\7Ff\86\C5\BB\D4\92\F8\DF\B5\C8\BB\AEc5tfx\93E\12yc\1Ag\91A\00\17\1EKH\17BhR\A9\D3\B8mv\1D*B\22\19\03\14&H]9;);\00\00\00\07,+\13,\0B\00B,\00\1A+#6\E0\A3\FF\00+\FF\B0\8Er\08\0B\00\09NK?DQj{\BB\A6\F9\FF\FF\EB\D4\FF\FA\C1\BBlQaD\AB\B5\00\A3Z\84\14\1DcN\004Ly\08>xXE\16\93\D4\DF\B9\1C\00\06\09\1B\0E-i\89pL(#\09\07\01\00\07$$\06\10\00\00H^\07\14\1E\1D=\07\00\04\12a\92u\880%\18\00.rc2*(y\0Ca\93pM\B1\B2<r\CDr\C6\94x[\05\BE\C4g\9FY\A4A\00.oR\196i\0D\92R\82\1B\00\00\BD\E0\BF\1B\00\06L:\03+M\96\9F\A1\80E\01\0C\00\00\02\16&\12\08\00\001\096\00\0A\22%\1D\00\00\00~\C6ZW\002\00\0F-?=#O\00\00\00\0BC0\1E\B2\B1\90\92\D9\EE\D0\B8\9BiF\CE\EB\E3\E5\C0\CA\A5\C0\04\85b\096\01d\B7c8\03Df+\A3\E6\99G\13)<\04$Ov\8F\CC\ADZ\0C\04\00\00\0B\1E*\05\00\00\00P(\00\0F\00\00C\12\12\09\00|*MD\01:\00\17\14\0DR\00\B4`\00\08\046\1E\11\FF\C4v\D2\DD\CC\E5\99b\8F\FA\BEn\F2\EF\D7\B8fk\86C>w\00\05\A4\80B\17\00\19\86\7F\A0\AB\9C\94Z\1942\8C\8C\A9\83\C2\D4\B6H\07\00\00\00\0C\0F\00\00\00\005P\00\1D&\1E5,&\00\06\04\1D6\0BPP\07\17\11\01!(\96\A2\00\04\00 TTZ\92\A9\A8\B1\80\BD\B3h\00\E1\E3\EA\1D\00\C2\ECoS \9As\C4\00;2\0E\0AF\0B1(\CF\E5\9A43,\00\11QDr/'\96\B4\AF\BB;\00\00\07\17&&R\00\04Oc<\00,y\994\1E\1F\00\00J_\05\15v3\00\0C%7\0F\0A\04\1F\123B\0Bw\A0\CC:\FE\D2g\00\00\01S7b?\E4\A0\C3:~F\D9\0Fb\1A\5C;3\19/\1F^^\82\94s\B5\D1UMD\00\05,\88\98\CF\95\A0\AA\97x\00\06\05\06:O_\00\03oU>\83\04-8G\1C\85b**(\0A\BB\F8\8D\02\05*!v\8BD?3\00<\1BJ\8B\A4Ld\F6q\00\00\003lD>\D5\C3$\AA\F8\8A\84\0D\02xe>g5)\22J8\00Zn\8E\C6Z\00\15-\14\00\15\00\14\10h\9E\A0T\00\00\00\090XrE?f]\0C|\82\1A\13\04\85\86\87p2Y|\81\D4B\07\004ag\D9\92\17x\00\02_)V z&0v\00\00 \10DV\8E\EF\00K\C2\A3\B5V\0CBq;\A50:\18()\17\1E\97Ri\C2\0E\C2q*\1D\1F\0D\087BS\82\AEl\00\00\00\00\18DK8(p\05!\14\89\9D0.\A7\CA\A2\CD\B9\9D\87h\A9+\1D\10NtM^A\0E\1D+\1F\8A\0B'0ob4\05\22\1BH%*F\0C.\AD;\0F\0E\8A\0B8r}x~I\9F\0F\0E\16EHl\108o8\D2\B7n9'\00\00\1D&\22N\9C\A9>\1A\00\00\05\19%(,j\00?H5\9DV5\00\CD\F0\D9\C7\FA\89\88\973\1E\00\180\88*\1A\00\00\00\1A\17C\17\7F\9Bs\14%nA\95V\19#GKK,b\91\11/@\80bTe[\00\1C\022;?:,\0D\1Bd}\8CyR\16\00\00\10\17\17\09?I\18\0D\18,\00\00\10!7\84\E1>\00\1F\0E\15)I\19\C9\A8\92\8A\FD\9D\B6bm{C\00]0\17\AC\90K\07\01<\D2\8C|!\A8\DB\D1\C1G\14.Q<]O\1E-k\B5\22X\06\00gFS\15E+!.J6NwG\004q\A7%^u@\0F\1C@h\0C\0C\00\01!%\01\0A\1E\00\00Mr\A8\00W]\00\07\8A\AA\B1\BE5;F\D1\A3=%MP\08-f\00C\C6\B6\87\00\93\93\A3\99\0C\C5\D8\C3\BAh0,3@V\91i9\11]\15Y\00>D>D\14Q.\0E1\0D.$\1E1B\0AJd\94\C8\87R6Z\99}{2\00\05 \0E\00\00\19\00\00V%l\00\A6\C0\BC\9A\9B\8E\A2\D8if\A6\CE\E4oV\1C$)\1A\5C)\00v\CF\AF\B0\A2V\DC:-\99\85\CA\D7\B5\0F3(,\22Eh@Y%\15-\003\91\C0\E4 \22\12\00\00WYE6\18\00\008\8B\AD\D4\C0y8Z:aX=\00#M*\03\00\1E\00\00\1B\0F\00\00+\9D\C8\F7\E3\83T\B4\FA\FF\A6\EC\8B7\07\18\12\1D\09\1F3\AE\A4\A4\DE\B7\D0\F2-\17\08\1A\9A\A0\8B\00D\06=#1b\0E#\1D\18N\00\00R\FF\C6ep\BA\A7:A\BF\8FM\1A(\13\1C\15H\C5\A4\CC\E4cNZ6+\11\00\05M#\0C\00\0E\00\000r\0D3\00\0B\84\C2\F4\D3\BE\C5\E2\CDr\C7\C2! \0C\11J,$\8F\A9\95\9F\C4x\A5\E7 !\17ie\80u\00A\ACzOn\00\00L \19?\1F\99\E3$\00\09C\9Aa\DFF\C0\94Y\00\22P\1C7Q(\C2\BA\C0T^\86\97ye@K\1B<\0E<!\14\00hUFiO\8EX\D7\C4\90\BE\F6\D9m}|\F3\00%\00\08/67:@u\A5\C8\CB\A2\FA\D43\1B\89QG{&\9Ds\83\A3\85\00`\84l$\A4\BAv\12\06\81\B2\00\C2\A0\97\D8\94\FF\A5\00\1ACf\AE\AD\B4\B9\CCXY\DB\DB\B0O$\0E\10\0C%\0265\00\008\14S\9B\DF\E1\CD\9F\E7N\99\A1\DD\D7zp\9B\003\15\1F?\141(\04%S\86\C8\DE\D0\EE\CE\0C6\CF\C1\B4\EEfT\93=\B2\CA\95\B8=!M##Qs\FFU\9A\B3\DC\E3\F9\DD\FF^\00\0DB\91\C1\C1\D6\EF\CED\0B\BE\CC\C4\C4\98/\00&\1F\00\00\1E\00\008\00\AF{\CA\D9\E9\D5\CE\00\81\FC\BC\DF\DE1\16\00\00\05\00)e/3\00`?{\88\EF\D6\B8\B8R\14\FF\DF\ED\FF\BE\9A\9Ca5\F1\E7\EC\0E>#S\80[Q\EE~/vf\CA\F6\15\7Fl\00c\96\5C]v\9BSC\F1\90\D4\D6\A2\19\10\00\00\16\1E\00\00\08\00\002$vod\EF\FF\A3\91\AF\DD\C1\FB\D2\B0\00\00\04\05\00\0E8V.\16&\A5G\9Cu\A7\B7\A2\07\97\8D\C9\E9X\A6\FF\CA\96\96\F9\BE\E9\E7\00Luj7\9B\F1\BE\94XU\D2G\C4\14\E7\E1=*]JeW\7F'\00\B5\8D\C7\C2\FF;\00\00\006\1F\00\00\000_\1Ca\5Cr\82\BC)\AD\B6\9D\95\CB\CB\D4\14)\05\02\17\16\0D(\00-\07\88\A7\B8_@y\88\A4\C9\CD\B2\ED\B1T\1B\B9\D6\84m\93\BC\B8\F6\8B%5\0A\B1{\C7\E1w\ABSEI\BE\F4\C0\C4Z\19\0F:l\7F,7P\B5\A4\98`\A0\E9$\00\00 \00\00\00\00VSlfAJ .9\B8\C2\D9\A8\C9\91\B0,\1E\06\1A(%\18\13\1D\11\11 >\00%HS{-\9D\B6\BB\B3\CEo\E6\C2\DA\99}\A4f:\E4\F25\00$So\FF\D0=\00\07\00J\A0\B7\E7\A3OMPPpA\00f\00i\D0\22\065\B3^H+\16\03\0C\1B\09B;\1B\22%]`2\17(\BA\C2CV\E2\9Dt,!\0D\00\12\00\06\0B\00\1B\03\00 )\0E\04\00Ke\B9\A2\A6\A1\FF\D7\8A\86vc\226:P\FF\96\0A>D\00\E4\009/\0D 'o\85\CE&@El\89/\00+\00\0E\1ES\05\02\16]\BE\0F\12\09\0F\00\00\00;70\1B\0CTs\12\0F\00\0F\A6)V6\D1n0\00\03\09\11\00\00\14\00\1F\09\0F)\19\08\190\00\00\FA\E3\C3\EC\A0\FF\98}O\02\0F\FF\D6)\E6\1E3XE\03\00\0F[%\1CT-\5Ch\AC\008I\95u\00g'\00\1D*\0C\05\10\1D\00M\00\16 \10\00\04\05RiO\00\00\00Zc\1C\0DVmC\15\C6\B1\A2f\00\02\17\05\04\03\0F\12\1E\02\005G\00\14F\14)\E5\D5\FF\DFc\FF\D5\B2t\05\AB\C2\AA(pD1z6/\00\1B1.#27;8B\00+wt\00BR\00\05\18\12\18\00\00\00R\00W\03\08\00\00\00\0B`g\17\0E\05\06\01H\03\0AINa\8C\DA\E0`kS\00\00\04\00\13\13\0E\0E\05\005\00\0B'\0B \0B@\AC],\10s\CB\B3>\13\B9\A2\D1\FF~\DA\8F\86\8C\E0N\003.\1Ajv\1A'\80\00EF\00T(\09 \00\00\00\1F\C4\89\91\11;\00\00\00\00\00\00\00ZR\15\0A\13\0E\08*\14'KOQ\1F[\BF}v\10\0E\00\04\18\0C\00\19\00p\B1b\B0\1F\0BC,\18\00U)\EFB\22\04\8C\93\A6\B5\C3\B7ox`\DC\A8U\92\C5\001\1F\5C\A8@0?!\05#\04\1DU1\00\00\00\05\0C]9\0A\00\0F\00\00\00\00\00\00\00\00PU\00\00\00\13(\1D,\16\19\11[Nc\17Olb\00\06\00\00@\11\13\14\B5\1E\C6\F4\FF\00\1B+\1Bj\10!\D4\FF?#]\E6w\BC\F0\B4\B6\85\C3\D6[H\C1\B7\D4\CE\A5\0BED\1DI4B\00\16\1B(aohi\0F\15\00\11H;5\16\00\00\00\00\00\00\003'\00\00\00\15.\0B\19\1F\12\08\9FEo=\A4l\00\00\02\0C\13O\00\09+\A9\C7e\D4\FF\ED\09\0FgT\0C\16:\B4\13\13\98\84bN\E4\CF\E0\BB\C8\D1\93\10\C2\BB\FF\DF\F1;-+\15%*80+\00\01 \15!nV>9\09\1A\0D\10\00&%\10\00\00\00\00\22#Z\00\00\00\1C\00\00(\00\00mY$\00\00\1F\00\00\00\12L8\00\0A\17\17\F3\EF\BD\9E\E6\E3\A5\E0\BF\04K\AC\10&\8D\12\D2\EC;\DE\CF\B6\D7\D3\A1\BCV\D9\E8\D7\E8\C8t\002\11 Y@*\17\00\00\00\01\016\00\0C\0A(9\10\0075=68\12\0E\10\12\09"], align 1
@out_width = global i32 90, align 4
@out_length = global i32 59, align 4
@i_marker = global i32 0, align 4
@out_unread_marker = constant [10 x i32] [i32 216, i32 224, i32 219, i32 219, i32 192, i32 196, i32 196, i32 196, i32 196, i32 218], align 4
@out_length_get_sof = global i32 17, align 4
@out_data_precision_get_sof = global i32 8, align 4
@out_p_jinfo_image_height_get_sof = global i32 59, align 4
@out_p_jinfo_image_width_get_sof = global i32 90, align 4
@out_p_jinfo_num_components_get_sof = global i32 3, align 4
@out_index_get_sof = constant [3 x i32] [i32 0, i32 1, i32 2], align 4
@out_id_get_sof = constant [3 x i32] [i32 1, i32 2, i32 3], align 4
@out_h_samp_factor_get_sof = constant [3 x i32] [i32 2, i32 1, i32 1], align 4
@out_v_samp_factor_get_sof = constant [3 x i32] [i32 2, i32 1, i32 1], align 4
@out_quant_tbl_no_get_sof = constant [3 x i32] [i32 0, i32 1, i32 1], align 4
@i_get_sos = global i32 0, align 4
@out_length_get_sos = global i32 12, align 4
@out_num_comp_get_sos = global i32 3, align 4
@out_comp_id_get_sos = constant [3 x i32] [i32 1, i32 2, i32 3], align 4
@out_dc_tbl_no_get_sos = constant [3 x i32] [i32 0, i32 1, i32 1], align 4
@out_ac_tbl_no_get_sos = constant [3 x i32] [i32 0, i32 1, i32 1], align 4
@i_get_dht = global i32 0, align 4
@out_length_get_dht = constant [4 x i32] [i32 29, i32 179, i32 29, i32 179], align 4
@out_index_get_dht = constant [4 x i32] [i32 0, i32 16, i32 1, i32 17], align 4
@out_count_get_dht = constant [4 x i32] [i32 12, i32 162, i32 12, i32 162], align 4
@i_get_dqt = global i32 0, align 4
@out_length_get_dqt = constant [2 x i32] [i32 65, i32 65], align 4
@out_prec_get_dht = constant [2 x i32] zeroinitializer, align 4
@out_num_get_dht = constant [2 x i32] [i32 0, i32 1], align 4
@izigzag_index = constant [64 x i32] [i32 0, i32 1, i32 8, i32 16, i32 9, i32 2, i32 3, i32 10, i32 17, i32 24, i32 32, i32 25, i32 18, i32 11, i32 4, i32 5, i32 12, i32 19, i32 26, i32 33, i32 40, i32 48, i32 41, i32 34, i32 27, i32 20, i32 13, i32 6, i32 7, i32 14, i32 21, i32 28, i32 35, i32 42, i32 49, i32 56, i32 57, i32 50, i32 43, i32 36, i32 29, i32 22, i32 15, i32 23, i32 30, i32 37, i32 44, i32 51, i32 58, i32 59, i32 52, i32 45, i32 38, i32 31, i32 39, i32 46, i32 53, i32 60, i32 61, i32 54, i32 47, i32 55, i32 62, i32 63], align 4
@ReadBuf = internal unnamed_addr global i8* null, align 4
@.str = private unnamed_addr constant [16 x i8] c"Not Jpeg File!\0A\00", align 1
@main_result = common global i32 0, align 4
@p_jinfo_data_precision = common global i8 0, align 1
@p_jinfo_image_height = common global i16 0, align 2
@p_jinfo_image_width = common global i16 0, align 2
@p_jinfo_num_components = common global i8 0, align 1
@.str1 = private unnamed_addr constant [21 x i8] c"length         = %d\0A\00", align 1
@.str2 = private unnamed_addr constant [21 x i8] c"data_precision = %d\0A\00", align 1
@.str3 = private unnamed_addr constant [21 x i8] c"image_height   = %d\0A\00", align 1
@.str4 = private unnamed_addr constant [21 x i8] c"image_width    = %d\0A\00", align 1
@.str5 = private unnamed_addr constant [21 x i8] c"num_components = %d\0A\00", align 1
@p_jinfo_comps_info_index = common global [3 x i8] zeroinitializer, align 1
@p_jinfo_comps_info_id = common global [3 x i8] zeroinitializer, align 1
@p_jinfo_comps_info_h_samp_factor = common global [3 x i8] zeroinitializer, align 1
@p_jinfo_comps_info_v_samp_factor = common global [3 x i8] zeroinitializer, align 1
@p_jinfo_comps_info_quant_tbl_no = common global [3 x i8] zeroinitializer, align 1
@.str6 = private unnamed_addr constant [21 x i8] c" index         = %d\0A\00", align 1
@.str7 = private unnamed_addr constant [21 x i8] c" id            = %d\0A\00", align 1
@.str8 = private unnamed_addr constant [21 x i8] c" h_samp_factor = %d\0A\00", align 1
@.str9 = private unnamed_addr constant [21 x i8] c" v_samp_factor = %d\0A\00", align 1
@.str10 = private unnamed_addr constant [22 x i8] c" quant_tbl_no  = %d\0A\0A\00", align 1
@p_jinfo_smp_fact = common global i32 0, align 4
@.str11 = private unnamed_addr constant [27 x i8] c"\0ASampling Factor is 4:1:1\0A\00", align 1
@.str12 = private unnamed_addr constant [27 x i8] c"\0ASampling Factor is 1:1:1\0A\00", align 1
@.str13 = private unnamed_addr constant [14 x i8] c" length = %d\0A\00", align 1
@.str14 = private unnamed_addr constant [16 x i8] c" num_comp = %d\0A\00", align 1
@p_jinfo_comps_info_dc_tbl_no = common global [3 x i8] zeroinitializer, align 1
@p_jinfo_comps_info_ac_tbl_no = common global [3 x i8] zeroinitializer, align 1
@.str15 = private unnamed_addr constant [19 x i8] c"Bad Component ID!\0A\00", align 1
@.str16 = private unnamed_addr constant [21 x i8] c" comp_id       = %d\0A\00", align 1
@.str17 = private unnamed_addr constant [21 x i8] c" dc_tbl_no     = %d\0A\00", align 1
@.str18 = private unnamed_addr constant [21 x i8] c" ac_tbl_no     = %d\0A\00", align 1
@p_jinfo_jpeg_data = common global i8* null, align 4
@.str19 = private unnamed_addr constant [15 x i8] c" index = 0x%x\0A\00", align 1
@p_jinfo_ac_xhuff_tbl_bits = common global [2 x [36 x i32]] zeroinitializer, align 4
@p_jinfo_ac_xhuff_tbl_huffval = common global [2 x [257 x i32]] zeroinitializer, align 4
@p_jinfo_dc_xhuff_tbl_bits = common global [2 x [36 x i32]] zeroinitializer, align 4
@p_jinfo_dc_xhuff_tbl_huffval = common global [2 x [257 x i32]] zeroinitializer, align 4
@.str20 = private unnamed_addr constant [13 x i8] c" count = %d\0A\00", align 1
@.str21 = private unnamed_addr constant [12 x i8] c" prec = %d\0A\00", align 1
@.str22 = private unnamed_addr constant [12 x i8] c" num  = %d\0A\00", align 1
@p_jinfo_quant_tbl_quantval = common global [4 x [64 x i32]] zeroinitializer, align 4
@.str23 = private unnamed_addr constant [16 x i8] c"\0Amarker = 0x%x\0A\00", align 1
@zigzag_index = constant [64 x i32] [i32 0, i32 1, i32 5, i32 6, i32 14, i32 15, i32 27, i32 28, i32 2, i32 4, i32 7, i32 13, i32 16, i32 26, i32 29, i32 42, i32 3, i32 8, i32 12, i32 17, i32 25, i32 30, i32 41, i32 43, i32 9, i32 11, i32 18, i32 24, i32 31, i32 40, i32 44, i32 53, i32 10, i32 19, i32 23, i32 32, i32 39, i32 45, i32 52, i32 54, i32 20, i32 22, i32 33, i32 38, i32 46, i32 51, i32 55, i32 60, i32 21, i32 34, i32 37, i32 47, i32 50, i32 56, i32 59, i32 61, i32 35, i32 36, i32 48, i32 49, i32 57, i32 58, i32 62, i32 63], align 4
@p_jinfo_MCUWidth = common global i32 0, align 4
@rgb_buf = common global [4 x [3 x [64 x i32]]] zeroinitializer, align 4
@CurHuffReadBuf = common global i8* null, align 4
@.str24 = private unnamed_addr constant [26 x i8] c"Decode 1:1:1 NumMCU = %d\0A\00", align 1
@p_jinfo_NumMCU = common global i32 0, align 4
@OutData_comp_buf = common global [3 x [5310 x i8]] zeroinitializer, align 1
@.str25 = private unnamed_addr constant [26 x i8] c"Decode 4:1:1 NumMCU = %d\0A\00", align 1
@bit_set_mask = constant [32 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128, i32 256, i32 512, i32 1024, i32 2048, i32 4096, i32 8192, i32 16384, i32 32768, i32 65536, i32 131072, i32 262144, i32 524288, i32 1048576, i32 2097152, i32 4194304, i32 8388608, i32 16777216, i32 33554432, i32 67108864, i32 134217728, i32 268435456, i32 536870912, i32 1073741824, i32 -2147483648], align 4
@lmask = constant [32 x i32] [i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127, i32 255, i32 511, i32 1023, i32 2047, i32 4095, i32 8191, i32 16383, i32 32767, i32 65535, i32 131071, i32 262143, i32 524287, i32 1048575, i32 2097151, i32 4194303, i32 8388607, i32 16777215, i32 33554431, i32 67108863, i32 134217727, i32 268435455, i32 536870911, i32 1073741823, i32 2147483647, i32 -1], align 4
@read_position = internal unnamed_addr global i32 -1, align 4
@current_read_byte = internal unnamed_addr global i32 0, align 4
@.str26 = private unnamed_addr constant [20 x i8] c"Huffman read error\0A\00", align 1
@p_jinfo_dc_dhuff_tbl_ml = common global [2 x i32] zeroinitializer, align 4
@p_jinfo_dc_dhuff_tbl_maxcode = common global [2 x [36 x i32]] zeroinitializer, align 4
@p_jinfo_dc_dhuff_tbl_mincode = common global [2 x [36 x i32]] zeroinitializer, align 4
@p_jinfo_dc_dhuff_tbl_valptr = common global [2 x [36 x i32]] zeroinitializer, align 4
@extend_mask = internal unnamed_addr constant [20 x i32] [i32 -2, i32 -4, i32 -8, i32 -16, i32 -32, i32 -64, i32 -128, i32 -256, i32 -512, i32 -1024, i32 -2048, i32 -4096, i32 -8192, i32 -16384, i32 -32768, i32 -65536, i32 -131072, i32 -262144, i32 -524288, i32 -1048576], align 4
@p_jinfo_ac_dhuff_tbl_ml = common global [2 x i32] zeroinitializer, align 4
@p_jinfo_ac_dhuff_tbl_maxcode = common global [2 x [36 x i32]] zeroinitializer, align 4
@p_jinfo_ac_dhuff_tbl_mincode = common global [2 x [36 x i32]] zeroinitializer, align 4
@p_jinfo_ac_dhuff_tbl_valptr = common global [2 x [36 x i32]] zeroinitializer, align 4
@p_jinfo_MCUHeight = common global i32 0, align 4
@OutData_image_width = common global i32 0, align 4
@OutData_image_height = common global i32 0, align 4
@OutData_comp_vpos = common global [3 x i32] zeroinitializer, align 4
@OutData_comp_hpos = common global [3 x i32] zeroinitializer, align 4
@JpegFileBuf = common global [5310 x i8] zeroinitializer, align 1
@.str27 = private unnamed_addr constant [12 x i8] c"Result: %d\0A\00", align 1
@.str28 = private unnamed_addr constant [14 x i8] c"RESULT: PASS\0A\00", align 1
@.str29 = private unnamed_addr constant [14 x i8] c"RESULT: FAIL\0A\00", align 1
@.str30 = private unnamed_addr constant [32 x i8] c"Unanticipated marker detected.\0A\00", align 1

; Function Attrs: nounwind
define i32 @read_byte() #0 {
  %1 = load i8** @ReadBuf, align 4, !tbaa !1
  %2 = getelementptr inbounds i8* %1, i32 1
  store i8* %2, i8** @ReadBuf, align 4, !tbaa !1
  %3 = load i8* %1, align 1, !tbaa !5
  %4 = zext i8 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind
define signext i16 @read_word() #0 {
  %1 = load i8** @ReadBuf, align 4, !tbaa !1
  %2 = getelementptr inbounds i8* %1, i32 1
  store i8* %2, i8** @ReadBuf, align 4, !tbaa !1
  %3 = load i8* %1, align 1, !tbaa !5
  %4 = zext i8 %3 to i16
  %5 = shl nuw i16 %4, 8
  %6 = getelementptr inbounds i8* %1, i32 2
  store i8* %6, i8** @ReadBuf, align 4, !tbaa !1
  %7 = load i8* %2, align 1, !tbaa !5
  %8 = zext i8 %7 to i16
  %9 = or i16 %5, %8
  ret i16 %9
}

; Function Attrs: nounwind
define i32 @read_dword() #0 {
  %1 = load i8** @ReadBuf, align 4, !tbaa !1
  %2 = getelementptr inbounds i8* %1, i32 1
  store i8* %2, i8** @ReadBuf, align 4, !tbaa !1
  %3 = load i8* %1, align 1, !tbaa !5
  %4 = zext i8 %3 to i32
  %5 = shl nuw i32 %4, 24
  %6 = getelementptr inbounds i8* %1, i32 2
  store i8* %6, i8** @ReadBuf, align 4, !tbaa !1
  %7 = load i8* %2, align 1, !tbaa !5
  %8 = zext i8 %7 to i32
  %9 = shl nuw nsw i32 %8, 16
  %10 = or i32 %9, %5
  %11 = getelementptr inbounds i8* %1, i32 3
  store i8* %11, i8** @ReadBuf, align 4, !tbaa !1
  %12 = load i8* %6, align 1, !tbaa !5
  %13 = zext i8 %12 to i32
  %14 = shl nuw nsw i32 %13, 8
  %15 = or i32 %10, %14
  %16 = getelementptr inbounds i8* %1, i32 4
  store i8* %16, i8** @ReadBuf, align 4, !tbaa !1
  %17 = load i8* %11, align 1, !tbaa !5
  %18 = zext i8 %17 to i32
  %19 = or i32 %15, %18
  ret i32 %19
}

; Function Attrs: nounwind
define i32 @first_marker() #0 {
  %1 = load i8** @ReadBuf, align 4, !tbaa !1
  %2 = getelementptr inbounds i8* %1, i32 1
  store i8* %2, i8** @ReadBuf, align 4, !tbaa !1
  %3 = load i8* %1, align 1, !tbaa !5
  %4 = getelementptr inbounds i8* %1, i32 2
  store i8* %4, i8** @ReadBuf, align 4, !tbaa !1
  %5 = load i8* %2, align 1, !tbaa !5
  %6 = icmp ne i8 %3, -1
  %7 = icmp ne i8 %5, -40
  %or.cond = or i1 %6, %7
  br i1 %or.cond, label %8, label %10

; <label>:8                                       ; preds = %0
  %9 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @.str, i32 0, i32 0)) #4
  tail call void @exit(i32 0) #5
  unreachable

; <label>:10                                      ; preds = %0
  %11 = load i32* @main_result, align 4, !tbaa !6
  %12 = add nsw i32 %11, 1
  store i32 %12, i32* @main_result, align 4, !tbaa !6
  ret i32 216
}

declare i32 @printf(i8*, ...) #1

; Function Attrs: noreturn nounwind
declare void @exit(i32) #2

; Function Attrs: nounwind
define i32 @next_marker() #0 {
  %.pre = load i8** @ReadBuf, align 4, !tbaa !1
  br label %.loopexit

.loopexit.loopexit:                               ; preds = %.preheader
  %.lcssa7 = phi i8* [ %7, %.preheader ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %0
  %1 = phi i8* [ %.pre, %0 ], [ %.lcssa7, %.loopexit.loopexit ]
  %storemerge2 = getelementptr inbounds i8* %1, i32 1
  store i8* %storemerge2, i8** @ReadBuf, align 4, !tbaa !1
  %.sink3 = load i8* %1, align 1
  %2 = icmp eq i8 %.sink3, -1
  br i1 %2, label %.preheader.preheader, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %.loopexit
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
  %3 = phi i8* [ %4, %.lr.ph ], [ %1, %.lr.ph.preheader ]
  %4 = phi i8* [ %storemerge, %.lr.ph ], [ %storemerge2, %.lr.ph.preheader ]
  %storemerge = getelementptr inbounds i8* %3, i32 2
  store i8* %storemerge, i8** @ReadBuf, align 4, !tbaa !1
  %.sink = load i8* %4, align 1
  %5 = icmp eq i8 %.sink, -1
  br i1 %5, label %.preheader.preheader.loopexit, label %.lr.ph

.preheader.preheader.loopexit:                    ; preds = %.lr.ph
  %storemerge.lcssa = phi i8* [ %storemerge, %.lr.ph ]
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %.preheader.preheader.loopexit, %.loopexit
  %.ph = phi i8* [ %storemerge2, %.loopexit ], [ %storemerge.lcssa, %.preheader.preheader.loopexit ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %6 = phi i8* [ %7, %.preheader ], [ %.ph, %.preheader.preheader ]
  %7 = getelementptr inbounds i8* %6, i32 1
  store i8* %7, i8** @ReadBuf, align 4, !tbaa !1
  %8 = load i8* %6, align 1, !tbaa !5
  %9 = zext i8 %8 to i32
  switch i32 %9, label %10 [
    i32 255, label %.preheader
    i32 0, label %.loopexit.loopexit
  ]

; <label>:10                                      ; preds = %.preheader
  %.lcssa = phi i32 [ %9, %.preheader ]
  ret i32 %.lcssa
}

; Function Attrs: nounwind
define void @get_sof() #0 {
  %1 = load i8** @ReadBuf, align 4, !tbaa !1
  %2 = getelementptr inbounds i8* %1, i32 1
  store i8* %2, i8** @ReadBuf, align 4, !tbaa !1
  %3 = load i8* %1, align 1, !tbaa !5
  %4 = zext i8 %3 to i16
  %5 = shl nuw i16 %4, 8
  %6 = getelementptr inbounds i8* %1, i32 2
  store i8* %6, i8** @ReadBuf, align 4, !tbaa !1
  %7 = load i8* %2, align 1, !tbaa !5
  %8 = zext i8 %7 to i16
  %9 = or i16 %5, %8
  %10 = sext i16 %9 to i32
  %11 = getelementptr inbounds i8* %1, i32 3
  store i8* %11, i8** @ReadBuf, align 4, !tbaa !1
  %12 = load i8* %6, align 1, !tbaa !5
  store i8 %12, i8* @p_jinfo_data_precision, align 1, !tbaa !5
  %13 = getelementptr inbounds i8* %1, i32 4
  store i8* %13, i8** @ReadBuf, align 4, !tbaa !1
  %14 = load i8* %11, align 1, !tbaa !5
  %15 = zext i8 %14 to i16
  %16 = shl nuw i16 %15, 8
  %17 = getelementptr inbounds i8* %1, i32 5
  store i8* %17, i8** @ReadBuf, align 4, !tbaa !1
  %18 = load i8* %13, align 1, !tbaa !5
  %19 = zext i8 %18 to i16
  %20 = or i16 %16, %19
  store i16 %20, i16* @p_jinfo_image_height, align 2, !tbaa !8
  %21 = getelementptr inbounds i8* %1, i32 6
  store i8* %21, i8** @ReadBuf, align 4, !tbaa !1
  %22 = load i8* %17, align 1, !tbaa !5
  %23 = zext i8 %22 to i16
  %24 = shl nuw i16 %23, 8
  %25 = getelementptr inbounds i8* %1, i32 7
  store i8* %25, i8** @ReadBuf, align 4, !tbaa !1
  %26 = load i8* %21, align 1, !tbaa !5
  %27 = zext i8 %26 to i16
  %28 = or i16 %24, %27
  store i16 %28, i16* @p_jinfo_image_width, align 2, !tbaa !8
  %29 = getelementptr inbounds i8* %1, i32 8
  store i8* %29, i8** @ReadBuf, align 4, !tbaa !1
  %30 = load i8* %25, align 1, !tbaa !5
  store i8 %30, i8* @p_jinfo_num_components, align 1, !tbaa !5
  %31 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str1, i32 0, i32 0), i32 %10) #4
  %32 = load i8* @p_jinfo_data_precision, align 1, !tbaa !5
  %33 = sext i8 %32 to i32
  %34 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str2, i32 0, i32 0), i32 %33) #4
  %35 = load i16* @p_jinfo_image_height, align 2, !tbaa !8
  %36 = sext i16 %35 to i32
  %37 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str3, i32 0, i32 0), i32 %36) #4
  %38 = load i16* @p_jinfo_image_width, align 2, !tbaa !8
  %39 = sext i16 %38 to i32
  %40 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str4, i32 0, i32 0), i32 %39) #4
  %41 = load i8* @p_jinfo_num_components, align 1, !tbaa !5
  %42 = sext i8 %41 to i32
  %43 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str5, i32 0, i32 0), i32 %42) #4
  %44 = load i32* @out_length_get_sof, align 4, !tbaa !6
  %45 = icmp eq i32 %10, %44
  br i1 %45, label %46, label %49

; <label>:46                                      ; preds = %0
  %47 = load i32* @main_result, align 4, !tbaa !6
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* @main_result, align 4, !tbaa !6
  br label %49

; <label>:49                                      ; preds = %46, %0
  %50 = load i8* @p_jinfo_data_precision, align 1, !tbaa !5
  %51 = sext i8 %50 to i32
  %52 = load i32* @out_data_precision_get_sof, align 4, !tbaa !6
  %53 = icmp eq i32 %51, %52
  br i1 %53, label %54, label %57

; <label>:54                                      ; preds = %49
  %55 = load i32* @main_result, align 4, !tbaa !6
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* @main_result, align 4, !tbaa !6
  br label %57

; <label>:57                                      ; preds = %54, %49
  %58 = load i16* @p_jinfo_image_height, align 2, !tbaa !8
  %59 = sext i16 %58 to i32
  %60 = load i32* @out_p_jinfo_image_height_get_sof, align 4, !tbaa !6
  %61 = icmp eq i32 %59, %60
  br i1 %61, label %62, label %65

; <label>:62                                      ; preds = %57
  %63 = load i32* @main_result, align 4, !tbaa !6
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* @main_result, align 4, !tbaa !6
  br label %65

; <label>:65                                      ; preds = %62, %57
  %66 = load i16* @p_jinfo_image_width, align 2, !tbaa !8
  %67 = sext i16 %66 to i32
  %68 = load i32* @out_p_jinfo_image_width_get_sof, align 4, !tbaa !6
  %69 = icmp eq i32 %67, %68
  br i1 %69, label %70, label %73

; <label>:70                                      ; preds = %65
  %71 = load i32* @main_result, align 4, !tbaa !6
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* @main_result, align 4, !tbaa !6
  br label %73

; <label>:73                                      ; preds = %70, %65
  %74 = load i8* @p_jinfo_num_components, align 1, !tbaa !5
  %75 = sext i8 %74 to i32
  %76 = load i32* @out_p_jinfo_num_components_get_sof, align 4, !tbaa !6
  %77 = icmp eq i32 %75, %76
  br i1 %77, label %78, label %.preheader

; <label>:78                                      ; preds = %73
  %79 = load i32* @main_result, align 4, !tbaa !6
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* @main_result, align 4, !tbaa !6
  br label %.preheader

.preheader:                                       ; preds = %78, %73
  %81 = icmp sgt i8 %74, 0
  br i1 %81, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.preheader
  br label %.lr.ph

.lr.ph:                                           ; preds = %155, %.lr.ph.preheader
  %ci.02 = phi i32 [ %156, %155 ], [ 0, %.lr.ph.preheader ]
  %82 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_index, i32 0, i32 %ci.02
  %83 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_id, i32 0, i32 %ci.02
  %84 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_h_samp_factor, i32 0, i32 %ci.02
  %85 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_v_samp_factor, i32 0, i32 %ci.02
  %86 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 %ci.02
  %87 = trunc i32 %ci.02 to i8
  store i8 %87, i8* %82, align 1, !tbaa !5
  %88 = load i8** @ReadBuf, align 4, !tbaa !1
  %89 = getelementptr inbounds i8* %88, i32 1
  store i8* %89, i8** @ReadBuf, align 4, !tbaa !1
  %90 = load i8* %88, align 1, !tbaa !5
  store i8 %90, i8* %83, align 1, !tbaa !5
  %91 = getelementptr inbounds i8* %88, i32 2
  store i8* %91, i8** @ReadBuf, align 4, !tbaa !1
  %92 = load i8* %89, align 1, !tbaa !5
  %93 = lshr i8 %92, 4
  store i8 %93, i8* %84, align 1, !tbaa !5
  %94 = and i8 %92, 15
  store i8 %94, i8* %85, align 1, !tbaa !5
  %95 = getelementptr inbounds i8* %88, i32 3
  store i8* %95, i8** @ReadBuf, align 4, !tbaa !1
  %96 = load i8* %91, align 1, !tbaa !5
  store i8 %96, i8* %86, align 1, !tbaa !5
  %sext = shl i32 %ci.02, 24
  %97 = ashr exact i32 %sext, 24
  %98 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str6, i32 0, i32 0), i32 %97) #4
  %99 = load i8* %83, align 1, !tbaa !5
  %100 = sext i8 %99 to i32
  %101 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str7, i32 0, i32 0), i32 %100) #4
  %102 = load i8* %84, align 1, !tbaa !5
  %103 = sext i8 %102 to i32
  %104 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str8, i32 0, i32 0), i32 %103) #4
  %105 = load i8* %85, align 1, !tbaa !5
  %106 = sext i8 %105 to i32
  %107 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str9, i32 0, i32 0), i32 %106) #4
  %108 = load i8* %86, align 1, !tbaa !5
  %109 = sext i8 %108 to i32
  %110 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([22 x i8]* @.str10, i32 0, i32 0), i32 %109) #4
  %111 = load i8* %82, align 1, !tbaa !5
  %112 = sext i8 %111 to i32
  %113 = getelementptr inbounds [3 x i32]* @out_index_get_sof, i32 0, i32 %ci.02
  %114 = load i32* %113, align 4, !tbaa !6
  %115 = icmp eq i32 %112, %114
  br i1 %115, label %116, label %119

; <label>:116                                     ; preds = %.lr.ph
  %117 = load i32* @main_result, align 4, !tbaa !6
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* @main_result, align 4, !tbaa !6
  br label %119

; <label>:119                                     ; preds = %116, %.lr.ph
  %120 = load i8* %83, align 1, !tbaa !5
  %121 = sext i8 %120 to i32
  %122 = getelementptr inbounds [3 x i32]* @out_id_get_sof, i32 0, i32 %ci.02
  %123 = load i32* %122, align 4, !tbaa !6
  %124 = icmp eq i32 %121, %123
  br i1 %124, label %125, label %128

; <label>:125                                     ; preds = %119
  %126 = load i32* @main_result, align 4, !tbaa !6
  %127 = add nsw i32 %126, 1
  store i32 %127, i32* @main_result, align 4, !tbaa !6
  br label %128

; <label>:128                                     ; preds = %125, %119
  %129 = load i8* %84, align 1, !tbaa !5
  %130 = sext i8 %129 to i32
  %131 = getelementptr inbounds [3 x i32]* @out_h_samp_factor_get_sof, i32 0, i32 %ci.02
  %132 = load i32* %131, align 4, !tbaa !6
  %133 = icmp eq i32 %130, %132
  br i1 %133, label %134, label %137

; <label>:134                                     ; preds = %128
  %135 = load i32* @main_result, align 4, !tbaa !6
  %136 = add nsw i32 %135, 1
  store i32 %136, i32* @main_result, align 4, !tbaa !6
  br label %137

; <label>:137                                     ; preds = %134, %128
  %138 = load i8* %85, align 1, !tbaa !5
  %139 = sext i8 %138 to i32
  %140 = getelementptr inbounds [3 x i32]* @out_v_samp_factor_get_sof, i32 0, i32 %ci.02
  %141 = load i32* %140, align 4, !tbaa !6
  %142 = icmp eq i32 %139, %141
  br i1 %142, label %143, label %146

; <label>:143                                     ; preds = %137
  %144 = load i32* @main_result, align 4, !tbaa !6
  %145 = add nsw i32 %144, 1
  store i32 %145, i32* @main_result, align 4, !tbaa !6
  br label %146

; <label>:146                                     ; preds = %143, %137
  %147 = load i8* %86, align 1, !tbaa !5
  %148 = sext i8 %147 to i32
  %149 = getelementptr inbounds [3 x i32]* @out_quant_tbl_no_get_sof, i32 0, i32 %ci.02
  %150 = load i32* %149, align 4, !tbaa !6
  %151 = icmp eq i32 %148, %150
  br i1 %151, label %152, label %155

; <label>:152                                     ; preds = %146
  %153 = load i32* @main_result, align 4, !tbaa !6
  %154 = add nsw i32 %153, 1
  store i32 %154, i32* @main_result, align 4, !tbaa !6
  br label %155

; <label>:155                                     ; preds = %152, %146
  %156 = add nsw i32 %ci.02, 1
  %157 = load i8* @p_jinfo_num_components, align 1, !tbaa !5
  %158 = sext i8 %157 to i32
  %159 = icmp slt i32 %156, %158
  br i1 %159, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %155
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  %160 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_h_samp_factor, i32 0, i32 0), align 1, !tbaa !5
  %161 = icmp eq i8 %160, 2
  br i1 %161, label %162, label %164

; <label>:162                                     ; preds = %._crit_edge
  store i32 2, i32* @p_jinfo_smp_fact, align 4, !tbaa !6
  %163 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([27 x i8]* @.str11, i32 0, i32 0)) #4
  br label %166

; <label>:164                                     ; preds = %._crit_edge
  store i32 0, i32* @p_jinfo_smp_fact, align 4, !tbaa !6
  %165 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([27 x i8]* @.str12, i32 0, i32 0)) #4
  br label %166

; <label>:166                                     ; preds = %164, %162
  ret void
}

; Function Attrs: nounwind
define void @get_sos() #0 {
  %1 = load i8** @ReadBuf, align 4, !tbaa !1
  %2 = getelementptr inbounds i8* %1, i32 1
  store i8* %2, i8** @ReadBuf, align 4, !tbaa !1
  %3 = load i8* %1, align 1, !tbaa !5
  %4 = zext i8 %3 to i16
  %5 = shl nuw i16 %4, 8
  %6 = getelementptr inbounds i8* %1, i32 2
  store i8* %6, i8** @ReadBuf, align 4, !tbaa !1
  %7 = load i8* %2, align 1, !tbaa !5
  %8 = zext i8 %7 to i16
  %9 = or i16 %5, %8
  %10 = sext i16 %9 to i32
  %11 = getelementptr inbounds i8* %1, i32 3
  store i8* %11, i8** @ReadBuf, align 4, !tbaa !1
  %12 = load i8* %6, align 1, !tbaa !5
  %13 = zext i8 %12 to i32
  %14 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str13, i32 0, i32 0), i32 %10) #4
  %15 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @.str14, i32 0, i32 0), i32 %13) #4
  %16 = load i32* @out_length_get_sos, align 4, !tbaa !6
  %17 = icmp eq i32 %10, %16
  br i1 %17, label %18, label %21

; <label>:18                                      ; preds = %0
  %19 = load i32* @main_result, align 4, !tbaa !6
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @main_result, align 4, !tbaa !6
  br label %21

; <label>:21                                      ; preds = %18, %0
  %22 = load i32* @out_num_comp_get_sos, align 4, !tbaa !6
  %23 = icmp eq i32 %13, %22
  br i1 %23, label %24, label %.preheader2

; <label>:24                                      ; preds = %21
  %25 = load i32* @main_result, align 4, !tbaa !6
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* @main_result, align 4, !tbaa !6
  br label %.preheader2

.preheader2:                                      ; preds = %24, %21
  %27 = icmp eq i8 %12, 0
  br i1 %27, label %.preheader, label %.lr.ph10.preheader

.lr.ph10.preheader:                               ; preds = %.preheader2
  br label %.lr.ph10

.preheader.loopexit:                              ; preds = %85
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %.preheader2
  %ReadBuf.promoted = load i8** @ReadBuf, align 4, !tbaa !1
  %scevgep = getelementptr i8* %ReadBuf.promoted, i32 3
  store i8* %scevgep, i8** @ReadBuf, align 4, !tbaa !1
  store i8* %scevgep, i8** @p_jinfo_jpeg_data, align 4, !tbaa !1
  ret void

.lr.ph10:                                         ; preds = %85, %.lr.ph10.preheader
  %i.09 = phi i32 [ %87, %85 ], [ 0, %.lr.ph10.preheader ]
  %28 = load i8** @ReadBuf, align 4, !tbaa !1
  %29 = getelementptr inbounds i8* %28, i32 1
  store i8* %29, i8** @ReadBuf, align 4, !tbaa !1
  %30 = load i8* %28, align 1, !tbaa !5
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds i8* %28, i32 2
  store i8* %32, i8** @ReadBuf, align 4, !tbaa !1
  %33 = load i8* %29, align 1, !tbaa !5
  %34 = load i8* @p_jinfo_num_components, align 1, !tbaa !5
  %35 = icmp sgt i8 %34, 0
  br i1 %35, label %.lr.ph, label %._crit_edge.loopexit14

.lr.ph:                                           ; preds = %.lr.ph10
  %36 = sext i8 %34 to i32
  br label %39

; <label>:37                                      ; preds = %39
  %38 = icmp slt i32 %44, %36
  br i1 %38, label %39, label %._crit_edge.loopexit

; <label>:39                                      ; preds = %37, %.lr.ph
  %ci.06 = phi i32 [ 0, %.lr.ph ], [ %44, %37 ]
  %40 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_id, i32 0, i32 %ci.06
  %41 = load i8* %40, align 1, !tbaa !5
  %42 = sext i8 %41 to i32
  %43 = icmp eq i32 %31, %42
  %44 = add nsw i32 %ci.06, 1
  br i1 %43, label %46, label %37

._crit_edge.loopexit:                             ; preds = %37
  br label %._crit_edge

._crit_edge.loopexit14:                           ; preds = %.lr.ph10
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit14, %._crit_edge.loopexit
  %45 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str15, i32 0, i32 0)) #4
  tail call void @exit(i32 0) #5
  unreachable

; <label>:46                                      ; preds = %39
  %ci.06.lcssa = phi i32 [ %ci.06, %39 ]
  %47 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_dc_tbl_no, i32 0, i32 %ci.06.lcssa
  %48 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_ac_tbl_no, i32 0, i32 %ci.06.lcssa
  %49 = load i32* @main_result, align 4, !tbaa !6
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* @main_result, align 4, !tbaa !6
  %51 = lshr i8 %33, 4
  store i8 %51, i8* %47, align 1, !tbaa !5
  %52 = and i8 %33, 15
  store i8 %52, i8* %48, align 1, !tbaa !5
  %53 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str16, i32 0, i32 0), i32 %31) #4
  %54 = load i8* %47, align 1, !tbaa !5
  %55 = sext i8 %54 to i32
  %56 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str17, i32 0, i32 0), i32 %55) #4
  %57 = load i8* %48, align 1, !tbaa !5
  %58 = sext i8 %57 to i32
  %59 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str18, i32 0, i32 0), i32 %58) #4
  %60 = load i32* @i_get_sos, align 4, !tbaa !6
  %61 = getelementptr inbounds [3 x i32]* @out_comp_id_get_sos, i32 0, i32 %60
  %62 = load i32* %61, align 4, !tbaa !6
  %63 = icmp eq i32 %31, %62
  br i1 %63, label %64, label %67

; <label>:64                                      ; preds = %46
  %65 = load i32* @main_result, align 4, !tbaa !6
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* @main_result, align 4, !tbaa !6
  br label %67

; <label>:67                                      ; preds = %64, %46
  %68 = load i8* %47, align 1, !tbaa !5
  %69 = sext i8 %68 to i32
  %70 = getelementptr inbounds [3 x i32]* @out_dc_tbl_no_get_sos, i32 0, i32 %60
  %71 = load i32* %70, align 4, !tbaa !6
  %72 = icmp eq i32 %69, %71
  br i1 %72, label %73, label %76

; <label>:73                                      ; preds = %67
  %74 = load i32* @main_result, align 4, !tbaa !6
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* @main_result, align 4, !tbaa !6
  br label %76

; <label>:76                                      ; preds = %73, %67
  %77 = load i8* %48, align 1, !tbaa !5
  %78 = sext i8 %77 to i32
  %79 = getelementptr inbounds [3 x i32]* @out_ac_tbl_no_get_sos, i32 0, i32 %60
  %80 = load i32* %79, align 4, !tbaa !6
  %81 = icmp eq i32 %78, %80
  br i1 %81, label %82, label %85

; <label>:82                                      ; preds = %76
  %83 = load i32* @main_result, align 4, !tbaa !6
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* @main_result, align 4, !tbaa !6
  br label %85

; <label>:85                                      ; preds = %82, %76
  %86 = add nsw i32 %60, 1
  store i32 %86, i32* @i_get_sos, align 4, !tbaa !6
  %87 = add nsw i32 %i.09, 1
  %88 = icmp slt i32 %87, %13
  br i1 %88, label %.lr.ph10, label %.preheader.loopexit
}

; Function Attrs: nounwind
define void @get_dht() #0 {
  %1 = load i8** @ReadBuf, align 4, !tbaa !1
  %2 = getelementptr inbounds i8* %1, i32 1
  store i8* %2, i8** @ReadBuf, align 4, !tbaa !1
  %3 = load i8* %1, align 1, !tbaa !5
  %4 = zext i8 %3 to i16
  %5 = shl nuw i16 %4, 8
  %6 = getelementptr inbounds i8* %1, i32 2
  store i8* %6, i8** @ReadBuf, align 4, !tbaa !1
  %7 = load i8* %2, align 1, !tbaa !5
  %8 = zext i8 %7 to i16
  %9 = or i16 %5, %8
  %10 = sext i16 %9 to i32
  %11 = add nsw i32 %10, -2
  %12 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str13, i32 0, i32 0), i32 %11) #4
  %13 = load i32* @i_get_dht, align 4, !tbaa !6
  %14 = getelementptr inbounds [4 x i32]* @out_length_get_dht, i32 0, i32 %13
  %15 = load i32* %14, align 4, !tbaa !6
  %16 = icmp eq i32 %11, %15
  br i1 %16, label %17, label %.preheader

; <label>:17                                      ; preds = %0
  %18 = load i32* @main_result, align 4, !tbaa !6
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* @main_result, align 4, !tbaa !6
  br label %.preheader

.preheader:                                       ; preds = %17, %0
  %20 = icmp sgt i32 %11, 16
  br i1 %20, label %.lr.ph5.preheader, label %._crit_edge6

.lr.ph5.preheader:                                ; preds = %.preheader
  br label %.lr.ph5

.lr.ph5:                                          ; preds = %._crit_edge, %.lr.ph5.preheader
  %length.04 = phi i32 [ %143, %._crit_edge ], [ %11, %.lr.ph5.preheader ]
  %21 = load i8** @ReadBuf, align 4, !tbaa !1
  %22 = getelementptr inbounds i8* %21, i32 1
  store i8* %22, i8** @ReadBuf, align 4, !tbaa !1
  %23 = load i8* %21, align 1, !tbaa !5
  %24 = zext i8 %23 to i32
  %25 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str19, i32 0, i32 0), i32 %24) #4
  %26 = load i32* @i_get_dht, align 4, !tbaa !6
  %27 = getelementptr inbounds [4 x i32]* @out_index_get_dht, i32 0, i32 %26
  %28 = load i32* %27, align 4, !tbaa !6
  %29 = icmp eq i32 %24, %28
  br i1 %29, label %30, label %33

; <label>:30                                      ; preds = %.lr.ph5
  %31 = load i32* @main_result, align 4, !tbaa !6
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* @main_result, align 4, !tbaa !6
  br label %33

; <label>:33                                      ; preds = %30, %.lr.ph5
  %34 = and i32 %24, 16
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %40, label %36

; <label>:36                                      ; preds = %33
  %37 = add nsw i32 %24, -16
  %38 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 %37, i32 0
  %39 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_ac_xhuff_tbl_huffval, i32 0, i32 %37, i32 0
  br label %43

; <label>:40                                      ; preds = %33
  %41 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 %24, i32 0
  %42 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_dc_xhuff_tbl_huffval, i32 0, i32 %24, i32 0
  br label %43

; <label>:43                                      ; preds = %40, %36
  %p_xhtbl_bits.0 = phi i32* [ %38, %36 ], [ %41, %40 ]
  %p_xhtbl_huffval.0 = phi i32* [ %39, %36 ], [ %42, %40 ]
  %.pre = load i8** @ReadBuf, align 4, !tbaa !1
  br label %44

; <label>:44                                      ; preds = %43
  %45 = getelementptr inbounds i8* %.pre, i32 1
  store i8* %45, i8** @ReadBuf, align 4, !tbaa !1
  %46 = load i8* %.pre, align 1, !tbaa !5
  %47 = zext i8 %46 to i32
  %48 = getelementptr inbounds i32* %p_xhtbl_bits.0, i32 1
  store i32 %47, i32* %48, align 4, !tbaa !6
  %49 = getelementptr inbounds i8* %45, i32 1
  store i8* %49, i8** @ReadBuf, align 4, !tbaa !1
  %50 = load i8* %45, align 1, !tbaa !5
  %51 = zext i8 %50 to i32
  %52 = getelementptr inbounds i32* %p_xhtbl_bits.0, i32 2
  store i32 %51, i32* %52, align 4, !tbaa !6
  %53 = add nsw i32 %51, %47
  %54 = getelementptr inbounds i8* %49, i32 1
  store i8* %54, i8** @ReadBuf, align 4, !tbaa !1
  %55 = load i8* %49, align 1, !tbaa !5
  %56 = zext i8 %55 to i32
  %57 = getelementptr inbounds i32* %p_xhtbl_bits.0, i32 3
  store i32 %56, i32* %57, align 4, !tbaa !6
  %58 = add nsw i32 %56, %53
  %59 = getelementptr inbounds i8* %54, i32 1
  store i8* %59, i8** @ReadBuf, align 4, !tbaa !1
  %60 = load i8* %54, align 1, !tbaa !5
  %61 = zext i8 %60 to i32
  %62 = getelementptr inbounds i32* %p_xhtbl_bits.0, i32 4
  store i32 %61, i32* %62, align 4, !tbaa !6
  %63 = add nsw i32 %61, %58
  %64 = getelementptr inbounds i8* %59, i32 1
  store i8* %64, i8** @ReadBuf, align 4, !tbaa !1
  %65 = load i8* %59, align 1, !tbaa !5
  %66 = zext i8 %65 to i32
  %67 = getelementptr inbounds i32* %p_xhtbl_bits.0, i32 5
  store i32 %66, i32* %67, align 4, !tbaa !6
  %68 = add nsw i32 %66, %63
  %69 = getelementptr inbounds i8* %64, i32 1
  store i8* %69, i8** @ReadBuf, align 4, !tbaa !1
  %70 = load i8* %64, align 1, !tbaa !5
  %71 = zext i8 %70 to i32
  %72 = getelementptr inbounds i32* %p_xhtbl_bits.0, i32 6
  store i32 %71, i32* %72, align 4, !tbaa !6
  %73 = add nsw i32 %71, %68
  %74 = getelementptr inbounds i8* %69, i32 1
  store i8* %74, i8** @ReadBuf, align 4, !tbaa !1
  %75 = load i8* %69, align 1, !tbaa !5
  %76 = zext i8 %75 to i32
  %77 = getelementptr inbounds i32* %p_xhtbl_bits.0, i32 7
  store i32 %76, i32* %77, align 4, !tbaa !6
  %78 = add nsw i32 %76, %73
  %79 = getelementptr inbounds i8* %74, i32 1
  store i8* %79, i8** @ReadBuf, align 4, !tbaa !1
  %80 = load i8* %74, align 1, !tbaa !5
  %81 = zext i8 %80 to i32
  %82 = getelementptr inbounds i32* %p_xhtbl_bits.0, i32 8
  store i32 %81, i32* %82, align 4, !tbaa !6
  %83 = add nsw i32 %81, %78
  %84 = getelementptr inbounds i8* %79, i32 1
  store i8* %84, i8** @ReadBuf, align 4, !tbaa !1
  %85 = load i8* %79, align 1, !tbaa !5
  %86 = zext i8 %85 to i32
  %87 = getelementptr inbounds i32* %p_xhtbl_bits.0, i32 9
  store i32 %86, i32* %87, align 4, !tbaa !6
  %88 = add nsw i32 %86, %83
  %89 = getelementptr inbounds i8* %84, i32 1
  store i8* %89, i8** @ReadBuf, align 4, !tbaa !1
  %90 = load i8* %84, align 1, !tbaa !5
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds i32* %p_xhtbl_bits.0, i32 10
  store i32 %91, i32* %92, align 4, !tbaa !6
  %93 = add nsw i32 %91, %88
  %94 = getelementptr inbounds i8* %89, i32 1
  store i8* %94, i8** @ReadBuf, align 4, !tbaa !1
  %95 = load i8* %89, align 1, !tbaa !5
  %96 = zext i8 %95 to i32
  %97 = getelementptr inbounds i32* %p_xhtbl_bits.0, i32 11
  store i32 %96, i32* %97, align 4, !tbaa !6
  %98 = add nsw i32 %96, %93
  %99 = getelementptr inbounds i8* %94, i32 1
  store i8* %99, i8** @ReadBuf, align 4, !tbaa !1
  %100 = load i8* %94, align 1, !tbaa !5
  %101 = zext i8 %100 to i32
  %102 = getelementptr inbounds i32* %p_xhtbl_bits.0, i32 12
  store i32 %101, i32* %102, align 4, !tbaa !6
  %103 = add nsw i32 %101, %98
  %104 = getelementptr inbounds i8* %99, i32 1
  store i8* %104, i8** @ReadBuf, align 4, !tbaa !1
  %105 = load i8* %99, align 1, !tbaa !5
  %106 = zext i8 %105 to i32
  %107 = getelementptr inbounds i32* %p_xhtbl_bits.0, i32 13
  store i32 %106, i32* %107, align 4, !tbaa !6
  %108 = add nsw i32 %106, %103
  %109 = getelementptr inbounds i8* %104, i32 1
  store i8* %109, i8** @ReadBuf, align 4, !tbaa !1
  %110 = load i8* %104, align 1, !tbaa !5
  %111 = zext i8 %110 to i32
  %112 = getelementptr inbounds i32* %p_xhtbl_bits.0, i32 14
  store i32 %111, i32* %112, align 4, !tbaa !6
  %113 = add nsw i32 %111, %108
  %114 = getelementptr inbounds i8* %109, i32 1
  store i8* %114, i8** @ReadBuf, align 4, !tbaa !1
  %115 = load i8* %109, align 1, !tbaa !5
  %116 = zext i8 %115 to i32
  %117 = getelementptr inbounds i32* %p_xhtbl_bits.0, i32 15
  store i32 %116, i32* %117, align 4, !tbaa !6
  %118 = add nsw i32 %116, %113
  %119 = getelementptr inbounds i8* %114, i32 1
  store i8* %119, i8** @ReadBuf, align 4, !tbaa !1
  %120 = load i8* %114, align 1, !tbaa !5
  %121 = zext i8 %120 to i32
  %122 = getelementptr inbounds i32* %p_xhtbl_bits.0, i32 16
  store i32 %121, i32* %122, align 4, !tbaa !6
  %123 = add nsw i32 %121, %118
  %124 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str20, i32 0, i32 0), i32 %123) #4
  %125 = load i32* @i_get_dht, align 4, !tbaa !6
  %126 = getelementptr inbounds [4 x i32]* @out_count_get_dht, i32 0, i32 %125
  %127 = load i32* %126, align 4, !tbaa !6
  %128 = icmp eq i32 %123, %127
  br i1 %128, label %129, label %132

; <label>:129                                     ; preds = %44
  %130 = load i32* @main_result, align 4, !tbaa !6
  %131 = add nsw i32 %130, 1
  store i32 %131, i32* @main_result, align 4, !tbaa !6
  br label %132

; <label>:132                                     ; preds = %129, %44
  %133 = add nsw i32 %125, 1
  store i32 %133, i32* @i_get_dht, align 4, !tbaa !6
  %134 = add nsw i32 %length.04, -17
  %135 = icmp sgt i32 %123, 0
  br i1 %135, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %132
  %.pre8 = load i8** @ReadBuf, align 4, !tbaa !1
  br label %136

; <label>:136                                     ; preds = %136, %.lr.ph
  %137 = phi i8* [ %.pre8, %.lr.ph ], [ %138, %136 ]
  %i.13 = phi i32 [ 0, %.lr.ph ], [ %142, %136 ]
  %138 = getelementptr inbounds i8* %137, i32 1
  store i8* %138, i8** @ReadBuf, align 4, !tbaa !1
  %139 = load i8* %137, align 1, !tbaa !5
  %140 = zext i8 %139 to i32
  %141 = getelementptr inbounds i32* %p_xhtbl_huffval.0, i32 %i.13
  store i32 %140, i32* %141, align 4, !tbaa !6
  %142 = add nsw i32 %i.13, 1
  %exitcond7 = icmp eq i32 %142, %123
  br i1 %exitcond7, label %._crit_edge.loopexit, label %136

._crit_edge.loopexit:                             ; preds = %136
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %132
  %143 = sub i32 %134, %123
  %144 = icmp sgt i32 %143, 16
  br i1 %144, label %.lr.ph5, label %._crit_edge6.loopexit

._crit_edge6.loopexit:                            ; preds = %._crit_edge
  br label %._crit_edge6

._crit_edge6:                                     ; preds = %._crit_edge6.loopexit, %.preheader
  ret void
}

; Function Attrs: nounwind
define void @get_dqt() #0 {
  %1 = load i8** @ReadBuf, align 4, !tbaa !1
  %2 = getelementptr inbounds i8* %1, i32 1
  store i8* %2, i8** @ReadBuf, align 4, !tbaa !1
  %3 = load i8* %1, align 1, !tbaa !5
  %4 = zext i8 %3 to i16
  %5 = shl nuw i16 %4, 8
  %6 = getelementptr inbounds i8* %1, i32 2
  store i8* %6, i8** @ReadBuf, align 4, !tbaa !1
  %7 = load i8* %2, align 1, !tbaa !5
  %8 = zext i8 %7 to i16
  %9 = or i16 %5, %8
  %10 = sext i16 %9 to i32
  %11 = add nsw i32 %10, -2
  %12 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str13, i32 0, i32 0), i32 %11) #4
  %13 = load i32* @i_get_dqt, align 4, !tbaa !6
  %14 = getelementptr inbounds [2 x i32]* @out_length_get_dqt, i32 0, i32 %13
  %15 = load i32* %14, align 4, !tbaa !6
  %16 = icmp eq i32 %11, %15
  br i1 %16, label %17, label %.preheader

; <label>:17                                      ; preds = %0
  %18 = load i32* @main_result, align 4, !tbaa !6
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* @main_result, align 4, !tbaa !6
  br label %.preheader

.preheader:                                       ; preds = %17, %0
  %20 = icmp sgt i32 %11, 0
  br i1 %20, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %.pre = load i8** @ReadBuf, align 4, !tbaa !1
  br label %21

; <label>:21                                      ; preds = %.us-lcssa.us, %.lr.ph
  %22 = phi i8* [ %.pre, %.lr.ph ], [ %68, %.us-lcssa.us ]
  %length.02 = phi i32 [ %11, %.lr.ph ], [ %., %.us-lcssa.us ]
  %23 = getelementptr inbounds i8* %22, i32 1
  store i8* %23, i8** @ReadBuf, align 4, !tbaa !1
  %24 = load i8* %22, align 1, !tbaa !5
  %25 = zext i8 %24 to i32
  %26 = lshr i32 %25, 4
  %27 = and i32 %25, 15
  %28 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str21, i32 0, i32 0), i32 %26) #4
  %29 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str22, i32 0, i32 0), i32 %27) #4
  %30 = load i32* @i_get_dqt, align 4, !tbaa !6
  %31 = getelementptr inbounds [2 x i32]* @out_prec_get_dht, i32 0, i32 %30
  %32 = load i32* %31, align 4, !tbaa !6
  %33 = icmp eq i32 %26, %32
  br i1 %33, label %34, label %37

; <label>:34                                      ; preds = %21
  %35 = load i32* @main_result, align 4, !tbaa !6
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* @main_result, align 4, !tbaa !6
  br label %37

; <label>:37                                      ; preds = %34, %21
  %38 = getelementptr inbounds [2 x i32]* @out_num_get_dht, i32 0, i32 %30
  %39 = load i32* %38, align 4, !tbaa !6
  %40 = icmp eq i32 %27, %39
  br i1 %40, label %41, label %44

; <label>:41                                      ; preds = %37
  %42 = load i32* @main_result, align 4, !tbaa !6
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* @main_result, align 4, !tbaa !6
  br label %44

; <label>:44                                      ; preds = %41, %37
  %45 = add nsw i32 %30, 1
  store i32 %45, i32* @i_get_dqt, align 4, !tbaa !6
  %46 = icmp eq i32 %26, 0
  %.pre4 = load i8** @ReadBuf, align 4, !tbaa !1
  br i1 %46, label %.split.us.preheader, label %..split_crit_edge.preheader

..split_crit_edge.preheader:                      ; preds = %44
  br label %..split_crit_edge

.split.us.preheader:                              ; preds = %44
  br label %.split.us

.split.us:                                        ; preds = %.split.us, %.split.us.preheader
  %47 = phi i8* [ %48, %.split.us ], [ %.pre4, %.split.us.preheader ]
  %i.01.us = phi i32 [ %54, %.split.us ], [ 0, %.split.us.preheader ]
  %48 = getelementptr inbounds i8* %47, i32 1
  store i8* %48, i8** @ReadBuf, align 4, !tbaa !1
  %49 = load i8* %47, align 1, !tbaa !5
  %50 = zext i8 %49 to i32
  %51 = getelementptr inbounds [64 x i32]* @izigzag_index, i32 0, i32 %i.01.us
  %52 = load i32* %51, align 4, !tbaa !6
  %.sum.us = add i32 %52, 64
  %53 = getelementptr inbounds [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %27, i32 %.sum.us
  store i32 %50, i32* %53, align 4, !tbaa !6
  %54 = add nsw i32 %i.01.us, 1
  %exitcond3 = icmp eq i32 %54, 64
  br i1 %exitcond3, label %.us-lcssa.us.loopexit, label %.split.us

..split_crit_edge:                                ; preds = %..split_crit_edge, %..split_crit_edge.preheader
  %55 = phi i8* [ %60, %..split_crit_edge ], [ %.pre4, %..split_crit_edge.preheader ]
  %i.01 = phi i32 [ %67, %..split_crit_edge ], [ 0, %..split_crit_edge.preheader ]
  %56 = getelementptr inbounds i8* %55, i32 1
  store i8* %56, i8** @ReadBuf, align 4, !tbaa !1
  %57 = load i8* %55, align 1, !tbaa !5
  %58 = zext i8 %57 to i32
  %59 = shl nuw nsw i32 %58, 8
  %60 = getelementptr inbounds i8* %55, i32 2
  store i8* %60, i8** @ReadBuf, align 4, !tbaa !1
  %61 = load i8* %56, align 1, !tbaa !5
  %62 = zext i8 %61 to i32
  %63 = or i32 %62, %59
  %64 = getelementptr inbounds [64 x i32]* @izigzag_index, i32 0, i32 %i.01
  %65 = load i32* %64, align 4, !tbaa !6
  %.sum = add i32 %65, 64
  %66 = getelementptr inbounds [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %27, i32 %.sum
  store i32 %63, i32* %66, align 4, !tbaa !6
  %67 = add nsw i32 %i.01, 1
  %exitcond = icmp eq i32 %67, 64
  br i1 %exitcond, label %.us-lcssa.us.loopexit8, label %..split_crit_edge

.us-lcssa.us.loopexit:                            ; preds = %.split.us
  %.lcssa9 = phi i8* [ %48, %.split.us ]
  br label %.us-lcssa.us

.us-lcssa.us.loopexit8:                           ; preds = %..split_crit_edge
  %.lcssa = phi i8* [ %60, %..split_crit_edge ]
  br label %.us-lcssa.us

.us-lcssa.us:                                     ; preds = %.us-lcssa.us.loopexit8, %.us-lcssa.us.loopexit
  %68 = phi i8* [ %.lcssa9, %.us-lcssa.us.loopexit ], [ %.lcssa, %.us-lcssa.us.loopexit8 ]
  %..v = select i1 %46, i32 -65, i32 -129
  %. = add i32 %..v, %length.02
  %69 = icmp sgt i32 %., 0
  br i1 %69, label %21, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.us-lcssa.us
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  ret void
}

; Function Attrs: nounwind
define void @read_markers(i8* %buf) #0 {
.critedge:
  %0 = getelementptr inbounds i8* %buf, i32 1
  store i8* %0, i8** @ReadBuf, align 4, !tbaa !1
  %1 = load i8* %buf, align 1, !tbaa !5
  %2 = getelementptr inbounds i8* %buf, i32 2
  store i8* %2, i8** @ReadBuf, align 4, !tbaa !1
  %3 = load i8* %0, align 1, !tbaa !5
  %4 = icmp ne i8 %1, -1
  %5 = icmp ne i8 %3, -40
  %or.cond.i.us = or i1 %4, %5
  br i1 %or.cond.i.us, label %.us-lcssa.us, label %next_marker.exit.us

next_marker.exit.us:                              ; preds = %.critedge
  %6 = load i32* @main_result, align 4, !tbaa !6
  %7 = add nsw i32 %6, 1
  store i32 %7, i32* @main_result, align 4, !tbaa !6
  %8 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @.str23, i32 0, i32 0), i32 216) #4
  %9 = load i32* @i_marker, align 4, !tbaa !6
  %10 = add nsw i32 %9, 1
  store i32 %10, i32* @i_marker, align 4, !tbaa !6
  %11 = icmp eq i32 %9, 0
  br i1 %11, label %12, label %.loopexit.i.preheader.preheader

; <label>:12                                      ; preds = %next_marker.exit.us
  %13 = load i32* @main_result, align 4, !tbaa !6
  %14 = add nsw i32 %13, 1
  store i32 %14, i32* @main_result, align 4, !tbaa !6
  br label %.loopexit.i.preheader.preheader

.loopexit.i.preheader.preheader:                  ; preds = %12, %next_marker.exit.us
  br label %.loopexit.i.preheader

.loopexit.i.preheader:                            ; preds = %.loopexit.i.preheader.backedge, %.loopexit.i.preheader.preheader
  %15 = load i8** @ReadBuf, align 4, !tbaa !1
  br label %.loopexit.i

.us-lcssa.us:                                     ; preds = %.critedge
  %16 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @.str, i32 0, i32 0)) #4
  tail call void @exit(i32 0) #5
  unreachable

.loopexit.i.loopexit:                             ; preds = %.preheader.i
  %.lcssa9 = phi i8* [ %23, %.preheader.i ]
  br label %.loopexit.i

.loopexit.i:                                      ; preds = %.loopexit.i.loopexit, %.loopexit.i.preheader
  %17 = phi i8* [ %15, %.loopexit.i.preheader ], [ %.lcssa9, %.loopexit.i.loopexit ]
  %storemerge2.i = getelementptr inbounds i8* %17, i32 1
  store i8* %storemerge2.i, i8** @ReadBuf, align 4, !tbaa !1
  %.sink3.i = load i8* %17, align 1
  %18 = icmp eq i8 %.sink3.i, -1
  br i1 %18, label %.preheader.i.preheader, label %.lr.ph.i.preheader

.lr.ph.i.preheader:                               ; preds = %.loopexit.i
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.lr.ph.i, %.lr.ph.i.preheader
  %19 = phi i8* [ %20, %.lr.ph.i ], [ %17, %.lr.ph.i.preheader ]
  %20 = phi i8* [ %storemerge.i, %.lr.ph.i ], [ %storemerge2.i, %.lr.ph.i.preheader ]
  %storemerge.i = getelementptr inbounds i8* %19, i32 2
  store i8* %storemerge.i, i8** @ReadBuf, align 4, !tbaa !1
  %.sink.i = load i8* %20, align 1
  %21 = icmp eq i8 %.sink.i, -1
  br i1 %21, label %.preheader.i.preheader.loopexit, label %.lr.ph.i

.preheader.i.preheader.loopexit:                  ; preds = %.lr.ph.i
  %storemerge.i.lcssa = phi i8* [ %storemerge.i, %.lr.ph.i ]
  br label %.preheader.i.preheader

.preheader.i.preheader:                           ; preds = %.preheader.i.preheader.loopexit, %.loopexit.i
  %.ph = phi i8* [ %storemerge2.i, %.loopexit.i ], [ %storemerge.i.lcssa, %.preheader.i.preheader.loopexit ]
  br label %.preheader.i

.preheader.i:                                     ; preds = %.preheader.i, %.preheader.i.preheader
  %22 = phi i8* [ %23, %.preheader.i ], [ %.ph, %.preheader.i.preheader ]
  %23 = getelementptr inbounds i8* %22, i32 1
  store i8* %23, i8** @ReadBuf, align 4, !tbaa !1
  %24 = load i8* %22, align 1, !tbaa !5
  %25 = zext i8 %24 to i32
  switch i32 %25, label %next_marker.exit [
    i32 255, label %.preheader.i
    i32 0, label %.loopexit.i.loopexit
  ]

next_marker.exit:                                 ; preds = %.preheader.i
  %.lcssa = phi i32 [ %25, %.preheader.i ]
  %26 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @.str23, i32 0, i32 0), i32 %.lcssa) #4
  %27 = load i32* @i_marker, align 4, !tbaa !6
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* @i_marker, align 4, !tbaa !6
  %29 = getelementptr inbounds [10 x i32]* @out_unread_marker, i32 0, i32 %27
  %30 = load i32* %29, align 4, !tbaa !6
  %31 = icmp eq i32 %.lcssa, %30
  br i1 %31, label %32, label %35

; <label>:32                                      ; preds = %next_marker.exit
  %33 = load i32* @main_result, align 4, !tbaa !6
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* @main_result, align 4, !tbaa !6
  br label %35

; <label>:35                                      ; preds = %32, %next_marker.exit
  switch i32 %.lcssa, label %.loopexit.i.preheader.backedge [
    i32 217, label %.loopexit.loopexit
    i32 192, label %36
    i32 218, label %.us-lcssa4
    i32 196, label %37
    i32 219, label %38
  ]

.loopexit.i.preheader.backedge:                   ; preds = %38, %37, %36, %35
  br label %.loopexit.i.preheader

; <label>:36                                      ; preds = %35
  tail call void @get_sof() #6
  br label %.loopexit.i.preheader.backedge

.us-lcssa4:                                       ; preds = %35
  tail call void @get_sos() #6
  br label %.loopexit

; <label>:37                                      ; preds = %35
  tail call void @get_dht() #6
  br label %.loopexit.i.preheader.backedge

; <label>:38                                      ; preds = %35
  tail call void @get_dqt() #6
  br label %.loopexit.i.preheader.backedge

.loopexit.loopexit:                               ; preds = %35
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %.us-lcssa4
  ret void
}

; Function Attrs: nounwind
define void @ChenIDct(i32* nocapture readonly %x, i32* nocapture %y) #0 {
  br label %1

; <label>:1                                       ; preds = %1, %0
  %i.027 = phi i32 [ 0, %0 ], [ %80, %1 ]
  %2 = getelementptr inbounds i32* %x, i32 %i.027
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = shl i32 %3, 2
  %.sum9 = add i32 %i.027, 8
  %5 = getelementptr inbounds i32* %x, i32 %.sum9
  %6 = load i32* %5, align 4, !tbaa !6
  %.sum10 = add i32 %i.027, 16
  %7 = getelementptr inbounds i32* %x, i32 %.sum10
  %8 = load i32* %7, align 4, !tbaa !6
  %.sum11 = add i32 %i.027, 24
  %9 = getelementptr inbounds i32* %x, i32 %.sum11
  %10 = load i32* %9, align 4, !tbaa !6
  %.sum12 = add i32 %i.027, 32
  %11 = getelementptr inbounds i32* %x, i32 %.sum12
  %12 = load i32* %11, align 4, !tbaa !6
  %13 = shl i32 %12, 2
  %.sum13 = add i32 %i.027, 40
  %14 = getelementptr inbounds i32* %x, i32 %.sum13
  %15 = load i32* %14, align 4, !tbaa !6
  %.sum14 = add i32 %i.027, 48
  %16 = getelementptr inbounds i32* %x, i32 %.sum14
  %17 = load i32* %16, align 4, !tbaa !6
  %.sum15 = add i32 %i.027, 56
  %18 = getelementptr inbounds i32* %x, i32 %.sum15
  %19 = load i32* %18, align 4, !tbaa !6
  %20 = mul i32 %6, 400
  %21 = mul i32 %19, -2008
  %22 = add i32 %21, %20
  %23 = ashr i32 %22, 9
  %24 = mul i32 %15, 1704
  %25 = mul i32 %10, -1136
  %26 = add i32 %24, %25
  %27 = ashr i32 %26, 9
  %28 = mul i32 %10, 1704
  %29 = mul i32 %15, 1136
  %30 = add nsw i32 %29, %28
  %31 = ashr i32 %30, 9
  %32 = mul i32 %6, 2008
  %33 = mul i32 %19, 400
  %34 = add nsw i32 %33, %32
  %35 = ashr i32 %34, 9
  %36 = add nsw i32 %13, %4
  %37 = mul nsw i32 %36, 362
  %38 = ashr i32 %37, 9
  %39 = sub nsw i32 %4, %13
  %40 = mul nsw i32 %39, 362
  %41 = ashr i32 %40, 9
  %42 = mul i32 %8, 784
  %43 = mul i32 %17, -1892
  %44 = add i32 %43, %42
  %45 = ashr i32 %44, 9
  %46 = mul i32 %8, 1892
  %47 = mul i32 %17, 784
  %48 = add nsw i32 %47, %46
  %49 = ashr i32 %48, 9
  %50 = add nsw i32 %49, %38
  %51 = add nsw i32 %45, %41
  %52 = sub nsw i32 %41, %45
  %53 = sub nsw i32 %38, %49
  %54 = add nsw i32 %23, %27
  %55 = sub nsw i32 %23, %27
  %56 = sub nsw i32 %35, %31
  %57 = add nsw i32 %35, %31
  %58 = sub nsw i32 %56, %55
  %59 = mul nsw i32 %58, 362
  %60 = ashr i32 %59, 9
  %61 = add nsw i32 %56, %55
  %62 = mul nsw i32 %61, 362
  %63 = ashr i32 %62, 9
  %64 = getelementptr inbounds i32* %y, i32 %i.027
  %65 = add nsw i32 %57, %50
  store i32 %65, i32* %64, align 4, !tbaa !6
  %66 = getelementptr inbounds i32* %y, i32 %.sum9
  %67 = add nsw i32 %63, %51
  store i32 %67, i32* %66, align 4, !tbaa !6
  %68 = getelementptr inbounds i32* %y, i32 %.sum10
  %69 = add nsw i32 %60, %52
  store i32 %69, i32* %68, align 4, !tbaa !6
  %70 = getelementptr inbounds i32* %y, i32 %.sum11
  %71 = add nsw i32 %54, %53
  store i32 %71, i32* %70, align 4, !tbaa !6
  %72 = getelementptr inbounds i32* %y, i32 %.sum12
  %73 = sub nsw i32 %53, %54
  store i32 %73, i32* %72, align 4, !tbaa !6
  %74 = getelementptr inbounds i32* %y, i32 %.sum13
  %75 = sub nsw i32 %52, %60
  store i32 %75, i32* %74, align 4, !tbaa !6
  %76 = getelementptr inbounds i32* %y, i32 %.sum14
  %77 = sub nsw i32 %51, %63
  store i32 %77, i32* %76, align 4, !tbaa !6
  %78 = getelementptr inbounds i32* %y, i32 %.sum15
  %79 = sub nsw i32 %50, %57
  store i32 %79, i32* %78, align 4, !tbaa !6
  %80 = add nsw i32 %i.027, 1
  %exitcond29 = icmp eq i32 %80, 8
  br i1 %exitcond29, label %.preheader23.preheader, label %1

.preheader23.preheader:                           ; preds = %1
  br label %.preheader23

.preheader23:                                     ; preds = %.preheader23, %.preheader23.preheader
  %i.126 = phi i32 [ %150, %.preheader23 ], [ 0, %.preheader23.preheader ]
  %81 = shl i32 %i.126, 3
  %82 = getelementptr inbounds i32* %y, i32 %81
  %.sum1 = or i32 %81, 1
  %83 = getelementptr inbounds i32* %y, i32 %.sum1
  %84 = load i32* %82, align 4, !tbaa !6
  %.sum = add nsw i32 %.sum1, 1
  %85 = getelementptr inbounds i32* %y, i32 %.sum
  %86 = load i32* %83, align 4, !tbaa !6
  %.sum23 = or i32 %81, 3
  %87 = getelementptr inbounds i32* %y, i32 %.sum23
  %88 = load i32* %85, align 4, !tbaa !6
  %.sum4 = add nsw i32 %.sum23, 1
  %89 = getelementptr inbounds i32* %y, i32 %.sum4
  %90 = load i32* %87, align 4, !tbaa !6
  %.sum5 = add nsw i32 %.sum23, 2
  %91 = getelementptr inbounds i32* %y, i32 %.sum5
  %92 = load i32* %89, align 4, !tbaa !6
  %.sum6 = add i32 %.sum23, 3
  %93 = getelementptr inbounds i32* %y, i32 %.sum6
  %94 = load i32* %91, align 4, !tbaa !6
  %.sum78 = or i32 %81, 7
  %95 = getelementptr inbounds i32* %y, i32 %.sum78
  %96 = load i32* %93, align 4, !tbaa !6
  %97 = load i32* %95, align 4, !tbaa !6
  %98 = mul nsw i32 %86, 100
  %99 = mul i32 %97, -502
  %100 = add i32 %99, %98
  %101 = ashr i32 %100, 9
  %102 = mul nsw i32 %94, 426
  %103 = mul i32 %90, -284
  %104 = add i32 %102, %103
  %105 = ashr i32 %104, 9
  %106 = mul nsw i32 %90, 426
  %107 = mul nsw i32 %94, 284
  %108 = add nsw i32 %107, %106
  %109 = ashr i32 %108, 9
  %110 = mul nsw i32 %86, 502
  %111 = mul nsw i32 %97, 100
  %112 = add nsw i32 %111, %110
  %113 = ashr i32 %112, 9
  %114 = add nsw i32 %92, %84
  %115 = mul nsw i32 %114, 362
  %116 = ashr i32 %115, 9
  %117 = sub nsw i32 %84, %92
  %118 = mul nsw i32 %117, 362
  %119 = ashr i32 %118, 9
  %120 = mul nsw i32 %88, 196
  %121 = mul i32 %96, -473
  %122 = add i32 %121, %120
  %123 = ashr i32 %122, 9
  %124 = mul nsw i32 %88, 473
  %125 = mul nsw i32 %96, 196
  %126 = add nsw i32 %125, %124
  %127 = ashr i32 %126, 9
  %128 = add nsw i32 %127, %116
  %129 = add nsw i32 %123, %119
  %130 = sub nsw i32 %119, %123
  %131 = sub nsw i32 %116, %127
  %132 = add nsw i32 %101, %105
  %133 = sub nsw i32 %101, %105
  %134 = sub nsw i32 %113, %109
  %135 = add nsw i32 %113, %109
  %136 = sub nsw i32 %134, %133
  %137 = mul nsw i32 %136, 362
  %138 = ashr i32 %137, 9
  %139 = add nsw i32 %134, %133
  %140 = mul nsw i32 %139, 362
  %141 = ashr i32 %140, 9
  %142 = add nsw i32 %135, %128
  store i32 %142, i32* %82, align 4, !tbaa !6
  %143 = add nsw i32 %141, %129
  store i32 %143, i32* %83, align 4, !tbaa !6
  %144 = add nsw i32 %138, %130
  store i32 %144, i32* %85, align 4, !tbaa !6
  %145 = add nsw i32 %132, %131
  store i32 %145, i32* %87, align 4, !tbaa !6
  %146 = sub nsw i32 %131, %132
  store i32 %146, i32* %89, align 4, !tbaa !6
  %147 = sub nsw i32 %130, %138
  store i32 %147, i32* %91, align 4, !tbaa !6
  %148 = sub nsw i32 %129, %141
  store i32 %148, i32* %93, align 4, !tbaa !6
  %149 = sub nsw i32 %128, %135
  store i32 %149, i32* %95, align 4, !tbaa !6
  %150 = add nsw i32 %i.126, 1
  %exitcond28 = icmp eq i32 %150, 8
  br i1 %exitcond28, label %.preheader.preheader, label %.preheader23

.preheader.preheader:                             ; preds = %.preheader23
  br label %.preheader

.preheader:                                       ; preds = %.preheader, %.preheader.preheader
  %aptr.025 = phi i32* [ %158, %.preheader ], [ %y, %.preheader.preheader ]
  %i.224 = phi i32 [ %157, %.preheader ], [ 0, %.preheader.preheader ]
  %151 = load i32* %aptr.025, align 4, !tbaa !6
  %152 = ashr i32 %151, 31
  %153 = and i32 %152, -16
  %154 = or i32 %153, 8
  %155 = add i32 %154, %151
  %156 = sdiv i32 %155, 16
  store i32 %156, i32* %aptr.025, align 4, !tbaa !6
  %157 = add nsw i32 %i.224, 1
  %158 = getelementptr inbounds i32* %aptr.025, i32 1
  %exitcond = icmp eq i32 %157, 64
  br i1 %exitcond, label %159, label %.preheader

; <label>:159                                     ; preds = %.preheader
  ret void
}

; Function Attrs: nounwind
define void @IZigzagMatrix(i32* nocapture readonly %imatrix, i32* nocapture %omatrix) #0 {
  br label %1

; <label>:1                                       ; preds = %1, %0
  %i.02 = phi i32 [ 0, %0 ], [ %7, %1 ]
  %.01 = phi i32* [ %omatrix, %0 ], [ %6, %1 ]
  %2 = getelementptr inbounds [64 x i32]* @zigzag_index, i32 0, i32 %i.02
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = getelementptr inbounds i32* %imatrix, i32 %3
  %5 = load i32* %4, align 4, !tbaa !6
  %6 = getelementptr inbounds i32* %.01, i32 1
  store i32 %5, i32* %.01, align 4, !tbaa !6
  %7 = add nsw i32 %i.02, 1
  %exitcond = icmp eq i32 %7, 64
  br i1 %exitcond, label %8, label %1

; <label>:8                                       ; preds = %1
  ret void
}

; Function Attrs: nounwind
define void @IQuantize(i32* %matrix, i32* nocapture readonly %qmatrix) #0 {
.lr.ph:
  %0 = getelementptr inbounds i32* %matrix, i32 64
  br label %1

; <label>:1                                       ; preds = %1, %.lr.ph
  %mptr.02 = phi i32* [ %matrix, %.lr.ph ], [ %6, %1 ]
  %.01 = phi i32* [ %qmatrix, %.lr.ph ], [ %5, %1 ]
  %2 = load i32* %mptr.02, align 4, !tbaa !6
  %3 = load i32* %.01, align 4, !tbaa !6
  %4 = mul nsw i32 %3, %2
  store i32 %4, i32* %mptr.02, align 4, !tbaa !6
  %5 = getelementptr inbounds i32* %.01, i32 1
  %6 = getelementptr inbounds i32* %mptr.02, i32 1
  %7 = icmp ult i32* %6, %0
  br i1 %7, label %1, label %._crit_edge

._crit_edge:                                      ; preds = %1
  ret void
}

; Function Attrs: nounwind
define void @PostshiftIDctMatrix(i32* %matrix, i32 %shift) #0 {
.lr.ph:
  %0 = getelementptr inbounds i32* %matrix, i32 64
  br label %1

; <label>:1                                       ; preds = %1, %.lr.ph
  %mptr.01 = phi i32* [ %matrix, %.lr.ph ], [ %4, %1 ]
  %2 = load i32* %mptr.01, align 4, !tbaa !6
  %3 = add nsw i32 %2, %shift
  store i32 %3, i32* %mptr.01, align 4, !tbaa !6
  %4 = getelementptr inbounds i32* %mptr.01, i32 1
  %5 = icmp ult i32* %4, %0
  br i1 %5, label %1, label %._crit_edge

._crit_edge:                                      ; preds = %1
  ret void
}

; Function Attrs: nounwind
define void @BoundIDctMatrix(i32* %matrix, i32 %Bound) #0 {
.lr.ph:
  %0 = getelementptr inbounds i32* %matrix, i32 64
  br label %1

; <label>:1                                       ; preds = %8, %.lr.ph
  %mptr.01 = phi i32* [ %matrix, %.lr.ph ], [ %9, %8 ]
  %2 = load i32* %mptr.01, align 4, !tbaa !6
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %1
  store i32 0, i32* %mptr.01, align 4, !tbaa !6
  br label %8

; <label>:5                                       ; preds = %1
  %6 = icmp sgt i32 %2, %Bound
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %5
  store i32 %Bound, i32* %mptr.01, align 4, !tbaa !6
  br label %8

; <label>:8                                       ; preds = %7, %5, %4
  %9 = getelementptr inbounds i32* %mptr.01, i32 1
  %10 = icmp ult i32* %9, %0
  br i1 %10, label %1, label %._crit_edge

._crit_edge:                                      ; preds = %8
  ret void
}

; Function Attrs: nounwind
define void @WriteOneBlock(i32* nocapture readonly %store, i8* nocapture %out_buf, i32 %width, i32 %height, i32 %voffs, i32 %hoffs) #0 {
  %1 = icmp slt i32 %voffs, %height
  br i1 %1, label %.lr.ph8, label %._crit_edge9

.lr.ph8:                                          ; preds = %0
  %2 = icmp slt i32 %hoffs, %width
  br i1 %2, label %.lr.ph8.split.us, label %.lr.ph8..lr.ph8.split_crit_edge

.lr.ph8..lr.ph8.split_crit_edge:                  ; preds = %.lr.ph8
  %3 = sub i32 %voffs, %height
  %4 = add i32 %voffs, 8
  %5 = add i32 %voffs, 1
  %6 = icmp sgt i32 %4, %5
  %smax = select i1 %6, i32 %4, i32 %5
  %7 = sub i32 %voffs, %smax
  %8 = icmp ugt i32 %3, %7
  %umax = select i1 %8, i32 %3, i32 %7
  %9 = sub i32 %voffs, %umax
  br label %35

.lr.ph8.split.us:                                 ; preds = %.lr.ph8
  %10 = add i32 %hoffs, -1
  %11 = add i32 %hoffs, 7
  %12 = icmp slt i32 %11, %hoffs
  %smax10 = select i1 %12, i32 %hoffs, i32 %11
  %13 = sub i32 %10, %smax10
  %14 = sub i32 %hoffs, %width
  %15 = icmp ugt i32 %13, %14
  %umax11 = select i1 %15, i32 %13, i32 %14
  %16 = sub i32 0, %umax11
  %17 = sub i32 %hoffs, %umax11
  %18 = sub i32 %voffs, %height
  %19 = add i32 %voffs, 8
  %20 = add i32 %voffs, 1
  %21 = icmp sgt i32 %19, %20
  %smax13 = select i1 %21, i32 %19, i32 %20
  %22 = sub i32 %voffs, %smax13
  %23 = icmp ugt i32 %18, %22
  %umax14 = select i1 %23, i32 %18, i32 %22
  %24 = sub i32 %voffs, %umax14
  br label %.lr.ph.us

; <label>:25                                      ; preds = %27
  %scevgep = getelementptr i32* %.06.us, i32 %16
  %26 = add nsw i32 %i.05.us, 1
  %exitcond15 = icmp eq i32 %26, %24
  br i1 %exitcond15, label %._crit_edge9.loopexit, label %.lr.ph.us

; <label>:27                                      ; preds = %.lr.ph.us, %27
  %.14.us = phi i32* [ %.06.us, %.lr.ph.us ], [ %28, %27 ]
  %e.03.us = phi i32 [ %hoffs, %.lr.ph.us ], [ %33, %27 ]
  %28 = getelementptr inbounds i32* %.14.us, i32 1
  %29 = load i32* %.14.us, align 4, !tbaa !6
  %30 = trunc i32 %29 to i8
  %31 = add nsw i32 %e.03.us, %34
  %32 = getelementptr inbounds i8* %out_buf, i32 %31
  store i8 %30, i8* %32, align 1, !tbaa !5
  %33 = add nsw i32 %e.03.us, 1
  %exitcond12 = icmp eq i32 %33, %17
  br i1 %exitcond12, label %25, label %27

.lr.ph.us:                                        ; preds = %25, %.lr.ph8.split.us
  %.06.us = phi i32* [ %store, %.lr.ph8.split.us ], [ %scevgep, %25 ]
  %i.05.us = phi i32 [ %voffs, %.lr.ph8.split.us ], [ %26, %25 ]
  %34 = mul nsw i32 %i.05.us, %width
  br label %27

; <label>:35                                      ; preds = %35, %.lr.ph8..lr.ph8.split_crit_edge
  %i.05 = phi i32 [ %voffs, %.lr.ph8..lr.ph8.split_crit_edge ], [ %36, %35 ]
  %36 = add nsw i32 %i.05, 1
  %exitcond = icmp eq i32 %36, %9
  br i1 %exitcond, label %._crit_edge9.loopexit18, label %35

._crit_edge9.loopexit:                            ; preds = %25
  br label %._crit_edge9

._crit_edge9.loopexit18:                          ; preds = %35
  br label %._crit_edge9

._crit_edge9:                                     ; preds = %._crit_edge9.loopexit18, %._crit_edge9.loopexit, %0
  ret void
}

; Function Attrs: nounwind
define void @WriteBlock(i32* nocapture readonly %store, i32* nocapture readonly %p_out_vpos, i32* nocapture %p_out_hpos, i8* nocapture %p_out_buf) #0 {
  %1 = load i32* %p_out_vpos, align 4, !tbaa !6
  %2 = shl nsw i32 %1, 3
  %3 = load i32* %p_out_hpos, align 4, !tbaa !6
  %4 = shl nsw i32 %3, 3
  %5 = load i16* @p_jinfo_image_width, align 2, !tbaa !8
  %6 = sext i16 %5 to i32
  %7 = load i16* @p_jinfo_image_height, align 2, !tbaa !8
  %8 = sext i16 %7 to i32
  %9 = icmp slt i32 %2, %8
  %10 = icmp slt i32 %4, %6
  %or.cond = and i1 %9, %10
  br i1 %or.cond, label %.lr.ph8.split.us.i, label %WriteOneBlock.exit

.lr.ph8.split.us.i:                               ; preds = %0
  %11 = add i32 %4, -1
  %12 = or i32 %4, 7
  %13 = icmp slt i32 %12, %4
  %smax10.i = select i1 %13, i32 %4, i32 %12
  %14 = sub i32 %11, %smax10.i
  %15 = sub i32 %4, %6
  %16 = icmp ugt i32 %14, %15
  %umax11.i = select i1 %16, i32 %14, i32 %15
  %17 = sub i32 0, %umax11.i
  %18 = sub i32 %4, %umax11.i
  %19 = sub i32 %2, %8
  %20 = add i32 %2, 8
  %21 = or i32 %2, 1
  %22 = icmp sgt i32 %20, %21
  %smax13.i = select i1 %22, i32 %20, i32 %21
  %23 = sub i32 %2, %smax13.i
  %24 = icmp ugt i32 %19, %23
  %umax14.i = select i1 %24, i32 %19, i32 %23
  %25 = sub i32 %2, %umax14.i
  br label %.lr.ph.us.i

; <label>:26                                      ; preds = %28
  %scevgep.i = getelementptr i32* %.06.us.i, i32 %17
  %27 = add nsw i32 %i.05.us.i, 1
  %exitcond15.i = icmp eq i32 %27, %25
  br i1 %exitcond15.i, label %WriteOneBlock.exit.loopexit, label %.lr.ph.us.i

; <label>:28                                      ; preds = %.lr.ph.us.i, %28
  %.14.us.i = phi i32* [ %.06.us.i, %.lr.ph.us.i ], [ %29, %28 ]
  %e.03.us.i = phi i32 [ %4, %.lr.ph.us.i ], [ %34, %28 ]
  %29 = getelementptr inbounds i32* %.14.us.i, i32 1
  %30 = load i32* %.14.us.i, align 4, !tbaa !6
  %31 = trunc i32 %30 to i8
  %32 = add nsw i32 %e.03.us.i, %35
  %33 = getelementptr inbounds i8* %p_out_buf, i32 %32
  store i8 %31, i8* %33, align 1, !tbaa !5
  %34 = add nsw i32 %e.03.us.i, 1
  %exitcond12.i = icmp eq i32 %34, %18
  br i1 %exitcond12.i, label %26, label %28

.lr.ph.us.i:                                      ; preds = %26, %.lr.ph8.split.us.i
  %.06.us.i = phi i32* [ %store, %.lr.ph8.split.us.i ], [ %scevgep.i, %26 ]
  %i.05.us.i = phi i32 [ %2, %.lr.ph8.split.us.i ], [ %27, %26 ]
  %35 = mul nsw i32 %i.05.us.i, %6
  br label %28

WriteOneBlock.exit.loopexit:                      ; preds = %26
  br label %WriteOneBlock.exit

WriteOneBlock.exit:                               ; preds = %WriteOneBlock.exit.loopexit, %0
  %36 = getelementptr inbounds i32* %p_out_hpos, i32 1
  %37 = load i32* %36, align 4, !tbaa !6
  %38 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !6
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %41, label %40

; <label>:40                                      ; preds = %WriteOneBlock.exit
  store i32 0, i32* %36, align 4, !tbaa !6
  br label %41

; <label>:41                                      ; preds = %40, %WriteOneBlock.exit
  ret void
}

; Function Attrs: nounwind
define void @Write4Blocks(i32* nocapture readonly %store1, i32* nocapture readonly %store2, i32* nocapture readonly %store3, i32* nocapture readonly %store4, i32* nocapture %p_out_vpos, i32* nocapture %p_out_hpos, i8* nocapture %p_out_buf) #0 {
  %1 = load i32* %p_out_vpos, align 4, !tbaa !6
  %2 = shl nsw i32 %1, 3
  %3 = load i32* %p_out_hpos, align 4, !tbaa !6
  %4 = shl nsw i32 %3, 3
  %5 = load i16* @p_jinfo_image_width, align 2, !tbaa !8
  %6 = sext i16 %5 to i32
  %7 = load i16* @p_jinfo_image_height, align 2, !tbaa !8
  %8 = sext i16 %7 to i32
  %9 = icmp slt i32 %2, %8
  %10 = icmp slt i32 %4, %6
  %or.cond = and i1 %9, %10
  br i1 %or.cond, label %.lr.ph8.split.us.i, label %WriteOneBlock.exit

.lr.ph8.split.us.i:                               ; preds = %0
  %11 = add i32 %4, -1
  %12 = or i32 %4, 7
  %13 = icmp slt i32 %12, %4
  %smax10.i = select i1 %13, i32 %4, i32 %12
  %14 = sub i32 %11, %smax10.i
  %15 = sub i32 %4, %6
  %16 = icmp ugt i32 %14, %15
  %umax11.i = select i1 %16, i32 %14, i32 %15
  %17 = sub i32 0, %umax11.i
  %18 = sub i32 %4, %umax11.i
  %19 = sub i32 %2, %8
  %20 = add i32 %2, 8
  %21 = or i32 %2, 1
  %22 = icmp sgt i32 %20, %21
  %smax13.i = select i1 %22, i32 %20, i32 %21
  %23 = sub i32 %2, %smax13.i
  %24 = icmp ugt i32 %19, %23
  %umax14.i = select i1 %24, i32 %19, i32 %23
  %25 = sub i32 %2, %umax14.i
  br label %.lr.ph.us.i

; <label>:26                                      ; preds = %28
  %scevgep.i = getelementptr i32* %.06.us.i, i32 %17
  %27 = add nsw i32 %i.05.us.i, 1
  %exitcond15.i = icmp eq i32 %27, %25
  br i1 %exitcond15.i, label %WriteOneBlock.exit.loopexit, label %.lr.ph.us.i

; <label>:28                                      ; preds = %.lr.ph.us.i, %28
  %.14.us.i = phi i32* [ %.06.us.i, %.lr.ph.us.i ], [ %29, %28 ]
  %e.03.us.i = phi i32 [ %4, %.lr.ph.us.i ], [ %34, %28 ]
  %29 = getelementptr inbounds i32* %.14.us.i, i32 1
  %30 = load i32* %.14.us.i, align 4, !tbaa !6
  %31 = trunc i32 %30 to i8
  %32 = add nsw i32 %e.03.us.i, %35
  %33 = getelementptr inbounds i8* %p_out_buf, i32 %32
  store i8 %31, i8* %33, align 1, !tbaa !5
  %34 = add nsw i32 %e.03.us.i, 1
  %exitcond12.i = icmp eq i32 %34, %18
  br i1 %exitcond12.i, label %26, label %28

.lr.ph.us.i:                                      ; preds = %26, %.lr.ph8.split.us.i
  %.06.us.i = phi i32* [ %store1, %.lr.ph8.split.us.i ], [ %scevgep.i, %26 ]
  %i.05.us.i = phi i32 [ %2, %.lr.ph8.split.us.i ], [ %27, %26 ]
  %35 = mul nsw i32 %i.05.us.i, %6
  br label %28

WriteOneBlock.exit.loopexit:                      ; preds = %26
  %.pre = load i16* @p_jinfo_image_width, align 2, !tbaa !8
  %.pre65 = load i16* @p_jinfo_image_height, align 2, !tbaa !8
  br label %WriteOneBlock.exit

WriteOneBlock.exit:                               ; preds = %WriteOneBlock.exit.loopexit, %0
  %36 = phi i16 [ %.pre65, %WriteOneBlock.exit.loopexit ], [ %7, %0 ]
  %37 = phi i16 [ %.pre, %WriteOneBlock.exit.loopexit ], [ %5, %0 ]
  %38 = add nsw i32 %4, 8
  %39 = sext i16 %37 to i32
  %40 = sext i16 %36 to i32
  %41 = icmp slt i32 %2, %40
  br i1 %41, label %.lr.ph8.i41, label %WriteOneBlock.exit.WriteOneBlock.exit60_crit_edge

WriteOneBlock.exit.WriteOneBlock.exit60_crit_edge: ; preds = %WriteOneBlock.exit
  %.pre70 = add nsw i32 %2, 8
  br label %WriteOneBlock.exit60

.lr.ph8.i41:                                      ; preds = %WriteOneBlock.exit
  %42 = icmp slt i32 %38, %39
  br i1 %42, label %.lr.ph8.split.us.i49, label %.lr.ph8..lr.ph8.split_crit_edge.i44

.lr.ph8..lr.ph8.split_crit_edge.i44:              ; preds = %.lr.ph8.i41
  %43 = add i32 %2, 8
  br label %WriteOneBlock.exit60

.lr.ph8.split.us.i49:                             ; preds = %.lr.ph8.i41
  %44 = or i32 %4, 7
  %45 = add i32 %4, 15
  %46 = icmp slt i32 %45, %38
  %smax10.i45 = select i1 %46, i32 %38, i32 %45
  %47 = sub i32 %44, %smax10.i45
  %48 = sub i32 %38, %39
  %49 = icmp ugt i32 %47, %48
  %umax11.i46 = select i1 %49, i32 %47, i32 %48
  %50 = sub i32 0, %umax11.i46
  %51 = sub i32 %38, %umax11.i46
  %52 = sub i32 %2, %40
  %53 = add i32 %2, 8
  %54 = or i32 %2, 1
  %55 = icmp sgt i32 %53, %54
  %smax13.i47 = select i1 %55, i32 %53, i32 %54
  %56 = sub i32 %2, %smax13.i47
  %57 = icmp ugt i32 %52, %56
  %umax14.i48 = select i1 %57, i32 %52, i32 %56
  %58 = sub i32 %2, %umax14.i48
  br label %.lr.ph.us.i57

; <label>:59                                      ; preds = %61
  %scevgep.i50 = getelementptr i32* %.06.us.i55, i32 %50
  %60 = add nsw i32 %i.05.us.i56, 1
  %exitcond15.i51 = icmp eq i32 %60, %58
  br i1 %exitcond15.i51, label %WriteOneBlock.exit60.loopexit, label %.lr.ph.us.i57

; <label>:61                                      ; preds = %.lr.ph.us.i57, %61
  %.14.us.i52 = phi i32* [ %.06.us.i55, %.lr.ph.us.i57 ], [ %62, %61 ]
  %e.03.us.i53 = phi i32 [ %38, %.lr.ph.us.i57 ], [ %67, %61 ]
  %62 = getelementptr inbounds i32* %.14.us.i52, i32 1
  %63 = load i32* %.14.us.i52, align 4, !tbaa !6
  %64 = trunc i32 %63 to i8
  %65 = add nsw i32 %e.03.us.i53, %68
  %66 = getelementptr inbounds i8* %p_out_buf, i32 %65
  store i8 %64, i8* %66, align 1, !tbaa !5
  %67 = add nsw i32 %e.03.us.i53, 1
  %exitcond12.i54 = icmp eq i32 %67, %51
  br i1 %exitcond12.i54, label %59, label %61

.lr.ph.us.i57:                                    ; preds = %59, %.lr.ph8.split.us.i49
  %.06.us.i55 = phi i32* [ %store2, %.lr.ph8.split.us.i49 ], [ %scevgep.i50, %59 ]
  %i.05.us.i56 = phi i32 [ %2, %.lr.ph8.split.us.i49 ], [ %60, %59 ]
  %68 = mul nsw i32 %i.05.us.i56, %39
  br label %61

WriteOneBlock.exit60.loopexit:                    ; preds = %59
  %.pre66 = load i16* @p_jinfo_image_width, align 2, !tbaa !8
  %.pre67 = load i16* @p_jinfo_image_height, align 2, !tbaa !8
  br label %WriteOneBlock.exit60

WriteOneBlock.exit60:                             ; preds = %WriteOneBlock.exit60.loopexit, %.lr.ph8..lr.ph8.split_crit_edge.i44, %WriteOneBlock.exit.WriteOneBlock.exit60_crit_edge
  %.pre-phi = phi i32 [ %.pre70, %WriteOneBlock.exit.WriteOneBlock.exit60_crit_edge ], [ %43, %.lr.ph8..lr.ph8.split_crit_edge.i44 ], [ %53, %WriteOneBlock.exit60.loopexit ]
  %69 = phi i16 [ %36, %WriteOneBlock.exit.WriteOneBlock.exit60_crit_edge ], [ %36, %.lr.ph8..lr.ph8.split_crit_edge.i44 ], [ %.pre67, %WriteOneBlock.exit60.loopexit ]
  %70 = phi i16 [ %37, %WriteOneBlock.exit.WriteOneBlock.exit60_crit_edge ], [ %37, %.lr.ph8..lr.ph8.split_crit_edge.i44 ], [ %.pre66, %WriteOneBlock.exit60.loopexit ]
  %71 = sext i16 %70 to i32
  %72 = sext i16 %69 to i32
  %73 = icmp slt i32 %.pre-phi, %72
  %74 = icmp slt i32 %4, %71
  %or.cond71 = and i1 %73, %74
  br i1 %or.cond71, label %.lr.ph8.split.us.i29, label %WriteOneBlock.exit40

.lr.ph8.split.us.i29:                             ; preds = %WriteOneBlock.exit60
  %75 = add i32 %4, -1
  %76 = or i32 %4, 7
  %77 = icmp slt i32 %76, %4
  %smax10.i25 = select i1 %77, i32 %4, i32 %76
  %78 = sub i32 %75, %smax10.i25
  %79 = sub i32 %4, %71
  %80 = icmp ugt i32 %78, %79
  %umax11.i26 = select i1 %80, i32 %78, i32 %79
  %81 = sub i32 0, %umax11.i26
  %82 = sub i32 %4, %umax11.i26
  %83 = sub i32 %.pre-phi, %72
  %84 = add i32 %2, 16
  %85 = add i32 %2, 9
  %86 = icmp sgt i32 %84, %85
  %smax13.i27 = select i1 %86, i32 %84, i32 %85
  %87 = sub i32 %.pre-phi, %smax13.i27
  %88 = icmp ugt i32 %83, %87
  %umax14.i28 = select i1 %88, i32 %83, i32 %87
  %89 = sub i32 %.pre-phi, %umax14.i28
  br label %.lr.ph.us.i37

; <label>:90                                      ; preds = %92
  %scevgep.i30 = getelementptr i32* %.06.us.i35, i32 %81
  %91 = add nsw i32 %i.05.us.i36, 1
  %exitcond15.i31 = icmp eq i32 %91, %89
  br i1 %exitcond15.i31, label %WriteOneBlock.exit40.loopexit, label %.lr.ph.us.i37

; <label>:92                                      ; preds = %.lr.ph.us.i37, %92
  %.14.us.i32 = phi i32* [ %.06.us.i35, %.lr.ph.us.i37 ], [ %93, %92 ]
  %e.03.us.i33 = phi i32 [ %4, %.lr.ph.us.i37 ], [ %98, %92 ]
  %93 = getelementptr inbounds i32* %.14.us.i32, i32 1
  %94 = load i32* %.14.us.i32, align 4, !tbaa !6
  %95 = trunc i32 %94 to i8
  %96 = add nsw i32 %e.03.us.i33, %99
  %97 = getelementptr inbounds i8* %p_out_buf, i32 %96
  store i8 %95, i8* %97, align 1, !tbaa !5
  %98 = add nsw i32 %e.03.us.i33, 1
  %exitcond12.i34 = icmp eq i32 %98, %82
  br i1 %exitcond12.i34, label %90, label %92

.lr.ph.us.i37:                                    ; preds = %90, %.lr.ph8.split.us.i29
  %.06.us.i35 = phi i32* [ %store3, %.lr.ph8.split.us.i29 ], [ %scevgep.i30, %90 ]
  %i.05.us.i36 = phi i32 [ %.pre-phi, %.lr.ph8.split.us.i29 ], [ %91, %90 ]
  %99 = mul nsw i32 %i.05.us.i36, %71
  br label %92

WriteOneBlock.exit40.loopexit:                    ; preds = %90
  %.pre68 = load i16* @p_jinfo_image_width, align 2, !tbaa !8
  %.pre69 = load i16* @p_jinfo_image_height, align 2, !tbaa !8
  br label %WriteOneBlock.exit40

WriteOneBlock.exit40:                             ; preds = %WriteOneBlock.exit40.loopexit, %WriteOneBlock.exit60
  %100 = phi i16 [ %.pre69, %WriteOneBlock.exit40.loopexit ], [ %69, %WriteOneBlock.exit60 ]
  %101 = phi i16 [ %.pre68, %WriteOneBlock.exit40.loopexit ], [ %70, %WriteOneBlock.exit60 ]
  %102 = sext i16 %101 to i32
  %103 = sext i16 %100 to i32
  %104 = icmp slt i32 %.pre-phi, %103
  %105 = icmp slt i32 %38, %102
  %or.cond72 = and i1 %104, %105
  br i1 %or.cond72, label %.lr.ph8.split.us.i9, label %WriteOneBlock.exit20

.lr.ph8.split.us.i9:                              ; preds = %WriteOneBlock.exit40
  %106 = or i32 %4, 7
  %107 = add i32 %4, 15
  %108 = icmp slt i32 %107, %38
  %smax10.i5 = select i1 %108, i32 %38, i32 %107
  %109 = sub i32 %106, %smax10.i5
  %110 = sub i32 %38, %102
  %111 = icmp ugt i32 %109, %110
  %umax11.i6 = select i1 %111, i32 %109, i32 %110
  %112 = sub i32 0, %umax11.i6
  %113 = sub i32 %38, %umax11.i6
  %114 = sub i32 %.pre-phi, %103
  %115 = add i32 %2, 16
  %116 = add i32 %2, 9
  %117 = icmp sgt i32 %115, %116
  %smax13.i7 = select i1 %117, i32 %115, i32 %116
  %118 = sub i32 %.pre-phi, %smax13.i7
  %119 = icmp ugt i32 %114, %118
  %umax14.i8 = select i1 %119, i32 %114, i32 %118
  %120 = sub i32 %.pre-phi, %umax14.i8
  br label %.lr.ph.us.i17

; <label>:121                                     ; preds = %123
  %scevgep.i10 = getelementptr i32* %.06.us.i15, i32 %112
  %122 = add nsw i32 %i.05.us.i16, 1
  %exitcond15.i11 = icmp eq i32 %122, %120
  br i1 %exitcond15.i11, label %WriteOneBlock.exit20.loopexit, label %.lr.ph.us.i17

; <label>:123                                     ; preds = %.lr.ph.us.i17, %123
  %.14.us.i12 = phi i32* [ %.06.us.i15, %.lr.ph.us.i17 ], [ %124, %123 ]
  %e.03.us.i13 = phi i32 [ %38, %.lr.ph.us.i17 ], [ %129, %123 ]
  %124 = getelementptr inbounds i32* %.14.us.i12, i32 1
  %125 = load i32* %.14.us.i12, align 4, !tbaa !6
  %126 = trunc i32 %125 to i8
  %127 = add nsw i32 %e.03.us.i13, %130
  %128 = getelementptr inbounds i8* %p_out_buf, i32 %127
  store i8 %126, i8* %128, align 1, !tbaa !5
  %129 = add nsw i32 %e.03.us.i13, 1
  %exitcond12.i14 = icmp eq i32 %129, %113
  br i1 %exitcond12.i14, label %121, label %123

.lr.ph.us.i17:                                    ; preds = %121, %.lr.ph8.split.us.i9
  %.06.us.i15 = phi i32* [ %store4, %.lr.ph8.split.us.i9 ], [ %scevgep.i10, %121 ]
  %i.05.us.i16 = phi i32 [ %.pre-phi, %.lr.ph8.split.us.i9 ], [ %122, %121 ]
  %130 = mul nsw i32 %i.05.us.i16, %102
  br label %123

WriteOneBlock.exit20.loopexit:                    ; preds = %121
  br label %WriteOneBlock.exit20

WriteOneBlock.exit20:                             ; preds = %WriteOneBlock.exit20.loopexit, %WriteOneBlock.exit40
  %131 = load i32* %p_out_hpos, align 4, !tbaa !6
  %132 = add nsw i32 %131, 2
  store i32 %132, i32* %p_out_hpos, align 4, !tbaa !6
  %133 = load i32* %p_out_vpos, align 4, !tbaa !6
  %134 = add nsw i32 %133, 2
  store i32 %134, i32* %p_out_vpos, align 4, !tbaa !6
  %135 = load i32* %p_out_hpos, align 4, !tbaa !6
  %136 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !6
  %137 = icmp slt i32 %135, %136
  br i1 %137, label %138, label %139

; <label>:138                                     ; preds = %WriteOneBlock.exit20
  store i32 %133, i32* %p_out_vpos, align 4, !tbaa !6
  br label %140

; <label>:139                                     ; preds = %WriteOneBlock.exit20
  store i32 0, i32* %p_out_hpos, align 4, !tbaa !6
  br label %140

; <label>:140                                     ; preds = %139, %138
  ret void
}

; Function Attrs: nounwind
define void @YuvToRgb(i32 %p, i32* nocapture readonly %y_buf, i32* nocapture readonly %u_buf, i32* nocapture readonly %v_buf) #0 {
  br label %1

; <label>:1                                       ; preds = %34, %0
  %i.03 = phi i32 [ 0, %0 ], [ %38, %34 ]
  %2 = getelementptr inbounds i32* %y_buf, i32 %i.03
  %3 = load i32* %2, align 4, !tbaa !6
  %4 = getelementptr inbounds i32* %u_buf, i32 %i.03
  %5 = load i32* %4, align 4, !tbaa !6
  %6 = add nsw i32 %5, -128
  %7 = getelementptr inbounds i32* %v_buf, i32 %i.03
  %8 = load i32* %7, align 4, !tbaa !6
  %9 = add nsw i32 %8, -128
  %10 = shl nsw i32 %3, 8
  %11 = mul nsw i32 %9, 359
  %12 = or i32 %10, 128
  %13 = add i32 %12, %11
  %14 = ashr i32 %13, 8
  %15 = mul i32 %6, -88
  %16 = mul i32 %9, -182
  %17 = add i32 %12, %15
  %18 = add i32 %17, %16
  %19 = ashr i32 %18, 8
  %20 = mul nsw i32 %6, 454
  %21 = add i32 %12, %20
  %22 = ashr i32 %21, 8
  %23 = icmp slt i32 %14, 0
  br i1 %23, label %26, label %24

; <label>:24                                      ; preds = %1
  %25 = icmp sgt i32 %14, 255
  %. = select i1 %25, i32 255, i32 %14
  br label %26

; <label>:26                                      ; preds = %24, %1
  %r.0 = phi i32 [ 0, %1 ], [ %., %24 ]
  %27 = icmp slt i32 %19, 0
  br i1 %27, label %30, label %28

; <label>:28                                      ; preds = %26
  %29 = icmp sgt i32 %19, 255
  %.1 = select i1 %29, i32 255, i32 %19
  br label %30

; <label>:30                                      ; preds = %28, %26
  %g.0 = phi i32 [ 0, %26 ], [ %.1, %28 ]
  %31 = icmp slt i32 %22, 0
  br i1 %31, label %34, label %32

; <label>:32                                      ; preds = %30
  %33 = icmp sgt i32 %22, 255
  %.2 = select i1 %33, i32 255, i32 %22
  br label %34

; <label>:34                                      ; preds = %32, %30
  %b.0 = phi i32 [ 0, %30 ], [ %.2, %32 ]
  %35 = getelementptr inbounds [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %p, i32 0, i32 %i.03
  store i32 %r.0, i32* %35, align 4, !tbaa !6
  %36 = getelementptr inbounds [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %p, i32 1, i32 %i.03
  store i32 %g.0, i32* %36, align 4, !tbaa !6
  %37 = getelementptr inbounds [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %p, i32 2, i32 %i.03
  store i32 %b.0, i32* %37, align 4, !tbaa !6
  %38 = add nsw i32 %i.03, 1
  %exitcond = icmp eq i32 %38, 64
  br i1 %exitcond, label %39, label %1

; <label>:39                                      ; preds = %34
  ret void
}

; Function Attrs: nounwind
define void @decode_block(i32 %comp_no, i32* %out_buf, i32* %HuffBuff) #0 {
  %QuantBuff = alloca [64 x i32], align 4
  %1 = bitcast [64 x i32]* %QuantBuff to i8*
  call void @llvm.lifetime.start(i64 256, i8* %1) #3
  tail call void @DecodeHuffMCU(i32* %HuffBuff, i32 %comp_no) #6
  %2 = getelementptr inbounds [64 x i32]* %QuantBuff, i32 0, i32 0
  br label %3

; <label>:3                                       ; preds = %3, %0
  %i.02.i = phi i32 [ 0, %0 ], [ %9, %3 ]
  %.01.i = phi i32* [ %2, %0 ], [ %8, %3 ]
  %4 = getelementptr inbounds [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i
  %5 = load i32* %4, align 4, !tbaa !6
  %6 = getelementptr inbounds i32* %HuffBuff, i32 %5
  %7 = load i32* %6, align 4, !tbaa !6
  %8 = getelementptr inbounds i32* %.01.i, i32 1
  store i32 %7, i32* %.01.i, align 4, !tbaa !6
  %9 = add nsw i32 %i.02.i, 1
  %exitcond.i = icmp eq i32 %9, 64
  br i1 %exitcond.i, label %IZigzagMatrix.exit, label %3

IZigzagMatrix.exit:                               ; preds = %3
  %10 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 %comp_no
  %11 = load i8* %10, align 1, !tbaa !5
  %12 = sext i8 %11 to i32
  %13 = getelementptr inbounds [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %12, i32 64
  %14 = getelementptr inbounds [64 x i32]* %QuantBuff, i32 0, i32 64
  br label %15

; <label>:15                                      ; preds = %15, %IZigzagMatrix.exit
  %mptr.02.i = phi i32* [ %2, %IZigzagMatrix.exit ], [ %20, %15 ]
  %.01.i2 = phi i32* [ %13, %IZigzagMatrix.exit ], [ %19, %15 ]
  %16 = load i32* %mptr.02.i, align 4, !tbaa !6
  %17 = load i32* %.01.i2, align 4, !tbaa !6
  %18 = mul nsw i32 %17, %16
  store i32 %18, i32* %mptr.02.i, align 4, !tbaa !6
  %19 = getelementptr inbounds i32* %.01.i2, i32 1
  %20 = getelementptr inbounds i32* %mptr.02.i, i32 1
  %21 = icmp ult i32* %20, %14
  br i1 %21, label %15, label %IQuantize.exit

IQuantize.exit:                                   ; preds = %15
  call void @ChenIDct(i32* %2, i32* %out_buf) #6
  %22 = getelementptr inbounds i32* %out_buf, i32 64
  br label %23

; <label>:23                                      ; preds = %23, %IQuantize.exit
  %mptr.01.i1 = phi i32* [ %out_buf, %IQuantize.exit ], [ %26, %23 ]
  %24 = load i32* %mptr.01.i1, align 4, !tbaa !6
  %25 = add nsw i32 %24, 128
  store i32 %25, i32* %mptr.01.i1, align 4, !tbaa !6
  %26 = getelementptr inbounds i32* %mptr.01.i1, i32 1
  %27 = icmp ult i32* %26, %22
  br i1 %27, label %23, label %PostshiftIDctMatrix.exit.preheader

PostshiftIDctMatrix.exit.preheader:               ; preds = %23
  br label %PostshiftIDctMatrix.exit

PostshiftIDctMatrix.exit:                         ; preds = %34, %PostshiftIDctMatrix.exit.preheader
  %mptr.01.i = phi i32* [ %35, %34 ], [ %out_buf, %PostshiftIDctMatrix.exit.preheader ]
  %28 = load i32* %mptr.01.i, align 4, !tbaa !6
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %31

; <label>:30                                      ; preds = %PostshiftIDctMatrix.exit
  store i32 0, i32* %mptr.01.i, align 4, !tbaa !6
  br label %34

; <label>:31                                      ; preds = %PostshiftIDctMatrix.exit
  %32 = icmp sgt i32 %28, 255
  br i1 %32, label %33, label %34

; <label>:33                                      ; preds = %31
  store i32 255, i32* %mptr.01.i, align 4, !tbaa !6
  br label %34

; <label>:34                                      ; preds = %33, %31, %30
  %35 = getelementptr inbounds i32* %mptr.01.i, i32 1
  %36 = icmp ult i32* %35, %22
  br i1 %36, label %PostshiftIDctMatrix.exit, label %BoundIDctMatrix.exit

BoundIDctMatrix.exit:                             ; preds = %34
  call void @llvm.lifetime.end(i64 256, i8* %1) #3
  ret void
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #3

; Function Attrs: nounwind
define void @DecodeHuffMCU(i32* %out_buf, i32 %num_cmp) #0 {
  %1 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_dc_tbl_no, i32 0, i32 %num_cmp
  %2 = load i8* %1, align 1, !tbaa !5
  %3 = sext i8 %2 to i32
  %4 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_dc_xhuff_tbl_huffval, i32 0, i32 %3, i32 0
  %5 = getelementptr inbounds [2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 %3
  %6 = load i32* %5, align 4, !tbaa !6
  %7 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 %3, i32 0
  %8 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 %3, i32 0
  %9 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 %3, i32 0
  %10 = tail call i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %.lr.ph, label %12

; <label>:12                                      ; preds = %0
  %13 = tail call i32 @buf_getv(i32 %10) #6
  %14 = add nsw i32 %10, -1
  %15 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %14
  %16 = load i32* %15, align 4, !tbaa !6
  %17 = and i32 %16, %13
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %24

; <label>:19                                      ; preds = %12
  %20 = getelementptr inbounds [20 x i32]* @extend_mask, i32 0, i32 %14
  %21 = load i32* %20, align 4, !tbaa !6
  %22 = or i32 %21, %13
  %23 = add nsw i32 %22, 1
  br label %24

; <label>:24                                      ; preds = %19, %12
  %diff.0 = phi i32 [ %23, %19 ], [ %13, %12 ]
  %25 = load i32* %out_buf, align 4, !tbaa !6
  %26 = add nsw i32 %25, %diff.0
  store i32 %26, i32* %out_buf, align 4, !tbaa !6
  br label %.lr.ph

.lr.ph:                                           ; preds = %24, %0
  %27 = getelementptr inbounds i32* %out_buf, i32 64
  %mptr.03 = getelementptr inbounds i32* %out_buf, i32 1
  br label %33

.preheader:                                       ; preds = %33
  %28 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_ac_xhuff_tbl_huffval, i32 0, i32 %3, i32 0
  %29 = getelementptr inbounds [2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 %3
  %30 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 %3, i32 0
  %31 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 %3, i32 0
  %32 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 %3, i32 0
  br label %36

; <label>:33                                      ; preds = %33, %.lr.ph
  %34 = phi i32* [ %out_buf, %.lr.ph ], [ %mptr.04, %33 ]
  %mptr.04 = phi i32* [ %mptr.03, %.lr.ph ], [ %mptr.0, %33 ]
  store i32 0, i32* %mptr.04, align 4, !tbaa !6
  %mptr.0 = getelementptr inbounds i32* %34, i32 2
  %35 = icmp ult i32* %mptr.0, %27
  br i1 %35, label %33, label %.preheader

; <label>:36                                      ; preds = %.backedge, %.preheader
  %k.02 = phi i32 [ 1, %.preheader ], [ %k.0.be, %.backedge ]
  %37 = load i32* %29, align 4, !tbaa !6
  %38 = tail call i32 @DecodeHuffman(i32* %28, i32 %37, i32* %30, i32* %31, i32* %32) #6
  %39 = and i32 %38, 15
  %40 = lshr i32 %38, 4
  %41 = and i32 %40, 15
  %42 = icmp eq i32 %39, 0
  br i1 %42, label %61, label %43

; <label>:43                                      ; preds = %36
  %44 = add nsw i32 %41, %k.02
  %45 = icmp sgt i32 %44, 63
  br i1 %45, label %66, label %46

; <label>:46                                      ; preds = %43
  %47 = tail call i32 @buf_getv(i32 %39) #6
  %48 = getelementptr inbounds i32* %out_buf, i32 %44
  store i32 %47, i32* %48, align 4, !tbaa !6
  %49 = add nsw i32 %39, -1
  %50 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %49
  %51 = load i32* %50, align 4, !tbaa !6
  %52 = and i32 %51, %47
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %59

; <label>:54                                      ; preds = %46
  %55 = getelementptr inbounds [20 x i32]* @extend_mask, i32 0, i32 %49
  %56 = load i32* %55, align 4, !tbaa !6
  %57 = or i32 %56, %47
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* %48, align 4, !tbaa !6
  br label %59

; <label>:59                                      ; preds = %54, %46
  %60 = add nsw i32 %44, 1
  br label %.backedge

; <label>:61                                      ; preds = %36
  %62 = icmp eq i32 %41, 15
  br i1 %62, label %63, label %66

; <label>:63                                      ; preds = %61
  %64 = add nsw i32 %k.02, 16
  br label %.backedge

.backedge:                                        ; preds = %63, %59
  %k.0.be = phi i32 [ %60, %59 ], [ %64, %63 ]
  %65 = icmp slt i32 %k.0.be, 64
  br i1 %65, label %36, label %66

; <label>:66                                      ; preds = %.backedge, %61, %43
  ret void
}

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #3

; Function Attrs: nounwind
define void @decode_start(i32* nocapture %out_data_image_width, i32* nocapture %out_data_image_height, i32* nocapture %out_data_comp_vpos, i32* nocapture %out_data_comp_hpos) #0 {
  %QuantBuff.i = alloca [64 x i32], align 4
  %HuffBuff = alloca [3 x [64 x i32]], align 4
  %IDCTBuff = alloca [6 x [64 x i32]], align 4
  %1 = bitcast [3 x [64 x i32]]* %HuffBuff to i8*
  call void @llvm.lifetime.start(i64 768, i8* %1) #3
  %2 = bitcast [6 x [64 x i32]]* %IDCTBuff to i8*
  call void @llvm.lifetime.start(i64 1536, i8* %2) #3
  %3 = load i8** @p_jinfo_jpeg_data, align 4, !tbaa !1
  store i8* %3, i8** @CurHuffReadBuf, align 4, !tbaa !1
  %4 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff, i32 0, i32 0, i32 0
  store i32 0, i32* %4, align 4, !tbaa !6
  %5 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff, i32 0, i32 1, i32 0
  store i32 0, i32* %5, align 4, !tbaa !6
  %6 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff, i32 0, i32 2, i32 0
  store i32 0, i32* %6, align 4, !tbaa !6
  %7 = load i16* @p_jinfo_image_width, align 2, !tbaa !8
  %8 = sext i16 %7 to i32
  store i32 %8, i32* %out_data_image_width, align 4, !tbaa !6
  %9 = load i16* @p_jinfo_image_height, align 2, !tbaa !8
  %10 = sext i16 %9 to i32
  store i32 %10, i32* %out_data_image_height, align 4, !tbaa !6
  store i32 0, i32* %out_data_comp_vpos, align 4, !tbaa !6
  store i32 0, i32* %out_data_comp_hpos, align 4, !tbaa !6
  %11 = getelementptr inbounds i32* %out_data_comp_vpos, i32 1
  store i32 0, i32* %11, align 4, !tbaa !6
  %12 = getelementptr inbounds i32* %out_data_comp_hpos, i32 1
  store i32 0, i32* %12, align 4, !tbaa !6
  %13 = getelementptr inbounds i32* %out_data_comp_vpos, i32 2
  store i32 0, i32* %13, align 4, !tbaa !6
  %14 = getelementptr inbounds i32* %out_data_comp_hpos, i32 2
  store i32 0, i32* %14, align 4, !tbaa !6
  %15 = load i32* @p_jinfo_smp_fact, align 4, !tbaa !6
  %16 = icmp eq i32 %15, 0
  %17 = load i32* @p_jinfo_NumMCU, align 4, !tbaa !6
  br i1 %16, label %18, label %143

; <label>:18                                      ; preds = %0
  %19 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str24, i32 0, i32 0), i32 %17) #4
  %20 = load i32* @p_jinfo_NumMCU, align 4, !tbaa !6
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %.preheader46.lr.ph, label %.loopexit

.preheader46.lr.ph:                               ; preds = %18
  %22 = bitcast [64 x i32]* %QuantBuff.i to i8*
  %23 = getelementptr inbounds [64 x i32]* %QuantBuff.i, i32 0, i32 0
  %24 = getelementptr inbounds [64 x i32]* %QuantBuff.i, i32 0, i32 64
  br label %.preheader46

.preheader46:                                     ; preds = %139, %.preheader46.lr.ph
  %CurrentMCU.054 = phi i32 [ 0, %.preheader46.lr.ph ], [ %140, %139 ]
  call void @llvm.lifetime.start(i64 256, i8* %22) #3
  call void @DecodeHuffMCU(i32* %4, i32 0) #4
  br label %25

; <label>:25                                      ; preds = %25, %.preheader46
  %i.02.i.i = phi i32 [ 0, %.preheader46 ], [ %31, %25 ]
  %.01.i.i = phi i32* [ %23, %.preheader46 ], [ %30, %25 ]
  %26 = getelementptr inbounds [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i
  %27 = load i32* %26, align 4, !tbaa !6
  %28 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff, i32 0, i32 0, i32 %27
  %29 = load i32* %28, align 4, !tbaa !6
  %30 = getelementptr inbounds i32* %.01.i.i, i32 1
  store i32 %29, i32* %.01.i.i, align 4, !tbaa !6
  %31 = add nsw i32 %i.02.i.i, 1
  %exitcond.i.i = icmp eq i32 %31, 64
  br i1 %exitcond.i.i, label %IZigzagMatrix.exit.i, label %25

IZigzagMatrix.exit.i:                             ; preds = %25
  %32 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 0), align 1, !tbaa !5
  %33 = sext i8 %32 to i32
  %34 = getelementptr inbounds [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %33, i32 64
  br label %35

; <label>:35                                      ; preds = %35, %IZigzagMatrix.exit.i
  %mptr.02.i.i = phi i32* [ %23, %IZigzagMatrix.exit.i ], [ %40, %35 ]
  %.01.i2.i = phi i32* [ %34, %IZigzagMatrix.exit.i ], [ %39, %35 ]
  %36 = load i32* %mptr.02.i.i, align 4, !tbaa !6
  %37 = load i32* %.01.i2.i, align 4, !tbaa !6
  %38 = mul nsw i32 %37, %36
  store i32 %38, i32* %mptr.02.i.i, align 4, !tbaa !6
  %39 = getelementptr inbounds i32* %.01.i2.i, i32 1
  %40 = getelementptr inbounds i32* %mptr.02.i.i, i32 1
  %41 = icmp ult i32* %40, %24
  br i1 %41, label %35, label %IQuantize.exit.i

IQuantize.exit.i:                                 ; preds = %35
  %42 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 0, i32 0
  call void @ChenIDct(i32* %23, i32* %42) #4
  %43 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 0, i32 64
  br label %44

; <label>:44                                      ; preds = %44, %IQuantize.exit.i
  %mptr.01.i1.i = phi i32* [ %42, %IQuantize.exit.i ], [ %47, %44 ]
  %45 = load i32* %mptr.01.i1.i, align 4, !tbaa !6
  %46 = add nsw i32 %45, 128
  store i32 %46, i32* %mptr.01.i1.i, align 4, !tbaa !6
  %47 = getelementptr inbounds i32* %mptr.01.i1.i, i32 1
  %48 = icmp ult i32* %47, %43
  br i1 %48, label %44, label %PostshiftIDctMatrix.exit.i.preheader

PostshiftIDctMatrix.exit.i.preheader:             ; preds = %44
  br label %PostshiftIDctMatrix.exit.i

PostshiftIDctMatrix.exit.i:                       ; preds = %55, %PostshiftIDctMatrix.exit.i.preheader
  %mptr.01.i.i = phi i32* [ %56, %55 ], [ %42, %PostshiftIDctMatrix.exit.i.preheader ]
  %49 = load i32* %mptr.01.i.i, align 4, !tbaa !6
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %52

; <label>:51                                      ; preds = %PostshiftIDctMatrix.exit.i
  store i32 0, i32* %mptr.01.i.i, align 4, !tbaa !6
  br label %55

; <label>:52                                      ; preds = %PostshiftIDctMatrix.exit.i
  %53 = icmp sgt i32 %49, 255
  br i1 %53, label %54, label %55

; <label>:54                                      ; preds = %52
  store i32 255, i32* %mptr.01.i.i, align 4, !tbaa !6
  br label %55

; <label>:55                                      ; preds = %54, %52, %51
  %56 = getelementptr inbounds i32* %mptr.01.i.i, i32 1
  %57 = icmp ult i32* %56, %43
  br i1 %57, label %PostshiftIDctMatrix.exit.i, label %decode_block.exit

decode_block.exit:                                ; preds = %55
  call void @llvm.lifetime.end(i64 256, i8* %22) #3
  call void @llvm.lifetime.start(i64 256, i8* %22) #3
  call void @DecodeHuffMCU(i32* %5, i32 1) #4
  br label %294

decode_block.exit.2:                              ; preds = %decode_block.exit.2.preheader, %90
  %i.03.i = phi i32 [ %94, %90 ], [ 0, %decode_block.exit.2.preheader ]
  %58 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 0, i32 %i.03.i
  %59 = load i32* %58, align 4, !tbaa !6
  %60 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 1, i32 %i.03.i
  %61 = load i32* %60, align 4, !tbaa !6
  %62 = add nsw i32 %61, -128
  %63 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 2, i32 %i.03.i
  %64 = load i32* %63, align 4, !tbaa !6
  %65 = add nsw i32 %64, -128
  %66 = shl nsw i32 %59, 8
  %67 = mul nsw i32 %65, 359
  %68 = or i32 %66, 128
  %69 = add i32 %67, %68
  %70 = ashr i32 %69, 8
  %71 = mul i32 %62, -88
  %72 = mul i32 %65, -182
  %73 = add i32 %71, %68
  %74 = add i32 %73, %72
  %75 = ashr i32 %74, 8
  %76 = mul nsw i32 %62, 454
  %77 = add i32 %76, %68
  %78 = ashr i32 %77, 8
  %79 = icmp slt i32 %70, 0
  br i1 %79, label %82, label %80

; <label>:80                                      ; preds = %decode_block.exit.2
  %81 = icmp sgt i32 %70, 255
  %..i = select i1 %81, i32 255, i32 %70
  br label %82

; <label>:82                                      ; preds = %80, %decode_block.exit.2
  %r.0.i = phi i32 [ 0, %decode_block.exit.2 ], [ %..i, %80 ]
  %83 = icmp slt i32 %75, 0
  br i1 %83, label %86, label %84

; <label>:84                                      ; preds = %82
  %85 = icmp sgt i32 %75, 255
  %.1.i = select i1 %85, i32 255, i32 %75
  br label %86

; <label>:86                                      ; preds = %84, %82
  %g.0.i = phi i32 [ 0, %82 ], [ %.1.i, %84 ]
  %87 = icmp slt i32 %78, 0
  br i1 %87, label %90, label %88

; <label>:88                                      ; preds = %86
  %89 = icmp sgt i32 %78, 255
  %.2.i = select i1 %89, i32 255, i32 %78
  br label %90

; <label>:90                                      ; preds = %88, %86
  %b.0.i = phi i32 [ 0, %86 ], [ %.2.i, %88 ]
  %91 = getelementptr inbounds [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 %i.03.i
  store i32 %r.0.i, i32* %91, align 4, !tbaa !6
  %92 = getelementptr inbounds [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 %i.03.i
  store i32 %g.0.i, i32* %92, align 4, !tbaa !6
  %93 = getelementptr inbounds [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 %i.03.i
  store i32 %b.0.i, i32* %93, align 4, !tbaa !6
  %94 = add nsw i32 %i.03.i, 1
  %exitcond.i = icmp eq i32 %94, 64
  br i1 %exitcond.i, label %YuvToRgb.exit.preheader, label %decode_block.exit.2

YuvToRgb.exit.preheader:                          ; preds = %90
  %95 = load i16* @p_jinfo_image_width, align 2, !tbaa !8
  %96 = sext i16 %95 to i32
  %97 = load i16* @p_jinfo_image_height, align 2, !tbaa !8
  %98 = sext i16 %97 to i32
  %.pre = load i32* %out_data_comp_hpos, align 4, !tbaa !6
  br label %99

; <label>:99                                      ; preds = %WriteBlock.exit, %YuvToRgb.exit.preheader
  %100 = phi i32 [ %.pre, %YuvToRgb.exit.preheader ], [ %138, %WriteBlock.exit ]
  %i.352 = phi i32 [ 0, %YuvToRgb.exit.preheader ], [ %.sum, %WriteBlock.exit ]
  %101 = getelementptr inbounds i32* %out_data_comp_vpos, i32 %i.352
  %102 = load i32* %101, align 4, !tbaa !6
  %103 = shl nsw i32 %102, 3
  %104 = shl nsw i32 %100, 3
  %105 = icmp slt i32 %103, %98
  %106 = icmp slt i32 %104, %96
  %or.cond.i = and i1 %105, %106
  br i1 %or.cond.i, label %.lr.ph8.split.us.i.i, label %WriteOneBlock.exit.i

.lr.ph8.split.us.i.i:                             ; preds = %99
  %107 = getelementptr inbounds [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 %i.352, i32 0
  %108 = add i32 %104, -1
  %109 = or i32 %104, 7
  %110 = icmp slt i32 %109, %104
  %smax10.i.i = select i1 %110, i32 %104, i32 %109
  %111 = sub i32 %108, %smax10.i.i
  %112 = sub i32 %104, %96
  %113 = icmp ugt i32 %111, %112
  %umax11.i.i = select i1 %113, i32 %111, i32 %112
  %114 = sub i32 0, %umax11.i.i
  %115 = sub i32 %104, %umax11.i.i
  %116 = sub i32 %103, %98
  %117 = add i32 %103, 8
  %118 = or i32 %103, 1
  %119 = icmp sgt i32 %117, %118
  %smax13.i.i = select i1 %119, i32 %117, i32 %118
  %120 = sub i32 %103, %smax13.i.i
  %121 = icmp ugt i32 %116, %120
  %umax14.i.i = select i1 %121, i32 %116, i32 %120
  %122 = sub i32 %103, %umax14.i.i
  br label %.lr.ph.us.i.i

; <label>:123                                     ; preds = %125
  %scevgep.i.i = getelementptr i32* %.06.us.i.i, i32 %114
  %124 = add nsw i32 %i.05.us.i.i, 1
  %exitcond15.i.i = icmp eq i32 %124, %122
  br i1 %exitcond15.i.i, label %WriteOneBlock.exit.i.loopexit, label %.lr.ph.us.i.i

; <label>:125                                     ; preds = %.lr.ph.us.i.i, %125
  %.14.us.i.i = phi i32* [ %.06.us.i.i, %.lr.ph.us.i.i ], [ %126, %125 ]
  %e.03.us.i.i = phi i32 [ %104, %.lr.ph.us.i.i ], [ %131, %125 ]
  %126 = getelementptr inbounds i32* %.14.us.i.i, i32 1
  %127 = load i32* %.14.us.i.i, align 4, !tbaa !6
  %128 = trunc i32 %127 to i8
  %129 = add nsw i32 %e.03.us.i.i, %132
  %130 = getelementptr inbounds [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 %i.352, i32 %129
  store i8 %128, i8* %130, align 1, !tbaa !5
  %131 = add nsw i32 %e.03.us.i.i, 1
  %exitcond12.i.i = icmp eq i32 %131, %115
  br i1 %exitcond12.i.i, label %123, label %125

.lr.ph.us.i.i:                                    ; preds = %123, %.lr.ph8.split.us.i.i
  %.06.us.i.i = phi i32* [ %107, %.lr.ph8.split.us.i.i ], [ %scevgep.i.i, %123 ]
  %i.05.us.i.i = phi i32 [ %103, %.lr.ph8.split.us.i.i ], [ %124, %123 ]
  %132 = mul nsw i32 %i.05.us.i.i, %96
  br label %125

WriteOneBlock.exit.i.loopexit:                    ; preds = %123
  br label %WriteOneBlock.exit.i

WriteOneBlock.exit.i:                             ; preds = %WriteOneBlock.exit.i.loopexit, %99
  %.sum = add i32 %i.352, 1
  %133 = getelementptr inbounds i32* %out_data_comp_hpos, i32 %.sum
  %134 = load i32* %133, align 4, !tbaa !6
  %135 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !6
  %136 = icmp slt i32 %134, %135
  br i1 %136, label %WriteBlock.exit, label %137

; <label>:137                                     ; preds = %WriteOneBlock.exit.i
  store i32 0, i32* %133, align 4, !tbaa !6
  br label %WriteBlock.exit

WriteBlock.exit:                                  ; preds = %137, %WriteOneBlock.exit.i
  %138 = phi i32 [ %134, %WriteOneBlock.exit.i ], [ 0, %137 ]
  %exitcond = icmp eq i32 %.sum, 3
  br i1 %exitcond, label %139, label %99

; <label>:139                                     ; preds = %WriteBlock.exit
  %140 = add nsw i32 %CurrentMCU.054, 1
  %141 = load i32* @p_jinfo_NumMCU, align 4, !tbaa !6
  %142 = icmp slt i32 %140, %141
  br i1 %142, label %.preheader46, label %.loopexit.loopexit

; <label>:143                                     ; preds = %0
  %144 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str25, i32 0, i32 0), i32 %17) #4
  %145 = load i32* @p_jinfo_NumMCU, align 4, !tbaa !6
  %146 = icmp sgt i32 %145, 0
  br i1 %146, label %.preheader49.lr.ph, label %.loopexit

.preheader49.lr.ph:                               ; preds = %143
  %147 = bitcast [64 x i32]* %QuantBuff.i to i8*
  %148 = getelementptr inbounds [64 x i32]* %QuantBuff.i, i32 0, i32 0
  %149 = getelementptr inbounds [64 x i32]* %QuantBuff.i, i32 0, i32 64
  %150 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 4, i32 0
  %151 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 4, i32 64
  %152 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 5, i32 0
  %153 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 5, i32 64
  br label %.preheader49

.preheader49:                                     ; preds = %.preheader48, %.preheader49.lr.ph
  %CurrentMCU.158 = phi i32 [ 0, %.preheader49.lr.ph ], [ %252, %.preheader48 ]
  br label %154

; <label>:154                                     ; preds = %decode_block.exit12, %.preheader49
  %i.455 = phi i32 [ 0, %.preheader49 ], [ %188, %decode_block.exit12 ]
  call void @llvm.lifetime.start(i64 256, i8* %147) #3
  call void @DecodeHuffMCU(i32* %4, i32 0) #4
  br label %155

; <label>:155                                     ; preds = %155, %154
  %i.02.i.i2 = phi i32 [ 0, %154 ], [ %161, %155 ]
  %.01.i.i3 = phi i32* [ %148, %154 ], [ %160, %155 ]
  %156 = getelementptr inbounds [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i2
  %157 = load i32* %156, align 4, !tbaa !6
  %158 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff, i32 0, i32 0, i32 %157
  %159 = load i32* %158, align 4, !tbaa !6
  %160 = getelementptr inbounds i32* %.01.i.i3, i32 1
  store i32 %159, i32* %.01.i.i3, align 4, !tbaa !6
  %161 = add nsw i32 %i.02.i.i2, 1
  %exitcond.i.i4 = icmp eq i32 %161, 64
  br i1 %exitcond.i.i4, label %IZigzagMatrix.exit.i5, label %155

IZigzagMatrix.exit.i5:                            ; preds = %155
  %162 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 0), align 1, !tbaa !5
  %163 = sext i8 %162 to i32
  %164 = getelementptr inbounds [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %163, i32 64
  br label %165

; <label>:165                                     ; preds = %165, %IZigzagMatrix.exit.i5
  %mptr.02.i.i6 = phi i32* [ %148, %IZigzagMatrix.exit.i5 ], [ %170, %165 ]
  %.01.i2.i7 = phi i32* [ %164, %IZigzagMatrix.exit.i5 ], [ %169, %165 ]
  %166 = load i32* %mptr.02.i.i6, align 4, !tbaa !6
  %167 = load i32* %.01.i2.i7, align 4, !tbaa !6
  %168 = mul nsw i32 %167, %166
  store i32 %168, i32* %mptr.02.i.i6, align 4, !tbaa !6
  %169 = getelementptr inbounds i32* %.01.i2.i7, i32 1
  %170 = getelementptr inbounds i32* %mptr.02.i.i6, i32 1
  %171 = icmp ult i32* %170, %149
  br i1 %171, label %165, label %IQuantize.exit.i8

IQuantize.exit.i8:                                ; preds = %165
  %172 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 %i.455, i32 0
  call void @ChenIDct(i32* %148, i32* %172) #4
  %173 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 %i.455, i32 64
  br label %174

; <label>:174                                     ; preds = %174, %IQuantize.exit.i8
  %mptr.01.i1.i9 = phi i32* [ %172, %IQuantize.exit.i8 ], [ %177, %174 ]
  %175 = load i32* %mptr.01.i1.i9, align 4, !tbaa !6
  %176 = add nsw i32 %175, 128
  store i32 %176, i32* %mptr.01.i1.i9, align 4, !tbaa !6
  %177 = getelementptr inbounds i32* %mptr.01.i1.i9, i32 1
  %178 = icmp ult i32* %177, %173
  br i1 %178, label %174, label %PostshiftIDctMatrix.exit.i11.preheader

PostshiftIDctMatrix.exit.i11.preheader:           ; preds = %174
  br label %PostshiftIDctMatrix.exit.i11

PostshiftIDctMatrix.exit.i11:                     ; preds = %185, %PostshiftIDctMatrix.exit.i11.preheader
  %mptr.01.i.i10 = phi i32* [ %186, %185 ], [ %172, %PostshiftIDctMatrix.exit.i11.preheader ]
  %179 = load i32* %mptr.01.i.i10, align 4, !tbaa !6
  %180 = icmp slt i32 %179, 0
  br i1 %180, label %181, label %182

; <label>:181                                     ; preds = %PostshiftIDctMatrix.exit.i11
  store i32 0, i32* %mptr.01.i.i10, align 4, !tbaa !6
  br label %185

; <label>:182                                     ; preds = %PostshiftIDctMatrix.exit.i11
  %183 = icmp sgt i32 %179, 255
  br i1 %183, label %184, label %185

; <label>:184                                     ; preds = %182
  store i32 255, i32* %mptr.01.i.i10, align 4, !tbaa !6
  br label %185

; <label>:185                                     ; preds = %184, %182, %181
  %186 = getelementptr inbounds i32* %mptr.01.i.i10, i32 1
  %187 = icmp ult i32* %186, %173
  br i1 %187, label %PostshiftIDctMatrix.exit.i11, label %decode_block.exit12

decode_block.exit12:                              ; preds = %185
  call void @llvm.lifetime.end(i64 256, i8* %147) #3
  %188 = add nsw i32 %i.455, 1
  %exitcond61 = icmp eq i32 %188, 4
  br i1 %exitcond61, label %189, label %154

; <label>:189                                     ; preds = %decode_block.exit12
  call void @llvm.lifetime.start(i64 256, i8* %147) #3
  call void @DecodeHuffMCU(i32* %5, i32 1) #4
  br label %190

; <label>:190                                     ; preds = %190, %189
  %i.02.i.i14 = phi i32 [ 0, %189 ], [ %196, %190 ]
  %.01.i.i15 = phi i32* [ %148, %189 ], [ %195, %190 ]
  %191 = getelementptr inbounds [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i14
  %192 = load i32* %191, align 4, !tbaa !6
  %193 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff, i32 0, i32 1, i32 %192
  %194 = load i32* %193, align 4, !tbaa !6
  %195 = getelementptr inbounds i32* %.01.i.i15, i32 1
  store i32 %194, i32* %.01.i.i15, align 4, !tbaa !6
  %196 = add nsw i32 %i.02.i.i14, 1
  %exitcond.i.i16 = icmp eq i32 %196, 64
  br i1 %exitcond.i.i16, label %IZigzagMatrix.exit.i17, label %190

IZigzagMatrix.exit.i17:                           ; preds = %190
  %197 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 1), align 1, !tbaa !5
  %198 = sext i8 %197 to i32
  %199 = getelementptr inbounds [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %198, i32 64
  br label %200

; <label>:200                                     ; preds = %200, %IZigzagMatrix.exit.i17
  %mptr.02.i.i18 = phi i32* [ %148, %IZigzagMatrix.exit.i17 ], [ %205, %200 ]
  %.01.i2.i19 = phi i32* [ %199, %IZigzagMatrix.exit.i17 ], [ %204, %200 ]
  %201 = load i32* %mptr.02.i.i18, align 4, !tbaa !6
  %202 = load i32* %.01.i2.i19, align 4, !tbaa !6
  %203 = mul nsw i32 %202, %201
  store i32 %203, i32* %mptr.02.i.i18, align 4, !tbaa !6
  %204 = getelementptr inbounds i32* %.01.i2.i19, i32 1
  %205 = getelementptr inbounds i32* %mptr.02.i.i18, i32 1
  %206 = icmp ult i32* %205, %149
  br i1 %206, label %200, label %IQuantize.exit.i20

IQuantize.exit.i20:                               ; preds = %200
  call void @ChenIDct(i32* %148, i32* %150) #4
  br label %207

; <label>:207                                     ; preds = %207, %IQuantize.exit.i20
  %mptr.01.i1.i21 = phi i32* [ %150, %IQuantize.exit.i20 ], [ %210, %207 ]
  %208 = load i32* %mptr.01.i1.i21, align 4, !tbaa !6
  %209 = add nsw i32 %208, 128
  store i32 %209, i32* %mptr.01.i1.i21, align 4, !tbaa !6
  %210 = getelementptr inbounds i32* %mptr.01.i1.i21, i32 1
  %211 = icmp ult i32* %210, %151
  br i1 %211, label %207, label %PostshiftIDctMatrix.exit.i23.preheader

PostshiftIDctMatrix.exit.i23.preheader:           ; preds = %207
  br label %PostshiftIDctMatrix.exit.i23

PostshiftIDctMatrix.exit.i23:                     ; preds = %218, %PostshiftIDctMatrix.exit.i23.preheader
  %mptr.01.i.i22 = phi i32* [ %219, %218 ], [ %150, %PostshiftIDctMatrix.exit.i23.preheader ]
  %212 = load i32* %mptr.01.i.i22, align 4, !tbaa !6
  %213 = icmp slt i32 %212, 0
  br i1 %213, label %214, label %215

; <label>:214                                     ; preds = %PostshiftIDctMatrix.exit.i23
  store i32 0, i32* %mptr.01.i.i22, align 4, !tbaa !6
  br label %218

; <label>:215                                     ; preds = %PostshiftIDctMatrix.exit.i23
  %216 = icmp sgt i32 %212, 255
  br i1 %216, label %217, label %218

; <label>:217                                     ; preds = %215
  store i32 255, i32* %mptr.01.i.i22, align 4, !tbaa !6
  br label %218

; <label>:218                                     ; preds = %217, %215, %214
  %219 = getelementptr inbounds i32* %mptr.01.i.i22, i32 1
  %220 = icmp ult i32* %219, %151
  br i1 %220, label %PostshiftIDctMatrix.exit.i23, label %decode_block.exit24

decode_block.exit24:                              ; preds = %218
  call void @llvm.lifetime.end(i64 256, i8* %147) #3
  call void @llvm.lifetime.start(i64 256, i8* %147) #3
  call void @DecodeHuffMCU(i32* %6, i32 2) #4
  br label %221

; <label>:221                                     ; preds = %221, %decode_block.exit24
  %i.02.i.i26 = phi i32 [ 0, %decode_block.exit24 ], [ %227, %221 ]
  %.01.i.i27 = phi i32* [ %148, %decode_block.exit24 ], [ %226, %221 ]
  %222 = getelementptr inbounds [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i26
  %223 = load i32* %222, align 4, !tbaa !6
  %224 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff, i32 0, i32 2, i32 %223
  %225 = load i32* %224, align 4, !tbaa !6
  %226 = getelementptr inbounds i32* %.01.i.i27, i32 1
  store i32 %225, i32* %.01.i.i27, align 4, !tbaa !6
  %227 = add nsw i32 %i.02.i.i26, 1
  %exitcond.i.i28 = icmp eq i32 %227, 64
  br i1 %exitcond.i.i28, label %IZigzagMatrix.exit.i29, label %221

IZigzagMatrix.exit.i29:                           ; preds = %221
  %228 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 2), align 1, !tbaa !5
  %229 = sext i8 %228 to i32
  %230 = getelementptr inbounds [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %229, i32 64
  br label %231

; <label>:231                                     ; preds = %231, %IZigzagMatrix.exit.i29
  %mptr.02.i.i30 = phi i32* [ %148, %IZigzagMatrix.exit.i29 ], [ %236, %231 ]
  %.01.i2.i31 = phi i32* [ %230, %IZigzagMatrix.exit.i29 ], [ %235, %231 ]
  %232 = load i32* %mptr.02.i.i30, align 4, !tbaa !6
  %233 = load i32* %.01.i2.i31, align 4, !tbaa !6
  %234 = mul nsw i32 %233, %232
  store i32 %234, i32* %mptr.02.i.i30, align 4, !tbaa !6
  %235 = getelementptr inbounds i32* %.01.i2.i31, i32 1
  %236 = getelementptr inbounds i32* %mptr.02.i.i30, i32 1
  %237 = icmp ult i32* %236, %149
  br i1 %237, label %231, label %IQuantize.exit.i32

IQuantize.exit.i32:                               ; preds = %231
  call void @ChenIDct(i32* %148, i32* %152) #4
  br label %238

; <label>:238                                     ; preds = %238, %IQuantize.exit.i32
  %mptr.01.i1.i33 = phi i32* [ %152, %IQuantize.exit.i32 ], [ %241, %238 ]
  %239 = load i32* %mptr.01.i1.i33, align 4, !tbaa !6
  %240 = add nsw i32 %239, 128
  store i32 %240, i32* %mptr.01.i1.i33, align 4, !tbaa !6
  %241 = getelementptr inbounds i32* %mptr.01.i1.i33, i32 1
  %242 = icmp ult i32* %241, %153
  br i1 %242, label %238, label %PostshiftIDctMatrix.exit.i35.preheader

PostshiftIDctMatrix.exit.i35.preheader:           ; preds = %238
  br label %PostshiftIDctMatrix.exit.i35

PostshiftIDctMatrix.exit.i35:                     ; preds = %249, %PostshiftIDctMatrix.exit.i35.preheader
  %mptr.01.i.i34 = phi i32* [ %250, %249 ], [ %152, %PostshiftIDctMatrix.exit.i35.preheader ]
  %243 = load i32* %mptr.01.i.i34, align 4, !tbaa !6
  %244 = icmp slt i32 %243, 0
  br i1 %244, label %245, label %246

; <label>:245                                     ; preds = %PostshiftIDctMatrix.exit.i35
  store i32 0, i32* %mptr.01.i.i34, align 4, !tbaa !6
  br label %249

; <label>:246                                     ; preds = %PostshiftIDctMatrix.exit.i35
  %247 = icmp sgt i32 %243, 255
  br i1 %247, label %248, label %249

; <label>:248                                     ; preds = %246
  store i32 255, i32* %mptr.01.i.i34, align 4, !tbaa !6
  br label %249

; <label>:249                                     ; preds = %248, %246, %245
  %250 = getelementptr inbounds i32* %mptr.01.i.i34, i32 1
  %251 = icmp ult i32* %250, %153
  br i1 %251, label %PostshiftIDctMatrix.exit.i35, label %.preheader47.preheader

.preheader47.preheader:                           ; preds = %249
  br label %.preheader47

.preheader48:                                     ; preds = %YuvToRgb.exit45
  call void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* %out_data_comp_vpos, i32* %out_data_comp_hpos, i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) #6
  call void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* %11, i32* %12, i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) #6
  call void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* %13, i32* %14, i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) #6
  %252 = add nsw i32 %CurrentMCU.158, 4
  %253 = load i32* @p_jinfo_NumMCU, align 4, !tbaa !6
  %254 = icmp slt i32 %252, %253
  br i1 %254, label %.preheader49, label %.loopexit.loopexit67

.preheader47:                                     ; preds = %YuvToRgb.exit45, %.preheader47.preheader
  %i.556 = phi i32 [ %293, %YuvToRgb.exit45 ], [ 0, %.preheader47.preheader ]
  br label %255

; <label>:255                                     ; preds = %288, %.preheader47
  %i.03.i37 = phi i32 [ %292, %288 ], [ 0, %.preheader47 ]
  %256 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 %i.556, i32 %i.03.i37
  %257 = load i32* %256, align 4, !tbaa !6
  %258 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 4, i32 %i.03.i37
  %259 = load i32* %258, align 4, !tbaa !6
  %260 = add nsw i32 %259, -128
  %261 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 5, i32 %i.03.i37
  %262 = load i32* %261, align 4, !tbaa !6
  %263 = add nsw i32 %262, -128
  %264 = shl nsw i32 %257, 8
  %265 = mul nsw i32 %263, 359
  %266 = or i32 %264, 128
  %267 = add i32 %265, %266
  %268 = ashr i32 %267, 8
  %269 = mul i32 %260, -88
  %270 = mul i32 %263, -182
  %271 = add i32 %269, %266
  %272 = add i32 %271, %270
  %273 = ashr i32 %272, 8
  %274 = mul nsw i32 %260, 454
  %275 = add i32 %274, %266
  %276 = ashr i32 %275, 8
  %277 = icmp slt i32 %268, 0
  br i1 %277, label %280, label %278

; <label>:278                                     ; preds = %255
  %279 = icmp sgt i32 %268, 255
  %..i38 = select i1 %279, i32 255, i32 %268
  br label %280

; <label>:280                                     ; preds = %278, %255
  %r.0.i39 = phi i32 [ 0, %255 ], [ %..i38, %278 ]
  %281 = icmp slt i32 %273, 0
  br i1 %281, label %284, label %282

; <label>:282                                     ; preds = %280
  %283 = icmp sgt i32 %273, 255
  %.1.i40 = select i1 %283, i32 255, i32 %273
  br label %284

; <label>:284                                     ; preds = %282, %280
  %g.0.i41 = phi i32 [ 0, %280 ], [ %.1.i40, %282 ]
  %285 = icmp slt i32 %276, 0
  br i1 %285, label %288, label %286

; <label>:286                                     ; preds = %284
  %287 = icmp sgt i32 %276, 255
  %.2.i42 = select i1 %287, i32 255, i32 %276
  br label %288

; <label>:288                                     ; preds = %286, %284
  %b.0.i43 = phi i32 [ 0, %284 ], [ %.2.i42, %286 ]
  %289 = getelementptr inbounds [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %i.556, i32 0, i32 %i.03.i37
  store i32 %r.0.i39, i32* %289, align 4, !tbaa !6
  %290 = getelementptr inbounds [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %i.556, i32 1, i32 %i.03.i37
  store i32 %g.0.i41, i32* %290, align 4, !tbaa !6
  %291 = getelementptr inbounds [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %i.556, i32 2, i32 %i.03.i37
  store i32 %b.0.i43, i32* %291, align 4, !tbaa !6
  %292 = add nsw i32 %i.03.i37, 1
  %exitcond.i44 = icmp eq i32 %292, 64
  br i1 %exitcond.i44, label %YuvToRgb.exit45, label %255

YuvToRgb.exit45:                                  ; preds = %288
  %293 = add nsw i32 %i.556, 1
  %exitcond62 = icmp eq i32 %293, 4
  br i1 %exitcond62, label %.preheader48, label %.preheader47

.loopexit.loopexit:                               ; preds = %139
  br label %.loopexit

.loopexit.loopexit67:                             ; preds = %.preheader48
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit67, %.loopexit.loopexit, %143, %18
  call void @llvm.lifetime.end(i64 1536, i8* %2) #3
  call void @llvm.lifetime.end(i64 768, i8* %1) #3
  ret void

; <label>:294                                     ; preds = %294, %decode_block.exit
  %i.02.i.i.1 = phi i32 [ 0, %decode_block.exit ], [ %300, %294 ]
  %.01.i.i.1 = phi i32* [ %23, %decode_block.exit ], [ %299, %294 ]
  %295 = getelementptr inbounds [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i.1
  %296 = load i32* %295, align 4, !tbaa !6
  %297 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff, i32 0, i32 1, i32 %296
  %298 = load i32* %297, align 4, !tbaa !6
  %299 = getelementptr inbounds i32* %.01.i.i.1, i32 1
  store i32 %298, i32* %.01.i.i.1, align 4, !tbaa !6
  %300 = add nsw i32 %i.02.i.i.1, 1
  %exitcond.i.i.1 = icmp eq i32 %300, 64
  br i1 %exitcond.i.i.1, label %IZigzagMatrix.exit.i.1, label %294

IZigzagMatrix.exit.i.1:                           ; preds = %294
  %301 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 1), align 1, !tbaa !5
  %302 = sext i8 %301 to i32
  %303 = getelementptr inbounds [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %302, i32 64
  br label %304

; <label>:304                                     ; preds = %304, %IZigzagMatrix.exit.i.1
  %mptr.02.i.i.1 = phi i32* [ %23, %IZigzagMatrix.exit.i.1 ], [ %309, %304 ]
  %.01.i2.i.1 = phi i32* [ %303, %IZigzagMatrix.exit.i.1 ], [ %308, %304 ]
  %305 = load i32* %mptr.02.i.i.1, align 4, !tbaa !6
  %306 = load i32* %.01.i2.i.1, align 4, !tbaa !6
  %307 = mul nsw i32 %306, %305
  store i32 %307, i32* %mptr.02.i.i.1, align 4, !tbaa !6
  %308 = getelementptr inbounds i32* %.01.i2.i.1, i32 1
  %309 = getelementptr inbounds i32* %mptr.02.i.i.1, i32 1
  %310 = icmp ult i32* %309, %24
  br i1 %310, label %304, label %IQuantize.exit.i.1

IQuantize.exit.i.1:                               ; preds = %304
  %311 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 1, i32 0
  call void @ChenIDct(i32* %23, i32* %311) #4
  %312 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 1, i32 64
  br label %313

; <label>:313                                     ; preds = %313, %IQuantize.exit.i.1
  %mptr.01.i1.i.1 = phi i32* [ %311, %IQuantize.exit.i.1 ], [ %316, %313 ]
  %314 = load i32* %mptr.01.i1.i.1, align 4, !tbaa !6
  %315 = add nsw i32 %314, 128
  store i32 %315, i32* %mptr.01.i1.i.1, align 4, !tbaa !6
  %316 = getelementptr inbounds i32* %mptr.01.i1.i.1, i32 1
  %317 = icmp ult i32* %316, %312
  br i1 %317, label %313, label %PostshiftIDctMatrix.exit.i.1.preheader

PostshiftIDctMatrix.exit.i.1.preheader:           ; preds = %313
  br label %PostshiftIDctMatrix.exit.i.1

PostshiftIDctMatrix.exit.i.1:                     ; preds = %324, %PostshiftIDctMatrix.exit.i.1.preheader
  %mptr.01.i.i.1 = phi i32* [ %325, %324 ], [ %311, %PostshiftIDctMatrix.exit.i.1.preheader ]
  %318 = load i32* %mptr.01.i.i.1, align 4, !tbaa !6
  %319 = icmp slt i32 %318, 0
  br i1 %319, label %323, label %320

; <label>:320                                     ; preds = %PostshiftIDctMatrix.exit.i.1
  %321 = icmp sgt i32 %318, 255
  br i1 %321, label %322, label %324

; <label>:322                                     ; preds = %320
  store i32 255, i32* %mptr.01.i.i.1, align 4, !tbaa !6
  br label %324

; <label>:323                                     ; preds = %PostshiftIDctMatrix.exit.i.1
  store i32 0, i32* %mptr.01.i.i.1, align 4, !tbaa !6
  br label %324

; <label>:324                                     ; preds = %323, %322, %320
  %325 = getelementptr inbounds i32* %mptr.01.i.i.1, i32 1
  %326 = icmp ult i32* %325, %312
  br i1 %326, label %PostshiftIDctMatrix.exit.i.1, label %decode_block.exit.1

decode_block.exit.1:                              ; preds = %324
  call void @llvm.lifetime.end(i64 256, i8* %22) #3
  call void @llvm.lifetime.start(i64 256, i8* %22) #3
  call void @DecodeHuffMCU(i32* %6, i32 2) #4
  br label %327

; <label>:327                                     ; preds = %327, %decode_block.exit.1
  %i.02.i.i.2 = phi i32 [ 0, %decode_block.exit.1 ], [ %333, %327 ]
  %.01.i.i.2 = phi i32* [ %23, %decode_block.exit.1 ], [ %332, %327 ]
  %328 = getelementptr inbounds [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i.i.2
  %329 = load i32* %328, align 4, !tbaa !6
  %330 = getelementptr inbounds [3 x [64 x i32]]* %HuffBuff, i32 0, i32 2, i32 %329
  %331 = load i32* %330, align 4, !tbaa !6
  %332 = getelementptr inbounds i32* %.01.i.i.2, i32 1
  store i32 %331, i32* %.01.i.i.2, align 4, !tbaa !6
  %333 = add nsw i32 %i.02.i.i.2, 1
  %exitcond.i.i.2 = icmp eq i32 %333, 64
  br i1 %exitcond.i.i.2, label %IZigzagMatrix.exit.i.2, label %327

IZigzagMatrix.exit.i.2:                           ; preds = %327
  %334 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 2), align 1, !tbaa !5
  %335 = sext i8 %334 to i32
  %336 = getelementptr inbounds [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %335, i32 64
  br label %337

; <label>:337                                     ; preds = %337, %IZigzagMatrix.exit.i.2
  %mptr.02.i.i.2 = phi i32* [ %23, %IZigzagMatrix.exit.i.2 ], [ %342, %337 ]
  %.01.i2.i.2 = phi i32* [ %336, %IZigzagMatrix.exit.i.2 ], [ %341, %337 ]
  %338 = load i32* %mptr.02.i.i.2, align 4, !tbaa !6
  %339 = load i32* %.01.i2.i.2, align 4, !tbaa !6
  %340 = mul nsw i32 %339, %338
  store i32 %340, i32* %mptr.02.i.i.2, align 4, !tbaa !6
  %341 = getelementptr inbounds i32* %.01.i2.i.2, i32 1
  %342 = getelementptr inbounds i32* %mptr.02.i.i.2, i32 1
  %343 = icmp ult i32* %342, %24
  br i1 %343, label %337, label %IQuantize.exit.i.2

IQuantize.exit.i.2:                               ; preds = %337
  %344 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 2, i32 0
  call void @ChenIDct(i32* %23, i32* %344) #4
  %345 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff, i32 0, i32 2, i32 64
  br label %346

; <label>:346                                     ; preds = %346, %IQuantize.exit.i.2
  %mptr.01.i1.i.2 = phi i32* [ %344, %IQuantize.exit.i.2 ], [ %349, %346 ]
  %347 = load i32* %mptr.01.i1.i.2, align 4, !tbaa !6
  %348 = add nsw i32 %347, 128
  store i32 %348, i32* %mptr.01.i1.i.2, align 4, !tbaa !6
  %349 = getelementptr inbounds i32* %mptr.01.i1.i.2, i32 1
  %350 = icmp ult i32* %349, %345
  br i1 %350, label %346, label %PostshiftIDctMatrix.exit.i.2.preheader

PostshiftIDctMatrix.exit.i.2.preheader:           ; preds = %346
  br label %PostshiftIDctMatrix.exit.i.2

PostshiftIDctMatrix.exit.i.2:                     ; preds = %357, %PostshiftIDctMatrix.exit.i.2.preheader
  %mptr.01.i.i.2 = phi i32* [ %358, %357 ], [ %344, %PostshiftIDctMatrix.exit.i.2.preheader ]
  %351 = load i32* %mptr.01.i.i.2, align 4, !tbaa !6
  %352 = icmp slt i32 %351, 0
  br i1 %352, label %356, label %353

; <label>:353                                     ; preds = %PostshiftIDctMatrix.exit.i.2
  %354 = icmp sgt i32 %351, 255
  br i1 %354, label %355, label %357

; <label>:355                                     ; preds = %353
  store i32 255, i32* %mptr.01.i.i.2, align 4, !tbaa !6
  br label %357

; <label>:356                                     ; preds = %PostshiftIDctMatrix.exit.i.2
  store i32 0, i32* %mptr.01.i.i.2, align 4, !tbaa !6
  br label %357

; <label>:357                                     ; preds = %356, %355, %353
  %358 = getelementptr inbounds i32* %mptr.01.i.i.2, i32 1
  %359 = icmp ult i32* %358, %345
  br i1 %359, label %PostshiftIDctMatrix.exit.i.2, label %decode_block.exit.2.preheader

decode_block.exit.2.preheader:                    ; preds = %357
  br label %decode_block.exit.2
}

; Function Attrs: nounwind
define i32 @buf_getb() #0 {
  %1 = load i32* @read_position, align 4, !tbaa !6
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %3, label %._crit_edge

._crit_edge:                                      ; preds = %0
  %.pre = load i32* @current_read_byte, align 4, !tbaa !6
  br label %15

; <label>:3                                       ; preds = %0
  %4 = load i8** @CurHuffReadBuf, align 4, !tbaa !1
  %5 = getelementptr inbounds i8* %4, i32 1
  store i8* %5, i8** @CurHuffReadBuf, align 4, !tbaa !1
  %6 = load i8* %4, align 1, !tbaa !5
  %7 = icmp eq i8 %6, -1
  br i1 %7, label %8, label %14

; <label>:8                                       ; preds = %3
  %9 = getelementptr inbounds i8* %4, i32 2
  store i8* %9, i8** @CurHuffReadBuf, align 4, !tbaa !1
  %10 = load i8* %5, align 1, !tbaa !5
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %pgetc.exit, label %12

; <label>:12                                      ; preds = %8
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str30, i32 0, i32 0)) #4
  br label %14

; <label>:14                                      ; preds = %12, %3
  %temp.0.in.i = phi i8 [ %10, %12 ], [ %6, %3 ]
  %temp.0.i = zext i8 %temp.0.in.i to i32
  br label %pgetc.exit

pgetc.exit:                                       ; preds = %14, %8
  %.0.i = phi i32 [ %temp.0.i, %14 ], [ 255, %8 ]
  store i32 %.0.i, i32* @current_read_byte, align 4, !tbaa !6
  store i32 7, i32* @read_position, align 4, !tbaa !6
  br label %15

; <label>:15                                      ; preds = %pgetc.exit, %._crit_edge
  %16 = phi i32 [ %1, %._crit_edge ], [ 7, %pgetc.exit ]
  %17 = phi i32 [ %.pre, %._crit_edge ], [ %.0.i, %pgetc.exit ]
  %18 = add nsw i32 %16, -1
  store i32 %18, i32* @read_position, align 4, !tbaa !6
  %19 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %16
  %20 = load i32* %19, align 4, !tbaa !6
  %21 = and i32 %20, %17
  %not. = icmp ne i32 %21, 0
  %. = zext i1 %not. to i32
  ret i32 %.
}

; Function Attrs: nounwind
define i32 @buf_getv(i32 %n) #0 {
  %1 = add nsw i32 %n, -1
  %2 = load i32* @read_position, align 4, !tbaa !6
  %3 = sub nsw i32 %1, %2
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %.pre = load i32* @current_read_byte, align 4, !tbaa !6
  br label %5

; <label>:5                                       ; preds = %pgetc.exit4, %.lr.ph
  %6 = phi i32 [ %.pre, %.lr.ph ], [ %43, %pgetc.exit4 ]
  %7 = phi i32 [ %2, %.lr.ph ], [ %44, %pgetc.exit4 ]
  %p.06 = phi i32 [ %3, %.lr.ph ], [ %45, %pgetc.exit4 ]
  %8 = icmp sgt i32 %7, 23
  br i1 %8, label %9, label %29

; <label>:9                                       ; preds = %5
  %p.06.lcssa = phi i32 [ %p.06, %5 ]
  %.lcssa = phi i32 [ %6, %5 ]
  %10 = shl i32 %.lcssa, %p.06.lcssa
  %11 = load i8** @CurHuffReadBuf, align 4, !tbaa !1
  %12 = getelementptr inbounds i8* %11, i32 1
  store i8* %12, i8** @CurHuffReadBuf, align 4, !tbaa !1
  %13 = load i8* %11, align 1, !tbaa !5
  %14 = icmp eq i8 %13, -1
  br i1 %14, label %15, label %21

; <label>:15                                      ; preds = %9
  %16 = getelementptr inbounds i8* %11, i32 2
  store i8* %16, i8** @CurHuffReadBuf, align 4, !tbaa !1
  %17 = load i8* %12, align 1, !tbaa !5
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %pgetc.exit, label %19

; <label>:19                                      ; preds = %15
  %20 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str30, i32 0, i32 0)) #4
  br label %21

; <label>:21                                      ; preds = %19, %9
  %temp.0.in.i = phi i8 [ %17, %19 ], [ %13, %9 ]
  %temp.0.i = zext i8 %temp.0.in.i to i32
  br label %pgetc.exit

pgetc.exit:                                       ; preds = %21, %15
  %.0.i = phi i32 [ %temp.0.i, %21 ], [ 255, %15 ]
  store i32 %.0.i, i32* @current_read_byte, align 4, !tbaa !6
  %22 = sub nsw i32 8, %p.06.lcssa
  %23 = lshr i32 %.0.i, %22
  %24 = or i32 %23, %10
  %25 = sub nsw i32 7, %p.06.lcssa
  store i32 %25, i32* @read_position, align 4, !tbaa !6
  %26 = getelementptr inbounds [32 x i32]* @lmask, i32 0, i32 %1
  %27 = load i32* %26, align 4, !tbaa !6
  %28 = and i32 %24, %27
  br label %61

; <label>:29                                      ; preds = %5
  %30 = shl i32 %6, 8
  %31 = load i8** @CurHuffReadBuf, align 4, !tbaa !1
  %32 = getelementptr inbounds i8* %31, i32 1
  store i8* %32, i8** @CurHuffReadBuf, align 4, !tbaa !1
  %33 = load i8* %31, align 1, !tbaa !5
  %34 = icmp eq i8 %33, -1
  br i1 %34, label %35, label %41

; <label>:35                                      ; preds = %29
  %36 = getelementptr inbounds i8* %31, i32 2
  store i8* %36, i8** @CurHuffReadBuf, align 4, !tbaa !1
  %37 = load i8* %32, align 1, !tbaa !5
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %pgetc.exit4, label %39

; <label>:39                                      ; preds = %35
  %40 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str30, i32 0, i32 0)) #4
  %.pre10.pre = load i32* @read_position, align 4, !tbaa !6
  br label %41

; <label>:41                                      ; preds = %39, %29
  %.pre10 = phi i32 [ %.pre10.pre, %39 ], [ %7, %29 ]
  %temp.0.in.i1 = phi i8 [ %37, %39 ], [ %33, %29 ]
  %temp.0.i2 = zext i8 %temp.0.in.i1 to i32
  br label %pgetc.exit4

pgetc.exit4:                                      ; preds = %41, %35
  %42 = phi i32 [ %.pre10, %41 ], [ %7, %35 ]
  %.0.i3 = phi i32 [ %temp.0.i2, %41 ], [ 255, %35 ]
  %43 = or i32 %.0.i3, %30
  store i32 %43, i32* @current_read_byte, align 4, !tbaa !6
  %44 = add nsw i32 %42, 8
  store i32 %44, i32* @read_position, align 4, !tbaa !6
  %45 = add nsw i32 %p.06, -8
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %5, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %pgetc.exit4
  %.lcssa17 = phi i32 [ %45, %pgetc.exit4 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  %p.0.lcssa = phi i32 [ %3, %0 ], [ %.lcssa17, %._crit_edge.loopexit ]
  %47 = icmp eq i32 %p.0.lcssa, 0
  br i1 %47, label %48, label %53

; <label>:48                                      ; preds = %._crit_edge
  store i32 -1, i32* @read_position, align 4, !tbaa !6
  %49 = load i32* @current_read_byte, align 4, !tbaa !6
  %50 = getelementptr inbounds [32 x i32]* @lmask, i32 0, i32 %1
  %51 = load i32* %50, align 4, !tbaa !6
  %52 = and i32 %51, %49
  br label %61

; <label>:53                                      ; preds = %._crit_edge
  %54 = sub nsw i32 0, %p.0.lcssa
  %55 = xor i32 %p.0.lcssa, -1
  store i32 %55, i32* @read_position, align 4, !tbaa !6
  %56 = load i32* @current_read_byte, align 4, !tbaa !6
  %57 = lshr i32 %56, %54
  %58 = getelementptr inbounds [32 x i32]* @lmask, i32 0, i32 %1
  %59 = load i32* %58, align 4, !tbaa !6
  %60 = and i32 %57, %59
  br label %61

; <label>:61                                      ; preds = %53, %48, %pgetc.exit
  %.0 = phi i32 [ %28, %pgetc.exit ], [ %60, %53 ], [ %52, %48 ]
  ret i32 %.0
}

; Function Attrs: nounwind
define i32 @huff_make_dhuff_tb(i32* nocapture readonly %p_xhtbl_bits, i32* nocapture %p_dhtbl_maxcode, i32* nocapture %p_dhtbl_mincode, i32* nocapture %p_dhtbl_valptr) #0 {
  %huffsize = alloca [257 x i32], align 4
  %huffcode = alloca [257 x i32], align 4
  %1 = bitcast [257 x i32]* %huffsize to i8*
  call void @llvm.lifetime.start(i64 1028, i8* %1) #3
  %2 = bitcast [257 x i32]* %huffcode to i8*
  call void @llvm.lifetime.start(i64 1028, i8* %2) #3
  br label %.preheader3

.preheader3:                                      ; preds = %13, %0
  %i.015 = phi i32 [ 1, %0 ], [ %14, %13 ]
  %p.014 = phi i32 [ 0, %0 ], [ %p.1.lcssa, %13 ]
  %3 = getelementptr inbounds i32* %p_xhtbl_bits, i32 %i.015
  %4 = load i32* %3, align 4, !tbaa !6
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %13, label %.lr.ph

.lr.ph:                                           ; preds = %.preheader3
  %6 = icmp sgt i32 %4, 1
  %smax = select i1 %6, i32 %4, i32 1
  br label %7

; <label>:7                                       ; preds = %7, %.lr.ph
  %j.013 = phi i32 [ 1, %.lr.ph ], [ %10, %7 ]
  %p.112 = phi i32 [ %p.014, %.lr.ph ], [ %8, %7 ]
  %8 = add nsw i32 %p.112, 1
  %9 = getelementptr inbounds [257 x i32]* %huffsize, i32 0, i32 %p.112
  store i32 %i.015, i32* %9, align 4, !tbaa !6
  %10 = add nsw i32 %j.013, 1
  %11 = icmp slt i32 %j.013, %4
  br i1 %11, label %7, label %._crit_edge

._crit_edge:                                      ; preds = %7
  %12 = add i32 %p.014, %smax
  br label %13

; <label>:13                                      ; preds = %._crit_edge, %.preheader3
  %p.1.lcssa = phi i32 [ %12, %._crit_edge ], [ %p.014, %.preheader3 ]
  %14 = add nsw i32 %i.015, 1
  %exitcond22 = icmp eq i32 %14, 17
  br i1 %exitcond22, label %15, label %.preheader3

; <label>:15                                      ; preds = %13
  %p.1.lcssa.lcssa = phi i32 [ %p.1.lcssa, %13 ]
  %16 = getelementptr inbounds [257 x i32]* %huffsize, i32 0, i32 %p.1.lcssa.lcssa
  store i32 0, i32* %16, align 4, !tbaa !6
  %17 = getelementptr inbounds [257 x i32]* %huffsize, i32 0, i32 0
  %18 = load i32* %17, align 4, !tbaa !6
  br label %.outer

.outer.loopexit:                                  ; preds = %.preheader2
  %.lcssa28 = phi i32 [ %28, %.preheader2 ]
  br label %.outer

.outer:                                           ; preds = %.outer.loopexit, %15
  %p.2.ph = phi i32 [ 0, %15 ], [ %.lcssa26, %.outer.loopexit ]
  %code.0.ph = phi i32 [ 0, %15 ], [ %.lcssa28, %.outer.loopexit ]
  %size.0.ph = phi i32 [ %18, %15 ], [ %.lcssa27, %.outer.loopexit ]
  br label %19

; <label>:19                                      ; preds = %19, %.outer
  %p.2 = phi i32 [ %21, %19 ], [ %p.2.ph, %.outer ]
  %code.0 = phi i32 [ %20, %19 ], [ %code.0.ph, %.outer ]
  %20 = add nsw i32 %code.0, 1
  %21 = add nsw i32 %p.2, 1
  %22 = getelementptr inbounds [257 x i32]* %huffcode, i32 0, i32 %p.2
  store i32 %code.0, i32* %22, align 4, !tbaa !6
  %23 = getelementptr inbounds [257 x i32]* %huffsize, i32 0, i32 %21
  %24 = load i32* %23, align 4, !tbaa !6
  %25 = icmp eq i32 %24, %size.0.ph
  %26 = icmp slt i32 %21, 257
  %or.cond = and i1 %25, %26
  br i1 %or.cond, label %19, label %.critedge

.critedge:                                        ; preds = %19
  %.lcssa27 = phi i32 [ %24, %19 ]
  %.lcssa26 = phi i32 [ %21, %19 ]
  %.lcssa = phi i32 [ %20, %19 ]
  %27 = icmp eq i32 %.lcssa27, 0
  br i1 %27, label %.preheader.preheader, label %.preheader2.preheader

.preheader2.preheader:                            ; preds = %.critedge
  br label %.preheader2

.preheader.preheader:                             ; preds = %.critedge
  br label %.preheader

.preheader2:                                      ; preds = %.preheader2, %.preheader2.preheader
  %code.1 = phi i32 [ %28, %.preheader2 ], [ %.lcssa, %.preheader2.preheader ]
  %size.1 = phi i32 [ %29, %.preheader2 ], [ %size.0.ph, %.preheader2.preheader ]
  %28 = shl i32 %code.1, 1
  %29 = add nsw i32 %size.1, 1
  %30 = icmp eq i32 %.lcssa27, %29
  br i1 %30, label %.outer.loopexit, label %.preheader2

.preheader:                                       ; preds = %45, %.preheader.preheader
  %p_dhtbl_ml.011 = phi i32 [ %p_dhtbl_ml.1, %45 ], [ 1, %.preheader.preheader ]
  %l.010 = phi i32 [ %47, %45 ], [ 1, %.preheader.preheader ]
  %p.39 = phi i32 [ %p.4, %45 ], [ 0, %.preheader.preheader ]
  %31 = getelementptr inbounds i32* %p_xhtbl_bits, i32 %l.010
  %32 = load i32* %31, align 4, !tbaa !6
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %45, label %34

; <label>:34                                      ; preds = %.preheader
  %35 = getelementptr inbounds i32* %p_dhtbl_valptr, i32 %l.010
  store i32 %p.39, i32* %35, align 4, !tbaa !6
  %36 = getelementptr inbounds [257 x i32]* %huffcode, i32 0, i32 %p.39
  %37 = load i32* %36, align 4, !tbaa !6
  %38 = getelementptr inbounds i32* %p_dhtbl_mincode, i32 %l.010
  store i32 %37, i32* %38, align 4, !tbaa !6
  %39 = load i32* %31, align 4, !tbaa !6
  %40 = add i32 %p.39, -1
  %41 = add i32 %40, %39
  %42 = getelementptr inbounds [257 x i32]* %huffcode, i32 0, i32 %41
  %43 = load i32* %42, align 4, !tbaa !6
  %44 = add i32 %39, %p.39
  br label %45

; <label>:45                                      ; preds = %34, %.preheader
  %.sink = phi i32 [ %43, %34 ], [ -1, %.preheader ]
  %p.4 = phi i32 [ %44, %34 ], [ %p.39, %.preheader ]
  %p_dhtbl_ml.1 = phi i32 [ %l.010, %34 ], [ %p_dhtbl_ml.011, %.preheader ]
  %46 = getelementptr inbounds i32* %p_dhtbl_maxcode, i32 %l.010
  store i32 %.sink, i32* %46, align 4
  %47 = add nsw i32 %l.010, 1
  %exitcond = icmp eq i32 %47, 17
  br i1 %exitcond, label %48, label %.preheader

; <label>:48                                      ; preds = %45
  %p_dhtbl_ml.1.lcssa = phi i32 [ %p_dhtbl_ml.1, %45 ]
  %49 = getelementptr inbounds i32* %p_dhtbl_maxcode, i32 %p_dhtbl_ml.1.lcssa
  %50 = load i32* %49, align 4, !tbaa !6
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %49, align 4, !tbaa !6
  call void @llvm.lifetime.end(i64 1028, i8* %2) #3
  call void @llvm.lifetime.end(i64 1028, i8* %1) #3
  ret i32 %p_dhtbl_ml.1.lcssa
}

; Function Attrs: nounwind
define i32 @DecodeHuffman(i32* nocapture readonly %Xhuff_huffval, i32 %Dhuff_ml, i32* nocapture readonly %Dhuff_maxcode, i32* nocapture readonly %Dhuff_mincode, i32* nocapture readonly %Dhuff_valptr) #0 {
  %1 = load i32* @read_position, align 4, !tbaa !6
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %3, label %._crit_edge.i

._crit_edge.i:                                    ; preds = %0
  %.pre.i = load i32* @current_read_byte, align 4, !tbaa !6
  br label %buf_getb.exit

; <label>:3                                       ; preds = %0
  %4 = load i8** @CurHuffReadBuf, align 4, !tbaa !1
  %5 = getelementptr inbounds i8* %4, i32 1
  store i8* %5, i8** @CurHuffReadBuf, align 4, !tbaa !1
  %6 = load i8* %4, align 1, !tbaa !5
  %7 = icmp eq i8 %6, -1
  br i1 %7, label %8, label %14

; <label>:8                                       ; preds = %3
  %9 = getelementptr inbounds i8* %4, i32 2
  store i8* %9, i8** @CurHuffReadBuf, align 4, !tbaa !1
  %10 = load i8* %5, align 1, !tbaa !5
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %pgetc.exit.i, label %12

; <label>:12                                      ; preds = %8
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str30, i32 0, i32 0)) #4
  br label %14

; <label>:14                                      ; preds = %12, %3
  %temp.0.in.i.i = phi i8 [ %10, %12 ], [ %6, %3 ]
  %temp.0.i.i = zext i8 %temp.0.in.i.i to i32
  br label %pgetc.exit.i

pgetc.exit.i:                                     ; preds = %14, %8
  %.0.i.i = phi i32 [ %temp.0.i.i, %14 ], [ 255, %8 ]
  store i32 %.0.i.i, i32* @current_read_byte, align 4, !tbaa !6
  store i32 7, i32* @read_position, align 4, !tbaa !6
  br label %buf_getb.exit

buf_getb.exit:                                    ; preds = %pgetc.exit.i, %._crit_edge.i
  %15 = phi i32 [ %1, %._crit_edge.i ], [ 7, %pgetc.exit.i ]
  %16 = phi i32 [ %.pre.i, %._crit_edge.i ], [ %.0.i.i, %pgetc.exit.i ]
  %17 = add nsw i32 %15, -1
  store i32 %17, i32* @read_position, align 4, !tbaa !6
  %18 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %15
  %19 = load i32* %18, align 4, !tbaa !6
  %20 = and i32 %19, %16
  %not..i = icmp ne i32 %20, 0
  %..i = zext i1 %not..i to i32
  %21 = getelementptr inbounds i32* %Dhuff_maxcode, i32 1
  %22 = load i32* %21, align 4, !tbaa !6
  %23 = icmp sgt i32 %..i, %22
  br i1 %23, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %buf_getb.exit
  br label %.lr.ph

.lr.ph:                                           ; preds = %buf_getb.exit9, %.lr.ph.preheader
  %.pre.i1 = phi i32 [ %40, %buf_getb.exit9 ], [ %16, %.lr.ph.preheader ]
  %24 = phi i32 [ %41, %buf_getb.exit9 ], [ %17, %.lr.ph.preheader ]
  %code.011 = phi i32 [ %45, %buf_getb.exit9 ], [ %..i, %.lr.ph.preheader ]
  %l.010 = phi i32 [ %46, %buf_getb.exit9 ], [ 1, %.lr.ph.preheader ]
  %25 = shl i32 %code.011, 1
  %26 = icmp slt i32 %24, 0
  br i1 %26, label %27, label %buf_getb.exit9

; <label>:27                                      ; preds = %.lr.ph
  %28 = load i8** @CurHuffReadBuf, align 4, !tbaa !1
  %29 = getelementptr inbounds i8* %28, i32 1
  store i8* %29, i8** @CurHuffReadBuf, align 4, !tbaa !1
  %30 = load i8* %28, align 1, !tbaa !5
  %31 = icmp eq i8 %30, -1
  br i1 %31, label %32, label %38

; <label>:32                                      ; preds = %27
  %33 = getelementptr inbounds i8* %28, i32 2
  store i8* %33, i8** @CurHuffReadBuf, align 4, !tbaa !1
  %34 = load i8* %29, align 1, !tbaa !5
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %pgetc.exit.i6, label %36

; <label>:36                                      ; preds = %32
  %37 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str30, i32 0, i32 0)) #4
  br label %38

; <label>:38                                      ; preds = %36, %27
  %temp.0.in.i.i3 = phi i8 [ %34, %36 ], [ %30, %27 ]
  %temp.0.i.i4 = zext i8 %temp.0.in.i.i3 to i32
  br label %pgetc.exit.i6

pgetc.exit.i6:                                    ; preds = %38, %32
  %.0.i.i5 = phi i32 [ %temp.0.i.i4, %38 ], [ 255, %32 ]
  store i32 %.0.i.i5, i32* @current_read_byte, align 4, !tbaa !6
  store i32 7, i32* @read_position, align 4, !tbaa !6
  br label %buf_getb.exit9

buf_getb.exit9:                                   ; preds = %pgetc.exit.i6, %.lr.ph
  %39 = phi i32 [ 7, %pgetc.exit.i6 ], [ %24, %.lr.ph ]
  %40 = phi i32 [ %.0.i.i5, %pgetc.exit.i6 ], [ %.pre.i1, %.lr.ph ]
  %41 = add nsw i32 %39, -1
  store i32 %41, i32* @read_position, align 4, !tbaa !6
  %42 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %39
  %43 = load i32* %42, align 4, !tbaa !6
  %44 = and i32 %43, %40
  %not..i7 = icmp ne i32 %44, 0
  %..i8 = zext i1 %not..i7 to i32
  %45 = or i32 %..i8, %25
  %46 = add nsw i32 %l.010, 1
  %47 = getelementptr inbounds i32* %Dhuff_maxcode, i32 %46
  %48 = load i32* %47, align 4, !tbaa !6
  %49 = icmp sgt i32 %45, %48
  br i1 %49, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %buf_getb.exit9
  %.lcssa16 = phi i32 [ %46, %buf_getb.exit9 ]
  %.lcssa = phi i32 [ %45, %buf_getb.exit9 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %buf_getb.exit
  %code.0.lcssa = phi i32 [ %..i, %buf_getb.exit ], [ %.lcssa, %._crit_edge.loopexit ]
  %l.0.lcssa = phi i32 [ 1, %buf_getb.exit ], [ %.lcssa16, %._crit_edge.loopexit ]
  %50 = getelementptr inbounds i32* %Dhuff_maxcode, i32 %Dhuff_ml
  %51 = load i32* %50, align 4, !tbaa !6
  %52 = icmp slt i32 %code.0.lcssa, %51
  br i1 %52, label %53, label %64

; <label>:53                                      ; preds = %._crit_edge
  %54 = load i32* @main_result, align 4, !tbaa !6
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* @main_result, align 4, !tbaa !6
  %56 = getelementptr inbounds i32* %Dhuff_valptr, i32 %l.0.lcssa
  %57 = load i32* %56, align 4, !tbaa !6
  %58 = add nsw i32 %57, %code.0.lcssa
  %59 = getelementptr inbounds i32* %Dhuff_mincode, i32 %l.0.lcssa
  %60 = load i32* %59, align 4, !tbaa !6
  %61 = sub i32 %58, %60
  %62 = getelementptr inbounds i32* %Xhuff_huffval, i32 %61
  %63 = load i32* %62, align 4, !tbaa !6
  ret i32 %63

; <label>:64                                      ; preds = %._crit_edge
  %65 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([20 x i8]* @.str26, i32 0, i32 0)) #4
  tail call void @exit(i32 0) #5
  unreachable
}

; Function Attrs: nounwind
define void @jpeg_init_decompress() #0 {
  %1 = load i16* @p_jinfo_image_height, align 2, !tbaa !8
  %2 = sext i16 %1 to i32
  %3 = add nsw i32 %2, -1
  %4 = sdiv i32 %3, 8
  %5 = add nsw i32 %4, 1
  store i32 %5, i32* @p_jinfo_MCUHeight, align 4, !tbaa !6
  %6 = load i16* @p_jinfo_image_width, align 2, !tbaa !8
  %7 = sext i16 %6 to i32
  %8 = add nsw i32 %7, -1
  %9 = sdiv i32 %8, 8
  %10 = add nsw i32 %9, 1
  store i32 %10, i32* @p_jinfo_MCUWidth, align 4, !tbaa !6
  %11 = mul nsw i32 %5, %10
  store i32 %11, i32* @p_jinfo_NumMCU, align 4, !tbaa !6
  %12 = tail call i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #6
  store i32 %12, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !6
  %13 = tail call i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #6
  store i32 %13, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !6
  %14 = tail call i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #6
  store i32 %14, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !6
  %15 = tail call i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #6
  store i32 %15, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !6
  ret void
}

; Function Attrs: nounwind
define void @jpeg_read(i8* %read_buf) #0 {
  tail call void @read_markers(i8* %read_buf) #6
  %1 = load i16* @p_jinfo_image_height, align 2, !tbaa !8
  %2 = sext i16 %1 to i32
  %3 = add nsw i32 %2, -1
  %4 = sdiv i32 %3, 8
  %5 = add nsw i32 %4, 1
  store i32 %5, i32* @p_jinfo_MCUHeight, align 4, !tbaa !6
  %6 = load i16* @p_jinfo_image_width, align 2, !tbaa !8
  %7 = sext i16 %6 to i32
  %8 = add nsw i32 %7, -1
  %9 = sdiv i32 %8, 8
  %10 = add nsw i32 %9, 1
  store i32 %10, i32* @p_jinfo_MCUWidth, align 4, !tbaa !6
  %11 = mul nsw i32 %10, %5
  store i32 %11, i32* @p_jinfo_NumMCU, align 4, !tbaa !6
  %12 = tail call i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #4
  store i32 %12, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !6
  %13 = tail call i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #4
  store i32 %13, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !6
  %14 = tail call i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #4
  store i32 %14, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !6
  %15 = tail call i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #4
  store i32 %15, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !6
  tail call void @decode_start(i32* @OutData_image_width, i32* @OutData_image_height, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0)) #6
  ret void
}

; Function Attrs: nounwind
define i32 @jpeg2bmp_main() #0 {
  br label %1

; <label>:1                                       ; preds = %1, %0
  %i.04 = phi i32 [ 0, %0 ], [ %5, %1 ]
  %c.03 = phi i8* [ getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 0), %0 ], [ %4, %1 ]
  %2 = getelementptr inbounds [5207 x i8]* @hana_jpg, i32 0, i32 %i.04
  %3 = load i8* %2, align 1, !tbaa !5
  %4 = getelementptr inbounds i8* %c.03, i32 1
  store i8 %3, i8* %c.03, align 1, !tbaa !5
  %5 = add nsw i32 %i.04, 1
  %exitcond8 = icmp eq i32 %5, 5207
  br i1 %exitcond8, label %.preheader, label %1

.preheader:                                       ; preds = %1
  tail call void @read_markers(i8* getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 0)) #4
  %6 = load i16* @p_jinfo_image_height, align 2, !tbaa !8
  %7 = sext i16 %6 to i32
  %8 = add nsw i32 %7, -1
  %9 = sdiv i32 %8, 8
  %10 = add nsw i32 %9, 1
  store i32 %10, i32* @p_jinfo_MCUHeight, align 4, !tbaa !6
  %11 = load i16* @p_jinfo_image_width, align 2, !tbaa !8
  %12 = sext i16 %11 to i32
  %13 = add nsw i32 %12, -1
  %14 = sdiv i32 %13, 8
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* @p_jinfo_MCUWidth, align 4, !tbaa !6
  %16 = mul nsw i32 %15, %10
  store i32 %16, i32* @p_jinfo_NumMCU, align 4, !tbaa !6
  %17 = tail call i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #4
  store i32 %17, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !6
  %18 = tail call i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #4
  store i32 %18, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !6
  %19 = tail call i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) #4
  store i32 %19, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !6
  %20 = tail call i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) #4
  store i32 %20, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !6
  tail call void @decode_start(i32* @OutData_image_width, i32* @OutData_image_height, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0)) #4
  br label %21

; <label>:21                                      ; preds = %30, %.preheader
  %j.01 = phi i32 [ 0, %.preheader ], [ %31, %30 ]
  %22 = getelementptr inbounds [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 %j.01
  %23 = load i8* %22, align 1, !tbaa !5
  %24 = getelementptr inbounds [3 x [5310 x i8]]* @hana_bmp, i32 0, i32 0, i32 %j.01
  %25 = load i8* %24, align 1, !tbaa !5
  %26 = icmp eq i8 %23, %25
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %21
  %28 = load i32* @main_result, align 4, !tbaa !6
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* @main_result, align 4, !tbaa !6
  br label %30

; <label>:30                                      ; preds = %27, %21
  %31 = add nsw i32 %j.01, 1
  %exitcond = icmp eq i32 %31, 5310
  br i1 %exitcond, label %.preheader.16.preheader, label %21

.preheader.16.preheader:                          ; preds = %30
  br label %.preheader.16

; <label>:32                                      ; preds = %63
  %33 = load i32* @main_result, align 4, !tbaa !6
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* @main_result, align 4, !tbaa !6
  br label %35

; <label>:35                                      ; preds = %63, %32
  %36 = load i32* @OutData_image_height, align 4, !tbaa !6
  %37 = load i32* @out_length, align 4, !tbaa !6
  %38 = icmp eq i32 %36, %37
  br i1 %38, label %39, label %42

; <label>:39                                      ; preds = %35
  %40 = load i32* @main_result, align 4, !tbaa !6
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* @main_result, align 4, !tbaa !6
  br label %42

; <label>:42                                      ; preds = %39, %35
  ret i32 0

.preheader.16:                                    ; preds = %51, %.preheader.16.preheader
  %j.01.1 = phi i32 [ %52, %51 ], [ 0, %.preheader.16.preheader ]
  %43 = getelementptr inbounds [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 %j.01.1
  %44 = load i8* %43, align 1, !tbaa !5
  %45 = getelementptr inbounds [3 x [5310 x i8]]* @hana_bmp, i32 0, i32 1, i32 %j.01.1
  %46 = load i8* %45, align 1, !tbaa !5
  %47 = icmp eq i8 %44, %46
  br i1 %47, label %48, label %51

; <label>:48                                      ; preds = %.preheader.16
  %49 = load i32* @main_result, align 4, !tbaa !6
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* @main_result, align 4, !tbaa !6
  br label %51

; <label>:51                                      ; preds = %48, %.preheader.16
  %52 = add nsw i32 %j.01.1, 1
  %exitcond.1 = icmp eq i32 %52, 5310
  br i1 %exitcond.1, label %.preheader.27.preheader, label %.preheader.16

.preheader.27.preheader:                          ; preds = %51
  br label %.preheader.27

.preheader.27:                                    ; preds = %61, %.preheader.27.preheader
  %j.01.2 = phi i32 [ %62, %61 ], [ 0, %.preheader.27.preheader ]
  %53 = getelementptr inbounds [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 %j.01.2
  %54 = load i8* %53, align 1, !tbaa !5
  %55 = getelementptr inbounds [3 x [5310 x i8]]* @hana_bmp, i32 0, i32 2, i32 %j.01.2
  %56 = load i8* %55, align 1, !tbaa !5
  %57 = icmp eq i8 %54, %56
  br i1 %57, label %58, label %61

; <label>:58                                      ; preds = %.preheader.27
  %59 = load i32* @main_result, align 4, !tbaa !6
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* @main_result, align 4, !tbaa !6
  br label %61

; <label>:61                                      ; preds = %58, %.preheader.27
  %62 = add nsw i32 %j.01.2, 1
  %exitcond.2 = icmp eq i32 %62, 5310
  br i1 %exitcond.2, label %63, label %.preheader.27

; <label>:63                                      ; preds = %61
  %64 = load i32* @OutData_image_width, align 4, !tbaa !6
  %65 = load i32* @out_width, align 4, !tbaa !6
  %66 = icmp eq i32 %64, %65
  br i1 %66, label %32, label %35
}

; Function Attrs: nounwind
define i32 @main() #0 {
  store i32 0, i32* @main_result, align 4, !tbaa !6
  %1 = tail call i32 @jpeg2bmp_main() #6
  %2 = load i32* @main_result, align 4, !tbaa !6
  %3 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str27, i32 0, i32 0), i32 %2) #4
  %4 = load i32* @main_result, align 4, !tbaa !6
  %5 = icmp eq i32 %4, 21745
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %0
  %7 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str28, i32 0, i32 0)) #4
  br label %10

; <label>:8                                       ; preds = %0
  %9 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str29, i32 0, i32 0)) #4
  br label %10

; <label>:10                                      ; preds = %8, %6
  %11 = load i32* @main_result, align 4, !tbaa !6
  ret i32 %11
}

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nobuiltin nounwind }
attributes #5 = { nobuiltin noreturn nounwind }
attributes #6 = { nobuiltin }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5.0 (tags/RELEASE_350/final)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !3, metadata !3, i64 0}
!6 = metadata !{metadata !7, metadata !7, i64 0}
!7 = metadata !{metadata !"int", metadata !3, i64 0}
!8 = metadata !{metadata !9, metadata !9, i64 0}
!9 = metadata !{metadata !"short", metadata !3, i64 0}
