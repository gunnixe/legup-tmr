//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Wed Nov 16 11:06:04 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Nov 19 13:01:32 2016
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 23
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @compressed = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
`define TAG_g_compressed `MEMORY_CONTROLLER_TAG_SIZE'd23
`define TAG_g_compressed_a {`TAG_g_compressed, 23'd0}
// @dec_del_bph = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_bph `MEMORY_CONTROLLER_TAG_SIZE'd18
`define TAG_g_dec_del_bph_a {`TAG_g_dec_del_bph, 23'd0}
// @dec_del_bpl = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_bpl `MEMORY_CONTROLLER_TAG_SIZE'd16
`define TAG_g_dec_del_bpl_a {`TAG_g_dec_del_bpl, 23'd0}
// @dec_del_dhx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_dhx `MEMORY_CONTROLLER_TAG_SIZE'd19
`define TAG_g_dec_del_dhx_a {`TAG_g_dec_del_dhx, 23'd0}
// @dec_del_dltx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_dltx `MEMORY_CONTROLLER_TAG_SIZE'd17
`define TAG_g_dec_del_dltx_a {`TAG_g_dec_del_dltx, 23'd0}
// @decis_levl = internal unnamed_addr constant [30 x i32] [i32 280, i32 576, i32 880, i32 1200, i32 1520, i32 1864, i32 2208, i32 2584, i32 2960, i32 3376, i32 3784, i32 4240, i32 4696, i32 5200, i32 57...
`define TAG_g_decis_levl `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_g_decis_levl_a {`TAG_g_decis_levl, 23'd0}
// @delay_bph = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_bph `MEMORY_CONTROLLER_TAG_SIZE'd14
`define TAG_g_delay_bph_a {`TAG_g_delay_bph, 23'd0}
// @delay_bpl = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_bpl `MEMORY_CONTROLLER_TAG_SIZE'd12
`define TAG_g_delay_bpl_a {`TAG_g_delay_bpl, 23'd0}
// @delay_dhx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_dhx `MEMORY_CONTROLLER_TAG_SIZE'd15
`define TAG_g_delay_dhx_a {`TAG_g_delay_dhx, 23'd0}
// @delay_dltx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_dltx `MEMORY_CONTROLLER_TAG_SIZE'd13
`define TAG_g_delay_dltx_a {`TAG_g_delay_dltx, 23'd0}
// @ilb_table = internal unnamed_addr constant [32 x i32] [i32 2048, i32 2093, i32 2139, i32 2186, i32 2233, i32 2282, i32 2332, i32 2383, i32 2435, i32 2489, i32 2543, i32 2599, i32 2656, i32 2714, i32 ...
`define TAG_g_ilb_table `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_ilb_table_a {`TAG_g_ilb_table, 23'd0}
// @qq2_code2_table = internal unnamed_addr constant [4 x i32] [i32 -7408, i32 -1616, i32 7408, i32 1616], align 4
`define TAG_g_qq2_code2_table `MEMORY_CONTROLLER_TAG_SIZE'd9
`define TAG_g_qq2_code2_table_a {`TAG_g_qq2_code2_table, 23'd0}
// @qq4_code4_table = internal unnamed_addr constant [16 x i32] [i32 0, i32 -20456, i32 -12896, i32 -8968, i32 -6288, i32 -4240, i32 -2584, i32 -1200, i32 20456, i32 12896, i32 8968, i32 6288, i32 4240, ...
`define TAG_g_qq4_code4_table `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_qq4_code4_table_a {`TAG_g_qq4_code4_table, 23'd0}
// @qq6_code6_table = internal unnamed_addr constant [64 x i32] [i32 -136, i32 -136, i32 -136, i32 -136, i32 -24808, i32 -21904, i32 -19008, i32 -16704, i32 -14984, i32 -13512, i32 -12280, i32 -11192, i3...
`define TAG_g_qq6_code6_table `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_qq6_code6_table_a {`TAG_g_qq6_code6_table, 23'd0}
// @quant26bt_neg = internal unnamed_addr constant [31 x i32] [i32 63, i32 62, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 ...
`define TAG_g_quant26bt_neg `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_g_quant26bt_neg_a {`TAG_g_quant26bt_neg, 23'd0}
// @quant26bt_pos = internal unnamed_addr constant [31 x i32] [i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 ...
`define TAG_g_quant26bt_pos `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_g_quant26bt_pos_a {`TAG_g_quant26bt_pos, 23'd0}
// @result = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
`define TAG_g_result `MEMORY_CONTROLLER_TAG_SIZE'd24
`define TAG_g_result_a {`TAG_g_result, 23'd0}
// @test_compressed = internal unnamed_addr constant [100 x i32] [i32 253, i32 222, i32 119, i32 186, i32 244, i32 146, i32 32, i32 160, i32 236, i32 237, i32 238, i32 240, i32 241, i32 241, i32 242, i32...
`define TAG_g_test_compressed `MEMORY_CONTROLLER_TAG_SIZE'd21
`define TAG_g_test_compressed_a {`TAG_g_test_compressed, 23'd0}
// @test_data = internal unnamed_addr constant [100 x i32] [i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 67,...
`define TAG_g_test_data `MEMORY_CONTROLLER_TAG_SIZE'd20
`define TAG_g_test_data_a {`TAG_g_test_data, 23'd0}
// @test_result = internal unnamed_addr constant [100 x i32] [i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 -2, i32 -1, i32 -2, i32 0, ...
`define TAG_g_test_result `MEMORY_CONTROLLER_TAG_SIZE'd22
`define TAG_g_test_result_a {`TAG_g_test_result, 23'd0}
// @tqmf = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
`define TAG_g_tqmf `MEMORY_CONTROLLER_TAG_SIZE'd11
`define TAG_g_tqmf_a {`TAG_g_tqmf, 23'd0}
// @wh_code_table = internal unnamed_addr constant [4 x i32] [i32 798, i32 -214, i32 798, i32 -214], align 4
`define TAG_g_wh_code_table `MEMORY_CONTROLLER_TAG_SIZE'd10
`define TAG_g_wh_code_table_a {`TAG_g_wh_code_table, 23'd0}
// @wl_code_table = internal unnamed_addr constant [16 x i32] [i32 -60, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32...
`define TAG_g_wl_code_table `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_wl_code_table_a {`TAG_g_wl_code_table, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [3:0] qq4_code4_table_address_a;
reg [3:0] qq4_code4_table_address_b;
reg qq4_code4_table_write_enable_a;
reg qq4_code4_table_write_enable_b;
reg [31:0] qq4_code4_table_in_a;
reg [31:0] qq4_code4_table_in_b;
wire [31:0] qq4_code4_table_out_a;
wire [31:0] qq4_code4_table_out_b;

// @qq4_code4_table = internal unnamed_addr constant [16 x i32] [i32 0, i32 -20456, i32 -12896, i32 -8968, i32 -6288, i32 -4240, i32 -2584, i32 -1200, i32 20456, i32 12896, i32 8968, i32 6288, i32 4240, ...
rom_dual_port qq4_code4_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq4_code4_table_address_a ),
	.address_b( qq4_code4_table_address_b ),
	.q_a( qq4_code4_table_out_a ),
	.q_b( qq4_code4_table_out_b )
);
defparam qq4_code4_table.width_a = 32;
defparam qq4_code4_table.width_b = 32;
defparam qq4_code4_table.widthad_a = 4;
defparam qq4_code4_table.widthad_b = 4;
defparam qq4_code4_table.numwords_a = 16;
defparam qq4_code4_table.numwords_b = 16;
defparam qq4_code4_table.latency = ram_latency;
defparam qq4_code4_table.init_file = "qq4_code4_table.mif";

reg [5:0] qq6_code6_table_address_a;
reg [5:0] qq6_code6_table_address_b;
reg qq6_code6_table_write_enable_a;
reg qq6_code6_table_write_enable_b;
reg [31:0] qq6_code6_table_in_a;
reg [31:0] qq6_code6_table_in_b;
wire [31:0] qq6_code6_table_out_a;
wire [31:0] qq6_code6_table_out_b;

// @qq6_code6_table = internal unnamed_addr constant [64 x i32] [i32 -136, i32 -136, i32 -136, i32 -136, i32 -24808, i32 -21904, i32 -19008, i32 -16704, i32 -14984, i32 -13512, i32 -12280, i32 -11192, i3...
rom_dual_port qq6_code6_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq6_code6_table_address_a ),
	.address_b( qq6_code6_table_address_b ),
	.q_a( qq6_code6_table_out_a ),
	.q_b( qq6_code6_table_out_b )
);
defparam qq6_code6_table.width_a = 32;
defparam qq6_code6_table.width_b = 32;
defparam qq6_code6_table.widthad_a = 6;
defparam qq6_code6_table.widthad_b = 6;
defparam qq6_code6_table.numwords_a = 64;
defparam qq6_code6_table.numwords_b = 64;
defparam qq6_code6_table.latency = ram_latency;
defparam qq6_code6_table.init_file = "qq6_code6_table.mif";

reg [3:0] wl_code_table_address_a;
reg [3:0] wl_code_table_address_b;
reg wl_code_table_write_enable_a;
reg wl_code_table_write_enable_b;
reg [31:0] wl_code_table_in_a;
reg [31:0] wl_code_table_in_b;
wire [31:0] wl_code_table_out_a;
wire [31:0] wl_code_table_out_b;

// @wl_code_table = internal unnamed_addr constant [16 x i32] [i32 -60, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32...
rom_dual_port wl_code_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( wl_code_table_address_a ),
	.address_b( wl_code_table_address_b ),
	.q_a( wl_code_table_out_a ),
	.q_b( wl_code_table_out_b )
);
defparam wl_code_table.width_a = 32;
defparam wl_code_table.width_b = 32;
defparam wl_code_table.widthad_a = 4;
defparam wl_code_table.widthad_b = 4;
defparam wl_code_table.numwords_a = 16;
defparam wl_code_table.numwords_b = 16;
defparam wl_code_table.latency = ram_latency;
defparam wl_code_table.init_file = "wl_code_table.mif";

reg [4:0] ilb_table_address_a;
reg [4:0] ilb_table_address_b;
reg ilb_table_write_enable_a;
reg ilb_table_write_enable_b;
reg [31:0] ilb_table_in_a;
reg [31:0] ilb_table_in_b;
wire [31:0] ilb_table_out_a;
wire [31:0] ilb_table_out_b;

// @ilb_table = internal unnamed_addr constant [32 x i32] [i32 2048, i32 2093, i32 2139, i32 2186, i32 2233, i32 2282, i32 2332, i32 2383, i32 2435, i32 2489, i32 2543, i32 2599, i32 2656, i32 2714, i32 ...
rom_dual_port ilb_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ilb_table_address_a ),
	.address_b( ilb_table_address_b ),
	.q_a( ilb_table_out_a ),
	.q_b( ilb_table_out_b )
);
defparam ilb_table.width_a = 32;
defparam ilb_table.width_b = 32;
defparam ilb_table.widthad_a = 5;
defparam ilb_table.widthad_b = 5;
defparam ilb_table.numwords_a = 32;
defparam ilb_table.numwords_b = 32;
defparam ilb_table.latency = ram_latency;
defparam ilb_table.init_file = "ilb_table.mif";

reg [4:0] decis_levl_address_a;
reg [4:0] decis_levl_address_b;
reg decis_levl_write_enable_a;
reg decis_levl_write_enable_b;
reg [31:0] decis_levl_in_a;
reg [31:0] decis_levl_in_b;
wire [31:0] decis_levl_out_a;
wire [31:0] decis_levl_out_b;

// @decis_levl = internal unnamed_addr constant [30 x i32] [i32 280, i32 576, i32 880, i32 1200, i32 1520, i32 1864, i32 2208, i32 2584, i32 2960, i32 3376, i32 3784, i32 4240, i32 4696, i32 5200, i32 57...
rom_dual_port decis_levl (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( decis_levl_address_a ),
	.address_b( decis_levl_address_b ),
	.q_a( decis_levl_out_a ),
	.q_b( decis_levl_out_b )
);
defparam decis_levl.width_a = 32;
defparam decis_levl.width_b = 32;
defparam decis_levl.widthad_a = 5;
defparam decis_levl.widthad_b = 5;
defparam decis_levl.numwords_a = 30;
defparam decis_levl.numwords_b = 30;
defparam decis_levl.latency = ram_latency;
defparam decis_levl.init_file = "decis_levl.mif";

reg [4:0] quant26bt_pos_address_a;
reg [4:0] quant26bt_pos_address_b;
reg quant26bt_pos_write_enable_a;
reg quant26bt_pos_write_enable_b;
reg [31:0] quant26bt_pos_in_a;
reg [31:0] quant26bt_pos_in_b;
wire [31:0] quant26bt_pos_out_a;
wire [31:0] quant26bt_pos_out_b;

// @quant26bt_pos = internal unnamed_addr constant [31 x i32] [i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 ...
rom_dual_port quant26bt_pos (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( quant26bt_pos_address_a ),
	.address_b( quant26bt_pos_address_b ),
	.q_a( quant26bt_pos_out_a ),
	.q_b( quant26bt_pos_out_b )
);
defparam quant26bt_pos.width_a = 32;
defparam quant26bt_pos.width_b = 32;
defparam quant26bt_pos.widthad_a = 5;
defparam quant26bt_pos.widthad_b = 5;
defparam quant26bt_pos.numwords_a = 31;
defparam quant26bt_pos.numwords_b = 31;
defparam quant26bt_pos.latency = ram_latency;
defparam quant26bt_pos.init_file = "quant26bt_pos.mif";

reg [4:0] quant26bt_neg_address_a;
reg [4:0] quant26bt_neg_address_b;
reg quant26bt_neg_write_enable_a;
reg quant26bt_neg_write_enable_b;
reg [31:0] quant26bt_neg_in_a;
reg [31:0] quant26bt_neg_in_b;
wire [31:0] quant26bt_neg_out_a;
wire [31:0] quant26bt_neg_out_b;

// @quant26bt_neg = internal unnamed_addr constant [31 x i32] [i32 63, i32 62, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 ...
rom_dual_port quant26bt_neg (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( quant26bt_neg_address_a ),
	.address_b( quant26bt_neg_address_b ),
	.q_a( quant26bt_neg_out_a ),
	.q_b( quant26bt_neg_out_b )
);
defparam quant26bt_neg.width_a = 32;
defparam quant26bt_neg.width_b = 32;
defparam quant26bt_neg.widthad_a = 5;
defparam quant26bt_neg.widthad_b = 5;
defparam quant26bt_neg.numwords_a = 31;
defparam quant26bt_neg.numwords_b = 31;
defparam quant26bt_neg.latency = ram_latency;
defparam quant26bt_neg.init_file = "quant26bt_neg.mif";

reg [1:0] qq2_code2_table_address_a;
reg [1:0] qq2_code2_table_address_b;
reg qq2_code2_table_write_enable_a;
reg qq2_code2_table_write_enable_b;
reg [31:0] qq2_code2_table_in_a;
reg [31:0] qq2_code2_table_in_b;
wire [31:0] qq2_code2_table_out_a;
wire [31:0] qq2_code2_table_out_b;

// @qq2_code2_table = internal unnamed_addr constant [4 x i32] [i32 -7408, i32 -1616, i32 7408, i32 1616], align 4
rom_dual_port qq2_code2_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq2_code2_table_address_a ),
	.address_b( qq2_code2_table_address_b ),
	.q_a( qq2_code2_table_out_a ),
	.q_b( qq2_code2_table_out_b )
);
defparam qq2_code2_table.width_a = 32;
defparam qq2_code2_table.width_b = 32;
defparam qq2_code2_table.widthad_a = 2;
defparam qq2_code2_table.widthad_b = 2;
defparam qq2_code2_table.numwords_a = 4;
defparam qq2_code2_table.numwords_b = 4;
defparam qq2_code2_table.latency = ram_latency;
defparam qq2_code2_table.init_file = "qq2_code2_table.mif";

reg [1:0] wh_code_table_address_a;
reg [1:0] wh_code_table_address_b;
reg wh_code_table_write_enable_a;
reg wh_code_table_write_enable_b;
reg [31:0] wh_code_table_in_a;
reg [31:0] wh_code_table_in_b;
wire [31:0] wh_code_table_out_a;
wire [31:0] wh_code_table_out_b;

// @wh_code_table = internal unnamed_addr constant [4 x i32] [i32 798, i32 -214, i32 798, i32 -214], align 4
rom_dual_port wh_code_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( wh_code_table_address_a ),
	.address_b( wh_code_table_address_b ),
	.q_a( wh_code_table_out_a ),
	.q_b( wh_code_table_out_b )
);
defparam wh_code_table.width_a = 32;
defparam wh_code_table.width_b = 32;
defparam wh_code_table.widthad_a = 2;
defparam wh_code_table.widthad_b = 2;
defparam wh_code_table.numwords_a = 4;
defparam wh_code_table.numwords_b = 4;
defparam wh_code_table.latency = ram_latency;
defparam wh_code_table.init_file = "wh_code_table.mif";

reg [4:0] tqmf_address_a;
reg [4:0] tqmf_address_b;
reg tqmf_write_enable_a;
reg tqmf_write_enable_b;
reg [31:0] tqmf_in_a;
reg [31:0] tqmf_in_b;
wire [31:0] tqmf_out_a;
wire [31:0] tqmf_out_b;

// @tqmf = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
ram_dual_port tqmf (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( tqmf_address_a ),
	.address_b( tqmf_address_b ),
	.wren_a( tqmf_write_enable_a ),
	.wren_b( tqmf_write_enable_b ),
	.data_a( tqmf_in_a ),
	.data_b( tqmf_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( tqmf_out_a ),
	.q_b( tqmf_out_b )
);
defparam tqmf.width_a = 32;
defparam tqmf.width_b = 32;
defparam tqmf.widthad_a = 5;
defparam tqmf.widthad_b = 5;
defparam tqmf.width_be_a = 1;
defparam tqmf.width_be_b = 1;
defparam tqmf.numwords_a = 24;
defparam tqmf.numwords_b = 24;
defparam tqmf.latency = ram_latency;
defparam tqmf.init_file = "tqmf.mif";

reg [2:0] delay_bpl_address_a;
reg [2:0] delay_bpl_address_b;
reg delay_bpl_write_enable_a;
reg delay_bpl_write_enable_b;
reg [31:0] delay_bpl_in_a;
reg [31:0] delay_bpl_in_b;
wire [31:0] delay_bpl_out_a;
wire [31:0] delay_bpl_out_b;

// @delay_bpl = internal global [6 x i32] zeroinitializer, align 4
ram_dual_port delay_bpl (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( delay_bpl_address_a ),
	.address_b( delay_bpl_address_b ),
	.wren_a( delay_bpl_write_enable_a ),
	.wren_b( delay_bpl_write_enable_b ),
	.data_a( delay_bpl_in_a ),
	.data_b( delay_bpl_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( delay_bpl_out_a ),
	.q_b( delay_bpl_out_b )
);
defparam delay_bpl.width_a = 32;
defparam delay_bpl.width_b = 32;
defparam delay_bpl.widthad_a = 3;
defparam delay_bpl.widthad_b = 3;
defparam delay_bpl.width_be_a = 1;
defparam delay_bpl.width_be_b = 1;
defparam delay_bpl.numwords_a = 6;
defparam delay_bpl.numwords_b = 6;
defparam delay_bpl.latency = ram_latency;
defparam delay_bpl.init_file = "delay_bpl.mif";

reg [2:0] delay_dltx_address_a;
reg [2:0] delay_dltx_address_b;
reg delay_dltx_write_enable_a;
reg delay_dltx_write_enable_b;
reg [31:0] delay_dltx_in_a;
reg [31:0] delay_dltx_in_b;
wire [31:0] delay_dltx_out_a;
wire [31:0] delay_dltx_out_b;

// @delay_dltx = internal global [6 x i32] zeroinitializer, align 4
ram_dual_port delay_dltx (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( delay_dltx_address_a ),
	.address_b( delay_dltx_address_b ),
	.wren_a( delay_dltx_write_enable_a ),
	.wren_b( delay_dltx_write_enable_b ),
	.data_a( delay_dltx_in_a ),
	.data_b( delay_dltx_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( delay_dltx_out_a ),
	.q_b( delay_dltx_out_b )
);
defparam delay_dltx.width_a = 32;
defparam delay_dltx.width_b = 32;
defparam delay_dltx.widthad_a = 3;
defparam delay_dltx.widthad_b = 3;
defparam delay_dltx.width_be_a = 1;
defparam delay_dltx.width_be_b = 1;
defparam delay_dltx.numwords_a = 6;
defparam delay_dltx.numwords_b = 6;
defparam delay_dltx.latency = ram_latency;
defparam delay_dltx.init_file = "delay_dltx.mif";

reg [2:0] delay_bph_address_a;
reg [2:0] delay_bph_address_b;
reg delay_bph_write_enable_a;
reg delay_bph_write_enable_b;
reg [31:0] delay_bph_in_a;
reg [31:0] delay_bph_in_b;
wire [31:0] delay_bph_out_a;
wire [31:0] delay_bph_out_b;

// @delay_bph = internal global [6 x i32] zeroinitializer, align 4
ram_dual_port delay_bph (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( delay_bph_address_a ),
	.address_b( delay_bph_address_b ),
	.wren_a( delay_bph_write_enable_a ),
	.wren_b( delay_bph_write_enable_b ),
	.data_a( delay_bph_in_a ),
	.data_b( delay_bph_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( delay_bph_out_a ),
	.q_b( delay_bph_out_b )
);
defparam delay_bph.width_a = 32;
defparam delay_bph.width_b = 32;
defparam delay_bph.widthad_a = 3;
defparam delay_bph.widthad_b = 3;
defparam delay_bph.width_be_a = 1;
defparam delay_bph.width_be_b = 1;
defparam delay_bph.numwords_a = 6;
defparam delay_bph.numwords_b = 6;
defparam delay_bph.latency = ram_latency;
defparam delay_bph.init_file = "delay_bph.mif";

reg [2:0] delay_dhx_address_a;
reg [2:0] delay_dhx_address_b;
reg delay_dhx_write_enable_a;
reg delay_dhx_write_enable_b;
reg [31:0] delay_dhx_in_a;
reg [31:0] delay_dhx_in_b;
wire [31:0] delay_dhx_out_a;
wire [31:0] delay_dhx_out_b;

// @delay_dhx = internal global [6 x i32] zeroinitializer, align 4
ram_dual_port delay_dhx (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( delay_dhx_address_a ),
	.address_b( delay_dhx_address_b ),
	.wren_a( delay_dhx_write_enable_a ),
	.wren_b( delay_dhx_write_enable_b ),
	.data_a( delay_dhx_in_a ),
	.data_b( delay_dhx_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( delay_dhx_out_a ),
	.q_b( delay_dhx_out_b )
);
defparam delay_dhx.width_a = 32;
defparam delay_dhx.width_b = 32;
defparam delay_dhx.widthad_a = 3;
defparam delay_dhx.widthad_b = 3;
defparam delay_dhx.width_be_a = 1;
defparam delay_dhx.width_be_b = 1;
defparam delay_dhx.numwords_a = 6;
defparam delay_dhx.numwords_b = 6;
defparam delay_dhx.latency = ram_latency;
defparam delay_dhx.init_file = "delay_dhx.mif";

reg [2:0] dec_del_bpl_address_a;
reg [2:0] dec_del_bpl_address_b;
reg dec_del_bpl_write_enable_a;
reg dec_del_bpl_write_enable_b;
reg [31:0] dec_del_bpl_in_a;
reg [31:0] dec_del_bpl_in_b;
wire [31:0] dec_del_bpl_out_a;
wire [31:0] dec_del_bpl_out_b;

// @dec_del_bpl = internal global [6 x i32] zeroinitializer, align 4
ram_dual_port dec_del_bpl (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dec_del_bpl_address_a ),
	.address_b( dec_del_bpl_address_b ),
	.wren_a( dec_del_bpl_write_enable_a ),
	.wren_b( dec_del_bpl_write_enable_b ),
	.data_a( dec_del_bpl_in_a ),
	.data_b( dec_del_bpl_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dec_del_bpl_out_a ),
	.q_b( dec_del_bpl_out_b )
);
defparam dec_del_bpl.width_a = 32;
defparam dec_del_bpl.width_b = 32;
defparam dec_del_bpl.widthad_a = 3;
defparam dec_del_bpl.widthad_b = 3;
defparam dec_del_bpl.width_be_a = 1;
defparam dec_del_bpl.width_be_b = 1;
defparam dec_del_bpl.numwords_a = 6;
defparam dec_del_bpl.numwords_b = 6;
defparam dec_del_bpl.latency = ram_latency;
defparam dec_del_bpl.init_file = "dec_del_bpl.mif";

reg [2:0] dec_del_dltx_address_a;
reg [2:0] dec_del_dltx_address_b;
reg dec_del_dltx_write_enable_a;
reg dec_del_dltx_write_enable_b;
reg [31:0] dec_del_dltx_in_a;
reg [31:0] dec_del_dltx_in_b;
wire [31:0] dec_del_dltx_out_a;
wire [31:0] dec_del_dltx_out_b;

// @dec_del_dltx = internal global [6 x i32] zeroinitializer, align 4
ram_dual_port dec_del_dltx (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dec_del_dltx_address_a ),
	.address_b( dec_del_dltx_address_b ),
	.wren_a( dec_del_dltx_write_enable_a ),
	.wren_b( dec_del_dltx_write_enable_b ),
	.data_a( dec_del_dltx_in_a ),
	.data_b( dec_del_dltx_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dec_del_dltx_out_a ),
	.q_b( dec_del_dltx_out_b )
);
defparam dec_del_dltx.width_a = 32;
defparam dec_del_dltx.width_b = 32;
defparam dec_del_dltx.widthad_a = 3;
defparam dec_del_dltx.widthad_b = 3;
defparam dec_del_dltx.width_be_a = 1;
defparam dec_del_dltx.width_be_b = 1;
defparam dec_del_dltx.numwords_a = 6;
defparam dec_del_dltx.numwords_b = 6;
defparam dec_del_dltx.latency = ram_latency;
defparam dec_del_dltx.init_file = "dec_del_dltx.mif";

reg [2:0] dec_del_bph_address_a;
reg [2:0] dec_del_bph_address_b;
reg dec_del_bph_write_enable_a;
reg dec_del_bph_write_enable_b;
reg [31:0] dec_del_bph_in_a;
reg [31:0] dec_del_bph_in_b;
wire [31:0] dec_del_bph_out_a;
wire [31:0] dec_del_bph_out_b;

// @dec_del_bph = internal global [6 x i32] zeroinitializer, align 4
ram_dual_port dec_del_bph (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dec_del_bph_address_a ),
	.address_b( dec_del_bph_address_b ),
	.wren_a( dec_del_bph_write_enable_a ),
	.wren_b( dec_del_bph_write_enable_b ),
	.data_a( dec_del_bph_in_a ),
	.data_b( dec_del_bph_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dec_del_bph_out_a ),
	.q_b( dec_del_bph_out_b )
);
defparam dec_del_bph.width_a = 32;
defparam dec_del_bph.width_b = 32;
defparam dec_del_bph.widthad_a = 3;
defparam dec_del_bph.widthad_b = 3;
defparam dec_del_bph.width_be_a = 1;
defparam dec_del_bph.width_be_b = 1;
defparam dec_del_bph.numwords_a = 6;
defparam dec_del_bph.numwords_b = 6;
defparam dec_del_bph.latency = ram_latency;
defparam dec_del_bph.init_file = "dec_del_bph.mif";

reg [2:0] dec_del_dhx_address_a;
reg [2:0] dec_del_dhx_address_b;
reg dec_del_dhx_write_enable_a;
reg dec_del_dhx_write_enable_b;
reg [31:0] dec_del_dhx_in_a;
reg [31:0] dec_del_dhx_in_b;
wire [31:0] dec_del_dhx_out_a;
wire [31:0] dec_del_dhx_out_b;

// @dec_del_dhx = internal global [6 x i32] zeroinitializer, align 4
ram_dual_port dec_del_dhx (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dec_del_dhx_address_a ),
	.address_b( dec_del_dhx_address_b ),
	.wren_a( dec_del_dhx_write_enable_a ),
	.wren_b( dec_del_dhx_write_enable_b ),
	.data_a( dec_del_dhx_in_a ),
	.data_b( dec_del_dhx_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dec_del_dhx_out_a ),
	.q_b( dec_del_dhx_out_b )
);
defparam dec_del_dhx.width_a = 32;
defparam dec_del_dhx.width_b = 32;
defparam dec_del_dhx.widthad_a = 3;
defparam dec_del_dhx.widthad_b = 3;
defparam dec_del_dhx.width_be_a = 1;
defparam dec_del_dhx.width_be_b = 1;
defparam dec_del_dhx.numwords_a = 6;
defparam dec_del_dhx.numwords_b = 6;
defparam dec_del_dhx.latency = ram_latency;
defparam dec_del_dhx.init_file = "dec_del_dhx.mif";

reg [6:0] test_data_address_a;
reg [6:0] test_data_address_b;
reg test_data_write_enable_a;
reg test_data_write_enable_b;
reg [31:0] test_data_in_a;
reg [31:0] test_data_in_b;
wire [31:0] test_data_out_a;
wire [31:0] test_data_out_b;

// @test_data = internal unnamed_addr constant [100 x i32] [i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 67,...
rom_dual_port test_data (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_data_address_a ),
	.address_b( test_data_address_b ),
	.q_a( test_data_out_a ),
	.q_b( test_data_out_b )
);
defparam test_data.width_a = 32;
defparam test_data.width_b = 32;
defparam test_data.widthad_a = 7;
defparam test_data.widthad_b = 7;
defparam test_data.numwords_a = 100;
defparam test_data.numwords_b = 100;
defparam test_data.latency = ram_latency;
defparam test_data.init_file = "test_data.mif";

reg [6:0] test_compressed_address_a;
reg [6:0] test_compressed_address_b;
reg test_compressed_write_enable_a;
reg test_compressed_write_enable_b;
reg [31:0] test_compressed_in_a;
reg [31:0] test_compressed_in_b;
wire [31:0] test_compressed_out_a;
wire [31:0] test_compressed_out_b;

// @test_compressed = internal unnamed_addr constant [100 x i32] [i32 253, i32 222, i32 119, i32 186, i32 244, i32 146, i32 32, i32 160, i32 236, i32 237, i32 238, i32 240, i32 241, i32 241, i32 242, i32...
rom_dual_port test_compressed (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_compressed_address_a ),
	.address_b( test_compressed_address_b ),
	.q_a( test_compressed_out_a ),
	.q_b( test_compressed_out_b )
);
defparam test_compressed.width_a = 32;
defparam test_compressed.width_b = 32;
defparam test_compressed.widthad_a = 7;
defparam test_compressed.widthad_b = 7;
defparam test_compressed.numwords_a = 100;
defparam test_compressed.numwords_b = 100;
defparam test_compressed.latency = ram_latency;
defparam test_compressed.init_file = "test_compressed.mif";

reg [6:0] test_result_address_a;
reg [6:0] test_result_address_b;
reg test_result_write_enable_a;
reg test_result_write_enable_b;
reg [31:0] test_result_in_a;
reg [31:0] test_result_in_b;
wire [31:0] test_result_out_a;
wire [31:0] test_result_out_b;

// @test_result = internal unnamed_addr constant [100 x i32] [i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 -2, i32 -1, i32 -2, i32 0, ...
rom_dual_port test_result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_result_address_a ),
	.address_b( test_result_address_b ),
	.q_a( test_result_out_a ),
	.q_b( test_result_out_b )
);
defparam test_result.width_a = 32;
defparam test_result.width_b = 32;
defparam test_result.widthad_a = 7;
defparam test_result.widthad_b = 7;
defparam test_result.numwords_a = 100;
defparam test_result.numwords_b = 100;
defparam test_result.latency = ram_latency;
defparam test_result.init_file = "test_result.mif";

reg [6:0] compressed_address_a;
reg [6:0] compressed_address_b;
reg compressed_write_enable_a;
reg compressed_write_enable_b;
reg [31:0] compressed_in_a;
reg [31:0] compressed_in_b;
wire [31:0] compressed_out_a;
wire [31:0] compressed_out_b;

// @compressed = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port compressed (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( compressed_address_a ),
	.address_b( compressed_address_b ),
	.wren_a( compressed_write_enable_a ),
	.wren_b( compressed_write_enable_b ),
	.data_a( compressed_in_a ),
	.data_b( compressed_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( compressed_out_a ),
	.q_b( compressed_out_b )
);
defparam compressed.width_a = 32;
defparam compressed.width_b = 32;
defparam compressed.widthad_a = 7;
defparam compressed.widthad_b = 7;
defparam compressed.width_be_a = 1;
defparam compressed.width_be_b = 1;
defparam compressed.numwords_a = 100;
defparam compressed.numwords_b = 100;
defparam compressed.latency = ram_latency;
defparam compressed.init_file = "compressed.mif";

reg [6:0] result_address_a;
reg [6:0] result_address_b;
reg result_write_enable_a;
reg result_write_enable_b;
reg [31:0] result_in_a;
reg [31:0] result_in_b;
wire [31:0] result_out_a;
wire [31:0] result_out_b;

// @result = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( result_address_a ),
	.address_b( result_address_b ),
	.wren_a( result_write_enable_a ),
	.wren_b( result_write_enable_b ),
	.data_a( result_in_a ),
	.data_b( result_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( result_out_a ),
	.q_b( result_out_b )
);
defparam result.width_a = 32;
defparam result.width_b = 32;
defparam result.widthad_a = 7;
defparam result.widthad_b = 7;
defparam result.width_be_a = 1;
defparam result.width_be_b = 1;
defparam result.numwords_a = 100;
defparam result.numwords_b = 100;
defparam result.latency = ram_latency;
defparam result.init_file = "result.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_qq4_code4_table_a;
assign select_qq4_code4_table_a = (tag_a == `TAG_g_qq4_code4_table);
reg [ram_latency:0] select_qq4_code4_table_reg_a;
wire [31:0] memory_controller_qq4_code4_table_out_a;
assign memory_controller_qq4_code4_table_out_a = {32{ select_qq4_code4_table_reg_a[ram_latency]}} & qq4_code4_table_out_a;

wire select_qq6_code6_table_a;
assign select_qq6_code6_table_a = (tag_a == `TAG_g_qq6_code6_table);
reg [ram_latency:0] select_qq6_code6_table_reg_a;
wire [31:0] memory_controller_qq6_code6_table_out_a;
assign memory_controller_qq6_code6_table_out_a = {32{ select_qq6_code6_table_reg_a[ram_latency]}} & qq6_code6_table_out_a;

wire select_wl_code_table_a;
assign select_wl_code_table_a = (tag_a == `TAG_g_wl_code_table);
reg [ram_latency:0] select_wl_code_table_reg_a;
wire [31:0] memory_controller_wl_code_table_out_a;
assign memory_controller_wl_code_table_out_a = {32{ select_wl_code_table_reg_a[ram_latency]}} & wl_code_table_out_a;

wire select_ilb_table_a;
assign select_ilb_table_a = (tag_a == `TAG_g_ilb_table);
reg [ram_latency:0] select_ilb_table_reg_a;
wire [31:0] memory_controller_ilb_table_out_a;
assign memory_controller_ilb_table_out_a = {32{ select_ilb_table_reg_a[ram_latency]}} & ilb_table_out_a;

wire select_decis_levl_a;
assign select_decis_levl_a = (tag_a == `TAG_g_decis_levl);
reg [ram_latency:0] select_decis_levl_reg_a;
wire [31:0] memory_controller_decis_levl_out_a;
assign memory_controller_decis_levl_out_a = {32{ select_decis_levl_reg_a[ram_latency]}} & decis_levl_out_a;

wire select_quant26bt_pos_a;
assign select_quant26bt_pos_a = (tag_a == `TAG_g_quant26bt_pos);
reg [ram_latency:0] select_quant26bt_pos_reg_a;
wire [31:0] memory_controller_quant26bt_pos_out_a;
assign memory_controller_quant26bt_pos_out_a = {32{ select_quant26bt_pos_reg_a[ram_latency]}} & quant26bt_pos_out_a;

wire select_quant26bt_neg_a;
assign select_quant26bt_neg_a = (tag_a == `TAG_g_quant26bt_neg);
reg [ram_latency:0] select_quant26bt_neg_reg_a;
wire [31:0] memory_controller_quant26bt_neg_out_a;
assign memory_controller_quant26bt_neg_out_a = {32{ select_quant26bt_neg_reg_a[ram_latency]}} & quant26bt_neg_out_a;

wire select_qq2_code2_table_a;
assign select_qq2_code2_table_a = (tag_a == `TAG_g_qq2_code2_table);
reg [ram_latency:0] select_qq2_code2_table_reg_a;
wire [31:0] memory_controller_qq2_code2_table_out_a;
assign memory_controller_qq2_code2_table_out_a = {32{ select_qq2_code2_table_reg_a[ram_latency]}} & qq2_code2_table_out_a;

wire select_wh_code_table_a;
assign select_wh_code_table_a = (tag_a == `TAG_g_wh_code_table);
reg [ram_latency:0] select_wh_code_table_reg_a;
wire [31:0] memory_controller_wh_code_table_out_a;
assign memory_controller_wh_code_table_out_a = {32{ select_wh_code_table_reg_a[ram_latency]}} & wh_code_table_out_a;

wire select_tqmf_a;
assign select_tqmf_a = (tag_a == `TAG_g_tqmf);
reg [ram_latency:0] select_tqmf_reg_a;
wire [31:0] memory_controller_tqmf_out_a;
assign memory_controller_tqmf_out_a = {32{ select_tqmf_reg_a[ram_latency]}} & tqmf_out_a;

wire select_delay_bpl_a;
assign select_delay_bpl_a = (tag_a == `TAG_g_delay_bpl);
reg [ram_latency:0] select_delay_bpl_reg_a;
wire [31:0] memory_controller_delay_bpl_out_a;
assign memory_controller_delay_bpl_out_a = {32{ select_delay_bpl_reg_a[ram_latency]}} & delay_bpl_out_a;

wire select_delay_dltx_a;
assign select_delay_dltx_a = (tag_a == `TAG_g_delay_dltx);
reg [ram_latency:0] select_delay_dltx_reg_a;
wire [31:0] memory_controller_delay_dltx_out_a;
assign memory_controller_delay_dltx_out_a = {32{ select_delay_dltx_reg_a[ram_latency]}} & delay_dltx_out_a;

wire select_delay_bph_a;
assign select_delay_bph_a = (tag_a == `TAG_g_delay_bph);
reg [ram_latency:0] select_delay_bph_reg_a;
wire [31:0] memory_controller_delay_bph_out_a;
assign memory_controller_delay_bph_out_a = {32{ select_delay_bph_reg_a[ram_latency]}} & delay_bph_out_a;

wire select_delay_dhx_a;
assign select_delay_dhx_a = (tag_a == `TAG_g_delay_dhx);
reg [ram_latency:0] select_delay_dhx_reg_a;
wire [31:0] memory_controller_delay_dhx_out_a;
assign memory_controller_delay_dhx_out_a = {32{ select_delay_dhx_reg_a[ram_latency]}} & delay_dhx_out_a;

wire select_dec_del_bpl_a;
assign select_dec_del_bpl_a = (tag_a == `TAG_g_dec_del_bpl);
reg [ram_latency:0] select_dec_del_bpl_reg_a;
wire [31:0] memory_controller_dec_del_bpl_out_a;
assign memory_controller_dec_del_bpl_out_a = {32{ select_dec_del_bpl_reg_a[ram_latency]}} & dec_del_bpl_out_a;

wire select_dec_del_dltx_a;
assign select_dec_del_dltx_a = (tag_a == `TAG_g_dec_del_dltx);
reg [ram_latency:0] select_dec_del_dltx_reg_a;
wire [31:0] memory_controller_dec_del_dltx_out_a;
assign memory_controller_dec_del_dltx_out_a = {32{ select_dec_del_dltx_reg_a[ram_latency]}} & dec_del_dltx_out_a;

wire select_dec_del_bph_a;
assign select_dec_del_bph_a = (tag_a == `TAG_g_dec_del_bph);
reg [ram_latency:0] select_dec_del_bph_reg_a;
wire [31:0] memory_controller_dec_del_bph_out_a;
assign memory_controller_dec_del_bph_out_a = {32{ select_dec_del_bph_reg_a[ram_latency]}} & dec_del_bph_out_a;

wire select_dec_del_dhx_a;
assign select_dec_del_dhx_a = (tag_a == `TAG_g_dec_del_dhx);
reg [ram_latency:0] select_dec_del_dhx_reg_a;
wire [31:0] memory_controller_dec_del_dhx_out_a;
assign memory_controller_dec_del_dhx_out_a = {32{ select_dec_del_dhx_reg_a[ram_latency]}} & dec_del_dhx_out_a;

wire select_test_data_a;
assign select_test_data_a = (tag_a == `TAG_g_test_data);
reg [ram_latency:0] select_test_data_reg_a;
wire [31:0] memory_controller_test_data_out_a;
assign memory_controller_test_data_out_a = {32{ select_test_data_reg_a[ram_latency]}} & test_data_out_a;

wire select_test_compressed_a;
assign select_test_compressed_a = (tag_a == `TAG_g_test_compressed);
reg [ram_latency:0] select_test_compressed_reg_a;
wire [31:0] memory_controller_test_compressed_out_a;
assign memory_controller_test_compressed_out_a = {32{ select_test_compressed_reg_a[ram_latency]}} & test_compressed_out_a;

wire select_test_result_a;
assign select_test_result_a = (tag_a == `TAG_g_test_result);
reg [ram_latency:0] select_test_result_reg_a;
wire [31:0] memory_controller_test_result_out_a;
assign memory_controller_test_result_out_a = {32{ select_test_result_reg_a[ram_latency]}} & test_result_out_a;

wire select_compressed_a;
assign select_compressed_a = (tag_a == `TAG_g_compressed);
reg [ram_latency:0] select_compressed_reg_a;
wire [31:0] memory_controller_compressed_out_a;
assign memory_controller_compressed_out_a = {32{ select_compressed_reg_a[ram_latency]}} & compressed_out_a;

wire select_result_a;
assign select_result_a = (tag_a == `TAG_g_result);
reg [ram_latency:0] select_result_reg_a;
wire [31:0] memory_controller_result_out_a;
assign memory_controller_result_out_a = {32{ select_result_reg_a[ram_latency]}} & result_out_a;

always @(*)
begin
	qq4_code4_table_address_a = memory_controller_address_a [4-1+2:2] & {4{select_qq4_code4_table_a}};
	qq4_code4_table_write_enable_a = memory_controller_write_enable_a & select_qq4_code4_table_a;
	qq4_code4_table_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	qq6_code6_table_address_a = memory_controller_address_a [6-1+2:2] & {6{select_qq6_code6_table_a}};
	qq6_code6_table_write_enable_a = memory_controller_write_enable_a & select_qq6_code6_table_a;
	qq6_code6_table_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	wl_code_table_address_a = memory_controller_address_a [4-1+2:2] & {4{select_wl_code_table_a}};
	wl_code_table_write_enable_a = memory_controller_write_enable_a & select_wl_code_table_a;
	wl_code_table_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	ilb_table_address_a = memory_controller_address_a [5-1+2:2] & {5{select_ilb_table_a}};
	ilb_table_write_enable_a = memory_controller_write_enable_a & select_ilb_table_a;
	ilb_table_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	decis_levl_address_a = memory_controller_address_a [5-1+2:2] & {5{select_decis_levl_a}};
	decis_levl_write_enable_a = memory_controller_write_enable_a & select_decis_levl_a;
	decis_levl_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	quant26bt_pos_address_a = memory_controller_address_a [5-1+2:2] & {5{select_quant26bt_pos_a}};
	quant26bt_pos_write_enable_a = memory_controller_write_enable_a & select_quant26bt_pos_a;
	quant26bt_pos_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	quant26bt_neg_address_a = memory_controller_address_a [5-1+2:2] & {5{select_quant26bt_neg_a}};
	quant26bt_neg_write_enable_a = memory_controller_write_enable_a & select_quant26bt_neg_a;
	quant26bt_neg_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	qq2_code2_table_address_a = memory_controller_address_a [2-1+2:2] & {2{select_qq2_code2_table_a}};
	qq2_code2_table_write_enable_a = memory_controller_write_enable_a & select_qq2_code2_table_a;
	qq2_code2_table_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	wh_code_table_address_a = memory_controller_address_a [2-1+2:2] & {2{select_wh_code_table_a}};
	wh_code_table_write_enable_a = memory_controller_write_enable_a & select_wh_code_table_a;
	wh_code_table_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	tqmf_address_a = memory_controller_address_a [5-1+2:2] & {5{select_tqmf_a}};
	tqmf_write_enable_a = memory_controller_write_enable_a & select_tqmf_a;
	tqmf_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	delay_bpl_address_a = memory_controller_address_a [3-1+2:2] & {3{select_delay_bpl_a}};
	delay_bpl_write_enable_a = memory_controller_write_enable_a & select_delay_bpl_a;
	delay_bpl_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	delay_dltx_address_a = memory_controller_address_a [3-1+2:2] & {3{select_delay_dltx_a}};
	delay_dltx_write_enable_a = memory_controller_write_enable_a & select_delay_dltx_a;
	delay_dltx_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	delay_bph_address_a = memory_controller_address_a [3-1+2:2] & {3{select_delay_bph_a}};
	delay_bph_write_enable_a = memory_controller_write_enable_a & select_delay_bph_a;
	delay_bph_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	delay_dhx_address_a = memory_controller_address_a [3-1+2:2] & {3{select_delay_dhx_a}};
	delay_dhx_write_enable_a = memory_controller_write_enable_a & select_delay_dhx_a;
	delay_dhx_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	dec_del_bpl_address_a = memory_controller_address_a [3-1+2:2] & {3{select_dec_del_bpl_a}};
	dec_del_bpl_write_enable_a = memory_controller_write_enable_a & select_dec_del_bpl_a;
	dec_del_bpl_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	dec_del_dltx_address_a = memory_controller_address_a [3-1+2:2] & {3{select_dec_del_dltx_a}};
	dec_del_dltx_write_enable_a = memory_controller_write_enable_a & select_dec_del_dltx_a;
	dec_del_dltx_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	dec_del_bph_address_a = memory_controller_address_a [3-1+2:2] & {3{select_dec_del_bph_a}};
	dec_del_bph_write_enable_a = memory_controller_write_enable_a & select_dec_del_bph_a;
	dec_del_bph_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	dec_del_dhx_address_a = memory_controller_address_a [3-1+2:2] & {3{select_dec_del_dhx_a}};
	dec_del_dhx_write_enable_a = memory_controller_write_enable_a & select_dec_del_dhx_a;
	dec_del_dhx_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	test_data_address_a = memory_controller_address_a [7-1+2:2] & {7{select_test_data_a}};
	test_data_write_enable_a = memory_controller_write_enable_a & select_test_data_a;
	test_data_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	test_compressed_address_a = memory_controller_address_a [7-1+2:2] & {7{select_test_compressed_a}};
	test_compressed_write_enable_a = memory_controller_write_enable_a & select_test_compressed_a;
	test_compressed_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	test_result_address_a = memory_controller_address_a [7-1+2:2] & {7{select_test_result_a}};
	test_result_write_enable_a = memory_controller_write_enable_a & select_test_result_a;
	test_result_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	compressed_address_a = memory_controller_address_a [7-1+2:2] & {7{select_compressed_a}};
	compressed_write_enable_a = memory_controller_write_enable_a & select_compressed_a;
	compressed_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	result_address_a = memory_controller_address_a [7-1+2:2] & {7{select_result_a}};
	result_write_enable_a = memory_controller_write_enable_a & select_result_a;
	result_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_qq4_code4_table_reg_a[ram_latency]}} | {2{select_qq6_code6_table_reg_a[ram_latency]}} | {2{select_wl_code_table_reg_a[ram_latency]}} | {2{select_ilb_table_reg_a[ram_latency]}} | {2{select_decis_levl_reg_a[ram_latency]}} | {2{select_quant26bt_pos_reg_a[ram_latency]}} | {2{select_quant26bt_neg_reg_a[ram_latency]}} | {2{select_qq2_code2_table_reg_a[ram_latency]}} | {2{select_wh_code_table_reg_a[ram_latency]}} | {2{select_tqmf_reg_a[ram_latency]}} | {2{select_delay_bpl_reg_a[ram_latency]}} | {2{select_delay_dltx_reg_a[ram_latency]}} | {2{select_delay_bph_reg_a[ram_latency]}} | {2{select_delay_dhx_reg_a[ram_latency]}} | {2{select_dec_del_bpl_reg_a[ram_latency]}} | {2{select_dec_del_dltx_reg_a[ram_latency]}} | {2{select_dec_del_bph_reg_a[ram_latency]}} | {2{select_dec_del_dhx_reg_a[ram_latency]}} | {2{select_test_data_reg_a[ram_latency]}} | {2{select_test_compressed_reg_a[ram_latency]}} | {2{select_test_result_reg_a[ram_latency]}} | {2{select_compressed_reg_a[ram_latency]}} | {2{select_result_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_qq4_code4_table_out_a | memory_controller_qq6_code6_table_out_a | memory_controller_wl_code_table_out_a | memory_controller_ilb_table_out_a | memory_controller_decis_levl_out_a | memory_controller_quant26bt_pos_out_a | memory_controller_quant26bt_neg_out_a | memory_controller_qq2_code2_table_out_a | memory_controller_wh_code_table_out_a | memory_controller_tqmf_out_a | memory_controller_delay_bpl_out_a | memory_controller_delay_dltx_out_a | memory_controller_delay_bph_out_a | memory_controller_delay_dhx_out_a | memory_controller_dec_del_bpl_out_a | memory_controller_dec_del_dltx_out_a | memory_controller_dec_del_bph_out_a | memory_controller_dec_del_dhx_out_a | memory_controller_test_data_out_a | memory_controller_test_compressed_out_a | memory_controller_test_result_out_a | memory_controller_compressed_out_a | memory_controller_result_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_qq4_code4_table_reg_a[j+1] <= select_qq4_code4_table_reg_a[j];
select_qq6_code6_table_reg_a[j+1] <= select_qq6_code6_table_reg_a[j];
select_wl_code_table_reg_a[j+1] <= select_wl_code_table_reg_a[j];
select_ilb_table_reg_a[j+1] <= select_ilb_table_reg_a[j];
select_decis_levl_reg_a[j+1] <= select_decis_levl_reg_a[j];
select_quant26bt_pos_reg_a[j+1] <= select_quant26bt_pos_reg_a[j];
select_quant26bt_neg_reg_a[j+1] <= select_quant26bt_neg_reg_a[j];
select_qq2_code2_table_reg_a[j+1] <= select_qq2_code2_table_reg_a[j];
select_wh_code_table_reg_a[j+1] <= select_wh_code_table_reg_a[j];
select_tqmf_reg_a[j+1] <= select_tqmf_reg_a[j];
select_delay_bpl_reg_a[j+1] <= select_delay_bpl_reg_a[j];
select_delay_dltx_reg_a[j+1] <= select_delay_dltx_reg_a[j];
select_delay_bph_reg_a[j+1] <= select_delay_bph_reg_a[j];
select_delay_dhx_reg_a[j+1] <= select_delay_dhx_reg_a[j];
select_dec_del_bpl_reg_a[j+1] <= select_dec_del_bpl_reg_a[j];
select_dec_del_dltx_reg_a[j+1] <= select_dec_del_dltx_reg_a[j];
select_dec_del_bph_reg_a[j+1] <= select_dec_del_bph_reg_a[j];
select_dec_del_dhx_reg_a[j+1] <= select_dec_del_dhx_reg_a[j];
select_test_data_reg_a[j+1] <= select_test_data_reg_a[j];
select_test_compressed_reg_a[j+1] <= select_test_compressed_reg_a[j];
select_test_result_reg_a[j+1] <= select_test_result_reg_a[j];
select_compressed_reg_a[j+1] <= select_compressed_reg_a[j];
select_result_reg_a[j+1] <= select_result_reg_a[j];
end
always @(*)
begin
select_qq4_code4_table_reg_a[0] <= select_qq4_code4_table_a;
select_qq6_code6_table_reg_a[0] <= select_qq6_code6_table_a;
select_wl_code_table_reg_a[0] <= select_wl_code_table_a;
select_ilb_table_reg_a[0] <= select_ilb_table_a;
select_decis_levl_reg_a[0] <= select_decis_levl_a;
select_quant26bt_pos_reg_a[0] <= select_quant26bt_pos_a;
select_quant26bt_neg_reg_a[0] <= select_quant26bt_neg_a;
select_qq2_code2_table_reg_a[0] <= select_qq2_code2_table_a;
select_wh_code_table_reg_a[0] <= select_wh_code_table_a;
select_tqmf_reg_a[0] <= select_tqmf_a;
select_delay_bpl_reg_a[0] <= select_delay_bpl_a;
select_delay_dltx_reg_a[0] <= select_delay_dltx_a;
select_delay_bph_reg_a[0] <= select_delay_bph_a;
select_delay_dhx_reg_a[0] <= select_delay_dhx_a;
select_dec_del_bpl_reg_a[0] <= select_dec_del_bpl_a;
select_dec_del_dltx_reg_a[0] <= select_dec_del_dltx_a;
select_dec_del_bph_reg_a[0] <= select_dec_del_bph_a;
select_dec_del_dhx_reg_a[0] <= select_dec_del_dhx_a;
select_test_data_reg_a[0] <= select_test_data_a;
select_test_compressed_reg_a[0] <= select_test_compressed_a;
select_test_result_reg_a[0] <= select_test_result_a;
select_compressed_reg_a[0] <= select_compressed_a;
select_result_reg_a[0] <= select_result_a;
end

reg [2:0] select_not_struct_b;

wire select_qq4_code4_table_b;
assign select_qq4_code4_table_b = (tag_b == `TAG_g_qq4_code4_table);
reg [ram_latency:0] select_qq4_code4_table_reg_b;
wire [31:0] memory_controller_qq4_code4_table_out_b;
assign memory_controller_qq4_code4_table_out_b = {32{ select_qq4_code4_table_reg_b[ram_latency]}} & qq4_code4_table_out_b;

wire select_qq6_code6_table_b;
assign select_qq6_code6_table_b = (tag_b == `TAG_g_qq6_code6_table);
reg [ram_latency:0] select_qq6_code6_table_reg_b;
wire [31:0] memory_controller_qq6_code6_table_out_b;
assign memory_controller_qq6_code6_table_out_b = {32{ select_qq6_code6_table_reg_b[ram_latency]}} & qq6_code6_table_out_b;

wire select_wl_code_table_b;
assign select_wl_code_table_b = (tag_b == `TAG_g_wl_code_table);
reg [ram_latency:0] select_wl_code_table_reg_b;
wire [31:0] memory_controller_wl_code_table_out_b;
assign memory_controller_wl_code_table_out_b = {32{ select_wl_code_table_reg_b[ram_latency]}} & wl_code_table_out_b;

wire select_ilb_table_b;
assign select_ilb_table_b = (tag_b == `TAG_g_ilb_table);
reg [ram_latency:0] select_ilb_table_reg_b;
wire [31:0] memory_controller_ilb_table_out_b;
assign memory_controller_ilb_table_out_b = {32{ select_ilb_table_reg_b[ram_latency]}} & ilb_table_out_b;

wire select_decis_levl_b;
assign select_decis_levl_b = (tag_b == `TAG_g_decis_levl);
reg [ram_latency:0] select_decis_levl_reg_b;
wire [31:0] memory_controller_decis_levl_out_b;
assign memory_controller_decis_levl_out_b = {32{ select_decis_levl_reg_b[ram_latency]}} & decis_levl_out_b;

wire select_quant26bt_pos_b;
assign select_quant26bt_pos_b = (tag_b == `TAG_g_quant26bt_pos);
reg [ram_latency:0] select_quant26bt_pos_reg_b;
wire [31:0] memory_controller_quant26bt_pos_out_b;
assign memory_controller_quant26bt_pos_out_b = {32{ select_quant26bt_pos_reg_b[ram_latency]}} & quant26bt_pos_out_b;

wire select_quant26bt_neg_b;
assign select_quant26bt_neg_b = (tag_b == `TAG_g_quant26bt_neg);
reg [ram_latency:0] select_quant26bt_neg_reg_b;
wire [31:0] memory_controller_quant26bt_neg_out_b;
assign memory_controller_quant26bt_neg_out_b = {32{ select_quant26bt_neg_reg_b[ram_latency]}} & quant26bt_neg_out_b;

wire select_qq2_code2_table_b;
assign select_qq2_code2_table_b = (tag_b == `TAG_g_qq2_code2_table);
reg [ram_latency:0] select_qq2_code2_table_reg_b;
wire [31:0] memory_controller_qq2_code2_table_out_b;
assign memory_controller_qq2_code2_table_out_b = {32{ select_qq2_code2_table_reg_b[ram_latency]}} & qq2_code2_table_out_b;

wire select_wh_code_table_b;
assign select_wh_code_table_b = (tag_b == `TAG_g_wh_code_table);
reg [ram_latency:0] select_wh_code_table_reg_b;
wire [31:0] memory_controller_wh_code_table_out_b;
assign memory_controller_wh_code_table_out_b = {32{ select_wh_code_table_reg_b[ram_latency]}} & wh_code_table_out_b;

wire select_tqmf_b;
assign select_tqmf_b = (tag_b == `TAG_g_tqmf);
reg [ram_latency:0] select_tqmf_reg_b;
wire [31:0] memory_controller_tqmf_out_b;
assign memory_controller_tqmf_out_b = {32{ select_tqmf_reg_b[ram_latency]}} & tqmf_out_b;

wire select_delay_bpl_b;
assign select_delay_bpl_b = (tag_b == `TAG_g_delay_bpl);
reg [ram_latency:0] select_delay_bpl_reg_b;
wire [31:0] memory_controller_delay_bpl_out_b;
assign memory_controller_delay_bpl_out_b = {32{ select_delay_bpl_reg_b[ram_latency]}} & delay_bpl_out_b;

wire select_delay_dltx_b;
assign select_delay_dltx_b = (tag_b == `TAG_g_delay_dltx);
reg [ram_latency:0] select_delay_dltx_reg_b;
wire [31:0] memory_controller_delay_dltx_out_b;
assign memory_controller_delay_dltx_out_b = {32{ select_delay_dltx_reg_b[ram_latency]}} & delay_dltx_out_b;

wire select_delay_bph_b;
assign select_delay_bph_b = (tag_b == `TAG_g_delay_bph);
reg [ram_latency:0] select_delay_bph_reg_b;
wire [31:0] memory_controller_delay_bph_out_b;
assign memory_controller_delay_bph_out_b = {32{ select_delay_bph_reg_b[ram_latency]}} & delay_bph_out_b;

wire select_delay_dhx_b;
assign select_delay_dhx_b = (tag_b == `TAG_g_delay_dhx);
reg [ram_latency:0] select_delay_dhx_reg_b;
wire [31:0] memory_controller_delay_dhx_out_b;
assign memory_controller_delay_dhx_out_b = {32{ select_delay_dhx_reg_b[ram_latency]}} & delay_dhx_out_b;

wire select_dec_del_bpl_b;
assign select_dec_del_bpl_b = (tag_b == `TAG_g_dec_del_bpl);
reg [ram_latency:0] select_dec_del_bpl_reg_b;
wire [31:0] memory_controller_dec_del_bpl_out_b;
assign memory_controller_dec_del_bpl_out_b = {32{ select_dec_del_bpl_reg_b[ram_latency]}} & dec_del_bpl_out_b;

wire select_dec_del_dltx_b;
assign select_dec_del_dltx_b = (tag_b == `TAG_g_dec_del_dltx);
reg [ram_latency:0] select_dec_del_dltx_reg_b;
wire [31:0] memory_controller_dec_del_dltx_out_b;
assign memory_controller_dec_del_dltx_out_b = {32{ select_dec_del_dltx_reg_b[ram_latency]}} & dec_del_dltx_out_b;

wire select_dec_del_bph_b;
assign select_dec_del_bph_b = (tag_b == `TAG_g_dec_del_bph);
reg [ram_latency:0] select_dec_del_bph_reg_b;
wire [31:0] memory_controller_dec_del_bph_out_b;
assign memory_controller_dec_del_bph_out_b = {32{ select_dec_del_bph_reg_b[ram_latency]}} & dec_del_bph_out_b;

wire select_dec_del_dhx_b;
assign select_dec_del_dhx_b = (tag_b == `TAG_g_dec_del_dhx);
reg [ram_latency:0] select_dec_del_dhx_reg_b;
wire [31:0] memory_controller_dec_del_dhx_out_b;
assign memory_controller_dec_del_dhx_out_b = {32{ select_dec_del_dhx_reg_b[ram_latency]}} & dec_del_dhx_out_b;

wire select_test_data_b;
assign select_test_data_b = (tag_b == `TAG_g_test_data);
reg [ram_latency:0] select_test_data_reg_b;
wire [31:0] memory_controller_test_data_out_b;
assign memory_controller_test_data_out_b = {32{ select_test_data_reg_b[ram_latency]}} & test_data_out_b;

wire select_test_compressed_b;
assign select_test_compressed_b = (tag_b == `TAG_g_test_compressed);
reg [ram_latency:0] select_test_compressed_reg_b;
wire [31:0] memory_controller_test_compressed_out_b;
assign memory_controller_test_compressed_out_b = {32{ select_test_compressed_reg_b[ram_latency]}} & test_compressed_out_b;

wire select_test_result_b;
assign select_test_result_b = (tag_b == `TAG_g_test_result);
reg [ram_latency:0] select_test_result_reg_b;
wire [31:0] memory_controller_test_result_out_b;
assign memory_controller_test_result_out_b = {32{ select_test_result_reg_b[ram_latency]}} & test_result_out_b;

wire select_compressed_b;
assign select_compressed_b = (tag_b == `TAG_g_compressed);
reg [ram_latency:0] select_compressed_reg_b;
wire [31:0] memory_controller_compressed_out_b;
assign memory_controller_compressed_out_b = {32{ select_compressed_reg_b[ram_latency]}} & compressed_out_b;

wire select_result_b;
assign select_result_b = (tag_b == `TAG_g_result);
reg [ram_latency:0] select_result_reg_b;
wire [31:0] memory_controller_result_out_b;
assign memory_controller_result_out_b = {32{ select_result_reg_b[ram_latency]}} & result_out_b;

always @(*)
begin
	qq4_code4_table_address_b = memory_controller_address_b [4-1+2:2] & {4{select_qq4_code4_table_b}};
	qq4_code4_table_write_enable_b = memory_controller_write_enable_b & select_qq4_code4_table_b;
	qq4_code4_table_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	qq6_code6_table_address_b = memory_controller_address_b [6-1+2:2] & {6{select_qq6_code6_table_b}};
	qq6_code6_table_write_enable_b = memory_controller_write_enable_b & select_qq6_code6_table_b;
	qq6_code6_table_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	wl_code_table_address_b = memory_controller_address_b [4-1+2:2] & {4{select_wl_code_table_b}};
	wl_code_table_write_enable_b = memory_controller_write_enable_b & select_wl_code_table_b;
	wl_code_table_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	ilb_table_address_b = memory_controller_address_b [5-1+2:2] & {5{select_ilb_table_b}};
	ilb_table_write_enable_b = memory_controller_write_enable_b & select_ilb_table_b;
	ilb_table_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	decis_levl_address_b = memory_controller_address_b [5-1+2:2] & {5{select_decis_levl_b}};
	decis_levl_write_enable_b = memory_controller_write_enable_b & select_decis_levl_b;
	decis_levl_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	quant26bt_pos_address_b = memory_controller_address_b [5-1+2:2] & {5{select_quant26bt_pos_b}};
	quant26bt_pos_write_enable_b = memory_controller_write_enable_b & select_quant26bt_pos_b;
	quant26bt_pos_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	quant26bt_neg_address_b = memory_controller_address_b [5-1+2:2] & {5{select_quant26bt_neg_b}};
	quant26bt_neg_write_enable_b = memory_controller_write_enable_b & select_quant26bt_neg_b;
	quant26bt_neg_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	qq2_code2_table_address_b = memory_controller_address_b [2-1+2:2] & {2{select_qq2_code2_table_b}};
	qq2_code2_table_write_enable_b = memory_controller_write_enable_b & select_qq2_code2_table_b;
	qq2_code2_table_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	wh_code_table_address_b = memory_controller_address_b [2-1+2:2] & {2{select_wh_code_table_b}};
	wh_code_table_write_enable_b = memory_controller_write_enable_b & select_wh_code_table_b;
	wh_code_table_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	tqmf_address_b = memory_controller_address_b [5-1+2:2] & {5{select_tqmf_b}};
	tqmf_write_enable_b = memory_controller_write_enable_b & select_tqmf_b;
	tqmf_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	delay_bpl_address_b = memory_controller_address_b [3-1+2:2] & {3{select_delay_bpl_b}};
	delay_bpl_write_enable_b = memory_controller_write_enable_b & select_delay_bpl_b;
	delay_bpl_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	delay_dltx_address_b = memory_controller_address_b [3-1+2:2] & {3{select_delay_dltx_b}};
	delay_dltx_write_enable_b = memory_controller_write_enable_b & select_delay_dltx_b;
	delay_dltx_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	delay_bph_address_b = memory_controller_address_b [3-1+2:2] & {3{select_delay_bph_b}};
	delay_bph_write_enable_b = memory_controller_write_enable_b & select_delay_bph_b;
	delay_bph_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	delay_dhx_address_b = memory_controller_address_b [3-1+2:2] & {3{select_delay_dhx_b}};
	delay_dhx_write_enable_b = memory_controller_write_enable_b & select_delay_dhx_b;
	delay_dhx_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	dec_del_bpl_address_b = memory_controller_address_b [3-1+2:2] & {3{select_dec_del_bpl_b}};
	dec_del_bpl_write_enable_b = memory_controller_write_enable_b & select_dec_del_bpl_b;
	dec_del_bpl_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	dec_del_dltx_address_b = memory_controller_address_b [3-1+2:2] & {3{select_dec_del_dltx_b}};
	dec_del_dltx_write_enable_b = memory_controller_write_enable_b & select_dec_del_dltx_b;
	dec_del_dltx_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	dec_del_bph_address_b = memory_controller_address_b [3-1+2:2] & {3{select_dec_del_bph_b}};
	dec_del_bph_write_enable_b = memory_controller_write_enable_b & select_dec_del_bph_b;
	dec_del_bph_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	dec_del_dhx_address_b = memory_controller_address_b [3-1+2:2] & {3{select_dec_del_dhx_b}};
	dec_del_dhx_write_enable_b = memory_controller_write_enable_b & select_dec_del_dhx_b;
	dec_del_dhx_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	test_data_address_b = memory_controller_address_b [7-1+2:2] & {7{select_test_data_b}};
	test_data_write_enable_b = memory_controller_write_enable_b & select_test_data_b;
	test_data_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	test_compressed_address_b = memory_controller_address_b [7-1+2:2] & {7{select_test_compressed_b}};
	test_compressed_write_enable_b = memory_controller_write_enable_b & select_test_compressed_b;
	test_compressed_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	test_result_address_b = memory_controller_address_b [7-1+2:2] & {7{select_test_result_b}};
	test_result_write_enable_b = memory_controller_write_enable_b & select_test_result_b;
	test_result_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	compressed_address_b = memory_controller_address_b [7-1+2:2] & {7{select_compressed_b}};
	compressed_write_enable_b = memory_controller_write_enable_b & select_compressed_b;
	compressed_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	result_address_b = memory_controller_address_b [7-1+2:2] & {7{select_result_b}};
	result_write_enable_b = memory_controller_write_enable_b & select_result_b;
	result_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_qq4_code4_table_reg_b[ram_latency]}} | {2{select_qq6_code6_table_reg_b[ram_latency]}} | {2{select_wl_code_table_reg_b[ram_latency]}} | {2{select_ilb_table_reg_b[ram_latency]}} | {2{select_decis_levl_reg_b[ram_latency]}} | {2{select_quant26bt_pos_reg_b[ram_latency]}} | {2{select_quant26bt_neg_reg_b[ram_latency]}} | {2{select_qq2_code2_table_reg_b[ram_latency]}} | {2{select_wh_code_table_reg_b[ram_latency]}} | {2{select_tqmf_reg_b[ram_latency]}} | {2{select_delay_bpl_reg_b[ram_latency]}} | {2{select_delay_dltx_reg_b[ram_latency]}} | {2{select_delay_bph_reg_b[ram_latency]}} | {2{select_delay_dhx_reg_b[ram_latency]}} | {2{select_dec_del_bpl_reg_b[ram_latency]}} | {2{select_dec_del_dltx_reg_b[ram_latency]}} | {2{select_dec_del_bph_reg_b[ram_latency]}} | {2{select_dec_del_dhx_reg_b[ram_latency]}} | {2{select_test_data_reg_b[ram_latency]}} | {2{select_test_compressed_reg_b[ram_latency]}} | {2{select_test_result_reg_b[ram_latency]}} | {2{select_compressed_reg_b[ram_latency]}} | {2{select_result_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_qq4_code4_table_out_b | memory_controller_qq6_code6_table_out_b | memory_controller_wl_code_table_out_b | memory_controller_ilb_table_out_b | memory_controller_decis_levl_out_b | memory_controller_quant26bt_pos_out_b | memory_controller_quant26bt_neg_out_b | memory_controller_qq2_code2_table_out_b | memory_controller_wh_code_table_out_b | memory_controller_tqmf_out_b | memory_controller_delay_bpl_out_b | memory_controller_delay_dltx_out_b | memory_controller_delay_bph_out_b | memory_controller_delay_dhx_out_b | memory_controller_dec_del_bpl_out_b | memory_controller_dec_del_dltx_out_b | memory_controller_dec_del_bph_out_b | memory_controller_dec_del_dhx_out_b | memory_controller_test_data_out_b | memory_controller_test_compressed_out_b | memory_controller_test_result_out_b | memory_controller_compressed_out_b | memory_controller_result_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_qq4_code4_table_reg_b[j+1] <= select_qq4_code4_table_reg_b[j];
select_qq6_code6_table_reg_b[j+1] <= select_qq6_code6_table_reg_b[j];
select_wl_code_table_reg_b[j+1] <= select_wl_code_table_reg_b[j];
select_ilb_table_reg_b[j+1] <= select_ilb_table_reg_b[j];
select_decis_levl_reg_b[j+1] <= select_decis_levl_reg_b[j];
select_quant26bt_pos_reg_b[j+1] <= select_quant26bt_pos_reg_b[j];
select_quant26bt_neg_reg_b[j+1] <= select_quant26bt_neg_reg_b[j];
select_qq2_code2_table_reg_b[j+1] <= select_qq2_code2_table_reg_b[j];
select_wh_code_table_reg_b[j+1] <= select_wh_code_table_reg_b[j];
select_tqmf_reg_b[j+1] <= select_tqmf_reg_b[j];
select_delay_bpl_reg_b[j+1] <= select_delay_bpl_reg_b[j];
select_delay_dltx_reg_b[j+1] <= select_delay_dltx_reg_b[j];
select_delay_bph_reg_b[j+1] <= select_delay_bph_reg_b[j];
select_delay_dhx_reg_b[j+1] <= select_delay_dhx_reg_b[j];
select_dec_del_bpl_reg_b[j+1] <= select_dec_del_bpl_reg_b[j];
select_dec_del_dltx_reg_b[j+1] <= select_dec_del_dltx_reg_b[j];
select_dec_del_bph_reg_b[j+1] <= select_dec_del_bph_reg_b[j];
select_dec_del_dhx_reg_b[j+1] <= select_dec_del_dhx_reg_b[j];
select_test_data_reg_b[j+1] <= select_test_data_reg_b[j];
select_test_compressed_reg_b[j+1] <= select_test_compressed_reg_b[j];
select_test_result_reg_b[j+1] <= select_test_result_reg_b[j];
select_compressed_reg_b[j+1] <= select_compressed_reg_b[j];
select_result_reg_b[j+1] <= select_result_reg_b[j];
end
always @(*)
begin
select_qq4_code4_table_reg_b[0] <= select_qq4_code4_table_b;
select_qq6_code6_table_reg_b[0] <= select_qq6_code6_table_b;
select_wl_code_table_reg_b[0] <= select_wl_code_table_b;
select_ilb_table_reg_b[0] <= select_ilb_table_b;
select_decis_levl_reg_b[0] <= select_decis_levl_b;
select_quant26bt_pos_reg_b[0] <= select_quant26bt_pos_b;
select_quant26bt_neg_reg_b[0] <= select_quant26bt_neg_b;
select_qq2_code2_table_reg_b[0] <= select_qq2_code2_table_b;
select_wh_code_table_reg_b[0] <= select_wh_code_table_b;
select_tqmf_reg_b[0] <= select_tqmf_b;
select_delay_bpl_reg_b[0] <= select_delay_bpl_b;
select_delay_dltx_reg_b[0] <= select_delay_dltx_b;
select_delay_bph_reg_b[0] <= select_delay_bph_b;
select_delay_dhx_reg_b[0] <= select_delay_dhx_b;
select_dec_del_bpl_reg_b[0] <= select_dec_del_bpl_b;
select_dec_del_dltx_reg_b[0] <= select_dec_del_dltx_b;
select_dec_del_bph_reg_b[0] <= select_dec_del_bph_b;
select_dec_del_dhx_reg_b[0] <= select_dec_del_dhx_b;
select_test_data_reg_b[0] <= select_test_data_b;
select_test_compressed_reg_b[0] <= select_test_compressed_b;
select_test_result_reg_b[0] <= select_test_result_b;
select_compressed_reg_b[0] <= select_compressed_b;
select_result_reg_b[0] <= select_result_b;
end

endmodule 

`timescale 1 ns / 1 ns
module upzero
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_dlt,
	arg_dlti,
	arg_bli
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_upzero_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_2 = 6'd2;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_3 = 6'd3;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_4 = 6'd4;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_5 = 6'd5;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_6 = 6'd6;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_7 = 6'd7;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_8 = 6'd8;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_9 = 6'd9;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_10 = 6'd10;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_11 = 6'd11;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_12 = 6'd12;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_13 = 6'd13;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_14 = 6'd14;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_15 = 6'd15;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_16 = 6'd16;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_17 = 6'd17;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_18 = 6'd18;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_19 = 6'd19;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_20 = 6'd20;
parameter [5:0] LEGUP_F_upzero_BB_preheader_21 = 6'd21;
parameter [5:0] LEGUP_F_upzero_BB_preheader_22 = 6'd22;
parameter [5:0] LEGUP_F_upzero_BB_preheader_23 = 6'd23;
parameter [5:0] LEGUP_F_upzero_BB_preheader_24 = 6'd24;
parameter [5:0] LEGUP_F_upzero_BB_preheader_25 = 6'd25;
parameter [5:0] LEGUP_F_upzero_BB_preheader_26 = 6'd26;
parameter [5:0] LEGUP_F_upzero_BB_preheader_27 = 6'd27;
parameter [5:0] LEGUP_F_upzero_BB__89_28 = 6'd28;
parameter [5:0] LEGUP_F_upzero_BB__89_29 = 6'd29;
parameter [5:0] LEGUP_F_upzero_BB__89_30 = 6'd30;
parameter [5:0] LEGUP_F_upzero_BB__89_31 = 6'd31;
parameter [5:0] LEGUP_F_upzero_BB__89_32 = 6'd32;
parameter [5:0] LEGUP_F_upzero_BB__89_33 = 6'd33;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
integer i;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [31:0] arg_dlt;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_dlti;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_bli;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [5:0] cur_state_r0, cur_state_r1, cur_state_r2 /*synthesis preserve*/;
reg [5:0] cur_state_v0, cur_state_v1, cur_state_v2 /*synthesis keep*/;
always @(*) begin
	for(i=0; i<=5; i=i+1) begin
		cur_state_v0[i] = (cur_state_r0[i]==cur_state_r1[i])? cur_state_r0[i]
			: cur_state_r2[i];
		cur_state_v1[i] = (cur_state_r0[i]==cur_state_r1[i])? cur_state_r0[i]
			: cur_state_r2[i];
		cur_state_v2[i] = (cur_state_r0[i]==cur_state_r1[i])? cur_state_r0[i]
			: cur_state_r2[i];
	end
end
reg [5:0] next_state_r0, next_state_r1, next_state_r2 /*synthesis keep*/;

reg  upzero_0_1;
reg  upzero_0_1_r0, upzero_0_1_r1, upzero_0_1_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_2;
reg [31:0] upzero_preheader1_2_r0, upzero_preheader1_2_r1, upzero_preheader1_2_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_3;
reg [31:0] upzero_preheader1_3_r0, upzero_preheader1_3_r1, upzero_preheader1_3_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_4;
reg [31:0] upzero_preheader1_4_r0, upzero_preheader1_4_r1, upzero_preheader1_4_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_5;
reg [31:0] upzero_preheader1_5_r0, upzero_preheader1_5_r1, upzero_preheader1_5_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_6;
reg [31:0] upzero_preheader1_6_r0, upzero_preheader1_6_r1, upzero_preheader1_6_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_7;
reg [31:0] upzero_preheader1_7_r0, upzero_preheader1_7_r1, upzero_preheader1_7_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_8;
reg [31:0] upzero_preheader1_8_r0, upzero_preheader1_8_r1, upzero_preheader1_8_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_9;
reg [31:0] upzero_preheader1_9_r0, upzero_preheader1_9_r1, upzero_preheader1_9_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_10;
reg [31:0] upzero_preheader1_10_r0, upzero_preheader1_10_r1, upzero_preheader1_10_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_11_r0, upzero_preheader1_11_r1, upzero_preheader1_11_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_11_reg_r0, upzero_preheader1_11_reg_r1, upzero_preheader1_11_reg_r2 /*synthesis preserve*/;

reg [31:0] upzero_preheader1_12;
reg [31:0] upzero_preheader1_12_r0, upzero_preheader1_12_r1, upzero_preheader1_12_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_13;
reg [31:0] upzero_preheader1_13_r0, upzero_preheader1_13_r1, upzero_preheader1_13_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_14;
reg [31:0] upzero_preheader1_14_r0, upzero_preheader1_14_r1, upzero_preheader1_14_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_15;
reg [31:0] upzero_preheader1_15_r0, upzero_preheader1_15_r1, upzero_preheader1_15_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_16;
reg [31:0] upzero_preheader1_16_r0, upzero_preheader1_16_r1, upzero_preheader1_16_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_17_r0, upzero_preheader1_17_r1, upzero_preheader1_17_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_17_reg_r0, upzero_preheader1_17_reg_r1, upzero_preheader1_17_reg_r2 /*synthesis preserve*/;

reg [31:0] upzero_preheader1_18;
reg [31:0] upzero_preheader1_18_r0, upzero_preheader1_18_r1, upzero_preheader1_18_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_19;
reg [31:0] upzero_preheader1_19_r0, upzero_preheader1_19_r1, upzero_preheader1_19_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_20;
reg [31:0] upzero_preheader1_20_r0, upzero_preheader1_20_r1, upzero_preheader1_20_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_21;
reg [31:0] upzero_preheader1_21_r0, upzero_preheader1_21_r1, upzero_preheader1_21_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_22_r0, upzero_preheader1_22_r1, upzero_preheader1_22_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_22_reg_r0, upzero_preheader1_22_reg_r1, upzero_preheader1_22_reg_r2 /*synthesis preserve*/;

reg [31:0] upzero_preheader1_23;
reg [31:0] upzero_preheader1_23_r0, upzero_preheader1_23_r1, upzero_preheader1_23_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_24;
reg [31:0] upzero_preheader1_24_r0, upzero_preheader1_24_r1, upzero_preheader1_24_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_25;
reg [31:0] upzero_preheader1_25_r0, upzero_preheader1_25_r1, upzero_preheader1_25_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_26;
reg [31:0] upzero_preheader1_26_r0, upzero_preheader1_26_r1, upzero_preheader1_26_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_27;
reg [31:0] upzero_preheader1_27_r0, upzero_preheader1_27_r1, upzero_preheader1_27_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_28_r0, upzero_preheader1_28_r1, upzero_preheader1_28_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_28_reg_r0, upzero_preheader1_28_reg_r1, upzero_preheader1_28_reg_r2 /*synthesis preserve*/;

reg [31:0] upzero_preheader1_29;
reg [31:0] upzero_preheader1_29_r0, upzero_preheader1_29_r1, upzero_preheader1_29_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_30;
reg [31:0] upzero_preheader1_30_r0, upzero_preheader1_30_r1, upzero_preheader1_30_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_31;
reg [31:0] upzero_preheader1_31_r0, upzero_preheader1_31_r1, upzero_preheader1_31_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_32;
reg [31:0] upzero_preheader1_32_r0, upzero_preheader1_32_r1, upzero_preheader1_32_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_33_r0, upzero_preheader1_33_r1, upzero_preheader1_33_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_33_reg_r0, upzero_preheader1_33_reg_r1, upzero_preheader1_33_reg_r2 /*synthesis preserve*/;

reg [31:0] upzero_preheader1_34;
reg [31:0] upzero_preheader1_34_r0, upzero_preheader1_34_r1, upzero_preheader1_34_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_35;
reg [31:0] upzero_preheader1_35_r0, upzero_preheader1_35_r1, upzero_preheader1_35_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_36;
reg [31:0] upzero_preheader1_36_r0, upzero_preheader1_36_r1, upzero_preheader1_36_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_37;
reg [31:0] upzero_preheader1_37_r0, upzero_preheader1_37_r1, upzero_preheader1_37_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_38;
reg [31:0] upzero_preheader1_38_r0, upzero_preheader1_38_r1, upzero_preheader1_38_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_39_r0, upzero_preheader1_39_r1, upzero_preheader1_39_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_39_reg_r0, upzero_preheader1_39_reg_r1, upzero_preheader1_39_reg_r2 /*synthesis preserve*/;

reg [31:0] upzero_preheader1_40;
reg [31:0] upzero_preheader1_40_r0, upzero_preheader1_40_r1, upzero_preheader1_40_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_41;
reg [31:0] upzero_preheader1_41_r0, upzero_preheader1_41_r1, upzero_preheader1_41_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_42;
reg [31:0] upzero_preheader1_42_r0, upzero_preheader1_42_r1, upzero_preheader1_42_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_43;
reg [31:0] upzero_preheader1_43_r0, upzero_preheader1_43_r1, upzero_preheader1_43_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_44_r0, upzero_preheader1_44_r1, upzero_preheader1_44_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_44_reg_r0, upzero_preheader1_44_reg_r1, upzero_preheader1_44_reg_r2 /*synthesis preserve*/;

reg [31:0] upzero_preheader1_45;
reg [31:0] upzero_preheader1_45_r0, upzero_preheader1_45_r1, upzero_preheader1_45_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_46;
reg [31:0] upzero_preheader1_46_r0, upzero_preheader1_46_r1, upzero_preheader1_46_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_47;
reg [31:0] upzero_preheader1_47_r0, upzero_preheader1_47_r1, upzero_preheader1_47_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_48;
reg [31:0] upzero_preheader1_48_r0, upzero_preheader1_48_r1, upzero_preheader1_48_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_49;
reg [31:0] upzero_preheader1_49_r0, upzero_preheader1_49_r1, upzero_preheader1_49_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_50_r0, upzero_preheader1_50_r1, upzero_preheader1_50_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_50_reg_r0, upzero_preheader1_50_reg_r1, upzero_preheader1_50_reg_r2 /*synthesis preserve*/;

reg [31:0] upzero_preheader1_51;
reg [31:0] upzero_preheader1_51_r0, upzero_preheader1_51_r1, upzero_preheader1_51_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_52;
reg [31:0] upzero_preheader1_52_r0, upzero_preheader1_52_r1, upzero_preheader1_52_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_53;
reg [31:0] upzero_preheader1_53_r0, upzero_preheader1_53_r1, upzero_preheader1_53_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_54;
reg [31:0] upzero_preheader1_54_r0, upzero_preheader1_54_r1, upzero_preheader1_54_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_55_r0, upzero_preheader1_55_r1, upzero_preheader1_55_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_55_reg_r0, upzero_preheader1_55_reg_r1, upzero_preheader1_55_reg_r2 /*synthesis preserve*/;

reg [31:0] upzero_preheader1_56;
reg [31:0] upzero_preheader1_56_r0, upzero_preheader1_56_r1, upzero_preheader1_56_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_57;
reg [31:0] upzero_preheader1_57_r0, upzero_preheader1_57_r1, upzero_preheader1_57_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_58;
reg [31:0] upzero_preheader1_58_r0, upzero_preheader1_58_r1, upzero_preheader1_58_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_59;
reg [31:0] upzero_preheader1_59_r0, upzero_preheader1_59_r1, upzero_preheader1_59_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_60;
reg [31:0] upzero_preheader1_60_r0, upzero_preheader1_60_r1, upzero_preheader1_60_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_61_r0, upzero_preheader1_61_r1, upzero_preheader1_61_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_61_reg_r0, upzero_preheader1_61_reg_r1, upzero_preheader1_61_reg_r2 /*synthesis preserve*/;

reg [31:0] upzero_preheader1_62;
reg [31:0] upzero_preheader1_62_r0, upzero_preheader1_62_r1, upzero_preheader1_62_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_63;
reg [31:0] upzero_preheader1_63_r0, upzero_preheader1_63_r1, upzero_preheader1_63_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_64;
reg [31:0] upzero_preheader1_64_r0, upzero_preheader1_64_r1, upzero_preheader1_64_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader1_65;
reg [31:0] upzero_preheader1_65_r0, upzero_preheader1_65_r1, upzero_preheader1_65_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_66;
reg [31:0] upzero_preheader_66_r0, upzero_preheader_66_r1, upzero_preheader_66_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_67;
reg [31:0] upzero_preheader_67_r0, upzero_preheader_67_r1, upzero_preheader_67_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_68;
reg [31:0] upzero_preheader_68_r0, upzero_preheader_68_r1, upzero_preheader_68_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_68_reg;
reg [31:0] upzero_preheader_68_reg_r0, upzero_preheader_68_reg_r1, upzero_preheader_68_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_69_r0, upzero_preheader_69_r1, upzero_preheader_69_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_69_reg_r0, upzero_preheader_69_reg_r1, upzero_preheader_69_reg_r2 /*synthesis preserve*/;

reg [31:0] upzero_preheader_70;
reg [31:0] upzero_preheader_70_r0, upzero_preheader_70_r1, upzero_preheader_70_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_71;
reg [31:0] upzero_preheader_71_r0, upzero_preheader_71_r1, upzero_preheader_71_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_72;
reg [31:0] upzero_preheader_72_r0, upzero_preheader_72_r1, upzero_preheader_72_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_72_reg;
reg [31:0] upzero_preheader_72_reg_r0, upzero_preheader_72_reg_r1, upzero_preheader_72_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_73_r0, upzero_preheader_73_r1, upzero_preheader_73_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_73_reg_r0, upzero_preheader_73_reg_r1, upzero_preheader_73_reg_r2 /*synthesis preserve*/;

reg [31:0] upzero_preheader_74;
reg [31:0] upzero_preheader_74_r0, upzero_preheader_74_r1, upzero_preheader_74_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_75;
reg [31:0] upzero_preheader_75_r0, upzero_preheader_75_r1, upzero_preheader_75_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_76;
reg [31:0] upzero_preheader_76_r0, upzero_preheader_76_r1, upzero_preheader_76_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_76_reg;
reg [31:0] upzero_preheader_76_reg_r0, upzero_preheader_76_reg_r1, upzero_preheader_76_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_77_r0, upzero_preheader_77_r1, upzero_preheader_77_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_77_reg_r0, upzero_preheader_77_reg_r1, upzero_preheader_77_reg_r2 /*synthesis preserve*/;

reg [31:0] upzero_preheader_78;
reg [31:0] upzero_preheader_78_r0, upzero_preheader_78_r1, upzero_preheader_78_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_79;
reg [31:0] upzero_preheader_79_r0, upzero_preheader_79_r1, upzero_preheader_79_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_80;
reg [31:0] upzero_preheader_80_r0, upzero_preheader_80_r1, upzero_preheader_80_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_80_reg;
reg [31:0] upzero_preheader_80_reg_r0, upzero_preheader_80_reg_r1, upzero_preheader_80_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_81_r0, upzero_preheader_81_r1, upzero_preheader_81_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_81_reg_r0, upzero_preheader_81_reg_r1, upzero_preheader_81_reg_r2 /*synthesis preserve*/;

reg [31:0] upzero_preheader_82;
reg [31:0] upzero_preheader_82_r0, upzero_preheader_82_r1, upzero_preheader_82_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_83;
reg [31:0] upzero_preheader_83_r0, upzero_preheader_83_r1, upzero_preheader_83_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_84;
reg [31:0] upzero_preheader_84_r0, upzero_preheader_84_r1, upzero_preheader_84_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_84_reg;
reg [31:0] upzero_preheader_84_reg_r0, upzero_preheader_84_reg_r1, upzero_preheader_84_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_85_r0, upzero_preheader_85_r1, upzero_preheader_85_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_85_reg_r0, upzero_preheader_85_reg_r1, upzero_preheader_85_reg_r2 /*synthesis preserve*/;

reg [31:0] upzero_preheader_86;
reg [31:0] upzero_preheader_86_r0, upzero_preheader_86_r1, upzero_preheader_86_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_87;
reg [31:0] upzero_preheader_87_r0, upzero_preheader_87_r1, upzero_preheader_87_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_88;
reg [31:0] upzero_preheader_88_r0, upzero_preheader_88_r1, upzero_preheader_88_r2 /*synthesis keep*/;

reg [31:0] upzero_preheader_88_reg;
reg [31:0] upzero_preheader_88_reg_r0, upzero_preheader_88_reg_r1, upzero_preheader_88_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre_r0, upzero_preheader_pre_r1, upzero_preheader_pre_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre_reg_r0, upzero_preheader_pre_reg_r1, upzero_preheader_pre_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre7_r0, upzero_preheader_pre7_r1, upzero_preheader_pre7_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre7_reg_r0, upzero_preheader_pre7_reg_r1, upzero_preheader_pre7_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre9_r0, upzero_preheader_pre9_r1, upzero_preheader_pre9_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre9_reg_r0, upzero_preheader_pre9_reg_r1, upzero_preheader_pre9_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre11_r0, upzero_preheader_pre11_r1, upzero_preheader_pre11_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre11_reg_r0, upzero_preheader_pre11_reg_r1, upzero_preheader_pre11_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre13_r0, upzero_preheader_pre13_r1, upzero_preheader_pre13_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre13_reg_r0, upzero_preheader_pre13_reg_r1, upzero_preheader_pre13_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi14_r0, upzero_89_prephi14_r1, upzero_89_prephi14_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi14_reg_r0, upzero_89_prephi14_reg_r1, upzero_89_prephi14_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi12_r0, upzero_89_prephi12_r1, upzero_89_prephi12_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi12_reg_r0, upzero_89_prephi12_reg_r1, upzero_89_prephi12_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi10_r0, upzero_89_prephi10_r1, upzero_89_prephi10_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi10_reg_r0, upzero_89_prephi10_reg_r1, upzero_89_prephi10_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi8_r0, upzero_89_prephi8_r1, upzero_89_prephi8_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi8_reg_r0, upzero_89_prephi8_reg_r1, upzero_89_prephi8_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi_r0, upzero_89_prephi_r1, upzero_89_prephi_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi_reg_r0, upzero_89_prephi_reg_r1, upzero_89_prephi_reg_r2 /*synthesis preserve*/;

reg [31:0] upzero_89_90;
reg [31:0] upzero_89_90_r0, upzero_89_90_r1, upzero_89_90_r2 /*synthesis keep*/;

reg [31:0] upzero_89_91;
reg [31:0] upzero_89_91_r0, upzero_89_91_r1, upzero_89_91_r2 /*synthesis keep*/;

reg [31:0] upzero_89_92;
reg [31:0] upzero_89_92_r0, upzero_89_92_r1, upzero_89_92_r2 /*synthesis keep*/;

reg [31:0] upzero_89_93;
reg [31:0] upzero_89_93_r0, upzero_89_93_r1, upzero_89_93_r2 /*synthesis keep*/;

reg [31:0] upzero_signed_add_32_0_op0;
reg [31:0] upzero_signed_add_32_0_op0_r0, upzero_signed_add_32_0_op0_r1, upzero_signed_add_32_0_op0_r2 /*synthesis keep*/;

reg [31:0] upzero_signed_add_32_0_op1;
reg [31:0] upzero_signed_add_32_0_op1_r0, upzero_signed_add_32_0_op1_r1, upzero_signed_add_32_0_op1_r2 /*synthesis keep*/;

reg [31:0] upzero_signed_add_32_0;
reg [31:0] upzero_signed_add_32_0_r0, upzero_signed_add_32_0_r1, upzero_signed_add_32_0_r2 /*synthesis keep*/;



always @(posedge clk) begin
	if (reset)
		cur_state_r0 <= LEGUP_0;
	else if (memory_controller_waitrequest == 1'd1)
		cur_state_r0 <= cur_state_r0;
	else
		cur_state_r0 <= next_state_r0;
end

always @(*)
begin
next_state_r0 = cur_state_r0;
case(cur_state_v0)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state_r0 = LEGUP_F_upzero_BB__0_1;
LEGUP_F_upzero_BB__0_1:
	if ((upzero_0_1_r0 == 1'd1))
		next_state_r0 = LEGUP_F_upzero_BB_preheader_21;
	else if ((upzero_0_1_r0 == 1'd0))
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_2;
LEGUP_F_upzero_BB__89_28:
		next_state_r0 = LEGUP_F_upzero_BB__89_29;
LEGUP_F_upzero_BB__89_29:
		next_state_r0 = LEGUP_F_upzero_BB__89_30;
LEGUP_F_upzero_BB__89_30:
		next_state_r0 = LEGUP_F_upzero_BB__89_31;
LEGUP_F_upzero_BB__89_31:
		next_state_r0 = LEGUP_F_upzero_BB__89_32;
LEGUP_F_upzero_BB__89_32:
		next_state_r0 = LEGUP_F_upzero_BB__89_33;
LEGUP_F_upzero_BB__89_33:
		next_state_r0 = LEGUP_0;
LEGUP_F_upzero_BB_preheader1_10:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_11;
LEGUP_F_upzero_BB_preheader1_11:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_12;
LEGUP_F_upzero_BB_preheader1_12:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_13;
LEGUP_F_upzero_BB_preheader1_13:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_14;
LEGUP_F_upzero_BB_preheader1_14:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_15;
LEGUP_F_upzero_BB_preheader1_15:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_16;
LEGUP_F_upzero_BB_preheader1_16:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_17;
LEGUP_F_upzero_BB_preheader1_17:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_18;
LEGUP_F_upzero_BB_preheader1_18:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_19;
LEGUP_F_upzero_BB_preheader1_19:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_20;
LEGUP_F_upzero_BB_preheader1_2:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_3;
LEGUP_F_upzero_BB_preheader1_20:
		next_state_r0 = LEGUP_F_upzero_BB__89_28;
LEGUP_F_upzero_BB_preheader1_3:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_4;
LEGUP_F_upzero_BB_preheader1_4:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_5;
LEGUP_F_upzero_BB_preheader1_5:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_6;
LEGUP_F_upzero_BB_preheader1_6:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_7;
LEGUP_F_upzero_BB_preheader1_7:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_8;
LEGUP_F_upzero_BB_preheader1_8:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_9;
LEGUP_F_upzero_BB_preheader1_9:
		next_state_r0 = LEGUP_F_upzero_BB_preheader1_10;
LEGUP_F_upzero_BB_preheader_21:
		next_state_r0 = LEGUP_F_upzero_BB_preheader_22;
LEGUP_F_upzero_BB_preheader_22:
		next_state_r0 = LEGUP_F_upzero_BB_preheader_23;
LEGUP_F_upzero_BB_preheader_23:
		next_state_r0 = LEGUP_F_upzero_BB_preheader_24;
LEGUP_F_upzero_BB_preheader_24:
		next_state_r0 = LEGUP_F_upzero_BB_preheader_25;
LEGUP_F_upzero_BB_preheader_25:
		next_state_r0 = LEGUP_F_upzero_BB_preheader_26;
LEGUP_F_upzero_BB_preheader_26:
		next_state_r0 = LEGUP_F_upzero_BB_preheader_27;
LEGUP_F_upzero_BB_preheader_27:
		next_state_r0 = LEGUP_F_upzero_BB__89_28;
default:
	next_state_r0 = cur_state_r0;
endcase

end
always @(posedge clk) begin
	if (reset)
		cur_state_r1 <= LEGUP_0;
	else if (memory_controller_waitrequest == 1'd1)
		cur_state_r1 <= cur_state_r1;
	else
		cur_state_r1 <= next_state_r1;
end

always @(*)
begin
next_state_r1 = cur_state_r1;
case(cur_state_v1)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state_r1 = LEGUP_F_upzero_BB__0_1;
LEGUP_F_upzero_BB__0_1:
	if ((upzero_0_1_r1 == 1'd1))
		next_state_r1 = LEGUP_F_upzero_BB_preheader_21;
	else if ((upzero_0_1_r1 == 1'd0))
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_2;
LEGUP_F_upzero_BB__89_28:
		next_state_r1 = LEGUP_F_upzero_BB__89_29;
LEGUP_F_upzero_BB__89_29:
		next_state_r1 = LEGUP_F_upzero_BB__89_30;
LEGUP_F_upzero_BB__89_30:
		next_state_r1 = LEGUP_F_upzero_BB__89_31;
LEGUP_F_upzero_BB__89_31:
		next_state_r1 = LEGUP_F_upzero_BB__89_32;
LEGUP_F_upzero_BB__89_32:
		next_state_r1 = LEGUP_F_upzero_BB__89_33;
LEGUP_F_upzero_BB__89_33:
		next_state_r1 = LEGUP_0;
LEGUP_F_upzero_BB_preheader1_10:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_11;
LEGUP_F_upzero_BB_preheader1_11:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_12;
LEGUP_F_upzero_BB_preheader1_12:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_13;
LEGUP_F_upzero_BB_preheader1_13:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_14;
LEGUP_F_upzero_BB_preheader1_14:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_15;
LEGUP_F_upzero_BB_preheader1_15:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_16;
LEGUP_F_upzero_BB_preheader1_16:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_17;
LEGUP_F_upzero_BB_preheader1_17:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_18;
LEGUP_F_upzero_BB_preheader1_18:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_19;
LEGUP_F_upzero_BB_preheader1_19:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_20;
LEGUP_F_upzero_BB_preheader1_2:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_3;
LEGUP_F_upzero_BB_preheader1_20:
		next_state_r1 = LEGUP_F_upzero_BB__89_28;
LEGUP_F_upzero_BB_preheader1_3:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_4;
LEGUP_F_upzero_BB_preheader1_4:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_5;
LEGUP_F_upzero_BB_preheader1_5:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_6;
LEGUP_F_upzero_BB_preheader1_6:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_7;
LEGUP_F_upzero_BB_preheader1_7:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_8;
LEGUP_F_upzero_BB_preheader1_8:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_9;
LEGUP_F_upzero_BB_preheader1_9:
		next_state_r1 = LEGUP_F_upzero_BB_preheader1_10;
LEGUP_F_upzero_BB_preheader_21:
		next_state_r1 = LEGUP_F_upzero_BB_preheader_22;
LEGUP_F_upzero_BB_preheader_22:
		next_state_r1 = LEGUP_F_upzero_BB_preheader_23;
LEGUP_F_upzero_BB_preheader_23:
		next_state_r1 = LEGUP_F_upzero_BB_preheader_24;
LEGUP_F_upzero_BB_preheader_24:
		next_state_r1 = LEGUP_F_upzero_BB_preheader_25;
LEGUP_F_upzero_BB_preheader_25:
		next_state_r1 = LEGUP_F_upzero_BB_preheader_26;
LEGUP_F_upzero_BB_preheader_26:
		next_state_r1 = LEGUP_F_upzero_BB_preheader_27;
LEGUP_F_upzero_BB_preheader_27:
		next_state_r1 = LEGUP_F_upzero_BB__89_28;
default:
	next_state_r1 = cur_state_r1;
endcase

end
always @(posedge clk) begin
	if (reset)
		cur_state_r2 <= LEGUP_0;
	else if (memory_controller_waitrequest == 1'd1)
		cur_state_r2 <= cur_state_r2;
	else
		cur_state_r2 <= next_state_r2;
end

always @(*)
begin
next_state_r2 = cur_state_r2;
case(cur_state_v2)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state_r2 = LEGUP_F_upzero_BB__0_1;
LEGUP_F_upzero_BB__0_1:
	if ((upzero_0_1_r2 == 1'd1))
		next_state_r2 = LEGUP_F_upzero_BB_preheader_21;
	else if ((upzero_0_1_r2 == 1'd0))
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_2;
LEGUP_F_upzero_BB__89_28:
		next_state_r2 = LEGUP_F_upzero_BB__89_29;
LEGUP_F_upzero_BB__89_29:
		next_state_r2 = LEGUP_F_upzero_BB__89_30;
LEGUP_F_upzero_BB__89_30:
		next_state_r2 = LEGUP_F_upzero_BB__89_31;
LEGUP_F_upzero_BB__89_31:
		next_state_r2 = LEGUP_F_upzero_BB__89_32;
LEGUP_F_upzero_BB__89_32:
		next_state_r2 = LEGUP_F_upzero_BB__89_33;
LEGUP_F_upzero_BB__89_33:
		next_state_r2 = LEGUP_0;
LEGUP_F_upzero_BB_preheader1_10:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_11;
LEGUP_F_upzero_BB_preheader1_11:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_12;
LEGUP_F_upzero_BB_preheader1_12:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_13;
LEGUP_F_upzero_BB_preheader1_13:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_14;
LEGUP_F_upzero_BB_preheader1_14:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_15;
LEGUP_F_upzero_BB_preheader1_15:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_16;
LEGUP_F_upzero_BB_preheader1_16:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_17;
LEGUP_F_upzero_BB_preheader1_17:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_18;
LEGUP_F_upzero_BB_preheader1_18:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_19;
LEGUP_F_upzero_BB_preheader1_19:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_20;
LEGUP_F_upzero_BB_preheader1_2:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_3;
LEGUP_F_upzero_BB_preheader1_20:
		next_state_r2 = LEGUP_F_upzero_BB__89_28;
LEGUP_F_upzero_BB_preheader1_3:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_4;
LEGUP_F_upzero_BB_preheader1_4:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_5;
LEGUP_F_upzero_BB_preheader1_5:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_6;
LEGUP_F_upzero_BB_preheader1_6:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_7;
LEGUP_F_upzero_BB_preheader1_7:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_8;
LEGUP_F_upzero_BB_preheader1_8:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_9;
LEGUP_F_upzero_BB_preheader1_9:
		next_state_r2 = LEGUP_F_upzero_BB_preheader1_10;
LEGUP_F_upzero_BB_preheader_21:
		next_state_r2 = LEGUP_F_upzero_BB_preheader_22;
LEGUP_F_upzero_BB_preheader_22:
		next_state_r2 = LEGUP_F_upzero_BB_preheader_23;
LEGUP_F_upzero_BB_preheader_23:
		next_state_r2 = LEGUP_F_upzero_BB_preheader_24;
LEGUP_F_upzero_BB_preheader_24:
		next_state_r2 = LEGUP_F_upzero_BB_preheader_25;
LEGUP_F_upzero_BB_preheader_25:
		next_state_r2 = LEGUP_F_upzero_BB_preheader_26;
LEGUP_F_upzero_BB_preheader_26:
		next_state_r2 = LEGUP_F_upzero_BB_preheader_27;
LEGUP_F_upzero_BB_preheader_27:
		next_state_r2 = LEGUP_F_upzero_BB__89_28;
default:
	next_state_r2 = cur_state_r2;
endcase

end
always @(*) begin
	/* upzero: %0*/
	/*   %1 = icmp eq i32 %dlt, 0*/
		upzero_0_1_r0 = (arg_dlt == 32'd0);
end
always @(*) begin
	/* upzero: %0*/
	/*   %1 = icmp eq i32 %dlt, 0*/
		upzero_0_1_r1 = (arg_dlt == 32'd0);
end
always @(*) begin
	/* upzero: %0*/
	/*   %1 = icmp eq i32 %dlt, 0*/
		upzero_0_1_r2 = (arg_dlt == 32'd0);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
		upzero_preheader1_2_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
		upzero_preheader1_2_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
		upzero_preheader1_2_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %3 = mul nsw i32 %2, %dlt*/
		upzero_preheader1_3_r0 = (upzero_preheader1_2_r0 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %3 = mul nsw i32 %2, %dlt*/
		upzero_preheader1_3_r1 = (upzero_preheader1_2_r1 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %3 = mul nsw i32 %2, %dlt*/
		upzero_preheader1_3_r2 = (upzero_preheader1_2_r2 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %4 = ashr i32 %3, 31*/
		upzero_preheader1_4_r0 = ($signed(upzero_preheader1_3_r0) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %4 = ashr i32 %3, 31*/
		upzero_preheader1_4_r1 = ($signed(upzero_preheader1_3_r1) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %4 = ashr i32 %3, 31*/
		upzero_preheader1_4_r2 = ($signed(upzero_preheader1_3_r2) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %5 = and i32 %4, -256*/
		upzero_preheader1_5_r0 = (upzero_preheader1_4_r0 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %5 = and i32 %4, -256*/
		upzero_preheader1_5_r1 = (upzero_preheader1_4_r1 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %5 = and i32 %4, -256*/
		upzero_preheader1_5_r2 = (upzero_preheader1_4_r2 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %6 = or i32 %5, 128*/
		upzero_preheader1_6_r0 = (upzero_preheader1_5_r0 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %6 = or i32 %5, 128*/
		upzero_preheader1_6_r1 = (upzero_preheader1_5_r1 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %6 = or i32 %5, 128*/
		upzero_preheader1_6_r2 = (upzero_preheader1_5_r2 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
		upzero_preheader1_7_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
		upzero_preheader1_7_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
		upzero_preheader1_7_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %8 = mul nsw i32 %7, 255*/
		upzero_preheader1_8_r0 = (upzero_preheader1_7_r0 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %8 = mul nsw i32 %7, 255*/
		upzero_preheader1_8_r1 = (upzero_preheader1_7_r1 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %8 = mul nsw i32 %7, 255*/
		upzero_preheader1_8_r2 = (upzero_preheader1_7_r2 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %9 = ashr i32 %8, 8*/
		upzero_preheader1_9_r0 = ($signed(upzero_preheader1_8_r0) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %9 = ashr i32 %8, 8*/
		upzero_preheader1_9_r1 = ($signed(upzero_preheader1_8_r1) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %9 = ashr i32 %8, 8*/
		upzero_preheader1_9_r2 = ($signed(upzero_preheader1_8_r2) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %10 = add nsw i32 %6, %9*/
		upzero_preheader1_10_r0 = upzero_signed_add_32_0_r0;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %10 = add nsw i32 %6, %9*/
		upzero_preheader1_10_r1 = upzero_signed_add_32_0_r1;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %10 = add nsw i32 %6, %9*/
		upzero_preheader1_10_r2 = upzero_signed_add_32_0_r2;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %11 = getelementptr inbounds i32* %dlti, i32 1*/
		upzero_preheader1_11_r0 = (arg_dlti + (4 * 32'd1));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %11 = getelementptr inbounds i32* %dlti, i32 1*/
		upzero_preheader1_11_r1 = (arg_dlti + (4 * 32'd1));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %11 = getelementptr inbounds i32* %dlti, i32 1*/
		upzero_preheader1_11_r2 = (arg_dlti + (4 * 32'd1));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_11_reg_r0 <= 0;
	/* upzero: %.preheader1*/
	/*   %11 = getelementptr inbounds i32* %dlti, i32 1*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_11_reg_r0 <= upzero_preheader1_11_r0;
		if (start == 1'b0 && ^(upzero_preheader1_11_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_11_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_11_reg_r1 <= 0;
	/* upzero: %.preheader1*/
	/*   %11 = getelementptr inbounds i32* %dlti, i32 1*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_11_reg_r1 <= upzero_preheader1_11_r1;
		if (start == 1'b0 && ^(upzero_preheader1_11_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_11_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_11_reg_r2 <= 0;
	/* upzero: %.preheader1*/
	/*   %11 = getelementptr inbounds i32* %dlti, i32 1*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_11_reg_r2 <= upzero_preheader1_11_r2;
		if (start == 1'b0 && ^(upzero_preheader1_11_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_11_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
		upzero_preheader1_12_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
		upzero_preheader1_12_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
		upzero_preheader1_12_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %13 = mul nsw i32 %12, %dlt*/
		upzero_preheader1_13_r0 = (upzero_preheader1_12_r0 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %13 = mul nsw i32 %12, %dlt*/
		upzero_preheader1_13_r1 = (upzero_preheader1_12_r1 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %13 = mul nsw i32 %12, %dlt*/
		upzero_preheader1_13_r2 = (upzero_preheader1_12_r2 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %14 = ashr i32 %13, 31*/
		upzero_preheader1_14_r0 = ($signed(upzero_preheader1_13_r0) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %14 = ashr i32 %13, 31*/
		upzero_preheader1_14_r1 = ($signed(upzero_preheader1_13_r1) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %14 = ashr i32 %13, 31*/
		upzero_preheader1_14_r2 = ($signed(upzero_preheader1_13_r2) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %15 = and i32 %14, -256*/
		upzero_preheader1_15_r0 = (upzero_preheader1_14_r0 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %15 = and i32 %14, -256*/
		upzero_preheader1_15_r1 = (upzero_preheader1_14_r1 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %15 = and i32 %14, -256*/
		upzero_preheader1_15_r2 = (upzero_preheader1_14_r2 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %16 = or i32 %15, 128*/
		upzero_preheader1_16_r0 = (upzero_preheader1_15_r0 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %16 = or i32 %15, 128*/
		upzero_preheader1_16_r1 = (upzero_preheader1_15_r1 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %16 = or i32 %15, 128*/
		upzero_preheader1_16_r2 = (upzero_preheader1_15_r2 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %17 = getelementptr inbounds i32* %bli, i32 1*/
		upzero_preheader1_17_r0 = (arg_bli + (4 * 32'd1));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %17 = getelementptr inbounds i32* %bli, i32 1*/
		upzero_preheader1_17_r1 = (arg_bli + (4 * 32'd1));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %17 = getelementptr inbounds i32* %bli, i32 1*/
		upzero_preheader1_17_r2 = (arg_bli + (4 * 32'd1));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_17_reg_r0 <= 0;
	/* upzero: %.preheader1*/
	/*   %17 = getelementptr inbounds i32* %bli, i32 1*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_17_reg_r0 <= upzero_preheader1_17_r0;
		if (start == 1'b0 && ^(upzero_preheader1_17_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_17_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_17_reg_r1 <= 0;
	/* upzero: %.preheader1*/
	/*   %17 = getelementptr inbounds i32* %bli, i32 1*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_17_reg_r1 <= upzero_preheader1_17_r1;
		if (start == 1'b0 && ^(upzero_preheader1_17_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_17_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_17_reg_r2 <= 0;
	/* upzero: %.preheader1*/
	/*   %17 = getelementptr inbounds i32* %bli, i32 1*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_17_reg_r2 <= upzero_preheader1_17_r2;
		if (start == 1'b0 && ^(upzero_preheader1_17_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_17_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
		upzero_preheader1_18_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
		upzero_preheader1_18_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
		upzero_preheader1_18_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %19 = mul nsw i32 %18, 255*/
		upzero_preheader1_19_r0 = (upzero_preheader1_18_r0 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %19 = mul nsw i32 %18, 255*/
		upzero_preheader1_19_r1 = (upzero_preheader1_18_r1 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %19 = mul nsw i32 %18, 255*/
		upzero_preheader1_19_r2 = (upzero_preheader1_18_r2 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %20 = ashr i32 %19, 8*/
		upzero_preheader1_20_r0 = ($signed(upzero_preheader1_19_r0) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %20 = ashr i32 %19, 8*/
		upzero_preheader1_20_r1 = ($signed(upzero_preheader1_19_r1) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %20 = ashr i32 %19, 8*/
		upzero_preheader1_20_r2 = ($signed(upzero_preheader1_19_r2) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %21 = add nsw i32 %16, %20*/
		upzero_preheader1_21_r0 = upzero_signed_add_32_0_r0;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %21 = add nsw i32 %16, %20*/
		upzero_preheader1_21_r1 = upzero_signed_add_32_0_r1;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %21 = add nsw i32 %16, %20*/
		upzero_preheader1_21_r2 = upzero_signed_add_32_0_r2;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %22 = getelementptr inbounds i32* %dlti, i32 2*/
		upzero_preheader1_22_r0 = (arg_dlti + (4 * 32'd2));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %22 = getelementptr inbounds i32* %dlti, i32 2*/
		upzero_preheader1_22_r1 = (arg_dlti + (4 * 32'd2));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %22 = getelementptr inbounds i32* %dlti, i32 2*/
		upzero_preheader1_22_r2 = (arg_dlti + (4 * 32'd2));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_22_reg_r0 <= 0;
	/* upzero: %.preheader1*/
	/*   %22 = getelementptr inbounds i32* %dlti, i32 2*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_22_reg_r0 <= upzero_preheader1_22_r0;
		if (start == 1'b0 && ^(upzero_preheader1_22_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_22_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_22_reg_r1 <= 0;
	/* upzero: %.preheader1*/
	/*   %22 = getelementptr inbounds i32* %dlti, i32 2*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_22_reg_r1 <= upzero_preheader1_22_r1;
		if (start == 1'b0 && ^(upzero_preheader1_22_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_22_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_22_reg_r2 <= 0;
	/* upzero: %.preheader1*/
	/*   %22 = getelementptr inbounds i32* %dlti, i32 2*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_22_reg_r2 <= upzero_preheader1_22_r2;
		if (start == 1'b0 && ^(upzero_preheader1_22_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_22_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
		upzero_preheader1_23_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
		upzero_preheader1_23_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
		upzero_preheader1_23_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %24 = mul nsw i32 %23, %dlt*/
		upzero_preheader1_24_r0 = (upzero_preheader1_23_r0 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %24 = mul nsw i32 %23, %dlt*/
		upzero_preheader1_24_r1 = (upzero_preheader1_23_r1 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %24 = mul nsw i32 %23, %dlt*/
		upzero_preheader1_24_r2 = (upzero_preheader1_23_r2 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %25 = ashr i32 %24, 31*/
		upzero_preheader1_25_r0 = ($signed(upzero_preheader1_24_r0) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %25 = ashr i32 %24, 31*/
		upzero_preheader1_25_r1 = ($signed(upzero_preheader1_24_r1) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %25 = ashr i32 %24, 31*/
		upzero_preheader1_25_r2 = ($signed(upzero_preheader1_24_r2) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %26 = and i32 %25, -256*/
		upzero_preheader1_26_r0 = (upzero_preheader1_25_r0 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %26 = and i32 %25, -256*/
		upzero_preheader1_26_r1 = (upzero_preheader1_25_r1 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %26 = and i32 %25, -256*/
		upzero_preheader1_26_r2 = (upzero_preheader1_25_r2 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %27 = or i32 %26, 128*/
		upzero_preheader1_27_r0 = (upzero_preheader1_26_r0 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %27 = or i32 %26, 128*/
		upzero_preheader1_27_r1 = (upzero_preheader1_26_r1 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %27 = or i32 %26, 128*/
		upzero_preheader1_27_r2 = (upzero_preheader1_26_r2 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %28 = getelementptr inbounds i32* %bli, i32 2*/
		upzero_preheader1_28_r0 = (arg_bli + (4 * 32'd2));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %28 = getelementptr inbounds i32* %bli, i32 2*/
		upzero_preheader1_28_r1 = (arg_bli + (4 * 32'd2));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %28 = getelementptr inbounds i32* %bli, i32 2*/
		upzero_preheader1_28_r2 = (arg_bli + (4 * 32'd2));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_28_reg_r0 <= 0;
	/* upzero: %.preheader1*/
	/*   %28 = getelementptr inbounds i32* %bli, i32 2*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_28_reg_r0 <= upzero_preheader1_28_r0;
		if (start == 1'b0 && ^(upzero_preheader1_28_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_28_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_28_reg_r1 <= 0;
	/* upzero: %.preheader1*/
	/*   %28 = getelementptr inbounds i32* %bli, i32 2*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_28_reg_r1 <= upzero_preheader1_28_r1;
		if (start == 1'b0 && ^(upzero_preheader1_28_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_28_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_28_reg_r2 <= 0;
	/* upzero: %.preheader1*/
	/*   %28 = getelementptr inbounds i32* %bli, i32 2*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_28_reg_r2 <= upzero_preheader1_28_r2;
		if (start == 1'b0 && ^(upzero_preheader1_28_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_28_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
		upzero_preheader1_29_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
		upzero_preheader1_29_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
		upzero_preheader1_29_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %30 = mul nsw i32 %29, 255*/
		upzero_preheader1_30_r0 = (upzero_preheader1_29_r0 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %30 = mul nsw i32 %29, 255*/
		upzero_preheader1_30_r1 = (upzero_preheader1_29_r1 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %30 = mul nsw i32 %29, 255*/
		upzero_preheader1_30_r2 = (upzero_preheader1_29_r2 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %31 = ashr i32 %30, 8*/
		upzero_preheader1_31_r0 = ($signed(upzero_preheader1_30_r0) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %31 = ashr i32 %30, 8*/
		upzero_preheader1_31_r1 = ($signed(upzero_preheader1_30_r1) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %31 = ashr i32 %30, 8*/
		upzero_preheader1_31_r2 = ($signed(upzero_preheader1_30_r2) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %32 = add nsw i32 %27, %31*/
		upzero_preheader1_32_r0 = upzero_signed_add_32_0_r0;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %32 = add nsw i32 %27, %31*/
		upzero_preheader1_32_r1 = upzero_signed_add_32_0_r1;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %32 = add nsw i32 %27, %31*/
		upzero_preheader1_32_r2 = upzero_signed_add_32_0_r2;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %33 = getelementptr inbounds i32* %dlti, i32 3*/
		upzero_preheader1_33_r0 = (arg_dlti + (4 * 32'd3));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %33 = getelementptr inbounds i32* %dlti, i32 3*/
		upzero_preheader1_33_r1 = (arg_dlti + (4 * 32'd3));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %33 = getelementptr inbounds i32* %dlti, i32 3*/
		upzero_preheader1_33_r2 = (arg_dlti + (4 * 32'd3));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_33_reg_r0 <= 0;
	/* upzero: %.preheader1*/
	/*   %33 = getelementptr inbounds i32* %dlti, i32 3*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_33_reg_r0 <= upzero_preheader1_33_r0;
		if (start == 1'b0 && ^(upzero_preheader1_33_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_33_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_33_reg_r1 <= 0;
	/* upzero: %.preheader1*/
	/*   %33 = getelementptr inbounds i32* %dlti, i32 3*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_33_reg_r1 <= upzero_preheader1_33_r1;
		if (start == 1'b0 && ^(upzero_preheader1_33_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_33_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_33_reg_r2 <= 0;
	/* upzero: %.preheader1*/
	/*   %33 = getelementptr inbounds i32* %dlti, i32 3*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_33_reg_r2 <= upzero_preheader1_33_r2;
		if (start == 1'b0 && ^(upzero_preheader1_33_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_33_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
		upzero_preheader1_34_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
		upzero_preheader1_34_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
		upzero_preheader1_34_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %35 = mul nsw i32 %34, %dlt*/
		upzero_preheader1_35_r0 = (upzero_preheader1_34_r0 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %35 = mul nsw i32 %34, %dlt*/
		upzero_preheader1_35_r1 = (upzero_preheader1_34_r1 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %35 = mul nsw i32 %34, %dlt*/
		upzero_preheader1_35_r2 = (upzero_preheader1_34_r2 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %36 = ashr i32 %35, 31*/
		upzero_preheader1_36_r0 = ($signed(upzero_preheader1_35_r0) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %36 = ashr i32 %35, 31*/
		upzero_preheader1_36_r1 = ($signed(upzero_preheader1_35_r1) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %36 = ashr i32 %35, 31*/
		upzero_preheader1_36_r2 = ($signed(upzero_preheader1_35_r2) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %37 = and i32 %36, -256*/
		upzero_preheader1_37_r0 = (upzero_preheader1_36_r0 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %37 = and i32 %36, -256*/
		upzero_preheader1_37_r1 = (upzero_preheader1_36_r1 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %37 = and i32 %36, -256*/
		upzero_preheader1_37_r2 = (upzero_preheader1_36_r2 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %38 = or i32 %37, 128*/
		upzero_preheader1_38_r0 = (upzero_preheader1_37_r0 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %38 = or i32 %37, 128*/
		upzero_preheader1_38_r1 = (upzero_preheader1_37_r1 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %38 = or i32 %37, 128*/
		upzero_preheader1_38_r2 = (upzero_preheader1_37_r2 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %39 = getelementptr inbounds i32* %bli, i32 3*/
		upzero_preheader1_39_r0 = (arg_bli + (4 * 32'd3));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %39 = getelementptr inbounds i32* %bli, i32 3*/
		upzero_preheader1_39_r1 = (arg_bli + (4 * 32'd3));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %39 = getelementptr inbounds i32* %bli, i32 3*/
		upzero_preheader1_39_r2 = (arg_bli + (4 * 32'd3));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_39_reg_r0 <= 0;
	/* upzero: %.preheader1*/
	/*   %39 = getelementptr inbounds i32* %bli, i32 3*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_39_reg_r0 <= upzero_preheader1_39_r0;
		if (start == 1'b0 && ^(upzero_preheader1_39_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_39_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_39_reg_r1 <= 0;
	/* upzero: %.preheader1*/
	/*   %39 = getelementptr inbounds i32* %bli, i32 3*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_39_reg_r1 <= upzero_preheader1_39_r1;
		if (start == 1'b0 && ^(upzero_preheader1_39_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_39_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_39_reg_r2 <= 0;
	/* upzero: %.preheader1*/
	/*   %39 = getelementptr inbounds i32* %bli, i32 3*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_39_reg_r2 <= upzero_preheader1_39_r2;
		if (start == 1'b0 && ^(upzero_preheader1_39_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_39_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
		upzero_preheader1_40_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
		upzero_preheader1_40_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
		upzero_preheader1_40_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %41 = mul nsw i32 %40, 255*/
		upzero_preheader1_41_r0 = (upzero_preheader1_40_r0 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %41 = mul nsw i32 %40, 255*/
		upzero_preheader1_41_r1 = (upzero_preheader1_40_r1 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %41 = mul nsw i32 %40, 255*/
		upzero_preheader1_41_r2 = (upzero_preheader1_40_r2 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %42 = ashr i32 %41, 8*/
		upzero_preheader1_42_r0 = ($signed(upzero_preheader1_41_r0) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %42 = ashr i32 %41, 8*/
		upzero_preheader1_42_r1 = ($signed(upzero_preheader1_41_r1) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %42 = ashr i32 %41, 8*/
		upzero_preheader1_42_r2 = ($signed(upzero_preheader1_41_r2) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %43 = add nsw i32 %38, %42*/
		upzero_preheader1_43_r0 = upzero_signed_add_32_0_r0;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %43 = add nsw i32 %38, %42*/
		upzero_preheader1_43_r1 = upzero_signed_add_32_0_r1;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %43 = add nsw i32 %38, %42*/
		upzero_preheader1_43_r2 = upzero_signed_add_32_0_r2;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %44 = getelementptr inbounds i32* %dlti, i32 4*/
		upzero_preheader1_44_r0 = (arg_dlti + (4 * 32'd4));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %44 = getelementptr inbounds i32* %dlti, i32 4*/
		upzero_preheader1_44_r1 = (arg_dlti + (4 * 32'd4));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %44 = getelementptr inbounds i32* %dlti, i32 4*/
		upzero_preheader1_44_r2 = (arg_dlti + (4 * 32'd4));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_44_reg_r0 <= 0;
	/* upzero: %.preheader1*/
	/*   %44 = getelementptr inbounds i32* %dlti, i32 4*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_44_reg_r0 <= upzero_preheader1_44_r0;
		if (start == 1'b0 && ^(upzero_preheader1_44_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_44_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_44_reg_r1 <= 0;
	/* upzero: %.preheader1*/
	/*   %44 = getelementptr inbounds i32* %dlti, i32 4*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_44_reg_r1 <= upzero_preheader1_44_r1;
		if (start == 1'b0 && ^(upzero_preheader1_44_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_44_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_44_reg_r2 <= 0;
	/* upzero: %.preheader1*/
	/*   %44 = getelementptr inbounds i32* %dlti, i32 4*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_44_reg_r2 <= upzero_preheader1_44_r2;
		if (start == 1'b0 && ^(upzero_preheader1_44_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_44_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
		upzero_preheader1_45_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
		upzero_preheader1_45_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
		upzero_preheader1_45_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %46 = mul nsw i32 %45, %dlt*/
		upzero_preheader1_46_r0 = (upzero_preheader1_45_r0 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %46 = mul nsw i32 %45, %dlt*/
		upzero_preheader1_46_r1 = (upzero_preheader1_45_r1 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %46 = mul nsw i32 %45, %dlt*/
		upzero_preheader1_46_r2 = (upzero_preheader1_45_r2 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %47 = ashr i32 %46, 31*/
		upzero_preheader1_47_r0 = ($signed(upzero_preheader1_46_r0) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %47 = ashr i32 %46, 31*/
		upzero_preheader1_47_r1 = ($signed(upzero_preheader1_46_r1) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %47 = ashr i32 %46, 31*/
		upzero_preheader1_47_r2 = ($signed(upzero_preheader1_46_r2) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %48 = and i32 %47, -256*/
		upzero_preheader1_48_r0 = (upzero_preheader1_47_r0 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %48 = and i32 %47, -256*/
		upzero_preheader1_48_r1 = (upzero_preheader1_47_r1 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %48 = and i32 %47, -256*/
		upzero_preheader1_48_r2 = (upzero_preheader1_47_r2 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %49 = or i32 %48, 128*/
		upzero_preheader1_49_r0 = (upzero_preheader1_48_r0 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %49 = or i32 %48, 128*/
		upzero_preheader1_49_r1 = (upzero_preheader1_48_r1 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %49 = or i32 %48, 128*/
		upzero_preheader1_49_r2 = (upzero_preheader1_48_r2 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %50 = getelementptr inbounds i32* %bli, i32 4*/
		upzero_preheader1_50_r0 = (arg_bli + (4 * 32'd4));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %50 = getelementptr inbounds i32* %bli, i32 4*/
		upzero_preheader1_50_r1 = (arg_bli + (4 * 32'd4));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %50 = getelementptr inbounds i32* %bli, i32 4*/
		upzero_preheader1_50_r2 = (arg_bli + (4 * 32'd4));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_50_reg_r0 <= 0;
	/* upzero: %.preheader1*/
	/*   %50 = getelementptr inbounds i32* %bli, i32 4*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_50_reg_r0 <= upzero_preheader1_50_r0;
		if (start == 1'b0 && ^(upzero_preheader1_50_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_50_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_50_reg_r1 <= 0;
	/* upzero: %.preheader1*/
	/*   %50 = getelementptr inbounds i32* %bli, i32 4*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_50_reg_r1 <= upzero_preheader1_50_r1;
		if (start == 1'b0 && ^(upzero_preheader1_50_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_50_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_50_reg_r2 <= 0;
	/* upzero: %.preheader1*/
	/*   %50 = getelementptr inbounds i32* %bli, i32 4*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_50_reg_r2 <= upzero_preheader1_50_r2;
		if (start == 1'b0 && ^(upzero_preheader1_50_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_50_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
		upzero_preheader1_51_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
		upzero_preheader1_51_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
		upzero_preheader1_51_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %52 = mul nsw i32 %51, 255*/
		upzero_preheader1_52_r0 = (upzero_preheader1_51_r0 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %52 = mul nsw i32 %51, 255*/
		upzero_preheader1_52_r1 = (upzero_preheader1_51_r1 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %52 = mul nsw i32 %51, 255*/
		upzero_preheader1_52_r2 = (upzero_preheader1_51_r2 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %53 = ashr i32 %52, 8*/
		upzero_preheader1_53_r0 = ($signed(upzero_preheader1_52_r0) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %53 = ashr i32 %52, 8*/
		upzero_preheader1_53_r1 = ($signed(upzero_preheader1_52_r1) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %53 = ashr i32 %52, 8*/
		upzero_preheader1_53_r2 = ($signed(upzero_preheader1_52_r2) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %54 = add nsw i32 %49, %53*/
		upzero_preheader1_54_r0 = upzero_signed_add_32_0_r0;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %54 = add nsw i32 %49, %53*/
		upzero_preheader1_54_r1 = upzero_signed_add_32_0_r1;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %54 = add nsw i32 %49, %53*/
		upzero_preheader1_54_r2 = upzero_signed_add_32_0_r2;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %55 = getelementptr inbounds i32* %dlti, i32 5*/
		upzero_preheader1_55_r0 = (arg_dlti + (4 * 32'd5));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %55 = getelementptr inbounds i32* %dlti, i32 5*/
		upzero_preheader1_55_r1 = (arg_dlti + (4 * 32'd5));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %55 = getelementptr inbounds i32* %dlti, i32 5*/
		upzero_preheader1_55_r2 = (arg_dlti + (4 * 32'd5));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_55_reg_r0 <= 0;
	/* upzero: %.preheader1*/
	/*   %55 = getelementptr inbounds i32* %dlti, i32 5*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_55_reg_r0 <= upzero_preheader1_55_r0;
		if (start == 1'b0 && ^(upzero_preheader1_55_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_55_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_55_reg_r1 <= 0;
	/* upzero: %.preheader1*/
	/*   %55 = getelementptr inbounds i32* %dlti, i32 5*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_55_reg_r1 <= upzero_preheader1_55_r1;
		if (start == 1'b0 && ^(upzero_preheader1_55_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_55_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_55_reg_r2 <= 0;
	/* upzero: %.preheader1*/
	/*   %55 = getelementptr inbounds i32* %dlti, i32 5*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_55_reg_r2 <= upzero_preheader1_55_r2;
		if (start == 1'b0 && ^(upzero_preheader1_55_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_55_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
		upzero_preheader1_56_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
		upzero_preheader1_56_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
		upzero_preheader1_56_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %57 = mul nsw i32 %56, %dlt*/
		upzero_preheader1_57_r0 = (upzero_preheader1_56_r0 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %57 = mul nsw i32 %56, %dlt*/
		upzero_preheader1_57_r1 = (upzero_preheader1_56_r1 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %57 = mul nsw i32 %56, %dlt*/
		upzero_preheader1_57_r2 = (upzero_preheader1_56_r2 * arg_dlt);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %58 = ashr i32 %57, 31*/
		upzero_preheader1_58_r0 = ($signed(upzero_preheader1_57_r0) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %58 = ashr i32 %57, 31*/
		upzero_preheader1_58_r1 = ($signed(upzero_preheader1_57_r1) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %58 = ashr i32 %57, 31*/
		upzero_preheader1_58_r2 = ($signed(upzero_preheader1_57_r2) >>> 32'd31);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %59 = and i32 %58, -256*/
		upzero_preheader1_59_r0 = (upzero_preheader1_58_r0 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %59 = and i32 %58, -256*/
		upzero_preheader1_59_r1 = (upzero_preheader1_58_r1 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %59 = and i32 %58, -256*/
		upzero_preheader1_59_r2 = (upzero_preheader1_58_r2 & -32'd256);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %60 = or i32 %59, 128*/
		upzero_preheader1_60_r0 = (upzero_preheader1_59_r0 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %60 = or i32 %59, 128*/
		upzero_preheader1_60_r1 = (upzero_preheader1_59_r1 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %60 = or i32 %59, 128*/
		upzero_preheader1_60_r2 = (upzero_preheader1_59_r2 | 32'd128);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %61 = getelementptr inbounds i32* %bli, i32 5*/
		upzero_preheader1_61_r0 = (arg_bli + (4 * 32'd5));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %61 = getelementptr inbounds i32* %bli, i32 5*/
		upzero_preheader1_61_r1 = (arg_bli + (4 * 32'd5));
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %61 = getelementptr inbounds i32* %bli, i32 5*/
		upzero_preheader1_61_r2 = (arg_bli + (4 * 32'd5));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_61_reg_r0 <= 0;
	/* upzero: %.preheader1*/
	/*   %61 = getelementptr inbounds i32* %bli, i32 5*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_61_reg_r0 <= upzero_preheader1_61_r0;
		if (start == 1'b0 && ^(upzero_preheader1_61_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_61_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_61_reg_r1 <= 0;
	/* upzero: %.preheader1*/
	/*   %61 = getelementptr inbounds i32* %bli, i32 5*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_61_reg_r1 <= upzero_preheader1_61_r1;
		if (start == 1'b0 && ^(upzero_preheader1_61_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_61_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader1_61_reg_r2 <= 0;
	/* upzero: %.preheader1*/
	/*   %61 = getelementptr inbounds i32* %bli, i32 5*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_61_reg_r2 <= upzero_preheader1_61_r2;
		if (start == 1'b0 && ^(upzero_preheader1_61_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_61_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
		upzero_preheader1_62_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
		upzero_preheader1_62_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
		upzero_preheader1_62_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %63 = mul nsw i32 %62, 255*/
		upzero_preheader1_63_r0 = (upzero_preheader1_62_r0 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %63 = mul nsw i32 %62, 255*/
		upzero_preheader1_63_r1 = (upzero_preheader1_62_r1 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %63 = mul nsw i32 %62, 255*/
		upzero_preheader1_63_r2 = (upzero_preheader1_62_r2 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %64 = ashr i32 %63, 8*/
		upzero_preheader1_64_r0 = ($signed(upzero_preheader1_63_r0) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %64 = ashr i32 %63, 8*/
		upzero_preheader1_64_r1 = ($signed(upzero_preheader1_63_r1) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %64 = ashr i32 %63, 8*/
		upzero_preheader1_64_r2 = ($signed(upzero_preheader1_63_r2) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %65 = add nsw i32 %60, %64*/
		upzero_preheader1_65_r0 = upzero_signed_add_32_0_r0;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %65 = add nsw i32 %60, %64*/
		upzero_preheader1_65_r1 = upzero_signed_add_32_0_r1;
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %65 = add nsw i32 %60, %64*/
		upzero_preheader1_65_r2 = upzero_signed_add_32_0_r2;
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
		upzero_preheader_66_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
		upzero_preheader_66_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
		upzero_preheader_66_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %67 = mul nsw i32 %66, 255*/
		upzero_preheader_67_r0 = (upzero_preheader_66_r0 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %67 = mul nsw i32 %66, 255*/
		upzero_preheader_67_r1 = (upzero_preheader_66_r1 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %67 = mul nsw i32 %66, 255*/
		upzero_preheader_67_r2 = (upzero_preheader_66_r2 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %68 = ashr i32 %67, 8*/
		upzero_preheader_68_r0 = ($signed(upzero_preheader_67_r0) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %68 = ashr i32 %67, 8*/
		upzero_preheader_68_r1 = ($signed(upzero_preheader_67_r1) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %68 = ashr i32 %67, 8*/
		upzero_preheader_68_r2 = ($signed(upzero_preheader_67_r2) >>> 32'd8);
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_68_reg_r0 <= 0;
	/* upzero: %.preheader*/
	/*   %68 = ashr i32 %67, 8*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader_23)) begin
		upzero_preheader_68_reg_r0 <= upzero_preheader_68_r0;
		if (start == 1'b0 && ^(upzero_preheader_68_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_68_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_68_reg_r1 <= 0;
	/* upzero: %.preheader*/
	/*   %68 = ashr i32 %67, 8*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader_23)) begin
		upzero_preheader_68_reg_r1 <= upzero_preheader_68_r1;
		if (start == 1'b0 && ^(upzero_preheader_68_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_68_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_68_reg_r2 <= 0;
	/* upzero: %.preheader*/
	/*   %68 = ashr i32 %67, 8*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader_23)) begin
		upzero_preheader_68_reg_r2 <= upzero_preheader_68_r2;
		if (start == 1'b0 && ^(upzero_preheader_68_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_68_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %69 = getelementptr inbounds i32* %bli, i32 1*/
		upzero_preheader_69_r0 = (arg_bli + (4 * 32'd1));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %69 = getelementptr inbounds i32* %bli, i32 1*/
		upzero_preheader_69_r1 = (arg_bli + (4 * 32'd1));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %69 = getelementptr inbounds i32* %bli, i32 1*/
		upzero_preheader_69_r2 = (arg_bli + (4 * 32'd1));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_69_reg_r0 <= 0;
	/* upzero: %.preheader*/
	/*   %69 = getelementptr inbounds i32* %bli, i32 1*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_69_reg_r0 <= upzero_preheader_69_r0;
		if (start == 1'b0 && ^(upzero_preheader_69_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_69_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_69_reg_r1 <= 0;
	/* upzero: %.preheader*/
	/*   %69 = getelementptr inbounds i32* %bli, i32 1*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_69_reg_r1 <= upzero_preheader_69_r1;
		if (start == 1'b0 && ^(upzero_preheader_69_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_69_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_69_reg_r2 <= 0;
	/* upzero: %.preheader*/
	/*   %69 = getelementptr inbounds i32* %bli, i32 1*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_69_reg_r2 <= upzero_preheader_69_r2;
		if (start == 1'b0 && ^(upzero_preheader_69_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_69_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
		upzero_preheader_70_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
		upzero_preheader_70_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
		upzero_preheader_70_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %71 = mul nsw i32 %70, 255*/
		upzero_preheader_71_r0 = (upzero_preheader_70_r0 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %71 = mul nsw i32 %70, 255*/
		upzero_preheader_71_r1 = (upzero_preheader_70_r1 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %71 = mul nsw i32 %70, 255*/
		upzero_preheader_71_r2 = (upzero_preheader_70_r2 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %72 = ashr i32 %71, 8*/
		upzero_preheader_72_r0 = ($signed(upzero_preheader_71_r0) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %72 = ashr i32 %71, 8*/
		upzero_preheader_72_r1 = ($signed(upzero_preheader_71_r1) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %72 = ashr i32 %71, 8*/
		upzero_preheader_72_r2 = ($signed(upzero_preheader_71_r2) >>> 32'd8);
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_72_reg_r0 <= 0;
	/* upzero: %.preheader*/
	/*   %72 = ashr i32 %71, 8*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader_23)) begin
		upzero_preheader_72_reg_r0 <= upzero_preheader_72_r0;
		if (start == 1'b0 && ^(upzero_preheader_72_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_72_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_72_reg_r1 <= 0;
	/* upzero: %.preheader*/
	/*   %72 = ashr i32 %71, 8*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader_23)) begin
		upzero_preheader_72_reg_r1 <= upzero_preheader_72_r1;
		if (start == 1'b0 && ^(upzero_preheader_72_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_72_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_72_reg_r2 <= 0;
	/* upzero: %.preheader*/
	/*   %72 = ashr i32 %71, 8*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader_23)) begin
		upzero_preheader_72_reg_r2 <= upzero_preheader_72_r2;
		if (start == 1'b0 && ^(upzero_preheader_72_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_72_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %73 = getelementptr inbounds i32* %bli, i32 2*/
		upzero_preheader_73_r0 = (arg_bli + (4 * 32'd2));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %73 = getelementptr inbounds i32* %bli, i32 2*/
		upzero_preheader_73_r1 = (arg_bli + (4 * 32'd2));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %73 = getelementptr inbounds i32* %bli, i32 2*/
		upzero_preheader_73_r2 = (arg_bli + (4 * 32'd2));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_73_reg_r0 <= 0;
	/* upzero: %.preheader*/
	/*   %73 = getelementptr inbounds i32* %bli, i32 2*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_73_reg_r0 <= upzero_preheader_73_r0;
		if (start == 1'b0 && ^(upzero_preheader_73_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_73_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_73_reg_r1 <= 0;
	/* upzero: %.preheader*/
	/*   %73 = getelementptr inbounds i32* %bli, i32 2*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_73_reg_r1 <= upzero_preheader_73_r1;
		if (start == 1'b0 && ^(upzero_preheader_73_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_73_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_73_reg_r2 <= 0;
	/* upzero: %.preheader*/
	/*   %73 = getelementptr inbounds i32* %bli, i32 2*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_73_reg_r2 <= upzero_preheader_73_r2;
		if (start == 1'b0 && ^(upzero_preheader_73_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_73_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
		upzero_preheader_74_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
		upzero_preheader_74_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
		upzero_preheader_74_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %75 = mul nsw i32 %74, 255*/
		upzero_preheader_75_r0 = (upzero_preheader_74_r0 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %75 = mul nsw i32 %74, 255*/
		upzero_preheader_75_r1 = (upzero_preheader_74_r1 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %75 = mul nsw i32 %74, 255*/
		upzero_preheader_75_r2 = (upzero_preheader_74_r2 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %76 = ashr i32 %75, 8*/
		upzero_preheader_76_r0 = ($signed(upzero_preheader_75_r0) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %76 = ashr i32 %75, 8*/
		upzero_preheader_76_r1 = ($signed(upzero_preheader_75_r1) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %76 = ashr i32 %75, 8*/
		upzero_preheader_76_r2 = ($signed(upzero_preheader_75_r2) >>> 32'd8);
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_76_reg_r0 <= 0;
	/* upzero: %.preheader*/
	/*   %76 = ashr i32 %75, 8*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader_24)) begin
		upzero_preheader_76_reg_r0 <= upzero_preheader_76_r0;
		if (start == 1'b0 && ^(upzero_preheader_76_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_76_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_76_reg_r1 <= 0;
	/* upzero: %.preheader*/
	/*   %76 = ashr i32 %75, 8*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader_24)) begin
		upzero_preheader_76_reg_r1 <= upzero_preheader_76_r1;
		if (start == 1'b0 && ^(upzero_preheader_76_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_76_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_76_reg_r2 <= 0;
	/* upzero: %.preheader*/
	/*   %76 = ashr i32 %75, 8*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader_24)) begin
		upzero_preheader_76_reg_r2 <= upzero_preheader_76_r2;
		if (start == 1'b0 && ^(upzero_preheader_76_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_76_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %77 = getelementptr inbounds i32* %bli, i32 3*/
		upzero_preheader_77_r0 = (arg_bli + (4 * 32'd3));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %77 = getelementptr inbounds i32* %bli, i32 3*/
		upzero_preheader_77_r1 = (arg_bli + (4 * 32'd3));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %77 = getelementptr inbounds i32* %bli, i32 3*/
		upzero_preheader_77_r2 = (arg_bli + (4 * 32'd3));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_77_reg_r0 <= 0;
	/* upzero: %.preheader*/
	/*   %77 = getelementptr inbounds i32* %bli, i32 3*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_77_reg_r0 <= upzero_preheader_77_r0;
		if (start == 1'b0 && ^(upzero_preheader_77_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_77_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_77_reg_r1 <= 0;
	/* upzero: %.preheader*/
	/*   %77 = getelementptr inbounds i32* %bli, i32 3*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_77_reg_r1 <= upzero_preheader_77_r1;
		if (start == 1'b0 && ^(upzero_preheader_77_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_77_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_77_reg_r2 <= 0;
	/* upzero: %.preheader*/
	/*   %77 = getelementptr inbounds i32* %bli, i32 3*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_77_reg_r2 <= upzero_preheader_77_r2;
		if (start == 1'b0 && ^(upzero_preheader_77_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_77_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
		upzero_preheader_78_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
		upzero_preheader_78_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
		upzero_preheader_78_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %79 = mul nsw i32 %78, 255*/
		upzero_preheader_79_r0 = (upzero_preheader_78_r0 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %79 = mul nsw i32 %78, 255*/
		upzero_preheader_79_r1 = (upzero_preheader_78_r1 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %79 = mul nsw i32 %78, 255*/
		upzero_preheader_79_r2 = (upzero_preheader_78_r2 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %80 = ashr i32 %79, 8*/
		upzero_preheader_80_r0 = ($signed(upzero_preheader_79_r0) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %80 = ashr i32 %79, 8*/
		upzero_preheader_80_r1 = ($signed(upzero_preheader_79_r1) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %80 = ashr i32 %79, 8*/
		upzero_preheader_80_r2 = ($signed(upzero_preheader_79_r2) >>> 32'd8);
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_80_reg_r0 <= 0;
	/* upzero: %.preheader*/
	/*   %80 = ashr i32 %79, 8*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader_24)) begin
		upzero_preheader_80_reg_r0 <= upzero_preheader_80_r0;
		if (start == 1'b0 && ^(upzero_preheader_80_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_80_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_80_reg_r1 <= 0;
	/* upzero: %.preheader*/
	/*   %80 = ashr i32 %79, 8*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader_24)) begin
		upzero_preheader_80_reg_r1 <= upzero_preheader_80_r1;
		if (start == 1'b0 && ^(upzero_preheader_80_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_80_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_80_reg_r2 <= 0;
	/* upzero: %.preheader*/
	/*   %80 = ashr i32 %79, 8*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader_24)) begin
		upzero_preheader_80_reg_r2 <= upzero_preheader_80_r2;
		if (start == 1'b0 && ^(upzero_preheader_80_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_80_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %81 = getelementptr inbounds i32* %bli, i32 4*/
		upzero_preheader_81_r0 = (arg_bli + (4 * 32'd4));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %81 = getelementptr inbounds i32* %bli, i32 4*/
		upzero_preheader_81_r1 = (arg_bli + (4 * 32'd4));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %81 = getelementptr inbounds i32* %bli, i32 4*/
		upzero_preheader_81_r2 = (arg_bli + (4 * 32'd4));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_81_reg_r0 <= 0;
	/* upzero: %.preheader*/
	/*   %81 = getelementptr inbounds i32* %bli, i32 4*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_81_reg_r0 <= upzero_preheader_81_r0;
		if (start == 1'b0 && ^(upzero_preheader_81_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_81_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_81_reg_r1 <= 0;
	/* upzero: %.preheader*/
	/*   %81 = getelementptr inbounds i32* %bli, i32 4*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_81_reg_r1 <= upzero_preheader_81_r1;
		if (start == 1'b0 && ^(upzero_preheader_81_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_81_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_81_reg_r2 <= 0;
	/* upzero: %.preheader*/
	/*   %81 = getelementptr inbounds i32* %bli, i32 4*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_81_reg_r2 <= upzero_preheader_81_r2;
		if (start == 1'b0 && ^(upzero_preheader_81_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_81_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
		upzero_preheader_82_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
		upzero_preheader_82_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
		upzero_preheader_82_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %83 = mul nsw i32 %82, 255*/
		upzero_preheader_83_r0 = (upzero_preheader_82_r0 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %83 = mul nsw i32 %82, 255*/
		upzero_preheader_83_r1 = (upzero_preheader_82_r1 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %83 = mul nsw i32 %82, 255*/
		upzero_preheader_83_r2 = (upzero_preheader_82_r2 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %84 = ashr i32 %83, 8*/
		upzero_preheader_84_r0 = ($signed(upzero_preheader_83_r0) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %84 = ashr i32 %83, 8*/
		upzero_preheader_84_r1 = ($signed(upzero_preheader_83_r1) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %84 = ashr i32 %83, 8*/
		upzero_preheader_84_r2 = ($signed(upzero_preheader_83_r2) >>> 32'd8);
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_84_reg_r0 <= 0;
	/* upzero: %.preheader*/
	/*   %84 = ashr i32 %83, 8*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader_25)) begin
		upzero_preheader_84_reg_r0 <= upzero_preheader_84_r0;
		if (start == 1'b0 && ^(upzero_preheader_84_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_84_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_84_reg_r1 <= 0;
	/* upzero: %.preheader*/
	/*   %84 = ashr i32 %83, 8*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader_25)) begin
		upzero_preheader_84_reg_r1 <= upzero_preheader_84_r1;
		if (start == 1'b0 && ^(upzero_preheader_84_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_84_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_84_reg_r2 <= 0;
	/* upzero: %.preheader*/
	/*   %84 = ashr i32 %83, 8*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader_25)) begin
		upzero_preheader_84_reg_r2 <= upzero_preheader_84_r2;
		if (start == 1'b0 && ^(upzero_preheader_84_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_84_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %85 = getelementptr inbounds i32* %bli, i32 5*/
		upzero_preheader_85_r0 = (arg_bli + (4 * 32'd5));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %85 = getelementptr inbounds i32* %bli, i32 5*/
		upzero_preheader_85_r1 = (arg_bli + (4 * 32'd5));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %85 = getelementptr inbounds i32* %bli, i32 5*/
		upzero_preheader_85_r2 = (arg_bli + (4 * 32'd5));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_85_reg_r0 <= 0;
	/* upzero: %.preheader*/
	/*   %85 = getelementptr inbounds i32* %bli, i32 5*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_85_reg_r0 <= upzero_preheader_85_r0;
		if (start == 1'b0 && ^(upzero_preheader_85_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_85_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_85_reg_r1 <= 0;
	/* upzero: %.preheader*/
	/*   %85 = getelementptr inbounds i32* %bli, i32 5*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_85_reg_r1 <= upzero_preheader_85_r1;
		if (start == 1'b0 && ^(upzero_preheader_85_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_85_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_85_reg_r2 <= 0;
	/* upzero: %.preheader*/
	/*   %85 = getelementptr inbounds i32* %bli, i32 5*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_85_reg_r2 <= upzero_preheader_85_r2;
		if (start == 1'b0 && ^(upzero_preheader_85_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_85_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
		upzero_preheader_86_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
		upzero_preheader_86_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
		upzero_preheader_86_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %87 = mul nsw i32 %86, 255*/
		upzero_preheader_87_r0 = (upzero_preheader_86_r0 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %87 = mul nsw i32 %86, 255*/
		upzero_preheader_87_r1 = (upzero_preheader_86_r1 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %87 = mul nsw i32 %86, 255*/
		upzero_preheader_87_r2 = (upzero_preheader_86_r2 * 32'd255);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %88 = ashr i32 %87, 8*/
		upzero_preheader_88_r0 = ($signed(upzero_preheader_87_r0) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %88 = ashr i32 %87, 8*/
		upzero_preheader_88_r1 = ($signed(upzero_preheader_87_r1) >>> 32'd8);
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %88 = ashr i32 %87, 8*/
		upzero_preheader_88_r2 = ($signed(upzero_preheader_87_r2) >>> 32'd8);
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_88_reg_r0 <= 0;
	/* upzero: %.preheader*/
	/*   %88 = ashr i32 %87, 8*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader_25)) begin
		upzero_preheader_88_reg_r0 <= upzero_preheader_88_r0;
		if (start == 1'b0 && ^(upzero_preheader_88_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_88_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_88_reg_r1 <= 0;
	/* upzero: %.preheader*/
	/*   %88 = ashr i32 %87, 8*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader_25)) begin
		upzero_preheader_88_reg_r1 <= upzero_preheader_88_r1;
		if (start == 1'b0 && ^(upzero_preheader_88_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_88_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_88_reg_r2 <= 0;
	/* upzero: %.preheader*/
	/*   %88 = ashr i32 %87, 8*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader_25)) begin
		upzero_preheader_88_reg_r2 <= upzero_preheader_88_r2;
		if (start == 1'b0 && ^(upzero_preheader_88_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_88_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre = getelementptr inbounds i32* %dlti, i32 4*/
		upzero_preheader_pre_r0 = (arg_dlti + (4 * 32'd4));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre = getelementptr inbounds i32* %dlti, i32 4*/
		upzero_preheader_pre_r1 = (arg_dlti + (4 * 32'd4));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre = getelementptr inbounds i32* %dlti, i32 4*/
		upzero_preheader_pre_r2 = (arg_dlti + (4 * 32'd4));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_pre_reg_r0 <= 0;
	/* upzero: %.preheader*/
	/*   %.pre = getelementptr inbounds i32* %dlti, i32 4*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_pre_reg_r0 <= upzero_preheader_pre_r0;
		if (start == 1'b0 && ^(upzero_preheader_pre_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_pre_reg_r1 <= 0;
	/* upzero: %.preheader*/
	/*   %.pre = getelementptr inbounds i32* %dlti, i32 4*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_pre_reg_r1 <= upzero_preheader_pre_r1;
		if (start == 1'b0 && ^(upzero_preheader_pre_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_pre_reg_r2 <= 0;
	/* upzero: %.preheader*/
	/*   %.pre = getelementptr inbounds i32* %dlti, i32 4*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_pre_reg_r2 <= upzero_preheader_pre_r2;
		if (start == 1'b0 && ^(upzero_preheader_pre_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre7 = getelementptr inbounds i32* %dlti, i32 5*/
		upzero_preheader_pre7_r0 = (arg_dlti + (4 * 32'd5));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre7 = getelementptr inbounds i32* %dlti, i32 5*/
		upzero_preheader_pre7_r1 = (arg_dlti + (4 * 32'd5));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre7 = getelementptr inbounds i32* %dlti, i32 5*/
		upzero_preheader_pre7_r2 = (arg_dlti + (4 * 32'd5));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_pre7_reg_r0 <= 0;
	/* upzero: %.preheader*/
	/*   %.pre7 = getelementptr inbounds i32* %dlti, i32 5*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_pre7_reg_r0 <= upzero_preheader_pre7_r0;
		if (start == 1'b0 && ^(upzero_preheader_pre7_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre7_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_pre7_reg_r1 <= 0;
	/* upzero: %.preheader*/
	/*   %.pre7 = getelementptr inbounds i32* %dlti, i32 5*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_pre7_reg_r1 <= upzero_preheader_pre7_r1;
		if (start == 1'b0 && ^(upzero_preheader_pre7_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre7_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_pre7_reg_r2 <= 0;
	/* upzero: %.preheader*/
	/*   %.pre7 = getelementptr inbounds i32* %dlti, i32 5*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_pre7_reg_r2 <= upzero_preheader_pre7_r2;
		if (start == 1'b0 && ^(upzero_preheader_pre7_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre7_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre9 = getelementptr inbounds i32* %dlti, i32 3*/
		upzero_preheader_pre9_r0 = (arg_dlti + (4 * 32'd3));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre9 = getelementptr inbounds i32* %dlti, i32 3*/
		upzero_preheader_pre9_r1 = (arg_dlti + (4 * 32'd3));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre9 = getelementptr inbounds i32* %dlti, i32 3*/
		upzero_preheader_pre9_r2 = (arg_dlti + (4 * 32'd3));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_pre9_reg_r0 <= 0;
	/* upzero: %.preheader*/
	/*   %.pre9 = getelementptr inbounds i32* %dlti, i32 3*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_pre9_reg_r0 <= upzero_preheader_pre9_r0;
		if (start == 1'b0 && ^(upzero_preheader_pre9_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre9_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_pre9_reg_r1 <= 0;
	/* upzero: %.preheader*/
	/*   %.pre9 = getelementptr inbounds i32* %dlti, i32 3*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_pre9_reg_r1 <= upzero_preheader_pre9_r1;
		if (start == 1'b0 && ^(upzero_preheader_pre9_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre9_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_pre9_reg_r2 <= 0;
	/* upzero: %.preheader*/
	/*   %.pre9 = getelementptr inbounds i32* %dlti, i32 3*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_pre9_reg_r2 <= upzero_preheader_pre9_r2;
		if (start == 1'b0 && ^(upzero_preheader_pre9_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre9_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre11 = getelementptr inbounds i32* %dlti, i32 2*/
		upzero_preheader_pre11_r0 = (arg_dlti + (4 * 32'd2));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre11 = getelementptr inbounds i32* %dlti, i32 2*/
		upzero_preheader_pre11_r1 = (arg_dlti + (4 * 32'd2));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre11 = getelementptr inbounds i32* %dlti, i32 2*/
		upzero_preheader_pre11_r2 = (arg_dlti + (4 * 32'd2));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_pre11_reg_r0 <= 0;
	/* upzero: %.preheader*/
	/*   %.pre11 = getelementptr inbounds i32* %dlti, i32 2*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_pre11_reg_r0 <= upzero_preheader_pre11_r0;
		if (start == 1'b0 && ^(upzero_preheader_pre11_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre11_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_pre11_reg_r1 <= 0;
	/* upzero: %.preheader*/
	/*   %.pre11 = getelementptr inbounds i32* %dlti, i32 2*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_pre11_reg_r1 <= upzero_preheader_pre11_r1;
		if (start == 1'b0 && ^(upzero_preheader_pre11_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre11_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_pre11_reg_r2 <= 0;
	/* upzero: %.preheader*/
	/*   %.pre11 = getelementptr inbounds i32* %dlti, i32 2*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_pre11_reg_r2 <= upzero_preheader_pre11_r2;
		if (start == 1'b0 && ^(upzero_preheader_pre11_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre11_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre13 = getelementptr inbounds i32* %dlti, i32 1*/
		upzero_preheader_pre13_r0 = (arg_dlti + (4 * 32'd1));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre13 = getelementptr inbounds i32* %dlti, i32 1*/
		upzero_preheader_pre13_r1 = (arg_dlti + (4 * 32'd1));
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre13 = getelementptr inbounds i32* %dlti, i32 1*/
		upzero_preheader_pre13_r2 = (arg_dlti + (4 * 32'd1));
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_pre13_reg_r0 <= 0;
	/* upzero: %.preheader*/
	/*   %.pre13 = getelementptr inbounds i32* %dlti, i32 1*/
	else if((cur_state_v0 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_pre13_reg_r0 <= upzero_preheader_pre13_r0;
		if (start == 1'b0 && ^(upzero_preheader_pre13_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre13_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_pre13_reg_r1 <= 0;
	/* upzero: %.preheader*/
	/*   %.pre13 = getelementptr inbounds i32* %dlti, i32 1*/
	else if((cur_state_v1 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_pre13_reg_r1 <= upzero_preheader_pre13_r1;
		if (start == 1'b0 && ^(upzero_preheader_pre13_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre13_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_preheader_pre13_reg_r2 <= 0;
	/* upzero: %.preheader*/
	/*   %.pre13 = getelementptr inbounds i32* %dlti, i32 1*/
	else if((cur_state_v2 == LEGUP_F_upzero_BB_preheader_21)) begin
		upzero_preheader_pre13_reg_r2 <= upzero_preheader_pre13_r2;
		if (start == 1'b0 && ^(upzero_preheader_pre13_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre13_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi14_r0 = upzero_preheader1_11_reg_r0;
	end
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	else /* if (((cur_state_v0 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi14_r0 = upzero_preheader_pre13_reg_r0;
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi14_r1 = upzero_preheader1_11_reg_r1;
	end
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	else /* if (((cur_state_v1 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi14_r1 = upzero_preheader_pre13_reg_r1;
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi14_r2 = upzero_preheader1_11_reg_r2;
	end
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	else /* if (((cur_state_v2 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi14_r2 = upzero_preheader_pre13_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_89_prephi14_reg_r0 <= 0;
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi14_reg_r0 <= upzero_89_prephi14_r0;
		if (start == 1'b0 && ^(upzero_89_prephi14_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi14_reg_r0"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi14_reg_r0 <= upzero_89_prephi14_r0;
		if (start == 1'b0 && ^(upzero_89_prephi14_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi14_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_89_prephi14_reg_r1 <= 0;
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi14_reg_r1 <= upzero_89_prephi14_r1;
		if (start == 1'b0 && ^(upzero_89_prephi14_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi14_reg_r1"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi14_reg_r1 <= upzero_89_prephi14_r1;
		if (start == 1'b0 && ^(upzero_89_prephi14_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi14_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_89_prephi14_reg_r2 <= 0;
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi14_reg_r2 <= upzero_89_prephi14_r2;
		if (start == 1'b0 && ^(upzero_89_prephi14_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi14_reg_r2"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi14_reg_r2 <= upzero_89_prephi14_r2;
		if (start == 1'b0 && ^(upzero_89_prephi14_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi14_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi12_r0 = upzero_preheader1_22_reg_r0;
	end
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	else /* if (((cur_state_v0 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi12_r0 = upzero_preheader_pre11_reg_r0;
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi12_r1 = upzero_preheader1_22_reg_r1;
	end
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	else /* if (((cur_state_v1 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi12_r1 = upzero_preheader_pre11_reg_r1;
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi12_r2 = upzero_preheader1_22_reg_r2;
	end
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	else /* if (((cur_state_v2 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi12_r2 = upzero_preheader_pre11_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_89_prephi12_reg_r0 <= 0;
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi12_reg_r0 <= upzero_89_prephi12_r0;
		if (start == 1'b0 && ^(upzero_89_prephi12_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi12_reg_r0"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi12_reg_r0 <= upzero_89_prephi12_r0;
		if (start == 1'b0 && ^(upzero_89_prephi12_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi12_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_89_prephi12_reg_r1 <= 0;
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi12_reg_r1 <= upzero_89_prephi12_r1;
		if (start == 1'b0 && ^(upzero_89_prephi12_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi12_reg_r1"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi12_reg_r1 <= upzero_89_prephi12_r1;
		if (start == 1'b0 && ^(upzero_89_prephi12_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi12_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_89_prephi12_reg_r2 <= 0;
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi12_reg_r2 <= upzero_89_prephi12_r2;
		if (start == 1'b0 && ^(upzero_89_prephi12_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi12_reg_r2"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi12_reg_r2 <= upzero_89_prephi12_r2;
		if (start == 1'b0 && ^(upzero_89_prephi12_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi12_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi10_r0 = upzero_preheader1_33_reg_r0;
	end
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	else /* if (((cur_state_v0 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi10_r0 = upzero_preheader_pre9_reg_r0;
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi10_r1 = upzero_preheader1_33_reg_r1;
	end
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	else /* if (((cur_state_v1 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi10_r1 = upzero_preheader_pre9_reg_r1;
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi10_r2 = upzero_preheader1_33_reg_r2;
	end
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	else /* if (((cur_state_v2 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi10_r2 = upzero_preheader_pre9_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_89_prephi10_reg_r0 <= 0;
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi10_reg_r0 <= upzero_89_prephi10_r0;
		if (start == 1'b0 && ^(upzero_89_prephi10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi10_reg_r0"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi10_reg_r0 <= upzero_89_prephi10_r0;
		if (start == 1'b0 && ^(upzero_89_prephi10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_89_prephi10_reg_r1 <= 0;
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi10_reg_r1 <= upzero_89_prephi10_r1;
		if (start == 1'b0 && ^(upzero_89_prephi10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi10_reg_r1"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi10_reg_r1 <= upzero_89_prephi10_r1;
		if (start == 1'b0 && ^(upzero_89_prephi10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_89_prephi10_reg_r2 <= 0;
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi10_reg_r2 <= upzero_89_prephi10_r2;
		if (start == 1'b0 && ^(upzero_89_prephi10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi10_reg_r2"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi10_reg_r2 <= upzero_89_prephi10_r2;
		if (start == 1'b0 && ^(upzero_89_prephi10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi8_r0 = upzero_preheader1_55_reg_r0;
	end
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	else /* if (((cur_state_v0 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi8_r0 = upzero_preheader_pre7_reg_r0;
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi8_r1 = upzero_preheader1_55_reg_r1;
	end
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	else /* if (((cur_state_v1 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi8_r1 = upzero_preheader_pre7_reg_r1;
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi8_r2 = upzero_preheader1_55_reg_r2;
	end
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	else /* if (((cur_state_v2 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi8_r2 = upzero_preheader_pre7_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_89_prephi8_reg_r0 <= 0;
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi8_reg_r0 <= upzero_89_prephi8_r0;
		if (start == 1'b0 && ^(upzero_89_prephi8_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi8_reg_r0"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi8_reg_r0 <= upzero_89_prephi8_r0;
		if (start == 1'b0 && ^(upzero_89_prephi8_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi8_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_89_prephi8_reg_r1 <= 0;
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi8_reg_r1 <= upzero_89_prephi8_r1;
		if (start == 1'b0 && ^(upzero_89_prephi8_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi8_reg_r1"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi8_reg_r1 <= upzero_89_prephi8_r1;
		if (start == 1'b0 && ^(upzero_89_prephi8_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi8_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_89_prephi8_reg_r2 <= 0;
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi8_reg_r2 <= upzero_89_prephi8_r2;
		if (start == 1'b0 && ^(upzero_89_prephi8_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi8_reg_r2"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi8_reg_r2 <= upzero_89_prephi8_r2;
		if (start == 1'b0 && ^(upzero_89_prephi8_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi8_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi_r0 = upzero_preheader1_44_reg_r0;
	end
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	else /* if (((cur_state_v0 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi_r0 = upzero_preheader_pre_reg_r0;
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi_r1 = upzero_preheader1_44_reg_r1;
	end
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	else /* if (((cur_state_v1 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi_r1 = upzero_preheader_pre_reg_r1;
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi_r2 = upzero_preheader1_44_reg_r2;
	end
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	else /* if (((cur_state_v2 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi_r2 = upzero_preheader_pre_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_89_prephi_reg_r0 <= 0;
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi_reg_r0 <= upzero_89_prephi_r0;
		if (start == 1'b0 && ^(upzero_89_prephi_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi_reg_r0"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi_reg_r0 <= upzero_89_prephi_r0;
		if (start == 1'b0 && ^(upzero_89_prephi_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_89_prephi_reg_r1 <= 0;
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi_reg_r1 <= upzero_89_prephi_r1;
		if (start == 1'b0 && ^(upzero_89_prephi_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi_reg_r1"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi_reg_r1 <= upzero_89_prephi_r1;
		if (start == 1'b0 && ^(upzero_89_prephi_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_89_prephi_reg_r2 <= 0;
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_20) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi_reg_r2 <= upzero_89_prephi_r2;
		if (start == 1'b0 && ^(upzero_89_prephi_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi_reg_r2"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_upzero_BB_preheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi_reg_r2 <= upzero_89_prephi_r2;
		if (start == 1'b0 && ^(upzero_89_prephi_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
		upzero_89_90_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
		upzero_89_90_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
		upzero_89_90_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
		upzero_89_91_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
		upzero_89_91_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
		upzero_89_91_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
		upzero_89_92_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
		upzero_89_92_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
		upzero_89_92_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
		upzero_89_93_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
		upzero_89_93_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
		upzero_89_93_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %10 = add nsw i32 %6, %9*/
	if ((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_4)) begin
		upzero_signed_add_32_0_op0_r0 = upzero_preheader1_6_r0;
	end
	/* upzero: %.preheader1*/
	/*   %21 = add nsw i32 %16, %20*/
	else if ((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_7)) begin
		upzero_signed_add_32_0_op0_r0 = upzero_preheader1_16_r0;
	end
	/* upzero: %.preheader1*/
	/*   %32 = add nsw i32 %27, %31*/
	else if ((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_10)) begin
		upzero_signed_add_32_0_op0_r0 = upzero_preheader1_27_r0;
	end
	/* upzero: %.preheader1*/
	/*   %43 = add nsw i32 %38, %42*/
	else if ((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_signed_add_32_0_op0_r0 = upzero_preheader1_38_r0;
	end
	/* upzero: %.preheader1*/
	/*   %54 = add nsw i32 %49, %53*/
	else if ((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_16)) begin
		upzero_signed_add_32_0_op0_r0 = upzero_preheader1_49_r0;
	end
	/* upzero: %.preheader1*/
	/*   %65 = add nsw i32 %60, %64*/
	else /* if ((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_19)) */ begin
		upzero_signed_add_32_0_op0_r0 = upzero_preheader1_60_r0;
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %10 = add nsw i32 %6, %9*/
	if ((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_4)) begin
		upzero_signed_add_32_0_op0_r1 = upzero_preheader1_6_r1;
	end
	/* upzero: %.preheader1*/
	/*   %21 = add nsw i32 %16, %20*/
	else if ((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_7)) begin
		upzero_signed_add_32_0_op0_r1 = upzero_preheader1_16_r1;
	end
	/* upzero: %.preheader1*/
	/*   %32 = add nsw i32 %27, %31*/
	else if ((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_10)) begin
		upzero_signed_add_32_0_op0_r1 = upzero_preheader1_27_r1;
	end
	/* upzero: %.preheader1*/
	/*   %43 = add nsw i32 %38, %42*/
	else if ((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_signed_add_32_0_op0_r1 = upzero_preheader1_38_r1;
	end
	/* upzero: %.preheader1*/
	/*   %54 = add nsw i32 %49, %53*/
	else if ((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_16)) begin
		upzero_signed_add_32_0_op0_r1 = upzero_preheader1_49_r1;
	end
	/* upzero: %.preheader1*/
	/*   %65 = add nsw i32 %60, %64*/
	else /* if ((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_19)) */ begin
		upzero_signed_add_32_0_op0_r1 = upzero_preheader1_60_r1;
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %10 = add nsw i32 %6, %9*/
	if ((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_4)) begin
		upzero_signed_add_32_0_op0_r2 = upzero_preheader1_6_r2;
	end
	/* upzero: %.preheader1*/
	/*   %21 = add nsw i32 %16, %20*/
	else if ((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_7)) begin
		upzero_signed_add_32_0_op0_r2 = upzero_preheader1_16_r2;
	end
	/* upzero: %.preheader1*/
	/*   %32 = add nsw i32 %27, %31*/
	else if ((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_10)) begin
		upzero_signed_add_32_0_op0_r2 = upzero_preheader1_27_r2;
	end
	/* upzero: %.preheader1*/
	/*   %43 = add nsw i32 %38, %42*/
	else if ((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_signed_add_32_0_op0_r2 = upzero_preheader1_38_r2;
	end
	/* upzero: %.preheader1*/
	/*   %54 = add nsw i32 %49, %53*/
	else if ((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_16)) begin
		upzero_signed_add_32_0_op0_r2 = upzero_preheader1_49_r2;
	end
	/* upzero: %.preheader1*/
	/*   %65 = add nsw i32 %60, %64*/
	else /* if ((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_19)) */ begin
		upzero_signed_add_32_0_op0_r2 = upzero_preheader1_60_r2;
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %10 = add nsw i32 %6, %9*/
	if ((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_4)) begin
		upzero_signed_add_32_0_op1_r0 = upzero_preheader1_9_r0;
	end
	/* upzero: %.preheader1*/
	/*   %21 = add nsw i32 %16, %20*/
	else if ((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_7)) begin
		upzero_signed_add_32_0_op1_r0 = upzero_preheader1_20_r0;
	end
	/* upzero: %.preheader1*/
	/*   %32 = add nsw i32 %27, %31*/
	else if ((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_10)) begin
		upzero_signed_add_32_0_op1_r0 = upzero_preheader1_31_r0;
	end
	/* upzero: %.preheader1*/
	/*   %43 = add nsw i32 %38, %42*/
	else if ((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_signed_add_32_0_op1_r0 = upzero_preheader1_42_r0;
	end
	/* upzero: %.preheader1*/
	/*   %54 = add nsw i32 %49, %53*/
	else if ((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_16)) begin
		upzero_signed_add_32_0_op1_r0 = upzero_preheader1_53_r0;
	end
	/* upzero: %.preheader1*/
	/*   %65 = add nsw i32 %60, %64*/
	else /* if ((cur_state_v0 == LEGUP_F_upzero_BB_preheader1_19)) */ begin
		upzero_signed_add_32_0_op1_r0 = upzero_preheader1_64_r0;
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %10 = add nsw i32 %6, %9*/
	if ((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_4)) begin
		upzero_signed_add_32_0_op1_r1 = upzero_preheader1_9_r1;
	end
	/* upzero: %.preheader1*/
	/*   %21 = add nsw i32 %16, %20*/
	else if ((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_7)) begin
		upzero_signed_add_32_0_op1_r1 = upzero_preheader1_20_r1;
	end
	/* upzero: %.preheader1*/
	/*   %32 = add nsw i32 %27, %31*/
	else if ((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_10)) begin
		upzero_signed_add_32_0_op1_r1 = upzero_preheader1_31_r1;
	end
	/* upzero: %.preheader1*/
	/*   %43 = add nsw i32 %38, %42*/
	else if ((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_signed_add_32_0_op1_r1 = upzero_preheader1_42_r1;
	end
	/* upzero: %.preheader1*/
	/*   %54 = add nsw i32 %49, %53*/
	else if ((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_16)) begin
		upzero_signed_add_32_0_op1_r1 = upzero_preheader1_53_r1;
	end
	/* upzero: %.preheader1*/
	/*   %65 = add nsw i32 %60, %64*/
	else /* if ((cur_state_v1 == LEGUP_F_upzero_BB_preheader1_19)) */ begin
		upzero_signed_add_32_0_op1_r1 = upzero_preheader1_64_r1;
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %10 = add nsw i32 %6, %9*/
	if ((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_4)) begin
		upzero_signed_add_32_0_op1_r2 = upzero_preheader1_9_r2;
	end
	/* upzero: %.preheader1*/
	/*   %21 = add nsw i32 %16, %20*/
	else if ((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_7)) begin
		upzero_signed_add_32_0_op1_r2 = upzero_preheader1_20_r2;
	end
	/* upzero: %.preheader1*/
	/*   %32 = add nsw i32 %27, %31*/
	else if ((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_10)) begin
		upzero_signed_add_32_0_op1_r2 = upzero_preheader1_31_r2;
	end
	/* upzero: %.preheader1*/
	/*   %43 = add nsw i32 %38, %42*/
	else if ((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_signed_add_32_0_op1_r2 = upzero_preheader1_42_r2;
	end
	/* upzero: %.preheader1*/
	/*   %54 = add nsw i32 %49, %53*/
	else if ((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_16)) begin
		upzero_signed_add_32_0_op1_r2 = upzero_preheader1_53_r2;
	end
	/* upzero: %.preheader1*/
	/*   %65 = add nsw i32 %60, %64*/
	else /* if ((cur_state_v2 == LEGUP_F_upzero_BB_preheader1_19)) */ begin
		upzero_signed_add_32_0_op1_r2 = upzero_preheader1_64_r2;
	end
end
always @(*) begin
	upzero_signed_add_32_0_r0 = (upzero_signed_add_32_0_op0_r0 + upzero_signed_add_32_0_op1_r0);
end
always @(*) begin
	upzero_signed_add_32_0_r1 = (upzero_signed_add_32_0_op0_r1 + upzero_signed_add_32_0_op1_r1);
end
always @(*) begin
	upzero_signed_add_32_0_r2 = (upzero_signed_add_32_0_op0_r2 + upzero_signed_add_32_0_op1_r2);
end


//voter
always @(*) begin
	for(i=0; i<=5; i=i+1) begin
	cur_state[i]
		= (cur_state_r0[i]==cur_state_r1[i])? cur_state_r0[i]
		: cur_state_r2[i];
	end
end
always @(*) begin
	upzero_0_1
		= (upzero_0_1_r0==upzero_0_1_r1)? upzero_0_1_r0
		: upzero_0_1_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_2[i]
		= (upzero_preheader1_2_r0[i]==upzero_preheader1_2_r1[i])? upzero_preheader1_2_r0[i]
		: upzero_preheader1_2_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_3[i]
		= (upzero_preheader1_3_r0[i]==upzero_preheader1_3_r1[i])? upzero_preheader1_3_r0[i]
		: upzero_preheader1_3_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_4[i]
		= (upzero_preheader1_4_r0[i]==upzero_preheader1_4_r1[i])? upzero_preheader1_4_r0[i]
		: upzero_preheader1_4_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_5[i]
		= (upzero_preheader1_5_r0[i]==upzero_preheader1_5_r1[i])? upzero_preheader1_5_r0[i]
		: upzero_preheader1_5_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_6[i]
		= (upzero_preheader1_6_r0[i]==upzero_preheader1_6_r1[i])? upzero_preheader1_6_r0[i]
		: upzero_preheader1_6_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_7[i]
		= (upzero_preheader1_7_r0[i]==upzero_preheader1_7_r1[i])? upzero_preheader1_7_r0[i]
		: upzero_preheader1_7_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_8[i]
		= (upzero_preheader1_8_r0[i]==upzero_preheader1_8_r1[i])? upzero_preheader1_8_r0[i]
		: upzero_preheader1_8_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_9[i]
		= (upzero_preheader1_9_r0[i]==upzero_preheader1_9_r1[i])? upzero_preheader1_9_r0[i]
		: upzero_preheader1_9_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_10[i]
		= (upzero_preheader1_10_r0[i]==upzero_preheader1_10_r1[i])? upzero_preheader1_10_r0[i]
		: upzero_preheader1_10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_11[i]
		= (upzero_preheader1_11_r0[i]==upzero_preheader1_11_r1[i])? upzero_preheader1_11_r0[i]
		: upzero_preheader1_11_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_11_reg[i]
		= (upzero_preheader1_11_reg_r0[i]==upzero_preheader1_11_reg_r1[i])? upzero_preheader1_11_reg_r0[i]
		: upzero_preheader1_11_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_12[i]
		= (upzero_preheader1_12_r0[i]==upzero_preheader1_12_r1[i])? upzero_preheader1_12_r0[i]
		: upzero_preheader1_12_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_13[i]
		= (upzero_preheader1_13_r0[i]==upzero_preheader1_13_r1[i])? upzero_preheader1_13_r0[i]
		: upzero_preheader1_13_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_14[i]
		= (upzero_preheader1_14_r0[i]==upzero_preheader1_14_r1[i])? upzero_preheader1_14_r0[i]
		: upzero_preheader1_14_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_15[i]
		= (upzero_preheader1_15_r0[i]==upzero_preheader1_15_r1[i])? upzero_preheader1_15_r0[i]
		: upzero_preheader1_15_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_16[i]
		= (upzero_preheader1_16_r0[i]==upzero_preheader1_16_r1[i])? upzero_preheader1_16_r0[i]
		: upzero_preheader1_16_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_17[i]
		= (upzero_preheader1_17_r0[i]==upzero_preheader1_17_r1[i])? upzero_preheader1_17_r0[i]
		: upzero_preheader1_17_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_17_reg[i]
		= (upzero_preheader1_17_reg_r0[i]==upzero_preheader1_17_reg_r1[i])? upzero_preheader1_17_reg_r0[i]
		: upzero_preheader1_17_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_18[i]
		= (upzero_preheader1_18_r0[i]==upzero_preheader1_18_r1[i])? upzero_preheader1_18_r0[i]
		: upzero_preheader1_18_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_19[i]
		= (upzero_preheader1_19_r0[i]==upzero_preheader1_19_r1[i])? upzero_preheader1_19_r0[i]
		: upzero_preheader1_19_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_20[i]
		= (upzero_preheader1_20_r0[i]==upzero_preheader1_20_r1[i])? upzero_preheader1_20_r0[i]
		: upzero_preheader1_20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_21[i]
		= (upzero_preheader1_21_r0[i]==upzero_preheader1_21_r1[i])? upzero_preheader1_21_r0[i]
		: upzero_preheader1_21_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_22[i]
		= (upzero_preheader1_22_r0[i]==upzero_preheader1_22_r1[i])? upzero_preheader1_22_r0[i]
		: upzero_preheader1_22_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_22_reg[i]
		= (upzero_preheader1_22_reg_r0[i]==upzero_preheader1_22_reg_r1[i])? upzero_preheader1_22_reg_r0[i]
		: upzero_preheader1_22_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_23[i]
		= (upzero_preheader1_23_r0[i]==upzero_preheader1_23_r1[i])? upzero_preheader1_23_r0[i]
		: upzero_preheader1_23_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_24[i]
		= (upzero_preheader1_24_r0[i]==upzero_preheader1_24_r1[i])? upzero_preheader1_24_r0[i]
		: upzero_preheader1_24_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_25[i]
		= (upzero_preheader1_25_r0[i]==upzero_preheader1_25_r1[i])? upzero_preheader1_25_r0[i]
		: upzero_preheader1_25_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_26[i]
		= (upzero_preheader1_26_r0[i]==upzero_preheader1_26_r1[i])? upzero_preheader1_26_r0[i]
		: upzero_preheader1_26_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_27[i]
		= (upzero_preheader1_27_r0[i]==upzero_preheader1_27_r1[i])? upzero_preheader1_27_r0[i]
		: upzero_preheader1_27_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_28[i]
		= (upzero_preheader1_28_r0[i]==upzero_preheader1_28_r1[i])? upzero_preheader1_28_r0[i]
		: upzero_preheader1_28_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_28_reg[i]
		= (upzero_preheader1_28_reg_r0[i]==upzero_preheader1_28_reg_r1[i])? upzero_preheader1_28_reg_r0[i]
		: upzero_preheader1_28_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_29[i]
		= (upzero_preheader1_29_r0[i]==upzero_preheader1_29_r1[i])? upzero_preheader1_29_r0[i]
		: upzero_preheader1_29_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_30[i]
		= (upzero_preheader1_30_r0[i]==upzero_preheader1_30_r1[i])? upzero_preheader1_30_r0[i]
		: upzero_preheader1_30_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_31[i]
		= (upzero_preheader1_31_r0[i]==upzero_preheader1_31_r1[i])? upzero_preheader1_31_r0[i]
		: upzero_preheader1_31_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_32[i]
		= (upzero_preheader1_32_r0[i]==upzero_preheader1_32_r1[i])? upzero_preheader1_32_r0[i]
		: upzero_preheader1_32_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_33[i]
		= (upzero_preheader1_33_r0[i]==upzero_preheader1_33_r1[i])? upzero_preheader1_33_r0[i]
		: upzero_preheader1_33_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_33_reg[i]
		= (upzero_preheader1_33_reg_r0[i]==upzero_preheader1_33_reg_r1[i])? upzero_preheader1_33_reg_r0[i]
		: upzero_preheader1_33_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_34[i]
		= (upzero_preheader1_34_r0[i]==upzero_preheader1_34_r1[i])? upzero_preheader1_34_r0[i]
		: upzero_preheader1_34_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_35[i]
		= (upzero_preheader1_35_r0[i]==upzero_preheader1_35_r1[i])? upzero_preheader1_35_r0[i]
		: upzero_preheader1_35_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_36[i]
		= (upzero_preheader1_36_r0[i]==upzero_preheader1_36_r1[i])? upzero_preheader1_36_r0[i]
		: upzero_preheader1_36_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_37[i]
		= (upzero_preheader1_37_r0[i]==upzero_preheader1_37_r1[i])? upzero_preheader1_37_r0[i]
		: upzero_preheader1_37_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_38[i]
		= (upzero_preheader1_38_r0[i]==upzero_preheader1_38_r1[i])? upzero_preheader1_38_r0[i]
		: upzero_preheader1_38_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_39[i]
		= (upzero_preheader1_39_r0[i]==upzero_preheader1_39_r1[i])? upzero_preheader1_39_r0[i]
		: upzero_preheader1_39_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_39_reg[i]
		= (upzero_preheader1_39_reg_r0[i]==upzero_preheader1_39_reg_r1[i])? upzero_preheader1_39_reg_r0[i]
		: upzero_preheader1_39_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_40[i]
		= (upzero_preheader1_40_r0[i]==upzero_preheader1_40_r1[i])? upzero_preheader1_40_r0[i]
		: upzero_preheader1_40_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_41[i]
		= (upzero_preheader1_41_r0[i]==upzero_preheader1_41_r1[i])? upzero_preheader1_41_r0[i]
		: upzero_preheader1_41_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_42[i]
		= (upzero_preheader1_42_r0[i]==upzero_preheader1_42_r1[i])? upzero_preheader1_42_r0[i]
		: upzero_preheader1_42_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_43[i]
		= (upzero_preheader1_43_r0[i]==upzero_preheader1_43_r1[i])? upzero_preheader1_43_r0[i]
		: upzero_preheader1_43_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_44[i]
		= (upzero_preheader1_44_r0[i]==upzero_preheader1_44_r1[i])? upzero_preheader1_44_r0[i]
		: upzero_preheader1_44_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_44_reg[i]
		= (upzero_preheader1_44_reg_r0[i]==upzero_preheader1_44_reg_r1[i])? upzero_preheader1_44_reg_r0[i]
		: upzero_preheader1_44_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_45[i]
		= (upzero_preheader1_45_r0[i]==upzero_preheader1_45_r1[i])? upzero_preheader1_45_r0[i]
		: upzero_preheader1_45_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_46[i]
		= (upzero_preheader1_46_r0[i]==upzero_preheader1_46_r1[i])? upzero_preheader1_46_r0[i]
		: upzero_preheader1_46_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_47[i]
		= (upzero_preheader1_47_r0[i]==upzero_preheader1_47_r1[i])? upzero_preheader1_47_r0[i]
		: upzero_preheader1_47_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_48[i]
		= (upzero_preheader1_48_r0[i]==upzero_preheader1_48_r1[i])? upzero_preheader1_48_r0[i]
		: upzero_preheader1_48_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_49[i]
		= (upzero_preheader1_49_r0[i]==upzero_preheader1_49_r1[i])? upzero_preheader1_49_r0[i]
		: upzero_preheader1_49_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_50[i]
		= (upzero_preheader1_50_r0[i]==upzero_preheader1_50_r1[i])? upzero_preheader1_50_r0[i]
		: upzero_preheader1_50_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_50_reg[i]
		= (upzero_preheader1_50_reg_r0[i]==upzero_preheader1_50_reg_r1[i])? upzero_preheader1_50_reg_r0[i]
		: upzero_preheader1_50_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_51[i]
		= (upzero_preheader1_51_r0[i]==upzero_preheader1_51_r1[i])? upzero_preheader1_51_r0[i]
		: upzero_preheader1_51_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_52[i]
		= (upzero_preheader1_52_r0[i]==upzero_preheader1_52_r1[i])? upzero_preheader1_52_r0[i]
		: upzero_preheader1_52_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_53[i]
		= (upzero_preheader1_53_r0[i]==upzero_preheader1_53_r1[i])? upzero_preheader1_53_r0[i]
		: upzero_preheader1_53_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_54[i]
		= (upzero_preheader1_54_r0[i]==upzero_preheader1_54_r1[i])? upzero_preheader1_54_r0[i]
		: upzero_preheader1_54_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_55[i]
		= (upzero_preheader1_55_r0[i]==upzero_preheader1_55_r1[i])? upzero_preheader1_55_r0[i]
		: upzero_preheader1_55_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_55_reg[i]
		= (upzero_preheader1_55_reg_r0[i]==upzero_preheader1_55_reg_r1[i])? upzero_preheader1_55_reg_r0[i]
		: upzero_preheader1_55_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_56[i]
		= (upzero_preheader1_56_r0[i]==upzero_preheader1_56_r1[i])? upzero_preheader1_56_r0[i]
		: upzero_preheader1_56_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_57[i]
		= (upzero_preheader1_57_r0[i]==upzero_preheader1_57_r1[i])? upzero_preheader1_57_r0[i]
		: upzero_preheader1_57_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_58[i]
		= (upzero_preheader1_58_r0[i]==upzero_preheader1_58_r1[i])? upzero_preheader1_58_r0[i]
		: upzero_preheader1_58_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_59[i]
		= (upzero_preheader1_59_r0[i]==upzero_preheader1_59_r1[i])? upzero_preheader1_59_r0[i]
		: upzero_preheader1_59_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_60[i]
		= (upzero_preheader1_60_r0[i]==upzero_preheader1_60_r1[i])? upzero_preheader1_60_r0[i]
		: upzero_preheader1_60_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_61[i]
		= (upzero_preheader1_61_r0[i]==upzero_preheader1_61_r1[i])? upzero_preheader1_61_r0[i]
		: upzero_preheader1_61_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader1_61_reg[i]
		= (upzero_preheader1_61_reg_r0[i]==upzero_preheader1_61_reg_r1[i])? upzero_preheader1_61_reg_r0[i]
		: upzero_preheader1_61_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_62[i]
		= (upzero_preheader1_62_r0[i]==upzero_preheader1_62_r1[i])? upzero_preheader1_62_r0[i]
		: upzero_preheader1_62_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_63[i]
		= (upzero_preheader1_63_r0[i]==upzero_preheader1_63_r1[i])? upzero_preheader1_63_r0[i]
		: upzero_preheader1_63_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_64[i]
		= (upzero_preheader1_64_r0[i]==upzero_preheader1_64_r1[i])? upzero_preheader1_64_r0[i]
		: upzero_preheader1_64_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader1_65[i]
		= (upzero_preheader1_65_r0[i]==upzero_preheader1_65_r1[i])? upzero_preheader1_65_r0[i]
		: upzero_preheader1_65_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_66[i]
		= (upzero_preheader_66_r0[i]==upzero_preheader_66_r1[i])? upzero_preheader_66_r0[i]
		: upzero_preheader_66_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_67[i]
		= (upzero_preheader_67_r0[i]==upzero_preheader_67_r1[i])? upzero_preheader_67_r0[i]
		: upzero_preheader_67_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_68[i]
		= (upzero_preheader_68_r0[i]==upzero_preheader_68_r1[i])? upzero_preheader_68_r0[i]
		: upzero_preheader_68_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_68_reg[i]
		= (upzero_preheader_68_reg_r0[i]==upzero_preheader_68_reg_r1[i])? upzero_preheader_68_reg_r0[i]
		: upzero_preheader_68_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_69[i]
		= (upzero_preheader_69_r0[i]==upzero_preheader_69_r1[i])? upzero_preheader_69_r0[i]
		: upzero_preheader_69_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_69_reg[i]
		= (upzero_preheader_69_reg_r0[i]==upzero_preheader_69_reg_r1[i])? upzero_preheader_69_reg_r0[i]
		: upzero_preheader_69_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_70[i]
		= (upzero_preheader_70_r0[i]==upzero_preheader_70_r1[i])? upzero_preheader_70_r0[i]
		: upzero_preheader_70_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_71[i]
		= (upzero_preheader_71_r0[i]==upzero_preheader_71_r1[i])? upzero_preheader_71_r0[i]
		: upzero_preheader_71_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_72[i]
		= (upzero_preheader_72_r0[i]==upzero_preheader_72_r1[i])? upzero_preheader_72_r0[i]
		: upzero_preheader_72_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_72_reg[i]
		= (upzero_preheader_72_reg_r0[i]==upzero_preheader_72_reg_r1[i])? upzero_preheader_72_reg_r0[i]
		: upzero_preheader_72_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_73[i]
		= (upzero_preheader_73_r0[i]==upzero_preheader_73_r1[i])? upzero_preheader_73_r0[i]
		: upzero_preheader_73_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_73_reg[i]
		= (upzero_preheader_73_reg_r0[i]==upzero_preheader_73_reg_r1[i])? upzero_preheader_73_reg_r0[i]
		: upzero_preheader_73_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_74[i]
		= (upzero_preheader_74_r0[i]==upzero_preheader_74_r1[i])? upzero_preheader_74_r0[i]
		: upzero_preheader_74_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_75[i]
		= (upzero_preheader_75_r0[i]==upzero_preheader_75_r1[i])? upzero_preheader_75_r0[i]
		: upzero_preheader_75_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_76[i]
		= (upzero_preheader_76_r0[i]==upzero_preheader_76_r1[i])? upzero_preheader_76_r0[i]
		: upzero_preheader_76_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_76_reg[i]
		= (upzero_preheader_76_reg_r0[i]==upzero_preheader_76_reg_r1[i])? upzero_preheader_76_reg_r0[i]
		: upzero_preheader_76_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_77[i]
		= (upzero_preheader_77_r0[i]==upzero_preheader_77_r1[i])? upzero_preheader_77_r0[i]
		: upzero_preheader_77_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_77_reg[i]
		= (upzero_preheader_77_reg_r0[i]==upzero_preheader_77_reg_r1[i])? upzero_preheader_77_reg_r0[i]
		: upzero_preheader_77_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_78[i]
		= (upzero_preheader_78_r0[i]==upzero_preheader_78_r1[i])? upzero_preheader_78_r0[i]
		: upzero_preheader_78_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_79[i]
		= (upzero_preheader_79_r0[i]==upzero_preheader_79_r1[i])? upzero_preheader_79_r0[i]
		: upzero_preheader_79_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_80[i]
		= (upzero_preheader_80_r0[i]==upzero_preheader_80_r1[i])? upzero_preheader_80_r0[i]
		: upzero_preheader_80_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_80_reg[i]
		= (upzero_preheader_80_reg_r0[i]==upzero_preheader_80_reg_r1[i])? upzero_preheader_80_reg_r0[i]
		: upzero_preheader_80_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_81[i]
		= (upzero_preheader_81_r0[i]==upzero_preheader_81_r1[i])? upzero_preheader_81_r0[i]
		: upzero_preheader_81_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_81_reg[i]
		= (upzero_preheader_81_reg_r0[i]==upzero_preheader_81_reg_r1[i])? upzero_preheader_81_reg_r0[i]
		: upzero_preheader_81_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_82[i]
		= (upzero_preheader_82_r0[i]==upzero_preheader_82_r1[i])? upzero_preheader_82_r0[i]
		: upzero_preheader_82_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_83[i]
		= (upzero_preheader_83_r0[i]==upzero_preheader_83_r1[i])? upzero_preheader_83_r0[i]
		: upzero_preheader_83_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_84[i]
		= (upzero_preheader_84_r0[i]==upzero_preheader_84_r1[i])? upzero_preheader_84_r0[i]
		: upzero_preheader_84_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_84_reg[i]
		= (upzero_preheader_84_reg_r0[i]==upzero_preheader_84_reg_r1[i])? upzero_preheader_84_reg_r0[i]
		: upzero_preheader_84_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_85[i]
		= (upzero_preheader_85_r0[i]==upzero_preheader_85_r1[i])? upzero_preheader_85_r0[i]
		: upzero_preheader_85_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_85_reg[i]
		= (upzero_preheader_85_reg_r0[i]==upzero_preheader_85_reg_r1[i])? upzero_preheader_85_reg_r0[i]
		: upzero_preheader_85_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_86[i]
		= (upzero_preheader_86_r0[i]==upzero_preheader_86_r1[i])? upzero_preheader_86_r0[i]
		: upzero_preheader_86_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_87[i]
		= (upzero_preheader_87_r0[i]==upzero_preheader_87_r1[i])? upzero_preheader_87_r0[i]
		: upzero_preheader_87_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_88[i]
		= (upzero_preheader_88_r0[i]==upzero_preheader_88_r1[i])? upzero_preheader_88_r0[i]
		: upzero_preheader_88_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_preheader_88_reg[i]
		= (upzero_preheader_88_reg_r0[i]==upzero_preheader_88_reg_r1[i])? upzero_preheader_88_reg_r0[i]
		: upzero_preheader_88_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_pre[i]
		= (upzero_preheader_pre_r0[i]==upzero_preheader_pre_r1[i])? upzero_preheader_pre_r0[i]
		: upzero_preheader_pre_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_pre_reg[i]
		= (upzero_preheader_pre_reg_r0[i]==upzero_preheader_pre_reg_r1[i])? upzero_preheader_pre_reg_r0[i]
		: upzero_preheader_pre_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_pre7[i]
		= (upzero_preheader_pre7_r0[i]==upzero_preheader_pre7_r1[i])? upzero_preheader_pre7_r0[i]
		: upzero_preheader_pre7_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_pre7_reg[i]
		= (upzero_preheader_pre7_reg_r0[i]==upzero_preheader_pre7_reg_r1[i])? upzero_preheader_pre7_reg_r0[i]
		: upzero_preheader_pre7_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_pre9[i]
		= (upzero_preheader_pre9_r0[i]==upzero_preheader_pre9_r1[i])? upzero_preheader_pre9_r0[i]
		: upzero_preheader_pre9_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_pre9_reg[i]
		= (upzero_preheader_pre9_reg_r0[i]==upzero_preheader_pre9_reg_r1[i])? upzero_preheader_pre9_reg_r0[i]
		: upzero_preheader_pre9_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_pre11[i]
		= (upzero_preheader_pre11_r0[i]==upzero_preheader_pre11_r1[i])? upzero_preheader_pre11_r0[i]
		: upzero_preheader_pre11_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_pre11_reg[i]
		= (upzero_preheader_pre11_reg_r0[i]==upzero_preheader_pre11_reg_r1[i])? upzero_preheader_pre11_reg_r0[i]
		: upzero_preheader_pre11_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_pre13[i]
		= (upzero_preheader_pre13_r0[i]==upzero_preheader_pre13_r1[i])? upzero_preheader_pre13_r0[i]
		: upzero_preheader_pre13_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_preheader_pre13_reg[i]
		= (upzero_preheader_pre13_reg_r0[i]==upzero_preheader_pre13_reg_r1[i])? upzero_preheader_pre13_reg_r0[i]
		: upzero_preheader_pre13_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_89_prephi14[i]
		= (upzero_89_prephi14_r0[i]==upzero_89_prephi14_r1[i])? upzero_89_prephi14_r0[i]
		: upzero_89_prephi14_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_89_prephi14_reg[i]
		= (upzero_89_prephi14_reg_r0[i]==upzero_89_prephi14_reg_r1[i])? upzero_89_prephi14_reg_r0[i]
		: upzero_89_prephi14_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_89_prephi12[i]
		= (upzero_89_prephi12_r0[i]==upzero_89_prephi12_r1[i])? upzero_89_prephi12_r0[i]
		: upzero_89_prephi12_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_89_prephi12_reg[i]
		= (upzero_89_prephi12_reg_r0[i]==upzero_89_prephi12_reg_r1[i])? upzero_89_prephi12_reg_r0[i]
		: upzero_89_prephi12_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_89_prephi10[i]
		= (upzero_89_prephi10_r0[i]==upzero_89_prephi10_r1[i])? upzero_89_prephi10_r0[i]
		: upzero_89_prephi10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_89_prephi10_reg[i]
		= (upzero_89_prephi10_reg_r0[i]==upzero_89_prephi10_reg_r1[i])? upzero_89_prephi10_reg_r0[i]
		: upzero_89_prephi10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_89_prephi8[i]
		= (upzero_89_prephi8_r0[i]==upzero_89_prephi8_r1[i])? upzero_89_prephi8_r0[i]
		: upzero_89_prephi8_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_89_prephi8_reg[i]
		= (upzero_89_prephi8_reg_r0[i]==upzero_89_prephi8_reg_r1[i])? upzero_89_prephi8_reg_r0[i]
		: upzero_89_prephi8_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_89_prephi[i]
		= (upzero_89_prephi_r0[i]==upzero_89_prephi_r1[i])? upzero_89_prephi_r0[i]
		: upzero_89_prephi_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_89_prephi_reg[i]
		= (upzero_89_prephi_reg_r0[i]==upzero_89_prephi_reg_r1[i])? upzero_89_prephi_reg_r0[i]
		: upzero_89_prephi_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_89_90[i]
		= (upzero_89_90_r0[i]==upzero_89_90_r1[i])? upzero_89_90_r0[i]
		: upzero_89_90_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_89_91[i]
		= (upzero_89_91_r0[i]==upzero_89_91_r1[i])? upzero_89_91_r0[i]
		: upzero_89_91_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_89_92[i]
		= (upzero_89_92_r0[i]==upzero_89_92_r1[i])? upzero_89_92_r0[i]
		: upzero_89_92_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_89_93[i]
		= (upzero_89_93_r0[i]==upzero_89_93_r1[i])? upzero_89_93_r0[i]
		: upzero_89_93_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_signed_add_32_0_op0[i]
		= (upzero_signed_add_32_0_op0_r0[i]==upzero_signed_add_32_0_op0_r1[i])? upzero_signed_add_32_0_op0_r0[i]
		: upzero_signed_add_32_0_op0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_signed_add_32_0_op1[i]
		= (upzero_signed_add_32_0_op1_r0[i]==upzero_signed_add_32_0_op1_r1[i])? upzero_signed_add_32_0_op1_r0[i]
		: upzero_signed_add_32_0_op1_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_signed_add_32_0[i]
		= (upzero_signed_add_32_0_r0[i]==upzero_signed_add_32_0_r1[i])? upzero_signed_add_32_0_r0[i]
		: upzero_signed_add_32_0_r2[i];
	end
end


//port drive
always @(posedge clk) begin
	if (reset)
		finish <= 0;
	else if((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* upzero: %89*/
	/*   ret void*/
	else if((cur_state == LEGUP_F_upzero_BB__89_33)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %10, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %68, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %76, i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %84, i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %91, i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %93, i32* %.pre-phi14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %dlt, i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_32)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_address_a = arg_dlti;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %10, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_4)) begin
		memory_controller_address_a = arg_bli;
	end
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_address_a = upzero_preheader1_11_reg;
	end
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_8)) begin
		memory_controller_address_a = upzero_preheader1_22_reg;
	end
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_11)) begin
		memory_controller_address_a = upzero_preheader1_33_reg;
	end
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_address_a = upzero_preheader1_44_reg;
	end
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_address_a = upzero_preheader1_55_reg;
	end
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_21)) begin
		memory_controller_address_a = arg_bli;
	end
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_22)) begin
		memory_controller_address_a = upzero_preheader_73_reg;
	end
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_23)) begin
		memory_controller_address_a = upzero_preheader_81_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %68, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_24)) begin
		memory_controller_address_a = arg_bli;
	end
	/* upzero: %.preheader*/
	/*   store i32 %76, i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_25)) begin
		memory_controller_address_a = upzero_preheader_73_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %84, i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_26)) begin
		memory_controller_address_a = upzero_preheader_81_reg;
	end
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_28)) begin
		memory_controller_address_a = upzero_89_prephi_reg;
	end
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_29)) begin
		memory_controller_address_a = upzero_89_prephi12_reg;
	end
	/* upzero: %89*/
	/*   store i32 %91, i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_30)) begin
		memory_controller_address_a = upzero_89_prephi_reg;
	end
	/* upzero: %89*/
	/*   store i32 %93, i32* %.pre-phi14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_31)) begin
		memory_controller_address_a = upzero_89_prephi14_reg;
	end
	/* upzero: %89*/
	/*   store i32 %dlt, i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_32)) begin
		memory_controller_address_a = arg_dlti;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %10, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_11)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_21)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_22)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_23)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   store i32 %68, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_24)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %76, i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_25)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %84, i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_26)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_28)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_29)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %89*/
	/*   store i32 %91, i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_30)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %93, i32* %.pre-phi14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_31)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %dlt, i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_32)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %10, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_4)) begin
		memory_controller_in_a = upzero_preheader1_10;
	end
	/* upzero: %.preheader*/
	/*   store i32 %68, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_24)) begin
		memory_controller_in_a = upzero_preheader_68_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %76, i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_25)) begin
		memory_controller_in_a = upzero_preheader_76_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %84, i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_26)) begin
		memory_controller_in_a = upzero_preheader_84_reg;
	end
	/* upzero: %89*/
	/*   store i32 %91, i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_30)) begin
		memory_controller_in_a = upzero_89_91;
	end
	/* upzero: %89*/
	/*   store i32 %93, i32* %.pre-phi14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_31)) begin
		memory_controller_in_a = upzero_89_93;
	end
	/* upzero: %89*/
	/*   store i32 %dlt, i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_32)) begin
		memory_controller_in_a = arg_dlt;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %10, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %68, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %76, i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %84, i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_26)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_29)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %89*/
	/*   store i32 %91, i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %89*/
	/*   store i32 %93, i32* %.pre-phi14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %89*/
	/*   store i32 %dlt, i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_32)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %21, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %32, i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %43, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %54, i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %65, i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %72, i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %80, i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %88, i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_26)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %90, i32* %.pre-phi8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %92, i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_31)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_address_b = arg_bli;
	end
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_address_b = upzero_preheader1_17_reg;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %21, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_7)) begin
		memory_controller_address_b = upzero_preheader1_17_reg;
	end
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_8)) begin
		memory_controller_address_b = upzero_preheader1_28_reg;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %32, i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_address_b = upzero_preheader1_28_reg;
	end
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_11)) begin
		memory_controller_address_b = upzero_preheader1_39_reg;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %43, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		memory_controller_address_b = upzero_preheader1_39_reg;
	end
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_address_b = upzero_preheader1_50_reg;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %54, i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_16)) begin
		memory_controller_address_b = upzero_preheader1_50_reg;
	end
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_address_b = upzero_preheader1_61_reg;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %65, i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_19)) begin
		memory_controller_address_b = upzero_preheader1_61_reg;
	end
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_21)) begin
		memory_controller_address_b = upzero_preheader_69;
	end
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_22)) begin
		memory_controller_address_b = upzero_preheader_77_reg;
	end
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_23)) begin
		memory_controller_address_b = upzero_preheader_85_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %72, i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_24)) begin
		memory_controller_address_b = upzero_preheader_69_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %80, i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_25)) begin
		memory_controller_address_b = upzero_preheader_77_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %88, i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_26)) begin
		memory_controller_address_b = upzero_preheader_85_reg;
	end
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_28)) begin
		memory_controller_address_b = upzero_89_prephi10_reg;
	end
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_29)) begin
		memory_controller_address_b = arg_dlti;
	end
	/* upzero: %89*/
	/*   store i32 %90, i32* %.pre-phi8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_30)) begin
		memory_controller_address_b = upzero_89_prephi8_reg;
	end
	/* upzero: %89*/
	/*   store i32 %92, i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_31)) begin
		memory_controller_address_b = upzero_89_prephi10_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %21, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_7)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %32, i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_11)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %43, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %54, i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_16)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %65, i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_19)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_21)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_22)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_23)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   store i32 %72, i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_24)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %80, i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_25)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %88, i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_26)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_28)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_29)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %89*/
	/*   store i32 %90, i32* %.pre-phi8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_30)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %92, i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_31)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %21, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_7)) begin
		memory_controller_in_b = upzero_preheader1_21;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %32, i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_in_b = upzero_preheader1_32;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %43, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		memory_controller_in_b = upzero_preheader1_43;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %54, i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_16)) begin
		memory_controller_in_b = upzero_preheader1_54;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %65, i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_19)) begin
		memory_controller_in_b = upzero_preheader1_65;
	end
	/* upzero: %.preheader*/
	/*   store i32 %72, i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_24)) begin
		memory_controller_in_b = upzero_preheader_72_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %80, i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_25)) begin
		memory_controller_in_b = upzero_preheader_80_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %88, i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_26)) begin
		memory_controller_in_b = upzero_preheader_88_reg;
	end
	/* upzero: %89*/
	/*   store i32 %90, i32* %.pre-phi8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_30)) begin
		memory_controller_in_b = upzero_89_90;
	end
	/* upzero: %89*/
	/*   store i32 %92, i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_31)) begin
		memory_controller_in_b = upzero_89_92;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %21, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %32, i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %43, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %54, i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %65, i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_23)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %72, i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %80, i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_25)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %88, i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_26)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_28)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_29)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %89*/
	/*   store i32 %90, i32* %.pre-phi8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %89*/
	/*   store i32 %92, i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_31)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__0_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB__0_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB__0_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB__0_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__0_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB__0_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__0_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB__0_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB__0_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB__0_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB__0_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB__0_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB__0_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB__0_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB__0_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB__0_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB__0_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB__0_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB__0_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__0_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB__0_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB__0_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__0_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB__0_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB__1_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB__2_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB__2_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB__113_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB__116_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB__116_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB__116_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB_preheaderipreheader_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB_preheaderipreheader_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB_preheaderipreheader_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB_preheaderi_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB_preheaderi_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB_preheaderi_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB_preheaderi_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB_preheaderi_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB_preheaderi_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB_preheaderi_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB_preheaderi_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB_preheaderi_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB_preheaderi_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB_preheaderi_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB_preheaderi_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB_preheaderi_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB_preheaderi_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB_preheaderi_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB_preheaderi_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB_preheaderi_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB_preheaderi_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB_preheaderi_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB_preheaderi_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB_preheaderi_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB_preheaderi_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB_preheaderi_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB_preheaderi_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB_preheaderi_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB_preheaderi_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB_preheaderi_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB_preheaderi_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB_preheaderi_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB_preheaderi_136 = 8'd136;
parameter [7:0] LEGUP_F_main_BB_preheaderi_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB_preheaderi_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB_preheaderi_139 = 8'd139;
parameter [7:0] LEGUP_F_main_BB_preheaderi_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB_preheaderi_141 = 8'd141;
parameter [7:0] LEGUP_F_main_BB_preheaderi_142 = 8'd142;
parameter [7:0] LEGUP_F_main_BB_preheaderi_143 = 8'd143;
parameter [7:0] LEGUP_F_main_BB_preheaderi_144 = 8'd144;
parameter [7:0] LEGUP_F_main_BB_preheaderi_145 = 8'd145;
parameter [7:0] LEGUP_F_main_BB_preheaderi_146 = 8'd146;
parameter [7:0] LEGUP_F_main_BB_preheaderi_147 = 8'd147;
parameter [7:0] LEGUP_F_main_BB_preheaderi_149 = 8'd149;
parameter [7:0] LEGUP_F_main_BB_preheaderi_150 = 8'd150;
parameter [7:0] LEGUP_F_main_BB_preheaderi_151 = 8'd151;
parameter [7:0] LEGUP_F_main_BB_preheaderi_152 = 8'd152;
parameter [7:0] LEGUP_F_main_BB_preheaderi_153 = 8'd153;
parameter [7:0] LEGUP_F_main_BB_preheaderi_154 = 8'd154;
parameter [7:0] LEGUP_F_main_BB_preheaderi_155 = 8'd155;
parameter [7:0] LEGUP_F_main_BB_preheaderi_156 = 8'd156;
parameter [7:0] LEGUP_F_main_BB_preheaderi_157 = 8'd157;
parameter [7:0] LEGUP_F_main_BB_preheaderi_158 = 8'd158;
parameter [7:0] LEGUP_F_main_BB_preheaderi_159 = 8'd159;
parameter [7:0] LEGUP_F_main_BB_preheaderi_160 = 8'd160;
parameter [7:0] LEGUP_F_main_BB_preheaderi_161 = 8'd161;
parameter [7:0] LEGUP_F_main_BB_preheaderi_162 = 8'd162;
parameter [7:0] LEGUP_F_main_BB_preheaderi_163 = 8'd163;
parameter [7:0] LEGUP_F_main_BB_preheaderi_165 = 8'd165;
parameter [7:0] LEGUP_F_main_BB_preheaderi_166 = 8'd166;
parameter [7:0] LEGUP_F_main_BB_preheaderi_167 = 8'd167;
parameter [7:0] LEGUP_F_main_BB_preheaderi_168 = 8'd168;
parameter [7:0] LEGUP_F_main_BB_preheaderi_169 = 8'd169;
parameter [7:0] LEGUP_F_main_BB_preheaderi_170 = 8'd170;
parameter [7:0] LEGUP_F_main_BB_preheaderi_171 = 8'd171;
parameter [7:0] LEGUP_F_main_BB_preheaderi_172 = 8'd172;
parameter [7:0] LEGUP_F_main_BB_preheaderi_173 = 8'd173;
parameter [7:0] LEGUP_F_main_BB_preheaderi_174 = 8'd174;
parameter [7:0] LEGUP_F_main_BB_preheaderi_175 = 8'd175;
parameter [7:0] LEGUP_F_main_BB_preheaderi_176 = 8'd176;
parameter [7:0] LEGUP_F_main_BB_preheaderi_177 = 8'd177;
parameter [7:0] LEGUP_F_main_BB_preheaderi_178 = 8'd178;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexitpreheader_179 = 8'd179;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexit_180 = 8'd180;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexit_181 = 8'd181;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexit_182 = 8'd182;
parameter [7:0] LEGUP_F_main_BB_preheaderpreheader_183 = 8'd183;
parameter [7:0] LEGUP_F_main_BB_preheader_184 = 8'd184;
parameter [7:0] LEGUP_F_main_BB_preheader_185 = 8'd185;
parameter [7:0] LEGUP_F_main_BB_preheader_186 = 8'd186;
parameter [7:0] LEGUP_F_main_BB__465_187 = 8'd187;
parameter [7:0] LEGUP_F_main_BB__468_188 = 8'd188;
parameter [7:0] LEGUP_F_main_BB__470_189 = 8'd189;
parameter [7:0] LEGUP_F_main_BB__472_190 = 8'd190;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [7:0] LEGUP_function_call_64 = 8'd64;
parameter [7:0] LEGUP_function_call_83 = 8'd83;
parameter [7:0] LEGUP_function_call_148 = 8'd148;
parameter [7:0] LEGUP_function_call_164 = 8'd164;
integer i;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [7:0] cur_state_r0, cur_state_r1, cur_state_r2 /*synthesis preserve*/;
reg [7:0] cur_state_v0, cur_state_v1, cur_state_v2 /*synthesis keep*/;
always @(*) begin
	for(i=0; i<=7; i=i+1) begin
		cur_state_v0[i] = (cur_state_r0[i]==cur_state_r1[i])? cur_state_r0[i]
			: cur_state_r2[i];
		cur_state_v1[i] = (cur_state_r0[i]==cur_state_r1[i])? cur_state_r0[i]
			: cur_state_r2[i];
		cur_state_v2[i] = (cur_state_r0[i]==cur_state_r1[i])? cur_state_r0[i]
			: cur_state_r2[i];
	end
end
reg [7:0] next_state_r0, next_state_r1, next_state_r2 /*synthesis keep*/;

reg [63:0] main_1_indvar13;
reg [63:0] main_1_indvar13_r0, main_1_indvar13_r1, main_1_indvar13_r2 /*synthesis keep*/;

reg [63:0] main_1_indvar13_reg;
reg [63:0] main_1_indvar13_reg_r0, main_1_indvar13_reg_r1, main_1_indvar13_reg_r2 /*synthesis preserve*/;

reg  main_1_exitcond15;
reg  main_1_exitcond15_r0, main_1_exitcond15_r1, main_1_exitcond15_r2 /*synthesis keep*/;

reg [63:0] main_2_3;
reg [63:0] main_2_3_r0, main_2_3_r1, main_2_3_r2 /*synthesis keep*/;

reg [63:0] main_2_4;
reg [63:0] main_2_4_r0, main_2_4_r1, main_2_4_r2 /*synthesis keep*/;

reg [31:0] main_2_5;
reg [31:0] main_2_5_r0, main_2_5_r1, main_2_5_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_si0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_si0_r0, main_2_si0_r1, main_2_si0_r2 /*synthesis keep*/;

reg [63:0] main_2_indvarnext14;
reg [63:0] main_2_indvarnext14_r0, main_2_indvarnext14_r1, main_2_indvarnext14_r2 /*synthesis keep*/;

reg [63:0] main_2_indvarnext14_reg;
reg [63:0] main_2_indvarnext14_reg_r0, main_2_indvarnext14_reg_r1, main_2_indvarnext14_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_indvar9;
reg [31:0] main_legup_memset_4_i64exit_indvar9_r0, main_legup_memset_4_i64exit_indvar9_r1, main_legup_memset_4_i64exit_indvar9_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_indvar9_reg;
reg [31:0] main_legup_memset_4_i64exit_indvar9_reg_r0, main_legup_memset_4_i64exit_indvar9_reg_r1, main_legup_memset_4_i64exit_indvar9_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_6;
reg [31:0] main_legup_memset_4_i64exit_6_r0, main_legup_memset_4_i64exit_6_r1, main_legup_memset_4_i64exit_6_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_6_reg;
reg [31:0] main_legup_memset_4_i64exit_6_reg_r0, main_legup_memset_4_i64exit_6_reg_r1, main_legup_memset_4_i64exit_6_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_7;
reg [31:0] main_legup_memset_4_i64exit_7_r0, main_legup_memset_4_i64exit_7_r1, main_legup_memset_4_i64exit_7_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_7_reg;
reg [31:0] main_legup_memset_4_i64exit_7_reg_r0, main_legup_memset_4_i64exit_7_reg_r1, main_legup_memset_4_i64exit_7_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_8;
reg [31:0] main_legup_memset_4_i64exit_8_r0, main_legup_memset_4_i64exit_8_r1, main_legup_memset_4_i64exit_8_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_8_reg;
reg [31:0] main_legup_memset_4_i64exit_8_reg_r0, main_legup_memset_4_i64exit_8_reg_r1, main_legup_memset_4_i64exit_8_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_9;
reg [31:0] main_legup_memset_4_i64exit_9_r0, main_legup_memset_4_i64exit_9_r1, main_legup_memset_4_i64exit_9_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_9_reg;
reg [31:0] main_legup_memset_4_i64exit_9_reg_r0, main_legup_memset_4_i64exit_9_reg_r1, main_legup_memset_4_i64exit_9_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_10;
reg [31:0] main_legup_memset_4_i64exit_10_r0, main_legup_memset_4_i64exit_10_r1, main_legup_memset_4_i64exit_10_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_10_reg;
reg [31:0] main_legup_memset_4_i64exit_10_reg_r0, main_legup_memset_4_i64exit_10_reg_r1, main_legup_memset_4_i64exit_10_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_11;
reg [31:0] main_legup_memset_4_i64exit_11_r0, main_legup_memset_4_i64exit_11_r1, main_legup_memset_4_i64exit_11_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_11_reg;
reg [31:0] main_legup_memset_4_i64exit_11_reg_r0, main_legup_memset_4_i64exit_11_reg_r1, main_legup_memset_4_i64exit_11_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_12;
reg [31:0] main_legup_memset_4_i64exit_12_r0, main_legup_memset_4_i64exit_12_r1, main_legup_memset_4_i64exit_12_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_12_reg;
reg [31:0] main_legup_memset_4_i64exit_12_reg_r0, main_legup_memset_4_i64exit_12_reg_r1, main_legup_memset_4_i64exit_12_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_13;
reg [31:0] main_legup_memset_4_i64exit_13_r0, main_legup_memset_4_i64exit_13_r1, main_legup_memset_4_i64exit_13_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_13_reg;
reg [31:0] main_legup_memset_4_i64exit_13_reg_r0, main_legup_memset_4_i64exit_13_reg_r1, main_legup_memset_4_i64exit_13_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_14;
reg [31:0] main_legup_memset_4_i64exit_14_r0, main_legup_memset_4_i64exit_14_r1, main_legup_memset_4_i64exit_14_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_14_reg;
reg [31:0] main_legup_memset_4_i64exit_14_reg_r0, main_legup_memset_4_i64exit_14_reg_r1, main_legup_memset_4_i64exit_14_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_15;
reg [31:0] main_legup_memset_4_i64exit_15_r0, main_legup_memset_4_i64exit_15_r1, main_legup_memset_4_i64exit_15_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_15_reg;
reg [31:0] main_legup_memset_4_i64exit_15_reg_r0, main_legup_memset_4_i64exit_15_reg_r1, main_legup_memset_4_i64exit_15_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_16;
reg [31:0] main_legup_memset_4_i64exit_16_r0, main_legup_memset_4_i64exit_16_r1, main_legup_memset_4_i64exit_16_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_16_reg;
reg [31:0] main_legup_memset_4_i64exit_16_reg_r0, main_legup_memset_4_i64exit_16_reg_r1, main_legup_memset_4_i64exit_16_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_17;
reg [31:0] main_legup_memset_4_i64exit_17_r0, main_legup_memset_4_i64exit_17_r1, main_legup_memset_4_i64exit_17_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_17_reg;
reg [31:0] main_legup_memset_4_i64exit_17_reg_r0, main_legup_memset_4_i64exit_17_reg_r1, main_legup_memset_4_i64exit_17_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_18;
reg [31:0] main_legup_memset_4_i64exit_18_r0, main_legup_memset_4_i64exit_18_r1, main_legup_memset_4_i64exit_18_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_18_reg;
reg [31:0] main_legup_memset_4_i64exit_18_reg_r0, main_legup_memset_4_i64exit_18_reg_r1, main_legup_memset_4_i64exit_18_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_19;
reg [31:0] main_legup_memset_4_i64exit_19_r0, main_legup_memset_4_i64exit_19_r1, main_legup_memset_4_i64exit_19_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_19_reg;
reg [31:0] main_legup_memset_4_i64exit_19_reg_r0, main_legup_memset_4_i64exit_19_reg_r1, main_legup_memset_4_i64exit_19_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_20;
reg [31:0] main_legup_memset_4_i64exit_20_r0, main_legup_memset_4_i64exit_20_r1, main_legup_memset_4_i64exit_20_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_20_reg;
reg [31:0] main_legup_memset_4_i64exit_20_reg_r0, main_legup_memset_4_i64exit_20_reg_r1, main_legup_memset_4_i64exit_20_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_21;
reg [31:0] main_legup_memset_4_i64exit_21_r0, main_legup_memset_4_i64exit_21_r1, main_legup_memset_4_i64exit_21_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_21_reg;
reg [31:0] main_legup_memset_4_i64exit_21_reg_r0, main_legup_memset_4_i64exit_21_reg_r1, main_legup_memset_4_i64exit_21_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_22;
reg [31:0] main_legup_memset_4_i64exit_22_r0, main_legup_memset_4_i64exit_22_r1, main_legup_memset_4_i64exit_22_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_22_reg;
reg [31:0] main_legup_memset_4_i64exit_22_reg_r0, main_legup_memset_4_i64exit_22_reg_r1, main_legup_memset_4_i64exit_22_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_23;
reg [31:0] main_legup_memset_4_i64exit_23_r0, main_legup_memset_4_i64exit_23_r1, main_legup_memset_4_i64exit_23_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_23_reg;
reg [31:0] main_legup_memset_4_i64exit_23_reg_r0, main_legup_memset_4_i64exit_23_reg_r1, main_legup_memset_4_i64exit_23_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_24;
reg [31:0] main_legup_memset_4_i64exit_24_r0, main_legup_memset_4_i64exit_24_r1, main_legup_memset_4_i64exit_24_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_24_reg;
reg [31:0] main_legup_memset_4_i64exit_24_reg_r0, main_legup_memset_4_i64exit_24_reg_r1, main_legup_memset_4_i64exit_24_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_25;
reg [31:0] main_legup_memset_4_i64exit_25_r0, main_legup_memset_4_i64exit_25_r1, main_legup_memset_4_i64exit_25_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_25_reg;
reg [31:0] main_legup_memset_4_i64exit_25_reg_r0, main_legup_memset_4_i64exit_25_reg_r1, main_legup_memset_4_i64exit_25_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_26;
reg [31:0] main_legup_memset_4_i64exit_26_r0, main_legup_memset_4_i64exit_26_r1, main_legup_memset_4_i64exit_26_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_26_reg;
reg [31:0] main_legup_memset_4_i64exit_26_reg_r0, main_legup_memset_4_i64exit_26_reg_r1, main_legup_memset_4_i64exit_26_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_27;
reg [31:0] main_legup_memset_4_i64exit_27_r0, main_legup_memset_4_i64exit_27_r1, main_legup_memset_4_i64exit_27_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_27_reg;
reg [31:0] main_legup_memset_4_i64exit_27_reg_r0, main_legup_memset_4_i64exit_27_reg_r1, main_legup_memset_4_i64exit_27_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_28;
reg [31:0] main_legup_memset_4_i64exit_28_r0, main_legup_memset_4_i64exit_28_r1, main_legup_memset_4_i64exit_28_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_28_reg;
reg [31:0] main_legup_memset_4_i64exit_28_reg_r0, main_legup_memset_4_i64exit_28_reg_r1, main_legup_memset_4_i64exit_28_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_29;
reg [31:0] main_legup_memset_4_i64exit_29_r0, main_legup_memset_4_i64exit_29_r1, main_legup_memset_4_i64exit_29_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_29_reg;
reg [31:0] main_legup_memset_4_i64exit_29_reg_r0, main_legup_memset_4_i64exit_29_reg_r1, main_legup_memset_4_i64exit_29_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_ph20;
reg [31:0] main_legup_memset_4_i64exit_ph20_r0, main_legup_memset_4_i64exit_ph20_r1, main_legup_memset_4_i64exit_ph20_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_ph20_reg;
reg [31:0] main_legup_memset_4_i64exit_ph20_reg_r0, main_legup_memset_4_i64exit_ph20_reg_r1, main_legup_memset_4_i64exit_ph20_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_ph10;
reg [31:0] main_legup_memset_4_i64exit_ph10_r0, main_legup_memset_4_i64exit_ph10_r1, main_legup_memset_4_i64exit_ph10_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_ph10_reg;
reg [31:0] main_legup_memset_4_i64exit_ph10_reg_r0, main_legup_memset_4_i64exit_ph10_reg_r1, main_legup_memset_4_i64exit_ph10_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_nbh0;
reg [31:0] main_legup_memset_4_i64exit_nbh0_r0, main_legup_memset_4_i64exit_nbh0_r1, main_legup_memset_4_i64exit_nbh0_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_nbh0_reg;
reg [31:0] main_legup_memset_4_i64exit_nbh0_reg_r0, main_legup_memset_4_i64exit_nbh0_reg_r1, main_legup_memset_4_i64exit_nbh0_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_deth0;
reg [31:0] main_legup_memset_4_i64exit_deth0_r0, main_legup_memset_4_i64exit_deth0_r1, main_legup_memset_4_i64exit_deth0_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_deth0_reg;
reg [31:0] main_legup_memset_4_i64exit_deth0_reg_r0, main_legup_memset_4_i64exit_deth0_reg_r1, main_legup_memset_4_i64exit_deth0_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_ah20;
reg [31:0] main_legup_memset_4_i64exit_ah20_r0, main_legup_memset_4_i64exit_ah20_r1, main_legup_memset_4_i64exit_ah20_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_ah20_reg;
reg [31:0] main_legup_memset_4_i64exit_ah20_reg_r0, main_legup_memset_4_i64exit_ah20_reg_r1, main_legup_memset_4_i64exit_ah20_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_rh20;
reg [31:0] main_legup_memset_4_i64exit_rh20_r0, main_legup_memset_4_i64exit_rh20_r1, main_legup_memset_4_i64exit_rh20_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_rh20_reg;
reg [31:0] main_legup_memset_4_i64exit_rh20_reg_r0, main_legup_memset_4_i64exit_rh20_reg_r1, main_legup_memset_4_i64exit_rh20_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_ah10;
reg [31:0] main_legup_memset_4_i64exit_ah10_r0, main_legup_memset_4_i64exit_ah10_r1, main_legup_memset_4_i64exit_ah10_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_ah10_reg;
reg [31:0] main_legup_memset_4_i64exit_ah10_reg_r0, main_legup_memset_4_i64exit_ah10_reg_r1, main_legup_memset_4_i64exit_ah10_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_rh10;
reg [31:0] main_legup_memset_4_i64exit_rh10_r0, main_legup_memset_4_i64exit_rh10_r1, main_legup_memset_4_i64exit_rh10_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_rh10_reg;
reg [31:0] main_legup_memset_4_i64exit_rh10_reg_r0, main_legup_memset_4_i64exit_rh10_reg_r1, main_legup_memset_4_i64exit_rh10_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_plt20;
reg [31:0] main_legup_memset_4_i64exit_plt20_r0, main_legup_memset_4_i64exit_plt20_r1, main_legup_memset_4_i64exit_plt20_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_plt20_reg;
reg [31:0] main_legup_memset_4_i64exit_plt20_reg_r0, main_legup_memset_4_i64exit_plt20_reg_r1, main_legup_memset_4_i64exit_plt20_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_plt10;
reg [31:0] main_legup_memset_4_i64exit_plt10_r0, main_legup_memset_4_i64exit_plt10_r1, main_legup_memset_4_i64exit_plt10_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_plt10_reg;
reg [31:0] main_legup_memset_4_i64exit_plt10_reg_r0, main_legup_memset_4_i64exit_plt10_reg_r1, main_legup_memset_4_i64exit_plt10_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_nbl0;
reg [31:0] main_legup_memset_4_i64exit_nbl0_r0, main_legup_memset_4_i64exit_nbl0_r1, main_legup_memset_4_i64exit_nbl0_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_nbl0_reg;
reg [31:0] main_legup_memset_4_i64exit_nbl0_reg_r0, main_legup_memset_4_i64exit_nbl0_reg_r1, main_legup_memset_4_i64exit_nbl0_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_detl0;
reg [31:0] main_legup_memset_4_i64exit_detl0_r0, main_legup_memset_4_i64exit_detl0_r1, main_legup_memset_4_i64exit_detl0_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_detl0_reg;
reg [31:0] main_legup_memset_4_i64exit_detl0_reg_r0, main_legup_memset_4_i64exit_detl0_reg_r1, main_legup_memset_4_i64exit_detl0_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_al20;
reg [31:0] main_legup_memset_4_i64exit_al20_r0, main_legup_memset_4_i64exit_al20_r1, main_legup_memset_4_i64exit_al20_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_al20_reg;
reg [31:0] main_legup_memset_4_i64exit_al20_reg_r0, main_legup_memset_4_i64exit_al20_reg_r1, main_legup_memset_4_i64exit_al20_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_rlt20;
reg [31:0] main_legup_memset_4_i64exit_rlt20_r0, main_legup_memset_4_i64exit_rlt20_r1, main_legup_memset_4_i64exit_rlt20_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_rlt20_reg;
reg [31:0] main_legup_memset_4_i64exit_rlt20_reg_r0, main_legup_memset_4_i64exit_rlt20_reg_r1, main_legup_memset_4_i64exit_rlt20_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_al10;
reg [31:0] main_legup_memset_4_i64exit_al10_r0, main_legup_memset_4_i64exit_al10_r1, main_legup_memset_4_i64exit_al10_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_al10_reg;
reg [31:0] main_legup_memset_4_i64exit_al10_reg_r0, main_legup_memset_4_i64exit_al10_reg_r1, main_legup_memset_4_i64exit_al10_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_rlt10;
reg [31:0] main_legup_memset_4_i64exit_rlt10_r0, main_legup_memset_4_i64exit_rlt10_r1, main_legup_memset_4_i64exit_rlt10_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_rlt10_reg;
reg [31:0] main_legup_memset_4_i64exit_rlt10_reg_r0, main_legup_memset_4_i64exit_rlt10_reg_r1, main_legup_memset_4_i64exit_rlt10_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_i02i;
reg [31:0] main_legup_memset_4_i64exit_i02i_r0, main_legup_memset_4_i64exit_i02i_r1, main_legup_memset_4_i64exit_i02i_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_i02i_reg;
reg [31:0] main_legup_memset_4_i64exit_i02i_reg_r0, main_legup_memset_4_i64exit_i02i_reg_r1, main_legup_memset_4_i64exit_i02i_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_30;
reg [31:0] main_legup_memset_4_i64exit_30_r0, main_legup_memset_4_i64exit_30_r1, main_legup_memset_4_i64exit_30_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_30_reg;
reg [31:0] main_legup_memset_4_i64exit_30_reg_r0, main_legup_memset_4_i64exit_30_reg_r1, main_legup_memset_4_i64exit_30_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_31;
reg [31:0] main_legup_memset_4_i64exit_31_r0, main_legup_memset_4_i64exit_31_r1, main_legup_memset_4_i64exit_31_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep11_r0, main_legup_memset_4_i64exit_scevgep11_r1, main_legup_memset_4_i64exit_scevgep11_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep11_reg_r0, main_legup_memset_4_i64exit_scevgep11_reg_r1, main_legup_memset_4_i64exit_scevgep11_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep12_r0, main_legup_memset_4_i64exit_scevgep12_r1, main_legup_memset_4_i64exit_scevgep12_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep12_reg_r0, main_legup_memset_4_i64exit_scevgep12_reg_r1, main_legup_memset_4_i64exit_scevgep12_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_32;
reg [31:0] main_legup_memset_4_i64exit_32_r0, main_legup_memset_4_i64exit_32_r1, main_legup_memset_4_i64exit_32_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_32_reg;
reg [31:0] main_legup_memset_4_i64exit_32_reg_r0, main_legup_memset_4_i64exit_32_reg_r1, main_legup_memset_4_i64exit_32_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_33;
reg [31:0] main_legup_memset_4_i64exit_33_r0, main_legup_memset_4_i64exit_33_r1, main_legup_memset_4_i64exit_33_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_33_reg;
reg [31:0] main_legup_memset_4_i64exit_33_reg_r0, main_legup_memset_4_i64exit_33_reg_r1, main_legup_memset_4_i64exit_33_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_34;
reg [31:0] main_legup_memset_4_i64exit_34_r0, main_legup_memset_4_i64exit_34_r1, main_legup_memset_4_i64exit_34_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_35;
reg [31:0] main_legup_memset_4_i64exit_35_r0, main_legup_memset_4_i64exit_35_r1, main_legup_memset_4_i64exit_35_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_36;
reg [31:0] main_legup_memset_4_i64exit_36_r0, main_legup_memset_4_i64exit_36_r1, main_legup_memset_4_i64exit_36_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_37;
reg [31:0] main_legup_memset_4_i64exit_37_r0, main_legup_memset_4_i64exit_37_r1, main_legup_memset_4_i64exit_37_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_37_reg;
reg [31:0] main_legup_memset_4_i64exit_37_reg_r0, main_legup_memset_4_i64exit_37_reg_r1, main_legup_memset_4_i64exit_37_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_38;
reg [31:0] main_legup_memset_4_i64exit_38_r0, main_legup_memset_4_i64exit_38_r1, main_legup_memset_4_i64exit_38_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_39;
reg [31:0] main_legup_memset_4_i64exit_39_r0, main_legup_memset_4_i64exit_39_r1, main_legup_memset_4_i64exit_39_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_39_reg;
reg [31:0] main_legup_memset_4_i64exit_39_reg_r0, main_legup_memset_4_i64exit_39_reg_r1, main_legup_memset_4_i64exit_39_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_40;
reg [31:0] main_legup_memset_4_i64exit_40_r0, main_legup_memset_4_i64exit_40_r1, main_legup_memset_4_i64exit_40_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_40_reg;
reg [31:0] main_legup_memset_4_i64exit_40_reg_r0, main_legup_memset_4_i64exit_40_reg_r1, main_legup_memset_4_i64exit_40_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_41;
reg [31:0] main_legup_memset_4_i64exit_41_r0, main_legup_memset_4_i64exit_41_r1, main_legup_memset_4_i64exit_41_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_41_reg;
reg [31:0] main_legup_memset_4_i64exit_41_reg_r0, main_legup_memset_4_i64exit_41_reg_r1, main_legup_memset_4_i64exit_41_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_42;
reg [31:0] main_legup_memset_4_i64exit_42_r0, main_legup_memset_4_i64exit_42_r1, main_legup_memset_4_i64exit_42_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_42_reg;
reg [31:0] main_legup_memset_4_i64exit_42_reg_r0, main_legup_memset_4_i64exit_42_reg_r1, main_legup_memset_4_i64exit_42_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_43;
reg [31:0] main_legup_memset_4_i64exit_43_r0, main_legup_memset_4_i64exit_43_r1, main_legup_memset_4_i64exit_43_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_43_reg;
reg [31:0] main_legup_memset_4_i64exit_43_reg_r0, main_legup_memset_4_i64exit_43_reg_r1, main_legup_memset_4_i64exit_43_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_44;
reg [31:0] main_legup_memset_4_i64exit_44_r0, main_legup_memset_4_i64exit_44_r1, main_legup_memset_4_i64exit_44_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_44_reg;
reg [31:0] main_legup_memset_4_i64exit_44_reg_r0, main_legup_memset_4_i64exit_44_reg_r1, main_legup_memset_4_i64exit_44_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_45;
reg [31:0] main_legup_memset_4_i64exit_45_r0, main_legup_memset_4_i64exit_45_r1, main_legup_memset_4_i64exit_45_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_45_reg;
reg [31:0] main_legup_memset_4_i64exit_45_reg_r0, main_legup_memset_4_i64exit_45_reg_r1, main_legup_memset_4_i64exit_45_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_46;
reg [31:0] main_legup_memset_4_i64exit_46_r0, main_legup_memset_4_i64exit_46_r1, main_legup_memset_4_i64exit_46_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_46_reg;
reg [31:0] main_legup_memset_4_i64exit_46_reg_r0, main_legup_memset_4_i64exit_46_reg_r1, main_legup_memset_4_i64exit_46_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_47;
reg [31:0] main_legup_memset_4_i64exit_47_r0, main_legup_memset_4_i64exit_47_r1, main_legup_memset_4_i64exit_47_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_47_reg;
reg [31:0] main_legup_memset_4_i64exit_47_reg_r0, main_legup_memset_4_i64exit_47_reg_r1, main_legup_memset_4_i64exit_47_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_48;
reg [31:0] main_legup_memset_4_i64exit_48_r0, main_legup_memset_4_i64exit_48_r1, main_legup_memset_4_i64exit_48_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_48_reg;
reg [31:0] main_legup_memset_4_i64exit_48_reg_r0, main_legup_memset_4_i64exit_48_reg_r1, main_legup_memset_4_i64exit_48_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_49;
reg [31:0] main_legup_memset_4_i64exit_49_r0, main_legup_memset_4_i64exit_49_r1, main_legup_memset_4_i64exit_49_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_49_reg;
reg [31:0] main_legup_memset_4_i64exit_49_reg_r0, main_legup_memset_4_i64exit_49_reg_r1, main_legup_memset_4_i64exit_49_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_50;
reg [31:0] main_legup_memset_4_i64exit_50_r0, main_legup_memset_4_i64exit_50_r1, main_legup_memset_4_i64exit_50_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_50_reg;
reg [31:0] main_legup_memset_4_i64exit_50_reg_r0, main_legup_memset_4_i64exit_50_reg_r1, main_legup_memset_4_i64exit_50_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_51;
reg [31:0] main_legup_memset_4_i64exit_51_r0, main_legup_memset_4_i64exit_51_r1, main_legup_memset_4_i64exit_51_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_51_reg;
reg [31:0] main_legup_memset_4_i64exit_51_reg_r0, main_legup_memset_4_i64exit_51_reg_r1, main_legup_memset_4_i64exit_51_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_52;
reg [31:0] main_legup_memset_4_i64exit_52_r0, main_legup_memset_4_i64exit_52_r1, main_legup_memset_4_i64exit_52_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_52_reg;
reg [31:0] main_legup_memset_4_i64exit_52_reg_r0, main_legup_memset_4_i64exit_52_reg_r1, main_legup_memset_4_i64exit_52_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_53;
reg [31:0] main_legup_memset_4_i64exit_53_r0, main_legup_memset_4_i64exit_53_r1, main_legup_memset_4_i64exit_53_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_53_reg;
reg [31:0] main_legup_memset_4_i64exit_53_reg_r0, main_legup_memset_4_i64exit_53_reg_r1, main_legup_memset_4_i64exit_53_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_54;
reg [31:0] main_legup_memset_4_i64exit_54_r0, main_legup_memset_4_i64exit_54_r1, main_legup_memset_4_i64exit_54_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_54_reg;
reg [31:0] main_legup_memset_4_i64exit_54_reg_r0, main_legup_memset_4_i64exit_54_reg_r1, main_legup_memset_4_i64exit_54_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_55;
reg [31:0] main_legup_memset_4_i64exit_55_r0, main_legup_memset_4_i64exit_55_r1, main_legup_memset_4_i64exit_55_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_55_reg;
reg [31:0] main_legup_memset_4_i64exit_55_reg_r0, main_legup_memset_4_i64exit_55_reg_r1, main_legup_memset_4_i64exit_55_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_56;
reg [31:0] main_legup_memset_4_i64exit_56_r0, main_legup_memset_4_i64exit_56_r1, main_legup_memset_4_i64exit_56_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_56_reg;
reg [31:0] main_legup_memset_4_i64exit_56_reg_r0, main_legup_memset_4_i64exit_56_reg_r1, main_legup_memset_4_i64exit_56_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_57;
reg [31:0] main_legup_memset_4_i64exit_57_r0, main_legup_memset_4_i64exit_57_r1, main_legup_memset_4_i64exit_57_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_57_reg;
reg [31:0] main_legup_memset_4_i64exit_57_reg_r0, main_legup_memset_4_i64exit_57_reg_r1, main_legup_memset_4_i64exit_57_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_58;
reg [31:0] main_legup_memset_4_i64exit_58_r0, main_legup_memset_4_i64exit_58_r1, main_legup_memset_4_i64exit_58_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_58_reg;
reg [31:0] main_legup_memset_4_i64exit_58_reg_r0, main_legup_memset_4_i64exit_58_reg_r1, main_legup_memset_4_i64exit_58_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_59;
reg [31:0] main_legup_memset_4_i64exit_59_r0, main_legup_memset_4_i64exit_59_r1, main_legup_memset_4_i64exit_59_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_59_reg;
reg [31:0] main_legup_memset_4_i64exit_59_reg_r0, main_legup_memset_4_i64exit_59_reg_r1, main_legup_memset_4_i64exit_59_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_60;
reg [31:0] main_legup_memset_4_i64exit_60_r0, main_legup_memset_4_i64exit_60_r1, main_legup_memset_4_i64exit_60_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_60_reg;
reg [31:0] main_legup_memset_4_i64exit_60_reg_r0, main_legup_memset_4_i64exit_60_reg_r1, main_legup_memset_4_i64exit_60_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_61;
reg [31:0] main_legup_memset_4_i64exit_61_r0, main_legup_memset_4_i64exit_61_r1, main_legup_memset_4_i64exit_61_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_61_reg;
reg [31:0] main_legup_memset_4_i64exit_61_reg_r0, main_legup_memset_4_i64exit_61_reg_r1, main_legup_memset_4_i64exit_61_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_62;
reg [31:0] main_legup_memset_4_i64exit_62_r0, main_legup_memset_4_i64exit_62_r1, main_legup_memset_4_i64exit_62_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_62_reg;
reg [31:0] main_legup_memset_4_i64exit_62_reg_r0, main_legup_memset_4_i64exit_62_reg_r1, main_legup_memset_4_i64exit_62_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_63;
reg [31:0] main_legup_memset_4_i64exit_63_r0, main_legup_memset_4_i64exit_63_r1, main_legup_memset_4_i64exit_63_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_63_reg;
reg [31:0] main_legup_memset_4_i64exit_63_reg_r0, main_legup_memset_4_i64exit_63_reg_r1, main_legup_memset_4_i64exit_63_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_64;
reg [31:0] main_legup_memset_4_i64exit_64_r0, main_legup_memset_4_i64exit_64_r1, main_legup_memset_4_i64exit_64_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_64_reg;
reg [31:0] main_legup_memset_4_i64exit_64_reg_r0, main_legup_memset_4_i64exit_64_reg_r1, main_legup_memset_4_i64exit_64_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_65;
reg [31:0] main_legup_memset_4_i64exit_65_r0, main_legup_memset_4_i64exit_65_r1, main_legup_memset_4_i64exit_65_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_65_reg;
reg [31:0] main_legup_memset_4_i64exit_65_reg_r0, main_legup_memset_4_i64exit_65_reg_r1, main_legup_memset_4_i64exit_65_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_66;
reg [31:0] main_legup_memset_4_i64exit_66_r0, main_legup_memset_4_i64exit_66_r1, main_legup_memset_4_i64exit_66_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_66_reg;
reg [31:0] main_legup_memset_4_i64exit_66_reg_r0, main_legup_memset_4_i64exit_66_reg_r1, main_legup_memset_4_i64exit_66_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_67;
reg [31:0] main_legup_memset_4_i64exit_67_r0, main_legup_memset_4_i64exit_67_r1, main_legup_memset_4_i64exit_67_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_67_reg;
reg [31:0] main_legup_memset_4_i64exit_67_reg_r0, main_legup_memset_4_i64exit_67_reg_r1, main_legup_memset_4_i64exit_67_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_68;
reg [31:0] main_legup_memset_4_i64exit_68_r0, main_legup_memset_4_i64exit_68_r1, main_legup_memset_4_i64exit_68_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_68_reg;
reg [31:0] main_legup_memset_4_i64exit_68_reg_r0, main_legup_memset_4_i64exit_68_reg_r1, main_legup_memset_4_i64exit_68_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_69;
reg [31:0] main_legup_memset_4_i64exit_69_r0, main_legup_memset_4_i64exit_69_r1, main_legup_memset_4_i64exit_69_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_69_reg;
reg [31:0] main_legup_memset_4_i64exit_69_reg_r0, main_legup_memset_4_i64exit_69_reg_r1, main_legup_memset_4_i64exit_69_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_70;
reg [31:0] main_legup_memset_4_i64exit_70_r0, main_legup_memset_4_i64exit_70_r1, main_legup_memset_4_i64exit_70_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_70_reg;
reg [31:0] main_legup_memset_4_i64exit_70_reg_r0, main_legup_memset_4_i64exit_70_reg_r1, main_legup_memset_4_i64exit_70_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_71;
reg [31:0] main_legup_memset_4_i64exit_71_r0, main_legup_memset_4_i64exit_71_r1, main_legup_memset_4_i64exit_71_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_71_reg;
reg [31:0] main_legup_memset_4_i64exit_71_reg_r0, main_legup_memset_4_i64exit_71_reg_r1, main_legup_memset_4_i64exit_71_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_72;
reg [31:0] main_legup_memset_4_i64exit_72_r0, main_legup_memset_4_i64exit_72_r1, main_legup_memset_4_i64exit_72_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_72_reg;
reg [31:0] main_legup_memset_4_i64exit_72_reg_r0, main_legup_memset_4_i64exit_72_reg_r1, main_legup_memset_4_i64exit_72_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_73;
reg [31:0] main_legup_memset_4_i64exit_73_r0, main_legup_memset_4_i64exit_73_r1, main_legup_memset_4_i64exit_73_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_73_reg;
reg [31:0] main_legup_memset_4_i64exit_73_reg_r0, main_legup_memset_4_i64exit_73_reg_r1, main_legup_memset_4_i64exit_73_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_74;
reg [31:0] main_legup_memset_4_i64exit_74_r0, main_legup_memset_4_i64exit_74_r1, main_legup_memset_4_i64exit_74_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_74_reg;
reg [31:0] main_legup_memset_4_i64exit_74_reg_r0, main_legup_memset_4_i64exit_74_reg_r1, main_legup_memset_4_i64exit_74_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_75;
reg [31:0] main_legup_memset_4_i64exit_75_r0, main_legup_memset_4_i64exit_75_r1, main_legup_memset_4_i64exit_75_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_75_reg;
reg [31:0] main_legup_memset_4_i64exit_75_reg_r0, main_legup_memset_4_i64exit_75_reg_r1, main_legup_memset_4_i64exit_75_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_76;
reg [31:0] main_legup_memset_4_i64exit_76_r0, main_legup_memset_4_i64exit_76_r1, main_legup_memset_4_i64exit_76_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_76_reg;
reg [31:0] main_legup_memset_4_i64exit_76_reg_r0, main_legup_memset_4_i64exit_76_reg_r1, main_legup_memset_4_i64exit_76_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_77;
reg [31:0] main_legup_memset_4_i64exit_77_r0, main_legup_memset_4_i64exit_77_r1, main_legup_memset_4_i64exit_77_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_78;
reg [31:0] main_legup_memset_4_i64exit_78_r0, main_legup_memset_4_i64exit_78_r1, main_legup_memset_4_i64exit_78_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_79;
reg [31:0] main_legup_memset_4_i64exit_79_r0, main_legup_memset_4_i64exit_79_r1, main_legup_memset_4_i64exit_79_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_79_reg;
reg [31:0] main_legup_memset_4_i64exit_79_reg_r0, main_legup_memset_4_i64exit_79_reg_r1, main_legup_memset_4_i64exit_79_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_80;
reg [31:0] main_legup_memset_4_i64exit_80_r0, main_legup_memset_4_i64exit_80_r1, main_legup_memset_4_i64exit_80_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_81;
reg [31:0] main_legup_memset_4_i64exit_81_r0, main_legup_memset_4_i64exit_81_r1, main_legup_memset_4_i64exit_81_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_81_reg;
reg [31:0] main_legup_memset_4_i64exit_81_reg_r0, main_legup_memset_4_i64exit_81_reg_r1, main_legup_memset_4_i64exit_81_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_82;
reg [31:0] main_legup_memset_4_i64exit_82_r0, main_legup_memset_4_i64exit_82_r1, main_legup_memset_4_i64exit_82_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_83;
reg [31:0] main_legup_memset_4_i64exit_83_r0, main_legup_memset_4_i64exit_83_r1, main_legup_memset_4_i64exit_83_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_84;
reg [31:0] main_legup_memset_4_i64exit_84_r0, main_legup_memset_4_i64exit_84_r1, main_legup_memset_4_i64exit_84_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_84_reg;
reg [31:0] main_legup_memset_4_i64exit_84_reg_r0, main_legup_memset_4_i64exit_84_reg_r1, main_legup_memset_4_i64exit_84_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_85;
reg [31:0] main_legup_memset_4_i64exit_85_r0, main_legup_memset_4_i64exit_85_r1, main_legup_memset_4_i64exit_85_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_86;
reg [31:0] main_legup_memset_4_i64exit_86_r0, main_legup_memset_4_i64exit_86_r1, main_legup_memset_4_i64exit_86_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_87;
reg [31:0] main_legup_memset_4_i64exit_87_r0, main_legup_memset_4_i64exit_87_r1, main_legup_memset_4_i64exit_87_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_87_reg;
reg [31:0] main_legup_memset_4_i64exit_87_reg_r0, main_legup_memset_4_i64exit_87_reg_r1, main_legup_memset_4_i64exit_87_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_88;
reg [31:0] main_legup_memset_4_i64exit_88_r0, main_legup_memset_4_i64exit_88_r1, main_legup_memset_4_i64exit_88_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_89;
reg [31:0] main_legup_memset_4_i64exit_89_r0, main_legup_memset_4_i64exit_89_r1, main_legup_memset_4_i64exit_89_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_90;
reg [31:0] main_legup_memset_4_i64exit_90_r0, main_legup_memset_4_i64exit_90_r1, main_legup_memset_4_i64exit_90_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_91;
reg [31:0] main_legup_memset_4_i64exit_91_r0, main_legup_memset_4_i64exit_91_r1, main_legup_memset_4_i64exit_91_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_91_reg;
reg [31:0] main_legup_memset_4_i64exit_91_reg_r0, main_legup_memset_4_i64exit_91_reg_r1, main_legup_memset_4_i64exit_91_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_92;
reg [31:0] main_legup_memset_4_i64exit_92_r0, main_legup_memset_4_i64exit_92_r1, main_legup_memset_4_i64exit_92_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_92_reg;
reg [31:0] main_legup_memset_4_i64exit_92_reg_r0, main_legup_memset_4_i64exit_92_reg_r1, main_legup_memset_4_i64exit_92_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_93;
reg [31:0] main_legup_memset_4_i64exit_93_r0, main_legup_memset_4_i64exit_93_r1, main_legup_memset_4_i64exit_93_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_94;
reg [31:0] main_legup_memset_4_i64exit_94_r0, main_legup_memset_4_i64exit_94_r1, main_legup_memset_4_i64exit_94_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_95;
reg [31:0] main_legup_memset_4_i64exit_95_r0, main_legup_memset_4_i64exit_95_r1, main_legup_memset_4_i64exit_95_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_95_reg;
reg [31:0] main_legup_memset_4_i64exit_95_reg_r0, main_legup_memset_4_i64exit_95_reg_r1, main_legup_memset_4_i64exit_95_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_96;
reg [31:0] main_legup_memset_4_i64exit_96_r0, main_legup_memset_4_i64exit_96_r1, main_legup_memset_4_i64exit_96_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_96_reg;
reg [31:0] main_legup_memset_4_i64exit_96_reg_r0, main_legup_memset_4_i64exit_96_reg_r1, main_legup_memset_4_i64exit_96_reg_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_97;
reg [31:0] main_legup_memset_4_i64exit_97_r0, main_legup_memset_4_i64exit_97_r1, main_legup_memset_4_i64exit_97_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_98;
reg [31:0] main_legup_memset_4_i64exit_98_r0, main_legup_memset_4_i64exit_98_r1, main_legup_memset_4_i64exit_98_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_99;
reg [31:0] main_legup_memset_4_i64exit_99_r0, main_legup_memset_4_i64exit_99_r1, main_legup_memset_4_i64exit_99_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_99_reg;
reg [31:0] main_legup_memset_4_i64exit_99_reg_r0, main_legup_memset_4_i64exit_99_reg_r1, main_legup_memset_4_i64exit_99_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_100;
reg [31:0] main_legup_memset_4_i64exit_100_r0, main_legup_memset_4_i64exit_100_r1, main_legup_memset_4_i64exit_100_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_101;
reg [31:0] main_legup_memset_4_i64exit_101_r0, main_legup_memset_4_i64exit_101_r1, main_legup_memset_4_i64exit_101_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_102;
reg [31:0] main_legup_memset_4_i64exit_102_r0, main_legup_memset_4_i64exit_102_r1, main_legup_memset_4_i64exit_102_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_103;
reg [31:0] main_legup_memset_4_i64exit_103_r0, main_legup_memset_4_i64exit_103_r1, main_legup_memset_4_i64exit_103_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_103_reg;
reg [31:0] main_legup_memset_4_i64exit_103_reg_r0, main_legup_memset_4_i64exit_103_reg_r1, main_legup_memset_4_i64exit_103_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_104;
reg [31:0] main_legup_memset_4_i64exit_104_r0, main_legup_memset_4_i64exit_104_r1, main_legup_memset_4_i64exit_104_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_105;
reg [31:0] main_legup_memset_4_i64exit_105_r0, main_legup_memset_4_i64exit_105_r1, main_legup_memset_4_i64exit_105_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_105_reg;
reg [31:0] main_legup_memset_4_i64exit_105_reg_r0, main_legup_memset_4_i64exit_105_reg_r1, main_legup_memset_4_i64exit_105_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_106;
reg [31:0] main_legup_memset_4_i64exit_106_r0, main_legup_memset_4_i64exit_106_r1, main_legup_memset_4_i64exit_106_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_106_reg;
reg [31:0] main_legup_memset_4_i64exit_106_reg_r0, main_legup_memset_4_i64exit_106_reg_r1, main_legup_memset_4_i64exit_106_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_107;
reg [31:0] main_legup_memset_4_i64exit_107_r0, main_legup_memset_4_i64exit_107_r1, main_legup_memset_4_i64exit_107_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_107_reg;
reg [31:0] main_legup_memset_4_i64exit_107_reg_r0, main_legup_memset_4_i64exit_107_reg_r1, main_legup_memset_4_i64exit_107_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_tmpii1;
reg [31:0] main_legup_memset_4_i64exit_tmpii1_r0, main_legup_memset_4_i64exit_tmpii1_r1, main_legup_memset_4_i64exit_tmpii1_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_tmp1ii2;
reg [31:0] main_legup_memset_4_i64exit_tmp1ii2_r0, main_legup_memset_4_i64exit_tmp1ii2_r1, main_legup_memset_4_i64exit_tmp1ii2_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_108;
reg [31:0] main_legup_memset_4_i64exit_108_r0, main_legup_memset_4_i64exit_108_r1, main_legup_memset_4_i64exit_108_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_109;
reg [31:0] main_legup_memset_4_i64exit_109_r0, main_legup_memset_4_i64exit_109_r1, main_legup_memset_4_i64exit_109_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_109_reg;
reg [31:0] main_legup_memset_4_i64exit_109_reg_r0, main_legup_memset_4_i64exit_109_reg_r1, main_legup_memset_4_i64exit_109_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_110;
reg [31:0] main_legup_memset_4_i64exit_110_r0, main_legup_memset_4_i64exit_110_r1, main_legup_memset_4_i64exit_110_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_110_reg;
reg [31:0] main_legup_memset_4_i64exit_110_reg_r0, main_legup_memset_4_i64exit_110_reg_r1, main_legup_memset_4_i64exit_110_reg_r2 /*synthesis preserve*/;

reg  main_legup_memset_4_i64exit_111;
reg  main_legup_memset_4_i64exit_111_r0, main_legup_memset_4_i64exit_111_r1, main_legup_memset_4_i64exit_111_r2 /*synthesis keep*/;

reg  main_legup_memset_4_i64exit_111_reg;
reg  main_legup_memset_4_i64exit_111_reg_r0, main_legup_memset_4_i64exit_111_reg_r1, main_legup_memset_4_i64exit_111_reg_r2 /*synthesis preserve*/;

reg [31:0] main_legup_memset_4_i64exit_112;
reg [31:0] main_legup_memset_4_i64exit_112_r0, main_legup_memset_4_i64exit_112_r1, main_legup_memset_4_i64exit_112_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_m0iii;
reg [31:0] main_legup_memset_4_i64exit_m0iii_r0, main_legup_memset_4_i64exit_m0iii_r1, main_legup_memset_4_i64exit_m0iii_r2 /*synthesis keep*/;

reg [31:0] main_legup_memset_4_i64exit_m0iii_reg;
reg [31:0] main_legup_memset_4_i64exit_m0iii_reg_r0, main_legup_memset_4_i64exit_m0iii_reg_r1, main_legup_memset_4_i64exit_m0iii_reg_r2 /*synthesis preserve*/;

reg [31:0] main_113_114;
reg [31:0] main_113_114_r0, main_113_114_r1, main_113_114_r2 /*synthesis keep*/;

reg  main_113_115;
reg  main_113_115_r0, main_113_115_r1, main_113_115_r2 /*synthesis keep*/;

reg [31:0] main_116_117;
reg [31:0] main_116_117_r0, main_116_117_r1, main_116_117_r2 /*synthesis keep*/;

reg [31:0] main_116_117_reg;
reg [31:0] main_116_117_reg_r0, main_116_117_reg_r1, main_116_117_reg_r2 /*synthesis preserve*/;

reg [31:0] main_116_118;
reg [31:0] main_116_118_r0, main_116_118_r1, main_116_118_r2 /*synthesis keep*/;

reg [31:0] main_116_118_reg;
reg [31:0] main_116_118_reg_r0, main_116_118_reg_r1, main_116_118_reg_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_116_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_116_scevgep8_r0, main_116_scevgep8_r1, main_116_scevgep8_r2 /*synthesis keep*/;

reg [31:0] main_116_119;
reg [31:0] main_116_119_r0, main_116_119_r1, main_116_119_r2 /*synthesis keep*/;

reg [31:0] main_116_120;
reg [31:0] main_116_120_r0, main_116_120_r1, main_116_120_r2 /*synthesis keep*/;

reg [31:0] main_116_121;
reg [31:0] main_116_121_r0, main_116_121_r1, main_116_121_r2 /*synthesis keep*/;

reg  main_116_122;
reg  main_116_122_r0, main_116_122_r1, main_116_122_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_mil0lcssaii;
reg [31:0] main_quantlexiti_mil0lcssaii_r0, main_quantlexiti_mil0lcssaii_r1, main_quantlexiti_mil0lcssaii_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_mil0lcssaii_reg;
reg [31:0] main_quantlexiti_mil0lcssaii_reg_r0, main_quantlexiti_mil0lcssaii_reg_r1, main_quantlexiti_mil0lcssaii_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_quant26bt_posquant26bt_negii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_quant26bt_posquant26bt_negii_r0, main_quantlexiti_quant26bt_posquant26bt_negii_r1, main_quantlexiti_quant26bt_posquant26bt_negii_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_quant26bt_posquant26bt_negii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_quant26bt_posquant26bt_negii_reg_r0, main_quantlexiti_quant26bt_posquant26bt_negii_reg_r1, main_quantlexiti_quant26bt_posquant26bt_negii_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_ril0inii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_ril0inii_r0, main_quantlexiti_ril0inii_r1, main_quantlexiti_ril0inii_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_ril0ii;
reg [31:0] main_quantlexiti_ril0ii_r0, main_quantlexiti_ril0ii_r1, main_quantlexiti_ril0ii_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_ril0ii_reg;
reg [31:0] main_quantlexiti_ril0ii_reg_r0, main_quantlexiti_ril0ii_reg_r1, main_quantlexiti_ril0ii_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_123;
reg [31:0] main_quantlexiti_123_r0, main_quantlexiti_123_r1, main_quantlexiti_123_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_124_r0, main_quantlexiti_124_r1, main_quantlexiti_124_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_125;
reg [31:0] main_quantlexiti_125_r0, main_quantlexiti_125_r1, main_quantlexiti_125_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_126;
reg [31:0] main_quantlexiti_126_r0, main_quantlexiti_126_r1, main_quantlexiti_126_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_127;
reg [31:0] main_quantlexiti_127_r0, main_quantlexiti_127_r1, main_quantlexiti_127_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_127_reg;
reg [31:0] main_quantlexiti_127_reg_r0, main_quantlexiti_127_reg_r1, main_quantlexiti_127_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_128_r0, main_quantlexiti_128_r1, main_quantlexiti_128_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_129;
reg [31:0] main_quantlexiti_129_r0, main_quantlexiti_129_r1, main_quantlexiti_129_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_130;
reg [31:0] main_quantlexiti_130_r0, main_quantlexiti_130_r1, main_quantlexiti_130_r2 /*synthesis keep*/;

reg  main_quantlexiti_131;
reg  main_quantlexiti_131_r0, main_quantlexiti_131_r1, main_quantlexiti_131_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_i12i3;
reg [31:0] main_quantlexiti_i12i3_r0, main_quantlexiti_i12i3_r1, main_quantlexiti_i12i3_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_i12i3_reg;
reg [31:0] main_quantlexiti_i12i3_reg_r0, main_quantlexiti_i12i3_reg_r1, main_quantlexiti_i12i3_reg_r2 /*synthesis preserve*/;

reg  main_quantlexiti_132;
reg  main_quantlexiti_132_r0, main_quantlexiti_132_r1, main_quantlexiti_132_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_i13i4;
reg [31:0] main_quantlexiti_i13i4_r0, main_quantlexiti_i13i4_r1, main_quantlexiti_i13i4_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_i13i4_reg;
reg [31:0] main_quantlexiti_i13i4_reg_r0, main_quantlexiti_i13i4_reg_r1, main_quantlexiti_i13i4_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_133;
reg [31:0] main_quantlexiti_133_r0, main_quantlexiti_133_r1, main_quantlexiti_133_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_134;
reg [31:0] main_quantlexiti_134_r0, main_quantlexiti_134_r1, main_quantlexiti_134_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_134_reg;
reg [31:0] main_quantlexiti_134_reg_r0, main_quantlexiti_134_reg_r1, main_quantlexiti_134_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_135_r0, main_quantlexiti_135_r1, main_quantlexiti_135_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_136;
reg [31:0] main_quantlexiti_136_r0, main_quantlexiti_136_r1, main_quantlexiti_136_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_136_reg;
reg [31:0] main_quantlexiti_136_reg_r0, main_quantlexiti_136_reg_r1, main_quantlexiti_136_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_137;
reg [31:0] main_quantlexiti_137_r0, main_quantlexiti_137_r1, main_quantlexiti_137_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_137_reg;
reg [31:0] main_quantlexiti_137_reg_r0, main_quantlexiti_137_reg_r1, main_quantlexiti_137_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_138;
reg [31:0] main_quantlexiti_138_r0, main_quantlexiti_138_r1, main_quantlexiti_138_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_138_reg;
reg [31:0] main_quantlexiti_138_reg_r0, main_quantlexiti_138_reg_r1, main_quantlexiti_138_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_139;
reg [31:0] main_quantlexiti_139_r0, main_quantlexiti_139_r1, main_quantlexiti_139_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_139_reg;
reg [31:0] main_quantlexiti_139_reg_r0, main_quantlexiti_139_reg_r1, main_quantlexiti_139_reg_r2 /*synthesis preserve*/;

reg  main_quantlexiti_140;
reg  main_quantlexiti_140_r0, main_quantlexiti_140_r1, main_quantlexiti_140_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_141;
reg [31:0] main_quantlexiti_141_r0, main_quantlexiti_141_r1, main_quantlexiti_141_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_141_reg;
reg [31:0] main_quantlexiti_141_reg_r0, main_quantlexiti_141_reg_r1, main_quantlexiti_141_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_1i8i5;
reg [31:0] main_quantlexiti_1i8i5_r0, main_quantlexiti_1i8i5_r1, main_quantlexiti_1i8i5_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_142;
reg [31:0] main_quantlexiti_142_r0, main_quantlexiti_142_r1, main_quantlexiti_142_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_143;
reg [31:0] main_quantlexiti_143_r0, main_quantlexiti_143_r1, main_quantlexiti_143_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_144;
reg [31:0] main_quantlexiti_144_r0, main_quantlexiti_144_r1, main_quantlexiti_144_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_145;
reg [31:0] main_quantlexiti_145_r0, main_quantlexiti_145_r1, main_quantlexiti_145_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_146;
reg [31:0] main_quantlexiti_146_r0, main_quantlexiti_146_r1, main_quantlexiti_146_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_146_reg;
reg [31:0] main_quantlexiti_146_reg_r0, main_quantlexiti_146_reg_r1, main_quantlexiti_146_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_147;
reg [31:0] main_quantlexiti_147_r0, main_quantlexiti_147_r1, main_quantlexiti_147_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_148;
reg [31:0] main_quantlexiti_148_r0, main_quantlexiti_148_r1, main_quantlexiti_148_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_148_reg;
reg [31:0] main_quantlexiti_148_reg_r0, main_quantlexiti_148_reg_r1, main_quantlexiti_148_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_wd40i9i6;
reg [31:0] main_quantlexiti_wd40i9i6_r0, main_quantlexiti_wd40i9i6_r1, main_quantlexiti_wd40i9i6_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_wd40i9i6_reg;
reg [31:0] main_quantlexiti_wd40i9i6_reg_r0, main_quantlexiti_wd40i9i6_reg_r1, main_quantlexiti_wd40i9i6_reg_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_149;
reg [31:0] main_quantlexiti_149_r0, main_quantlexiti_149_r1, main_quantlexiti_149_r2 /*synthesis keep*/;

reg  main_quantlexiti_150;
reg  main_quantlexiti_150_r0, main_quantlexiti_150_r1, main_quantlexiti_150_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_i10i7;
reg [31:0] main_quantlexiti_i10i7_r0, main_quantlexiti_i10i7_r1, main_quantlexiti_i10i7_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_i10i7_reg;
reg [31:0] main_quantlexiti_i10i7_reg_r0, main_quantlexiti_i10i7_reg_r1, main_quantlexiti_i10i7_reg_r2 /*synthesis preserve*/;

reg  main_quantlexiti_151;
reg  main_quantlexiti_151_r0, main_quantlexiti_151_r1, main_quantlexiti_151_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_i11i8;
reg [31:0] main_quantlexiti_i11i8_r0, main_quantlexiti_i11i8_r1, main_quantlexiti_i11i8_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_i11i8_reg;
reg [31:0] main_quantlexiti_i11i8_reg_r0, main_quantlexiti_i11i8_reg_r1, main_quantlexiti_i11i8_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_152;
reg [31:0] main_quantlexiti_152_r0, main_quantlexiti_152_r1, main_quantlexiti_152_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_153;
reg [31:0] main_quantlexiti_153_r0, main_quantlexiti_153_r1, main_quantlexiti_153_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_153_reg;
reg [31:0] main_quantlexiti_153_reg_r0, main_quantlexiti_153_reg_r1, main_quantlexiti_153_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_154;
reg [31:0] main_quantlexiti_154_r0, main_quantlexiti_154_r1, main_quantlexiti_154_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_155;
reg [31:0] main_quantlexiti_155_r0, main_quantlexiti_155_r1, main_quantlexiti_155_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_155_reg;
reg [31:0] main_quantlexiti_155_reg_r0, main_quantlexiti_155_reg_r1, main_quantlexiti_155_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_156;
reg [31:0] main_quantlexiti_156_r0, main_quantlexiti_156_r1, main_quantlexiti_156_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_156_reg;
reg [31:0] main_quantlexiti_156_reg_r0, main_quantlexiti_156_reg_r1, main_quantlexiti_156_reg_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_apl10i5i9;
reg [31:0] main_quantlexiti_apl10i5i9_r0, main_quantlexiti_apl10i5i9_r1, main_quantlexiti_apl10i5i9_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_157;
reg [31:0] main_quantlexiti_157_r0, main_quantlexiti_157_r1, main_quantlexiti_157_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_157_reg;
reg [31:0] main_quantlexiti_157_reg_r0, main_quantlexiti_157_reg_r1, main_quantlexiti_157_reg_r2 /*synthesis preserve*/;

reg  main_quantlexiti_158;
reg  main_quantlexiti_158_r0, main_quantlexiti_158_r1, main_quantlexiti_158_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_apl10i6i10;
reg [31:0] main_quantlexiti_apl10i6i10_r0, main_quantlexiti_apl10i6i10_r1, main_quantlexiti_apl10i6i10_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_apl10i6i10_reg;
reg [31:0] main_quantlexiti_apl10i6i10_reg_r0, main_quantlexiti_apl10i6i10_reg_r1, main_quantlexiti_apl10i6i10_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_159;
reg [31:0] main_quantlexiti_159_r0, main_quantlexiti_159_r1, main_quantlexiti_159_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_159_reg;
reg [31:0] main_quantlexiti_159_reg_r0, main_quantlexiti_159_reg_r1, main_quantlexiti_159_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_160;
reg [31:0] main_quantlexiti_160_r0, main_quantlexiti_160_r1, main_quantlexiti_160_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_161;
reg [31:0] main_quantlexiti_161_r0, main_quantlexiti_161_r1, main_quantlexiti_161_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_162;
reg [31:0] main_quantlexiti_162_r0, main_quantlexiti_162_r1, main_quantlexiti_162_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_162_reg;
reg [31:0] main_quantlexiti_162_reg_r0, main_quantlexiti_162_reg_r1, main_quantlexiti_162_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_163;
reg [31:0] main_quantlexiti_163_r0, main_quantlexiti_163_r1, main_quantlexiti_163_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_164;
reg [31:0] main_quantlexiti_164_r0, main_quantlexiti_164_r1, main_quantlexiti_164_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_165;
reg [31:0] main_quantlexiti_165_r0, main_quantlexiti_165_r1, main_quantlexiti_165_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_166;
reg [31:0] main_quantlexiti_166_r0, main_quantlexiti_166_r1, main_quantlexiti_166_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_166_reg;
reg [31:0] main_quantlexiti_166_reg_r0, main_quantlexiti_166_reg_r1, main_quantlexiti_166_reg_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_167;
reg [31:0] main_quantlexiti_167_r0, main_quantlexiti_167_r1, main_quantlexiti_167_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_168;
reg [31:0] main_quantlexiti_168_r0, main_quantlexiti_168_r1, main_quantlexiti_168_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_169;
reg [31:0] main_quantlexiti_169_r0, main_quantlexiti_169_r1, main_quantlexiti_169_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_170;
reg [31:0] main_quantlexiti_170_r0, main_quantlexiti_170_r1, main_quantlexiti_170_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_170_reg;
reg [31:0] main_quantlexiti_170_reg_r0, main_quantlexiti_170_reg_r1, main_quantlexiti_170_reg_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_171;
reg [31:0] main_quantlexiti_171_r0, main_quantlexiti_171_r1, main_quantlexiti_171_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_172;
reg [31:0] main_quantlexiti_172_r0, main_quantlexiti_172_r1, main_quantlexiti_172_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_173;
reg [31:0] main_quantlexiti_173_r0, main_quantlexiti_173_r1, main_quantlexiti_173_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_174;
reg [31:0] main_quantlexiti_174_r0, main_quantlexiti_174_r1, main_quantlexiti_174_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_174_reg;
reg [31:0] main_quantlexiti_174_reg_r0, main_quantlexiti_174_reg_r1, main_quantlexiti_174_reg_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_175;
reg [31:0] main_quantlexiti_175_r0, main_quantlexiti_175_r1, main_quantlexiti_175_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_176;
reg [31:0] main_quantlexiti_176_r0, main_quantlexiti_176_r1, main_quantlexiti_176_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_177;
reg [31:0] main_quantlexiti_177_r0, main_quantlexiti_177_r1, main_quantlexiti_177_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_178;
reg [31:0] main_quantlexiti_178_r0, main_quantlexiti_178_r1, main_quantlexiti_178_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_178_reg;
reg [31:0] main_quantlexiti_178_reg_r0, main_quantlexiti_178_reg_r1, main_quantlexiti_178_reg_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_179;
reg [31:0] main_quantlexiti_179_r0, main_quantlexiti_179_r1, main_quantlexiti_179_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_180;
reg [31:0] main_quantlexiti_180_r0, main_quantlexiti_180_r1, main_quantlexiti_180_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_181;
reg [31:0] main_quantlexiti_181_r0, main_quantlexiti_181_r1, main_quantlexiti_181_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_182;
reg [31:0] main_quantlexiti_182_r0, main_quantlexiti_182_r1, main_quantlexiti_182_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_183;
reg [31:0] main_quantlexiti_183_r0, main_quantlexiti_183_r1, main_quantlexiti_183_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_183_reg;
reg [31:0] main_quantlexiti_183_reg_r0, main_quantlexiti_183_reg_r1, main_quantlexiti_183_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_184;
reg [31:0] main_quantlexiti_184_r0, main_quantlexiti_184_r1, main_quantlexiti_184_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_184_reg;
reg [31:0] main_quantlexiti_184_reg_r0, main_quantlexiti_184_reg_r1, main_quantlexiti_184_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_185;
reg [31:0] main_quantlexiti_185_r0, main_quantlexiti_185_r1, main_quantlexiti_185_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_185_reg;
reg [31:0] main_quantlexiti_185_reg_r0, main_quantlexiti_185_reg_r1, main_quantlexiti_185_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_tmpi3i12;
reg [31:0] main_quantlexiti_tmpi3i12_r0, main_quantlexiti_tmpi3i12_r1, main_quantlexiti_tmpi3i12_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_tmp1i4i13;
reg [31:0] main_quantlexiti_tmp1i4i13_r0, main_quantlexiti_tmp1i4i13_r1, main_quantlexiti_tmp1i4i13_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_186;
reg [31:0] main_quantlexiti_186_r0, main_quantlexiti_186_r1, main_quantlexiti_186_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_186_reg;
reg [31:0] main_quantlexiti_186_reg_r0, main_quantlexiti_186_reg_r1, main_quantlexiti_186_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_187;
reg [31:0] main_quantlexiti_187_r0, main_quantlexiti_187_r1, main_quantlexiti_187_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_187_reg;
reg [31:0] main_quantlexiti_187_reg_r0, main_quantlexiti_187_reg_r1, main_quantlexiti_187_reg_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_188;
reg [31:0] main_quantlexiti_188_r0, main_quantlexiti_188_r1, main_quantlexiti_188_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_188_reg;
reg [31:0] main_quantlexiti_188_reg_r0, main_quantlexiti_188_reg_r1, main_quantlexiti_188_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_189;
reg [31:0] main_quantlexiti_189_r0, main_quantlexiti_189_r1, main_quantlexiti_189_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_190;
reg [31:0] main_quantlexiti_190_r0, main_quantlexiti_190_r1, main_quantlexiti_190_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_190_reg;
reg [31:0] main_quantlexiti_190_reg_r0, main_quantlexiti_190_reg_r1, main_quantlexiti_190_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_191;
reg [31:0] main_quantlexiti_191_r0, main_quantlexiti_191_r1, main_quantlexiti_191_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_192;
reg [31:0] main_quantlexiti_192_r0, main_quantlexiti_192_r1, main_quantlexiti_192_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_192_reg;
reg [31:0] main_quantlexiti_192_reg_r0, main_quantlexiti_192_reg_r1, main_quantlexiti_192_reg_r2 /*synthesis preserve*/;

reg  main_quantlexiti_193;
reg  main_quantlexiti_193_r0, main_quantlexiti_193_r1, main_quantlexiti_193_r2 /*synthesis keep*/;

reg  main_quantlexiti_193_reg;
reg  main_quantlexiti_193_reg_r0, main_quantlexiti_193_reg_r1, main_quantlexiti_193_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_194;
reg [31:0] main_quantlexiti_194_r0, main_quantlexiti_194_r1, main_quantlexiti_194_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_194_reg;
reg [31:0] main_quantlexiti_194_reg_r0, main_quantlexiti_194_reg_r1, main_quantlexiti_194_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_m0ii;
reg [31:0] main_quantlexiti_m0ii_r0, main_quantlexiti_m0ii_r1, main_quantlexiti_m0ii_r2 /*synthesis keep*/;

reg  main_quantlexiti_195;
reg  main_quantlexiti_195_r0, main_quantlexiti_195_r1, main_quantlexiti_195_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_v;
reg [31:0] main_quantlexiti_v_r0, main_quantlexiti_v_r1, main_quantlexiti_v_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_v_reg;
reg [31:0] main_quantlexiti_v_reg_r0, main_quantlexiti_v_reg_r1, main_quantlexiti_v_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_;
reg [31:0] main_quantlexiti__r0, main_quantlexiti__r1, main_quantlexiti__r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti__reg;
reg [31:0] main_quantlexiti__reg_r0, main_quantlexiti__reg_r1, main_quantlexiti__reg_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_196;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_196_r0, main_quantlexiti_196_r1, main_quantlexiti_196_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_197;
reg [31:0] main_quantlexiti_197_r0, main_quantlexiti_197_r1, main_quantlexiti_197_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_198;
reg [31:0] main_quantlexiti_198_r0, main_quantlexiti_198_r1, main_quantlexiti_198_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_199;
reg [31:0] main_quantlexiti_199_r0, main_quantlexiti_199_r1, main_quantlexiti_199_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_199_reg;
reg [31:0] main_quantlexiti_199_reg_r0, main_quantlexiti_199_reg_r1, main_quantlexiti_199_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_200;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_200_r0, main_quantlexiti_200_r1, main_quantlexiti_200_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_201;
reg [31:0] main_quantlexiti_201_r0, main_quantlexiti_201_r1, main_quantlexiti_201_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_202;
reg [31:0] main_quantlexiti_202_r0, main_quantlexiti_202_r1, main_quantlexiti_202_r2 /*synthesis keep*/;

reg  main_quantlexiti_203;
reg  main_quantlexiti_203_r0, main_quantlexiti_203_r1, main_quantlexiti_203_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_i1i14;
reg [31:0] main_quantlexiti_i1i14_r0, main_quantlexiti_i1i14_r1, main_quantlexiti_i1i14_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_i1i14_reg;
reg [31:0] main_quantlexiti_i1i14_reg_r0, main_quantlexiti_i1i14_reg_r1, main_quantlexiti_i1i14_reg_r2 /*synthesis preserve*/;

reg  main_quantlexiti_204;
reg  main_quantlexiti_204_r0, main_quantlexiti_204_r1, main_quantlexiti_204_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_i2i15;
reg [31:0] main_quantlexiti_i2i15_r0, main_quantlexiti_i2i15_r1, main_quantlexiti_i2i15_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_i2i15_reg;
reg [31:0] main_quantlexiti_i2i15_reg_r0, main_quantlexiti_i2i15_reg_r1, main_quantlexiti_i2i15_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_205;
reg [31:0] main_quantlexiti_205_r0, main_quantlexiti_205_r1, main_quantlexiti_205_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_206;
reg [31:0] main_quantlexiti_206_r0, main_quantlexiti_206_r1, main_quantlexiti_206_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_206_reg;
reg [31:0] main_quantlexiti_206_reg_r0, main_quantlexiti_206_reg_r1, main_quantlexiti_206_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_207;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_207_r0, main_quantlexiti_207_r1, main_quantlexiti_207_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_208;
reg [31:0] main_quantlexiti_208_r0, main_quantlexiti_208_r1, main_quantlexiti_208_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_208_reg;
reg [31:0] main_quantlexiti_208_reg_r0, main_quantlexiti_208_reg_r1, main_quantlexiti_208_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_209;
reg [31:0] main_quantlexiti_209_r0, main_quantlexiti_209_r1, main_quantlexiti_209_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_209_reg;
reg [31:0] main_quantlexiti_209_reg_r0, main_quantlexiti_209_reg_r1, main_quantlexiti_209_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_210;
reg [31:0] main_quantlexiti_210_r0, main_quantlexiti_210_r1, main_quantlexiti_210_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_210_reg;
reg [31:0] main_quantlexiti_210_reg_r0, main_quantlexiti_210_reg_r1, main_quantlexiti_210_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_211;
reg [31:0] main_quantlexiti_211_r0, main_quantlexiti_211_r1, main_quantlexiti_211_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_211_reg;
reg [31:0] main_quantlexiti_211_reg_r0, main_quantlexiti_211_reg_r1, main_quantlexiti_211_reg_r2 /*synthesis preserve*/;

reg  main_quantlexiti_212;
reg  main_quantlexiti_212_r0, main_quantlexiti_212_r1, main_quantlexiti_212_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_213;
reg [31:0] main_quantlexiti_213_r0, main_quantlexiti_213_r1, main_quantlexiti_213_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_213_reg;
reg [31:0] main_quantlexiti_213_reg_r0, main_quantlexiti_213_reg_r1, main_quantlexiti_213_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_1ii16;
reg [31:0] main_quantlexiti_1ii16_r0, main_quantlexiti_1ii16_r1, main_quantlexiti_1ii16_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_214;
reg [31:0] main_quantlexiti_214_r0, main_quantlexiti_214_r1, main_quantlexiti_214_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_215;
reg [31:0] main_quantlexiti_215_r0, main_quantlexiti_215_r1, main_quantlexiti_215_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_216;
reg [31:0] main_quantlexiti_216_r0, main_quantlexiti_216_r1, main_quantlexiti_216_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_217;
reg [31:0] main_quantlexiti_217_r0, main_quantlexiti_217_r1, main_quantlexiti_217_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_218;
reg [31:0] main_quantlexiti_218_r0, main_quantlexiti_218_r1, main_quantlexiti_218_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_218_reg;
reg [31:0] main_quantlexiti_218_reg_r0, main_quantlexiti_218_reg_r1, main_quantlexiti_218_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_219;
reg [31:0] main_quantlexiti_219_r0, main_quantlexiti_219_r1, main_quantlexiti_219_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_220;
reg [31:0] main_quantlexiti_220_r0, main_quantlexiti_220_r1, main_quantlexiti_220_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_220_reg;
reg [31:0] main_quantlexiti_220_reg_r0, main_quantlexiti_220_reg_r1, main_quantlexiti_220_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_wd40ii17;
reg [31:0] main_quantlexiti_wd40ii17_r0, main_quantlexiti_wd40ii17_r1, main_quantlexiti_wd40ii17_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_wd40ii17_reg;
reg [31:0] main_quantlexiti_wd40ii17_reg_r0, main_quantlexiti_wd40ii17_reg_r1, main_quantlexiti_wd40ii17_reg_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_221;
reg [31:0] main_quantlexiti_221_r0, main_quantlexiti_221_r1, main_quantlexiti_221_r2 /*synthesis keep*/;

reg  main_quantlexiti_222;
reg  main_quantlexiti_222_r0, main_quantlexiti_222_r1, main_quantlexiti_222_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_ii18;
reg [31:0] main_quantlexiti_ii18_r0, main_quantlexiti_ii18_r1, main_quantlexiti_ii18_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_ii18_reg;
reg [31:0] main_quantlexiti_ii18_reg_r0, main_quantlexiti_ii18_reg_r1, main_quantlexiti_ii18_reg_r2 /*synthesis preserve*/;

reg  main_quantlexiti_223;
reg  main_quantlexiti_223_r0, main_quantlexiti_223_r1, main_quantlexiti_223_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_ii19;
reg [31:0] main_quantlexiti_ii19_r0, main_quantlexiti_ii19_r1, main_quantlexiti_ii19_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_ii19_reg;
reg [31:0] main_quantlexiti_ii19_reg_r0, main_quantlexiti_ii19_reg_r1, main_quantlexiti_ii19_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_224;
reg [31:0] main_quantlexiti_224_r0, main_quantlexiti_224_r1, main_quantlexiti_224_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_225;
reg [31:0] main_quantlexiti_225_r0, main_quantlexiti_225_r1, main_quantlexiti_225_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_225_reg;
reg [31:0] main_quantlexiti_225_reg_r0, main_quantlexiti_225_reg_r1, main_quantlexiti_225_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_226;
reg [31:0] main_quantlexiti_226_r0, main_quantlexiti_226_r1, main_quantlexiti_226_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_227;
reg [31:0] main_quantlexiti_227_r0, main_quantlexiti_227_r1, main_quantlexiti_227_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_227_reg;
reg [31:0] main_quantlexiti_227_reg_r0, main_quantlexiti_227_reg_r1, main_quantlexiti_227_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_228;
reg [31:0] main_quantlexiti_228_r0, main_quantlexiti_228_r1, main_quantlexiti_228_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_228_reg;
reg [31:0] main_quantlexiti_228_reg_r0, main_quantlexiti_228_reg_r1, main_quantlexiti_228_reg_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_apl10ii20;
reg [31:0] main_quantlexiti_apl10ii20_r0, main_quantlexiti_apl10ii20_r1, main_quantlexiti_apl10ii20_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_229;
reg [31:0] main_quantlexiti_229_r0, main_quantlexiti_229_r1, main_quantlexiti_229_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_229_reg;
reg [31:0] main_quantlexiti_229_reg_r0, main_quantlexiti_229_reg_r1, main_quantlexiti_229_reg_r2 /*synthesis preserve*/;

reg  main_quantlexiti_230;
reg  main_quantlexiti_230_r0, main_quantlexiti_230_r1, main_quantlexiti_230_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_apl10ii21;
reg [31:0] main_quantlexiti_apl10ii21_r0, main_quantlexiti_apl10ii21_r1, main_quantlexiti_apl10ii21_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_apl10ii21_reg;
reg [31:0] main_quantlexiti_apl10ii21_reg_r0, main_quantlexiti_apl10ii21_reg_r1, main_quantlexiti_apl10ii21_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_231;
reg [31:0] main_quantlexiti_231_r0, main_quantlexiti_231_r1, main_quantlexiti_231_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_231_reg;
reg [31:0] main_quantlexiti_231_reg_r0, main_quantlexiti_231_reg_r1, main_quantlexiti_231_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_232;
reg [31:0] main_quantlexiti_232_r0, main_quantlexiti_232_r1, main_quantlexiti_232_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_233;
reg [31:0] main_quantlexiti_233_r0, main_quantlexiti_233_r1, main_quantlexiti_233_r2 /*synthesis keep*/;

reg [31:0] main_quantlexiti_233_reg;
reg [31:0] main_quantlexiti_233_reg_r0, main_quantlexiti_233_reg_r1, main_quantlexiti_233_reg_r2 /*synthesis preserve*/;

reg [31:0] main_quantlexiti_234;
reg [31:0] main_quantlexiti_234_r0, main_quantlexiti_234_r1, main_quantlexiti_234_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_235;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_235_r0, main_quantlexiti_235_r1, main_quantlexiti_235_r2 /*synthesis keep*/;

reg  main_quantlexiti_236;
reg  main_quantlexiti_236_r0, main_quantlexiti_236_r1, main_quantlexiti_236_r2 /*synthesis keep*/;

reg  main_quantlexiti_236_reg;
reg  main_quantlexiti_236_reg_r0, main_quantlexiti_236_reg_r1, main_quantlexiti_236_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_237;
reg [31:0] main_encodeexit_crit_edge_237_r0, main_encodeexit_crit_edge_237_r1, main_encodeexit_crit_edge_237_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_237_reg;
reg [31:0] main_encodeexit_crit_edge_237_reg_r0, main_encodeexit_crit_edge_237_reg_r1, main_encodeexit_crit_edge_237_reg_r2 /*synthesis keep*/;

reg  main_encodeexit_crit_edge_238;
reg  main_encodeexit_crit_edge_238_r0, main_encodeexit_crit_edge_238_r1, main_encodeexit_crit_edge_238_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_apl12ii22;
reg [31:0] main_encodeexit_crit_edge_apl12ii22_r0, main_encodeexit_crit_edge_apl12ii22_r1, main_encodeexit_crit_edge_apl12ii22_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_apl12ii22_reg;
reg [31:0] main_encodeexit_crit_edge_apl12ii22_reg_r0, main_encodeexit_crit_edge_apl12ii22_reg_r1, main_encodeexit_crit_edge_apl12ii22_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_239;
reg [31:0] main_encodeexit_crit_edge_239_r0, main_encodeexit_crit_edge_239_r1, main_encodeexit_crit_edge_239_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_240;
reg [31:0] main_encodeexit_crit_edge_240_r0, main_encodeexit_crit_edge_240_r1, main_encodeexit_crit_edge_240_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_241;
reg [31:0] main_encodeexit_crit_edge_241_r0, main_encodeexit_crit_edge_241_r1, main_encodeexit_crit_edge_241_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_242;
reg [31:0] main_encodeexit_crit_edge_242_r0, main_encodeexit_crit_edge_242_r1, main_encodeexit_crit_edge_242_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_242_reg;
reg [31:0] main_encodeexit_crit_edge_242_reg_r0, main_encodeexit_crit_edge_242_reg_r1, main_encodeexit_crit_edge_242_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_243;
reg [31:0] main_encodeexit_crit_edge_243_r0, main_encodeexit_crit_edge_243_r1, main_encodeexit_crit_edge_243_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_243_reg;
reg [31:0] main_encodeexit_crit_edge_243_reg_r0, main_encodeexit_crit_edge_243_reg_r1, main_encodeexit_crit_edge_243_reg_r2 /*synthesis keep*/;

reg  main_encodeexit_crit_edge_244;
reg  main_encodeexit_crit_edge_244_r0, main_encodeexit_crit_edge_244_r1, main_encodeexit_crit_edge_244_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_apl12i7i11;
reg [31:0] main_encodeexit_crit_edge_apl12i7i11_r0, main_encodeexit_crit_edge_apl12i7i11_r1, main_encodeexit_crit_edge_apl12i7i11_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_apl12i7i11_reg;
reg [31:0] main_encodeexit_crit_edge_apl12i7i11_reg_r0, main_encodeexit_crit_edge_apl12i7i11_reg_r1, main_encodeexit_crit_edge_apl12i7i11_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_245;
reg [31:0] main_encodeexit_crit_edge_245_r0, main_encodeexit_crit_edge_245_r1, main_encodeexit_crit_edge_245_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_246;
reg [31:0] main_encodeexit_crit_edge_246_r0, main_encodeexit_crit_edge_246_r1, main_encodeexit_crit_edge_246_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_247;
reg [31:0] main_encodeexit_crit_edge_247_r0, main_encodeexit_crit_edge_247_r1, main_encodeexit_crit_edge_247_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_248;
reg [31:0] main_encodeexit_crit_edge_248_r0, main_encodeexit_crit_edge_248_r1, main_encodeexit_crit_edge_248_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_248_reg;
reg [31:0] main_encodeexit_crit_edge_248_reg_r0, main_encodeexit_crit_edge_248_reg_r1, main_encodeexit_crit_edge_248_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre;
reg [31:0] main_encodeexit_crit_edge_pre_r0, main_encodeexit_crit_edge_pre_r1, main_encodeexit_crit_edge_pre_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre_reg;
reg [31:0] main_encodeexit_crit_edge_pre_reg_r0, main_encodeexit_crit_edge_pre_reg_r1, main_encodeexit_crit_edge_pre_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre37;
reg [31:0] main_encodeexit_crit_edge_pre37_r0, main_encodeexit_crit_edge_pre37_r1, main_encodeexit_crit_edge_pre37_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre37_reg;
reg [31:0] main_encodeexit_crit_edge_pre37_reg_r0, main_encodeexit_crit_edge_pre37_reg_r1, main_encodeexit_crit_edge_pre37_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre38;
reg [31:0] main_encodeexit_crit_edge_pre38_r0, main_encodeexit_crit_edge_pre38_r1, main_encodeexit_crit_edge_pre38_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre38_reg;
reg [31:0] main_encodeexit_crit_edge_pre38_reg_r0, main_encodeexit_crit_edge_pre38_reg_r1, main_encodeexit_crit_edge_pre38_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre39;
reg [31:0] main_encodeexit_crit_edge_pre39_r0, main_encodeexit_crit_edge_pre39_r1, main_encodeexit_crit_edge_pre39_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre39_reg;
reg [31:0] main_encodeexit_crit_edge_pre39_reg_r0, main_encodeexit_crit_edge_pre39_reg_r1, main_encodeexit_crit_edge_pre39_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre40;
reg [31:0] main_encodeexit_crit_edge_pre40_r0, main_encodeexit_crit_edge_pre40_r1, main_encodeexit_crit_edge_pre40_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre40_reg;
reg [31:0] main_encodeexit_crit_edge_pre40_reg_r0, main_encodeexit_crit_edge_pre40_reg_r1, main_encodeexit_crit_edge_pre40_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre41;
reg [31:0] main_encodeexit_crit_edge_pre41_r0, main_encodeexit_crit_edge_pre41_r1, main_encodeexit_crit_edge_pre41_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre41_reg;
reg [31:0] main_encodeexit_crit_edge_pre41_reg_r0, main_encodeexit_crit_edge_pre41_reg_r1, main_encodeexit_crit_edge_pre41_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre42;
reg [31:0] main_encodeexit_crit_edge_pre42_r0, main_encodeexit_crit_edge_pre42_r1, main_encodeexit_crit_edge_pre42_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre42_reg;
reg [31:0] main_encodeexit_crit_edge_pre42_reg_r0, main_encodeexit_crit_edge_pre42_reg_r1, main_encodeexit_crit_edge_pre42_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre43;
reg [31:0] main_encodeexit_crit_edge_pre43_r0, main_encodeexit_crit_edge_pre43_r1, main_encodeexit_crit_edge_pre43_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre43_reg;
reg [31:0] main_encodeexit_crit_edge_pre43_reg_r0, main_encodeexit_crit_edge_pre43_reg_r1, main_encodeexit_crit_edge_pre43_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre44;
reg [31:0] main_encodeexit_crit_edge_pre44_r0, main_encodeexit_crit_edge_pre44_r1, main_encodeexit_crit_edge_pre44_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre44_reg;
reg [31:0] main_encodeexit_crit_edge_pre44_reg_r0, main_encodeexit_crit_edge_pre44_reg_r1, main_encodeexit_crit_edge_pre44_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre45;
reg [31:0] main_encodeexit_crit_edge_pre45_r0, main_encodeexit_crit_edge_pre45_r1, main_encodeexit_crit_edge_pre45_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre45_reg;
reg [31:0] main_encodeexit_crit_edge_pre45_reg_r0, main_encodeexit_crit_edge_pre45_reg_r1, main_encodeexit_crit_edge_pre45_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre46;
reg [31:0] main_encodeexit_crit_edge_pre46_r0, main_encodeexit_crit_edge_pre46_r1, main_encodeexit_crit_edge_pre46_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre46_reg;
reg [31:0] main_encodeexit_crit_edge_pre46_reg_r0, main_encodeexit_crit_edge_pre46_reg_r1, main_encodeexit_crit_edge_pre46_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre47;
reg [31:0] main_encodeexit_crit_edge_pre47_r0, main_encodeexit_crit_edge_pre47_r1, main_encodeexit_crit_edge_pre47_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre47_reg;
reg [31:0] main_encodeexit_crit_edge_pre47_reg_r0, main_encodeexit_crit_edge_pre47_reg_r1, main_encodeexit_crit_edge_pre47_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre48;
reg [31:0] main_encodeexit_crit_edge_pre48_r0, main_encodeexit_crit_edge_pre48_r1, main_encodeexit_crit_edge_pre48_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre48_reg;
reg [31:0] main_encodeexit_crit_edge_pre48_reg_r0, main_encodeexit_crit_edge_pre48_reg_r1, main_encodeexit_crit_edge_pre48_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre49;
reg [31:0] main_encodeexit_crit_edge_pre49_r0, main_encodeexit_crit_edge_pre49_r1, main_encodeexit_crit_edge_pre49_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre49_reg;
reg [31:0] main_encodeexit_crit_edge_pre49_reg_r0, main_encodeexit_crit_edge_pre49_reg_r1, main_encodeexit_crit_edge_pre49_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre50;
reg [31:0] main_encodeexit_crit_edge_pre50_r0, main_encodeexit_crit_edge_pre50_r1, main_encodeexit_crit_edge_pre50_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre50_reg;
reg [31:0] main_encodeexit_crit_edge_pre50_reg_r0, main_encodeexit_crit_edge_pre50_reg_r1, main_encodeexit_crit_edge_pre50_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre51;
reg [31:0] main_encodeexit_crit_edge_pre51_r0, main_encodeexit_crit_edge_pre51_r1, main_encodeexit_crit_edge_pre51_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre51_reg;
reg [31:0] main_encodeexit_crit_edge_pre51_reg_r0, main_encodeexit_crit_edge_pre51_reg_r1, main_encodeexit_crit_edge_pre51_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre52;
reg [31:0] main_encodeexit_crit_edge_pre52_r0, main_encodeexit_crit_edge_pre52_r1, main_encodeexit_crit_edge_pre52_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre52_reg;
reg [31:0] main_encodeexit_crit_edge_pre52_reg_r0, main_encodeexit_crit_edge_pre52_reg_r1, main_encodeexit_crit_edge_pre52_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre53;
reg [31:0] main_encodeexit_crit_edge_pre53_r0, main_encodeexit_crit_edge_pre53_r1, main_encodeexit_crit_edge_pre53_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre53_reg;
reg [31:0] main_encodeexit_crit_edge_pre53_reg_r0, main_encodeexit_crit_edge_pre53_reg_r1, main_encodeexit_crit_edge_pre53_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre54;
reg [31:0] main_encodeexit_crit_edge_pre54_r0, main_encodeexit_crit_edge_pre54_r1, main_encodeexit_crit_edge_pre54_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre54_reg;
reg [31:0] main_encodeexit_crit_edge_pre54_reg_r0, main_encodeexit_crit_edge_pre54_reg_r1, main_encodeexit_crit_edge_pre54_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre55;
reg [31:0] main_encodeexit_crit_edge_pre55_r0, main_encodeexit_crit_edge_pre55_r1, main_encodeexit_crit_edge_pre55_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre55_reg;
reg [31:0] main_encodeexit_crit_edge_pre55_reg_r0, main_encodeexit_crit_edge_pre55_reg_r1, main_encodeexit_crit_edge_pre55_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre56;
reg [31:0] main_encodeexit_crit_edge_pre56_r0, main_encodeexit_crit_edge_pre56_r1, main_encodeexit_crit_edge_pre56_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre56_reg;
reg [31:0] main_encodeexit_crit_edge_pre56_reg_r0, main_encodeexit_crit_edge_pre56_reg_r1, main_encodeexit_crit_edge_pre56_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre57;
reg [31:0] main_encodeexit_crit_edge_pre57_r0, main_encodeexit_crit_edge_pre57_r1, main_encodeexit_crit_edge_pre57_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre57_reg;
reg [31:0] main_encodeexit_crit_edge_pre57_reg_r0, main_encodeexit_crit_edge_pre57_reg_r1, main_encodeexit_crit_edge_pre57_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_pre58;
reg [31:0] main_encodeexit_crit_edge_pre58_r0, main_encodeexit_crit_edge_pre58_r1, main_encodeexit_crit_edge_pre58_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_pre59;
reg [31:0] main_encodeexit_crit_edge_pre59_r0, main_encodeexit_crit_edge_pre59_r1, main_encodeexit_crit_edge_pre59_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_phitmp;
reg [31:0] main_encodeexit_crit_edge_phitmp_r0, main_encodeexit_crit_edge_phitmp_r1, main_encodeexit_crit_edge_phitmp_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_phitmp1;
reg [31:0] main_encodeexit_crit_edge_phitmp1_r0, main_encodeexit_crit_edge_phitmp1_r1, main_encodeexit_crit_edge_phitmp1_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_phitmp2;
reg [31:0] main_encodeexit_crit_edge_phitmp2_r0, main_encodeexit_crit_edge_phitmp2_r1, main_encodeexit_crit_edge_phitmp2_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_phitmp3;
reg [31:0] main_encodeexit_crit_edge_phitmp3_r0, main_encodeexit_crit_edge_phitmp3_r1, main_encodeexit_crit_edge_phitmp3_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_phitmp3_reg;
reg [31:0] main_encodeexit_crit_edge_phitmp3_reg_r0, main_encodeexit_crit_edge_phitmp3_reg_r1, main_encodeexit_crit_edge_phitmp3_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_phitmp4;
reg [31:0] main_encodeexit_crit_edge_phitmp4_r0, main_encodeexit_crit_edge_phitmp4_r1, main_encodeexit_crit_edge_phitmp4_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_phitmp5;
reg [31:0] main_encodeexit_crit_edge_phitmp5_r0, main_encodeexit_crit_edge_phitmp5_r1, main_encodeexit_crit_edge_phitmp5_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_phitmp5_reg;
reg [31:0] main_encodeexit_crit_edge_phitmp5_reg_r0, main_encodeexit_crit_edge_phitmp5_reg_r1, main_encodeexit_crit_edge_phitmp5_reg_r2 /*synthesis preserve*/;

reg [31:0] main_encodeexit_crit_edge_indvarnext10;
reg [31:0] main_encodeexit_crit_edge_indvarnext10_r0, main_encodeexit_crit_edge_indvarnext10_r1, main_encodeexit_crit_edge_indvarnext10_r2 /*synthesis keep*/;

reg [31:0] main_encodeexit_crit_edge_indvarnext10_reg;
reg [31:0] main_encodeexit_crit_edge_indvarnext10_reg_r0, main_encodeexit_crit_edge_indvarnext10_reg_r1, main_encodeexit_crit_edge_indvarnext10_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderipreheader_249;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderipreheader_249_r0, main_preheaderipreheader_249_r1, main_preheaderipreheader_249_r2 /*synthesis keep*/;

reg [31:0] main_preheaderipreheader_250;
reg [31:0] main_preheaderipreheader_250_r0, main_preheaderipreheader_250_r1, main_preheaderipreheader_250_r2 /*synthesis keep*/;

reg [31:0] main_preheaderipreheader_250_reg;
reg [31:0] main_preheaderipreheader_250_reg_r0, main_preheaderipreheader_250_reg_r1, main_preheaderipreheader_250_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_indvar;
reg [31:0] main_preheaderi_indvar_r0, main_preheaderi_indvar_r1, main_preheaderi_indvar_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_indvar_reg;
reg [31:0] main_preheaderi_indvar_reg_r0, main_preheaderi_indvar_reg_r1, main_preheaderi_indvar_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumd100;
reg [31:0] main_preheaderi_accumd100_r0, main_preheaderi_accumd100_r1, main_preheaderi_accumd100_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumd100_reg;
reg [31:0] main_preheaderi_accumd100_reg_r0, main_preheaderi_accumd100_reg_r1, main_preheaderi_accumd100_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumd90;
reg [31:0] main_preheaderi_accumd90_r0, main_preheaderi_accumd90_r1, main_preheaderi_accumd90_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumd90_reg;
reg [31:0] main_preheaderi_accumd90_reg_r0, main_preheaderi_accumd90_reg_r1, main_preheaderi_accumd90_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumd80;
reg [31:0] main_preheaderi_accumd80_r0, main_preheaderi_accumd80_r1, main_preheaderi_accumd80_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumd80_reg;
reg [31:0] main_preheaderi_accumd80_reg_r0, main_preheaderi_accumd80_reg_r1, main_preheaderi_accumd80_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumd70;
reg [31:0] main_preheaderi_accumd70_r0, main_preheaderi_accumd70_r1, main_preheaderi_accumd70_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumd70_reg;
reg [31:0] main_preheaderi_accumd70_reg_r0, main_preheaderi_accumd70_reg_r1, main_preheaderi_accumd70_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumd60;
reg [31:0] main_preheaderi_accumd60_r0, main_preheaderi_accumd60_r1, main_preheaderi_accumd60_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumd60_reg;
reg [31:0] main_preheaderi_accumd60_reg_r0, main_preheaderi_accumd60_reg_r1, main_preheaderi_accumd60_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumd50;
reg [31:0] main_preheaderi_accumd50_r0, main_preheaderi_accumd50_r1, main_preheaderi_accumd50_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumd50_reg;
reg [31:0] main_preheaderi_accumd50_reg_r0, main_preheaderi_accumd50_reg_r1, main_preheaderi_accumd50_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumd40;
reg [31:0] main_preheaderi_accumd40_r0, main_preheaderi_accumd40_r1, main_preheaderi_accumd40_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumd40_reg;
reg [31:0] main_preheaderi_accumd40_reg_r0, main_preheaderi_accumd40_reg_r1, main_preheaderi_accumd40_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumd30;
reg [31:0] main_preheaderi_accumd30_r0, main_preheaderi_accumd30_r1, main_preheaderi_accumd30_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumd30_reg;
reg [31:0] main_preheaderi_accumd30_reg_r0, main_preheaderi_accumd30_reg_r1, main_preheaderi_accumd30_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumd20;
reg [31:0] main_preheaderi_accumd20_r0, main_preheaderi_accumd20_r1, main_preheaderi_accumd20_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumd20_reg;
reg [31:0] main_preheaderi_accumd20_reg_r0, main_preheaderi_accumd20_reg_r1, main_preheaderi_accumd20_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumd10;
reg [31:0] main_preheaderi_accumd10_r0, main_preheaderi_accumd10_r1, main_preheaderi_accumd10_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumd10_reg;
reg [31:0] main_preheaderi_accumd10_reg_r0, main_preheaderi_accumd10_reg_r1, main_preheaderi_accumd10_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumd00;
reg [31:0] main_preheaderi_accumd00_r0, main_preheaderi_accumd00_r1, main_preheaderi_accumd00_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumd00_reg;
reg [31:0] main_preheaderi_accumd00_reg_r0, main_preheaderi_accumd00_reg_r1, main_preheaderi_accumd00_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumc100;
reg [31:0] main_preheaderi_accumc100_r0, main_preheaderi_accumc100_r1, main_preheaderi_accumc100_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumc100_reg;
reg [31:0] main_preheaderi_accumc100_reg_r0, main_preheaderi_accumc100_reg_r1, main_preheaderi_accumc100_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumc90;
reg [31:0] main_preheaderi_accumc90_r0, main_preheaderi_accumc90_r1, main_preheaderi_accumc90_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumc90_reg;
reg [31:0] main_preheaderi_accumc90_reg_r0, main_preheaderi_accumc90_reg_r1, main_preheaderi_accumc90_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumc80;
reg [31:0] main_preheaderi_accumc80_r0, main_preheaderi_accumc80_r1, main_preheaderi_accumc80_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumc80_reg;
reg [31:0] main_preheaderi_accumc80_reg_r0, main_preheaderi_accumc80_reg_r1, main_preheaderi_accumc80_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumc70;
reg [31:0] main_preheaderi_accumc70_r0, main_preheaderi_accumc70_r1, main_preheaderi_accumc70_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumc70_reg;
reg [31:0] main_preheaderi_accumc70_reg_r0, main_preheaderi_accumc70_reg_r1, main_preheaderi_accumc70_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumc60;
reg [31:0] main_preheaderi_accumc60_r0, main_preheaderi_accumc60_r1, main_preheaderi_accumc60_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumc60_reg;
reg [31:0] main_preheaderi_accumc60_reg_r0, main_preheaderi_accumc60_reg_r1, main_preheaderi_accumc60_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumc50;
reg [31:0] main_preheaderi_accumc50_r0, main_preheaderi_accumc50_r1, main_preheaderi_accumc50_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumc50_reg;
reg [31:0] main_preheaderi_accumc50_reg_r0, main_preheaderi_accumc50_reg_r1, main_preheaderi_accumc50_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumc40;
reg [31:0] main_preheaderi_accumc40_r0, main_preheaderi_accumc40_r1, main_preheaderi_accumc40_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumc40_reg;
reg [31:0] main_preheaderi_accumc40_reg_r0, main_preheaderi_accumc40_reg_r1, main_preheaderi_accumc40_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumc30;
reg [31:0] main_preheaderi_accumc30_r0, main_preheaderi_accumc30_r1, main_preheaderi_accumc30_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumc30_reg;
reg [31:0] main_preheaderi_accumc30_reg_r0, main_preheaderi_accumc30_reg_r1, main_preheaderi_accumc30_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumc20;
reg [31:0] main_preheaderi_accumc20_r0, main_preheaderi_accumc20_r1, main_preheaderi_accumc20_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumc20_reg;
reg [31:0] main_preheaderi_accumc20_reg_r0, main_preheaderi_accumc20_reg_r1, main_preheaderi_accumc20_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumc10;
reg [31:0] main_preheaderi_accumc10_r0, main_preheaderi_accumc10_r1, main_preheaderi_accumc10_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumc10_reg;
reg [31:0] main_preheaderi_accumc10_reg_r0, main_preheaderi_accumc10_reg_r1, main_preheaderi_accumc10_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_accumc00;
reg [31:0] main_preheaderi_accumc00_r0, main_preheaderi_accumc00_r1, main_preheaderi_accumc00_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_accumc00_reg;
reg [31:0] main_preheaderi_accumc00_reg_r0, main_preheaderi_accumc00_reg_r1, main_preheaderi_accumc00_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_dec_ph20;
reg [31:0] main_preheaderi_dec_ph20_r0, main_preheaderi_dec_ph20_r1, main_preheaderi_dec_ph20_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_dec_ph20_reg;
reg [31:0] main_preheaderi_dec_ph20_reg_r0, main_preheaderi_dec_ph20_reg_r1, main_preheaderi_dec_ph20_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_dec_ph10;
reg [31:0] main_preheaderi_dec_ph10_r0, main_preheaderi_dec_ph10_r1, main_preheaderi_dec_ph10_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_dec_ph10_reg;
reg [31:0] main_preheaderi_dec_ph10_reg_r0, main_preheaderi_dec_ph10_reg_r1, main_preheaderi_dec_ph10_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_dec_nbh0;
reg [31:0] main_preheaderi_dec_nbh0_r0, main_preheaderi_dec_nbh0_r1, main_preheaderi_dec_nbh0_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_dec_nbh0_reg;
reg [31:0] main_preheaderi_dec_nbh0_reg_r0, main_preheaderi_dec_nbh0_reg_r1, main_preheaderi_dec_nbh0_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_dec_deth0;
reg [31:0] main_preheaderi_dec_deth0_r0, main_preheaderi_dec_deth0_r1, main_preheaderi_dec_deth0_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_dec_deth0_reg;
reg [31:0] main_preheaderi_dec_deth0_reg_r0, main_preheaderi_dec_deth0_reg_r1, main_preheaderi_dec_deth0_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_dec_ah20;
reg [31:0] main_preheaderi_dec_ah20_r0, main_preheaderi_dec_ah20_r1, main_preheaderi_dec_ah20_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_dec_ah20_reg;
reg [31:0] main_preheaderi_dec_ah20_reg_r0, main_preheaderi_dec_ah20_reg_r1, main_preheaderi_dec_ah20_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_dec_rh20;
reg [31:0] main_preheaderi_dec_rh20_r0, main_preheaderi_dec_rh20_r1, main_preheaderi_dec_rh20_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_dec_rh20_reg;
reg [31:0] main_preheaderi_dec_rh20_reg_r0, main_preheaderi_dec_rh20_reg_r1, main_preheaderi_dec_rh20_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_dec_ah10;
reg [31:0] main_preheaderi_dec_ah10_r0, main_preheaderi_dec_ah10_r1, main_preheaderi_dec_ah10_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_dec_ah10_reg;
reg [31:0] main_preheaderi_dec_ah10_reg_r0, main_preheaderi_dec_ah10_reg_r1, main_preheaderi_dec_ah10_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_dec_rh10;
reg [31:0] main_preheaderi_dec_rh10_r0, main_preheaderi_dec_rh10_r1, main_preheaderi_dec_rh10_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_dec_rh10_reg;
reg [31:0] main_preheaderi_dec_rh10_reg_r0, main_preheaderi_dec_rh10_reg_r1, main_preheaderi_dec_rh10_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_dec_plt20;
reg [31:0] main_preheaderi_dec_plt20_r0, main_preheaderi_dec_plt20_r1, main_preheaderi_dec_plt20_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_dec_plt20_reg;
reg [31:0] main_preheaderi_dec_plt20_reg_r0, main_preheaderi_dec_plt20_reg_r1, main_preheaderi_dec_plt20_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_dec_plt10;
reg [31:0] main_preheaderi_dec_plt10_r0, main_preheaderi_dec_plt10_r1, main_preheaderi_dec_plt10_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_dec_plt10_reg;
reg [31:0] main_preheaderi_dec_plt10_reg_r0, main_preheaderi_dec_plt10_reg_r1, main_preheaderi_dec_plt10_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_dec_nbl0;
reg [31:0] main_preheaderi_dec_nbl0_r0, main_preheaderi_dec_nbl0_r1, main_preheaderi_dec_nbl0_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_dec_nbl0_reg;
reg [31:0] main_preheaderi_dec_nbl0_reg_r0, main_preheaderi_dec_nbl0_reg_r1, main_preheaderi_dec_nbl0_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_dec_detl0;
reg [31:0] main_preheaderi_dec_detl0_r0, main_preheaderi_dec_detl0_r1, main_preheaderi_dec_detl0_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_dec_detl0_reg;
reg [31:0] main_preheaderi_dec_detl0_reg_r0, main_preheaderi_dec_detl0_reg_r1, main_preheaderi_dec_detl0_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_dec_al20;
reg [31:0] main_preheaderi_dec_al20_r0, main_preheaderi_dec_al20_r1, main_preheaderi_dec_al20_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_dec_al20_reg;
reg [31:0] main_preheaderi_dec_al20_reg_r0, main_preheaderi_dec_al20_reg_r1, main_preheaderi_dec_al20_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_dec_rlt20;
reg [31:0] main_preheaderi_dec_rlt20_r0, main_preheaderi_dec_rlt20_r1, main_preheaderi_dec_rlt20_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_dec_rlt20_reg;
reg [31:0] main_preheaderi_dec_rlt20_reg_r0, main_preheaderi_dec_rlt20_reg_r1, main_preheaderi_dec_rlt20_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_dec_al10;
reg [31:0] main_preheaderi_dec_al10_r0, main_preheaderi_dec_al10_r1, main_preheaderi_dec_al10_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_dec_al10_reg;
reg [31:0] main_preheaderi_dec_al10_reg_r0, main_preheaderi_dec_al10_reg_r1, main_preheaderi_dec_al10_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_dec_rlt10;
reg [31:0] main_preheaderi_dec_rlt10_r0, main_preheaderi_dec_rlt10_r1, main_preheaderi_dec_rlt10_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_dec_rlt10_reg;
reg [31:0] main_preheaderi_dec_rlt10_reg_r0, main_preheaderi_dec_rlt10_reg_r1, main_preheaderi_dec_rlt10_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_i11i;
reg [31:0] main_preheaderi_i11i_r0, main_preheaderi_i11i_r1, main_preheaderi_i11i_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_251;
reg [31:0] main_preheaderi_251_r0, main_preheaderi_251_r1, main_preheaderi_251_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep6_r0, main_preheaderi_scevgep6_r1, main_preheaderi_scevgep6_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep6_reg_r0, main_preheaderi_scevgep6_reg_r1, main_preheaderi_scevgep6_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep7_r0, main_preheaderi_scevgep7_r1, main_preheaderi_scevgep7_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep7_reg_r0, main_preheaderi_scevgep7_reg_r1, main_preheaderi_scevgep7_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_252;
reg [31:0] main_preheaderi_252_r0, main_preheaderi_252_r1, main_preheaderi_252_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_253;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_253_r0, main_preheaderi_253_r1, main_preheaderi_253_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_254;
reg [31:0] main_preheaderi_254_r0, main_preheaderi_254_r1, main_preheaderi_254_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_255;
reg [31:0] main_preheaderi_255_r0, main_preheaderi_255_r1, main_preheaderi_255_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_256;
reg [31:0] main_preheaderi_256_r0, main_preheaderi_256_r1, main_preheaderi_256_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_257;
reg [31:0] main_preheaderi_257_r0, main_preheaderi_257_r1, main_preheaderi_257_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_258;
reg [31:0] main_preheaderi_258_r0, main_preheaderi_258_r1, main_preheaderi_258_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_258_reg;
reg [31:0] main_preheaderi_258_reg_r0, main_preheaderi_258_reg_r1, main_preheaderi_258_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_259;
reg [31:0] main_preheaderi_259_r0, main_preheaderi_259_r1, main_preheaderi_259_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_260;
reg [31:0] main_preheaderi_260_r0, main_preheaderi_260_r1, main_preheaderi_260_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_261;
reg [31:0] main_preheaderi_261_r0, main_preheaderi_261_r1, main_preheaderi_261_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_262;
reg [31:0] main_preheaderi_262_r0, main_preheaderi_262_r1, main_preheaderi_262_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_262_reg;
reg [31:0] main_preheaderi_262_reg_r0, main_preheaderi_262_reg_r1, main_preheaderi_262_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_263;
reg [31:0] main_preheaderi_263_r0, main_preheaderi_263_r1, main_preheaderi_263_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_264;
reg [31:0] main_preheaderi_264_r0, main_preheaderi_264_r1, main_preheaderi_264_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_265;
reg [31:0] main_preheaderi_265_r0, main_preheaderi_265_r1, main_preheaderi_265_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_266;
reg [31:0] main_preheaderi_266_r0, main_preheaderi_266_r1, main_preheaderi_266_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_266_reg;
reg [31:0] main_preheaderi_266_reg_r0, main_preheaderi_266_reg_r1, main_preheaderi_266_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_267;
reg [31:0] main_preheaderi_267_r0, main_preheaderi_267_r1, main_preheaderi_267_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_268;
reg [31:0] main_preheaderi_268_r0, main_preheaderi_268_r1, main_preheaderi_268_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_269;
reg [31:0] main_preheaderi_269_r0, main_preheaderi_269_r1, main_preheaderi_269_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_269_reg;
reg [31:0] main_preheaderi_269_reg_r0, main_preheaderi_269_reg_r1, main_preheaderi_269_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_270;
reg [31:0] main_preheaderi_270_r0, main_preheaderi_270_r1, main_preheaderi_270_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_271;
reg [31:0] main_preheaderi_271_r0, main_preheaderi_271_r1, main_preheaderi_271_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_272;
reg [31:0] main_preheaderi_272_r0, main_preheaderi_272_r1, main_preheaderi_272_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_273;
reg [31:0] main_preheaderi_273_r0, main_preheaderi_273_r1, main_preheaderi_273_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_273_reg;
reg [31:0] main_preheaderi_273_reg_r0, main_preheaderi_273_reg_r1, main_preheaderi_273_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_274;
reg [31:0] main_preheaderi_274_r0, main_preheaderi_274_r1, main_preheaderi_274_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_274_reg;
reg [31:0] main_preheaderi_274_reg_r0, main_preheaderi_274_reg_r1, main_preheaderi_274_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_275;
reg [31:0] main_preheaderi_275_r0, main_preheaderi_275_r1, main_preheaderi_275_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_276;
reg [31:0] main_preheaderi_276_r0, main_preheaderi_276_r1, main_preheaderi_276_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_277;
reg [31:0] main_preheaderi_277_r0, main_preheaderi_277_r1, main_preheaderi_277_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_277_reg;
reg [31:0] main_preheaderi_277_reg_r0, main_preheaderi_277_reg_r1, main_preheaderi_277_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_278;
reg [31:0] main_preheaderi_278_r0, main_preheaderi_278_r1, main_preheaderi_278_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_279;
reg [31:0] main_preheaderi_279_r0, main_preheaderi_279_r1, main_preheaderi_279_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_279_reg;
reg [31:0] main_preheaderi_279_reg_r0, main_preheaderi_279_reg_r1, main_preheaderi_279_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_280;
reg [31:0] main_preheaderi_280_r0, main_preheaderi_280_r1, main_preheaderi_280_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_280_reg;
reg [31:0] main_preheaderi_280_reg_r0, main_preheaderi_280_reg_r1, main_preheaderi_280_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_281;
reg [31:0] main_preheaderi_281_r0, main_preheaderi_281_r1, main_preheaderi_281_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_281_reg;
reg [31:0] main_preheaderi_281_reg_r0, main_preheaderi_281_reg_r1, main_preheaderi_281_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_tmpii;
reg [31:0] main_preheaderi_tmpii_r0, main_preheaderi_tmpii_r1, main_preheaderi_tmpii_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_tmp1ii;
reg [31:0] main_preheaderi_tmp1ii_r0, main_preheaderi_tmp1ii_r1, main_preheaderi_tmp1ii_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_282;
reg [31:0] main_preheaderi_282_r0, main_preheaderi_282_r1, main_preheaderi_282_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_283;
reg [31:0] main_preheaderi_283_r0, main_preheaderi_283_r1, main_preheaderi_283_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_283_reg;
reg [31:0] main_preheaderi_283_reg_r0, main_preheaderi_283_reg_r1, main_preheaderi_283_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_284;
reg [31:0] main_preheaderi_284_r0, main_preheaderi_284_r1, main_preheaderi_284_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_285;
reg [31:0] main_preheaderi_285_r0, main_preheaderi_285_r1, main_preheaderi_285_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_286;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_286_r0, main_preheaderi_286_r1, main_preheaderi_286_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_287;
reg [31:0] main_preheaderi_287_r0, main_preheaderi_287_r1, main_preheaderi_287_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_288;
reg [31:0] main_preheaderi_288_r0, main_preheaderi_288_r1, main_preheaderi_288_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_289;
reg [31:0] main_preheaderi_289_r0, main_preheaderi_289_r1, main_preheaderi_289_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_289_reg;
reg [31:0] main_preheaderi_289_reg_r0, main_preheaderi_289_reg_r1, main_preheaderi_289_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_290;
reg [31:0] main_preheaderi_290_r0, main_preheaderi_290_r1, main_preheaderi_290_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_291;
reg [31:0] main_preheaderi_291_r0, main_preheaderi_291_r1, main_preheaderi_291_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_291_reg;
reg [31:0] main_preheaderi_291_reg_r0, main_preheaderi_291_reg_r1, main_preheaderi_291_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_292;
reg [31:0] main_preheaderi_292_r0, main_preheaderi_292_r1, main_preheaderi_292_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_292_reg;
reg [31:0] main_preheaderi_292_reg_r0, main_preheaderi_292_reg_r1, main_preheaderi_292_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_293;
reg [31:0] main_preheaderi_293_r0, main_preheaderi_293_r1, main_preheaderi_293_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_294;
reg [31:0] main_preheaderi_294_r0, main_preheaderi_294_r1, main_preheaderi_294_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_294_reg;
reg [31:0] main_preheaderi_294_reg_r0, main_preheaderi_294_reg_r1, main_preheaderi_294_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_295;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_295_r0, main_preheaderi_295_r1, main_preheaderi_295_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_296;
reg [31:0] main_preheaderi_296_r0, main_preheaderi_296_r1, main_preheaderi_296_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_297;
reg [31:0] main_preheaderi_297_r0, main_preheaderi_297_r1, main_preheaderi_297_r2 /*synthesis keep*/;

reg  main_preheaderi_298;
reg  main_preheaderi_298_r0, main_preheaderi_298_r1, main_preheaderi_298_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_i12i;
reg [31:0] main_preheaderi_i12i_r0, main_preheaderi_i12i_r1, main_preheaderi_i12i_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_i12i_reg;
reg [31:0] main_preheaderi_i12i_reg_r0, main_preheaderi_i12i_reg_r1, main_preheaderi_i12i_reg_r2 /*synthesis preserve*/;

reg  main_preheaderi_299;
reg  main_preheaderi_299_r0, main_preheaderi_299_r1, main_preheaderi_299_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_i13i;
reg [31:0] main_preheaderi_i13i_r0, main_preheaderi_i13i_r1, main_preheaderi_i13i_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_i13i_reg;
reg [31:0] main_preheaderi_i13i_reg_r0, main_preheaderi_i13i_reg_r1, main_preheaderi_i13i_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_300;
reg [31:0] main_preheaderi_300_r0, main_preheaderi_300_r1, main_preheaderi_300_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_301;
reg [31:0] main_preheaderi_301_r0, main_preheaderi_301_r1, main_preheaderi_301_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_301_reg;
reg [31:0] main_preheaderi_301_reg_r0, main_preheaderi_301_reg_r1, main_preheaderi_301_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_302;
reg [31:0] main_preheaderi_302_r0, main_preheaderi_302_r1, main_preheaderi_302_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_303;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_303_r0, main_preheaderi_303_r1, main_preheaderi_303_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_304;
reg [31:0] main_preheaderi_304_r0, main_preheaderi_304_r1, main_preheaderi_304_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_305;
reg [31:0] main_preheaderi_305_r0, main_preheaderi_305_r1, main_preheaderi_305_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_305_reg;
reg [31:0] main_preheaderi_305_reg_r0, main_preheaderi_305_reg_r1, main_preheaderi_305_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_306;
reg [31:0] main_preheaderi_306_r0, main_preheaderi_306_r1, main_preheaderi_306_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_307;
reg [31:0] main_preheaderi_307_r0, main_preheaderi_307_r1, main_preheaderi_307_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_307_reg;
reg [31:0] main_preheaderi_307_reg_r0, main_preheaderi_307_reg_r1, main_preheaderi_307_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_308;
reg [31:0] main_preheaderi_308_r0, main_preheaderi_308_r1, main_preheaderi_308_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_308_reg;
reg [31:0] main_preheaderi_308_reg_r0, main_preheaderi_308_reg_r1, main_preheaderi_308_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_309;
reg [31:0] main_preheaderi_309_r0, main_preheaderi_309_r1, main_preheaderi_309_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_309_reg;
reg [31:0] main_preheaderi_309_reg_r0, main_preheaderi_309_reg_r1, main_preheaderi_309_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_310;
reg [31:0] main_preheaderi_310_r0, main_preheaderi_310_r1, main_preheaderi_310_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_310_reg;
reg [31:0] main_preheaderi_310_reg_r0, main_preheaderi_310_reg_r1, main_preheaderi_310_reg_r2 /*synthesis preserve*/;

reg  main_preheaderi_311;
reg  main_preheaderi_311_r0, main_preheaderi_311_r1, main_preheaderi_311_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_312;
reg [31:0] main_preheaderi_312_r0, main_preheaderi_312_r1, main_preheaderi_312_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_312_reg;
reg [31:0] main_preheaderi_312_reg_r0, main_preheaderi_312_reg_r1, main_preheaderi_312_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_1i8i;
reg [31:0] main_preheaderi_1i8i_r0, main_preheaderi_1i8i_r1, main_preheaderi_1i8i_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_313;
reg [31:0] main_preheaderi_313_r0, main_preheaderi_313_r1, main_preheaderi_313_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_313_reg;
reg [31:0] main_preheaderi_313_reg_r0, main_preheaderi_313_reg_r1, main_preheaderi_313_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_314;
reg [31:0] main_preheaderi_314_r0, main_preheaderi_314_r1, main_preheaderi_314_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_315;
reg [31:0] main_preheaderi_315_r0, main_preheaderi_315_r1, main_preheaderi_315_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_316;
reg [31:0] main_preheaderi_316_r0, main_preheaderi_316_r1, main_preheaderi_316_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_317;
reg [31:0] main_preheaderi_317_r0, main_preheaderi_317_r1, main_preheaderi_317_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_317_reg;
reg [31:0] main_preheaderi_317_reg_r0, main_preheaderi_317_reg_r1, main_preheaderi_317_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_318;
reg [31:0] main_preheaderi_318_r0, main_preheaderi_318_r1, main_preheaderi_318_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_319;
reg [31:0] main_preheaderi_319_r0, main_preheaderi_319_r1, main_preheaderi_319_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_319_reg;
reg [31:0] main_preheaderi_319_reg_r0, main_preheaderi_319_reg_r1, main_preheaderi_319_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_wd40i9i;
reg [31:0] main_preheaderi_wd40i9i_r0, main_preheaderi_wd40i9i_r1, main_preheaderi_wd40i9i_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_wd40i9i_reg;
reg [31:0] main_preheaderi_wd40i9i_reg_r0, main_preheaderi_wd40i9i_reg_r1, main_preheaderi_wd40i9i_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_320;
reg [31:0] main_preheaderi_320_r0, main_preheaderi_320_r1, main_preheaderi_320_r2 /*synthesis keep*/;

reg  main_preheaderi_321;
reg  main_preheaderi_321_r0, main_preheaderi_321_r1, main_preheaderi_321_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_i10i;
reg [31:0] main_preheaderi_i10i_r0, main_preheaderi_i10i_r1, main_preheaderi_i10i_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_i10i_reg;
reg [31:0] main_preheaderi_i10i_reg_r0, main_preheaderi_i10i_reg_r1, main_preheaderi_i10i_reg_r2 /*synthesis preserve*/;

reg  main_preheaderi_322;
reg  main_preheaderi_322_r0, main_preheaderi_322_r1, main_preheaderi_322_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_i11i_var0;
reg [31:0] main_preheaderi_i11i_var0_r0, main_preheaderi_i11i_var0_r1, main_preheaderi_i11i_var0_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_i11i_var0_reg;
reg [31:0] main_preheaderi_i11i_var0_reg_r0, main_preheaderi_i11i_var0_reg_r1, main_preheaderi_i11i_var0_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_323;
reg [31:0] main_preheaderi_323_r0, main_preheaderi_323_r1, main_preheaderi_323_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_324;
reg [31:0] main_preheaderi_324_r0, main_preheaderi_324_r1, main_preheaderi_324_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_324_reg;
reg [31:0] main_preheaderi_324_reg_r0, main_preheaderi_324_reg_r1, main_preheaderi_324_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_325;
reg [31:0] main_preheaderi_325_r0, main_preheaderi_325_r1, main_preheaderi_325_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_326;
reg [31:0] main_preheaderi_326_r0, main_preheaderi_326_r1, main_preheaderi_326_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_326_reg;
reg [31:0] main_preheaderi_326_reg_r0, main_preheaderi_326_reg_r1, main_preheaderi_326_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_327;
reg [31:0] main_preheaderi_327_r0, main_preheaderi_327_r1, main_preheaderi_327_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_327_reg;
reg [31:0] main_preheaderi_327_reg_r0, main_preheaderi_327_reg_r1, main_preheaderi_327_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_apl10i5i;
reg [31:0] main_preheaderi_apl10i5i_r0, main_preheaderi_apl10i5i_r1, main_preheaderi_apl10i5i_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_328;
reg [31:0] main_preheaderi_328_r0, main_preheaderi_328_r1, main_preheaderi_328_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_328_reg;
reg [31:0] main_preheaderi_328_reg_r0, main_preheaderi_328_reg_r1, main_preheaderi_328_reg_r2 /*synthesis preserve*/;

reg  main_preheaderi_329;
reg  main_preheaderi_329_r0, main_preheaderi_329_r1, main_preheaderi_329_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_apl10i6i;
reg [31:0] main_preheaderi_apl10i6i_r0, main_preheaderi_apl10i6i_r1, main_preheaderi_apl10i6i_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_apl10i6i_reg;
reg [31:0] main_preheaderi_apl10i6i_reg_r0, main_preheaderi_apl10i6i_reg_r1, main_preheaderi_apl10i6i_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_330;
reg [31:0] main_preheaderi_330_r0, main_preheaderi_330_r1, main_preheaderi_330_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_330_reg;
reg [31:0] main_preheaderi_330_reg_r0, main_preheaderi_330_reg_r1, main_preheaderi_330_reg_r2 /*synthesis preserve*/;

reg  main_preheaderi_331;
reg  main_preheaderi_331_r0, main_preheaderi_331_r1, main_preheaderi_331_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_apl12i7i;
reg [31:0] main_preheaderi_apl12i7i_r0, main_preheaderi_apl12i7i_r1, main_preheaderi_apl12i7i_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_apl12i7i_reg;
reg [31:0] main_preheaderi_apl12i7i_reg_r0, main_preheaderi_apl12i7i_reg_r1, main_preheaderi_apl12i7i_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_332;
reg [31:0] main_preheaderi_332_r0, main_preheaderi_332_r1, main_preheaderi_332_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_332_reg;
reg [31:0] main_preheaderi_332_reg_r0, main_preheaderi_332_reg_r1, main_preheaderi_332_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_333;
reg [31:0] main_preheaderi_333_r0, main_preheaderi_333_r1, main_preheaderi_333_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_334;
reg [31:0] main_preheaderi_334_r0, main_preheaderi_334_r1, main_preheaderi_334_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_335;
reg [31:0] main_preheaderi_335_r0, main_preheaderi_335_r1, main_preheaderi_335_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_335_reg;
reg [31:0] main_preheaderi_335_reg_r0, main_preheaderi_335_reg_r1, main_preheaderi_335_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_336;
reg [31:0] main_preheaderi_336_r0, main_preheaderi_336_r1, main_preheaderi_336_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_337;
reg [31:0] main_preheaderi_337_r0, main_preheaderi_337_r1, main_preheaderi_337_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_338;
reg [31:0] main_preheaderi_338_r0, main_preheaderi_338_r1, main_preheaderi_338_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_339;
reg [31:0] main_preheaderi_339_r0, main_preheaderi_339_r1, main_preheaderi_339_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_339_reg;
reg [31:0] main_preheaderi_339_reg_r0, main_preheaderi_339_reg_r1, main_preheaderi_339_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_340;
reg [31:0] main_preheaderi_340_r0, main_preheaderi_340_r1, main_preheaderi_340_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_341;
reg [31:0] main_preheaderi_341_r0, main_preheaderi_341_r1, main_preheaderi_341_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_342;
reg [31:0] main_preheaderi_342_r0, main_preheaderi_342_r1, main_preheaderi_342_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_342_reg;
reg [31:0] main_preheaderi_342_reg_r0, main_preheaderi_342_reg_r1, main_preheaderi_342_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_343;
reg [31:0] main_preheaderi_343_r0, main_preheaderi_343_r1, main_preheaderi_343_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_344;
reg [31:0] main_preheaderi_344_r0, main_preheaderi_344_r1, main_preheaderi_344_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_345;
reg [31:0] main_preheaderi_345_r0, main_preheaderi_345_r1, main_preheaderi_345_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_346;
reg [31:0] main_preheaderi_346_r0, main_preheaderi_346_r1, main_preheaderi_346_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_347;
reg [31:0] main_preheaderi_347_r0, main_preheaderi_347_r1, main_preheaderi_347_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_347_reg;
reg [31:0] main_preheaderi_347_reg_r0, main_preheaderi_347_reg_r1, main_preheaderi_347_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_348;
reg [31:0] main_preheaderi_348_r0, main_preheaderi_348_r1, main_preheaderi_348_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_349;
reg [31:0] main_preheaderi_349_r0, main_preheaderi_349_r1, main_preheaderi_349_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_350;
reg [31:0] main_preheaderi_350_r0, main_preheaderi_350_r1, main_preheaderi_350_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_351;
reg [31:0] main_preheaderi_351_r0, main_preheaderi_351_r1, main_preheaderi_351_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_351_reg;
reg [31:0] main_preheaderi_351_reg_r0, main_preheaderi_351_reg_r1, main_preheaderi_351_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_352;
reg [31:0] main_preheaderi_352_r0, main_preheaderi_352_r1, main_preheaderi_352_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_353;
reg [31:0] main_preheaderi_353_r0, main_preheaderi_353_r1, main_preheaderi_353_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_354;
reg [31:0] main_preheaderi_354_r0, main_preheaderi_354_r1, main_preheaderi_354_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_354_reg;
reg [31:0] main_preheaderi_354_reg_r0, main_preheaderi_354_reg_r1, main_preheaderi_354_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_355;
reg [31:0] main_preheaderi_355_r0, main_preheaderi_355_r1, main_preheaderi_355_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_356;
reg [31:0] main_preheaderi_356_r0, main_preheaderi_356_r1, main_preheaderi_356_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_356_reg;
reg [31:0] main_preheaderi_356_reg_r0, main_preheaderi_356_reg_r1, main_preheaderi_356_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_357;
reg [31:0] main_preheaderi_357_r0, main_preheaderi_357_r1, main_preheaderi_357_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_357_reg;
reg [31:0] main_preheaderi_357_reg_r0, main_preheaderi_357_reg_r1, main_preheaderi_357_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_358;
reg [31:0] main_preheaderi_358_r0, main_preheaderi_358_r1, main_preheaderi_358_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_358_reg;
reg [31:0] main_preheaderi_358_reg_r0, main_preheaderi_358_reg_r1, main_preheaderi_358_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_tmpi3i;
reg [31:0] main_preheaderi_tmpi3i_r0, main_preheaderi_tmpi3i_r1, main_preheaderi_tmpi3i_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_tmp1i4i;
reg [31:0] main_preheaderi_tmp1i4i_r0, main_preheaderi_tmp1i4i_r1, main_preheaderi_tmp1i4i_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_359;
reg [31:0] main_preheaderi_359_r0, main_preheaderi_359_r1, main_preheaderi_359_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_360;
reg [31:0] main_preheaderi_360_r0, main_preheaderi_360_r1, main_preheaderi_360_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_360_reg;
reg [31:0] main_preheaderi_360_reg_r0, main_preheaderi_360_reg_r1, main_preheaderi_360_reg_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_361;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_361_r0, main_preheaderi_361_r1, main_preheaderi_361_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_361_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_361_reg_r0, main_preheaderi_361_reg_r1, main_preheaderi_361_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_362;
reg [31:0] main_preheaderi_362_r0, main_preheaderi_362_r1, main_preheaderi_362_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_363;
reg [31:0] main_preheaderi_363_r0, main_preheaderi_363_r1, main_preheaderi_363_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_364;
reg [31:0] main_preheaderi_364_r0, main_preheaderi_364_r1, main_preheaderi_364_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_364_reg;
reg [31:0] main_preheaderi_364_reg_r0, main_preheaderi_364_reg_r1, main_preheaderi_364_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_365;
reg [31:0] main_preheaderi_365_r0, main_preheaderi_365_r1, main_preheaderi_365_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_366;
reg [31:0] main_preheaderi_366_r0, main_preheaderi_366_r1, main_preheaderi_366_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_366_reg;
reg [31:0] main_preheaderi_366_reg_r0, main_preheaderi_366_reg_r1, main_preheaderi_366_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_367;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_367_r0, main_preheaderi_367_r1, main_preheaderi_367_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_367_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_367_reg_r0, main_preheaderi_367_reg_r1, main_preheaderi_367_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_368;
reg [31:0] main_preheaderi_368_r0, main_preheaderi_368_r1, main_preheaderi_368_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_368_reg;
reg [31:0] main_preheaderi_368_reg_r0, main_preheaderi_368_reg_r1, main_preheaderi_368_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_369;
reg [31:0] main_preheaderi_369_r0, main_preheaderi_369_r1, main_preheaderi_369_r2 /*synthesis keep*/;

reg  main_preheaderi_370;
reg  main_preheaderi_370_r0, main_preheaderi_370_r1, main_preheaderi_370_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_i1i;
reg [31:0] main_preheaderi_i1i_r0, main_preheaderi_i1i_r1, main_preheaderi_i1i_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_i1i_reg;
reg [31:0] main_preheaderi_i1i_reg_r0, main_preheaderi_i1i_reg_r1, main_preheaderi_i1i_reg_r2 /*synthesis preserve*/;

reg  main_preheaderi_371;
reg  main_preheaderi_371_r0, main_preheaderi_371_r1, main_preheaderi_371_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_i2i;
reg [31:0] main_preheaderi_i2i_r0, main_preheaderi_i2i_r1, main_preheaderi_i2i_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_i2i_reg;
reg [31:0] main_preheaderi_i2i_reg_r0, main_preheaderi_i2i_reg_r1, main_preheaderi_i2i_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_372;
reg [31:0] main_preheaderi_372_r0, main_preheaderi_372_r1, main_preheaderi_372_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_373;
reg [31:0] main_preheaderi_373_r0, main_preheaderi_373_r1, main_preheaderi_373_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_373_reg;
reg [31:0] main_preheaderi_373_reg_r0, main_preheaderi_373_reg_r1, main_preheaderi_373_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_374;
reg [31:0] main_preheaderi_374_r0, main_preheaderi_374_r1, main_preheaderi_374_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_375;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_375_r0, main_preheaderi_375_r1, main_preheaderi_375_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_376;
reg [31:0] main_preheaderi_376_r0, main_preheaderi_376_r1, main_preheaderi_376_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_377;
reg [31:0] main_preheaderi_377_r0, main_preheaderi_377_r1, main_preheaderi_377_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_377_reg;
reg [31:0] main_preheaderi_377_reg_r0, main_preheaderi_377_reg_r1, main_preheaderi_377_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_378;
reg [31:0] main_preheaderi_378_r0, main_preheaderi_378_r1, main_preheaderi_378_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_379;
reg [31:0] main_preheaderi_379_r0, main_preheaderi_379_r1, main_preheaderi_379_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_379_reg;
reg [31:0] main_preheaderi_379_reg_r0, main_preheaderi_379_reg_r1, main_preheaderi_379_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_380;
reg [31:0] main_preheaderi_380_r0, main_preheaderi_380_r1, main_preheaderi_380_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_380_reg;
reg [31:0] main_preheaderi_380_reg_r0, main_preheaderi_380_reg_r1, main_preheaderi_380_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_381;
reg [31:0] main_preheaderi_381_r0, main_preheaderi_381_r1, main_preheaderi_381_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_381_reg;
reg [31:0] main_preheaderi_381_reg_r0, main_preheaderi_381_reg_r1, main_preheaderi_381_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_382;
reg [31:0] main_preheaderi_382_r0, main_preheaderi_382_r1, main_preheaderi_382_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_382_reg;
reg [31:0] main_preheaderi_382_reg_r0, main_preheaderi_382_reg_r1, main_preheaderi_382_reg_r2 /*synthesis preserve*/;

reg  main_preheaderi_383;
reg  main_preheaderi_383_r0, main_preheaderi_383_r1, main_preheaderi_383_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_384;
reg [31:0] main_preheaderi_384_r0, main_preheaderi_384_r1, main_preheaderi_384_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_384_reg;
reg [31:0] main_preheaderi_384_reg_r0, main_preheaderi_384_reg_r1, main_preheaderi_384_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_1ii;
reg [31:0] main_preheaderi_1ii_r0, main_preheaderi_1ii_r1, main_preheaderi_1ii_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_385;
reg [31:0] main_preheaderi_385_r0, main_preheaderi_385_r1, main_preheaderi_385_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_385_reg;
reg [31:0] main_preheaderi_385_reg_r0, main_preheaderi_385_reg_r1, main_preheaderi_385_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_386;
reg [31:0] main_preheaderi_386_r0, main_preheaderi_386_r1, main_preheaderi_386_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_387;
reg [31:0] main_preheaderi_387_r0, main_preheaderi_387_r1, main_preheaderi_387_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_388;
reg [31:0] main_preheaderi_388_r0, main_preheaderi_388_r1, main_preheaderi_388_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_389;
reg [31:0] main_preheaderi_389_r0, main_preheaderi_389_r1, main_preheaderi_389_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_389_reg;
reg [31:0] main_preheaderi_389_reg_r0, main_preheaderi_389_reg_r1, main_preheaderi_389_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_390;
reg [31:0] main_preheaderi_390_r0, main_preheaderi_390_r1, main_preheaderi_390_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_391;
reg [31:0] main_preheaderi_391_r0, main_preheaderi_391_r1, main_preheaderi_391_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_391_reg;
reg [31:0] main_preheaderi_391_reg_r0, main_preheaderi_391_reg_r1, main_preheaderi_391_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_wd40ii;
reg [31:0] main_preheaderi_wd40ii_r0, main_preheaderi_wd40ii_r1, main_preheaderi_wd40ii_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_wd40ii_reg;
reg [31:0] main_preheaderi_wd40ii_reg_r0, main_preheaderi_wd40ii_reg_r1, main_preheaderi_wd40ii_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_392;
reg [31:0] main_preheaderi_392_r0, main_preheaderi_392_r1, main_preheaderi_392_r2 /*synthesis keep*/;

reg  main_preheaderi_393;
reg  main_preheaderi_393_r0, main_preheaderi_393_r1, main_preheaderi_393_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_ii;
reg [31:0] main_preheaderi_ii_r0, main_preheaderi_ii_r1, main_preheaderi_ii_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_ii_reg;
reg [31:0] main_preheaderi_ii_reg_r0, main_preheaderi_ii_reg_r1, main_preheaderi_ii_reg_r2 /*synthesis preserve*/;

reg  main_preheaderi_394;
reg  main_preheaderi_394_r0, main_preheaderi_394_r1, main_preheaderi_394_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_ii_var1;
reg [31:0] main_preheaderi_ii_var1_r0, main_preheaderi_ii_var1_r1, main_preheaderi_ii_var1_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_ii_var1_reg;
reg [31:0] main_preheaderi_ii_var1_reg_r0, main_preheaderi_ii_var1_reg_r1, main_preheaderi_ii_var1_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_395;
reg [31:0] main_preheaderi_395_r0, main_preheaderi_395_r1, main_preheaderi_395_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_396;
reg [31:0] main_preheaderi_396_r0, main_preheaderi_396_r1, main_preheaderi_396_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_396_reg;
reg [31:0] main_preheaderi_396_reg_r0, main_preheaderi_396_reg_r1, main_preheaderi_396_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_397;
reg [31:0] main_preheaderi_397_r0, main_preheaderi_397_r1, main_preheaderi_397_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_398;
reg [31:0] main_preheaderi_398_r0, main_preheaderi_398_r1, main_preheaderi_398_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_398_reg;
reg [31:0] main_preheaderi_398_reg_r0, main_preheaderi_398_reg_r1, main_preheaderi_398_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_399;
reg [31:0] main_preheaderi_399_r0, main_preheaderi_399_r1, main_preheaderi_399_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_399_reg;
reg [31:0] main_preheaderi_399_reg_r0, main_preheaderi_399_reg_r1, main_preheaderi_399_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_apl10ii;
reg [31:0] main_preheaderi_apl10ii_r0, main_preheaderi_apl10ii_r1, main_preheaderi_apl10ii_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_400;
reg [31:0] main_preheaderi_400_r0, main_preheaderi_400_r1, main_preheaderi_400_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_400_reg;
reg [31:0] main_preheaderi_400_reg_r0, main_preheaderi_400_reg_r1, main_preheaderi_400_reg_r2 /*synthesis preserve*/;

reg  main_preheaderi_401;
reg  main_preheaderi_401_r0, main_preheaderi_401_r1, main_preheaderi_401_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_apl10ii_var2;
reg [31:0] main_preheaderi_apl10ii_var2_r0, main_preheaderi_apl10ii_var2_r1, main_preheaderi_apl10ii_var2_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_apl10ii_var2_reg;
reg [31:0] main_preheaderi_apl10ii_var2_reg_r0, main_preheaderi_apl10ii_var2_reg_r1, main_preheaderi_apl10ii_var2_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_402;
reg [31:0] main_preheaderi_402_r0, main_preheaderi_402_r1, main_preheaderi_402_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_402_reg;
reg [31:0] main_preheaderi_402_reg_r0, main_preheaderi_402_reg_r1, main_preheaderi_402_reg_r2 /*synthesis preserve*/;

reg  main_preheaderi_403;
reg  main_preheaderi_403_r0, main_preheaderi_403_r1, main_preheaderi_403_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_apl12ii;
reg [31:0] main_preheaderi_apl12ii_r0, main_preheaderi_apl12ii_r1, main_preheaderi_apl12ii_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_apl12ii_reg;
reg [31:0] main_preheaderi_apl12ii_reg_r0, main_preheaderi_apl12ii_reg_r1, main_preheaderi_apl12ii_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_404;
reg [31:0] main_preheaderi_404_r0, main_preheaderi_404_r1, main_preheaderi_404_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_404_reg;
reg [31:0] main_preheaderi_404_reg_r0, main_preheaderi_404_reg_r1, main_preheaderi_404_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_405;
reg [31:0] main_preheaderi_405_r0, main_preheaderi_405_r1, main_preheaderi_405_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_405_reg;
reg [31:0] main_preheaderi_405_reg_r0, main_preheaderi_405_reg_r1, main_preheaderi_405_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_406;
reg [31:0] main_preheaderi_406_r0, main_preheaderi_406_r1, main_preheaderi_406_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_406_reg;
reg [31:0] main_preheaderi_406_reg_r0, main_preheaderi_406_reg_r1, main_preheaderi_406_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_407;
reg [31:0] main_preheaderi_407_r0, main_preheaderi_407_r1, main_preheaderi_407_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_407_reg;
reg [31:0] main_preheaderi_407_reg_r0, main_preheaderi_407_reg_r1, main_preheaderi_407_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_408;
reg [31:0] main_preheaderi_408_r0, main_preheaderi_408_r1, main_preheaderi_408_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_408_reg;
reg [31:0] main_preheaderi_408_reg_r0, main_preheaderi_408_reg_r1, main_preheaderi_408_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_409;
reg [31:0] main_preheaderi_409_r0, main_preheaderi_409_r1, main_preheaderi_409_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_409_reg;
reg [31:0] main_preheaderi_409_reg_r0, main_preheaderi_409_reg_r1, main_preheaderi_409_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_410;
reg [31:0] main_preheaderi_410_r0, main_preheaderi_410_r1, main_preheaderi_410_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_410_reg;
reg [31:0] main_preheaderi_410_reg_r0, main_preheaderi_410_reg_r1, main_preheaderi_410_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_411;
reg [31:0] main_preheaderi_411_r0, main_preheaderi_411_r1, main_preheaderi_411_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_411_reg;
reg [31:0] main_preheaderi_411_reg_r0, main_preheaderi_411_reg_r1, main_preheaderi_411_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_412;
reg [31:0] main_preheaderi_412_r0, main_preheaderi_412_r1, main_preheaderi_412_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_412_reg;
reg [31:0] main_preheaderi_412_reg_r0, main_preheaderi_412_reg_r1, main_preheaderi_412_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_413;
reg [31:0] main_preheaderi_413_r0, main_preheaderi_413_r1, main_preheaderi_413_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_413_reg;
reg [31:0] main_preheaderi_413_reg_r0, main_preheaderi_413_reg_r1, main_preheaderi_413_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_414;
reg [31:0] main_preheaderi_414_r0, main_preheaderi_414_r1, main_preheaderi_414_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_414_reg;
reg [31:0] main_preheaderi_414_reg_r0, main_preheaderi_414_reg_r1, main_preheaderi_414_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_415;
reg [31:0] main_preheaderi_415_r0, main_preheaderi_415_r1, main_preheaderi_415_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_415_reg;
reg [31:0] main_preheaderi_415_reg_r0, main_preheaderi_415_reg_r1, main_preheaderi_415_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_416;
reg [31:0] main_preheaderi_416_r0, main_preheaderi_416_r1, main_preheaderi_416_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_416_reg;
reg [31:0] main_preheaderi_416_reg_r0, main_preheaderi_416_reg_r1, main_preheaderi_416_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_417;
reg [31:0] main_preheaderi_417_r0, main_preheaderi_417_r1, main_preheaderi_417_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_417_reg;
reg [31:0] main_preheaderi_417_reg_r0, main_preheaderi_417_reg_r1, main_preheaderi_417_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_418;
reg [31:0] main_preheaderi_418_r0, main_preheaderi_418_r1, main_preheaderi_418_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_418_reg;
reg [31:0] main_preheaderi_418_reg_r0, main_preheaderi_418_reg_r1, main_preheaderi_418_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_419;
reg [31:0] main_preheaderi_419_r0, main_preheaderi_419_r1, main_preheaderi_419_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_419_reg;
reg [31:0] main_preheaderi_419_reg_r0, main_preheaderi_419_reg_r1, main_preheaderi_419_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_420;
reg [31:0] main_preheaderi_420_r0, main_preheaderi_420_r1, main_preheaderi_420_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_420_reg;
reg [31:0] main_preheaderi_420_reg_r0, main_preheaderi_420_reg_r1, main_preheaderi_420_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_421;
reg [31:0] main_preheaderi_421_r0, main_preheaderi_421_r1, main_preheaderi_421_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_421_reg;
reg [31:0] main_preheaderi_421_reg_r0, main_preheaderi_421_reg_r1, main_preheaderi_421_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_422;
reg [31:0] main_preheaderi_422_r0, main_preheaderi_422_r1, main_preheaderi_422_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_422_reg;
reg [31:0] main_preheaderi_422_reg_r0, main_preheaderi_422_reg_r1, main_preheaderi_422_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_423;
reg [31:0] main_preheaderi_423_r0, main_preheaderi_423_r1, main_preheaderi_423_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_423_reg;
reg [31:0] main_preheaderi_423_reg_r0, main_preheaderi_423_reg_r1, main_preheaderi_423_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_424;
reg [31:0] main_preheaderi_424_r0, main_preheaderi_424_r1, main_preheaderi_424_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_424_reg;
reg [31:0] main_preheaderi_424_reg_r0, main_preheaderi_424_reg_r1, main_preheaderi_424_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_425;
reg [31:0] main_preheaderi_425_r0, main_preheaderi_425_r1, main_preheaderi_425_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_425_reg;
reg [31:0] main_preheaderi_425_reg_r0, main_preheaderi_425_reg_r1, main_preheaderi_425_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_426;
reg [31:0] main_preheaderi_426_r0, main_preheaderi_426_r1, main_preheaderi_426_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_426_reg;
reg [31:0] main_preheaderi_426_reg_r0, main_preheaderi_426_reg_r1, main_preheaderi_426_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_427;
reg [31:0] main_preheaderi_427_r0, main_preheaderi_427_r1, main_preheaderi_427_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_427_reg;
reg [31:0] main_preheaderi_427_reg_r0, main_preheaderi_427_reg_r1, main_preheaderi_427_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_428;
reg [31:0] main_preheaderi_428_r0, main_preheaderi_428_r1, main_preheaderi_428_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_428_reg;
reg [31:0] main_preheaderi_428_reg_r0, main_preheaderi_428_reg_r1, main_preheaderi_428_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_429;
reg [31:0] main_preheaderi_429_r0, main_preheaderi_429_r1, main_preheaderi_429_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_429_reg;
reg [31:0] main_preheaderi_429_reg_r0, main_preheaderi_429_reg_r1, main_preheaderi_429_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_430;
reg [31:0] main_preheaderi_430_r0, main_preheaderi_430_r1, main_preheaderi_430_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_430_reg;
reg [31:0] main_preheaderi_430_reg_r0, main_preheaderi_430_reg_r1, main_preheaderi_430_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_431;
reg [31:0] main_preheaderi_431_r0, main_preheaderi_431_r1, main_preheaderi_431_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_431_reg;
reg [31:0] main_preheaderi_431_reg_r0, main_preheaderi_431_reg_r1, main_preheaderi_431_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_432;
reg [31:0] main_preheaderi_432_r0, main_preheaderi_432_r1, main_preheaderi_432_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_432_reg;
reg [31:0] main_preheaderi_432_reg_r0, main_preheaderi_432_reg_r1, main_preheaderi_432_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_433;
reg [31:0] main_preheaderi_433_r0, main_preheaderi_433_r1, main_preheaderi_433_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_433_reg;
reg [31:0] main_preheaderi_433_reg_r0, main_preheaderi_433_reg_r1, main_preheaderi_433_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_434;
reg [31:0] main_preheaderi_434_r0, main_preheaderi_434_r1, main_preheaderi_434_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_434_reg;
reg [31:0] main_preheaderi_434_reg_r0, main_preheaderi_434_reg_r1, main_preheaderi_434_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_435;
reg [31:0] main_preheaderi_435_r0, main_preheaderi_435_r1, main_preheaderi_435_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_435_reg;
reg [31:0] main_preheaderi_435_reg_r0, main_preheaderi_435_reg_r1, main_preheaderi_435_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_436;
reg [31:0] main_preheaderi_436_r0, main_preheaderi_436_r1, main_preheaderi_436_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_436_reg;
reg [31:0] main_preheaderi_436_reg_r0, main_preheaderi_436_reg_r1, main_preheaderi_436_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_437;
reg [31:0] main_preheaderi_437_r0, main_preheaderi_437_r1, main_preheaderi_437_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_437_reg;
reg [31:0] main_preheaderi_437_reg_r0, main_preheaderi_437_reg_r1, main_preheaderi_437_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_438;
reg [31:0] main_preheaderi_438_r0, main_preheaderi_438_r1, main_preheaderi_438_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_438_reg;
reg [31:0] main_preheaderi_438_reg_r0, main_preheaderi_438_reg_r1, main_preheaderi_438_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_439;
reg [31:0] main_preheaderi_439_r0, main_preheaderi_439_r1, main_preheaderi_439_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_439_reg;
reg [31:0] main_preheaderi_439_reg_r0, main_preheaderi_439_reg_r1, main_preheaderi_439_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_440;
reg [31:0] main_preheaderi_440_r0, main_preheaderi_440_r1, main_preheaderi_440_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_440_reg;
reg [31:0] main_preheaderi_440_reg_r0, main_preheaderi_440_reg_r1, main_preheaderi_440_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_441;
reg [31:0] main_preheaderi_441_r0, main_preheaderi_441_r1, main_preheaderi_441_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_441_reg;
reg [31:0] main_preheaderi_441_reg_r0, main_preheaderi_441_reg_r1, main_preheaderi_441_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_442;
reg [31:0] main_preheaderi_442_r0, main_preheaderi_442_r1, main_preheaderi_442_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_442_reg;
reg [31:0] main_preheaderi_442_reg_r0, main_preheaderi_442_reg_r1, main_preheaderi_442_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_443;
reg [31:0] main_preheaderi_443_r0, main_preheaderi_443_r1, main_preheaderi_443_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_443_reg;
reg [31:0] main_preheaderi_443_reg_r0, main_preheaderi_443_reg_r1, main_preheaderi_443_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_444;
reg [31:0] main_preheaderi_444_r0, main_preheaderi_444_r1, main_preheaderi_444_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_444_reg;
reg [31:0] main_preheaderi_444_reg_r0, main_preheaderi_444_reg_r1, main_preheaderi_444_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_445;
reg [31:0] main_preheaderi_445_r0, main_preheaderi_445_r1, main_preheaderi_445_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_445_reg;
reg [31:0] main_preheaderi_445_reg_r0, main_preheaderi_445_reg_r1, main_preheaderi_445_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_446;
reg [31:0] main_preheaderi_446_r0, main_preheaderi_446_r1, main_preheaderi_446_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_446_reg;
reg [31:0] main_preheaderi_446_reg_r0, main_preheaderi_446_reg_r1, main_preheaderi_446_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_447;
reg [31:0] main_preheaderi_447_r0, main_preheaderi_447_r1, main_preheaderi_447_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_447_reg;
reg [31:0] main_preheaderi_447_reg_r0, main_preheaderi_447_reg_r1, main_preheaderi_447_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_448;
reg [31:0] main_preheaderi_448_r0, main_preheaderi_448_r1, main_preheaderi_448_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_448_reg;
reg [31:0] main_preheaderi_448_reg_r0, main_preheaderi_448_reg_r1, main_preheaderi_448_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_449;
reg [31:0] main_preheaderi_449_r0, main_preheaderi_449_r1, main_preheaderi_449_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_449_reg;
reg [31:0] main_preheaderi_449_reg_r0, main_preheaderi_449_reg_r1, main_preheaderi_449_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_450;
reg [31:0] main_preheaderi_450_r0, main_preheaderi_450_r1, main_preheaderi_450_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_451;
reg [31:0] main_preheaderi_451_r0, main_preheaderi_451_r1, main_preheaderi_451_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_451_reg;
reg [31:0] main_preheaderi_451_reg_r0, main_preheaderi_451_reg_r1, main_preheaderi_451_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheaderi_452;
reg [31:0] main_preheaderi_452_r0, main_preheaderi_452_r1, main_preheaderi_452_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_453;
reg [31:0] main_preheaderi_453_r0, main_preheaderi_453_r1, main_preheaderi_453_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_454;
reg [31:0] main_preheaderi_454_r0, main_preheaderi_454_r1, main_preheaderi_454_r2 /*synthesis keep*/;

reg [31:0] main_preheaderi_indvarnext;
reg [31:0] main_preheaderi_indvarnext_r0, main_preheaderi_indvarnext_r1, main_preheaderi_indvarnext_r2 /*synthesis keep*/;

reg  main_preheaderi_exitcond5;
reg  main_preheaderi_exitcond5_r0, main_preheaderi_exitcond5_r1, main_preheaderi_exitcond5_r2 /*synthesis keep*/;

reg [31:0] main_adpcm_mainexit_main_result04;
reg [31:0] main_adpcm_mainexit_main_result04_r0, main_adpcm_mainexit_main_result04_r1, main_adpcm_mainexit_main_result04_r2 /*synthesis keep*/;

reg [31:0] main_adpcm_mainexit_main_result04_reg;
reg [31:0] main_adpcm_mainexit_main_result04_reg_r0, main_adpcm_mainexit_main_result04_reg_r1, main_adpcm_mainexit_main_result04_reg_r2 /*synthesis preserve*/;

reg [31:0] main_adpcm_mainexit_i03;
reg [31:0] main_adpcm_mainexit_i03_r0, main_adpcm_mainexit_i03_r1, main_adpcm_mainexit_i03_r2 /*synthesis keep*/;

reg [31:0] main_adpcm_mainexit_i03_reg;
reg [31:0] main_adpcm_mainexit_i03_reg_r0, main_adpcm_mainexit_i03_reg_r1, main_adpcm_mainexit_i03_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep3_r0, main_adpcm_mainexit_scevgep3_r1, main_adpcm_mainexit_scevgep3_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep4_r0, main_adpcm_mainexit_scevgep4_r1, main_adpcm_mainexit_scevgep4_r2 /*synthesis keep*/;

reg [31:0] main_adpcm_mainexit_455;
reg [31:0] main_adpcm_mainexit_455_r0, main_adpcm_mainexit_455_r1, main_adpcm_mainexit_455_r2 /*synthesis keep*/;

reg [31:0] main_adpcm_mainexit_456;
reg [31:0] main_adpcm_mainexit_456_r0, main_adpcm_mainexit_456_r1, main_adpcm_mainexit_456_r2 /*synthesis keep*/;

reg  main_adpcm_mainexit_457;
reg  main_adpcm_mainexit_457_r0, main_adpcm_mainexit_457_r1, main_adpcm_mainexit_457_r2 /*synthesis keep*/;

reg [31:0] main_adpcm_mainexit_458;
reg [31:0] main_adpcm_mainexit_458_r0, main_adpcm_mainexit_458_r1, main_adpcm_mainexit_458_r2 /*synthesis keep*/;

reg [31:0] main_adpcm_mainexit_main_result0;
reg [31:0] main_adpcm_mainexit_main_result0_r0, main_adpcm_mainexit_main_result0_r1, main_adpcm_mainexit_main_result0_r2 /*synthesis keep*/;

reg [31:0] main_adpcm_mainexit_main_result0_reg;
reg [31:0] main_adpcm_mainexit_main_result0_reg_r0, main_adpcm_mainexit_main_result0_reg_r1, main_adpcm_mainexit_main_result0_reg_r2 /*synthesis preserve*/;

reg [31:0] main_adpcm_mainexit_459;
reg [31:0] main_adpcm_mainexit_459_r0, main_adpcm_mainexit_459_r1, main_adpcm_mainexit_459_r2 /*synthesis keep*/;

reg [31:0] main_adpcm_mainexit_459_reg;
reg [31:0] main_adpcm_mainexit_459_reg_r0, main_adpcm_mainexit_459_reg_r1, main_adpcm_mainexit_459_reg_r2 /*synthesis preserve*/;

reg  main_adpcm_mainexit_exitcond;
reg  main_adpcm_mainexit_exitcond_r0, main_adpcm_mainexit_exitcond_r1, main_adpcm_mainexit_exitcond_r2 /*synthesis keep*/;

reg  main_adpcm_mainexit_exitcond_reg;
reg  main_adpcm_mainexit_exitcond_reg_r0, main_adpcm_mainexit_exitcond_reg_r1, main_adpcm_mainexit_exitcond_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheader_main_result22;
reg [31:0] main_preheader_main_result22_r0, main_preheader_main_result22_r1, main_preheader_main_result22_r2 /*synthesis keep*/;

reg [31:0] main_preheader_main_result22_reg;
reg [31:0] main_preheader_main_result22_reg_r0, main_preheader_main_result22_reg_r1, main_preheader_main_result22_reg_r2 /*synthesis preserve*/;

reg [31:0] main_preheader_i11;
reg [31:0] main_preheader_i11_r0, main_preheader_i11_r1, main_preheader_i11_r2 /*synthesis keep*/;

reg [31:0] main_preheader_i11_reg;
reg [31:0] main_preheader_i11_reg_r0, main_preheader_i11_reg_r1, main_preheader_i11_reg_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep_r0, main_preheader_scevgep_r1, main_preheader_scevgep_r2 /*synthesis keep*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep2_r0, main_preheader_scevgep2_r1, main_preheader_scevgep2_r2 /*synthesis keep*/;

reg [31:0] main_preheader_460;
reg [31:0] main_preheader_460_r0, main_preheader_460_r1, main_preheader_460_r2 /*synthesis keep*/;

reg [31:0] main_preheader_461;
reg [31:0] main_preheader_461_r0, main_preheader_461_r1, main_preheader_461_r2 /*synthesis keep*/;

reg  main_preheader_462;
reg  main_preheader_462_r0, main_preheader_462_r1, main_preheader_462_r2 /*synthesis keep*/;

reg [31:0] main_preheader_463;
reg [31:0] main_preheader_463_r0, main_preheader_463_r1, main_preheader_463_r2 /*synthesis keep*/;

reg [31:0] main_preheader_main_result2;
reg [31:0] main_preheader_main_result2_r0, main_preheader_main_result2_r1, main_preheader_main_result2_r2 /*synthesis keep*/;

reg [31:0] main_preheader_main_result2_reg;
reg [31:0] main_preheader_main_result2_reg_r0, main_preheader_main_result2_reg_r1, main_preheader_main_result2_reg_r2 /*synthesis keep*/;

reg [31:0] main_preheader_464;
reg [31:0] main_preheader_464_r0, main_preheader_464_r1, main_preheader_464_r2 /*synthesis keep*/;

reg [31:0] main_preheader_464_reg;
reg [31:0] main_preheader_464_reg_r0, main_preheader_464_reg_r1, main_preheader_464_reg_r2 /*synthesis keep*/;

reg  main_preheader_exitcond1;
reg  main_preheader_exitcond1_r0, main_preheader_exitcond1_r1, main_preheader_exitcond1_r2 /*synthesis keep*/;

reg  main_preheader_exitcond1_reg;
reg  main_preheader_exitcond1_reg_r0, main_preheader_exitcond1_reg_r1, main_preheader_exitcond1_reg_r2 /*synthesis preserve*/;

reg  main_465_467;
reg  main_465_467_r0, main_465_467_r1, main_465_467_r2 /*synthesis keep*/;

reg  upzero_start;
reg  upzero_start_r0, upzero_start_r1, upzero_start_r2 /*synthesis preserve*/;

reg [31:0] upzero_arg_dlt;
reg [31:0] upzero_arg_dlt_r0, upzero_arg_dlt_r1, upzero_arg_dlt_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_arg_dlti;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_arg_dlti_r0, upzero_arg_dlti_r1, upzero_arg_dlti_r2 /*synthesis preserve*/;

reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_arg_bli;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_arg_bli_r0, upzero_arg_bli_r1, upzero_arg_bli_r2 /*synthesis preserve*/;

wire  upzero_memory_controller_enable_a;
wire  upzero_memory_controller_enable_a_r0, upzero_memory_controller_enable_a_r1, upzero_memory_controller_enable_a_r2 /*synthesis keep*/;

wire  upzero_memory_controller_write_enable_a;
wire  upzero_memory_controller_write_enable_a_r0, upzero_memory_controller_write_enable_a_r1, upzero_memory_controller_write_enable_a_r2 /*synthesis keep*/;

wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_memory_controller_address_a_r0, upzero_memory_controller_address_a_r1, upzero_memory_controller_address_a_r2 /*synthesis keep*/;

wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] upzero_memory_controller_in_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] upzero_memory_controller_in_a_r0, upzero_memory_controller_in_a_r1, upzero_memory_controller_in_a_r2 /*synthesis keep*/;

wire [1:0] upzero_memory_controller_size_a;
wire [1:0] upzero_memory_controller_size_a_r0, upzero_memory_controller_size_a_r1, upzero_memory_controller_size_a_r2 /*synthesis keep*/;

wire  upzero_memory_controller_enable_b;
wire  upzero_memory_controller_enable_b_r0, upzero_memory_controller_enable_b_r1, upzero_memory_controller_enable_b_r2 /*synthesis keep*/;

wire  upzero_memory_controller_write_enable_b;
wire  upzero_memory_controller_write_enable_b_r0, upzero_memory_controller_write_enable_b_r1, upzero_memory_controller_write_enable_b_r2 /*synthesis keep*/;

wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_memory_controller_address_b_r0, upzero_memory_controller_address_b_r1, upzero_memory_controller_address_b_r2 /*synthesis keep*/;

wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] upzero_memory_controller_in_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] upzero_memory_controller_in_b_r0, upzero_memory_controller_in_b_r1, upzero_memory_controller_in_b_r2 /*synthesis keep*/;

wire [1:0] upzero_memory_controller_size_b;
wire [1:0] upzero_memory_controller_size_b_r0, upzero_memory_controller_size_b_r1, upzero_memory_controller_size_b_r2 /*synthesis keep*/;

reg  upzero_finish_final;
reg  upzero_finish_final_r0, upzero_finish_final_r1, upzero_finish_final_r2 /*synthesis keep*/;

reg  upzero_finish_reg;
reg  upzero_finish_reg_r0, upzero_finish_reg_r1, upzero_finish_reg_r2 /*synthesis preserve*/;

wire  upzero_finish;
wire  upzero_finish_r0, upzero_finish_r1, upzero_finish_r2 /*synthesis keep*/;
assign upzero_finish_r0 = upzero_finish;
assign upzero_finish_r1 = upzero_finish;
assign upzero_finish_r2 = upzero_finish;

reg  legup_function_call;
reg  legup_function_call_r0, legup_function_call_r1, legup_function_call_r2 /*synthesis keep*/;

reg [31:0] main_signed_add_32_0_op0;
reg [31:0] main_signed_add_32_0_op0_r0, main_signed_add_32_0_op0_r1, main_signed_add_32_0_op0_r2 /*synthesis keep*/;

reg [31:0] main_signed_add_32_0_op1;
reg [31:0] main_signed_add_32_0_op1_r0, main_signed_add_32_0_op1_r1, main_signed_add_32_0_op1_r2 /*synthesis keep*/;

reg [31:0] main_signed_add_32_0;
reg [31:0] main_signed_add_32_0_r0, main_signed_add_32_0_r1, main_signed_add_32_0_r2 /*synthesis keep*/;

reg [31:0] main_signed_add_32_1_op0;
reg [31:0] main_signed_add_32_1_op0_r0, main_signed_add_32_1_op0_r1, main_signed_add_32_1_op0_r2 /*synthesis keep*/;

reg [31:0] main_signed_add_32_1_op1;
reg [31:0] main_signed_add_32_1_op1_r0, main_signed_add_32_1_op1_r1, main_signed_add_32_1_op1_r2 /*synthesis keep*/;

reg [31:0] main_signed_add_32_1;
reg [31:0] main_signed_add_32_1_r0, main_signed_add_32_1_r1, main_signed_add_32_1_r2 /*synthesis keep*/;

reg [63:0] main_signed_add_64_0_op0;
reg [63:0] main_signed_add_64_0_op0_r0, main_signed_add_64_0_op0_r1, main_signed_add_64_0_op0_r2 /*synthesis keep*/;

reg [63:0] main_signed_add_64_0_op1;
reg [63:0] main_signed_add_64_0_op1_r0, main_signed_add_64_0_op1_r1, main_signed_add_64_0_op1_r2 /*synthesis keep*/;

reg [63:0] main_signed_add_64_0;
reg [63:0] main_signed_add_64_0_r0, main_signed_add_64_0_r1, main_signed_add_64_0_r2 /*synthesis keep*/;

reg [63:0] main_signed_add_64_1_op0;
reg [63:0] main_signed_add_64_1_op0_r0, main_signed_add_64_1_op0_r1, main_signed_add_64_1_op0_r2 /*synthesis keep*/;

reg [63:0] main_signed_add_64_1_op1;
reg [63:0] main_signed_add_64_1_op1_r0, main_signed_add_64_1_op1_r1, main_signed_add_64_1_op1_r2 /*synthesis keep*/;

reg [63:0] main_signed_add_64_1;
reg [63:0] main_signed_add_64_1_r0, main_signed_add_64_1_r1, main_signed_add_64_1_r2 /*synthesis keep*/;

reg [31:0] main_signed_divide_32_0_op0;
reg [31:0] main_signed_divide_32_0_op0_r0, main_signed_divide_32_0_op0_r1, main_signed_divide_32_0_op0_r2 /*synthesis keep*/;

reg [31:0] main_signed_divide_32_0_op1;
reg [31:0] main_signed_divide_32_0_op1_r0, main_signed_divide_32_0_op1_r1, main_signed_divide_32_0_op1_r2 /*synthesis keep*/;

wire [31:0] lpm_divide_main_preheaderi_252_temp_out;
wire [31:0] lpm_divide_main_preheaderi_252_temp_out_r0, lpm_divide_main_preheaderi_252_temp_out_r1, lpm_divide_main_preheaderi_252_temp_out_r2 /*synthesis keep*/;

wire [31:0] main_preheaderi_252_unused;
wire [31:0] main_preheaderi_252_unused_r0, main_preheaderi_252_unused_r1, main_preheaderi_252_unused_r2 /*synthesis keep*/;

reg  lpm_divide_main_preheaderi_252_en;
reg  lpm_divide_main_preheaderi_252_en_r0, lpm_divide_main_preheaderi_252_en_r1, lpm_divide_main_preheaderi_252_en_r2 /*synthesis keep*/;

reg [31:0] lpm_divide_main_preheaderi_252_out;
reg [31:0] lpm_divide_main_preheaderi_252_out_r0, lpm_divide_main_preheaderi_252_out_r1, lpm_divide_main_preheaderi_252_out_r2 /*synthesis keep*/;

reg [31:0] main_signed_divide_32_0;
reg [31:0] main_signed_divide_32_0_r0, main_signed_divide_32_0_r1, main_signed_divide_32_0_r2 /*synthesis keep*/;


/*   %252 = sdiv i32 %i.11.i, 2*/
lpm_divide lpm_divide_main_preheaderi_252 (
	.quotient (lpm_divide_main_preheaderi_252_temp_out),
	.remain (main_preheaderi_252_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_preheaderi_252_en),
	.numer (main_signed_divide_32_0_op0),
	.denom (main_signed_divide_32_0_op1)
);

defparam
	lpm_divide_main_preheaderi_252.lpm_pipeline = 32,
	lpm_divide_main_preheaderi_252.lpm_widthn = 32,
	lpm_divide_main_preheaderi_252.lpm_widthd = 32,
	lpm_divide_main_preheaderi_252.lpm_drepresentation = "SIGNED",
	lpm_divide_main_preheaderi_252.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_preheaderi_252.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


upzero upzero (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (upzero_memory_controller_enable_a),
	.memory_controller_address_a (upzero_memory_controller_address_a),
	.memory_controller_write_enable_a (upzero_memory_controller_write_enable_a),
	.memory_controller_in_a (upzero_memory_controller_in_a),
	.memory_controller_size_a (upzero_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (upzero_memory_controller_enable_b),
	.memory_controller_address_b (upzero_memory_controller_address_b),
	.memory_controller_write_enable_b (upzero_memory_controller_write_enable_b),
	.memory_controller_in_b (upzero_memory_controller_in_b),
	.memory_controller_size_b (upzero_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (upzero_start),
	.finish (upzero_finish),
	.arg_dlt (upzero_arg_dlt),
	.arg_dlti (upzero_arg_dlti),
	.arg_bli (upzero_arg_bli)
);

defparam
	upzero.tag_offset = tag_offset;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %465*/
	/*   %466 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %.main_result.2) #1*/
	if ((cur_state == LEGUP_F_main_BB__465_187)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Result: %d\n", $signed(main_preheader_main_result2_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_preheader_main_result2_reg) === 1'bX) finish <= 0;
	end
	/* main: %468*/
	/*   %469 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__468_188)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("RESULT: PASS\n");
	end
	/* main: %470*/
	/*   %471 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__470_189)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
	if (reset)
		cur_state_r0 <= LEGUP_0;
	else if (memory_controller_waitrequest == 1'd1)
		cur_state_r0 <= cur_state_r0;
	else
		cur_state_r0 <= next_state_r0;
end

always @(*)
begin
next_state_r0 = cur_state_r0;
case(cur_state_v0)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state_r0 = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state_r0 = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_10:
		next_state_r0 = LEGUP_F_main_BB__0_11;
LEGUP_F_main_BB__0_11:
		next_state_r0 = LEGUP_F_main_BB__0_12;
LEGUP_F_main_BB__0_12:
		next_state_r0 = LEGUP_F_main_BB__0_13;
LEGUP_F_main_BB__0_13:
		next_state_r0 = LEGUP_F_main_BB__0_14;
LEGUP_F_main_BB__0_14:
		next_state_r0 = LEGUP_F_main_BB__0_15;
LEGUP_F_main_BB__0_15:
		next_state_r0 = LEGUP_F_main_BB__0_16;
LEGUP_F_main_BB__0_16:
		next_state_r0 = LEGUP_F_main_BB__0_17;
LEGUP_F_main_BB__0_17:
		next_state_r0 = LEGUP_F_main_BB__0_18;
LEGUP_F_main_BB__0_18:
		next_state_r0 = LEGUP_F_main_BB__0_19;
LEGUP_F_main_BB__0_19:
		next_state_r0 = LEGUP_F_main_BB__0_20;
LEGUP_F_main_BB__0_2:
		next_state_r0 = LEGUP_F_main_BB__0_3;
LEGUP_F_main_BB__0_20:
		next_state_r0 = LEGUP_F_main_BB__0_21;
LEGUP_F_main_BB__0_21:
		next_state_r0 = LEGUP_F_main_BB__0_22;
LEGUP_F_main_BB__0_22:
		next_state_r0 = LEGUP_F_main_BB__0_23;
LEGUP_F_main_BB__0_23:
		next_state_r0 = LEGUP_F_main_BB__0_24;
LEGUP_F_main_BB__0_24:
		next_state_r0 = LEGUP_F_main_BB__0_25;
LEGUP_F_main_BB__0_25:
		next_state_r0 = LEGUP_F_main_BB__1_26;
LEGUP_F_main_BB__0_3:
		next_state_r0 = LEGUP_F_main_BB__0_4;
LEGUP_F_main_BB__0_4:
		next_state_r0 = LEGUP_F_main_BB__0_5;
LEGUP_F_main_BB__0_5:
		next_state_r0 = LEGUP_F_main_BB__0_6;
LEGUP_F_main_BB__0_6:
		next_state_r0 = LEGUP_F_main_BB__0_7;
LEGUP_F_main_BB__0_7:
		next_state_r0 = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state_r0 = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state_r0 = LEGUP_F_main_BB__0_10;
LEGUP_F_main_BB__113_50:
	if ((main_113_115_r0 == 1'd1))
		next_state_r0 = LEGUP_F_main_BB__116_51;
	else if ((main_113_115_r0 == 1'd0))
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_54;
LEGUP_F_main_BB__116_51:
		next_state_r0 = LEGUP_F_main_BB__116_52;
LEGUP_F_main_BB__116_52:
		next_state_r0 = LEGUP_F_main_BB__116_53;
LEGUP_F_main_BB__116_53:
	if ((main_116_122_r0 == 1'd1))
		next_state_r0 = LEGUP_F_main_BB__113_50;
	else if ((main_116_122_r0 == 1'd0))
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_54;
LEGUP_F_main_BB__1_26:
	if ((main_1_exitcond15_r0 == 1'd1))
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27;
	else if ((main_1_exitcond15_r0 == 1'd0))
		next_state_r0 = LEGUP_F_main_BB__2_28;
LEGUP_F_main_BB__2_28:
		next_state_r0 = LEGUP_F_main_BB__2_29;
LEGUP_F_main_BB__2_29:
		next_state_r0 = LEGUP_F_main_BB__1_26;
LEGUP_F_main_BB__465_187:
	if ((main_465_467_r0 == 1'd1))
		next_state_r0 = LEGUP_F_main_BB__468_188;
	else if ((main_465_467_r0 == 1'd0))
		next_state_r0 = LEGUP_F_main_BB__470_189;
LEGUP_F_main_BB__468_188:
		next_state_r0 = LEGUP_F_main_BB__472_190;
LEGUP_F_main_BB__470_189:
		next_state_r0 = LEGUP_F_main_BB__472_190;
LEGUP_F_main_BB__472_190:
		next_state_r0 = LEGUP_0;
LEGUP_F_main_BB_adpcm_mainexit_180:
		next_state_r0 = LEGUP_F_main_BB_adpcm_mainexit_181;
LEGUP_F_main_BB_adpcm_mainexit_181:
		next_state_r0 = LEGUP_F_main_BB_adpcm_mainexit_182;
LEGUP_F_main_BB_adpcm_mainexit_182:
	if ((main_adpcm_mainexit_exitcond_reg_r0 == 1'd1))
		next_state_r0 = LEGUP_F_main_BB_preheaderpreheader_183;
	else if ((main_adpcm_mainexit_exitcond_reg_r0 == 1'd0))
		next_state_r0 = LEGUP_F_main_BB_adpcm_mainexit_180;
LEGUP_F_main_BB_adpcm_mainexitpreheader_179:
		next_state_r0 = LEGUP_F_main_BB_adpcm_mainexit_180;
LEGUP_F_main_BB_encodeexit_crit_edge_100:
		next_state_r0 = LEGUP_F_main_BB_encodeexit_crit_edge_101;
LEGUP_F_main_BB_encodeexit_crit_edge_101:
		next_state_r0 = LEGUP_F_main_BB_encodeexit_crit_edge_102;
LEGUP_F_main_BB_encodeexit_crit_edge_102:
		next_state_r0 = LEGUP_F_main_BB_encodeexit_crit_edge_103;
LEGUP_F_main_BB_encodeexit_crit_edge_103:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_30;
LEGUP_F_main_BB_encodeexit_crit_edge_90:
		next_state_r0 = LEGUP_F_main_BB_encodeexit_crit_edge_91;
LEGUP_F_main_BB_encodeexit_crit_edge_91:
		next_state_r0 = LEGUP_F_main_BB_encodeexit_crit_edge_92;
LEGUP_F_main_BB_encodeexit_crit_edge_92:
		next_state_r0 = LEGUP_F_main_BB_encodeexit_crit_edge_93;
LEGUP_F_main_BB_encodeexit_crit_edge_93:
		next_state_r0 = LEGUP_F_main_BB_encodeexit_crit_edge_94;
LEGUP_F_main_BB_encodeexit_crit_edge_94:
		next_state_r0 = LEGUP_F_main_BB_encodeexit_crit_edge_95;
LEGUP_F_main_BB_encodeexit_crit_edge_95:
		next_state_r0 = LEGUP_F_main_BB_encodeexit_crit_edge_96;
LEGUP_F_main_BB_encodeexit_crit_edge_96:
		next_state_r0 = LEGUP_F_main_BB_encodeexit_crit_edge_97;
LEGUP_F_main_BB_encodeexit_crit_edge_97:
		next_state_r0 = LEGUP_F_main_BB_encodeexit_crit_edge_98;
LEGUP_F_main_BB_encodeexit_crit_edge_98:
		next_state_r0 = LEGUP_F_main_BB_encodeexit_crit_edge_99;
LEGUP_F_main_BB_encodeexit_crit_edge_99:
		next_state_r0 = LEGUP_F_main_BB_encodeexit_crit_edge_100;
LEGUP_F_main_BB_legup_memset_4_i64exit_30:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_31;
LEGUP_F_main_BB_legup_memset_4_i64exit_31:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_32;
LEGUP_F_main_BB_legup_memset_4_i64exit_32:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_33;
LEGUP_F_main_BB_legup_memset_4_i64exit_33:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_34;
LEGUP_F_main_BB_legup_memset_4_i64exit_34:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_35;
LEGUP_F_main_BB_legup_memset_4_i64exit_35:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_36;
LEGUP_F_main_BB_legup_memset_4_i64exit_36:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_37;
LEGUP_F_main_BB_legup_memset_4_i64exit_37:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_38;
LEGUP_F_main_BB_legup_memset_4_i64exit_38:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_39;
LEGUP_F_main_BB_legup_memset_4_i64exit_39:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_40;
LEGUP_F_main_BB_legup_memset_4_i64exit_40:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_41;
LEGUP_F_main_BB_legup_memset_4_i64exit_41:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_42;
LEGUP_F_main_BB_legup_memset_4_i64exit_42:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_43;
LEGUP_F_main_BB_legup_memset_4_i64exit_43:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_44;
LEGUP_F_main_BB_legup_memset_4_i64exit_44:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_45;
LEGUP_F_main_BB_legup_memset_4_i64exit_45:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_46;
LEGUP_F_main_BB_legup_memset_4_i64exit_46:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_47;
LEGUP_F_main_BB_legup_memset_4_i64exit_47:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_48;
LEGUP_F_main_BB_legup_memset_4_i64exit_48:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_49;
LEGUP_F_main_BB_legup_memset_4_i64exit_49:
		next_state_r0 = LEGUP_F_main_BB__116_51;
LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27:
		next_state_r0 = LEGUP_F_main_BB_legup_memset_4_i64exit_30;
LEGUP_F_main_BB_preheader_184:
		next_state_r0 = LEGUP_F_main_BB_preheader_185;
LEGUP_F_main_BB_preheader_185:
		next_state_r0 = LEGUP_F_main_BB_preheader_186;
LEGUP_F_main_BB_preheader_186:
	if ((main_preheader_exitcond1_reg_r0 == 1'd1))
		next_state_r0 = LEGUP_F_main_BB__465_187;
	else if ((main_preheader_exitcond1_reg_r0 == 1'd0))
		next_state_r0 = LEGUP_F_main_BB_preheader_184;
LEGUP_F_main_BB_preheaderi_107:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_108;
LEGUP_F_main_BB_preheaderi_108:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_109;
LEGUP_F_main_BB_preheaderi_109:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_110;
LEGUP_F_main_BB_preheaderi_110:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_111;
LEGUP_F_main_BB_preheaderi_111:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_112;
LEGUP_F_main_BB_preheaderi_112:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_113;
LEGUP_F_main_BB_preheaderi_113:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_114;
LEGUP_F_main_BB_preheaderi_114:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_115;
LEGUP_F_main_BB_preheaderi_115:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_116;
LEGUP_F_main_BB_preheaderi_116:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_117;
LEGUP_F_main_BB_preheaderi_117:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_118;
LEGUP_F_main_BB_preheaderi_118:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_119;
LEGUP_F_main_BB_preheaderi_119:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_120;
LEGUP_F_main_BB_preheaderi_120:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_121;
LEGUP_F_main_BB_preheaderi_121:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_122;
LEGUP_F_main_BB_preheaderi_122:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_123;
LEGUP_F_main_BB_preheaderi_123:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_124;
LEGUP_F_main_BB_preheaderi_124:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_125;
LEGUP_F_main_BB_preheaderi_125:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_126;
LEGUP_F_main_BB_preheaderi_126:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_127;
LEGUP_F_main_BB_preheaderi_127:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_128;
LEGUP_F_main_BB_preheaderi_128:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_129;
LEGUP_F_main_BB_preheaderi_129:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_130;
LEGUP_F_main_BB_preheaderi_130:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_131;
LEGUP_F_main_BB_preheaderi_131:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_132;
LEGUP_F_main_BB_preheaderi_132:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_133;
LEGUP_F_main_BB_preheaderi_133:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_134;
LEGUP_F_main_BB_preheaderi_134:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_135;
LEGUP_F_main_BB_preheaderi_135:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_136;
LEGUP_F_main_BB_preheaderi_136:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_137;
LEGUP_F_main_BB_preheaderi_137:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_138;
LEGUP_F_main_BB_preheaderi_138:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_139;
LEGUP_F_main_BB_preheaderi_139:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_140;
LEGUP_F_main_BB_preheaderi_140:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_141;
LEGUP_F_main_BB_preheaderi_141:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_142;
LEGUP_F_main_BB_preheaderi_142:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_143;
LEGUP_F_main_BB_preheaderi_143:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_144;
LEGUP_F_main_BB_preheaderi_144:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_145;
LEGUP_F_main_BB_preheaderi_145:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_146;
LEGUP_F_main_BB_preheaderi_146:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_147;
LEGUP_F_main_BB_preheaderi_147:
		next_state_r0 = LEGUP_function_call_148;
LEGUP_F_main_BB_preheaderi_149:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_150;
LEGUP_F_main_BB_preheaderi_150:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_151;
LEGUP_F_main_BB_preheaderi_151:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_152;
LEGUP_F_main_BB_preheaderi_152:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_153;
LEGUP_F_main_BB_preheaderi_153:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_154;
LEGUP_F_main_BB_preheaderi_154:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_155;
LEGUP_F_main_BB_preheaderi_155:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_156;
LEGUP_F_main_BB_preheaderi_156:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_157;
LEGUP_F_main_BB_preheaderi_157:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_158;
LEGUP_F_main_BB_preheaderi_158:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_159;
LEGUP_F_main_BB_preheaderi_159:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_160;
LEGUP_F_main_BB_preheaderi_160:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_161;
LEGUP_F_main_BB_preheaderi_161:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_162;
LEGUP_F_main_BB_preheaderi_162:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_163;
LEGUP_F_main_BB_preheaderi_163:
		next_state_r0 = LEGUP_function_call_164;
LEGUP_F_main_BB_preheaderi_165:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_166;
LEGUP_F_main_BB_preheaderi_166:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_167;
LEGUP_F_main_BB_preheaderi_167:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_168;
LEGUP_F_main_BB_preheaderi_168:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_169;
LEGUP_F_main_BB_preheaderi_169:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_170;
LEGUP_F_main_BB_preheaderi_170:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_171;
LEGUP_F_main_BB_preheaderi_171:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_172;
LEGUP_F_main_BB_preheaderi_172:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_173;
LEGUP_F_main_BB_preheaderi_173:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_174;
LEGUP_F_main_BB_preheaderi_174:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_175;
LEGUP_F_main_BB_preheaderi_175:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_176;
LEGUP_F_main_BB_preheaderi_176:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_177;
LEGUP_F_main_BB_preheaderi_177:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_178;
LEGUP_F_main_BB_preheaderi_178:
	if ((main_preheaderi_exitcond5_r0 == 1'd1))
		next_state_r0 = LEGUP_F_main_BB_adpcm_mainexitpreheader_179;
	else if ((main_preheaderi_exitcond5_r0 == 1'd0))
		next_state_r0 = LEGUP_F_main_BB_preheaderi_107;
LEGUP_F_main_BB_preheaderipreheader_104:
		next_state_r0 = LEGUP_F_main_BB_preheaderipreheader_105;
LEGUP_F_main_BB_preheaderipreheader_105:
		next_state_r0 = LEGUP_F_main_BB_preheaderipreheader_106;
LEGUP_F_main_BB_preheaderipreheader_106:
		next_state_r0 = LEGUP_F_main_BB_preheaderi_107;
LEGUP_F_main_BB_preheaderpreheader_183:
		next_state_r0 = LEGUP_F_main_BB_preheader_184;
LEGUP_F_main_BB_quantlexiti_54:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_55;
LEGUP_F_main_BB_quantlexiti_55:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_56;
LEGUP_F_main_BB_quantlexiti_56:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_57;
LEGUP_F_main_BB_quantlexiti_57:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_58;
LEGUP_F_main_BB_quantlexiti_58:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_59;
LEGUP_F_main_BB_quantlexiti_59:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_60;
LEGUP_F_main_BB_quantlexiti_60:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_61;
LEGUP_F_main_BB_quantlexiti_61:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_62;
LEGUP_F_main_BB_quantlexiti_62:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_63;
LEGUP_F_main_BB_quantlexiti_63:
		next_state_r0 = LEGUP_function_call_64;
LEGUP_F_main_BB_quantlexiti_65:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_66;
LEGUP_F_main_BB_quantlexiti_66:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_67;
LEGUP_F_main_BB_quantlexiti_67:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_68;
LEGUP_F_main_BB_quantlexiti_68:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_69;
LEGUP_F_main_BB_quantlexiti_69:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_70;
LEGUP_F_main_BB_quantlexiti_70:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_71;
LEGUP_F_main_BB_quantlexiti_71:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_72;
LEGUP_F_main_BB_quantlexiti_72:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_73;
LEGUP_F_main_BB_quantlexiti_73:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_74;
LEGUP_F_main_BB_quantlexiti_74:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_75;
LEGUP_F_main_BB_quantlexiti_75:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_76;
LEGUP_F_main_BB_quantlexiti_76:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_77;
LEGUP_F_main_BB_quantlexiti_77:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_78;
LEGUP_F_main_BB_quantlexiti_78:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_79;
LEGUP_F_main_BB_quantlexiti_79:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_80;
LEGUP_F_main_BB_quantlexiti_80:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_81;
LEGUP_F_main_BB_quantlexiti_81:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_82;
LEGUP_F_main_BB_quantlexiti_82:
		next_state_r0 = LEGUP_function_call_83;
LEGUP_F_main_BB_quantlexiti_84:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_85;
LEGUP_F_main_BB_quantlexiti_85:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_86;
LEGUP_F_main_BB_quantlexiti_86:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_87;
LEGUP_F_main_BB_quantlexiti_87:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_88;
LEGUP_F_main_BB_quantlexiti_88:
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_89;
LEGUP_F_main_BB_quantlexiti_89:
	if ((main_quantlexiti_236_reg_r0 == 1'd1))
		next_state_r0 = LEGUP_F_main_BB_encodeexit_crit_edge_90;
	else if ((main_quantlexiti_236_reg_r0 == 1'd0))
		next_state_r0 = LEGUP_F_main_BB_preheaderipreheader_104;
LEGUP_function_call_148:
	if ((upzero_finish_final_r0 == 1'd1))
		next_state_r0 = LEGUP_F_main_BB_preheaderi_149;
LEGUP_function_call_164:
	if ((upzero_finish_final_r0 == 1'd1))
		next_state_r0 = LEGUP_F_main_BB_preheaderi_165;
LEGUP_function_call_64:
	if ((upzero_finish_final_r0 == 1'd1))
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_65;
LEGUP_function_call_83:
	if ((upzero_finish_final_r0 == 1'd1))
		next_state_r0 = LEGUP_F_main_BB_quantlexiti_84;
default:
	next_state_r0 = cur_state_r0;
endcase

end
always @(posedge clk) begin
	if (reset)
		cur_state_r1 <= LEGUP_0;
	else if (memory_controller_waitrequest == 1'd1)
		cur_state_r1 <= cur_state_r1;
	else
		cur_state_r1 <= next_state_r1;
end

always @(*)
begin
next_state_r1 = cur_state_r1;
case(cur_state_v1)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state_r1 = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state_r1 = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_10:
		next_state_r1 = LEGUP_F_main_BB__0_11;
LEGUP_F_main_BB__0_11:
		next_state_r1 = LEGUP_F_main_BB__0_12;
LEGUP_F_main_BB__0_12:
		next_state_r1 = LEGUP_F_main_BB__0_13;
LEGUP_F_main_BB__0_13:
		next_state_r1 = LEGUP_F_main_BB__0_14;
LEGUP_F_main_BB__0_14:
		next_state_r1 = LEGUP_F_main_BB__0_15;
LEGUP_F_main_BB__0_15:
		next_state_r1 = LEGUP_F_main_BB__0_16;
LEGUP_F_main_BB__0_16:
		next_state_r1 = LEGUP_F_main_BB__0_17;
LEGUP_F_main_BB__0_17:
		next_state_r1 = LEGUP_F_main_BB__0_18;
LEGUP_F_main_BB__0_18:
		next_state_r1 = LEGUP_F_main_BB__0_19;
LEGUP_F_main_BB__0_19:
		next_state_r1 = LEGUP_F_main_BB__0_20;
LEGUP_F_main_BB__0_2:
		next_state_r1 = LEGUP_F_main_BB__0_3;
LEGUP_F_main_BB__0_20:
		next_state_r1 = LEGUP_F_main_BB__0_21;
LEGUP_F_main_BB__0_21:
		next_state_r1 = LEGUP_F_main_BB__0_22;
LEGUP_F_main_BB__0_22:
		next_state_r1 = LEGUP_F_main_BB__0_23;
LEGUP_F_main_BB__0_23:
		next_state_r1 = LEGUP_F_main_BB__0_24;
LEGUP_F_main_BB__0_24:
		next_state_r1 = LEGUP_F_main_BB__0_25;
LEGUP_F_main_BB__0_25:
		next_state_r1 = LEGUP_F_main_BB__1_26;
LEGUP_F_main_BB__0_3:
		next_state_r1 = LEGUP_F_main_BB__0_4;
LEGUP_F_main_BB__0_4:
		next_state_r1 = LEGUP_F_main_BB__0_5;
LEGUP_F_main_BB__0_5:
		next_state_r1 = LEGUP_F_main_BB__0_6;
LEGUP_F_main_BB__0_6:
		next_state_r1 = LEGUP_F_main_BB__0_7;
LEGUP_F_main_BB__0_7:
		next_state_r1 = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state_r1 = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state_r1 = LEGUP_F_main_BB__0_10;
LEGUP_F_main_BB__113_50:
	if ((main_113_115_r1 == 1'd1))
		next_state_r1 = LEGUP_F_main_BB__116_51;
	else if ((main_113_115_r1 == 1'd0))
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_54;
LEGUP_F_main_BB__116_51:
		next_state_r1 = LEGUP_F_main_BB__116_52;
LEGUP_F_main_BB__116_52:
		next_state_r1 = LEGUP_F_main_BB__116_53;
LEGUP_F_main_BB__116_53:
	if ((main_116_122_r1 == 1'd1))
		next_state_r1 = LEGUP_F_main_BB__113_50;
	else if ((main_116_122_r1 == 1'd0))
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_54;
LEGUP_F_main_BB__1_26:
	if ((main_1_exitcond15_r1 == 1'd1))
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27;
	else if ((main_1_exitcond15_r1 == 1'd0))
		next_state_r1 = LEGUP_F_main_BB__2_28;
LEGUP_F_main_BB__2_28:
		next_state_r1 = LEGUP_F_main_BB__2_29;
LEGUP_F_main_BB__2_29:
		next_state_r1 = LEGUP_F_main_BB__1_26;
LEGUP_F_main_BB__465_187:
	if ((main_465_467_r1 == 1'd1))
		next_state_r1 = LEGUP_F_main_BB__468_188;
	else if ((main_465_467_r1 == 1'd0))
		next_state_r1 = LEGUP_F_main_BB__470_189;
LEGUP_F_main_BB__468_188:
		next_state_r1 = LEGUP_F_main_BB__472_190;
LEGUP_F_main_BB__470_189:
		next_state_r1 = LEGUP_F_main_BB__472_190;
LEGUP_F_main_BB__472_190:
		next_state_r1 = LEGUP_0;
LEGUP_F_main_BB_adpcm_mainexit_180:
		next_state_r1 = LEGUP_F_main_BB_adpcm_mainexit_181;
LEGUP_F_main_BB_adpcm_mainexit_181:
		next_state_r1 = LEGUP_F_main_BB_adpcm_mainexit_182;
LEGUP_F_main_BB_adpcm_mainexit_182:
	if ((main_adpcm_mainexit_exitcond_reg_r1 == 1'd1))
		next_state_r1 = LEGUP_F_main_BB_preheaderpreheader_183;
	else if ((main_adpcm_mainexit_exitcond_reg_r1 == 1'd0))
		next_state_r1 = LEGUP_F_main_BB_adpcm_mainexit_180;
LEGUP_F_main_BB_adpcm_mainexitpreheader_179:
		next_state_r1 = LEGUP_F_main_BB_adpcm_mainexit_180;
LEGUP_F_main_BB_encodeexit_crit_edge_100:
		next_state_r1 = LEGUP_F_main_BB_encodeexit_crit_edge_101;
LEGUP_F_main_BB_encodeexit_crit_edge_101:
		next_state_r1 = LEGUP_F_main_BB_encodeexit_crit_edge_102;
LEGUP_F_main_BB_encodeexit_crit_edge_102:
		next_state_r1 = LEGUP_F_main_BB_encodeexit_crit_edge_103;
LEGUP_F_main_BB_encodeexit_crit_edge_103:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_30;
LEGUP_F_main_BB_encodeexit_crit_edge_90:
		next_state_r1 = LEGUP_F_main_BB_encodeexit_crit_edge_91;
LEGUP_F_main_BB_encodeexit_crit_edge_91:
		next_state_r1 = LEGUP_F_main_BB_encodeexit_crit_edge_92;
LEGUP_F_main_BB_encodeexit_crit_edge_92:
		next_state_r1 = LEGUP_F_main_BB_encodeexit_crit_edge_93;
LEGUP_F_main_BB_encodeexit_crit_edge_93:
		next_state_r1 = LEGUP_F_main_BB_encodeexit_crit_edge_94;
LEGUP_F_main_BB_encodeexit_crit_edge_94:
		next_state_r1 = LEGUP_F_main_BB_encodeexit_crit_edge_95;
LEGUP_F_main_BB_encodeexit_crit_edge_95:
		next_state_r1 = LEGUP_F_main_BB_encodeexit_crit_edge_96;
LEGUP_F_main_BB_encodeexit_crit_edge_96:
		next_state_r1 = LEGUP_F_main_BB_encodeexit_crit_edge_97;
LEGUP_F_main_BB_encodeexit_crit_edge_97:
		next_state_r1 = LEGUP_F_main_BB_encodeexit_crit_edge_98;
LEGUP_F_main_BB_encodeexit_crit_edge_98:
		next_state_r1 = LEGUP_F_main_BB_encodeexit_crit_edge_99;
LEGUP_F_main_BB_encodeexit_crit_edge_99:
		next_state_r1 = LEGUP_F_main_BB_encodeexit_crit_edge_100;
LEGUP_F_main_BB_legup_memset_4_i64exit_30:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_31;
LEGUP_F_main_BB_legup_memset_4_i64exit_31:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_32;
LEGUP_F_main_BB_legup_memset_4_i64exit_32:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_33;
LEGUP_F_main_BB_legup_memset_4_i64exit_33:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_34;
LEGUP_F_main_BB_legup_memset_4_i64exit_34:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_35;
LEGUP_F_main_BB_legup_memset_4_i64exit_35:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_36;
LEGUP_F_main_BB_legup_memset_4_i64exit_36:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_37;
LEGUP_F_main_BB_legup_memset_4_i64exit_37:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_38;
LEGUP_F_main_BB_legup_memset_4_i64exit_38:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_39;
LEGUP_F_main_BB_legup_memset_4_i64exit_39:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_40;
LEGUP_F_main_BB_legup_memset_4_i64exit_40:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_41;
LEGUP_F_main_BB_legup_memset_4_i64exit_41:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_42;
LEGUP_F_main_BB_legup_memset_4_i64exit_42:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_43;
LEGUP_F_main_BB_legup_memset_4_i64exit_43:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_44;
LEGUP_F_main_BB_legup_memset_4_i64exit_44:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_45;
LEGUP_F_main_BB_legup_memset_4_i64exit_45:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_46;
LEGUP_F_main_BB_legup_memset_4_i64exit_46:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_47;
LEGUP_F_main_BB_legup_memset_4_i64exit_47:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_48;
LEGUP_F_main_BB_legup_memset_4_i64exit_48:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_49;
LEGUP_F_main_BB_legup_memset_4_i64exit_49:
		next_state_r1 = LEGUP_F_main_BB__116_51;
LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27:
		next_state_r1 = LEGUP_F_main_BB_legup_memset_4_i64exit_30;
LEGUP_F_main_BB_preheader_184:
		next_state_r1 = LEGUP_F_main_BB_preheader_185;
LEGUP_F_main_BB_preheader_185:
		next_state_r1 = LEGUP_F_main_BB_preheader_186;
LEGUP_F_main_BB_preheader_186:
	if ((main_preheader_exitcond1_reg_r1 == 1'd1))
		next_state_r1 = LEGUP_F_main_BB__465_187;
	else if ((main_preheader_exitcond1_reg_r1 == 1'd0))
		next_state_r1 = LEGUP_F_main_BB_preheader_184;
LEGUP_F_main_BB_preheaderi_107:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_108;
LEGUP_F_main_BB_preheaderi_108:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_109;
LEGUP_F_main_BB_preheaderi_109:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_110;
LEGUP_F_main_BB_preheaderi_110:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_111;
LEGUP_F_main_BB_preheaderi_111:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_112;
LEGUP_F_main_BB_preheaderi_112:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_113;
LEGUP_F_main_BB_preheaderi_113:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_114;
LEGUP_F_main_BB_preheaderi_114:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_115;
LEGUP_F_main_BB_preheaderi_115:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_116;
LEGUP_F_main_BB_preheaderi_116:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_117;
LEGUP_F_main_BB_preheaderi_117:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_118;
LEGUP_F_main_BB_preheaderi_118:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_119;
LEGUP_F_main_BB_preheaderi_119:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_120;
LEGUP_F_main_BB_preheaderi_120:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_121;
LEGUP_F_main_BB_preheaderi_121:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_122;
LEGUP_F_main_BB_preheaderi_122:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_123;
LEGUP_F_main_BB_preheaderi_123:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_124;
LEGUP_F_main_BB_preheaderi_124:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_125;
LEGUP_F_main_BB_preheaderi_125:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_126;
LEGUP_F_main_BB_preheaderi_126:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_127;
LEGUP_F_main_BB_preheaderi_127:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_128;
LEGUP_F_main_BB_preheaderi_128:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_129;
LEGUP_F_main_BB_preheaderi_129:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_130;
LEGUP_F_main_BB_preheaderi_130:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_131;
LEGUP_F_main_BB_preheaderi_131:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_132;
LEGUP_F_main_BB_preheaderi_132:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_133;
LEGUP_F_main_BB_preheaderi_133:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_134;
LEGUP_F_main_BB_preheaderi_134:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_135;
LEGUP_F_main_BB_preheaderi_135:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_136;
LEGUP_F_main_BB_preheaderi_136:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_137;
LEGUP_F_main_BB_preheaderi_137:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_138;
LEGUP_F_main_BB_preheaderi_138:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_139;
LEGUP_F_main_BB_preheaderi_139:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_140;
LEGUP_F_main_BB_preheaderi_140:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_141;
LEGUP_F_main_BB_preheaderi_141:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_142;
LEGUP_F_main_BB_preheaderi_142:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_143;
LEGUP_F_main_BB_preheaderi_143:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_144;
LEGUP_F_main_BB_preheaderi_144:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_145;
LEGUP_F_main_BB_preheaderi_145:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_146;
LEGUP_F_main_BB_preheaderi_146:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_147;
LEGUP_F_main_BB_preheaderi_147:
		next_state_r1 = LEGUP_function_call_148;
LEGUP_F_main_BB_preheaderi_149:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_150;
LEGUP_F_main_BB_preheaderi_150:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_151;
LEGUP_F_main_BB_preheaderi_151:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_152;
LEGUP_F_main_BB_preheaderi_152:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_153;
LEGUP_F_main_BB_preheaderi_153:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_154;
LEGUP_F_main_BB_preheaderi_154:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_155;
LEGUP_F_main_BB_preheaderi_155:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_156;
LEGUP_F_main_BB_preheaderi_156:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_157;
LEGUP_F_main_BB_preheaderi_157:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_158;
LEGUP_F_main_BB_preheaderi_158:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_159;
LEGUP_F_main_BB_preheaderi_159:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_160;
LEGUP_F_main_BB_preheaderi_160:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_161;
LEGUP_F_main_BB_preheaderi_161:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_162;
LEGUP_F_main_BB_preheaderi_162:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_163;
LEGUP_F_main_BB_preheaderi_163:
		next_state_r1 = LEGUP_function_call_164;
LEGUP_F_main_BB_preheaderi_165:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_166;
LEGUP_F_main_BB_preheaderi_166:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_167;
LEGUP_F_main_BB_preheaderi_167:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_168;
LEGUP_F_main_BB_preheaderi_168:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_169;
LEGUP_F_main_BB_preheaderi_169:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_170;
LEGUP_F_main_BB_preheaderi_170:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_171;
LEGUP_F_main_BB_preheaderi_171:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_172;
LEGUP_F_main_BB_preheaderi_172:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_173;
LEGUP_F_main_BB_preheaderi_173:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_174;
LEGUP_F_main_BB_preheaderi_174:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_175;
LEGUP_F_main_BB_preheaderi_175:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_176;
LEGUP_F_main_BB_preheaderi_176:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_177;
LEGUP_F_main_BB_preheaderi_177:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_178;
LEGUP_F_main_BB_preheaderi_178:
	if ((main_preheaderi_exitcond5_r1 == 1'd1))
		next_state_r1 = LEGUP_F_main_BB_adpcm_mainexitpreheader_179;
	else if ((main_preheaderi_exitcond5_r1 == 1'd0))
		next_state_r1 = LEGUP_F_main_BB_preheaderi_107;
LEGUP_F_main_BB_preheaderipreheader_104:
		next_state_r1 = LEGUP_F_main_BB_preheaderipreheader_105;
LEGUP_F_main_BB_preheaderipreheader_105:
		next_state_r1 = LEGUP_F_main_BB_preheaderipreheader_106;
LEGUP_F_main_BB_preheaderipreheader_106:
		next_state_r1 = LEGUP_F_main_BB_preheaderi_107;
LEGUP_F_main_BB_preheaderpreheader_183:
		next_state_r1 = LEGUP_F_main_BB_preheader_184;
LEGUP_F_main_BB_quantlexiti_54:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_55;
LEGUP_F_main_BB_quantlexiti_55:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_56;
LEGUP_F_main_BB_quantlexiti_56:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_57;
LEGUP_F_main_BB_quantlexiti_57:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_58;
LEGUP_F_main_BB_quantlexiti_58:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_59;
LEGUP_F_main_BB_quantlexiti_59:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_60;
LEGUP_F_main_BB_quantlexiti_60:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_61;
LEGUP_F_main_BB_quantlexiti_61:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_62;
LEGUP_F_main_BB_quantlexiti_62:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_63;
LEGUP_F_main_BB_quantlexiti_63:
		next_state_r1 = LEGUP_function_call_64;
LEGUP_F_main_BB_quantlexiti_65:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_66;
LEGUP_F_main_BB_quantlexiti_66:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_67;
LEGUP_F_main_BB_quantlexiti_67:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_68;
LEGUP_F_main_BB_quantlexiti_68:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_69;
LEGUP_F_main_BB_quantlexiti_69:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_70;
LEGUP_F_main_BB_quantlexiti_70:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_71;
LEGUP_F_main_BB_quantlexiti_71:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_72;
LEGUP_F_main_BB_quantlexiti_72:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_73;
LEGUP_F_main_BB_quantlexiti_73:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_74;
LEGUP_F_main_BB_quantlexiti_74:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_75;
LEGUP_F_main_BB_quantlexiti_75:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_76;
LEGUP_F_main_BB_quantlexiti_76:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_77;
LEGUP_F_main_BB_quantlexiti_77:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_78;
LEGUP_F_main_BB_quantlexiti_78:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_79;
LEGUP_F_main_BB_quantlexiti_79:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_80;
LEGUP_F_main_BB_quantlexiti_80:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_81;
LEGUP_F_main_BB_quantlexiti_81:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_82;
LEGUP_F_main_BB_quantlexiti_82:
		next_state_r1 = LEGUP_function_call_83;
LEGUP_F_main_BB_quantlexiti_84:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_85;
LEGUP_F_main_BB_quantlexiti_85:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_86;
LEGUP_F_main_BB_quantlexiti_86:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_87;
LEGUP_F_main_BB_quantlexiti_87:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_88;
LEGUP_F_main_BB_quantlexiti_88:
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_89;
LEGUP_F_main_BB_quantlexiti_89:
	if ((main_quantlexiti_236_reg_r1 == 1'd1))
		next_state_r1 = LEGUP_F_main_BB_encodeexit_crit_edge_90;
	else if ((main_quantlexiti_236_reg_r1 == 1'd0))
		next_state_r1 = LEGUP_F_main_BB_preheaderipreheader_104;
LEGUP_function_call_148:
	if ((upzero_finish_final_r1 == 1'd1))
		next_state_r1 = LEGUP_F_main_BB_preheaderi_149;
LEGUP_function_call_164:
	if ((upzero_finish_final_r1 == 1'd1))
		next_state_r1 = LEGUP_F_main_BB_preheaderi_165;
LEGUP_function_call_64:
	if ((upzero_finish_final_r1 == 1'd1))
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_65;
LEGUP_function_call_83:
	if ((upzero_finish_final_r1 == 1'd1))
		next_state_r1 = LEGUP_F_main_BB_quantlexiti_84;
default:
	next_state_r1 = cur_state_r1;
endcase

end
always @(posedge clk) begin
	if (reset)
		cur_state_r2 <= LEGUP_0;
	else if (memory_controller_waitrequest == 1'd1)
		cur_state_r2 <= cur_state_r2;
	else
		cur_state_r2 <= next_state_r2;
end

always @(*)
begin
next_state_r2 = cur_state_r2;
case(cur_state_v2)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state_r2 = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state_r2 = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_10:
		next_state_r2 = LEGUP_F_main_BB__0_11;
LEGUP_F_main_BB__0_11:
		next_state_r2 = LEGUP_F_main_BB__0_12;
LEGUP_F_main_BB__0_12:
		next_state_r2 = LEGUP_F_main_BB__0_13;
LEGUP_F_main_BB__0_13:
		next_state_r2 = LEGUP_F_main_BB__0_14;
LEGUP_F_main_BB__0_14:
		next_state_r2 = LEGUP_F_main_BB__0_15;
LEGUP_F_main_BB__0_15:
		next_state_r2 = LEGUP_F_main_BB__0_16;
LEGUP_F_main_BB__0_16:
		next_state_r2 = LEGUP_F_main_BB__0_17;
LEGUP_F_main_BB__0_17:
		next_state_r2 = LEGUP_F_main_BB__0_18;
LEGUP_F_main_BB__0_18:
		next_state_r2 = LEGUP_F_main_BB__0_19;
LEGUP_F_main_BB__0_19:
		next_state_r2 = LEGUP_F_main_BB__0_20;
LEGUP_F_main_BB__0_2:
		next_state_r2 = LEGUP_F_main_BB__0_3;
LEGUP_F_main_BB__0_20:
		next_state_r2 = LEGUP_F_main_BB__0_21;
LEGUP_F_main_BB__0_21:
		next_state_r2 = LEGUP_F_main_BB__0_22;
LEGUP_F_main_BB__0_22:
		next_state_r2 = LEGUP_F_main_BB__0_23;
LEGUP_F_main_BB__0_23:
		next_state_r2 = LEGUP_F_main_BB__0_24;
LEGUP_F_main_BB__0_24:
		next_state_r2 = LEGUP_F_main_BB__0_25;
LEGUP_F_main_BB__0_25:
		next_state_r2 = LEGUP_F_main_BB__1_26;
LEGUP_F_main_BB__0_3:
		next_state_r2 = LEGUP_F_main_BB__0_4;
LEGUP_F_main_BB__0_4:
		next_state_r2 = LEGUP_F_main_BB__0_5;
LEGUP_F_main_BB__0_5:
		next_state_r2 = LEGUP_F_main_BB__0_6;
LEGUP_F_main_BB__0_6:
		next_state_r2 = LEGUP_F_main_BB__0_7;
LEGUP_F_main_BB__0_7:
		next_state_r2 = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state_r2 = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state_r2 = LEGUP_F_main_BB__0_10;
LEGUP_F_main_BB__113_50:
	if ((main_113_115_r2 == 1'd1))
		next_state_r2 = LEGUP_F_main_BB__116_51;
	else if ((main_113_115_r2 == 1'd0))
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_54;
LEGUP_F_main_BB__116_51:
		next_state_r2 = LEGUP_F_main_BB__116_52;
LEGUP_F_main_BB__116_52:
		next_state_r2 = LEGUP_F_main_BB__116_53;
LEGUP_F_main_BB__116_53:
	if ((main_116_122_r2 == 1'd1))
		next_state_r2 = LEGUP_F_main_BB__113_50;
	else if ((main_116_122_r2 == 1'd0))
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_54;
LEGUP_F_main_BB__1_26:
	if ((main_1_exitcond15_r2 == 1'd1))
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27;
	else if ((main_1_exitcond15_r2 == 1'd0))
		next_state_r2 = LEGUP_F_main_BB__2_28;
LEGUP_F_main_BB__2_28:
		next_state_r2 = LEGUP_F_main_BB__2_29;
LEGUP_F_main_BB__2_29:
		next_state_r2 = LEGUP_F_main_BB__1_26;
LEGUP_F_main_BB__465_187:
	if ((main_465_467_r2 == 1'd1))
		next_state_r2 = LEGUP_F_main_BB__468_188;
	else if ((main_465_467_r2 == 1'd0))
		next_state_r2 = LEGUP_F_main_BB__470_189;
LEGUP_F_main_BB__468_188:
		next_state_r2 = LEGUP_F_main_BB__472_190;
LEGUP_F_main_BB__470_189:
		next_state_r2 = LEGUP_F_main_BB__472_190;
LEGUP_F_main_BB__472_190:
		next_state_r2 = LEGUP_0;
LEGUP_F_main_BB_adpcm_mainexit_180:
		next_state_r2 = LEGUP_F_main_BB_adpcm_mainexit_181;
LEGUP_F_main_BB_adpcm_mainexit_181:
		next_state_r2 = LEGUP_F_main_BB_adpcm_mainexit_182;
LEGUP_F_main_BB_adpcm_mainexit_182:
	if ((main_adpcm_mainexit_exitcond_reg_r2 == 1'd1))
		next_state_r2 = LEGUP_F_main_BB_preheaderpreheader_183;
	else if ((main_adpcm_mainexit_exitcond_reg_r2 == 1'd0))
		next_state_r2 = LEGUP_F_main_BB_adpcm_mainexit_180;
LEGUP_F_main_BB_adpcm_mainexitpreheader_179:
		next_state_r2 = LEGUP_F_main_BB_adpcm_mainexit_180;
LEGUP_F_main_BB_encodeexit_crit_edge_100:
		next_state_r2 = LEGUP_F_main_BB_encodeexit_crit_edge_101;
LEGUP_F_main_BB_encodeexit_crit_edge_101:
		next_state_r2 = LEGUP_F_main_BB_encodeexit_crit_edge_102;
LEGUP_F_main_BB_encodeexit_crit_edge_102:
		next_state_r2 = LEGUP_F_main_BB_encodeexit_crit_edge_103;
LEGUP_F_main_BB_encodeexit_crit_edge_103:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_30;
LEGUP_F_main_BB_encodeexit_crit_edge_90:
		next_state_r2 = LEGUP_F_main_BB_encodeexit_crit_edge_91;
LEGUP_F_main_BB_encodeexit_crit_edge_91:
		next_state_r2 = LEGUP_F_main_BB_encodeexit_crit_edge_92;
LEGUP_F_main_BB_encodeexit_crit_edge_92:
		next_state_r2 = LEGUP_F_main_BB_encodeexit_crit_edge_93;
LEGUP_F_main_BB_encodeexit_crit_edge_93:
		next_state_r2 = LEGUP_F_main_BB_encodeexit_crit_edge_94;
LEGUP_F_main_BB_encodeexit_crit_edge_94:
		next_state_r2 = LEGUP_F_main_BB_encodeexit_crit_edge_95;
LEGUP_F_main_BB_encodeexit_crit_edge_95:
		next_state_r2 = LEGUP_F_main_BB_encodeexit_crit_edge_96;
LEGUP_F_main_BB_encodeexit_crit_edge_96:
		next_state_r2 = LEGUP_F_main_BB_encodeexit_crit_edge_97;
LEGUP_F_main_BB_encodeexit_crit_edge_97:
		next_state_r2 = LEGUP_F_main_BB_encodeexit_crit_edge_98;
LEGUP_F_main_BB_encodeexit_crit_edge_98:
		next_state_r2 = LEGUP_F_main_BB_encodeexit_crit_edge_99;
LEGUP_F_main_BB_encodeexit_crit_edge_99:
		next_state_r2 = LEGUP_F_main_BB_encodeexit_crit_edge_100;
LEGUP_F_main_BB_legup_memset_4_i64exit_30:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_31;
LEGUP_F_main_BB_legup_memset_4_i64exit_31:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_32;
LEGUP_F_main_BB_legup_memset_4_i64exit_32:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_33;
LEGUP_F_main_BB_legup_memset_4_i64exit_33:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_34;
LEGUP_F_main_BB_legup_memset_4_i64exit_34:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_35;
LEGUP_F_main_BB_legup_memset_4_i64exit_35:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_36;
LEGUP_F_main_BB_legup_memset_4_i64exit_36:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_37;
LEGUP_F_main_BB_legup_memset_4_i64exit_37:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_38;
LEGUP_F_main_BB_legup_memset_4_i64exit_38:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_39;
LEGUP_F_main_BB_legup_memset_4_i64exit_39:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_40;
LEGUP_F_main_BB_legup_memset_4_i64exit_40:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_41;
LEGUP_F_main_BB_legup_memset_4_i64exit_41:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_42;
LEGUP_F_main_BB_legup_memset_4_i64exit_42:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_43;
LEGUP_F_main_BB_legup_memset_4_i64exit_43:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_44;
LEGUP_F_main_BB_legup_memset_4_i64exit_44:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_45;
LEGUP_F_main_BB_legup_memset_4_i64exit_45:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_46;
LEGUP_F_main_BB_legup_memset_4_i64exit_46:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_47;
LEGUP_F_main_BB_legup_memset_4_i64exit_47:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_48;
LEGUP_F_main_BB_legup_memset_4_i64exit_48:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_49;
LEGUP_F_main_BB_legup_memset_4_i64exit_49:
		next_state_r2 = LEGUP_F_main_BB__116_51;
LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27:
		next_state_r2 = LEGUP_F_main_BB_legup_memset_4_i64exit_30;
LEGUP_F_main_BB_preheader_184:
		next_state_r2 = LEGUP_F_main_BB_preheader_185;
LEGUP_F_main_BB_preheader_185:
		next_state_r2 = LEGUP_F_main_BB_preheader_186;
LEGUP_F_main_BB_preheader_186:
	if ((main_preheader_exitcond1_reg_r2 == 1'd1))
		next_state_r2 = LEGUP_F_main_BB__465_187;
	else if ((main_preheader_exitcond1_reg_r2 == 1'd0))
		next_state_r2 = LEGUP_F_main_BB_preheader_184;
LEGUP_F_main_BB_preheaderi_107:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_108;
LEGUP_F_main_BB_preheaderi_108:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_109;
LEGUP_F_main_BB_preheaderi_109:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_110;
LEGUP_F_main_BB_preheaderi_110:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_111;
LEGUP_F_main_BB_preheaderi_111:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_112;
LEGUP_F_main_BB_preheaderi_112:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_113;
LEGUP_F_main_BB_preheaderi_113:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_114;
LEGUP_F_main_BB_preheaderi_114:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_115;
LEGUP_F_main_BB_preheaderi_115:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_116;
LEGUP_F_main_BB_preheaderi_116:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_117;
LEGUP_F_main_BB_preheaderi_117:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_118;
LEGUP_F_main_BB_preheaderi_118:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_119;
LEGUP_F_main_BB_preheaderi_119:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_120;
LEGUP_F_main_BB_preheaderi_120:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_121;
LEGUP_F_main_BB_preheaderi_121:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_122;
LEGUP_F_main_BB_preheaderi_122:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_123;
LEGUP_F_main_BB_preheaderi_123:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_124;
LEGUP_F_main_BB_preheaderi_124:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_125;
LEGUP_F_main_BB_preheaderi_125:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_126;
LEGUP_F_main_BB_preheaderi_126:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_127;
LEGUP_F_main_BB_preheaderi_127:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_128;
LEGUP_F_main_BB_preheaderi_128:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_129;
LEGUP_F_main_BB_preheaderi_129:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_130;
LEGUP_F_main_BB_preheaderi_130:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_131;
LEGUP_F_main_BB_preheaderi_131:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_132;
LEGUP_F_main_BB_preheaderi_132:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_133;
LEGUP_F_main_BB_preheaderi_133:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_134;
LEGUP_F_main_BB_preheaderi_134:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_135;
LEGUP_F_main_BB_preheaderi_135:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_136;
LEGUP_F_main_BB_preheaderi_136:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_137;
LEGUP_F_main_BB_preheaderi_137:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_138;
LEGUP_F_main_BB_preheaderi_138:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_139;
LEGUP_F_main_BB_preheaderi_139:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_140;
LEGUP_F_main_BB_preheaderi_140:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_141;
LEGUP_F_main_BB_preheaderi_141:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_142;
LEGUP_F_main_BB_preheaderi_142:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_143;
LEGUP_F_main_BB_preheaderi_143:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_144;
LEGUP_F_main_BB_preheaderi_144:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_145;
LEGUP_F_main_BB_preheaderi_145:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_146;
LEGUP_F_main_BB_preheaderi_146:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_147;
LEGUP_F_main_BB_preheaderi_147:
		next_state_r2 = LEGUP_function_call_148;
LEGUP_F_main_BB_preheaderi_149:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_150;
LEGUP_F_main_BB_preheaderi_150:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_151;
LEGUP_F_main_BB_preheaderi_151:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_152;
LEGUP_F_main_BB_preheaderi_152:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_153;
LEGUP_F_main_BB_preheaderi_153:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_154;
LEGUP_F_main_BB_preheaderi_154:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_155;
LEGUP_F_main_BB_preheaderi_155:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_156;
LEGUP_F_main_BB_preheaderi_156:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_157;
LEGUP_F_main_BB_preheaderi_157:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_158;
LEGUP_F_main_BB_preheaderi_158:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_159;
LEGUP_F_main_BB_preheaderi_159:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_160;
LEGUP_F_main_BB_preheaderi_160:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_161;
LEGUP_F_main_BB_preheaderi_161:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_162;
LEGUP_F_main_BB_preheaderi_162:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_163;
LEGUP_F_main_BB_preheaderi_163:
		next_state_r2 = LEGUP_function_call_164;
LEGUP_F_main_BB_preheaderi_165:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_166;
LEGUP_F_main_BB_preheaderi_166:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_167;
LEGUP_F_main_BB_preheaderi_167:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_168;
LEGUP_F_main_BB_preheaderi_168:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_169;
LEGUP_F_main_BB_preheaderi_169:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_170;
LEGUP_F_main_BB_preheaderi_170:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_171;
LEGUP_F_main_BB_preheaderi_171:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_172;
LEGUP_F_main_BB_preheaderi_172:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_173;
LEGUP_F_main_BB_preheaderi_173:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_174;
LEGUP_F_main_BB_preheaderi_174:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_175;
LEGUP_F_main_BB_preheaderi_175:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_176;
LEGUP_F_main_BB_preheaderi_176:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_177;
LEGUP_F_main_BB_preheaderi_177:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_178;
LEGUP_F_main_BB_preheaderi_178:
	if ((main_preheaderi_exitcond5_r2 == 1'd1))
		next_state_r2 = LEGUP_F_main_BB_adpcm_mainexitpreheader_179;
	else if ((main_preheaderi_exitcond5_r2 == 1'd0))
		next_state_r2 = LEGUP_F_main_BB_preheaderi_107;
LEGUP_F_main_BB_preheaderipreheader_104:
		next_state_r2 = LEGUP_F_main_BB_preheaderipreheader_105;
LEGUP_F_main_BB_preheaderipreheader_105:
		next_state_r2 = LEGUP_F_main_BB_preheaderipreheader_106;
LEGUP_F_main_BB_preheaderipreheader_106:
		next_state_r2 = LEGUP_F_main_BB_preheaderi_107;
LEGUP_F_main_BB_preheaderpreheader_183:
		next_state_r2 = LEGUP_F_main_BB_preheader_184;
LEGUP_F_main_BB_quantlexiti_54:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_55;
LEGUP_F_main_BB_quantlexiti_55:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_56;
LEGUP_F_main_BB_quantlexiti_56:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_57;
LEGUP_F_main_BB_quantlexiti_57:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_58;
LEGUP_F_main_BB_quantlexiti_58:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_59;
LEGUP_F_main_BB_quantlexiti_59:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_60;
LEGUP_F_main_BB_quantlexiti_60:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_61;
LEGUP_F_main_BB_quantlexiti_61:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_62;
LEGUP_F_main_BB_quantlexiti_62:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_63;
LEGUP_F_main_BB_quantlexiti_63:
		next_state_r2 = LEGUP_function_call_64;
LEGUP_F_main_BB_quantlexiti_65:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_66;
LEGUP_F_main_BB_quantlexiti_66:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_67;
LEGUP_F_main_BB_quantlexiti_67:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_68;
LEGUP_F_main_BB_quantlexiti_68:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_69;
LEGUP_F_main_BB_quantlexiti_69:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_70;
LEGUP_F_main_BB_quantlexiti_70:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_71;
LEGUP_F_main_BB_quantlexiti_71:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_72;
LEGUP_F_main_BB_quantlexiti_72:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_73;
LEGUP_F_main_BB_quantlexiti_73:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_74;
LEGUP_F_main_BB_quantlexiti_74:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_75;
LEGUP_F_main_BB_quantlexiti_75:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_76;
LEGUP_F_main_BB_quantlexiti_76:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_77;
LEGUP_F_main_BB_quantlexiti_77:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_78;
LEGUP_F_main_BB_quantlexiti_78:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_79;
LEGUP_F_main_BB_quantlexiti_79:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_80;
LEGUP_F_main_BB_quantlexiti_80:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_81;
LEGUP_F_main_BB_quantlexiti_81:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_82;
LEGUP_F_main_BB_quantlexiti_82:
		next_state_r2 = LEGUP_function_call_83;
LEGUP_F_main_BB_quantlexiti_84:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_85;
LEGUP_F_main_BB_quantlexiti_85:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_86;
LEGUP_F_main_BB_quantlexiti_86:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_87;
LEGUP_F_main_BB_quantlexiti_87:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_88;
LEGUP_F_main_BB_quantlexiti_88:
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_89;
LEGUP_F_main_BB_quantlexiti_89:
	if ((main_quantlexiti_236_reg_r2 == 1'd1))
		next_state_r2 = LEGUP_F_main_BB_encodeexit_crit_edge_90;
	else if ((main_quantlexiti_236_reg_r2 == 1'd0))
		next_state_r2 = LEGUP_F_main_BB_preheaderipreheader_104;
LEGUP_function_call_148:
	if ((upzero_finish_final_r2 == 1'd1))
		next_state_r2 = LEGUP_F_main_BB_preheaderi_149;
LEGUP_function_call_164:
	if ((upzero_finish_final_r2 == 1'd1))
		next_state_r2 = LEGUP_F_main_BB_preheaderi_165;
LEGUP_function_call_64:
	if ((upzero_finish_final_r2 == 1'd1))
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_65;
LEGUP_function_call_83:
	if ((upzero_finish_final_r2 == 1'd1))
		next_state_r2 = LEGUP_F_main_BB_quantlexiti_84;
default:
	next_state_r2 = cur_state_r2;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB__0_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar13_r0 = 64'd0;
	end
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB__2_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_indvar13_r0 = main_2_indvarnext14_reg_r0;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB__0_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar13_r1 = 64'd0;
	end
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB__2_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_indvar13_r1 = main_2_indvarnext14_reg_r1;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB__0_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar13_r2 = 64'd0;
	end
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB__2_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_indvar13_r2 = main_2_indvarnext14_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_1_indvar13_reg_r0 <= 0;
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB__0_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar13_reg_r0 <= main_1_indvar13_r0;
		if (start == 1'b0 && ^(main_1_indvar13_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar13_reg_r0"); $finish; end
	end
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB__2_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar13_reg_r0 <= main_1_indvar13_r0;
		if (start == 1'b0 && ^(main_1_indvar13_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar13_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_1_indvar13_reg_r1 <= 0;
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB__0_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar13_reg_r1 <= main_1_indvar13_r1;
		if (start == 1'b0 && ^(main_1_indvar13_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar13_reg_r1"); $finish; end
	end
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB__2_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar13_reg_r1 <= main_1_indvar13_r1;
		if (start == 1'b0 && ^(main_1_indvar13_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar13_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_1_indvar13_reg_r2 <= 0;
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB__0_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar13_reg_r2 <= main_1_indvar13_r2;
		if (start == 1'b0 && ^(main_1_indvar13_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar13_reg_r2"); $finish; end
	end
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB__2_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar13_reg_r2 <= main_1_indvar13_r2;
		if (start == 1'b0 && ^(main_1_indvar13_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar13_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond15 = icmp eq i64 %indvar13, 24*/
		main_1_exitcond15_r0 = (main_1_indvar13_reg_r0 == 64'd24);
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond15 = icmp eq i64 %indvar13, 24*/
		main_1_exitcond15_r1 = (main_1_indvar13_reg_r1 == 64'd24);
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond15 = icmp eq i64 %indvar13, 24*/
		main_1_exitcond15_r2 = (main_1_indvar13_reg_r2 == 64'd24);
end
always @(*) begin
	/* main: %2*/
	/*   %3 = shl i64 %indvar13, 2*/
		main_2_3_r0 = (main_1_indvar13_reg_r0 <<< (64'd2 % 64'd64));
end
always @(*) begin
	/* main: %2*/
	/*   %3 = shl i64 %indvar13, 2*/
		main_2_3_r1 = (main_1_indvar13_reg_r1 <<< (64'd2 % 64'd64));
end
always @(*) begin
	/* main: %2*/
	/*   %3 = shl i64 %indvar13, 2*/
		main_2_3_r2 = (main_1_indvar13_reg_r2 <<< (64'd2 % 64'd64));
end
always @(*) begin
	/* main: %2*/
	/*   %4 = add i64 %3, zext (i32 ptrtoint ([24 x i32]* @tqmf to i32) to i64)*/
		main_2_4_r0 = main_signed_add_64_0_r0;
end
always @(*) begin
	/* main: %2*/
	/*   %4 = add i64 %3, zext (i32 ptrtoint ([24 x i32]* @tqmf to i32) to i64)*/
		main_2_4_r1 = main_signed_add_64_0_r1;
end
always @(*) begin
	/* main: %2*/
	/*   %4 = add i64 %3, zext (i32 ptrtoint ([24 x i32]* @tqmf to i32) to i64)*/
		main_2_4_r2 = main_signed_add_64_0_r2;
end
always @(*) begin
	/* main: %2*/
	/*   %5 = trunc i64 %4 to i32*/
		main_2_5_r0 = main_2_4_r0[31:0];
end
always @(*) begin
	/* main: %2*/
	/*   %5 = trunc i64 %4 to i32*/
		main_2_5_r1 = main_2_4_r1[31:0];
end
always @(*) begin
	/* main: %2*/
	/*   %5 = trunc i64 %4 to i32*/
		main_2_5_r2 = main_2_4_r2[31:0];
end
always @(*) begin
	/* main: %2*/
	/*   %s.i.0 = inttoptr i32 %5 to i32**/
		main_2_si0_r0 = main_2_5_r0;
end
always @(*) begin
	/* main: %2*/
	/*   %s.i.0 = inttoptr i32 %5 to i32**/
		main_2_si0_r1 = main_2_5_r1;
end
always @(*) begin
	/* main: %2*/
	/*   %s.i.0 = inttoptr i32 %5 to i32**/
		main_2_si0_r2 = main_2_5_r2;
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next14 = add i64 %indvar13, 1*/
		main_2_indvarnext14_r0 = main_signed_add_64_1_r0;
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next14 = add i64 %indvar13, 1*/
		main_2_indvarnext14_r1 = main_signed_add_64_1_r1;
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next14 = add i64 %indvar13, 1*/
		main_2_indvarnext14_r2 = main_signed_add_64_1_r2;
end
always @(posedge clk) begin
	if (reset)
		main_2_indvarnext14_reg_r0 <= 0;
	/* main: %2*/
	/*   %indvar.next14 = add i64 %indvar13, 1*/
	else if((cur_state_v0 == LEGUP_F_main_BB__2_28)) begin
		main_2_indvarnext14_reg_r0 <= main_2_indvarnext14_r0;
		if (start == 1'b0 && ^(main_2_indvarnext14_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_indvarnext14_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_2_indvarnext14_reg_r1 <= 0;
	/* main: %2*/
	/*   %indvar.next14 = add i64 %indvar13, 1*/
	else if((cur_state_v1 == LEGUP_F_main_BB__2_28)) begin
		main_2_indvarnext14_reg_r1 <= main_2_indvarnext14_r1;
		if (start == 1'b0 && ^(main_2_indvarnext14_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_indvarnext14_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_2_indvarnext14_reg_r2 <= 0;
	/* main: %2*/
	/*   %indvar.next14 = add i64 %indvar13, 1*/
	else if((cur_state_v2 == LEGUP_F_main_BB__2_28)) begin
		main_2_indvarnext14_reg_r2 <= main_2_indvarnext14_r2;
		if (start == 1'b0 && ^(main_2_indvarnext14_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_indvarnext14_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar9_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_indvar9_r0 = main_encodeexit_crit_edge_indvarnext10_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar9_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_indvar9_r1 = main_encodeexit_crit_edge_indvarnext10_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar9_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_indvar9_r2 = main_encodeexit_crit_edge_indvarnext10_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_indvar9_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar9_reg_r0 <= main_legup_memset_4_i64exit_indvar9_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_indvar9_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_indvar9_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar9_reg_r0 <= main_legup_memset_4_i64exit_indvar9_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_indvar9_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_indvar9_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_indvar9_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar9_reg_r1 <= main_legup_memset_4_i64exit_indvar9_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_indvar9_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_indvar9_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar9_reg_r1 <= main_legup_memset_4_i64exit_indvar9_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_indvar9_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_indvar9_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_indvar9_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar9_reg_r2 <= main_legup_memset_4_i64exit_indvar9_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_indvar9_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_indvar9_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar9_reg_r2 <= main_legup_memset_4_i64exit_indvar9_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_indvar9_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_indvar9_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_6_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_6_r0 = main_encodeexit_crit_edge_phitmp1_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_6_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_6_r1 = main_encodeexit_crit_edge_phitmp1_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_6_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_6_r2 = main_encodeexit_crit_edge_phitmp1_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_6_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_6_reg_r0 <= main_legup_memset_4_i64exit_6_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_6_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_6_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_6_reg_r0 <= main_legup_memset_4_i64exit_6_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_6_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_6_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_6_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_6_reg_r1 <= main_legup_memset_4_i64exit_6_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_6_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_6_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_6_reg_r1 <= main_legup_memset_4_i64exit_6_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_6_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_6_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_6_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_6_reg_r2 <= main_legup_memset_4_i64exit_6_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_6_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_6_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_6_reg_r2 <= main_legup_memset_4_i64exit_6_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_6_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_6_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_7_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_7_r0 = main_encodeexit_crit_edge_phitmp_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_7_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_7_r1 = main_encodeexit_crit_edge_phitmp_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_7_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_7_r2 = main_encodeexit_crit_edge_phitmp_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_7_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_7_reg_r0 <= main_legup_memset_4_i64exit_7_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_7_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_7_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_7_reg_r0 <= main_legup_memset_4_i64exit_7_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_7_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_7_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_7_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_7_reg_r1 <= main_legup_memset_4_i64exit_7_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_7_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_7_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_7_reg_r1 <= main_legup_memset_4_i64exit_7_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_7_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_7_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_7_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_7_reg_r2 <= main_legup_memset_4_i64exit_7_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_7_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_7_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_7_reg_r2 <= main_legup_memset_4_i64exit_7_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_7_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_7_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre57, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_8_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre57, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_8_r0 = main_encodeexit_crit_edge_pre57_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre57, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_8_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre57, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_8_r1 = main_encodeexit_crit_edge_pre57_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre57, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_8_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre57, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_8_r2 = main_encodeexit_crit_edge_pre57_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_8_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre57, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_8_reg_r0 <= main_legup_memset_4_i64exit_8_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_8_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_8_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre57, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_8_reg_r0 <= main_legup_memset_4_i64exit_8_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_8_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_8_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_8_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre57, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_8_reg_r1 <= main_legup_memset_4_i64exit_8_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_8_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_8_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre57, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_8_reg_r1 <= main_legup_memset_4_i64exit_8_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_8_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_8_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_8_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre57, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_8_reg_r2 <= main_legup_memset_4_i64exit_8_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_8_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_8_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre57, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_8_reg_r2 <= main_legup_memset_4_i64exit_8_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_8_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_8_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre56, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_9_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre56, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_9_r0 = main_encodeexit_crit_edge_pre56_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre56, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_9_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre56, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_9_r1 = main_encodeexit_crit_edge_pre56_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre56, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_9_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre56, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_9_r2 = main_encodeexit_crit_edge_pre56_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_9_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre56, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_9_reg_r0 <= main_legup_memset_4_i64exit_9_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_9_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_9_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre56, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_9_reg_r0 <= main_legup_memset_4_i64exit_9_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_9_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_9_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_9_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre56, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_9_reg_r1 <= main_legup_memset_4_i64exit_9_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_9_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_9_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre56, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_9_reg_r1 <= main_legup_memset_4_i64exit_9_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_9_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_9_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_9_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre56, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_9_reg_r2 <= main_legup_memset_4_i64exit_9_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_9_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_9_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre56, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_9_reg_r2 <= main_legup_memset_4_i64exit_9_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_9_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_9_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre55, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_10_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre55, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_10_r0 = main_encodeexit_crit_edge_pre55_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre55, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_10_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre55, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_10_r1 = main_encodeexit_crit_edge_pre55_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre55, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_10_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre55, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_10_r2 = main_encodeexit_crit_edge_pre55_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_10_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre55, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_10_reg_r0 <= main_legup_memset_4_i64exit_10_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_10_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre55, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_10_reg_r0 <= main_legup_memset_4_i64exit_10_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_10_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre55, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_10_reg_r1 <= main_legup_memset_4_i64exit_10_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_10_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre55, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_10_reg_r1 <= main_legup_memset_4_i64exit_10_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_10_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre55, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_10_reg_r2 <= main_legup_memset_4_i64exit_10_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_10_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre55, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_10_reg_r2 <= main_legup_memset_4_i64exit_10_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre54, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_11_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre54, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_11_r0 = main_encodeexit_crit_edge_pre54_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre54, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_11_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre54, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_11_r1 = main_encodeexit_crit_edge_pre54_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre54, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_11_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre54, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_11_r2 = main_encodeexit_crit_edge_pre54_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_11_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre54, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_11_reg_r0 <= main_legup_memset_4_i64exit_11_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_11_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_11_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre54, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_11_reg_r0 <= main_legup_memset_4_i64exit_11_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_11_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_11_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_11_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre54, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_11_reg_r1 <= main_legup_memset_4_i64exit_11_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_11_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_11_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre54, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_11_reg_r1 <= main_legup_memset_4_i64exit_11_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_11_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_11_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_11_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre54, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_11_reg_r2 <= main_legup_memset_4_i64exit_11_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_11_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_11_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre54, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_11_reg_r2 <= main_legup_memset_4_i64exit_11_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_11_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_11_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre53, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_12_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre53, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_12_r0 = main_encodeexit_crit_edge_pre53_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre53, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_12_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre53, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_12_r1 = main_encodeexit_crit_edge_pre53_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre53, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_12_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre53, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_12_r2 = main_encodeexit_crit_edge_pre53_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_12_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre53, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_12_reg_r0 <= main_legup_memset_4_i64exit_12_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_12_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_12_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre53, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_12_reg_r0 <= main_legup_memset_4_i64exit_12_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_12_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_12_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_12_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre53, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_12_reg_r1 <= main_legup_memset_4_i64exit_12_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_12_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_12_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre53, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_12_reg_r1 <= main_legup_memset_4_i64exit_12_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_12_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_12_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_12_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre53, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_12_reg_r2 <= main_legup_memset_4_i64exit_12_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_12_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_12_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre53, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_12_reg_r2 <= main_legup_memset_4_i64exit_12_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_12_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_12_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre52, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_13_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre52, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_13_r0 = main_encodeexit_crit_edge_pre52_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre52, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_13_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre52, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_13_r1 = main_encodeexit_crit_edge_pre52_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre52, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_13_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre52, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_13_r2 = main_encodeexit_crit_edge_pre52_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_13_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre52, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_13_reg_r0 <= main_legup_memset_4_i64exit_13_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_13_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_13_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre52, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_13_reg_r0 <= main_legup_memset_4_i64exit_13_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_13_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_13_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_13_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre52, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_13_reg_r1 <= main_legup_memset_4_i64exit_13_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_13_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_13_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre52, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_13_reg_r1 <= main_legup_memset_4_i64exit_13_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_13_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_13_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_13_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre52, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_13_reg_r2 <= main_legup_memset_4_i64exit_13_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_13_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_13_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre52, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_13_reg_r2 <= main_legup_memset_4_i64exit_13_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_13_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_13_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre51, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_14_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre51, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_14_r0 = main_encodeexit_crit_edge_pre51_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre51, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_14_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre51, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_14_r1 = main_encodeexit_crit_edge_pre51_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre51, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_14_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre51, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_14_r2 = main_encodeexit_crit_edge_pre51_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_14_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre51, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_14_reg_r0 <= main_legup_memset_4_i64exit_14_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_14_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_14_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre51, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_14_reg_r0 <= main_legup_memset_4_i64exit_14_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_14_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_14_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_14_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre51, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_14_reg_r1 <= main_legup_memset_4_i64exit_14_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_14_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_14_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre51, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_14_reg_r1 <= main_legup_memset_4_i64exit_14_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_14_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_14_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_14_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre51, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_14_reg_r2 <= main_legup_memset_4_i64exit_14_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_14_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_14_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre51, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_14_reg_r2 <= main_legup_memset_4_i64exit_14_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_14_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_14_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre50, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_15_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre50, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_15_r0 = main_encodeexit_crit_edge_pre50_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre50, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_15_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre50, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_15_r1 = main_encodeexit_crit_edge_pre50_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre50, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_15_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre50, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_15_r2 = main_encodeexit_crit_edge_pre50_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_15_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre50, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_15_reg_r0 <= main_legup_memset_4_i64exit_15_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_15_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_15_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre50, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_15_reg_r0 <= main_legup_memset_4_i64exit_15_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_15_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_15_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_15_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre50, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_15_reg_r1 <= main_legup_memset_4_i64exit_15_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_15_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_15_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre50, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_15_reg_r1 <= main_legup_memset_4_i64exit_15_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_15_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_15_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_15_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre50, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_15_reg_r2 <= main_legup_memset_4_i64exit_15_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_15_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_15_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre50, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_15_reg_r2 <= main_legup_memset_4_i64exit_15_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_15_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_15_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre49, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_16_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre49, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_16_r0 = main_encodeexit_crit_edge_pre49_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre49, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_16_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre49, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_16_r1 = main_encodeexit_crit_edge_pre49_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre49, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_16_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre49, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_16_r2 = main_encodeexit_crit_edge_pre49_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_16_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre49, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_16_reg_r0 <= main_legup_memset_4_i64exit_16_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_16_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_16_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre49, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_16_reg_r0 <= main_legup_memset_4_i64exit_16_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_16_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_16_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_16_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre49, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_16_reg_r1 <= main_legup_memset_4_i64exit_16_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_16_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_16_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre49, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_16_reg_r1 <= main_legup_memset_4_i64exit_16_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_16_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_16_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_16_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre49, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_16_reg_r2 <= main_legup_memset_4_i64exit_16_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_16_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_16_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre49, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_16_reg_r2 <= main_legup_memset_4_i64exit_16_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_16_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_16_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre48, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_17_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre48, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_17_r0 = main_encodeexit_crit_edge_pre48_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre48, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_17_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre48, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_17_r1 = main_encodeexit_crit_edge_pre48_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre48, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_17_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre48, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_17_r2 = main_encodeexit_crit_edge_pre48_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_17_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre48, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_17_reg_r0 <= main_legup_memset_4_i64exit_17_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_17_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_17_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre48, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_17_reg_r0 <= main_legup_memset_4_i64exit_17_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_17_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_17_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_17_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre48, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_17_reg_r1 <= main_legup_memset_4_i64exit_17_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_17_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_17_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre48, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_17_reg_r1 <= main_legup_memset_4_i64exit_17_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_17_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_17_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_17_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre48, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_17_reg_r2 <= main_legup_memset_4_i64exit_17_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_17_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_17_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre48, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_17_reg_r2 <= main_legup_memset_4_i64exit_17_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_17_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_17_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre47, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_18_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre47, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_18_r0 = main_encodeexit_crit_edge_pre47_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre47, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_18_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre47, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_18_r1 = main_encodeexit_crit_edge_pre47_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre47, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_18_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre47, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_18_r2 = main_encodeexit_crit_edge_pre47_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_18_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre47, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_18_reg_r0 <= main_legup_memset_4_i64exit_18_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_18_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_18_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre47, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_18_reg_r0 <= main_legup_memset_4_i64exit_18_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_18_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_18_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_18_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre47, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_18_reg_r1 <= main_legup_memset_4_i64exit_18_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_18_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_18_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre47, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_18_reg_r1 <= main_legup_memset_4_i64exit_18_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_18_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_18_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_18_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre47, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_18_reg_r2 <= main_legup_memset_4_i64exit_18_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_18_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_18_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre47, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_18_reg_r2 <= main_legup_memset_4_i64exit_18_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_18_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_18_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre46, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_19_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre46, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_19_r0 = main_encodeexit_crit_edge_pre46_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre46, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_19_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre46, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_19_r1 = main_encodeexit_crit_edge_pre46_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre46, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_19_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre46, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_19_r2 = main_encodeexit_crit_edge_pre46_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_19_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre46, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_19_reg_r0 <= main_legup_memset_4_i64exit_19_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_19_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_19_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre46, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_19_reg_r0 <= main_legup_memset_4_i64exit_19_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_19_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_19_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_19_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre46, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_19_reg_r1 <= main_legup_memset_4_i64exit_19_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_19_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_19_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre46, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_19_reg_r1 <= main_legup_memset_4_i64exit_19_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_19_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_19_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_19_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre46, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_19_reg_r2 <= main_legup_memset_4_i64exit_19_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_19_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_19_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre46, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_19_reg_r2 <= main_legup_memset_4_i64exit_19_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_19_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_19_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre45, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_20_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre45, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_20_r0 = main_encodeexit_crit_edge_pre45_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre45, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_20_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre45, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_20_r1 = main_encodeexit_crit_edge_pre45_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre45, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_20_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre45, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_20_r2 = main_encodeexit_crit_edge_pre45_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_20_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre45, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_20_reg_r0 <= main_legup_memset_4_i64exit_20_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_20_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre45, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_20_reg_r0 <= main_legup_memset_4_i64exit_20_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_20_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_20_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre45, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_20_reg_r1 <= main_legup_memset_4_i64exit_20_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_20_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre45, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_20_reg_r1 <= main_legup_memset_4_i64exit_20_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_20_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_20_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre45, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_20_reg_r2 <= main_legup_memset_4_i64exit_20_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_20_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre45, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_20_reg_r2 <= main_legup_memset_4_i64exit_20_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_20_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre44, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_21_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre44, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_21_r0 = main_encodeexit_crit_edge_pre44_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre44, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_21_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre44, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_21_r1 = main_encodeexit_crit_edge_pre44_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre44, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_21_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre44, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_21_r2 = main_encodeexit_crit_edge_pre44_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_21_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre44, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_21_reg_r0 <= main_legup_memset_4_i64exit_21_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_21_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_21_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre44, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_21_reg_r0 <= main_legup_memset_4_i64exit_21_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_21_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_21_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_21_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre44, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_21_reg_r1 <= main_legup_memset_4_i64exit_21_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_21_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_21_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre44, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_21_reg_r1 <= main_legup_memset_4_i64exit_21_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_21_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_21_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_21_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre44, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_21_reg_r2 <= main_legup_memset_4_i64exit_21_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_21_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_21_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre44, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_21_reg_r2 <= main_legup_memset_4_i64exit_21_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_21_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_21_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre43, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_22_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre43, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_22_r0 = main_encodeexit_crit_edge_pre43_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre43, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_22_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre43, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_22_r1 = main_encodeexit_crit_edge_pre43_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre43, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_22_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre43, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_22_r2 = main_encodeexit_crit_edge_pre43_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_22_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre43, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_22_reg_r0 <= main_legup_memset_4_i64exit_22_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_22_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_22_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre43, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_22_reg_r0 <= main_legup_memset_4_i64exit_22_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_22_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_22_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_22_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre43, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_22_reg_r1 <= main_legup_memset_4_i64exit_22_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_22_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_22_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre43, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_22_reg_r1 <= main_legup_memset_4_i64exit_22_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_22_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_22_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_22_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre43, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_22_reg_r2 <= main_legup_memset_4_i64exit_22_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_22_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_22_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre43, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_22_reg_r2 <= main_legup_memset_4_i64exit_22_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_22_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_22_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre42, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_23_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre42, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_23_r0 = main_encodeexit_crit_edge_pre42_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre42, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_23_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre42, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_23_r1 = main_encodeexit_crit_edge_pre42_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre42, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_23_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre42, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_23_r2 = main_encodeexit_crit_edge_pre42_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_23_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre42, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_23_reg_r0 <= main_legup_memset_4_i64exit_23_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_23_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_23_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre42, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_23_reg_r0 <= main_legup_memset_4_i64exit_23_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_23_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_23_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_23_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre42, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_23_reg_r1 <= main_legup_memset_4_i64exit_23_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_23_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_23_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre42, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_23_reg_r1 <= main_legup_memset_4_i64exit_23_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_23_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_23_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_23_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre42, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_23_reg_r2 <= main_legup_memset_4_i64exit_23_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_23_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_23_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre42, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_23_reg_r2 <= main_legup_memset_4_i64exit_23_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_23_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_23_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre41, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_24_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre41, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_24_r0 = main_encodeexit_crit_edge_pre41_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre41, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_24_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre41, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_24_r1 = main_encodeexit_crit_edge_pre41_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre41, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_24_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre41, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_24_r2 = main_encodeexit_crit_edge_pre41_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_24_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre41, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_24_reg_r0 <= main_legup_memset_4_i64exit_24_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_24_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_24_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre41, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_24_reg_r0 <= main_legup_memset_4_i64exit_24_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_24_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_24_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_24_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre41, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_24_reg_r1 <= main_legup_memset_4_i64exit_24_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_24_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_24_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre41, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_24_reg_r1 <= main_legup_memset_4_i64exit_24_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_24_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_24_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_24_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre41, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_24_reg_r2 <= main_legup_memset_4_i64exit_24_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_24_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_24_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre41, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_24_reg_r2 <= main_legup_memset_4_i64exit_24_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_24_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_24_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre40, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_25_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre40, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_25_r0 = main_encodeexit_crit_edge_pre40_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre40, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_25_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre40, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_25_r1 = main_encodeexit_crit_edge_pre40_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre40, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_25_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre40, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_25_r2 = main_encodeexit_crit_edge_pre40_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_25_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre40, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_25_reg_r0 <= main_legup_memset_4_i64exit_25_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_25_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_25_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre40, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_25_reg_r0 <= main_legup_memset_4_i64exit_25_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_25_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_25_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_25_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre40, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_25_reg_r1 <= main_legup_memset_4_i64exit_25_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_25_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_25_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre40, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_25_reg_r1 <= main_legup_memset_4_i64exit_25_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_25_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_25_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_25_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre40, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_25_reg_r2 <= main_legup_memset_4_i64exit_25_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_25_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_25_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre40, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_25_reg_r2 <= main_legup_memset_4_i64exit_25_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_25_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_25_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre39, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_26_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre39, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_26_r0 = main_encodeexit_crit_edge_pre39_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre39, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_26_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre39, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_26_r1 = main_encodeexit_crit_edge_pre39_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre39, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_26_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre39, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_26_r2 = main_encodeexit_crit_edge_pre39_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_26_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre39, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_26_reg_r0 <= main_legup_memset_4_i64exit_26_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_26_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_26_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre39, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_26_reg_r0 <= main_legup_memset_4_i64exit_26_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_26_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_26_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_26_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre39, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_26_reg_r1 <= main_legup_memset_4_i64exit_26_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_26_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_26_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre39, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_26_reg_r1 <= main_legup_memset_4_i64exit_26_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_26_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_26_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_26_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre39, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_26_reg_r2 <= main_legup_memset_4_i64exit_26_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_26_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_26_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre39, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_26_reg_r2 <= main_legup_memset_4_i64exit_26_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_26_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_26_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre38, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_27_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre38, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_27_r0 = main_encodeexit_crit_edge_pre38_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre38, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_27_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre38, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_27_r1 = main_encodeexit_crit_edge_pre38_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre38, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_27_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre38, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_27_r2 = main_encodeexit_crit_edge_pre38_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_27_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre38, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_27_reg_r0 <= main_legup_memset_4_i64exit_27_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_27_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_27_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre38, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_27_reg_r0 <= main_legup_memset_4_i64exit_27_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_27_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_27_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_27_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre38, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_27_reg_r1 <= main_legup_memset_4_i64exit_27_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_27_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_27_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre38, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_27_reg_r1 <= main_legup_memset_4_i64exit_27_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_27_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_27_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_27_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre38, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_27_reg_r2 <= main_legup_memset_4_i64exit_27_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_27_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_27_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre38, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_27_reg_r2 <= main_legup_memset_4_i64exit_27_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_27_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_27_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre37, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_28_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre37, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_28_r0 = main_encodeexit_crit_edge_pre37_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre37, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_28_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre37, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_28_r1 = main_encodeexit_crit_edge_pre37_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre37, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_28_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre37, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_28_r2 = main_encodeexit_crit_edge_pre37_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_28_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre37, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_28_reg_r0 <= main_legup_memset_4_i64exit_28_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_28_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_28_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre37, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_28_reg_r0 <= main_legup_memset_4_i64exit_28_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_28_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_28_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_28_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre37, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_28_reg_r1 <= main_legup_memset_4_i64exit_28_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_28_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_28_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre37, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_28_reg_r1 <= main_legup_memset_4_i64exit_28_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_28_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_28_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_28_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre37, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_28_reg_r2 <= main_legup_memset_4_i64exit_28_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_28_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_28_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre37, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_28_reg_r2 <= main_legup_memset_4_i64exit_28_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_28_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_28_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_29_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_29_r0 = main_encodeexit_crit_edge_pre_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_29_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_29_r1 = main_encodeexit_crit_edge_pre_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_29_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_29_r2 = main_encodeexit_crit_edge_pre_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_29_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_29_reg_r0 <= main_legup_memset_4_i64exit_29_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_29_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_29_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_29_reg_r0 <= main_legup_memset_4_i64exit_29_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_29_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_29_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_29_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_29_reg_r1 <= main_legup_memset_4_i64exit_29_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_29_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_29_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_29_reg_r1 <= main_legup_memset_4_i64exit_29_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_29_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_29_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_29_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_29_reg_r2 <= main_legup_memset_4_i64exit_29_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_29_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_29_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_29_reg_r2 <= main_legup_memset_4_i64exit_29_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_29_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_29_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph20_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ph20_r0 = main_legup_memset_4_i64exit_ph10_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph20_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ph20_r1 = main_legup_memset_4_i64exit_ph10_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph20_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ph20_r2 = main_legup_memset_4_i64exit_ph10_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_ph20_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph20_reg_r0 <= main_legup_memset_4_i64exit_ph20_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph20_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph20_reg_r0 <= main_legup_memset_4_i64exit_ph20_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph20_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_ph20_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph20_reg_r1 <= main_legup_memset_4_i64exit_ph20_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph20_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph20_reg_r1 <= main_legup_memset_4_i64exit_ph20_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph20_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_ph20_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph20_reg_r2 <= main_legup_memset_4_i64exit_ph20_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph20_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph20_reg_r2 <= main_legup_memset_4_i64exit_ph20_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph20_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %209, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph10_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %209, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ph10_r0 = main_quantlexiti_209_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %209, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph10_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %209, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ph10_r1 = main_quantlexiti_209_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %209, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph10_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %209, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ph10_r2 = main_quantlexiti_209_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_ph10_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %209, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph10_reg_r0 <= main_legup_memset_4_i64exit_ph10_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph10_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %209, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph10_reg_r0 <= main_legup_memset_4_i64exit_ph10_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_ph10_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %209, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph10_reg_r1 <= main_legup_memset_4_i64exit_ph10_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph10_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %209, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph10_reg_r1 <= main_legup_memset_4_i64exit_ph10_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_ph10_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %209, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph10_reg_r2 <= main_legup_memset_4_i64exit_ph10_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph10_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %209, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph10_reg_r2 <= main_legup_memset_4_i64exit_ph10_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbh0_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_nbh0_r0 = main_encodeexit_crit_edge_phitmp5_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbh0_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_nbh0_r1 = main_encodeexit_crit_edge_phitmp5_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbh0_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_nbh0_r2 = main_encodeexit_crit_edge_phitmp5_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_nbh0_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbh0_reg_r0 <= main_legup_memset_4_i64exit_nbh0_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbh0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbh0_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbh0_reg_r0 <= main_legup_memset_4_i64exit_nbh0_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbh0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbh0_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_nbh0_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbh0_reg_r1 <= main_legup_memset_4_i64exit_nbh0_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbh0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbh0_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbh0_reg_r1 <= main_legup_memset_4_i64exit_nbh0_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbh0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbh0_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_nbh0_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbh0_reg_r2 <= main_legup_memset_4_i64exit_nbh0_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbh0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbh0_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbh0_reg_r2 <= main_legup_memset_4_i64exit_nbh0_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbh0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbh0_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %242, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_deth0_r0 = 32'd8;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %242, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_deth0_r0 = main_encodeexit_crit_edge_242_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %242, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_deth0_r1 = 32'd8;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %242, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_deth0_r1 = main_encodeexit_crit_edge_242_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %242, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_deth0_r2 = 32'd8;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %242, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_deth0_r2 = main_encodeexit_crit_edge_242_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_deth0_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %242, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_deth0_reg_r0 <= main_legup_memset_4_i64exit_deth0_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_deth0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_deth0_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %242, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_deth0_reg_r0 <= main_legup_memset_4_i64exit_deth0_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_deth0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_deth0_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_deth0_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %242, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_deth0_reg_r1 <= main_legup_memset_4_i64exit_deth0_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_deth0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_deth0_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %242, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_deth0_reg_r1 <= main_legup_memset_4_i64exit_deth0_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_deth0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_deth0_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_deth0_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %242, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_deth0_reg_r2 <= main_legup_memset_4_i64exit_deth0_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_deth0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_deth0_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %242, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_deth0_reg_r2 <= main_legup_memset_4_i64exit_deth0_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_deth0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_deth0_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i19, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah20_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i19, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ah20_r0 = main_quantlexiti_ii19_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i19, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah20_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i19, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ah20_r1 = main_quantlexiti_ii19_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i19, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah20_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i19, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ah20_r2 = main_quantlexiti_ii19_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_ah20_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i19, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah20_reg_r0 <= main_legup_memset_4_i64exit_ah20_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah20_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i19, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah20_reg_r0 <= main_legup_memset_4_i64exit_ah20_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah20_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_ah20_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i19, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah20_reg_r1 <= main_legup_memset_4_i64exit_ah20_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah20_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i19, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah20_reg_r1 <= main_legup_memset_4_i64exit_ah20_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah20_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_ah20_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i19, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah20_reg_r2 <= main_legup_memset_4_i64exit_ah20_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah20_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i19, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah20_reg_r2 <= main_legup_memset_4_i64exit_ah20_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah20_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh20_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rh20_r0 = main_legup_memset_4_i64exit_rh10_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh20_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rh20_r1 = main_legup_memset_4_i64exit_rh10_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh20_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rh20_r2 = main_legup_memset_4_i64exit_rh10_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_rh20_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh20_reg_r0 <= main_legup_memset_4_i64exit_rh20_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh20_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh20_reg_r0 <= main_legup_memset_4_i64exit_rh20_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh20_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_rh20_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh20_reg_r1 <= main_legup_memset_4_i64exit_rh20_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh20_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh20_reg_r1 <= main_legup_memset_4_i64exit_rh20_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh20_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_rh20_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh20_reg_r2 <= main_legup_memset_4_i64exit_rh20_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh20_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh20_reg_r2 <= main_legup_memset_4_i64exit_rh20_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh20_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i22, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah10_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i22, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ah10_r0 = main_encodeexit_crit_edge_apl12ii22_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i22, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah10_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i22, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ah10_r1 = main_encodeexit_crit_edge_apl12ii22_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i22, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah10_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i22, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ah10_r2 = main_encodeexit_crit_edge_apl12ii22_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_ah10_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i22, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah10_reg_r0 <= main_legup_memset_4_i64exit_ah10_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah10_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i22, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah10_reg_r0 <= main_legup_memset_4_i64exit_ah10_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_ah10_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i22, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah10_reg_r1 <= main_legup_memset_4_i64exit_ah10_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah10_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i22, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah10_reg_r1 <= main_legup_memset_4_i64exit_ah10_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_ah10_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i22, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah10_reg_r2 <= main_legup_memset_4_i64exit_ah10_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah10_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i22, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah10_reg_r2 <= main_legup_memset_4_i64exit_ah10_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %237, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh10_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %237, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rh10_r0 = main_encodeexit_crit_edge_237_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %237, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh10_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %237, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rh10_r1 = main_encodeexit_crit_edge_237_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %237, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh10_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %237, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rh10_r2 = main_encodeexit_crit_edge_237_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_rh10_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %237, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh10_reg_r0 <= main_legup_memset_4_i64exit_rh10_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh10_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %237, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh10_reg_r0 <= main_legup_memset_4_i64exit_rh10_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_rh10_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %237, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh10_reg_r1 <= main_legup_memset_4_i64exit_rh10_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh10_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %237, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh10_reg_r1 <= main_legup_memset_4_i64exit_rh10_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_rh10_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %237, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh10_reg_r2 <= main_legup_memset_4_i64exit_rh10_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh10_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %237, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh10_reg_r2 <= main_legup_memset_4_i64exit_rh10_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt20_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_plt20_r0 = main_legup_memset_4_i64exit_plt10_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt20_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_plt20_r1 = main_legup_memset_4_i64exit_plt10_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt20_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_plt20_r2 = main_legup_memset_4_i64exit_plt10_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_plt20_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt20_reg_r0 <= main_legup_memset_4_i64exit_plt20_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt20_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt20_reg_r0 <= main_legup_memset_4_i64exit_plt20_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt20_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_plt20_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt20_reg_r1 <= main_legup_memset_4_i64exit_plt20_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt20_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt20_reg_r1 <= main_legup_memset_4_i64exit_plt20_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt20_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_plt20_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt20_reg_r2 <= main_legup_memset_4_i64exit_plt20_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt20_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt20_reg_r2 <= main_legup_memset_4_i64exit_plt20_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt20_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %137, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt10_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %137, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_plt10_r0 = main_quantlexiti_137_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %137, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt10_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %137, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_plt10_r1 = main_quantlexiti_137_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %137, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt10_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %137, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_plt10_r2 = main_quantlexiti_137_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_plt10_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %137, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt10_reg_r0 <= main_legup_memset_4_i64exit_plt10_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt10_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %137, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt10_reg_r0 <= main_legup_memset_4_i64exit_plt10_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_plt10_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %137, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt10_reg_r1 <= main_legup_memset_4_i64exit_plt10_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt10_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %137, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt10_reg_r1 <= main_legup_memset_4_i64exit_plt10_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_plt10_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %137, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt10_reg_r2 <= main_legup_memset_4_i64exit_plt10_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt10_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %137, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt10_reg_r2 <= main_legup_memset_4_i64exit_plt10_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbl0_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_nbl0_r0 = main_encodeexit_crit_edge_phitmp3_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbl0_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_nbl0_r1 = main_encodeexit_crit_edge_phitmp3_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbl0_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_nbl0_r2 = main_encodeexit_crit_edge_phitmp3_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_nbl0_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbl0_reg_r0 <= main_legup_memset_4_i64exit_nbl0_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbl0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbl0_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbl0_reg_r0 <= main_legup_memset_4_i64exit_nbl0_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbl0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbl0_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_nbl0_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbl0_reg_r1 <= main_legup_memset_4_i64exit_nbl0_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbl0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbl0_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbl0_reg_r1 <= main_legup_memset_4_i64exit_nbl0_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbl0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbl0_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_nbl0_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbl0_reg_r2 <= main_legup_memset_4_i64exit_nbl0_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbl0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbl0_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbl0_reg_r2 <= main_legup_memset_4_i64exit_nbl0_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbl0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbl0_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %248, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_detl0_r0 = 32'd32;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %248, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_detl0_r0 = main_encodeexit_crit_edge_248_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %248, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_detl0_r1 = 32'd32;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %248, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_detl0_r1 = main_encodeexit_crit_edge_248_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %248, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_detl0_r2 = 32'd32;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %248, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_detl0_r2 = main_encodeexit_crit_edge_248_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_detl0_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %248, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_detl0_reg_r0 <= main_legup_memset_4_i64exit_detl0_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_detl0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_detl0_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %248, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_detl0_reg_r0 <= main_legup_memset_4_i64exit_detl0_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_detl0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_detl0_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_detl0_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %248, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_detl0_reg_r1 <= main_legup_memset_4_i64exit_detl0_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_detl0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_detl0_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %248, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_detl0_reg_r1 <= main_legup_memset_4_i64exit_detl0_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_detl0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_detl0_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_detl0_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %248, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_detl0_reg_r2 <= main_legup_memset_4_i64exit_detl0_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_detl0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_detl0_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %248, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_detl0_reg_r2 <= main_legup_memset_4_i64exit_detl0_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_detl0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_detl0_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i11.i8, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al20_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i11.i8, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_al20_r0 = main_quantlexiti_i11i8_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i11.i8, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al20_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i11.i8, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_al20_r1 = main_quantlexiti_i11i8_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i11.i8, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al20_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i11.i8, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_al20_r2 = main_quantlexiti_i11i8_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_al20_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i11.i8, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al20_reg_r0 <= main_legup_memset_4_i64exit_al20_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al20_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i11.i8, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al20_reg_r0 <= main_legup_memset_4_i64exit_al20_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al20_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_al20_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i11.i8, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al20_reg_r1 <= main_legup_memset_4_i64exit_al20_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al20_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i11.i8, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al20_reg_r1 <= main_legup_memset_4_i64exit_al20_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al20_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_al20_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i11.i8, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al20_reg_r2 <= main_legup_memset_4_i64exit_al20_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al20_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i11.i8, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al20_reg_r2 <= main_legup_memset_4_i64exit_al20_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al20_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt20_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rlt20_r0 = main_legup_memset_4_i64exit_rlt10_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt20_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rlt20_r1 = main_legup_memset_4_i64exit_rlt10_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt20_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rlt20_r2 = main_legup_memset_4_i64exit_rlt10_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_rlt20_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt20_reg_r0 <= main_legup_memset_4_i64exit_rlt20_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt20_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt20_reg_r0 <= main_legup_memset_4_i64exit_rlt20_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt20_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_rlt20_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt20_reg_r1 <= main_legup_memset_4_i64exit_rlt20_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt20_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt20_reg_r1 <= main_legup_memset_4_i64exit_rlt20_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt20_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_rlt20_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt20_reg_r2 <= main_legup_memset_4_i64exit_rlt20_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt20_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt20_reg_r2 <= main_legup_memset_4_i64exit_rlt20_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt20_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i7.i11, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al10_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i7.i11, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_al10_r0 = main_encodeexit_crit_edge_apl12i7i11_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i7.i11, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al10_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i7.i11, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_al10_r1 = main_encodeexit_crit_edge_apl12i7i11_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i7.i11, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al10_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i7.i11, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_al10_r2 = main_encodeexit_crit_edge_apl12i7i11_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_al10_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i7.i11, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al10_reg_r0 <= main_legup_memset_4_i64exit_al10_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al10_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i7.i11, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al10_reg_r0 <= main_legup_memset_4_i64exit_al10_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_al10_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i7.i11, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al10_reg_r1 <= main_legup_memset_4_i64exit_al10_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al10_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i7.i11, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al10_reg_r1 <= main_legup_memset_4_i64exit_al10_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_al10_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i7.i11, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al10_reg_r2 <= main_legup_memset_4_i64exit_al10_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al10_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i7.i11, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al10_reg_r2 <= main_legup_memset_4_i64exit_al10_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %243, %encode.exit._crit_edge ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt10_r0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %243, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rlt10_r0 = main_encodeexit_crit_edge_243_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %243, %encode.exit._crit_edge ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt10_r1 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %243, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rlt10_r1 = main_encodeexit_crit_edge_243_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %243, %encode.exit._crit_edge ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt10_r2 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %243, %encode.exit._crit_edge ]*/
	else /* if (((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rlt10_r2 = main_encodeexit_crit_edge_243_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_rlt10_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %243, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt10_reg_r0 <= main_legup_memset_4_i64exit_rlt10_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt10_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %243, %encode.exit._crit_edge ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt10_reg_r0 <= main_legup_memset_4_i64exit_rlt10_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_rlt10_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %243, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt10_reg_r1 <= main_legup_memset_4_i64exit_rlt10_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt10_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %243, %encode.exit._crit_edge ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt10_reg_r1 <= main_legup_memset_4_i64exit_rlt10_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_rlt10_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %243, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt10_reg_r2 <= main_legup_memset_4_i64exit_rlt10_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt10_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %243, %encode.exit._crit_edge ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt10_reg_r2 <= main_legup_memset_4_i64exit_rlt10_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %i.02.i = shl i32 %indvar9, 1*/
		main_legup_memset_4_i64exit_i02i_r0 = (main_legup_memset_4_i64exit_indvar9_reg_r0 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %i.02.i = shl i32 %indvar9, 1*/
		main_legup_memset_4_i64exit_i02i_r1 = (main_legup_memset_4_i64exit_indvar9_reg_r1 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %i.02.i = shl i32 %indvar9, 1*/
		main_legup_memset_4_i64exit_i02i_r2 = (main_legup_memset_4_i64exit_indvar9_reg_r2 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_i02i_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %i.02.i = shl i32 %indvar9, 1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_i02i_reg_r0 <= main_legup_memset_4_i64exit_i02i_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_i02i_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_i02i_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_i02i_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %i.02.i = shl i32 %indvar9, 1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_i02i_reg_r1 <= main_legup_memset_4_i64exit_i02i_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_i02i_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_i02i_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_i02i_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %i.02.i = shl i32 %indvar9, 1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_i02i_reg_r2 <= main_legup_memset_4_i64exit_i02i_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_i02i_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_i02i_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = add i32 %i.02.i, 2*/
		main_legup_memset_4_i64exit_30_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = add i32 %i.02.i, 2*/
		main_legup_memset_4_i64exit_30_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = add i32 %i.02.i, 2*/
		main_legup_memset_4_i64exit_30_r2 = main_signed_add_32_0_r2;
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_30_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = add i32 %i.02.i, 2*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		main_legup_memset_4_i64exit_30_reg_r0 <= main_legup_memset_4_i64exit_30_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_30_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_30_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %338, %335*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_152)) begin
		main_legup_memset_4_i64exit_30_reg_r0 <= main_preheaderi_339_r0;
		if (start == 1'b0 && ^(main_preheaderi_339_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_30_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %428 = add nsw i32 %427, %424*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_legup_memset_4_i64exit_30_reg_r0 <= main_preheaderi_428_r0;
		if (start == 1'b0 && ^(main_preheaderi_428_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_30_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_30_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = add i32 %i.02.i, 2*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		main_legup_memset_4_i64exit_30_reg_r1 <= main_legup_memset_4_i64exit_30_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_30_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_30_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %338, %335*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_152)) begin
		main_legup_memset_4_i64exit_30_reg_r1 <= main_preheaderi_339_r1;
		if (start == 1'b0 && ^(main_preheaderi_339_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_30_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %428 = add nsw i32 %427, %424*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_legup_memset_4_i64exit_30_reg_r1 <= main_preheaderi_428_r1;
		if (start == 1'b0 && ^(main_preheaderi_428_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_30_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_30_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = add i32 %i.02.i, 2*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		main_legup_memset_4_i64exit_30_reg_r2 <= main_legup_memset_4_i64exit_30_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_30_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_30_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %338, %335*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_152)) begin
		main_legup_memset_4_i64exit_30_reg_r2 <= main_preheaderi_339_r2;
		if (start == 1'b0 && ^(main_preheaderi_339_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_30_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %428 = add nsw i32 %427, %424*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_legup_memset_4_i64exit_30_reg_r2 <= main_preheaderi_428_r2;
		if (start == 1'b0 && ^(main_preheaderi_428_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_30_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %31 = or i32 %i.02.i, 1*/
		main_legup_memset_4_i64exit_31_r0 = (main_legup_memset_4_i64exit_i02i_r0 | 32'd1);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %31 = or i32 %i.02.i, 1*/
		main_legup_memset_4_i64exit_31_r1 = (main_legup_memset_4_i64exit_i02i_r1 | 32'd1);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %31 = or i32 %i.02.i, 1*/
		main_legup_memset_4_i64exit_31_r2 = (main_legup_memset_4_i64exit_i02i_r2 | 32'd1);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep11 = getelementptr [100 x i32]* @test_data, i32 0, i32 %31*/
		main_legup_memset_4_i64exit_scevgep11_r0 = (`TAG_g_test_data_a + (4 * main_legup_memset_4_i64exit_31_r0));
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep11 = getelementptr [100 x i32]* @test_data, i32 0, i32 %31*/
		main_legup_memset_4_i64exit_scevgep11_r1 = (`TAG_g_test_data_a + (4 * main_legup_memset_4_i64exit_31_r1));
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep11 = getelementptr [100 x i32]* @test_data, i32 0, i32 %31*/
		main_legup_memset_4_i64exit_scevgep11_r2 = (`TAG_g_test_data_a + (4 * main_legup_memset_4_i64exit_31_r2));
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_scevgep11_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep11 = getelementptr [100 x i32]* @test_data, i32 0, i32 %31*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_scevgep11_reg_r0 <= main_legup_memset_4_i64exit_scevgep11_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep11_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep11_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_scevgep11_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep11 = getelementptr [100 x i32]* @test_data, i32 0, i32 %31*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_scevgep11_reg_r1 <= main_legup_memset_4_i64exit_scevgep11_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep11_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep11_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_scevgep11_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep11 = getelementptr [100 x i32]* @test_data, i32 0, i32 %31*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_scevgep11_reg_r2 <= main_legup_memset_4_i64exit_scevgep11_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep11_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep11_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep12 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i.02.i*/
		main_legup_memset_4_i64exit_scevgep12_r0 = (`TAG_g_test_data_a + (4 * main_legup_memset_4_i64exit_i02i_r0));
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep12 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i.02.i*/
		main_legup_memset_4_i64exit_scevgep12_r1 = (`TAG_g_test_data_a + (4 * main_legup_memset_4_i64exit_i02i_r1));
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep12 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i.02.i*/
		main_legup_memset_4_i64exit_scevgep12_r2 = (`TAG_g_test_data_a + (4 * main_legup_memset_4_i64exit_i02i_r2));
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_scevgep12_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep12 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i.02.i*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_scevgep12_reg_r0 <= main_legup_memset_4_i64exit_scevgep12_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep12_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep12_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_scevgep12_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep12 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i.02.i*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_scevgep12_reg_r1 <= main_legup_memset_4_i64exit_scevgep12_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep12_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep12_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_scevgep12_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep12 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i.02.i*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_scevgep12_reg_r2 <= main_legup_memset_4_i64exit_scevgep12_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep12_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep12_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = load i32* %scevgep12, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_32_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = load i32* %scevgep12, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_32_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = load i32* %scevgep12, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_32_r2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_32_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = load i32* %scevgep12, align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_32_reg_r0 <= main_legup_memset_4_i64exit_32_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_32_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_32_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_32_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = load i32* %scevgep12, align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_32_reg_r1 <= main_legup_memset_4_i64exit_32_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_32_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_32_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_32_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = load i32* %scevgep12, align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_32_reg_r2 <= main_legup_memset_4_i64exit_32_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_32_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_32_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep11, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_33_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep11, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_33_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep11, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_33_r2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_33_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep11, align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_33_reg_r0 <= main_legup_memset_4_i64exit_33_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_33_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_33_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_33_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep11, align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_33_reg_r1 <= main_legup_memset_4_i64exit_33_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_33_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_33_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_33_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep11, align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_33_reg_r2 <= main_legup_memset_4_i64exit_33_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_33_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_33_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %34 = mul nsw i32 %29, 12*/
		main_legup_memset_4_i64exit_34_r0 = (main_legup_memset_4_i64exit_29_reg_r0 * 32'd12);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %34 = mul nsw i32 %29, 12*/
		main_legup_memset_4_i64exit_34_r1 = (main_legup_memset_4_i64exit_29_reg_r1 * 32'd12);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %34 = mul nsw i32 %29, 12*/
		main_legup_memset_4_i64exit_34_r2 = (main_legup_memset_4_i64exit_29_reg_r2 * 32'd12);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %35 = mul nsw i32 %28, -44*/
		main_legup_memset_4_i64exit_35_r0 = (main_legup_memset_4_i64exit_28_reg_r0 * -32'd44);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %35 = mul nsw i32 %28, -44*/
		main_legup_memset_4_i64exit_35_r1 = (main_legup_memset_4_i64exit_28_reg_r1 * -32'd44);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %35 = mul nsw i32 %28, -44*/
		main_legup_memset_4_i64exit_35_r2 = (main_legup_memset_4_i64exit_28_reg_r2 * -32'd44);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = mul nsw i32 %27, -44*/
		main_legup_memset_4_i64exit_36_r0 = (main_legup_memset_4_i64exit_27_reg_r0 * -32'd44);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = mul nsw i32 %27, -44*/
		main_legup_memset_4_i64exit_36_r1 = (main_legup_memset_4_i64exit_27_reg_r1 * -32'd44);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = mul nsw i32 %27, -44*/
		main_legup_memset_4_i64exit_36_r2 = (main_legup_memset_4_i64exit_27_reg_r2 * -32'd44);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = add nsw i32 %36, %34*/
		main_legup_memset_4_i64exit_37_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = add nsw i32 %36, %34*/
		main_legup_memset_4_i64exit_37_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = add nsw i32 %36, %34*/
		main_legup_memset_4_i64exit_37_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %37 = add nsw i32 %36, %34*/
	main_legup_memset_4_i64exit_37_reg_r0 = main_legup_memset_4_i64exit_57_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %37 = add nsw i32 %36, %34*/
	main_legup_memset_4_i64exit_37_reg_r1 = main_legup_memset_4_i64exit_57_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %37 = add nsw i32 %36, %34*/
	main_legup_memset_4_i64exit_37_reg_r2 = main_legup_memset_4_i64exit_57_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %38 = mul nsw i32 %26, 212*/
		main_legup_memset_4_i64exit_38_r0 = (main_legup_memset_4_i64exit_26_reg_r0 * 32'd212);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %38 = mul nsw i32 %26, 212*/
		main_legup_memset_4_i64exit_38_r1 = (main_legup_memset_4_i64exit_26_reg_r1 * 32'd212);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %38 = mul nsw i32 %26, 212*/
		main_legup_memset_4_i64exit_38_r2 = (main_legup_memset_4_i64exit_26_reg_r2 * 32'd212);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = add nsw i32 %38, %35*/
		main_legup_memset_4_i64exit_39_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = add nsw i32 %38, %35*/
		main_legup_memset_4_i64exit_39_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = add nsw i32 %38, %35*/
		main_legup_memset_4_i64exit_39_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %39 = add nsw i32 %38, %35*/
	main_legup_memset_4_i64exit_39_reg_r0 = main_legup_memset_4_i64exit_59_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %39 = add nsw i32 %38, %35*/
	main_legup_memset_4_i64exit_39_reg_r1 = main_legup_memset_4_i64exit_59_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %39 = add nsw i32 %38, %35*/
	main_legup_memset_4_i64exit_39_reg_r2 = main_legup_memset_4_i64exit_59_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %40 = mul nsw i32 %25, 48*/
		main_legup_memset_4_i64exit_40_r0 = (main_legup_memset_4_i64exit_25_reg_r0 * 32'd48);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %40 = mul nsw i32 %25, 48*/
		main_legup_memset_4_i64exit_40_r1 = (main_legup_memset_4_i64exit_25_reg_r1 * 32'd48);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %40 = mul nsw i32 %25, 48*/
		main_legup_memset_4_i64exit_40_r2 = (main_legup_memset_4_i64exit_25_reg_r2 * 32'd48);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_40_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %40 = mul nsw i32 %25, 48*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_40_reg_r0 <= main_legup_memset_4_i64exit_40_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_40_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_40_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_40_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %40 = mul nsw i32 %25, 48*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_40_reg_r1 <= main_legup_memset_4_i64exit_40_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_40_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_40_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_40_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %40 = mul nsw i32 %25, 48*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_40_reg_r2 <= main_legup_memset_4_i64exit_40_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_40_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_40_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = add nsw i32 %40, %37*/
		main_legup_memset_4_i64exit_41_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = add nsw i32 %40, %37*/
		main_legup_memset_4_i64exit_41_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = add nsw i32 %40, %37*/
		main_legup_memset_4_i64exit_41_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %41 = add nsw i32 %40, %37*/
	main_legup_memset_4_i64exit_41_reg_r0 = main_legup_memset_4_i64exit_61_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %41 = add nsw i32 %40, %37*/
	main_legup_memset_4_i64exit_41_reg_r1 = main_legup_memset_4_i64exit_61_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %41 = add nsw i32 %40, %37*/
	main_legup_memset_4_i64exit_41_reg_r2 = main_legup_memset_4_i64exit_61_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = mul nsw i32 %24, -624*/
		main_legup_memset_4_i64exit_42_r0 = (main_legup_memset_4_i64exit_24_reg_r0 * -32'd624);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = mul nsw i32 %24, -624*/
		main_legup_memset_4_i64exit_42_r1 = (main_legup_memset_4_i64exit_24_reg_r1 * -32'd624);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = mul nsw i32 %24, -624*/
		main_legup_memset_4_i64exit_42_r2 = (main_legup_memset_4_i64exit_24_reg_r2 * -32'd624);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_42_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = mul nsw i32 %24, -624*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_42_reg_r0 <= main_legup_memset_4_i64exit_42_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_42_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_42_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_42_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = mul nsw i32 %24, -624*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_42_reg_r1 <= main_legup_memset_4_i64exit_42_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_42_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_42_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_42_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = mul nsw i32 %24, -624*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_42_reg_r2 <= main_legup_memset_4_i64exit_42_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_42_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_42_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = add nsw i32 %42, %39*/
		main_legup_memset_4_i64exit_43_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = add nsw i32 %42, %39*/
		main_legup_memset_4_i64exit_43_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = add nsw i32 %42, %39*/
		main_legup_memset_4_i64exit_43_r2 = main_signed_add_32_1_r2;
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_43_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = add nsw i32 %42, %39*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_43_reg_r0 <= main_legup_memset_4_i64exit_43_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_43_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = add nsw i32 %50, %47*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_43_reg_r0 <= main_legup_memset_4_i64exit_51_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_51_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = add nsw i32 %62, %59*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_43_reg_r0 <= main_legup_memset_4_i64exit_63_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_63_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = add nsw i32 %70, %67*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_43_reg_r0 <= main_legup_memset_4_i64exit_71_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_71_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %78 = add nsw i32 %77, %76*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_43_reg_r0 <= main_legup_memset_4_i64exit_78_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_78_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %438 = add nsw i32 %437, %434*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_legup_memset_4_i64exit_43_reg_r0 <= main_preheaderi_438_r0;
		if (start == 1'b0 && ^(main_preheaderi_438_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %446 = add nsw i32 %445, %442*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_legup_memset_4_i64exit_43_reg_r0 <= main_preheaderi_446_r0;
		if (start == 1'b0 && ^(main_preheaderi_446_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %187 = add nsw i32 %186, %183*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_legup_memset_4_i64exit_43_reg_r0 <= main_quantlexiti_187_r0;
		if (start == 1'b0 && ^(main_quantlexiti_187_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %347, %350*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_legup_memset_4_i64exit_43_reg_r0 <= main_preheaderi_351_r0;
		if (start == 1'b0 && ^(main_preheaderi_351_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %414 = add nsw i32 %413, %410*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_legup_memset_4_i64exit_43_reg_r0 <= main_preheaderi_414_r0;
		if (start == 1'b0 && ^(main_preheaderi_414_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %426 = add nsw i32 %425, %422*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_legup_memset_4_i64exit_43_reg_r0 <= main_preheaderi_426_r0;
		if (start == 1'b0 && ^(main_preheaderi_426_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_43_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = add nsw i32 %42, %39*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_43_reg_r1 <= main_legup_memset_4_i64exit_43_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_43_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = add nsw i32 %50, %47*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_43_reg_r1 <= main_legup_memset_4_i64exit_51_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_51_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = add nsw i32 %62, %59*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_43_reg_r1 <= main_legup_memset_4_i64exit_63_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_63_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = add nsw i32 %70, %67*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_43_reg_r1 <= main_legup_memset_4_i64exit_71_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_71_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %78 = add nsw i32 %77, %76*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_43_reg_r1 <= main_legup_memset_4_i64exit_78_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_78_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %438 = add nsw i32 %437, %434*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_legup_memset_4_i64exit_43_reg_r1 <= main_preheaderi_438_r1;
		if (start == 1'b0 && ^(main_preheaderi_438_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %446 = add nsw i32 %445, %442*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_legup_memset_4_i64exit_43_reg_r1 <= main_preheaderi_446_r1;
		if (start == 1'b0 && ^(main_preheaderi_446_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %187 = add nsw i32 %186, %183*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_legup_memset_4_i64exit_43_reg_r1 <= main_quantlexiti_187_r1;
		if (start == 1'b0 && ^(main_quantlexiti_187_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %347, %350*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_legup_memset_4_i64exit_43_reg_r1 <= main_preheaderi_351_r1;
		if (start == 1'b0 && ^(main_preheaderi_351_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %414 = add nsw i32 %413, %410*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_legup_memset_4_i64exit_43_reg_r1 <= main_preheaderi_414_r1;
		if (start == 1'b0 && ^(main_preheaderi_414_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %426 = add nsw i32 %425, %422*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_legup_memset_4_i64exit_43_reg_r1 <= main_preheaderi_426_r1;
		if (start == 1'b0 && ^(main_preheaderi_426_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_43_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = add nsw i32 %42, %39*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_43_reg_r2 <= main_legup_memset_4_i64exit_43_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_43_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = add nsw i32 %50, %47*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_43_reg_r2 <= main_legup_memset_4_i64exit_51_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_51_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = add nsw i32 %62, %59*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_43_reg_r2 <= main_legup_memset_4_i64exit_63_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_63_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = add nsw i32 %70, %67*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_43_reg_r2 <= main_legup_memset_4_i64exit_71_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_71_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %78 = add nsw i32 %77, %76*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_43_reg_r2 <= main_legup_memset_4_i64exit_78_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_78_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %438 = add nsw i32 %437, %434*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_legup_memset_4_i64exit_43_reg_r2 <= main_preheaderi_438_r2;
		if (start == 1'b0 && ^(main_preheaderi_438_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %446 = add nsw i32 %445, %442*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_legup_memset_4_i64exit_43_reg_r2 <= main_preheaderi_446_r2;
		if (start == 1'b0 && ^(main_preheaderi_446_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %187 = add nsw i32 %186, %183*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_legup_memset_4_i64exit_43_reg_r2 <= main_quantlexiti_187_r2;
		if (start == 1'b0 && ^(main_quantlexiti_187_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %347, %350*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_legup_memset_4_i64exit_43_reg_r2 <= main_preheaderi_351_r2;
		if (start == 1'b0 && ^(main_preheaderi_351_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %414 = add nsw i32 %413, %410*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_legup_memset_4_i64exit_43_reg_r2 <= main_preheaderi_414_r2;
		if (start == 1'b0 && ^(main_preheaderi_414_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %426 = add nsw i32 %425, %422*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_legup_memset_4_i64exit_43_reg_r2 <= main_preheaderi_426_r2;
		if (start == 1'b0 && ^(main_preheaderi_426_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %44 = shl nsw i32 %23, 7*/
		main_legup_memset_4_i64exit_44_r0 = (main_legup_memset_4_i64exit_23_reg_r0 <<< (32'd7 % 32));
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %44 = shl nsw i32 %23, 7*/
		main_legup_memset_4_i64exit_44_r1 = (main_legup_memset_4_i64exit_23_reg_r1 <<< (32'd7 % 32));
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %44 = shl nsw i32 %23, 7*/
		main_legup_memset_4_i64exit_44_r2 = (main_legup_memset_4_i64exit_23_reg_r2 <<< (32'd7 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_44_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %44 = shl nsw i32 %23, 7*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_44_reg_r0 <= main_legup_memset_4_i64exit_44_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_44_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_44_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_44_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %44 = shl nsw i32 %23, 7*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_44_reg_r1 <= main_legup_memset_4_i64exit_44_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_44_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_44_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_44_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %44 = shl nsw i32 %23, 7*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_44_reg_r2 <= main_legup_memset_4_i64exit_44_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_44_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_44_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = add nsw i32 %44, %41*/
		main_legup_memset_4_i64exit_45_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = add nsw i32 %44, %41*/
		main_legup_memset_4_i64exit_45_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = add nsw i32 %44, %41*/
		main_legup_memset_4_i64exit_45_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %45 = add nsw i32 %44, %41*/
	main_legup_memset_4_i64exit_45_reg_r0 = main_legup_memset_4_i64exit_57_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %45 = add nsw i32 %44, %41*/
	main_legup_memset_4_i64exit_45_reg_r1 = main_legup_memset_4_i64exit_57_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %45 = add nsw i32 %44, %41*/
	main_legup_memset_4_i64exit_45_reg_r2 = main_legup_memset_4_i64exit_57_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %46 = mul nsw i32 %22, 1448*/
		main_legup_memset_4_i64exit_46_r0 = (main_legup_memset_4_i64exit_22_reg_r0 * 32'd1448);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %46 = mul nsw i32 %22, 1448*/
		main_legup_memset_4_i64exit_46_r1 = (main_legup_memset_4_i64exit_22_reg_r1 * 32'd1448);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %46 = mul nsw i32 %22, 1448*/
		main_legup_memset_4_i64exit_46_r2 = (main_legup_memset_4_i64exit_22_reg_r2 * 32'd1448);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_46_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %46 = mul nsw i32 %22, 1448*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_46_reg_r0 <= main_legup_memset_4_i64exit_46_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_46_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_46_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_46_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %46 = mul nsw i32 %22, 1448*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_46_reg_r1 <= main_legup_memset_4_i64exit_46_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_46_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_46_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_46_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %46 = mul nsw i32 %22, 1448*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_46_reg_r2 <= main_legup_memset_4_i64exit_46_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_46_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_46_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = add nsw i32 %46, %43*/
		main_legup_memset_4_i64exit_47_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = add nsw i32 %46, %43*/
		main_legup_memset_4_i64exit_47_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = add nsw i32 %46, %43*/
		main_legup_memset_4_i64exit_47_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %47 = add nsw i32 %46, %43*/
	main_legup_memset_4_i64exit_47_reg_r0 = main_legup_memset_4_i64exit_59_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %47 = add nsw i32 %46, %43*/
	main_legup_memset_4_i64exit_47_reg_r1 = main_legup_memset_4_i64exit_59_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %47 = add nsw i32 %46, %43*/
	main_legup_memset_4_i64exit_47_reg_r2 = main_legup_memset_4_i64exit_59_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = mul nsw i32 %21, -840*/
		main_legup_memset_4_i64exit_48_r0 = (main_legup_memset_4_i64exit_21_reg_r0 * -32'd840);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = mul nsw i32 %21, -840*/
		main_legup_memset_4_i64exit_48_r1 = (main_legup_memset_4_i64exit_21_reg_r1 * -32'd840);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = mul nsw i32 %21, -840*/
		main_legup_memset_4_i64exit_48_r2 = (main_legup_memset_4_i64exit_21_reg_r2 * -32'd840);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_48_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = mul nsw i32 %21, -840*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_48_reg_r0 <= main_legup_memset_4_i64exit_48_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_48_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_48_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_48_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = mul nsw i32 %21, -840*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_48_reg_r1 <= main_legup_memset_4_i64exit_48_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_48_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_48_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_48_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = mul nsw i32 %21, -840*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_48_reg_r2 <= main_legup_memset_4_i64exit_48_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_48_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_48_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = add nsw i32 %48, %45*/
		main_legup_memset_4_i64exit_49_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = add nsw i32 %48, %45*/
		main_legup_memset_4_i64exit_49_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = add nsw i32 %48, %45*/
		main_legup_memset_4_i64exit_49_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %49 = add nsw i32 %48, %45*/
	main_legup_memset_4_i64exit_49_reg_r0 = main_legup_memset_4_i64exit_61_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %49 = add nsw i32 %48, %45*/
	main_legup_memset_4_i64exit_49_reg_r1 = main_legup_memset_4_i64exit_61_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %49 = add nsw i32 %48, %45*/
	main_legup_memset_4_i64exit_49_reg_r2 = main_legup_memset_4_i64exit_61_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %50 = mul nsw i32 %20, -3220*/
		main_legup_memset_4_i64exit_50_r0 = (main_legup_memset_4_i64exit_20_reg_r0 * -32'd3220);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %50 = mul nsw i32 %20, -3220*/
		main_legup_memset_4_i64exit_50_r1 = (main_legup_memset_4_i64exit_20_reg_r1 * -32'd3220);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %50 = mul nsw i32 %20, -3220*/
		main_legup_memset_4_i64exit_50_r2 = (main_legup_memset_4_i64exit_20_reg_r2 * -32'd3220);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_50_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %50 = mul nsw i32 %20, -3220*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_50_reg_r0 <= main_legup_memset_4_i64exit_50_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_50_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_50_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_50_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %50 = mul nsw i32 %20, -3220*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_50_reg_r1 <= main_legup_memset_4_i64exit_50_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_50_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_50_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_50_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %50 = mul nsw i32 %20, -3220*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_50_reg_r2 <= main_legup_memset_4_i64exit_50_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_50_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_50_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = add nsw i32 %50, %47*/
		main_legup_memset_4_i64exit_51_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = add nsw i32 %50, %47*/
		main_legup_memset_4_i64exit_51_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = add nsw i32 %50, %47*/
		main_legup_memset_4_i64exit_51_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %51 = add nsw i32 %50, %47*/
	main_legup_memset_4_i64exit_51_reg_r0 = main_legup_memset_4_i64exit_43_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %51 = add nsw i32 %50, %47*/
	main_legup_memset_4_i64exit_51_reg_r1 = main_legup_memset_4_i64exit_43_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %51 = add nsw i32 %50, %47*/
	main_legup_memset_4_i64exit_51_reg_r2 = main_legup_memset_4_i64exit_43_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %52 = mul nsw i32 %19, 3804*/
		main_legup_memset_4_i64exit_52_r0 = (main_legup_memset_4_i64exit_19_reg_r0 * 32'd3804);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %52 = mul nsw i32 %19, 3804*/
		main_legup_memset_4_i64exit_52_r1 = (main_legup_memset_4_i64exit_19_reg_r1 * 32'd3804);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %52 = mul nsw i32 %19, 3804*/
		main_legup_memset_4_i64exit_52_r2 = (main_legup_memset_4_i64exit_19_reg_r2 * 32'd3804);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_52_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %52 = mul nsw i32 %19, 3804*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_52_reg_r0 <= main_legup_memset_4_i64exit_52_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_52_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_52_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_52_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %52 = mul nsw i32 %19, 3804*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_52_reg_r1 <= main_legup_memset_4_i64exit_52_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_52_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_52_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_52_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %52 = mul nsw i32 %19, 3804*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_52_reg_r2 <= main_legup_memset_4_i64exit_52_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_52_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_52_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = add nsw i32 %52, %49*/
		main_legup_memset_4_i64exit_53_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = add nsw i32 %52, %49*/
		main_legup_memset_4_i64exit_53_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = add nsw i32 %52, %49*/
		main_legup_memset_4_i64exit_53_r2 = main_signed_add_32_0_r2;
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_53_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = add nsw i32 %52, %49*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_53_reg_r0 <= main_legup_memset_4_i64exit_53_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_53_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_53_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_53_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = add nsw i32 %52, %49*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_53_reg_r1 <= main_legup_memset_4_i64exit_53_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_53_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_53_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_53_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = add nsw i32 %52, %49*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_53_reg_r2 <= main_legup_memset_4_i64exit_53_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_53_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_53_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = mul nsw i32 %18, 15504*/
		main_legup_memset_4_i64exit_54_r0 = (main_legup_memset_4_i64exit_18_reg_r0 * 32'd15504);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = mul nsw i32 %18, 15504*/
		main_legup_memset_4_i64exit_54_r1 = (main_legup_memset_4_i64exit_18_reg_r1 * 32'd15504);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = mul nsw i32 %18, 15504*/
		main_legup_memset_4_i64exit_54_r2 = (main_legup_memset_4_i64exit_18_reg_r2 * 32'd15504);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_54_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = mul nsw i32 %18, 15504*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_54_reg_r0 <= main_legup_memset_4_i64exit_54_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_54_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_54_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_54_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = mul nsw i32 %18, 15504*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_54_reg_r1 <= main_legup_memset_4_i64exit_54_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_54_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_54_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_54_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = mul nsw i32 %18, 15504*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_54_reg_r2 <= main_legup_memset_4_i64exit_54_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_54_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_54_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = add nsw i32 %54, %51*/
		main_legup_memset_4_i64exit_55_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = add nsw i32 %54, %51*/
		main_legup_memset_4_i64exit_55_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = add nsw i32 %54, %51*/
		main_legup_memset_4_i64exit_55_r2 = main_signed_add_32_1_r2;
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_55_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = add nsw i32 %54, %51*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_55_reg_r0 <= main_legup_memset_4_i64exit_55_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_55_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = add nsw i32 %92, %95*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_legup_memset_4_i64exit_55_reg_r0 <= main_legup_memset_4_i64exit_96_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_96_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %442 = add nsw i32 %441, %438*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_legup_memset_4_i64exit_55_reg_r0 <= main_preheaderi_442_r0;
		if (start == 1'b0 && ^(main_preheaderi_442_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i17 = add nsw i32 %214, %220*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_legup_memset_4_i64exit_55_reg_r0 <= main_quantlexiti_wd40ii17_r0;
		if (start == 1'b0 && ^(main_quantlexiti_wd40ii17_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r0"); $finish; end
	end
	/* main: %encode.exit._crit_edge*/
	/*   %243 = add nsw i32 %127, %109*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_legup_memset_4_i64exit_55_reg_r0 <= main_encodeexit_crit_edge_243_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_243_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %416 = add nsw i32 %415, %412*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_legup_memset_4_i64exit_55_reg_r0 <= main_preheaderi_416_r0;
		if (start == 1'b0 && ^(main_preheaderi_416_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %430 = add nsw i32 %429, %426*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_legup_memset_4_i64exit_55_reg_r0 <= main_preheaderi_430_r0;
		if (start == 1'b0 && ^(main_preheaderi_430_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_55_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = add nsw i32 %54, %51*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_55_reg_r1 <= main_legup_memset_4_i64exit_55_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_55_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = add nsw i32 %92, %95*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_legup_memset_4_i64exit_55_reg_r1 <= main_legup_memset_4_i64exit_96_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_96_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %442 = add nsw i32 %441, %438*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_legup_memset_4_i64exit_55_reg_r1 <= main_preheaderi_442_r1;
		if (start == 1'b0 && ^(main_preheaderi_442_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i17 = add nsw i32 %214, %220*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_legup_memset_4_i64exit_55_reg_r1 <= main_quantlexiti_wd40ii17_r1;
		if (start == 1'b0 && ^(main_quantlexiti_wd40ii17_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r1"); $finish; end
	end
	/* main: %encode.exit._crit_edge*/
	/*   %243 = add nsw i32 %127, %109*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_legup_memset_4_i64exit_55_reg_r1 <= main_encodeexit_crit_edge_243_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_243_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %416 = add nsw i32 %415, %412*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_legup_memset_4_i64exit_55_reg_r1 <= main_preheaderi_416_r1;
		if (start == 1'b0 && ^(main_preheaderi_416_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %430 = add nsw i32 %429, %426*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_legup_memset_4_i64exit_55_reg_r1 <= main_preheaderi_430_r1;
		if (start == 1'b0 && ^(main_preheaderi_430_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_55_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = add nsw i32 %54, %51*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_55_reg_r2 <= main_legup_memset_4_i64exit_55_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_55_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = add nsw i32 %92, %95*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_legup_memset_4_i64exit_55_reg_r2 <= main_legup_memset_4_i64exit_96_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_96_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %442 = add nsw i32 %441, %438*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_legup_memset_4_i64exit_55_reg_r2 <= main_preheaderi_442_r2;
		if (start == 1'b0 && ^(main_preheaderi_442_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i17 = add nsw i32 %214, %220*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_legup_memset_4_i64exit_55_reg_r2 <= main_quantlexiti_wd40ii17_r2;
		if (start == 1'b0 && ^(main_quantlexiti_wd40ii17_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r2"); $finish; end
	end
	/* main: %encode.exit._crit_edge*/
	/*   %243 = add nsw i32 %127, %109*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_legup_memset_4_i64exit_55_reg_r2 <= main_encodeexit_crit_edge_243_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_243_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %416 = add nsw i32 %415, %412*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_legup_memset_4_i64exit_55_reg_r2 <= main_preheaderi_416_r2;
		if (start == 1'b0 && ^(main_preheaderi_416_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %430 = add nsw i32 %429, %426*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_legup_memset_4_i64exit_55_reg_r2 <= main_preheaderi_430_r2;
		if (start == 1'b0 && ^(main_preheaderi_430_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %56 = mul nsw i32 %17, 15504*/
		main_legup_memset_4_i64exit_56_r0 = (main_legup_memset_4_i64exit_17_reg_r0 * 32'd15504);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %56 = mul nsw i32 %17, 15504*/
		main_legup_memset_4_i64exit_56_r1 = (main_legup_memset_4_i64exit_17_reg_r1 * 32'd15504);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %56 = mul nsw i32 %17, 15504*/
		main_legup_memset_4_i64exit_56_r2 = (main_legup_memset_4_i64exit_17_reg_r2 * 32'd15504);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_56_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %56 = mul nsw i32 %17, 15504*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_56_reg_r0 <= main_legup_memset_4_i64exit_56_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_56_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_56_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_56_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %56 = mul nsw i32 %17, 15504*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_56_reg_r1 <= main_legup_memset_4_i64exit_56_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_56_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_56_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_56_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %56 = mul nsw i32 %17, 15504*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_56_reg_r2 <= main_legup_memset_4_i64exit_56_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_56_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_56_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = add nsw i32 %56, %53*/
		main_legup_memset_4_i64exit_57_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = add nsw i32 %56, %53*/
		main_legup_memset_4_i64exit_57_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = add nsw i32 %56, %53*/
		main_legup_memset_4_i64exit_57_r2 = main_signed_add_32_0_r2;
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_57_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = add nsw i32 %56, %53*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_legup_memset_4_i64exit_57_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_57_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %130 = add nsw i32 %nbl.0, %129*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_quantlexiti_130_r0;
		if (start == 1'b0 && ^(main_quantlexiti_130_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_preheaderi_wd40i9i_r0;
		if (start == 1'b0 && ^(main_preheaderi_wd40i9i_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %327 = add nsw i32 %324, 192*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_preheaderi_327_r0;
		if (start == 1'b0 && ^(main_preheaderi_327_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %149 = add nsw i32 %wd4.0.i9.i6, %146*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_quantlexiti_149_r0;
		if (start == 1'b0 && ^(main_quantlexiti_149_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %266 = add nsw i32 %262, %265*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_111)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_preheaderi_266_r0;
		if (start == 1'b0 && ^(main_preheaderi_266_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_preheaderi_278_r0;
		if (start == 1'b0 && ^(main_preheaderi_278_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %tmp.i.i = add i32 %281, %280*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_preheaderi_tmpii_r0;
		if (start == 1'b0 && ^(main_preheaderi_tmpii_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %292 = add nsw i32 %291, %283*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_preheaderi_292_r0;
		if (start == 1'b0 && ^(main_preheaderi_292_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = add nsw i32 %36, %34*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_legup_memset_4_i64exit_37_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_37_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = add nsw i32 %44, %41*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_legup_memset_4_i64exit_45_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_45_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %156 = add nsw i32 %153, 192*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_quantlexiti_156_r0;
		if (start == 1'b0 && ^(main_quantlexiti_156_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = add nsw i32 %64, %61*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_legup_memset_4_i64exit_65_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_65_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = add nsw i32 %72, %69*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_legup_memset_4_i64exit_73_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_73_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %77 = add nsw i32 %6, %75*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_legup_memset_4_i64exit_77_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_77_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = add nsw i32 %87, %84*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_legup_memset_4_i64exit_88_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_88_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = add nsw i32 %96, %99*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_legup_memset_4_i64exit_100_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_100_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp.i.i1 = add i32 %107, %106*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_legup_memset_4_i64exit_tmpii1_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_tmpii1_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %432 = add nsw i32 %431, %428*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_preheaderi_432_r0;
		if (start == 1'b0 && ^(main_preheaderi_432_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %444 = add nsw i32 %443, %440*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_preheaderi_444_r0;
		if (start == 1'b0 && ^(main_preheaderi_444_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %170 = add nsw i32 %166, %169*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_quantlexiti_170_r0;
		if (start == 1'b0 && ^(main_quantlexiti_170_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %178 = add nsw i32 %174, %177*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_quantlexiti_178_r0;
		if (start == 1'b0 && ^(main_quantlexiti_178_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %. = add nsw i32 %190, %..v*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_quantlexiti__r0;
		if (start == 1'b0 && ^(main_quantlexiti__r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %202 = add nsw i32 %nbh.0, %201*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_quantlexiti_202_r0;
		if (start == 1'b0 && ^(main_quantlexiti_202_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i20 = add nsw i32 %228, %227*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_quantlexiti_apl10ii20_r0;
		if (start == 1'b0 && ^(main_quantlexiti_apl10ii20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %343 = add nsw i32 %339, %342*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_preheaderi_343_r0;
		if (start == 1'b0 && ^(main_preheaderi_343_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %392 = add nsw i32 %wd4.0.i.i, %389*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_preheaderi_392_r0;
		if (start == 1'b0 && ^(main_preheaderi_392_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %399, %398*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_preheaderi_apl10ii_r0;
		if (start == 1'b0 && ^(main_preheaderi_apl10ii_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %419, %416*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_legup_memset_4_i64exit_57_reg_r0 <= main_preheaderi_420_r0;
		if (start == 1'b0 && ^(main_preheaderi_420_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_57_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = add nsw i32 %56, %53*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_legup_memset_4_i64exit_57_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_57_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %130 = add nsw i32 %nbl.0, %129*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_quantlexiti_130_r1;
		if (start == 1'b0 && ^(main_quantlexiti_130_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_preheaderi_wd40i9i_r1;
		if (start == 1'b0 && ^(main_preheaderi_wd40i9i_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %327 = add nsw i32 %324, 192*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_preheaderi_327_r1;
		if (start == 1'b0 && ^(main_preheaderi_327_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %149 = add nsw i32 %wd4.0.i9.i6, %146*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_quantlexiti_149_r1;
		if (start == 1'b0 && ^(main_quantlexiti_149_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %266 = add nsw i32 %262, %265*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_111)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_preheaderi_266_r1;
		if (start == 1'b0 && ^(main_preheaderi_266_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_preheaderi_278_r1;
		if (start == 1'b0 && ^(main_preheaderi_278_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %tmp.i.i = add i32 %281, %280*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_preheaderi_tmpii_r1;
		if (start == 1'b0 && ^(main_preheaderi_tmpii_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %292 = add nsw i32 %291, %283*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_preheaderi_292_r1;
		if (start == 1'b0 && ^(main_preheaderi_292_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = add nsw i32 %36, %34*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_legup_memset_4_i64exit_37_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_37_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = add nsw i32 %44, %41*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_legup_memset_4_i64exit_45_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_45_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %156 = add nsw i32 %153, 192*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_quantlexiti_156_r1;
		if (start == 1'b0 && ^(main_quantlexiti_156_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = add nsw i32 %64, %61*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_legup_memset_4_i64exit_65_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_65_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = add nsw i32 %72, %69*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_legup_memset_4_i64exit_73_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_73_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %77 = add nsw i32 %6, %75*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_legup_memset_4_i64exit_77_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_77_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = add nsw i32 %87, %84*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_legup_memset_4_i64exit_88_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_88_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = add nsw i32 %96, %99*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_legup_memset_4_i64exit_100_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_100_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp.i.i1 = add i32 %107, %106*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_legup_memset_4_i64exit_tmpii1_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_tmpii1_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %432 = add nsw i32 %431, %428*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_preheaderi_432_r1;
		if (start == 1'b0 && ^(main_preheaderi_432_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %444 = add nsw i32 %443, %440*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_preheaderi_444_r1;
		if (start == 1'b0 && ^(main_preheaderi_444_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %170 = add nsw i32 %166, %169*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_quantlexiti_170_r1;
		if (start == 1'b0 && ^(main_quantlexiti_170_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %178 = add nsw i32 %174, %177*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_quantlexiti_178_r1;
		if (start == 1'b0 && ^(main_quantlexiti_178_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %. = add nsw i32 %190, %..v*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_quantlexiti__r1;
		if (start == 1'b0 && ^(main_quantlexiti__r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %202 = add nsw i32 %nbh.0, %201*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_quantlexiti_202_r1;
		if (start == 1'b0 && ^(main_quantlexiti_202_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i20 = add nsw i32 %228, %227*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_quantlexiti_apl10ii20_r1;
		if (start == 1'b0 && ^(main_quantlexiti_apl10ii20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %343 = add nsw i32 %339, %342*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_preheaderi_343_r1;
		if (start == 1'b0 && ^(main_preheaderi_343_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %392 = add nsw i32 %wd4.0.i.i, %389*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_preheaderi_392_r1;
		if (start == 1'b0 && ^(main_preheaderi_392_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %399, %398*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_preheaderi_apl10ii_r1;
		if (start == 1'b0 && ^(main_preheaderi_apl10ii_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %419, %416*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_legup_memset_4_i64exit_57_reg_r1 <= main_preheaderi_420_r1;
		if (start == 1'b0 && ^(main_preheaderi_420_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_57_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = add nsw i32 %56, %53*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_legup_memset_4_i64exit_57_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_57_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %130 = add nsw i32 %nbl.0, %129*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_quantlexiti_130_r2;
		if (start == 1'b0 && ^(main_quantlexiti_130_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_preheaderi_wd40i9i_r2;
		if (start == 1'b0 && ^(main_preheaderi_wd40i9i_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %327 = add nsw i32 %324, 192*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_preheaderi_327_r2;
		if (start == 1'b0 && ^(main_preheaderi_327_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %149 = add nsw i32 %wd4.0.i9.i6, %146*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_quantlexiti_149_r2;
		if (start == 1'b0 && ^(main_quantlexiti_149_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %266 = add nsw i32 %262, %265*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_111)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_preheaderi_266_r2;
		if (start == 1'b0 && ^(main_preheaderi_266_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_preheaderi_278_r2;
		if (start == 1'b0 && ^(main_preheaderi_278_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %tmp.i.i = add i32 %281, %280*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_preheaderi_tmpii_r2;
		if (start == 1'b0 && ^(main_preheaderi_tmpii_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %292 = add nsw i32 %291, %283*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_preheaderi_292_r2;
		if (start == 1'b0 && ^(main_preheaderi_292_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = add nsw i32 %36, %34*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_legup_memset_4_i64exit_37_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_37_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = add nsw i32 %44, %41*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_legup_memset_4_i64exit_45_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_45_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %156 = add nsw i32 %153, 192*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_quantlexiti_156_r2;
		if (start == 1'b0 && ^(main_quantlexiti_156_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = add nsw i32 %64, %61*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_legup_memset_4_i64exit_65_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_65_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = add nsw i32 %72, %69*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_legup_memset_4_i64exit_73_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_73_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %77 = add nsw i32 %6, %75*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_legup_memset_4_i64exit_77_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_77_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = add nsw i32 %87, %84*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_legup_memset_4_i64exit_88_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_88_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = add nsw i32 %96, %99*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_legup_memset_4_i64exit_100_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_100_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp.i.i1 = add i32 %107, %106*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_legup_memset_4_i64exit_tmpii1_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_tmpii1_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %432 = add nsw i32 %431, %428*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_preheaderi_432_r2;
		if (start == 1'b0 && ^(main_preheaderi_432_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %444 = add nsw i32 %443, %440*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_preheaderi_444_r2;
		if (start == 1'b0 && ^(main_preheaderi_444_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %170 = add nsw i32 %166, %169*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_quantlexiti_170_r2;
		if (start == 1'b0 && ^(main_quantlexiti_170_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %178 = add nsw i32 %174, %177*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_quantlexiti_178_r2;
		if (start == 1'b0 && ^(main_quantlexiti_178_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %. = add nsw i32 %190, %..v*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_quantlexiti__r2;
		if (start == 1'b0 && ^(main_quantlexiti__r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %202 = add nsw i32 %nbh.0, %201*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_quantlexiti_202_r2;
		if (start == 1'b0 && ^(main_quantlexiti_202_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i20 = add nsw i32 %228, %227*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_quantlexiti_apl10ii20_r2;
		if (start == 1'b0 && ^(main_quantlexiti_apl10ii20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %343 = add nsw i32 %339, %342*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_preheaderi_343_r2;
		if (start == 1'b0 && ^(main_preheaderi_343_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %392 = add nsw i32 %wd4.0.i.i, %389*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_preheaderi_392_r2;
		if (start == 1'b0 && ^(main_preheaderi_392_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %399, %398*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_preheaderi_apl10ii_r2;
		if (start == 1'b0 && ^(main_preheaderi_apl10ii_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %419, %416*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_legup_memset_4_i64exit_57_reg_r2 <= main_preheaderi_420_r2;
		if (start == 1'b0 && ^(main_preheaderi_420_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %58 = mul nsw i32 %16, 3804*/
		main_legup_memset_4_i64exit_58_r0 = (main_legup_memset_4_i64exit_16_reg_r0 * 32'd3804);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %58 = mul nsw i32 %16, 3804*/
		main_legup_memset_4_i64exit_58_r1 = (main_legup_memset_4_i64exit_16_reg_r1 * 32'd3804);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %58 = mul nsw i32 %16, 3804*/
		main_legup_memset_4_i64exit_58_r2 = (main_legup_memset_4_i64exit_16_reg_r2 * 32'd3804);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_58_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %58 = mul nsw i32 %16, 3804*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_58_reg_r0 <= main_legup_memset_4_i64exit_58_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_58_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_58_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_58_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %58 = mul nsw i32 %16, 3804*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_58_reg_r1 <= main_legup_memset_4_i64exit_58_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_58_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_58_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_58_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %58 = mul nsw i32 %16, 3804*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_58_reg_r2 <= main_legup_memset_4_i64exit_58_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_58_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_58_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = add nsw i32 %58, %55*/
		main_legup_memset_4_i64exit_59_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = add nsw i32 %58, %55*/
		main_legup_memset_4_i64exit_59_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = add nsw i32 %58, %55*/
		main_legup_memset_4_i64exit_59_r2 = main_signed_add_32_1_r2;
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_59_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = add nsw i32 %58, %55*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_legup_memset_4_i64exit_59_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_59_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i9.i6 = add nsw i32 %142, %148*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_quantlexiti_wd40i9i6_r0;
		if (start == 1'b0 && ^(main_quantlexiti_wd40i9i6_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %262 = add nsw i32 %261, %258*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_110)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_preheaderi_262_r0;
		if (start == 1'b0 && ^(main_preheaderi_262_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %270, %273*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_preheaderi_274_r0;
		if (start == 1'b0 && ^(main_preheaderi_274_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %282, %279*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_preheaderi_283_r0;
		if (start == 1'b0 && ^(main_preheaderi_283_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %297 = add nsw i32 %294, %296*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_143)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_preheaderi_297_r0;
		if (start == 1'b0 && ^(main_preheaderi_297_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = add nsw i32 %38, %35*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_legup_memset_4_i64exit_39_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_39_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = add nsw i32 %46, %43*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_legup_memset_4_i64exit_47_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_47_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %67 = add nsw i32 %66, %63*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_legup_memset_4_i64exit_67_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_67_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %76 = add nsw i32 %7, %73*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_legup_memset_4_i64exit_76_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_76_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = add nsw i32 %88, %91*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_legup_memset_4_i64exit_92_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_92_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = add nsw i32 %100, %103*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_legup_memset_4_i64exit_104_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_104_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %116*/
	/*   %118 = add i32 %117, 1*/
	else if((cur_state_v0 == LEGUP_F_main_BB__116_51)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_116_118_r0;
		if (start == 1'b0 && ^(main_116_118_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheader_186)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_preheader_main_result2_r0;
		if (start == 1'b0 && ^(main_preheader_main_result2_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %166 = add nsw i32 %165, %162*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_quantlexiti_166_r0;
		if (start == 1'b0 && ^(main_quantlexiti_166_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %174 = add nsw i32 %170, %173*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_quantlexiti_174_r0;
		if (start == 1'b0 && ^(main_quantlexiti_174_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %tmp.i3.i12 = add i32 %185, %184*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_quantlexiti_tmpi3i12_r0;
		if (start == 1'b0 && ^(main_quantlexiti_tmpi3i12_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %221 = add nsw i32 %wd4.0.i.i17, %218*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_quantlexiti_221_r0;
		if (start == 1'b0 && ^(main_quantlexiti_221_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %228 = add nsw i32 %225, 192*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_legup_memset_4_i64exit_59_reg_r0 <= main_quantlexiti_228_r0;
		if (start == 1'b0 && ^(main_quantlexiti_228_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_59_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = add nsw i32 %58, %55*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_legup_memset_4_i64exit_59_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_59_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i9.i6 = add nsw i32 %142, %148*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_quantlexiti_wd40i9i6_r1;
		if (start == 1'b0 && ^(main_quantlexiti_wd40i9i6_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %262 = add nsw i32 %261, %258*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_110)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_preheaderi_262_r1;
		if (start == 1'b0 && ^(main_preheaderi_262_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %270, %273*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_preheaderi_274_r1;
		if (start == 1'b0 && ^(main_preheaderi_274_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %282, %279*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_preheaderi_283_r1;
		if (start == 1'b0 && ^(main_preheaderi_283_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %297 = add nsw i32 %294, %296*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_143)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_preheaderi_297_r1;
		if (start == 1'b0 && ^(main_preheaderi_297_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = add nsw i32 %38, %35*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_legup_memset_4_i64exit_39_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_39_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = add nsw i32 %46, %43*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_legup_memset_4_i64exit_47_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_47_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %67 = add nsw i32 %66, %63*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_legup_memset_4_i64exit_67_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_67_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %76 = add nsw i32 %7, %73*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_legup_memset_4_i64exit_76_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_76_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = add nsw i32 %88, %91*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_legup_memset_4_i64exit_92_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_92_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = add nsw i32 %100, %103*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_legup_memset_4_i64exit_104_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_104_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %116*/
	/*   %118 = add i32 %117, 1*/
	else if((cur_state_v1 == LEGUP_F_main_BB__116_51)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_116_118_r1;
		if (start == 1'b0 && ^(main_116_118_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheader_186)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_preheader_main_result2_r1;
		if (start == 1'b0 && ^(main_preheader_main_result2_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %166 = add nsw i32 %165, %162*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_quantlexiti_166_r1;
		if (start == 1'b0 && ^(main_quantlexiti_166_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %174 = add nsw i32 %170, %173*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_quantlexiti_174_r1;
		if (start == 1'b0 && ^(main_quantlexiti_174_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %tmp.i3.i12 = add i32 %185, %184*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_quantlexiti_tmpi3i12_r1;
		if (start == 1'b0 && ^(main_quantlexiti_tmpi3i12_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %221 = add nsw i32 %wd4.0.i.i17, %218*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_quantlexiti_221_r1;
		if (start == 1'b0 && ^(main_quantlexiti_221_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %228 = add nsw i32 %225, 192*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_legup_memset_4_i64exit_59_reg_r1 <= main_quantlexiti_228_r1;
		if (start == 1'b0 && ^(main_quantlexiti_228_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_59_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = add nsw i32 %58, %55*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_legup_memset_4_i64exit_59_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_59_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i9.i6 = add nsw i32 %142, %148*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_quantlexiti_wd40i9i6_r2;
		if (start == 1'b0 && ^(main_quantlexiti_wd40i9i6_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %262 = add nsw i32 %261, %258*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_110)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_preheaderi_262_r2;
		if (start == 1'b0 && ^(main_preheaderi_262_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %270, %273*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_preheaderi_274_r2;
		if (start == 1'b0 && ^(main_preheaderi_274_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %282, %279*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_preheaderi_283_r2;
		if (start == 1'b0 && ^(main_preheaderi_283_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %297 = add nsw i32 %294, %296*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_143)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_preheaderi_297_r2;
		if (start == 1'b0 && ^(main_preheaderi_297_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = add nsw i32 %38, %35*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_legup_memset_4_i64exit_39_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_39_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = add nsw i32 %46, %43*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_legup_memset_4_i64exit_47_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_47_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %67 = add nsw i32 %66, %63*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_legup_memset_4_i64exit_67_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_67_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %76 = add nsw i32 %7, %73*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_legup_memset_4_i64exit_76_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_76_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = add nsw i32 %88, %91*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_legup_memset_4_i64exit_92_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_92_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = add nsw i32 %100, %103*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_legup_memset_4_i64exit_104_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_104_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %116*/
	/*   %118 = add i32 %117, 1*/
	else if((cur_state_v2 == LEGUP_F_main_BB__116_51)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_116_118_r2;
		if (start == 1'b0 && ^(main_116_118_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheader_186)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_preheader_main_result2_r2;
		if (start == 1'b0 && ^(main_preheader_main_result2_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %166 = add nsw i32 %165, %162*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_quantlexiti_166_r2;
		if (start == 1'b0 && ^(main_quantlexiti_166_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %174 = add nsw i32 %170, %173*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_quantlexiti_174_r2;
		if (start == 1'b0 && ^(main_quantlexiti_174_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %tmp.i3.i12 = add i32 %185, %184*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_quantlexiti_tmpi3i12_r2;
		if (start == 1'b0 && ^(main_quantlexiti_tmpi3i12_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %221 = add nsw i32 %wd4.0.i.i17, %218*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_quantlexiti_221_r2;
		if (start == 1'b0 && ^(main_quantlexiti_221_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %228 = add nsw i32 %225, 192*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_legup_memset_4_i64exit_59_reg_r2 <= main_quantlexiti_228_r2;
		if (start == 1'b0 && ^(main_quantlexiti_228_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %60 = mul nsw i32 %15, -3220*/
		main_legup_memset_4_i64exit_60_r0 = (main_legup_memset_4_i64exit_15_reg_r0 * -32'd3220);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %60 = mul nsw i32 %15, -3220*/
		main_legup_memset_4_i64exit_60_r1 = (main_legup_memset_4_i64exit_15_reg_r1 * -32'd3220);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %60 = mul nsw i32 %15, -3220*/
		main_legup_memset_4_i64exit_60_r2 = (main_legup_memset_4_i64exit_15_reg_r2 * -32'd3220);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_60_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %60 = mul nsw i32 %15, -3220*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_60_reg_r0 <= main_legup_memset_4_i64exit_60_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_60_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_60_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_60_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %60 = mul nsw i32 %15, -3220*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_60_reg_r1 <= main_legup_memset_4_i64exit_60_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_60_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_60_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_60_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %60 = mul nsw i32 %15, -3220*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_60_reg_r2 <= main_legup_memset_4_i64exit_60_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_60_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_60_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = add nsw i32 %60, %57*/
		main_legup_memset_4_i64exit_61_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = add nsw i32 %60, %57*/
		main_legup_memset_4_i64exit_61_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = add nsw i32 %60, %57*/
		main_legup_memset_4_i64exit_61_r2 = main_signed_add_32_0_r2;
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_61_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = add nsw i32 %60, %57*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_legup_memset_4_i64exit_61_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_61_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %320 = add nsw i32 %wd4.0.i9.i, %317*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_preheaderi_320_r0;
		if (start == 1'b0 && ^(main_preheaderi_320_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i5.i = add nsw i32 %327, %326*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_preheaderi_apl10i5i_r0;
		if (start == 1'b0 && ^(main_preheaderi_apl10i5i_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %270 = add nsw i32 %266, %269*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_preheaderi_270_r0;
		if (start == 1'b0 && ^(main_preheaderi_270_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = add nsw i32 %40, %37*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_legup_memset_4_i64exit_41_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_41_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = add nsw i32 %48, %45*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_legup_memset_4_i64exit_49_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_49_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i5.i9 = add nsw i32 %156, %155*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_quantlexiti_apl10i5i9_r0;
		if (start == 1'b0 && ^(main_quantlexiti_apl10i5i9_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = add nsw i32 %68, %65*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_legup_memset_4_i64exit_69_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_69_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = add nsw i32 %74, %71*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_legup_memset_4_i64exit_75_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_75_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %436 = add nsw i32 %435, %432*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_preheaderi_436_r0;
		if (start == 1'b0 && ^(main_preheaderi_436_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %448 = add nsw i32 %447, %444*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_preheaderi_448_r0;
		if (start == 1'b0 && ^(main_preheaderi_448_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %182 = add nsw i32 %178, %181*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_quantlexiti_182_r0;
		if (start == 1'b0 && ^(main_quantlexiti_182_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
	/* main: %encode.exit._crit_edge*/
	/*   %237 = add nsw i32 %199, %187*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_encodeexit_crit_edge_237_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_237_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %tmp.i3.i = add i32 %358, %357*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_preheaderi_tmpi3i_r0;
		if (start == 1'b0 && ^(main_preheaderi_tmpi3i_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %369 = add nsw i32 %366, %368*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_preheaderi_369_r0;
		if (start == 1'b0 && ^(main_preheaderi_369_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %412 = add nsw i32 %411, %408*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_preheaderi_412_r0;
		if (start == 1'b0 && ^(main_preheaderi_412_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %424 = add nsw i32 %423, %420*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_legup_memset_4_i64exit_61_reg_r0 <= main_preheaderi_424_r0;
		if (start == 1'b0 && ^(main_preheaderi_424_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_61_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = add nsw i32 %60, %57*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_legup_memset_4_i64exit_61_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_61_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %320 = add nsw i32 %wd4.0.i9.i, %317*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_preheaderi_320_r1;
		if (start == 1'b0 && ^(main_preheaderi_320_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i5.i = add nsw i32 %327, %326*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_preheaderi_apl10i5i_r1;
		if (start == 1'b0 && ^(main_preheaderi_apl10i5i_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %270 = add nsw i32 %266, %269*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_preheaderi_270_r1;
		if (start == 1'b0 && ^(main_preheaderi_270_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = add nsw i32 %40, %37*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_legup_memset_4_i64exit_41_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_41_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = add nsw i32 %48, %45*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_legup_memset_4_i64exit_49_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_49_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i5.i9 = add nsw i32 %156, %155*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_quantlexiti_apl10i5i9_r1;
		if (start == 1'b0 && ^(main_quantlexiti_apl10i5i9_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = add nsw i32 %68, %65*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_legup_memset_4_i64exit_69_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_69_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = add nsw i32 %74, %71*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_legup_memset_4_i64exit_75_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_75_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %436 = add nsw i32 %435, %432*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_preheaderi_436_r1;
		if (start == 1'b0 && ^(main_preheaderi_436_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %448 = add nsw i32 %447, %444*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_preheaderi_448_r1;
		if (start == 1'b0 && ^(main_preheaderi_448_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %182 = add nsw i32 %178, %181*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_quantlexiti_182_r1;
		if (start == 1'b0 && ^(main_quantlexiti_182_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
	/* main: %encode.exit._crit_edge*/
	/*   %237 = add nsw i32 %199, %187*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_encodeexit_crit_edge_237_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_237_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %tmp.i3.i = add i32 %358, %357*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_preheaderi_tmpi3i_r1;
		if (start == 1'b0 && ^(main_preheaderi_tmpi3i_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %369 = add nsw i32 %366, %368*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_preheaderi_369_r1;
		if (start == 1'b0 && ^(main_preheaderi_369_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %412 = add nsw i32 %411, %408*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_preheaderi_412_r1;
		if (start == 1'b0 && ^(main_preheaderi_412_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %424 = add nsw i32 %423, %420*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_legup_memset_4_i64exit_61_reg_r1 <= main_preheaderi_424_r1;
		if (start == 1'b0 && ^(main_preheaderi_424_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_61_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = add nsw i32 %60, %57*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_legup_memset_4_i64exit_61_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_61_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %320 = add nsw i32 %wd4.0.i9.i, %317*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_preheaderi_320_r2;
		if (start == 1'b0 && ^(main_preheaderi_320_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i5.i = add nsw i32 %327, %326*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_preheaderi_apl10i5i_r2;
		if (start == 1'b0 && ^(main_preheaderi_apl10i5i_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %270 = add nsw i32 %266, %269*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_preheaderi_270_r2;
		if (start == 1'b0 && ^(main_preheaderi_270_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = add nsw i32 %40, %37*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_legup_memset_4_i64exit_41_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_41_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = add nsw i32 %48, %45*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_legup_memset_4_i64exit_49_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_49_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i5.i9 = add nsw i32 %156, %155*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_quantlexiti_apl10i5i9_r2;
		if (start == 1'b0 && ^(main_quantlexiti_apl10i5i9_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = add nsw i32 %68, %65*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_legup_memset_4_i64exit_69_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_69_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = add nsw i32 %74, %71*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_legup_memset_4_i64exit_75_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_75_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %436 = add nsw i32 %435, %432*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_preheaderi_436_r2;
		if (start == 1'b0 && ^(main_preheaderi_436_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %448 = add nsw i32 %447, %444*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_preheaderi_448_r2;
		if (start == 1'b0 && ^(main_preheaderi_448_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %182 = add nsw i32 %178, %181*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_quantlexiti_182_r2;
		if (start == 1'b0 && ^(main_quantlexiti_182_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
	/* main: %encode.exit._crit_edge*/
	/*   %237 = add nsw i32 %199, %187*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_encodeexit_crit_edge_237_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_237_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %tmp.i3.i = add i32 %358, %357*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_preheaderi_tmpi3i_r2;
		if (start == 1'b0 && ^(main_preheaderi_tmpi3i_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %369 = add nsw i32 %366, %368*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_preheaderi_369_r2;
		if (start == 1'b0 && ^(main_preheaderi_369_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %412 = add nsw i32 %411, %408*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_preheaderi_412_r2;
		if (start == 1'b0 && ^(main_preheaderi_412_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %424 = add nsw i32 %423, %420*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_legup_memset_4_i64exit_61_reg_r2 <= main_preheaderi_424_r2;
		if (start == 1'b0 && ^(main_preheaderi_424_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %62 = mul nsw i32 %14, -840*/
		main_legup_memset_4_i64exit_62_r0 = (main_legup_memset_4_i64exit_14_reg_r0 * -32'd840);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %62 = mul nsw i32 %14, -840*/
		main_legup_memset_4_i64exit_62_r1 = (main_legup_memset_4_i64exit_14_reg_r1 * -32'd840);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %62 = mul nsw i32 %14, -840*/
		main_legup_memset_4_i64exit_62_r2 = (main_legup_memset_4_i64exit_14_reg_r2 * -32'd840);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_62_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %62 = mul nsw i32 %14, -840*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_62_reg_r0 <= main_legup_memset_4_i64exit_62_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_62_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_62_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_62_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %62 = mul nsw i32 %14, -840*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_62_reg_r1 <= main_legup_memset_4_i64exit_62_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_62_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_62_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_62_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %62 = mul nsw i32 %14, -840*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_62_reg_r2 <= main_legup_memset_4_i64exit_62_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_62_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_62_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = add nsw i32 %62, %59*/
		main_legup_memset_4_i64exit_63_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = add nsw i32 %62, %59*/
		main_legup_memset_4_i64exit_63_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = add nsw i32 %62, %59*/
		main_legup_memset_4_i64exit_63_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %63 = add nsw i32 %62, %59*/
	main_legup_memset_4_i64exit_63_reg_r0 = main_legup_memset_4_i64exit_43_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %63 = add nsw i32 %62, %59*/
	main_legup_memset_4_i64exit_63_reg_r1 = main_legup_memset_4_i64exit_43_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %63 = add nsw i32 %62, %59*/
	main_legup_memset_4_i64exit_63_reg_r2 = main_legup_memset_4_i64exit_43_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %64 = mul nsw i32 %13, 1448*/
		main_legup_memset_4_i64exit_64_r0 = (main_legup_memset_4_i64exit_13_reg_r0 * 32'd1448);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %64 = mul nsw i32 %13, 1448*/
		main_legup_memset_4_i64exit_64_r1 = (main_legup_memset_4_i64exit_13_reg_r1 * 32'd1448);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %64 = mul nsw i32 %13, 1448*/
		main_legup_memset_4_i64exit_64_r2 = (main_legup_memset_4_i64exit_13_reg_r2 * 32'd1448);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_64_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %64 = mul nsw i32 %13, 1448*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_64_reg_r0 <= main_legup_memset_4_i64exit_64_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_64_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_64_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_64_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %64 = mul nsw i32 %13, 1448*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_64_reg_r1 <= main_legup_memset_4_i64exit_64_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_64_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_64_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_64_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %64 = mul nsw i32 %13, 1448*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_64_reg_r2 <= main_legup_memset_4_i64exit_64_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_64_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_64_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = add nsw i32 %64, %61*/
		main_legup_memset_4_i64exit_65_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = add nsw i32 %64, %61*/
		main_legup_memset_4_i64exit_65_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = add nsw i32 %64, %61*/
		main_legup_memset_4_i64exit_65_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %65 = add nsw i32 %64, %61*/
	main_legup_memset_4_i64exit_65_reg_r0 = main_legup_memset_4_i64exit_57_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %65 = add nsw i32 %64, %61*/
	main_legup_memset_4_i64exit_65_reg_r1 = main_legup_memset_4_i64exit_57_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %65 = add nsw i32 %64, %61*/
	main_legup_memset_4_i64exit_65_reg_r2 = main_legup_memset_4_i64exit_57_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %66 = shl nsw i32 %12, 7*/
		main_legup_memset_4_i64exit_66_r0 = (main_legup_memset_4_i64exit_12_reg_r0 <<< (32'd7 % 32));
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %66 = shl nsw i32 %12, 7*/
		main_legup_memset_4_i64exit_66_r1 = (main_legup_memset_4_i64exit_12_reg_r1 <<< (32'd7 % 32));
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %66 = shl nsw i32 %12, 7*/
		main_legup_memset_4_i64exit_66_r2 = (main_legup_memset_4_i64exit_12_reg_r2 <<< (32'd7 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_66_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %66 = shl nsw i32 %12, 7*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_66_reg_r0 <= main_legup_memset_4_i64exit_66_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_66_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_66_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_66_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %66 = shl nsw i32 %12, 7*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_66_reg_r1 <= main_legup_memset_4_i64exit_66_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_66_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_66_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_66_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %66 = shl nsw i32 %12, 7*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_66_reg_r2 <= main_legup_memset_4_i64exit_66_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_66_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_66_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %67 = add nsw i32 %66, %63*/
		main_legup_memset_4_i64exit_67_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %67 = add nsw i32 %66, %63*/
		main_legup_memset_4_i64exit_67_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %67 = add nsw i32 %66, %63*/
		main_legup_memset_4_i64exit_67_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %67 = add nsw i32 %66, %63*/
	main_legup_memset_4_i64exit_67_reg_r0 = main_legup_memset_4_i64exit_59_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %67 = add nsw i32 %66, %63*/
	main_legup_memset_4_i64exit_67_reg_r1 = main_legup_memset_4_i64exit_59_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %67 = add nsw i32 %66, %63*/
	main_legup_memset_4_i64exit_67_reg_r2 = main_legup_memset_4_i64exit_59_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %68 = mul nsw i32 %11, -624*/
		main_legup_memset_4_i64exit_68_r0 = (main_legup_memset_4_i64exit_11_reg_r0 * -32'd624);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %68 = mul nsw i32 %11, -624*/
		main_legup_memset_4_i64exit_68_r1 = (main_legup_memset_4_i64exit_11_reg_r1 * -32'd624);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %68 = mul nsw i32 %11, -624*/
		main_legup_memset_4_i64exit_68_r2 = (main_legup_memset_4_i64exit_11_reg_r2 * -32'd624);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_68_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %68 = mul nsw i32 %11, -624*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_68_reg_r0 <= main_legup_memset_4_i64exit_68_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_68_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_68_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_68_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %68 = mul nsw i32 %11, -624*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_68_reg_r1 <= main_legup_memset_4_i64exit_68_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_68_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_68_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_68_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %68 = mul nsw i32 %11, -624*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_68_reg_r2 <= main_legup_memset_4_i64exit_68_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_68_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_68_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = add nsw i32 %68, %65*/
		main_legup_memset_4_i64exit_69_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = add nsw i32 %68, %65*/
		main_legup_memset_4_i64exit_69_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = add nsw i32 %68, %65*/
		main_legup_memset_4_i64exit_69_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %69 = add nsw i32 %68, %65*/
	main_legup_memset_4_i64exit_69_reg_r0 = main_legup_memset_4_i64exit_61_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %69 = add nsw i32 %68, %65*/
	main_legup_memset_4_i64exit_69_reg_r1 = main_legup_memset_4_i64exit_61_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %69 = add nsw i32 %68, %65*/
	main_legup_memset_4_i64exit_69_reg_r2 = main_legup_memset_4_i64exit_61_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %70 = mul nsw i32 %10, 48*/
		main_legup_memset_4_i64exit_70_r0 = (main_legup_memset_4_i64exit_10_reg_r0 * 32'd48);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %70 = mul nsw i32 %10, 48*/
		main_legup_memset_4_i64exit_70_r1 = (main_legup_memset_4_i64exit_10_reg_r1 * 32'd48);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %70 = mul nsw i32 %10, 48*/
		main_legup_memset_4_i64exit_70_r2 = (main_legup_memset_4_i64exit_10_reg_r2 * 32'd48);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_70_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %70 = mul nsw i32 %10, 48*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_70_reg_r0 <= main_legup_memset_4_i64exit_70_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_70_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_70_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_70_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %70 = mul nsw i32 %10, 48*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_70_reg_r1 <= main_legup_memset_4_i64exit_70_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_70_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_70_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_70_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %70 = mul nsw i32 %10, 48*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_70_reg_r2 <= main_legup_memset_4_i64exit_70_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_70_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_70_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = add nsw i32 %70, %67*/
		main_legup_memset_4_i64exit_71_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = add nsw i32 %70, %67*/
		main_legup_memset_4_i64exit_71_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = add nsw i32 %70, %67*/
		main_legup_memset_4_i64exit_71_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %71 = add nsw i32 %70, %67*/
	main_legup_memset_4_i64exit_71_reg_r0 = main_legup_memset_4_i64exit_43_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %71 = add nsw i32 %70, %67*/
	main_legup_memset_4_i64exit_71_reg_r1 = main_legup_memset_4_i64exit_43_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %71 = add nsw i32 %70, %67*/
	main_legup_memset_4_i64exit_71_reg_r2 = main_legup_memset_4_i64exit_43_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %72 = mul nsw i32 %9, 212*/
		main_legup_memset_4_i64exit_72_r0 = (main_legup_memset_4_i64exit_9_reg_r0 * 32'd212);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %72 = mul nsw i32 %9, 212*/
		main_legup_memset_4_i64exit_72_r1 = (main_legup_memset_4_i64exit_9_reg_r1 * 32'd212);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %72 = mul nsw i32 %9, 212*/
		main_legup_memset_4_i64exit_72_r2 = (main_legup_memset_4_i64exit_9_reg_r2 * 32'd212);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_72_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %72 = mul nsw i32 %9, 212*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_72_reg_r0 <= main_legup_memset_4_i64exit_72_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_72_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_72_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_72_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %72 = mul nsw i32 %9, 212*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_72_reg_r1 <= main_legup_memset_4_i64exit_72_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_72_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_72_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_72_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %72 = mul nsw i32 %9, 212*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_72_reg_r2 <= main_legup_memset_4_i64exit_72_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_72_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_72_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = add nsw i32 %72, %69*/
		main_legup_memset_4_i64exit_73_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = add nsw i32 %72, %69*/
		main_legup_memset_4_i64exit_73_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = add nsw i32 %72, %69*/
		main_legup_memset_4_i64exit_73_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %73 = add nsw i32 %72, %69*/
	main_legup_memset_4_i64exit_73_reg_r0 = main_legup_memset_4_i64exit_57_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %73 = add nsw i32 %72, %69*/
	main_legup_memset_4_i64exit_73_reg_r1 = main_legup_memset_4_i64exit_57_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %73 = add nsw i32 %72, %69*/
	main_legup_memset_4_i64exit_73_reg_r2 = main_legup_memset_4_i64exit_57_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %74 = mul nsw i32 %8, -44*/
		main_legup_memset_4_i64exit_74_r0 = (main_legup_memset_4_i64exit_8_reg_r0 * -32'd44);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %74 = mul nsw i32 %8, -44*/
		main_legup_memset_4_i64exit_74_r1 = (main_legup_memset_4_i64exit_8_reg_r1 * -32'd44);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %74 = mul nsw i32 %8, -44*/
		main_legup_memset_4_i64exit_74_r2 = (main_legup_memset_4_i64exit_8_reg_r2 * -32'd44);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_74_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %74 = mul nsw i32 %8, -44*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_74_reg_r0 <= main_legup_memset_4_i64exit_74_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_74_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_74_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_74_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %74 = mul nsw i32 %8, -44*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_74_reg_r1 <= main_legup_memset_4_i64exit_74_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_74_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_74_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_74_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %74 = mul nsw i32 %8, -44*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_74_reg_r2 <= main_legup_memset_4_i64exit_74_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_74_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_74_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = add nsw i32 %74, %71*/
		main_legup_memset_4_i64exit_75_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = add nsw i32 %74, %71*/
		main_legup_memset_4_i64exit_75_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = add nsw i32 %74, %71*/
		main_legup_memset_4_i64exit_75_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %75 = add nsw i32 %74, %71*/
	main_legup_memset_4_i64exit_75_reg_r0 = main_legup_memset_4_i64exit_61_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %75 = add nsw i32 %74, %71*/
	main_legup_memset_4_i64exit_75_reg_r1 = main_legup_memset_4_i64exit_61_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %75 = add nsw i32 %74, %71*/
	main_legup_memset_4_i64exit_75_reg_r2 = main_legup_memset_4_i64exit_61_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %76 = add nsw i32 %7, %73*/
		main_legup_memset_4_i64exit_76_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %76 = add nsw i32 %7, %73*/
		main_legup_memset_4_i64exit_76_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %76 = add nsw i32 %7, %73*/
		main_legup_memset_4_i64exit_76_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %76 = add nsw i32 %7, %73*/
	main_legup_memset_4_i64exit_76_reg_r0 = main_legup_memset_4_i64exit_59_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %76 = add nsw i32 %7, %73*/
	main_legup_memset_4_i64exit_76_reg_r1 = main_legup_memset_4_i64exit_59_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %76 = add nsw i32 %7, %73*/
	main_legup_memset_4_i64exit_76_reg_r2 = main_legup_memset_4_i64exit_59_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %77 = add nsw i32 %6, %75*/
		main_legup_memset_4_i64exit_77_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %77 = add nsw i32 %6, %75*/
		main_legup_memset_4_i64exit_77_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %77 = add nsw i32 %6, %75*/
		main_legup_memset_4_i64exit_77_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %78 = add nsw i32 %77, %76*/
		main_legup_memset_4_i64exit_78_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %78 = add nsw i32 %77, %76*/
		main_legup_memset_4_i64exit_78_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %78 = add nsw i32 %77, %76*/
		main_legup_memset_4_i64exit_78_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %79 = ashr i32 %78, 15*/
		main_legup_memset_4_i64exit_79_r0 = ($signed(main_legup_memset_4_i64exit_78_r0) >>> 32'd15);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %79 = ashr i32 %78, 15*/
		main_legup_memset_4_i64exit_79_r1 = ($signed(main_legup_memset_4_i64exit_78_r1) >>> 32'd15);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %79 = ashr i32 %78, 15*/
		main_legup_memset_4_i64exit_79_r2 = ($signed(main_legup_memset_4_i64exit_78_r2) >>> 32'd15);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_79_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %79 = ashr i32 %78, 15*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_79_reg_r0 <= main_legup_memset_4_i64exit_79_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_79_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_79_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_79_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %79 = ashr i32 %78, 15*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_79_reg_r1 <= main_legup_memset_4_i64exit_79_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_79_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_79_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_79_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %79 = ashr i32 %78, 15*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_79_reg_r2 <= main_legup_memset_4_i64exit_79_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_79_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_79_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %80 = sub nsw i32 %76, %77*/
		main_legup_memset_4_i64exit_80_r0 = (main_legup_memset_4_i64exit_76_reg_r0 - main_legup_memset_4_i64exit_77_r0);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %80 = sub nsw i32 %76, %77*/
		main_legup_memset_4_i64exit_80_r1 = (main_legup_memset_4_i64exit_76_reg_r1 - main_legup_memset_4_i64exit_77_r1);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %80 = sub nsw i32 %76, %77*/
		main_legup_memset_4_i64exit_80_r2 = (main_legup_memset_4_i64exit_76_reg_r2 - main_legup_memset_4_i64exit_77_r2);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %81 = ashr i32 %80, 15*/
		main_legup_memset_4_i64exit_81_r0 = ($signed(main_legup_memset_4_i64exit_80_r0) >>> 32'd15);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %81 = ashr i32 %80, 15*/
		main_legup_memset_4_i64exit_81_r1 = ($signed(main_legup_memset_4_i64exit_80_r1) >>> 32'd15);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %81 = ashr i32 %80, 15*/
		main_legup_memset_4_i64exit_81_r2 = ($signed(main_legup_memset_4_i64exit_80_r2) >>> 32'd15);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_81_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %81 = ashr i32 %80, 15*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_81_reg_r0 <= main_legup_memset_4_i64exit_81_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_81_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_81_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_81_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %81 = ashr i32 %80, 15*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_81_reg_r1 <= main_legup_memset_4_i64exit_81_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_81_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_81_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_81_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %81 = ashr i32 %80, 15*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_legup_memset_4_i64exit_81_reg_r2 <= main_legup_memset_4_i64exit_81_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_81_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_81_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_82_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_82_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_82_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_83_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_83_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_83_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %84 = mul nsw i32 %83, %82*/
		main_legup_memset_4_i64exit_84_r0 = (main_legup_memset_4_i64exit_83_r0 * main_legup_memset_4_i64exit_82_r0);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %84 = mul nsw i32 %83, %82*/
		main_legup_memset_4_i64exit_84_r1 = (main_legup_memset_4_i64exit_83_r1 * main_legup_memset_4_i64exit_82_r1);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %84 = mul nsw i32 %83, %82*/
		main_legup_memset_4_i64exit_84_r2 = (main_legup_memset_4_i64exit_83_r2 * main_legup_memset_4_i64exit_82_r2);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_84_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %84 = mul nsw i32 %83, %82*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_84_reg_r0 <= main_legup_memset_4_i64exit_84_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_84_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_84_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_84_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %84 = mul nsw i32 %83, %82*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_84_reg_r1 <= main_legup_memset_4_i64exit_84_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_84_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_84_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_84_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %84 = mul nsw i32 %83, %82*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_84_reg_r2 <= main_legup_memset_4_i64exit_84_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_84_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_84_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %85 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_85_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %85 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_85_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %85 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_85_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_86_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_86_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_86_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %87 = mul nsw i32 %86, %85*/
		main_legup_memset_4_i64exit_87_r0 = (main_legup_memset_4_i64exit_86_r0 * main_legup_memset_4_i64exit_85_r0);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %87 = mul nsw i32 %86, %85*/
		main_legup_memset_4_i64exit_87_r1 = (main_legup_memset_4_i64exit_86_r1 * main_legup_memset_4_i64exit_85_r1);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %87 = mul nsw i32 %86, %85*/
		main_legup_memset_4_i64exit_87_r2 = (main_legup_memset_4_i64exit_86_r2 * main_legup_memset_4_i64exit_85_r2);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_87_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %87 = mul nsw i32 %86, %85*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_87_reg_r0 <= main_legup_memset_4_i64exit_87_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_87_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_87_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_87_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %87 = mul nsw i32 %86, %85*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_87_reg_r1 <= main_legup_memset_4_i64exit_87_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_87_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_87_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_87_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %87 = mul nsw i32 %86, %85*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_87_reg_r2 <= main_legup_memset_4_i64exit_87_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_87_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_87_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = add nsw i32 %87, %84*/
		main_legup_memset_4_i64exit_88_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = add nsw i32 %87, %84*/
		main_legup_memset_4_i64exit_88_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = add nsw i32 %87, %84*/
		main_legup_memset_4_i64exit_88_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %89 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_89_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %89 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_89_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %89 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_89_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_90_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_90_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_90_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %91 = mul nsw i32 %90, %89*/
		main_legup_memset_4_i64exit_91_r0 = (main_legup_memset_4_i64exit_90_r0 * main_legup_memset_4_i64exit_89_r0);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %91 = mul nsw i32 %90, %89*/
		main_legup_memset_4_i64exit_91_r1 = (main_legup_memset_4_i64exit_90_r1 * main_legup_memset_4_i64exit_89_r1);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %91 = mul nsw i32 %90, %89*/
		main_legup_memset_4_i64exit_91_r2 = (main_legup_memset_4_i64exit_90_r2 * main_legup_memset_4_i64exit_89_r2);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_91_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %91 = mul nsw i32 %90, %89*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_91_reg_r0 <= main_legup_memset_4_i64exit_91_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_91_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_91_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_91_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %91 = mul nsw i32 %90, %89*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_91_reg_r1 <= main_legup_memset_4_i64exit_91_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_91_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_91_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_91_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %91 = mul nsw i32 %90, %89*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_91_reg_r2 <= main_legup_memset_4_i64exit_91_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_91_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_91_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = add nsw i32 %88, %91*/
		main_legup_memset_4_i64exit_92_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = add nsw i32 %88, %91*/
		main_legup_memset_4_i64exit_92_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = add nsw i32 %88, %91*/
		main_legup_memset_4_i64exit_92_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %92 = add nsw i32 %88, %91*/
	main_legup_memset_4_i64exit_92_reg_r0 = main_legup_memset_4_i64exit_59_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %92 = add nsw i32 %88, %91*/
	main_legup_memset_4_i64exit_92_reg_r1 = main_legup_memset_4_i64exit_59_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %92 = add nsw i32 %88, %91*/
	main_legup_memset_4_i64exit_92_reg_r2 = main_legup_memset_4_i64exit_59_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_93_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_93_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_93_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_94_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_94_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_94_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %95 = mul nsw i32 %94, %93*/
		main_legup_memset_4_i64exit_95_r0 = (main_legup_memset_4_i64exit_94_r0 * main_legup_memset_4_i64exit_93_r0);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %95 = mul nsw i32 %94, %93*/
		main_legup_memset_4_i64exit_95_r1 = (main_legup_memset_4_i64exit_94_r1 * main_legup_memset_4_i64exit_93_r1);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %95 = mul nsw i32 %94, %93*/
		main_legup_memset_4_i64exit_95_r2 = (main_legup_memset_4_i64exit_94_r2 * main_legup_memset_4_i64exit_93_r2);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_95_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %95 = mul nsw i32 %94, %93*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_95_reg_r0 <= main_legup_memset_4_i64exit_95_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_95_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_95_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_95_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %95 = mul nsw i32 %94, %93*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_95_reg_r1 <= main_legup_memset_4_i64exit_95_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_95_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_95_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_95_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %95 = mul nsw i32 %94, %93*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_95_reg_r2 <= main_legup_memset_4_i64exit_95_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_95_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_95_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = add nsw i32 %92, %95*/
		main_legup_memset_4_i64exit_96_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = add nsw i32 %92, %95*/
		main_legup_memset_4_i64exit_96_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = add nsw i32 %92, %95*/
		main_legup_memset_4_i64exit_96_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %96 = add nsw i32 %92, %95*/
	main_legup_memset_4_i64exit_96_reg_r0 = main_legup_memset_4_i64exit_55_reg_r0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %96 = add nsw i32 %92, %95*/
	main_legup_memset_4_i64exit_96_reg_r1 = main_legup_memset_4_i64exit_55_reg_r1;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %96 = add nsw i32 %92, %95*/
	main_legup_memset_4_i64exit_96_reg_r2 = main_legup_memset_4_i64exit_55_reg_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %97 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_97_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %97 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_97_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %97 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_97_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_98_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_98_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_98_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %99 = mul nsw i32 %98, %97*/
		main_legup_memset_4_i64exit_99_r0 = (main_legup_memset_4_i64exit_98_r0 * main_legup_memset_4_i64exit_97_r0);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %99 = mul nsw i32 %98, %97*/
		main_legup_memset_4_i64exit_99_r1 = (main_legup_memset_4_i64exit_98_r1 * main_legup_memset_4_i64exit_97_r1);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %99 = mul nsw i32 %98, %97*/
		main_legup_memset_4_i64exit_99_r2 = (main_legup_memset_4_i64exit_98_r2 * main_legup_memset_4_i64exit_97_r2);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_99_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %99 = mul nsw i32 %98, %97*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_99_reg_r0 <= main_legup_memset_4_i64exit_99_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_99_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_99_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_99_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %99 = mul nsw i32 %98, %97*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_99_reg_r1 <= main_legup_memset_4_i64exit_99_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_99_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_99_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_99_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %99 = mul nsw i32 %98, %97*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_99_reg_r2 <= main_legup_memset_4_i64exit_99_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_99_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_99_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = add nsw i32 %96, %99*/
		main_legup_memset_4_i64exit_100_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = add nsw i32 %96, %99*/
		main_legup_memset_4_i64exit_100_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = add nsw i32 %96, %99*/
		main_legup_memset_4_i64exit_100_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %101 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_101_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %101 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_101_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %101 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_101_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_102_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_102_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_102_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %103 = mul nsw i32 %102, %101*/
		main_legup_memset_4_i64exit_103_r0 = (main_legup_memset_4_i64exit_102_r0 * main_legup_memset_4_i64exit_101_r0);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %103 = mul nsw i32 %102, %101*/
		main_legup_memset_4_i64exit_103_r1 = (main_legup_memset_4_i64exit_102_r1 * main_legup_memset_4_i64exit_101_r1);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %103 = mul nsw i32 %102, %101*/
		main_legup_memset_4_i64exit_103_r2 = (main_legup_memset_4_i64exit_102_r2 * main_legup_memset_4_i64exit_101_r2);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_103_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %103 = mul nsw i32 %102, %101*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_103_reg_r0 <= main_legup_memset_4_i64exit_103_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_103_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_103_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_103_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %103 = mul nsw i32 %102, %101*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_103_reg_r1 <= main_legup_memset_4_i64exit_103_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_103_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_103_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_103_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %103 = mul nsw i32 %102, %101*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_103_reg_r2 <= main_legup_memset_4_i64exit_103_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_103_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_103_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = add nsw i32 %100, %103*/
		main_legup_memset_4_i64exit_104_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = add nsw i32 %100, %103*/
		main_legup_memset_4_i64exit_104_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = add nsw i32 %100, %103*/
		main_legup_memset_4_i64exit_104_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %105 = ashr i32 %104, 14*/
		main_legup_memset_4_i64exit_105_r0 = ($signed(main_legup_memset_4_i64exit_104_r0) >>> 32'd14);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %105 = ashr i32 %104, 14*/
		main_legup_memset_4_i64exit_105_r1 = ($signed(main_legup_memset_4_i64exit_104_r1) >>> 32'd14);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %105 = ashr i32 %104, 14*/
		main_legup_memset_4_i64exit_105_r2 = ($signed(main_legup_memset_4_i64exit_104_r2) >>> 32'd14);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_105_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %105 = ashr i32 %104, 14*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_legup_memset_4_i64exit_105_reg_r0 <= main_legup_memset_4_i64exit_105_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_105_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_105_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_105_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %105 = ashr i32 %104, 14*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_legup_memset_4_i64exit_105_reg_r1 <= main_legup_memset_4_i64exit_105_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_105_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_105_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_105_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %105 = ashr i32 %104, 14*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_legup_memset_4_i64exit_105_reg_r2 <= main_legup_memset_4_i64exit_105_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_105_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_105_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %106 = mul i32 %al1.0, %rlt1.0*/
		main_legup_memset_4_i64exit_106_r0 = (main_legup_memset_4_i64exit_al10_reg_r0 * main_legup_memset_4_i64exit_rlt10_reg_r0);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %106 = mul i32 %al1.0, %rlt1.0*/
		main_legup_memset_4_i64exit_106_r1 = (main_legup_memset_4_i64exit_al10_reg_r1 * main_legup_memset_4_i64exit_rlt10_reg_r1);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %106 = mul i32 %al1.0, %rlt1.0*/
		main_legup_memset_4_i64exit_106_r2 = (main_legup_memset_4_i64exit_al10_reg_r2 * main_legup_memset_4_i64exit_rlt10_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_106_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %106 = mul i32 %al1.0, %rlt1.0*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_106_reg_r0 <= main_legup_memset_4_i64exit_106_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_106_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_106_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_106_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %106 = mul i32 %al1.0, %rlt1.0*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_106_reg_r1 <= main_legup_memset_4_i64exit_106_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_106_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_106_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_106_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %106 = mul i32 %al1.0, %rlt1.0*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_106_reg_r2 <= main_legup_memset_4_i64exit_106_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_106_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_106_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %107 = mul i32 %al2.0, %rlt2.0*/
		main_legup_memset_4_i64exit_107_r0 = (main_legup_memset_4_i64exit_al20_reg_r0 * main_legup_memset_4_i64exit_rlt20_reg_r0);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %107 = mul i32 %al2.0, %rlt2.0*/
		main_legup_memset_4_i64exit_107_r1 = (main_legup_memset_4_i64exit_al20_reg_r1 * main_legup_memset_4_i64exit_rlt20_reg_r1);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %107 = mul i32 %al2.0, %rlt2.0*/
		main_legup_memset_4_i64exit_107_r2 = (main_legup_memset_4_i64exit_al20_reg_r2 * main_legup_memset_4_i64exit_rlt20_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_107_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %107 = mul i32 %al2.0, %rlt2.0*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_107_reg_r0 <= main_legup_memset_4_i64exit_107_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_107_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_107_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_107_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %107 = mul i32 %al2.0, %rlt2.0*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_107_reg_r1 <= main_legup_memset_4_i64exit_107_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_107_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_107_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_107_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %107 = mul i32 %al2.0, %rlt2.0*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_107_reg_r2 <= main_legup_memset_4_i64exit_107_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_107_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_107_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp.i.i1 = add i32 %107, %106*/
		main_legup_memset_4_i64exit_tmpii1_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp.i.i1 = add i32 %107, %106*/
		main_legup_memset_4_i64exit_tmpii1_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp.i.i1 = add i32 %107, %106*/
		main_legup_memset_4_i64exit_tmpii1_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp1.i.i2 = shl i32 %tmp.i.i1, 1*/
		main_legup_memset_4_i64exit_tmp1ii2_r0 = (main_legup_memset_4_i64exit_tmpii1_r0 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp1.i.i2 = shl i32 %tmp.i.i1, 1*/
		main_legup_memset_4_i64exit_tmp1ii2_r1 = (main_legup_memset_4_i64exit_tmpii1_r1 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp1.i.i2 = shl i32 %tmp.i.i1, 1*/
		main_legup_memset_4_i64exit_tmp1ii2_r2 = (main_legup_memset_4_i64exit_tmpii1_r2 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %108 = ashr i32 %tmp1.i.i2, 15*/
		main_legup_memset_4_i64exit_108_r0 = ($signed(main_legup_memset_4_i64exit_tmp1ii2_r0) >>> 32'd15);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %108 = ashr i32 %tmp1.i.i2, 15*/
		main_legup_memset_4_i64exit_108_r1 = ($signed(main_legup_memset_4_i64exit_tmp1ii2_r1) >>> 32'd15);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %108 = ashr i32 %tmp1.i.i2, 15*/
		main_legup_memset_4_i64exit_108_r2 = ($signed(main_legup_memset_4_i64exit_tmp1ii2_r2) >>> 32'd15);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = add nsw i32 %108, %105*/
		main_legup_memset_4_i64exit_109_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = add nsw i32 %108, %105*/
		main_legup_memset_4_i64exit_109_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = add nsw i32 %108, %105*/
		main_legup_memset_4_i64exit_109_r2 = main_signed_add_32_1_r2;
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_109_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = add nsw i32 %108, %105*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_legup_memset_4_i64exit_109_reg_r0 <= main_legup_memset_4_i64exit_109_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_109_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_109_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %399 = add nsw i32 %396, 192*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_legup_memset_4_i64exit_109_reg_r0 <= main_preheaderi_399_r0;
		if (start == 1'b0 && ^(main_preheaderi_399_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_109_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %418 = add nsw i32 %417, %414*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_legup_memset_4_i64exit_109_reg_r0 <= main_preheaderi_418_r0;
		if (start == 1'b0 && ^(main_preheaderi_418_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_109_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_109_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = add nsw i32 %108, %105*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_legup_memset_4_i64exit_109_reg_r1 <= main_legup_memset_4_i64exit_109_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_109_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_109_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %399 = add nsw i32 %396, 192*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_legup_memset_4_i64exit_109_reg_r1 <= main_preheaderi_399_r1;
		if (start == 1'b0 && ^(main_preheaderi_399_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_109_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %418 = add nsw i32 %417, %414*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_legup_memset_4_i64exit_109_reg_r1 <= main_preheaderi_418_r1;
		if (start == 1'b0 && ^(main_preheaderi_418_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_109_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_109_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = add nsw i32 %108, %105*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_legup_memset_4_i64exit_109_reg_r2 <= main_legup_memset_4_i64exit_109_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_109_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_109_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %399 = add nsw i32 %396, 192*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_legup_memset_4_i64exit_109_reg_r2 <= main_preheaderi_399_r2;
		if (start == 1'b0 && ^(main_preheaderi_399_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_109_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %418 = add nsw i32 %417, %414*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_legup_memset_4_i64exit_109_reg_r2 <= main_preheaderi_418_r2;
		if (start == 1'b0 && ^(main_preheaderi_418_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_109_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %110 = sub nsw i32 %79, %109*/
		main_legup_memset_4_i64exit_110_r0 = (main_legup_memset_4_i64exit_79_reg_r0 - main_legup_memset_4_i64exit_109_r0);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %110 = sub nsw i32 %79, %109*/
		main_legup_memset_4_i64exit_110_r1 = (main_legup_memset_4_i64exit_79_reg_r1 - main_legup_memset_4_i64exit_109_r1);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %110 = sub nsw i32 %79, %109*/
		main_legup_memset_4_i64exit_110_r2 = (main_legup_memset_4_i64exit_79_reg_r2 - main_legup_memset_4_i64exit_109_r2);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_110_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %110 = sub nsw i32 %79, %109*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_legup_memset_4_i64exit_110_reg_r0 <= main_legup_memset_4_i64exit_110_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_110_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_110_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_110_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %110 = sub nsw i32 %79, %109*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_legup_memset_4_i64exit_110_reg_r1 <= main_legup_memset_4_i64exit_110_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_110_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_110_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_110_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %110 = sub nsw i32 %79, %109*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_legup_memset_4_i64exit_110_reg_r2 <= main_legup_memset_4_i64exit_110_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_110_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_110_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %111 = icmp sgt i32 %110, -1*/
		main_legup_memset_4_i64exit_111_r0 = ($signed(main_legup_memset_4_i64exit_110_reg_r0) > $signed(-32'd1));
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %111 = icmp sgt i32 %110, -1*/
		main_legup_memset_4_i64exit_111_r1 = ($signed(main_legup_memset_4_i64exit_110_reg_r1) > $signed(-32'd1));
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %111 = icmp sgt i32 %110, -1*/
		main_legup_memset_4_i64exit_111_r2 = ($signed(main_legup_memset_4_i64exit_110_reg_r2) > $signed(-32'd1));
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_111_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %111 = icmp sgt i32 %110, -1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		main_legup_memset_4_i64exit_111_reg_r0 <= main_legup_memset_4_i64exit_111_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_111_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_111_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_111_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %111 = icmp sgt i32 %110, -1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		main_legup_memset_4_i64exit_111_reg_r1 <= main_legup_memset_4_i64exit_111_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_111_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_111_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_111_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %111 = icmp sgt i32 %110, -1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		main_legup_memset_4_i64exit_111_reg_r2 <= main_legup_memset_4_i64exit_111_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_111_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_111_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %112 = sub nsw i32 0, %110*/
		main_legup_memset_4_i64exit_112_r0 = (32'd0 - main_legup_memset_4_i64exit_110_reg_r0);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %112 = sub nsw i32 0, %110*/
		main_legup_memset_4_i64exit_112_r1 = (32'd0 - main_legup_memset_4_i64exit_110_reg_r1);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %112 = sub nsw i32 0, %110*/
		main_legup_memset_4_i64exit_112_r2 = (32'd0 - main_legup_memset_4_i64exit_110_reg_r2);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %m.0.i.i.i = select i1 %111, i32 %110, i32 %112*/
		main_legup_memset_4_i64exit_m0iii_r0 = (main_legup_memset_4_i64exit_111_r0 ? main_legup_memset_4_i64exit_110_reg_r0 : main_legup_memset_4_i64exit_112_r0);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %m.0.i.i.i = select i1 %111, i32 %110, i32 %112*/
		main_legup_memset_4_i64exit_m0iii_r1 = (main_legup_memset_4_i64exit_111_r1 ? main_legup_memset_4_i64exit_110_reg_r1 : main_legup_memset_4_i64exit_112_r1);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %m.0.i.i.i = select i1 %111, i32 %110, i32 %112*/
		main_legup_memset_4_i64exit_m0iii_r2 = (main_legup_memset_4_i64exit_111_r2 ? main_legup_memset_4_i64exit_110_reg_r2 : main_legup_memset_4_i64exit_112_r2);
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_m0iii_reg_r0 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %m.0.i.i.i = select i1 %111, i32 %110, i32 %112*/
	else if((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		main_legup_memset_4_i64exit_m0iii_reg_r0 <= main_legup_memset_4_i64exit_m0iii_r0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_m0iii_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_m0iii_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_m0iii_reg_r1 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %m.0.i.i.i = select i1 %111, i32 %110, i32 %112*/
	else if((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		main_legup_memset_4_i64exit_m0iii_reg_r1 <= main_legup_memset_4_i64exit_m0iii_r1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_m0iii_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_m0iii_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_legup_memset_4_i64exit_m0iii_reg_r2 <= 0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %m.0.i.i.i = select i1 %111, i32 %110, i32 %112*/
	else if((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		main_legup_memset_4_i64exit_m0iii_reg_r2 <= main_legup_memset_4_i64exit_m0iii_r2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_m0iii_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_m0iii_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %113*/
	/*   %114 = add nsw i32 %117, 1*/
		main_113_114_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %113*/
	/*   %114 = add nsw i32 %117, 1*/
		main_113_114_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %113*/
	/*   %114 = add nsw i32 %117, 1*/
		main_113_114_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
	/* main: %113*/
	/*   %115 = icmp slt i32 %118, 30*/
		main_113_115_r0 = ($signed(main_116_118_reg_r0) < $signed(32'd30));
end
always @(*) begin
	/* main: %113*/
	/*   %115 = icmp slt i32 %118, 30*/
		main_113_115_r1 = ($signed(main_116_118_reg_r1) < $signed(32'd30));
end
always @(*) begin
	/* main: %113*/
	/*   %115 = icmp slt i32 %118, 30*/
		main_113_115_r2 = ($signed(main_116_118_reg_r2) < $signed(32'd30));
end
always @(*) begin
	/* main: %116*/
	/*   %117 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %114, %113 ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_49) & (memory_controller_waitrequest == 1'd0))) begin
		main_116_117_r0 = 32'd0;
	end
	/* main: %116*/
	/*   %117 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %114, %113 ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB__113_50) & (memory_controller_waitrequest == 1'd0)) & (main_113_115_r0 == 1'd1))) */ begin
		main_116_117_r0 = main_113_114_r0;
	end
end
always @(*) begin
	/* main: %116*/
	/*   %117 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %114, %113 ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_49) & (memory_controller_waitrequest == 1'd0))) begin
		main_116_117_r1 = 32'd0;
	end
	/* main: %116*/
	/*   %117 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %114, %113 ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB__113_50) & (memory_controller_waitrequest == 1'd0)) & (main_113_115_r1 == 1'd1))) */ begin
		main_116_117_r1 = main_113_114_r1;
	end
end
always @(*) begin
	/* main: %116*/
	/*   %117 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %114, %113 ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_49) & (memory_controller_waitrequest == 1'd0))) begin
		main_116_117_r2 = 32'd0;
	end
	/* main: %116*/
	/*   %117 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %114, %113 ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB__113_50) & (memory_controller_waitrequest == 1'd0)) & (main_113_115_r2 == 1'd1))) */ begin
		main_116_117_r2 = main_113_114_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_116_117_reg_r0 <= 0;
	/* main: %116*/
	/*   %117 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %114, %113 ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_49) & (memory_controller_waitrequest == 1'd0))) begin
		main_116_117_reg_r0 <= main_116_117_r0;
		if (start == 1'b0 && ^(main_116_117_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_117_reg_r0"); $finish; end
	end
	/* main: %116*/
	/*   %117 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %114, %113 ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB__113_50) & (memory_controller_waitrequest == 1'd0)) & (main_113_115_r0 == 1'd1))) begin
		main_116_117_reg_r0 <= main_116_117_r0;
		if (start == 1'b0 && ^(main_116_117_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_117_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_116_117_reg_r1 <= 0;
	/* main: %116*/
	/*   %117 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %114, %113 ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_49) & (memory_controller_waitrequest == 1'd0))) begin
		main_116_117_reg_r1 <= main_116_117_r1;
		if (start == 1'b0 && ^(main_116_117_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_117_reg_r1"); $finish; end
	end
	/* main: %116*/
	/*   %117 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %114, %113 ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB__113_50) & (memory_controller_waitrequest == 1'd0)) & (main_113_115_r1 == 1'd1))) begin
		main_116_117_reg_r1 <= main_116_117_r1;
		if (start == 1'b0 && ^(main_116_117_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_117_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_116_117_reg_r2 <= 0;
	/* main: %116*/
	/*   %117 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %114, %113 ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_49) & (memory_controller_waitrequest == 1'd0))) begin
		main_116_117_reg_r2 <= main_116_117_r2;
		if (start == 1'b0 && ^(main_116_117_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_117_reg_r2"); $finish; end
	end
	/* main: %116*/
	/*   %117 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %114, %113 ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB__113_50) & (memory_controller_waitrequest == 1'd0)) & (main_113_115_r2 == 1'd1))) begin
		main_116_117_reg_r2 <= main_116_117_r2;
		if (start == 1'b0 && ^(main_116_117_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_117_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %116*/
	/*   %118 = add i32 %117, 1*/
		main_116_118_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %116*/
	/*   %118 = add i32 %117, 1*/
		main_116_118_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %116*/
	/*   %118 = add i32 %117, 1*/
		main_116_118_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %116*/
/*   %118 = add i32 %117, 1*/
	main_116_118_reg_r0 = main_legup_memset_4_i64exit_59_reg_r0;
end
always @(*) begin
/* main: %116*/
/*   %118 = add i32 %117, 1*/
	main_116_118_reg_r1 = main_legup_memset_4_i64exit_59_reg_r1;
end
always @(*) begin
/* main: %116*/
/*   %118 = add i32 %117, 1*/
	main_116_118_reg_r2 = main_legup_memset_4_i64exit_59_reg_r2;
end
always @(*) begin
	/* main: %116*/
	/*   %scevgep8 = getelementptr [30 x i32]* @decis_levl, i32 0, i32 %117*/
		main_116_scevgep8_r0 = (`TAG_g_decis_levl_a + (4 * main_116_117_reg_r0));
end
always @(*) begin
	/* main: %116*/
	/*   %scevgep8 = getelementptr [30 x i32]* @decis_levl, i32 0, i32 %117*/
		main_116_scevgep8_r1 = (`TAG_g_decis_levl_a + (4 * main_116_117_reg_r1));
end
always @(*) begin
	/* main: %116*/
	/*   %scevgep8 = getelementptr [30 x i32]* @decis_levl, i32 0, i32 %117*/
		main_116_scevgep8_r2 = (`TAG_g_decis_levl_a + (4 * main_116_117_reg_r2));
end
always @(*) begin
	/* main: %116*/
	/*   %119 = load i32* %scevgep8, align 4, !tbaa !1*/
		main_116_119_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %116*/
	/*   %119 = load i32* %scevgep8, align 4, !tbaa !1*/
		main_116_119_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %116*/
	/*   %119 = load i32* %scevgep8, align 4, !tbaa !1*/
		main_116_119_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %116*/
	/*   %120 = mul nsw i32 %119, %detl.0*/
		main_116_120_r0 = (main_116_119_r0 * main_legup_memset_4_i64exit_detl0_reg_r0);
end
always @(*) begin
	/* main: %116*/
	/*   %120 = mul nsw i32 %119, %detl.0*/
		main_116_120_r1 = (main_116_119_r1 * main_legup_memset_4_i64exit_detl0_reg_r1);
end
always @(*) begin
	/* main: %116*/
	/*   %120 = mul nsw i32 %119, %detl.0*/
		main_116_120_r2 = (main_116_119_r2 * main_legup_memset_4_i64exit_detl0_reg_r2);
end
always @(*) begin
	/* main: %116*/
	/*   %121 = ashr i32 %120, 15*/
		main_116_121_r0 = ($signed(main_116_120_r0) >>> 32'd15);
end
always @(*) begin
	/* main: %116*/
	/*   %121 = ashr i32 %120, 15*/
		main_116_121_r1 = ($signed(main_116_120_r1) >>> 32'd15);
end
always @(*) begin
	/* main: %116*/
	/*   %121 = ashr i32 %120, 15*/
		main_116_121_r2 = ($signed(main_116_120_r2) >>> 32'd15);
end
always @(*) begin
	/* main: %116*/
	/*   %122 = icmp sgt i32 %m.0.i.i.i, %121*/
		main_116_122_r0 = ($signed(main_legup_memset_4_i64exit_m0iii_reg_r0) > $signed(main_116_121_r0));
end
always @(*) begin
	/* main: %116*/
	/*   %122 = icmp sgt i32 %m.0.i.i.i, %121*/
		main_116_122_r1 = ($signed(main_legup_memset_4_i64exit_m0iii_reg_r1) > $signed(main_116_121_r1));
end
always @(*) begin
	/* main: %116*/
	/*   %122 = icmp sgt i32 %m.0.i.i.i, %121*/
		main_116_122_r2 = ($signed(main_legup_memset_4_i64exit_m0iii_reg_r2) > $signed(main_116_121_r2));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %117, %116 ], [ %118, %113 ]*/
	if ((((cur_state_v0 == LEGUP_F_main_BB__113_50) & (memory_controller_waitrequest == 1'd0)) & (main_113_115_r0 == 1'd0))) begin
		main_quantlexiti_mil0lcssaii_r0 = main_116_118_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %117, %116 ], [ %118, %113 ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB__116_53) & (memory_controller_waitrequest == 1'd0)) & (main_116_122_r0 == 1'd0))) */ begin
		main_quantlexiti_mil0lcssaii_r0 = main_116_117_reg_r0;
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %117, %116 ], [ %118, %113 ]*/
	if ((((cur_state_v1 == LEGUP_F_main_BB__113_50) & (memory_controller_waitrequest == 1'd0)) & (main_113_115_r1 == 1'd0))) begin
		main_quantlexiti_mil0lcssaii_r1 = main_116_118_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %117, %116 ], [ %118, %113 ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB__116_53) & (memory_controller_waitrequest == 1'd0)) & (main_116_122_r1 == 1'd0))) */ begin
		main_quantlexiti_mil0lcssaii_r1 = main_116_117_reg_r1;
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %117, %116 ], [ %118, %113 ]*/
	if ((((cur_state_v2 == LEGUP_F_main_BB__113_50) & (memory_controller_waitrequest == 1'd0)) & (main_113_115_r2 == 1'd0))) begin
		main_quantlexiti_mil0lcssaii_r2 = main_116_118_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %117, %116 ], [ %118, %113 ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB__116_53) & (memory_controller_waitrequest == 1'd0)) & (main_116_122_r2 == 1'd0))) */ begin
		main_quantlexiti_mil0lcssaii_r2 = main_116_117_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_mil0lcssaii_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %117, %116 ], [ %118, %113 ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB__113_50) & (memory_controller_waitrequest == 1'd0)) & (main_113_115_r0 == 1'd0))) begin
		main_quantlexiti_mil0lcssaii_reg_r0 <= main_quantlexiti_mil0lcssaii_r0;
		if (start == 1'b0 && ^(main_quantlexiti_mil0lcssaii_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_mil0lcssaii_reg_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %117, %116 ], [ %118, %113 ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB__116_53) & (memory_controller_waitrequest == 1'd0)) & (main_116_122_r0 == 1'd0))) begin
		main_quantlexiti_mil0lcssaii_reg_r0 <= main_quantlexiti_mil0lcssaii_r0;
		if (start == 1'b0 && ^(main_quantlexiti_mil0lcssaii_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_mil0lcssaii_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_mil0lcssaii_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %117, %116 ], [ %118, %113 ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB__113_50) & (memory_controller_waitrequest == 1'd0)) & (main_113_115_r1 == 1'd0))) begin
		main_quantlexiti_mil0lcssaii_reg_r1 <= main_quantlexiti_mil0lcssaii_r1;
		if (start == 1'b0 && ^(main_quantlexiti_mil0lcssaii_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_mil0lcssaii_reg_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %117, %116 ], [ %118, %113 ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB__116_53) & (memory_controller_waitrequest == 1'd0)) & (main_116_122_r1 == 1'd0))) begin
		main_quantlexiti_mil0lcssaii_reg_r1 <= main_quantlexiti_mil0lcssaii_r1;
		if (start == 1'b0 && ^(main_quantlexiti_mil0lcssaii_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_mil0lcssaii_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_mil0lcssaii_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %117, %116 ], [ %118, %113 ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB__113_50) & (memory_controller_waitrequest == 1'd0)) & (main_113_115_r2 == 1'd0))) begin
		main_quantlexiti_mil0lcssaii_reg_r2 <= main_quantlexiti_mil0lcssaii_r2;
		if (start == 1'b0 && ^(main_quantlexiti_mil0lcssaii_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_mil0lcssaii_reg_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %117, %116 ], [ %118, %113 ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB__116_53) & (memory_controller_waitrequest == 1'd0)) & (main_116_122_r2 == 1'd0))) begin
		main_quantlexiti_mil0lcssaii_reg_r2 <= main_quantlexiti_mil0lcssaii_r2;
		if (start == 1'b0 && ^(main_quantlexiti_mil0lcssaii_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_mil0lcssaii_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %quant26bt_pos.quant26bt_neg.i.i = select i1 %111, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
		main_quantlexiti_quant26bt_posquant26bt_negii_r0 = (main_legup_memset_4_i64exit_111_reg_r0 ? `TAG_g_quant26bt_pos_a : `TAG_g_quant26bt_neg_a);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %quant26bt_pos.quant26bt_neg.i.i = select i1 %111, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
		main_quantlexiti_quant26bt_posquant26bt_negii_r1 = (main_legup_memset_4_i64exit_111_reg_r1 ? `TAG_g_quant26bt_pos_a : `TAG_g_quant26bt_neg_a);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %quant26bt_pos.quant26bt_neg.i.i = select i1 %111, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
		main_quantlexiti_quant26bt_posquant26bt_negii_r2 = (main_legup_memset_4_i64exit_111_reg_r2 ? `TAG_g_quant26bt_pos_a : `TAG_g_quant26bt_neg_a);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_quant26bt_posquant26bt_negii_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %quant26bt_pos.quant26bt_neg.i.i = select i1 %111, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_quant26bt_posquant26bt_negii_reg_r0 <= main_quantlexiti_quant26bt_posquant26bt_negii_r0;
		if (start == 1'b0 && ^(main_quantlexiti_quant26bt_posquant26bt_negii_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_quant26bt_posquant26bt_negii_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_quant26bt_posquant26bt_negii_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %quant26bt_pos.quant26bt_neg.i.i = select i1 %111, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_quant26bt_posquant26bt_negii_reg_r1 <= main_quantlexiti_quant26bt_posquant26bt_negii_r1;
		if (start == 1'b0 && ^(main_quantlexiti_quant26bt_posquant26bt_negii_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_quant26bt_posquant26bt_negii_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_quant26bt_posquant26bt_negii_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %quant26bt_pos.quant26bt_neg.i.i = select i1 %111, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_quant26bt_posquant26bt_negii_reg_r2 <= main_quantlexiti_quant26bt_posquant26bt_negii_r2;
		if (start == 1'b0 && ^(main_quantlexiti_quant26bt_posquant26bt_negii_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_quant26bt_posquant26bt_negii_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.in.i.i = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg.i.i, i32 0, i32 %mil.0.lcssa.i.i*/
		main_quantlexiti_ril0inii_r0 = (main_quantlexiti_quant26bt_posquant26bt_negii_reg_r0 + (4 * main_quantlexiti_mil0lcssaii_reg_r0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.in.i.i = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg.i.i, i32 0, i32 %mil.0.lcssa.i.i*/
		main_quantlexiti_ril0inii_r1 = (main_quantlexiti_quant26bt_posquant26bt_negii_reg_r1 + (4 * main_quantlexiti_mil0lcssaii_reg_r1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.in.i.i = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg.i.i, i32 0, i32 %mil.0.lcssa.i.i*/
		main_quantlexiti_ril0inii_r2 = (main_quantlexiti_quant26bt_posquant26bt_negii_reg_r2 + (4 * main_quantlexiti_mil0lcssaii_reg_r2));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
		main_quantlexiti_ril0ii_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
		main_quantlexiti_ril0ii_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
		main_quantlexiti_ril0ii_r2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_ril0ii_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_57)) begin
		main_quantlexiti_ril0ii_reg_r0 <= main_quantlexiti_ril0ii_r0;
		if (start == 1'b0 && ^(main_quantlexiti_ril0ii_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ril0ii_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_ril0ii_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_57)) begin
		main_quantlexiti_ril0ii_reg_r1 <= main_quantlexiti_ril0ii_r1;
		if (start == 1'b0 && ^(main_quantlexiti_ril0ii_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ril0ii_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_ril0ii_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_57)) begin
		main_quantlexiti_ril0ii_reg_r2 <= main_quantlexiti_ril0ii_r2;
		if (start == 1'b0 && ^(main_quantlexiti_ril0ii_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ril0ii_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %123 = ashr i32 %ril.0.i.i, 2*/
		main_quantlexiti_123_r0 = ($signed(main_quantlexiti_ril0ii_r0) >>> 32'd2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %123 = ashr i32 %ril.0.i.i, 2*/
		main_quantlexiti_123_r1 = ($signed(main_quantlexiti_ril0ii_r1) >>> 32'd2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %123 = ashr i32 %ril.0.i.i, 2*/
		main_quantlexiti_123_r2 = ($signed(main_quantlexiti_ril0ii_r2) >>> 32'd2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %124 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %123*/
		main_quantlexiti_124_r0 = (`TAG_g_qq4_code4_table_a + (4 * main_quantlexiti_123_r0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %124 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %123*/
		main_quantlexiti_124_r1 = (`TAG_g_qq4_code4_table_a + (4 * main_quantlexiti_123_r1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %124 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %123*/
		main_quantlexiti_124_r2 = (`TAG_g_qq4_code4_table_a + (4 * main_quantlexiti_123_r2));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %125 = load i32* %124, align 4, !tbaa !1*/
		main_quantlexiti_125_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %125 = load i32* %124, align 4, !tbaa !1*/
		main_quantlexiti_125_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %125 = load i32* %124, align 4, !tbaa !1*/
		main_quantlexiti_125_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %126 = mul nsw i32 %125, %detl.0*/
		main_quantlexiti_126_r0 = (main_quantlexiti_125_r0 * main_legup_memset_4_i64exit_detl0_reg_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %126 = mul nsw i32 %125, %detl.0*/
		main_quantlexiti_126_r1 = (main_quantlexiti_125_r1 * main_legup_memset_4_i64exit_detl0_reg_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %126 = mul nsw i32 %125, %detl.0*/
		main_quantlexiti_126_r2 = (main_quantlexiti_125_r2 * main_legup_memset_4_i64exit_detl0_reg_r2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %127 = ashr i32 %126, 15*/
		main_quantlexiti_127_r0 = ($signed(main_quantlexiti_126_r0) >>> 32'd15);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %127 = ashr i32 %126, 15*/
		main_quantlexiti_127_r1 = ($signed(main_quantlexiti_126_r1) >>> 32'd15);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %127 = ashr i32 %126, 15*/
		main_quantlexiti_127_r2 = ($signed(main_quantlexiti_126_r2) >>> 32'd15);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_127_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %127 = ashr i32 %126, 15*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_quantlexiti_127_reg_r0 <= main_quantlexiti_127_r0;
		if (start == 1'b0 && ^(main_quantlexiti_127_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_127_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_127_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %127 = ashr i32 %126, 15*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_quantlexiti_127_reg_r1 <= main_quantlexiti_127_r1;
		if (start == 1'b0 && ^(main_quantlexiti_127_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_127_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_127_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %127 = ashr i32 %126, 15*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_quantlexiti_127_reg_r2 <= main_quantlexiti_127_r2;
		if (start == 1'b0 && ^(main_quantlexiti_127_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_127_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %128 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %123*/
		main_quantlexiti_128_r0 = (`TAG_g_wl_code_table_a + (4 * main_quantlexiti_123_r0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %128 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %123*/
		main_quantlexiti_128_r1 = (`TAG_g_wl_code_table_a + (4 * main_quantlexiti_123_r1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %128 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %123*/
		main_quantlexiti_128_r2 = (`TAG_g_wl_code_table_a + (4 * main_quantlexiti_123_r2));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %129 = load i32* %128, align 4, !tbaa !1*/
		main_quantlexiti_129_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %129 = load i32* %128, align 4, !tbaa !1*/
		main_quantlexiti_129_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %129 = load i32* %128, align 4, !tbaa !1*/
		main_quantlexiti_129_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %130 = add nsw i32 %nbl.0, %129*/
		main_quantlexiti_130_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %130 = add nsw i32 %nbl.0, %129*/
		main_quantlexiti_130_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %130 = add nsw i32 %nbl.0, %129*/
		main_quantlexiti_130_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %131 = icmp slt i32 %130, 0*/
		main_quantlexiti_131_r0 = ($signed(main_quantlexiti_130_r0) < $signed(32'd0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %131 = icmp slt i32 %130, 0*/
		main_quantlexiti_131_r1 = ($signed(main_quantlexiti_130_r1) < $signed(32'd0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %131 = icmp slt i32 %130, 0*/
		main_quantlexiti_131_r2 = ($signed(main_quantlexiti_130_r2) < $signed(32'd0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i12.i3 = select i1 %131, i32 0, i32 %130*/
		main_quantlexiti_i12i3_r0 = (main_quantlexiti_131_r0 ? 32'd0 : main_quantlexiti_130_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i12.i3 = select i1 %131, i32 0, i32 %130*/
		main_quantlexiti_i12i3_r1 = (main_quantlexiti_131_r1 ? 32'd0 : main_quantlexiti_130_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i12.i3 = select i1 %131, i32 0, i32 %130*/
		main_quantlexiti_i12i3_r2 = (main_quantlexiti_131_r2 ? 32'd0 : main_quantlexiti_130_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i12i3_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %..i12.i3 = select i1 %131, i32 0, i32 %130*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_quantlexiti_i12i3_reg_r0 <= main_quantlexiti_i12i3_r0;
		if (start == 1'b0 && ^(main_quantlexiti_i12i3_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i12i3_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i12i3_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %..i12.i3 = select i1 %131, i32 0, i32 %130*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_quantlexiti_i12i3_reg_r1 <= main_quantlexiti_i12i3_r1;
		if (start == 1'b0 && ^(main_quantlexiti_i12i3_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i12i3_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i12i3_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %..i12.i3 = select i1 %131, i32 0, i32 %130*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_quantlexiti_i12i3_reg_r2 <= main_quantlexiti_i12i3_r2;
		if (start == 1'b0 && ^(main_quantlexiti_i12i3_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i12i3_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %132 = icmp sgt i32 %..i12.i3, 18432*/
		main_quantlexiti_132_r0 = ($signed(main_quantlexiti_i12i3_reg_r0) > $signed(32'd18432));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %132 = icmp sgt i32 %..i12.i3, 18432*/
		main_quantlexiti_132_r1 = ($signed(main_quantlexiti_i12i3_reg_r1) > $signed(32'd18432));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %132 = icmp sgt i32 %..i12.i3, 18432*/
		main_quantlexiti_132_r2 = ($signed(main_quantlexiti_i12i3_reg_r2) > $signed(32'd18432));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i13.i4 = select i1 %132, i32 18432, i32 %..i12.i3*/
		main_quantlexiti_i13i4_r0 = (main_quantlexiti_132_r0 ? 32'd18432 : main_quantlexiti_i12i3_reg_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i13.i4 = select i1 %132, i32 18432, i32 %..i12.i3*/
		main_quantlexiti_i13i4_r1 = (main_quantlexiti_132_r1 ? 32'd18432 : main_quantlexiti_i12i3_reg_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i13.i4 = select i1 %132, i32 18432, i32 %..i12.i3*/
		main_quantlexiti_i13i4_r2 = (main_quantlexiti_132_r2 ? 32'd18432 : main_quantlexiti_i12i3_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i13i4_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %...i13.i4 = select i1 %132, i32 18432, i32 %..i12.i3*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_60)) begin
		main_quantlexiti_i13i4_reg_r0 <= main_quantlexiti_i13i4_r0;
		if (start == 1'b0 && ^(main_quantlexiti_i13i4_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i13i4_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i13i4_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %...i13.i4 = select i1 %132, i32 18432, i32 %..i12.i3*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_60)) begin
		main_quantlexiti_i13i4_reg_r1 <= main_quantlexiti_i13i4_r1;
		if (start == 1'b0 && ^(main_quantlexiti_i13i4_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i13i4_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i13i4_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %...i13.i4 = select i1 %132, i32 18432, i32 %..i12.i3*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_60)) begin
		main_quantlexiti_i13i4_reg_r2 <= main_quantlexiti_i13i4_r2;
		if (start == 1'b0 && ^(main_quantlexiti_i13i4_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i13i4_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %133 = lshr i32 %...i13.i4, 6*/
		main_quantlexiti_133_r0 = (main_quantlexiti_i13i4_r0 >>> (32'd6 % 32));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %133 = lshr i32 %...i13.i4, 6*/
		main_quantlexiti_133_r1 = (main_quantlexiti_i13i4_r1 >>> (32'd6 % 32));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %133 = lshr i32 %...i13.i4, 6*/
		main_quantlexiti_133_r2 = (main_quantlexiti_i13i4_r2 >>> (32'd6 % 32));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %134 = and i32 %133, 31*/
		main_quantlexiti_134_r0 = (main_quantlexiti_133_r0 & 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %134 = and i32 %133, 31*/
		main_quantlexiti_134_r1 = (main_quantlexiti_133_r1 & 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %134 = and i32 %133, 31*/
		main_quantlexiti_134_r2 = (main_quantlexiti_133_r2 & 32'd31);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_134_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %134 = and i32 %133, 31*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_60)) begin
		main_quantlexiti_134_reg_r0 <= main_quantlexiti_134_r0;
		if (start == 1'b0 && ^(main_quantlexiti_134_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_134_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_134_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %134 = and i32 %133, 31*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_60)) begin
		main_quantlexiti_134_reg_r1 <= main_quantlexiti_134_r1;
		if (start == 1'b0 && ^(main_quantlexiti_134_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_134_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_134_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %134 = and i32 %133, 31*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_60)) begin
		main_quantlexiti_134_reg_r2 <= main_quantlexiti_134_r2;
		if (start == 1'b0 && ^(main_quantlexiti_134_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_134_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %135 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %134*/
		main_quantlexiti_135_r0 = (`TAG_g_ilb_table_a + (4 * main_quantlexiti_134_reg_r0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %135 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %134*/
		main_quantlexiti_135_r1 = (`TAG_g_ilb_table_a + (4 * main_quantlexiti_134_reg_r1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %135 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %134*/
		main_quantlexiti_135_r2 = (`TAG_g_ilb_table_a + (4 * main_quantlexiti_134_reg_r2));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
		main_quantlexiti_136_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
		main_quantlexiti_136_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
		main_quantlexiti_136_r2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_136_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_quantlexiti_136_reg_r0 <= main_quantlexiti_136_r0;
		if (start == 1'b0 && ^(main_quantlexiti_136_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_136_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_136_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_quantlexiti_136_reg_r1 <= main_quantlexiti_136_r1;
		if (start == 1'b0 && ^(main_quantlexiti_136_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_136_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_136_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_quantlexiti_136_reg_r2 <= main_quantlexiti_136_r2;
		if (start == 1'b0 && ^(main_quantlexiti_136_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_136_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %137 = add nsw i32 %105, %127*/
		main_quantlexiti_137_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %137 = add nsw i32 %105, %127*/
		main_quantlexiti_137_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %137 = add nsw i32 %105, %127*/
		main_quantlexiti_137_r2 = main_signed_add_32_1_r2;
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_137_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %137 = add nsw i32 %105, %127*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_137_reg_r0 <= main_quantlexiti_137_r0;
		if (start == 1'b0 && ^(main_quantlexiti_137_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %434 = add nsw i32 %433, %430*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_quantlexiti_137_reg_r0 <= main_preheaderi_434_r0;
		if (start == 1'b0 && ^(main_preheaderi_434_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %440 = add nsw i32 %439, %436*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_quantlexiti_137_reg_r0 <= main_preheaderi_440_r0;
		if (start == 1'b0 && ^(main_preheaderi_440_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %449, %446*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_quantlexiti_137_reg_r0 <= main_preheaderi_450_r0;
		if (start == 1'b0 && ^(main_preheaderi_450_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %452 = add nsw i32 %451, %448*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_quantlexiti_137_reg_r0 <= main_preheaderi_452_r0;
		if (start == 1'b0 && ^(main_preheaderi_452_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r0"); $finish; end
	end
	/* main: %.preheader*/
	/*   %464 = add nsw i32 %i.11, 1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheader_184)) begin
		main_quantlexiti_137_reg_r0 <= main_preheader_464_r0;
		if (start == 1'b0 && ^(main_preheader_464_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %347 = add nsw i32 %343, %346*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_quantlexiti_137_reg_r0 <= main_preheaderi_347_r0;
		if (start == 1'b0 && ^(main_preheaderi_347_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %355 = add nsw i32 %351, %354*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_quantlexiti_137_reg_r0 <= main_preheaderi_355_r0;
		if (start == 1'b0 && ^(main_preheaderi_355_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %360 = add nsw i32 %359, %356*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_quantlexiti_137_reg_r0 <= main_preheaderi_360_r0;
		if (start == 1'b0 && ^(main_preheaderi_360_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %385, %391*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_quantlexiti_137_reg_r0 <= main_preheaderi_wd40ii_r0;
		if (start == 1'b0 && ^(main_preheaderi_wd40ii_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %410 = add nsw i32 %409, %407*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_quantlexiti_137_reg_r0 <= main_preheaderi_410_r0;
		if (start == 1'b0 && ^(main_preheaderi_410_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %422 = add nsw i32 %421, %418*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_quantlexiti_137_reg_r0 <= main_preheaderi_422_r0;
		if (start == 1'b0 && ^(main_preheaderi_422_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_137_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %137 = add nsw i32 %105, %127*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_137_reg_r1 <= main_quantlexiti_137_r1;
		if (start == 1'b0 && ^(main_quantlexiti_137_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %434 = add nsw i32 %433, %430*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_quantlexiti_137_reg_r1 <= main_preheaderi_434_r1;
		if (start == 1'b0 && ^(main_preheaderi_434_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %440 = add nsw i32 %439, %436*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_quantlexiti_137_reg_r1 <= main_preheaderi_440_r1;
		if (start == 1'b0 && ^(main_preheaderi_440_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %449, %446*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_quantlexiti_137_reg_r1 <= main_preheaderi_450_r1;
		if (start == 1'b0 && ^(main_preheaderi_450_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %452 = add nsw i32 %451, %448*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_quantlexiti_137_reg_r1 <= main_preheaderi_452_r1;
		if (start == 1'b0 && ^(main_preheaderi_452_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r1"); $finish; end
	end
	/* main: %.preheader*/
	/*   %464 = add nsw i32 %i.11, 1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheader_184)) begin
		main_quantlexiti_137_reg_r1 <= main_preheader_464_r1;
		if (start == 1'b0 && ^(main_preheader_464_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %347 = add nsw i32 %343, %346*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_quantlexiti_137_reg_r1 <= main_preheaderi_347_r1;
		if (start == 1'b0 && ^(main_preheaderi_347_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %355 = add nsw i32 %351, %354*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_quantlexiti_137_reg_r1 <= main_preheaderi_355_r1;
		if (start == 1'b0 && ^(main_preheaderi_355_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %360 = add nsw i32 %359, %356*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_quantlexiti_137_reg_r1 <= main_preheaderi_360_r1;
		if (start == 1'b0 && ^(main_preheaderi_360_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %385, %391*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_quantlexiti_137_reg_r1 <= main_preheaderi_wd40ii_r1;
		if (start == 1'b0 && ^(main_preheaderi_wd40ii_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %410 = add nsw i32 %409, %407*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_quantlexiti_137_reg_r1 <= main_preheaderi_410_r1;
		if (start == 1'b0 && ^(main_preheaderi_410_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %422 = add nsw i32 %421, %418*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_quantlexiti_137_reg_r1 <= main_preheaderi_422_r1;
		if (start == 1'b0 && ^(main_preheaderi_422_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_137_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %137 = add nsw i32 %105, %127*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_137_reg_r2 <= main_quantlexiti_137_r2;
		if (start == 1'b0 && ^(main_quantlexiti_137_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %434 = add nsw i32 %433, %430*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_quantlexiti_137_reg_r2 <= main_preheaderi_434_r2;
		if (start == 1'b0 && ^(main_preheaderi_434_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %440 = add nsw i32 %439, %436*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_quantlexiti_137_reg_r2 <= main_preheaderi_440_r2;
		if (start == 1'b0 && ^(main_preheaderi_440_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %449, %446*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_quantlexiti_137_reg_r2 <= main_preheaderi_450_r2;
		if (start == 1'b0 && ^(main_preheaderi_450_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %452 = add nsw i32 %451, %448*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_quantlexiti_137_reg_r2 <= main_preheaderi_452_r2;
		if (start == 1'b0 && ^(main_preheaderi_452_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r2"); $finish; end
	end
	/* main: %.preheader*/
	/*   %464 = add nsw i32 %i.11, 1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheader_184)) begin
		main_quantlexiti_137_reg_r2 <= main_preheader_464_r2;
		if (start == 1'b0 && ^(main_preheader_464_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %347 = add nsw i32 %343, %346*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_quantlexiti_137_reg_r2 <= main_preheaderi_347_r2;
		if (start == 1'b0 && ^(main_preheaderi_347_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %355 = add nsw i32 %351, %354*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_quantlexiti_137_reg_r2 <= main_preheaderi_355_r2;
		if (start == 1'b0 && ^(main_preheaderi_355_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %360 = add nsw i32 %359, %356*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_quantlexiti_137_reg_r2 <= main_preheaderi_360_r2;
		if (start == 1'b0 && ^(main_preheaderi_360_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %385, %391*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_quantlexiti_137_reg_r2 <= main_preheaderi_wd40ii_r2;
		if (start == 1'b0 && ^(main_preheaderi_wd40ii_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %410 = add nsw i32 %409, %407*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_quantlexiti_137_reg_r2 <= main_preheaderi_410_r2;
		if (start == 1'b0 && ^(main_preheaderi_410_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %422 = add nsw i32 %421, %418*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_quantlexiti_137_reg_r2 <= main_preheaderi_422_r2;
		if (start == 1'b0 && ^(main_preheaderi_422_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %138 = shl nsw i32 %al1.0, 2*/
		main_quantlexiti_138_r0 = (main_legup_memset_4_i64exit_al10_reg_r0 <<< (32'd2 % 32));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %138 = shl nsw i32 %al1.0, 2*/
		main_quantlexiti_138_r1 = (main_legup_memset_4_i64exit_al10_reg_r1 <<< (32'd2 % 32));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %138 = shl nsw i32 %al1.0, 2*/
		main_quantlexiti_138_r2 = (main_legup_memset_4_i64exit_al10_reg_r2 <<< (32'd2 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_138_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %138 = shl nsw i32 %al1.0, 2*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_138_reg_r0 <= main_quantlexiti_138_r0;
		if (start == 1'b0 && ^(main_quantlexiti_138_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_138_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_138_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %138 = shl nsw i32 %al1.0, 2*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_138_reg_r1 <= main_quantlexiti_138_r1;
		if (start == 1'b0 && ^(main_quantlexiti_138_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_138_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_138_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %138 = shl nsw i32 %al1.0, 2*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_138_reg_r2 <= main_quantlexiti_138_r2;
		if (start == 1'b0 && ^(main_quantlexiti_138_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_138_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %139 = mul nsw i32 %plt1.0, %137*/
		main_quantlexiti_139_r0 = (main_legup_memset_4_i64exit_plt10_reg_r0 * main_quantlexiti_137_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %139 = mul nsw i32 %plt1.0, %137*/
		main_quantlexiti_139_r1 = (main_legup_memset_4_i64exit_plt10_reg_r1 * main_quantlexiti_137_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %139 = mul nsw i32 %plt1.0, %137*/
		main_quantlexiti_139_r2 = (main_legup_memset_4_i64exit_plt10_reg_r2 * main_quantlexiti_137_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_139_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %139 = mul nsw i32 %plt1.0, %137*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_139_reg_r0 <= main_quantlexiti_139_r0;
		if (start == 1'b0 && ^(main_quantlexiti_139_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_139_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_139_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %139 = mul nsw i32 %plt1.0, %137*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_139_reg_r1 <= main_quantlexiti_139_r1;
		if (start == 1'b0 && ^(main_quantlexiti_139_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_139_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_139_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %139 = mul nsw i32 %plt1.0, %137*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_139_reg_r2 <= main_quantlexiti_139_r2;
		if (start == 1'b0 && ^(main_quantlexiti_139_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_139_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %140 = icmp sgt i32 %139, -1*/
		main_quantlexiti_140_r0 = ($signed(main_quantlexiti_139_reg_r0) > $signed(-32'd1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %140 = icmp sgt i32 %139, -1*/
		main_quantlexiti_140_r1 = ($signed(main_quantlexiti_139_reg_r1) > $signed(-32'd1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %140 = icmp sgt i32 %139, -1*/
		main_quantlexiti_140_r2 = ($signed(main_quantlexiti_139_reg_r2) > $signed(-32'd1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %141 = sub nsw i32 0, %138*/
		main_quantlexiti_141_r0 = (32'd0 - main_quantlexiti_138_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %141 = sub nsw i32 0, %138*/
		main_quantlexiti_141_r1 = (32'd0 - main_quantlexiti_138_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %141 = sub nsw i32 0, %138*/
		main_quantlexiti_141_r2 = (32'd0 - main_quantlexiti_138_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_141_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %141 = sub nsw i32 0, %138*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_141_reg_r0 <= main_quantlexiti_141_r0;
		if (start == 1'b0 && ^(main_quantlexiti_141_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_141_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_141_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %141 = sub nsw i32 0, %138*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_141_reg_r1 <= main_quantlexiti_141_r1;
		if (start == 1'b0 && ^(main_quantlexiti_141_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_141_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_141_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %141 = sub nsw i32 0, %138*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_141_reg_r2 <= main_quantlexiti_141_r2;
		if (start == 1'b0 && ^(main_quantlexiti_141_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_141_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i8.i5 = select i1 %140, i32 %141, i32 %138*/
		main_quantlexiti_1i8i5_r0 = (main_quantlexiti_140_r0 ? main_quantlexiti_141_reg_r0 : main_quantlexiti_138_reg_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i8.i5 = select i1 %140, i32 %141, i32 %138*/
		main_quantlexiti_1i8i5_r1 = (main_quantlexiti_140_r1 ? main_quantlexiti_141_reg_r1 : main_quantlexiti_138_reg_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i8.i5 = select i1 %140, i32 %141, i32 %138*/
		main_quantlexiti_1i8i5_r2 = (main_quantlexiti_140_r2 ? main_quantlexiti_141_reg_r2 : main_quantlexiti_138_reg_r2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %142 = ashr i32 %.1.i8.i5, 7*/
		main_quantlexiti_142_r0 = ($signed(main_quantlexiti_1i8i5_r0) >>> 32'd7);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %142 = ashr i32 %.1.i8.i5, 7*/
		main_quantlexiti_142_r1 = ($signed(main_quantlexiti_1i8i5_r1) >>> 32'd7);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %142 = ashr i32 %.1.i8.i5, 7*/
		main_quantlexiti_142_r2 = ($signed(main_quantlexiti_1i8i5_r2) >>> 32'd7);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %143 = mul nsw i32 %plt2.0, %137*/
		main_quantlexiti_143_r0 = (main_legup_memset_4_i64exit_plt20_reg_r0 * main_quantlexiti_137_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %143 = mul nsw i32 %plt2.0, %137*/
		main_quantlexiti_143_r1 = (main_legup_memset_4_i64exit_plt20_reg_r1 * main_quantlexiti_137_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %143 = mul nsw i32 %plt2.0, %137*/
		main_quantlexiti_143_r2 = (main_legup_memset_4_i64exit_plt20_reg_r2 * main_quantlexiti_137_r2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %144 = ashr i32 %143, 31*/
		main_quantlexiti_144_r0 = ($signed(main_quantlexiti_143_r0) >>> 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %144 = ashr i32 %143, 31*/
		main_quantlexiti_144_r1 = ($signed(main_quantlexiti_143_r1) >>> 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %144 = ashr i32 %143, 31*/
		main_quantlexiti_144_r2 = ($signed(main_quantlexiti_143_r2) >>> 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %145 = and i32 %144, -256*/
		main_quantlexiti_145_r0 = (main_quantlexiti_144_r0 & -32'd256);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %145 = and i32 %144, -256*/
		main_quantlexiti_145_r1 = (main_quantlexiti_144_r1 & -32'd256);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %145 = and i32 %144, -256*/
		main_quantlexiti_145_r2 = (main_quantlexiti_144_r2 & -32'd256);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %146 = or i32 %145, 128*/
		main_quantlexiti_146_r0 = (main_quantlexiti_145_r0 | 32'd128);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %146 = or i32 %145, 128*/
		main_quantlexiti_146_r1 = (main_quantlexiti_145_r1 | 32'd128);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %146 = or i32 %145, 128*/
		main_quantlexiti_146_r2 = (main_quantlexiti_145_r2 | 32'd128);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_146_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %146 = or i32 %145, 128*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_146_reg_r0 <= main_quantlexiti_146_r0;
		if (start == 1'b0 && ^(main_quantlexiti_146_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_146_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_146_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %146 = or i32 %145, 128*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_146_reg_r1 <= main_quantlexiti_146_r1;
		if (start == 1'b0 && ^(main_quantlexiti_146_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_146_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_146_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %146 = or i32 %145, 128*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_146_reg_r2 <= main_quantlexiti_146_r2;
		if (start == 1'b0 && ^(main_quantlexiti_146_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_146_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %147 = mul nsw i32 %al2.0, 127*/
		main_quantlexiti_147_r0 = (main_legup_memset_4_i64exit_al20_reg_r0 * 32'd127);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %147 = mul nsw i32 %al2.0, 127*/
		main_quantlexiti_147_r1 = (main_legup_memset_4_i64exit_al20_reg_r1 * 32'd127);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %147 = mul nsw i32 %al2.0, 127*/
		main_quantlexiti_147_r2 = (main_legup_memset_4_i64exit_al20_reg_r2 * 32'd127);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %148 = ashr i32 %147, 7*/
		main_quantlexiti_148_r0 = ($signed(main_quantlexiti_147_r0) >>> 32'd7);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %148 = ashr i32 %147, 7*/
		main_quantlexiti_148_r1 = ($signed(main_quantlexiti_147_r1) >>> 32'd7);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %148 = ashr i32 %147, 7*/
		main_quantlexiti_148_r2 = ($signed(main_quantlexiti_147_r2) >>> 32'd7);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_148_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %148 = ashr i32 %147, 7*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_148_reg_r0 <= main_quantlexiti_148_r0;
		if (start == 1'b0 && ^(main_quantlexiti_148_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_148_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_148_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %148 = ashr i32 %147, 7*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_148_reg_r1 <= main_quantlexiti_148_r1;
		if (start == 1'b0 && ^(main_quantlexiti_148_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_148_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_148_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %148 = ashr i32 %147, 7*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_148_reg_r2 <= main_quantlexiti_148_r2;
		if (start == 1'b0 && ^(main_quantlexiti_148_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_148_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i9.i6 = add nsw i32 %142, %148*/
		main_quantlexiti_wd40i9i6_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i9.i6 = add nsw i32 %142, %148*/
		main_quantlexiti_wd40i9i6_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i9.i6 = add nsw i32 %142, %148*/
		main_quantlexiti_wd40i9i6_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %wd4.0.i9.i6 = add nsw i32 %142, %148*/
	main_quantlexiti_wd40i9i6_reg_r0 = main_legup_memset_4_i64exit_59_reg_r0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %wd4.0.i9.i6 = add nsw i32 %142, %148*/
	main_quantlexiti_wd40i9i6_reg_r1 = main_legup_memset_4_i64exit_59_reg_r1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %wd4.0.i9.i6 = add nsw i32 %142, %148*/
	main_quantlexiti_wd40i9i6_reg_r2 = main_legup_memset_4_i64exit_59_reg_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %149 = add nsw i32 %wd4.0.i9.i6, %146*/
		main_quantlexiti_149_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %149 = add nsw i32 %wd4.0.i9.i6, %146*/
		main_quantlexiti_149_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %149 = add nsw i32 %wd4.0.i9.i6, %146*/
		main_quantlexiti_149_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %150 = icmp sgt i32 %149, 12288*/
		main_quantlexiti_150_r0 = ($signed(main_quantlexiti_149_r0) > $signed(32'd12288));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %150 = icmp sgt i32 %149, 12288*/
		main_quantlexiti_150_r1 = ($signed(main_quantlexiti_149_r1) > $signed(32'd12288));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %150 = icmp sgt i32 %149, 12288*/
		main_quantlexiti_150_r2 = ($signed(main_quantlexiti_149_r2) > $signed(32'd12288));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i10.i7 = select i1 %150, i32 12288, i32 %149*/
		main_quantlexiti_i10i7_r0 = (main_quantlexiti_150_r0 ? 32'd12288 : main_quantlexiti_149_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i10.i7 = select i1 %150, i32 12288, i32 %149*/
		main_quantlexiti_i10i7_r1 = (main_quantlexiti_150_r1 ? 32'd12288 : main_quantlexiti_149_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i10.i7 = select i1 %150, i32 12288, i32 %149*/
		main_quantlexiti_i10i7_r2 = (main_quantlexiti_150_r2 ? 32'd12288 : main_quantlexiti_149_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i10i7_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %..i10.i7 = select i1 %150, i32 12288, i32 %149*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_quantlexiti_i10i7_reg_r0 <= main_quantlexiti_i10i7_r0;
		if (start == 1'b0 && ^(main_quantlexiti_i10i7_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i10i7_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i10i7_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %..i10.i7 = select i1 %150, i32 12288, i32 %149*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_quantlexiti_i10i7_reg_r1 <= main_quantlexiti_i10i7_r1;
		if (start == 1'b0 && ^(main_quantlexiti_i10i7_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i10i7_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i10i7_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %..i10.i7 = select i1 %150, i32 12288, i32 %149*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_quantlexiti_i10i7_reg_r2 <= main_quantlexiti_i10i7_r2;
		if (start == 1'b0 && ^(main_quantlexiti_i10i7_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i10i7_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %151 = icmp slt i32 %..i10.i7, -12288*/
		main_quantlexiti_151_r0 = ($signed(main_quantlexiti_i10i7_reg_r0) < $signed(-32'd12288));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %151 = icmp slt i32 %..i10.i7, -12288*/
		main_quantlexiti_151_r1 = ($signed(main_quantlexiti_i10i7_reg_r1) < $signed(-32'd12288));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %151 = icmp slt i32 %..i10.i7, -12288*/
		main_quantlexiti_151_r2 = ($signed(main_quantlexiti_i10i7_reg_r2) < $signed(-32'd12288));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i11.i8 = select i1 %151, i32 -12288, i32 %..i10.i7*/
		main_quantlexiti_i11i8_r0 = (main_quantlexiti_151_r0 ? -32'd12288 : main_quantlexiti_i10i7_reg_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i11.i8 = select i1 %151, i32 -12288, i32 %..i10.i7*/
		main_quantlexiti_i11i8_r1 = (main_quantlexiti_151_r1 ? -32'd12288 : main_quantlexiti_i10i7_reg_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i11.i8 = select i1 %151, i32 -12288, i32 %..i10.i7*/
		main_quantlexiti_i11i8_r2 = (main_quantlexiti_151_r2 ? -32'd12288 : main_quantlexiti_i10i7_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i11i8_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %...i11.i8 = select i1 %151, i32 -12288, i32 %..i10.i7*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_quantlexiti_i11i8_reg_r0 <= main_quantlexiti_i11i8_r0;
		if (start == 1'b0 && ^(main_quantlexiti_i11i8_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i11i8_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i11i8_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %...i11.i8 = select i1 %151, i32 -12288, i32 %..i10.i7*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_quantlexiti_i11i8_reg_r1 <= main_quantlexiti_i11i8_r1;
		if (start == 1'b0 && ^(main_quantlexiti_i11i8_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i11i8_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i11i8_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %...i11.i8 = select i1 %151, i32 -12288, i32 %..i10.i7*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_quantlexiti_i11i8_reg_r2 <= main_quantlexiti_i11i8_r2;
		if (start == 1'b0 && ^(main_quantlexiti_i11i8_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i11i8_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %152 = mul nsw i32 %al1.0, 255*/
		main_quantlexiti_152_r0 = (main_legup_memset_4_i64exit_al10_reg_r0 * 32'd255);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %152 = mul nsw i32 %al1.0, 255*/
		main_quantlexiti_152_r1 = (main_legup_memset_4_i64exit_al10_reg_r1 * 32'd255);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %152 = mul nsw i32 %al1.0, 255*/
		main_quantlexiti_152_r2 = (main_legup_memset_4_i64exit_al10_reg_r2 * 32'd255);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %153 = ashr i32 %152, 8*/
		main_quantlexiti_153_r0 = ($signed(main_quantlexiti_152_r0) >>> 32'd8);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %153 = ashr i32 %152, 8*/
		main_quantlexiti_153_r1 = ($signed(main_quantlexiti_152_r1) >>> 32'd8);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %153 = ashr i32 %152, 8*/
		main_quantlexiti_153_r2 = ($signed(main_quantlexiti_152_r2) >>> 32'd8);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_153_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %153 = ashr i32 %152, 8*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_153_reg_r0 <= main_quantlexiti_153_r0;
		if (start == 1'b0 && ^(main_quantlexiti_153_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_153_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_153_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %153 = ashr i32 %152, 8*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_153_reg_r1 <= main_quantlexiti_153_r1;
		if (start == 1'b0 && ^(main_quantlexiti_153_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_153_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_153_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %153 = ashr i32 %152, 8*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_153_reg_r2 <= main_quantlexiti_153_r2;
		if (start == 1'b0 && ^(main_quantlexiti_153_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_153_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %154 = ashr i32 %139, 31*/
		main_quantlexiti_154_r0 = ($signed(main_quantlexiti_139_r0) >>> 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %154 = ashr i32 %139, 31*/
		main_quantlexiti_154_r1 = ($signed(main_quantlexiti_139_r1) >>> 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %154 = ashr i32 %139, 31*/
		main_quantlexiti_154_r2 = ($signed(main_quantlexiti_139_r2) >>> 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %155 = and i32 %154, -384*/
		main_quantlexiti_155_r0 = (main_quantlexiti_154_r0 & -32'd384);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %155 = and i32 %154, -384*/
		main_quantlexiti_155_r1 = (main_quantlexiti_154_r1 & -32'd384);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %155 = and i32 %154, -384*/
		main_quantlexiti_155_r2 = (main_quantlexiti_154_r2 & -32'd384);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_155_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %155 = and i32 %154, -384*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_155_reg_r0 <= main_quantlexiti_155_r0;
		if (start == 1'b0 && ^(main_quantlexiti_155_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_155_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_155_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %155 = and i32 %154, -384*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_155_reg_r1 <= main_quantlexiti_155_r1;
		if (start == 1'b0 && ^(main_quantlexiti_155_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_155_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_155_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %155 = and i32 %154, -384*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_155_reg_r2 <= main_quantlexiti_155_r2;
		if (start == 1'b0 && ^(main_quantlexiti_155_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_155_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %156 = add nsw i32 %153, 192*/
		main_quantlexiti_156_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %156 = add nsw i32 %153, 192*/
		main_quantlexiti_156_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %156 = add nsw i32 %153, 192*/
		main_quantlexiti_156_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %156 = add nsw i32 %153, 192*/
	main_quantlexiti_156_reg_r0 = main_legup_memset_4_i64exit_57_reg_r0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %156 = add nsw i32 %153, 192*/
	main_quantlexiti_156_reg_r1 = main_legup_memset_4_i64exit_57_reg_r1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %156 = add nsw i32 %153, 192*/
	main_quantlexiti_156_reg_r2 = main_legup_memset_4_i64exit_57_reg_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i5.i9 = add nsw i32 %156, %155*/
		main_quantlexiti_apl10i5i9_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i5.i9 = add nsw i32 %156, %155*/
		main_quantlexiti_apl10i5i9_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i5.i9 = add nsw i32 %156, %155*/
		main_quantlexiti_apl10i5i9_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %157 = sub nsw i32 15360, %...i11.i8*/
		main_quantlexiti_157_r0 = (32'd15360 - main_quantlexiti_i11i8_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %157 = sub nsw i32 15360, %...i11.i8*/
		main_quantlexiti_157_r1 = (32'd15360 - main_quantlexiti_i11i8_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %157 = sub nsw i32 15360, %...i11.i8*/
		main_quantlexiti_157_r2 = (32'd15360 - main_quantlexiti_i11i8_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_157_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %157 = sub nsw i32 15360, %...i11.i8*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_quantlexiti_157_reg_r0 <= main_quantlexiti_157_r0;
		if (start == 1'b0 && ^(main_quantlexiti_157_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_157_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_157_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %157 = sub nsw i32 15360, %...i11.i8*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_quantlexiti_157_reg_r1 <= main_quantlexiti_157_r1;
		if (start == 1'b0 && ^(main_quantlexiti_157_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_157_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_157_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %157 = sub nsw i32 15360, %...i11.i8*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_quantlexiti_157_reg_r2 <= main_quantlexiti_157_r2;
		if (start == 1'b0 && ^(main_quantlexiti_157_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_157_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %158 = icmp sgt i32 %apl1.0.i5.i9, %157*/
		main_quantlexiti_158_r0 = ($signed(main_quantlexiti_apl10i5i9_r0) > $signed(main_quantlexiti_157_reg_r0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %158 = icmp sgt i32 %apl1.0.i5.i9, %157*/
		main_quantlexiti_158_r1 = ($signed(main_quantlexiti_apl10i5i9_r1) > $signed(main_quantlexiti_157_reg_r1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %158 = icmp sgt i32 %apl1.0.i5.i9, %157*/
		main_quantlexiti_158_r2 = ($signed(main_quantlexiti_apl10i5i9_r2) > $signed(main_quantlexiti_157_reg_r2));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i6.i10 = select i1 %158, i32 %157, i32 %apl1.0.i5.i9*/
		main_quantlexiti_apl10i6i10_r0 = (main_quantlexiti_158_r0 ? main_quantlexiti_157_reg_r0 : main_quantlexiti_apl10i5i9_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i6.i10 = select i1 %158, i32 %157, i32 %apl1.0.i5.i9*/
		main_quantlexiti_apl10i6i10_r1 = (main_quantlexiti_158_r1 ? main_quantlexiti_157_reg_r1 : main_quantlexiti_apl10i5i9_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i6.i10 = select i1 %158, i32 %157, i32 %apl1.0.i5.i9*/
		main_quantlexiti_apl10i6i10_r2 = (main_quantlexiti_158_r2 ? main_quantlexiti_157_reg_r2 : main_quantlexiti_apl10i5i9_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_apl10i6i10_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i6.i10 = select i1 %158, i32 %157, i32 %apl1.0.i5.i9*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_apl10i6i10_reg_r0 <= main_quantlexiti_apl10i6i10_r0;
		if (start == 1'b0 && ^(main_quantlexiti_apl10i6i10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl10i6i10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_apl10i6i10_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i6.i10 = select i1 %158, i32 %157, i32 %apl1.0.i5.i9*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_apl10i6i10_reg_r1 <= main_quantlexiti_apl10i6i10_r1;
		if (start == 1'b0 && ^(main_quantlexiti_apl10i6i10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl10i6i10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_apl10i6i10_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i6.i10 = select i1 %158, i32 %157, i32 %apl1.0.i5.i9*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_apl10i6i10_reg_r2 <= main_quantlexiti_apl10i6i10_r2;
		if (start == 1'b0 && ^(main_quantlexiti_apl10i6i10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl10i6i10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %159 = sub nsw i32 0, %157*/
		main_quantlexiti_159_r0 = (32'd0 - main_quantlexiti_157_reg_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %159 = sub nsw i32 0, %157*/
		main_quantlexiti_159_r1 = (32'd0 - main_quantlexiti_157_reg_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %159 = sub nsw i32 0, %157*/
		main_quantlexiti_159_r2 = (32'd0 - main_quantlexiti_157_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_159_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %159 = sub nsw i32 0, %157*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_159_reg_r0 <= main_quantlexiti_159_r0;
		if (start == 1'b0 && ^(main_quantlexiti_159_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_159_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_159_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %159 = sub nsw i32 0, %157*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_159_reg_r1 <= main_quantlexiti_159_r1;
		if (start == 1'b0 && ^(main_quantlexiti_159_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_159_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_159_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %159 = sub nsw i32 0, %157*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_159_reg_r2 <= main_quantlexiti_159_r2;
		if (start == 1'b0 && ^(main_quantlexiti_159_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_159_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %160 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
		main_quantlexiti_160_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %160 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
		main_quantlexiti_160_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %160 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
		main_quantlexiti_160_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
		main_quantlexiti_161_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
		main_quantlexiti_161_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
		main_quantlexiti_161_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %162 = mul nsw i32 %161, %160*/
		main_quantlexiti_162_r0 = (main_quantlexiti_161_r0 * main_quantlexiti_160_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %162 = mul nsw i32 %161, %160*/
		main_quantlexiti_162_r1 = (main_quantlexiti_161_r1 * main_quantlexiti_160_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %162 = mul nsw i32 %161, %160*/
		main_quantlexiti_162_r2 = (main_quantlexiti_161_r2 * main_quantlexiti_160_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_162_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %162 = mul nsw i32 %161, %160*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_162_reg_r0 <= main_quantlexiti_162_r0;
		if (start == 1'b0 && ^(main_quantlexiti_162_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_162_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_162_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %162 = mul nsw i32 %161, %160*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_162_reg_r1 <= main_quantlexiti_162_r1;
		if (start == 1'b0 && ^(main_quantlexiti_162_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_162_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_162_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %162 = mul nsw i32 %161, %160*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_162_reg_r2 <= main_quantlexiti_162_r2;
		if (start == 1'b0 && ^(main_quantlexiti_162_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_162_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %163 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
		main_quantlexiti_163_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %163 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
		main_quantlexiti_163_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %163 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
		main_quantlexiti_163_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
		main_quantlexiti_164_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
		main_quantlexiti_164_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
		main_quantlexiti_164_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %165 = mul nsw i32 %164, %163*/
		main_quantlexiti_165_r0 = (main_quantlexiti_164_r0 * main_quantlexiti_163_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %165 = mul nsw i32 %164, %163*/
		main_quantlexiti_165_r1 = (main_quantlexiti_164_r1 * main_quantlexiti_163_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %165 = mul nsw i32 %164, %163*/
		main_quantlexiti_165_r2 = (main_quantlexiti_164_r2 * main_quantlexiti_163_r2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %166 = add nsw i32 %165, %162*/
		main_quantlexiti_166_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %166 = add nsw i32 %165, %162*/
		main_quantlexiti_166_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %166 = add nsw i32 %165, %162*/
		main_quantlexiti_166_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %166 = add nsw i32 %165, %162*/
	main_quantlexiti_166_reg_r0 = main_legup_memset_4_i64exit_59_reg_r0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %166 = add nsw i32 %165, %162*/
	main_quantlexiti_166_reg_r1 = main_legup_memset_4_i64exit_59_reg_r1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %166 = add nsw i32 %165, %162*/
	main_quantlexiti_166_reg_r2 = main_legup_memset_4_i64exit_59_reg_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %167 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
		main_quantlexiti_167_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %167 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
		main_quantlexiti_167_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %167 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
		main_quantlexiti_167_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
		main_quantlexiti_168_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
		main_quantlexiti_168_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
		main_quantlexiti_168_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %169 = mul nsw i32 %168, %167*/
		main_quantlexiti_169_r0 = (main_quantlexiti_168_r0 * main_quantlexiti_167_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %169 = mul nsw i32 %168, %167*/
		main_quantlexiti_169_r1 = (main_quantlexiti_168_r1 * main_quantlexiti_167_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %169 = mul nsw i32 %168, %167*/
		main_quantlexiti_169_r2 = (main_quantlexiti_168_r2 * main_quantlexiti_167_r2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %170 = add nsw i32 %166, %169*/
		main_quantlexiti_170_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %170 = add nsw i32 %166, %169*/
		main_quantlexiti_170_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %170 = add nsw i32 %166, %169*/
		main_quantlexiti_170_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %170 = add nsw i32 %166, %169*/
	main_quantlexiti_170_reg_r0 = main_legup_memset_4_i64exit_57_reg_r0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %170 = add nsw i32 %166, %169*/
	main_quantlexiti_170_reg_r1 = main_legup_memset_4_i64exit_57_reg_r1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %170 = add nsw i32 %166, %169*/
	main_quantlexiti_170_reg_r2 = main_legup_memset_4_i64exit_57_reg_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %171 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
		main_quantlexiti_171_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %171 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
		main_quantlexiti_171_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %171 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
		main_quantlexiti_171_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
		main_quantlexiti_172_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
		main_quantlexiti_172_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
		main_quantlexiti_172_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %173 = mul nsw i32 %172, %171*/
		main_quantlexiti_173_r0 = (main_quantlexiti_172_r0 * main_quantlexiti_171_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %173 = mul nsw i32 %172, %171*/
		main_quantlexiti_173_r1 = (main_quantlexiti_172_r1 * main_quantlexiti_171_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %173 = mul nsw i32 %172, %171*/
		main_quantlexiti_173_r2 = (main_quantlexiti_172_r2 * main_quantlexiti_171_r2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %174 = add nsw i32 %170, %173*/
		main_quantlexiti_174_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %174 = add nsw i32 %170, %173*/
		main_quantlexiti_174_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %174 = add nsw i32 %170, %173*/
		main_quantlexiti_174_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %174 = add nsw i32 %170, %173*/
	main_quantlexiti_174_reg_r0 = main_legup_memset_4_i64exit_59_reg_r0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %174 = add nsw i32 %170, %173*/
	main_quantlexiti_174_reg_r1 = main_legup_memset_4_i64exit_59_reg_r1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %174 = add nsw i32 %170, %173*/
	main_quantlexiti_174_reg_r2 = main_legup_memset_4_i64exit_59_reg_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %175 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
		main_quantlexiti_175_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %175 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
		main_quantlexiti_175_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %175 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
		main_quantlexiti_175_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
		main_quantlexiti_176_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
		main_quantlexiti_176_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
		main_quantlexiti_176_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %177 = mul nsw i32 %176, %175*/
		main_quantlexiti_177_r0 = (main_quantlexiti_176_r0 * main_quantlexiti_175_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %177 = mul nsw i32 %176, %175*/
		main_quantlexiti_177_r1 = (main_quantlexiti_176_r1 * main_quantlexiti_175_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %177 = mul nsw i32 %176, %175*/
		main_quantlexiti_177_r2 = (main_quantlexiti_176_r2 * main_quantlexiti_175_r2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %178 = add nsw i32 %174, %177*/
		main_quantlexiti_178_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %178 = add nsw i32 %174, %177*/
		main_quantlexiti_178_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %178 = add nsw i32 %174, %177*/
		main_quantlexiti_178_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %178 = add nsw i32 %174, %177*/
	main_quantlexiti_178_reg_r0 = main_legup_memset_4_i64exit_57_reg_r0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %178 = add nsw i32 %174, %177*/
	main_quantlexiti_178_reg_r1 = main_legup_memset_4_i64exit_57_reg_r1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %178 = add nsw i32 %174, %177*/
	main_quantlexiti_178_reg_r2 = main_legup_memset_4_i64exit_57_reg_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %179 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
		main_quantlexiti_179_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %179 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
		main_quantlexiti_179_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %179 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
		main_quantlexiti_179_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
		main_quantlexiti_180_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
		main_quantlexiti_180_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
		main_quantlexiti_180_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %181 = mul nsw i32 %180, %179*/
		main_quantlexiti_181_r0 = (main_quantlexiti_180_r0 * main_quantlexiti_179_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %181 = mul nsw i32 %180, %179*/
		main_quantlexiti_181_r1 = (main_quantlexiti_180_r1 * main_quantlexiti_179_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %181 = mul nsw i32 %180, %179*/
		main_quantlexiti_181_r2 = (main_quantlexiti_180_r2 * main_quantlexiti_179_r2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %182 = add nsw i32 %178, %181*/
		main_quantlexiti_182_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %182 = add nsw i32 %178, %181*/
		main_quantlexiti_182_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %182 = add nsw i32 %178, %181*/
		main_quantlexiti_182_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %183 = ashr i32 %182, 14*/
		main_quantlexiti_183_r0 = ($signed(main_quantlexiti_182_r0) >>> 32'd14);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %183 = ashr i32 %182, 14*/
		main_quantlexiti_183_r1 = ($signed(main_quantlexiti_182_r1) >>> 32'd14);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %183 = ashr i32 %182, 14*/
		main_quantlexiti_183_r2 = ($signed(main_quantlexiti_182_r2) >>> 32'd14);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_183_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %183 = ashr i32 %182, 14*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_183_reg_r0 <= main_quantlexiti_183_r0;
		if (start == 1'b0 && ^(main_quantlexiti_183_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_183_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_183_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %183 = ashr i32 %182, 14*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_183_reg_r1 <= main_quantlexiti_183_r1;
		if (start == 1'b0 && ^(main_quantlexiti_183_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_183_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_183_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %183 = ashr i32 %182, 14*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_183_reg_r2 <= main_quantlexiti_183_r2;
		if (start == 1'b0 && ^(main_quantlexiti_183_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_183_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %184 = mul i32 %ah1.0, %rh1.0*/
		main_quantlexiti_184_r0 = (main_legup_memset_4_i64exit_ah10_reg_r0 * main_legup_memset_4_i64exit_rh10_reg_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %184 = mul i32 %ah1.0, %rh1.0*/
		main_quantlexiti_184_r1 = (main_legup_memset_4_i64exit_ah10_reg_r1 * main_legup_memset_4_i64exit_rh10_reg_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %184 = mul i32 %ah1.0, %rh1.0*/
		main_quantlexiti_184_r2 = (main_legup_memset_4_i64exit_ah10_reg_r2 * main_legup_memset_4_i64exit_rh10_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_184_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %184 = mul i32 %ah1.0, %rh1.0*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_184_reg_r0 <= main_quantlexiti_184_r0;
		if (start == 1'b0 && ^(main_quantlexiti_184_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_184_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_184_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %184 = mul i32 %ah1.0, %rh1.0*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_184_reg_r1 <= main_quantlexiti_184_r1;
		if (start == 1'b0 && ^(main_quantlexiti_184_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_184_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_184_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %184 = mul i32 %ah1.0, %rh1.0*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_184_reg_r2 <= main_quantlexiti_184_r2;
		if (start == 1'b0 && ^(main_quantlexiti_184_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_184_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %185 = mul i32 %ah2.0, %rh2.0*/
		main_quantlexiti_185_r0 = (main_legup_memset_4_i64exit_ah20_reg_r0 * main_legup_memset_4_i64exit_rh20_reg_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %185 = mul i32 %ah2.0, %rh2.0*/
		main_quantlexiti_185_r1 = (main_legup_memset_4_i64exit_ah20_reg_r1 * main_legup_memset_4_i64exit_rh20_reg_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %185 = mul i32 %ah2.0, %rh2.0*/
		main_quantlexiti_185_r2 = (main_legup_memset_4_i64exit_ah20_reg_r2 * main_legup_memset_4_i64exit_rh20_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_185_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %185 = mul i32 %ah2.0, %rh2.0*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_185_reg_r0 <= main_quantlexiti_185_r0;
		if (start == 1'b0 && ^(main_quantlexiti_185_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_185_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_185_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %185 = mul i32 %ah2.0, %rh2.0*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_185_reg_r1 <= main_quantlexiti_185_r1;
		if (start == 1'b0 && ^(main_quantlexiti_185_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_185_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_185_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %185 = mul i32 %ah2.0, %rh2.0*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_185_reg_r2 <= main_quantlexiti_185_r2;
		if (start == 1'b0 && ^(main_quantlexiti_185_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_185_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %tmp.i3.i12 = add i32 %185, %184*/
		main_quantlexiti_tmpi3i12_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %tmp.i3.i12 = add i32 %185, %184*/
		main_quantlexiti_tmpi3i12_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %tmp.i3.i12 = add i32 %185, %184*/
		main_quantlexiti_tmpi3i12_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %tmp1.i4.i13 = shl i32 %tmp.i3.i12, 1*/
		main_quantlexiti_tmp1i4i13_r0 = (main_quantlexiti_tmpi3i12_r0 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %tmp1.i4.i13 = shl i32 %tmp.i3.i12, 1*/
		main_quantlexiti_tmp1i4i13_r1 = (main_quantlexiti_tmpi3i12_r1 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %tmp1.i4.i13 = shl i32 %tmp.i3.i12, 1*/
		main_quantlexiti_tmp1i4i13_r2 = (main_quantlexiti_tmpi3i12_r2 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %186 = ashr i32 %tmp1.i4.i13, 15*/
		main_quantlexiti_186_r0 = ($signed(main_quantlexiti_tmp1i4i13_r0) >>> 32'd15);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %186 = ashr i32 %tmp1.i4.i13, 15*/
		main_quantlexiti_186_r1 = ($signed(main_quantlexiti_tmp1i4i13_r1) >>> 32'd15);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %186 = ashr i32 %tmp1.i4.i13, 15*/
		main_quantlexiti_186_r2 = ($signed(main_quantlexiti_tmp1i4i13_r2) >>> 32'd15);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_186_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %186 = ashr i32 %tmp1.i4.i13, 15*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_186_reg_r0 <= main_quantlexiti_186_r0;
		if (start == 1'b0 && ^(main_quantlexiti_186_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_186_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_186_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %186 = ashr i32 %tmp1.i4.i13, 15*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_186_reg_r1 <= main_quantlexiti_186_r1;
		if (start == 1'b0 && ^(main_quantlexiti_186_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_186_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_186_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %186 = ashr i32 %tmp1.i4.i13, 15*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_186_reg_r2 <= main_quantlexiti_186_r2;
		if (start == 1'b0 && ^(main_quantlexiti_186_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_186_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %187 = add nsw i32 %186, %183*/
		main_quantlexiti_187_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %187 = add nsw i32 %186, %183*/
		main_quantlexiti_187_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %187 = add nsw i32 %186, %183*/
		main_quantlexiti_187_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %187 = add nsw i32 %186, %183*/
	main_quantlexiti_187_reg_r0 = main_legup_memset_4_i64exit_43_reg_r0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %187 = add nsw i32 %186, %183*/
	main_quantlexiti_187_reg_r1 = main_legup_memset_4_i64exit_43_reg_r1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %187 = add nsw i32 %186, %183*/
	main_quantlexiti_187_reg_r2 = main_legup_memset_4_i64exit_43_reg_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %188 = sub nsw i32 %81, %187*/
		main_quantlexiti_188_r0 = (main_legup_memset_4_i64exit_81_reg_r0 - main_quantlexiti_187_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %188 = sub nsw i32 %81, %187*/
		main_quantlexiti_188_r1 = (main_legup_memset_4_i64exit_81_reg_r1 - main_quantlexiti_187_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %188 = sub nsw i32 %81, %187*/
		main_quantlexiti_188_r2 = (main_legup_memset_4_i64exit_81_reg_r2 - main_quantlexiti_187_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_188_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %188 = sub nsw i32 %81, %187*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_188_reg_r0 <= main_quantlexiti_188_r0;
		if (start == 1'b0 && ^(main_quantlexiti_188_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_188_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_188_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %188 = sub nsw i32 %81, %187*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_188_reg_r1 <= main_quantlexiti_188_r1;
		if (start == 1'b0 && ^(main_quantlexiti_188_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_188_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_188_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %188 = sub nsw i32 %81, %187*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_188_reg_r2 <= main_quantlexiti_188_r2;
		if (start == 1'b0 && ^(main_quantlexiti_188_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_188_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %189 = ashr i32 %188, 31*/
		main_quantlexiti_189_r0 = ($signed(main_quantlexiti_188_r0) >>> 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %189 = ashr i32 %188, 31*/
		main_quantlexiti_189_r1 = ($signed(main_quantlexiti_188_r1) >>> 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %189 = ashr i32 %188, 31*/
		main_quantlexiti_189_r2 = ($signed(main_quantlexiti_188_r2) >>> 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %190 = and i32 %189, -2*/
		main_quantlexiti_190_r0 = (main_quantlexiti_189_r0 & -32'd2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %190 = and i32 %189, -2*/
		main_quantlexiti_190_r1 = (main_quantlexiti_189_r1 & -32'd2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %190 = and i32 %189, -2*/
		main_quantlexiti_190_r2 = (main_quantlexiti_189_r2 & -32'd2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_190_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %190 = and i32 %189, -2*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_190_reg_r0 <= main_quantlexiti_190_r0;
		if (start == 1'b0 && ^(main_quantlexiti_190_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_190_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_190_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %190 = and i32 %189, -2*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_190_reg_r1 <= main_quantlexiti_190_r1;
		if (start == 1'b0 && ^(main_quantlexiti_190_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_190_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_190_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %190 = and i32 %189, -2*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_190_reg_r2 <= main_quantlexiti_190_r2;
		if (start == 1'b0 && ^(main_quantlexiti_190_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_190_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %191 = mul nsw i32 %deth.0, 564*/
		main_quantlexiti_191_r0 = (main_legup_memset_4_i64exit_deth0_reg_r0 * 32'd564);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %191 = mul nsw i32 %deth.0, 564*/
		main_quantlexiti_191_r1 = (main_legup_memset_4_i64exit_deth0_reg_r1 * 32'd564);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %191 = mul nsw i32 %deth.0, 564*/
		main_quantlexiti_191_r2 = (main_legup_memset_4_i64exit_deth0_reg_r2 * 32'd564);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %192 = ashr i32 %191, 12*/
		main_quantlexiti_192_r0 = ($signed(main_quantlexiti_191_r0) >>> 32'd12);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %192 = ashr i32 %191, 12*/
		main_quantlexiti_192_r1 = ($signed(main_quantlexiti_191_r1) >>> 32'd12);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %192 = ashr i32 %191, 12*/
		main_quantlexiti_192_r2 = ($signed(main_quantlexiti_191_r2) >>> 32'd12);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_192_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %192 = ashr i32 %191, 12*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_192_reg_r0 <= main_quantlexiti_192_r0;
		if (start == 1'b0 && ^(main_quantlexiti_192_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_192_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_192_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %192 = ashr i32 %191, 12*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_192_reg_r1 <= main_quantlexiti_192_r1;
		if (start == 1'b0 && ^(main_quantlexiti_192_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_192_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_192_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %192 = ashr i32 %191, 12*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_192_reg_r2 <= main_quantlexiti_192_r2;
		if (start == 1'b0 && ^(main_quantlexiti_192_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_192_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %193 = icmp sgt i32 %188, -1*/
		main_quantlexiti_193_r0 = ($signed(main_quantlexiti_188_r0) > $signed(-32'd1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %193 = icmp sgt i32 %188, -1*/
		main_quantlexiti_193_r1 = ($signed(main_quantlexiti_188_r1) > $signed(-32'd1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %193 = icmp sgt i32 %188, -1*/
		main_quantlexiti_193_r2 = ($signed(main_quantlexiti_188_r2) > $signed(-32'd1));
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_193_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %193 = icmp sgt i32 %188, -1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_193_reg_r0 <= main_quantlexiti_193_r0;
		if (start == 1'b0 && ^(main_quantlexiti_193_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_193_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_193_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %193 = icmp sgt i32 %188, -1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_193_reg_r1 <= main_quantlexiti_193_r1;
		if (start == 1'b0 && ^(main_quantlexiti_193_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_193_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_193_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %193 = icmp sgt i32 %188, -1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_193_reg_r2 <= main_quantlexiti_193_r2;
		if (start == 1'b0 && ^(main_quantlexiti_193_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_193_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %194 = sub nsw i32 0, %188*/
		main_quantlexiti_194_r0 = (32'd0 - main_quantlexiti_188_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %194 = sub nsw i32 0, %188*/
		main_quantlexiti_194_r1 = (32'd0 - main_quantlexiti_188_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %194 = sub nsw i32 0, %188*/
		main_quantlexiti_194_r2 = (32'd0 - main_quantlexiti_188_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_194_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %194 = sub nsw i32 0, %188*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_194_reg_r0 <= main_quantlexiti_194_r0;
		if (start == 1'b0 && ^(main_quantlexiti_194_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_194_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_194_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %194 = sub nsw i32 0, %188*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_194_reg_r1 <= main_quantlexiti_194_r1;
		if (start == 1'b0 && ^(main_quantlexiti_194_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_194_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_194_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %194 = sub nsw i32 0, %188*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_194_reg_r2 <= main_quantlexiti_194_r2;
		if (start == 1'b0 && ^(main_quantlexiti_194_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_194_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %m.0.i.i = select i1 %193, i32 %188, i32 %194*/
		main_quantlexiti_m0ii_r0 = (main_quantlexiti_193_reg_r0 ? main_quantlexiti_188_reg_r0 : main_quantlexiti_194_reg_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %m.0.i.i = select i1 %193, i32 %188, i32 %194*/
		main_quantlexiti_m0ii_r1 = (main_quantlexiti_193_reg_r1 ? main_quantlexiti_188_reg_r1 : main_quantlexiti_194_reg_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %m.0.i.i = select i1 %193, i32 %188, i32 %194*/
		main_quantlexiti_m0ii_r2 = (main_quantlexiti_193_reg_r2 ? main_quantlexiti_188_reg_r2 : main_quantlexiti_194_reg_r2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %195 = icmp sgt i32 %m.0.i.i, %192*/
		main_quantlexiti_195_r0 = ($signed(main_quantlexiti_m0ii_r0) > $signed(main_quantlexiti_192_reg_r0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %195 = icmp sgt i32 %m.0.i.i, %192*/
		main_quantlexiti_195_r1 = ($signed(main_quantlexiti_m0ii_r1) > $signed(main_quantlexiti_192_reg_r1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %195 = icmp sgt i32 %m.0.i.i, %192*/
		main_quantlexiti_195_r2 = ($signed(main_quantlexiti_m0ii_r2) > $signed(main_quantlexiti_192_reg_r2));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..v = select i1 %195, i32 2, i32 3*/
		main_quantlexiti_v_r0 = (main_quantlexiti_195_r0 ? 32'd2 : 32'd3);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..v = select i1 %195, i32 2, i32 3*/
		main_quantlexiti_v_r1 = (main_quantlexiti_195_r1 ? 32'd2 : 32'd3);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..v = select i1 %195, i32 2, i32 3*/
		main_quantlexiti_v_r2 = (main_quantlexiti_195_r2 ? 32'd2 : 32'd3);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_v_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %..v = select i1 %195, i32 2, i32 3*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_v_reg_r0 <= main_quantlexiti_v_r0;
		if (start == 1'b0 && ^(main_quantlexiti_v_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_v_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_v_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %..v = select i1 %195, i32 2, i32 3*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_v_reg_r1 <= main_quantlexiti_v_r1;
		if (start == 1'b0 && ^(main_quantlexiti_v_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_v_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_v_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %..v = select i1 %195, i32 2, i32 3*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_v_reg_r2 <= main_quantlexiti_v_r2;
		if (start == 1'b0 && ^(main_quantlexiti_v_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_v_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %. = add nsw i32 %190, %..v*/
		main_quantlexiti__r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %. = add nsw i32 %190, %..v*/
		main_quantlexiti__r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %. = add nsw i32 %190, %..v*/
		main_quantlexiti__r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %. = add nsw i32 %190, %..v*/
	main_quantlexiti__reg_r0 = main_legup_memset_4_i64exit_57_reg_r0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %. = add nsw i32 %190, %..v*/
	main_quantlexiti__reg_r1 = main_legup_memset_4_i64exit_57_reg_r1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %. = add nsw i32 %190, %..v*/
	main_quantlexiti__reg_r2 = main_legup_memset_4_i64exit_57_reg_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %196 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %.*/
		main_quantlexiti_196_r0 = (`TAG_g_qq2_code2_table_a + (4 * main_quantlexiti__reg_r0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %196 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %.*/
		main_quantlexiti_196_r1 = (`TAG_g_qq2_code2_table_a + (4 * main_quantlexiti__reg_r1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %196 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %.*/
		main_quantlexiti_196_r2 = (`TAG_g_qq2_code2_table_a + (4 * main_quantlexiti__reg_r2));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
		main_quantlexiti_197_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
		main_quantlexiti_197_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
		main_quantlexiti_197_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %198 = mul nsw i32 %197, %deth.0*/
		main_quantlexiti_198_r0 = (main_quantlexiti_197_r0 * main_legup_memset_4_i64exit_deth0_reg_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %198 = mul nsw i32 %197, %deth.0*/
		main_quantlexiti_198_r1 = (main_quantlexiti_197_r1 * main_legup_memset_4_i64exit_deth0_reg_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %198 = mul nsw i32 %197, %deth.0*/
		main_quantlexiti_198_r2 = (main_quantlexiti_197_r2 * main_legup_memset_4_i64exit_deth0_reg_r2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %199 = ashr i32 %198, 15*/
		main_quantlexiti_199_r0 = ($signed(main_quantlexiti_198_r0) >>> 32'd15);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %199 = ashr i32 %198, 15*/
		main_quantlexiti_199_r1 = ($signed(main_quantlexiti_198_r1) >>> 32'd15);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %199 = ashr i32 %198, 15*/
		main_quantlexiti_199_r2 = ($signed(main_quantlexiti_198_r2) >>> 32'd15);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_199_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %199 = ashr i32 %198, 15*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_quantlexiti_199_reg_r0 <= main_quantlexiti_199_r0;
		if (start == 1'b0 && ^(main_quantlexiti_199_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_199_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_199_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %199 = ashr i32 %198, 15*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_quantlexiti_199_reg_r1 <= main_quantlexiti_199_r1;
		if (start == 1'b0 && ^(main_quantlexiti_199_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_199_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_199_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %199 = ashr i32 %198, 15*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_quantlexiti_199_reg_r2 <= main_quantlexiti_199_r2;
		if (start == 1'b0 && ^(main_quantlexiti_199_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_199_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %200 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %.*/
		main_quantlexiti_200_r0 = (`TAG_g_wh_code_table_a + (4 * main_quantlexiti__reg_r0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %200 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %.*/
		main_quantlexiti_200_r1 = (`TAG_g_wh_code_table_a + (4 * main_quantlexiti__reg_r1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %200 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %.*/
		main_quantlexiti_200_r2 = (`TAG_g_wh_code_table_a + (4 * main_quantlexiti__reg_r2));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %201 = load i32* %200, align 4, !tbaa !1*/
		main_quantlexiti_201_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %201 = load i32* %200, align 4, !tbaa !1*/
		main_quantlexiti_201_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %201 = load i32* %200, align 4, !tbaa !1*/
		main_quantlexiti_201_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %202 = add nsw i32 %nbh.0, %201*/
		main_quantlexiti_202_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %202 = add nsw i32 %nbh.0, %201*/
		main_quantlexiti_202_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %202 = add nsw i32 %nbh.0, %201*/
		main_quantlexiti_202_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %203 = icmp slt i32 %202, 0*/
		main_quantlexiti_203_r0 = ($signed(main_quantlexiti_202_r0) < $signed(32'd0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %203 = icmp slt i32 %202, 0*/
		main_quantlexiti_203_r1 = ($signed(main_quantlexiti_202_r1) < $signed(32'd0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %203 = icmp slt i32 %202, 0*/
		main_quantlexiti_203_r2 = ($signed(main_quantlexiti_202_r2) < $signed(32'd0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i1.i14 = select i1 %203, i32 0, i32 %202*/
		main_quantlexiti_i1i14_r0 = (main_quantlexiti_203_r0 ? 32'd0 : main_quantlexiti_202_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i1.i14 = select i1 %203, i32 0, i32 %202*/
		main_quantlexiti_i1i14_r1 = (main_quantlexiti_203_r1 ? 32'd0 : main_quantlexiti_202_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i1.i14 = select i1 %203, i32 0, i32 %202*/
		main_quantlexiti_i1i14_r2 = (main_quantlexiti_203_r2 ? 32'd0 : main_quantlexiti_202_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i1i14_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %..i1.i14 = select i1 %203, i32 0, i32 %202*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_quantlexiti_i1i14_reg_r0 <= main_quantlexiti_i1i14_r0;
		if (start == 1'b0 && ^(main_quantlexiti_i1i14_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i1i14_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i1i14_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %..i1.i14 = select i1 %203, i32 0, i32 %202*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_quantlexiti_i1i14_reg_r1 <= main_quantlexiti_i1i14_r1;
		if (start == 1'b0 && ^(main_quantlexiti_i1i14_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i1i14_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i1i14_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %..i1.i14 = select i1 %203, i32 0, i32 %202*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_quantlexiti_i1i14_reg_r2 <= main_quantlexiti_i1i14_r2;
		if (start == 1'b0 && ^(main_quantlexiti_i1i14_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i1i14_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %204 = icmp sgt i32 %..i1.i14, 22528*/
		main_quantlexiti_204_r0 = ($signed(main_quantlexiti_i1i14_reg_r0) > $signed(32'd22528));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %204 = icmp sgt i32 %..i1.i14, 22528*/
		main_quantlexiti_204_r1 = ($signed(main_quantlexiti_i1i14_reg_r1) > $signed(32'd22528));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %204 = icmp sgt i32 %..i1.i14, 22528*/
		main_quantlexiti_204_r2 = ($signed(main_quantlexiti_i1i14_reg_r2) > $signed(32'd22528));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i2.i15 = select i1 %204, i32 22528, i32 %..i1.i14*/
		main_quantlexiti_i2i15_r0 = (main_quantlexiti_204_r0 ? 32'd22528 : main_quantlexiti_i1i14_reg_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i2.i15 = select i1 %204, i32 22528, i32 %..i1.i14*/
		main_quantlexiti_i2i15_r1 = (main_quantlexiti_204_r1 ? 32'd22528 : main_quantlexiti_i1i14_reg_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i2.i15 = select i1 %204, i32 22528, i32 %..i1.i14*/
		main_quantlexiti_i2i15_r2 = (main_quantlexiti_204_r2 ? 32'd22528 : main_quantlexiti_i1i14_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i2i15_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %...i2.i15 = select i1 %204, i32 22528, i32 %..i1.i14*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_i2i15_reg_r0 <= main_quantlexiti_i2i15_r0;
		if (start == 1'b0 && ^(main_quantlexiti_i2i15_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i2i15_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i2i15_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %...i2.i15 = select i1 %204, i32 22528, i32 %..i1.i14*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_i2i15_reg_r1 <= main_quantlexiti_i2i15_r1;
		if (start == 1'b0 && ^(main_quantlexiti_i2i15_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i2i15_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_i2i15_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %...i2.i15 = select i1 %204, i32 22528, i32 %..i1.i14*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_i2i15_reg_r2 <= main_quantlexiti_i2i15_r2;
		if (start == 1'b0 && ^(main_quantlexiti_i2i15_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i2i15_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %205 = lshr i32 %...i2.i15, 6*/
		main_quantlexiti_205_r0 = (main_quantlexiti_i2i15_r0 >>> (32'd6 % 32));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %205 = lshr i32 %...i2.i15, 6*/
		main_quantlexiti_205_r1 = (main_quantlexiti_i2i15_r1 >>> (32'd6 % 32));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %205 = lshr i32 %...i2.i15, 6*/
		main_quantlexiti_205_r2 = (main_quantlexiti_i2i15_r2 >>> (32'd6 % 32));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %206 = and i32 %205, 31*/
		main_quantlexiti_206_r0 = (main_quantlexiti_205_r0 & 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %206 = and i32 %205, 31*/
		main_quantlexiti_206_r1 = (main_quantlexiti_205_r1 & 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %206 = and i32 %205, 31*/
		main_quantlexiti_206_r2 = (main_quantlexiti_205_r2 & 32'd31);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_206_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %206 = and i32 %205, 31*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_206_reg_r0 <= main_quantlexiti_206_r0;
		if (start == 1'b0 && ^(main_quantlexiti_206_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_206_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_206_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %206 = and i32 %205, 31*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_206_reg_r1 <= main_quantlexiti_206_r1;
		if (start == 1'b0 && ^(main_quantlexiti_206_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_206_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_206_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %206 = and i32 %205, 31*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_206_reg_r2 <= main_quantlexiti_206_r2;
		if (start == 1'b0 && ^(main_quantlexiti_206_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_206_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %207 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %206*/
		main_quantlexiti_207_r0 = (`TAG_g_ilb_table_a + (4 * main_quantlexiti_206_reg_r0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %207 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %206*/
		main_quantlexiti_207_r1 = (`TAG_g_ilb_table_a + (4 * main_quantlexiti_206_reg_r1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %207 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %206*/
		main_quantlexiti_207_r2 = (`TAG_g_ilb_table_a + (4 * main_quantlexiti_206_reg_r2));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %208 = load i32* %207, align 4, !tbaa !1*/
		main_quantlexiti_208_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %208 = load i32* %207, align 4, !tbaa !1*/
		main_quantlexiti_208_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %208 = load i32* %207, align 4, !tbaa !1*/
		main_quantlexiti_208_r2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_208_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %208 = load i32* %207, align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_208_reg_r0 <= main_quantlexiti_208_r0;
		if (start == 1'b0 && ^(main_quantlexiti_208_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_208_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_208_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %208 = load i32* %207, align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_208_reg_r1 <= main_quantlexiti_208_r1;
		if (start == 1'b0 && ^(main_quantlexiti_208_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_208_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_208_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %208 = load i32* %207, align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_208_reg_r2 <= main_quantlexiti_208_r2;
		if (start == 1'b0 && ^(main_quantlexiti_208_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_208_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %209 = add nsw i32 %183, %199*/
		main_quantlexiti_209_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %209 = add nsw i32 %183, %199*/
		main_quantlexiti_209_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %209 = add nsw i32 %183, %199*/
		main_quantlexiti_209_r2 = main_signed_add_32_1_r2;
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_209_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %209 = add nsw i32 %183, %199*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_209_reg_r0 <= main_quantlexiti_209_r0;
		if (start == 1'b0 && ^(main_quantlexiti_209_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_209_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_209_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %209 = add nsw i32 %183, %199*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_209_reg_r1 <= main_quantlexiti_209_r1;
		if (start == 1'b0 && ^(main_quantlexiti_209_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_209_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_209_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %209 = add nsw i32 %183, %199*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_209_reg_r2 <= main_quantlexiti_209_r2;
		if (start == 1'b0 && ^(main_quantlexiti_209_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_209_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %210 = shl nsw i32 %ah1.0, 2*/
		main_quantlexiti_210_r0 = (main_legup_memset_4_i64exit_ah10_reg_r0 <<< (32'd2 % 32));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %210 = shl nsw i32 %ah1.0, 2*/
		main_quantlexiti_210_r1 = (main_legup_memset_4_i64exit_ah10_reg_r1 <<< (32'd2 % 32));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %210 = shl nsw i32 %ah1.0, 2*/
		main_quantlexiti_210_r2 = (main_legup_memset_4_i64exit_ah10_reg_r2 <<< (32'd2 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_210_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %210 = shl nsw i32 %ah1.0, 2*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_210_reg_r0 <= main_quantlexiti_210_r0;
		if (start == 1'b0 && ^(main_quantlexiti_210_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_210_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_210_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %210 = shl nsw i32 %ah1.0, 2*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_210_reg_r1 <= main_quantlexiti_210_r1;
		if (start == 1'b0 && ^(main_quantlexiti_210_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_210_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_210_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %210 = shl nsw i32 %ah1.0, 2*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_210_reg_r2 <= main_quantlexiti_210_r2;
		if (start == 1'b0 && ^(main_quantlexiti_210_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_210_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %211 = mul nsw i32 %ph1.0, %209*/
		main_quantlexiti_211_r0 = (main_legup_memset_4_i64exit_ph10_reg_r0 * main_quantlexiti_209_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %211 = mul nsw i32 %ph1.0, %209*/
		main_quantlexiti_211_r1 = (main_legup_memset_4_i64exit_ph10_reg_r1 * main_quantlexiti_209_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %211 = mul nsw i32 %ph1.0, %209*/
		main_quantlexiti_211_r2 = (main_legup_memset_4_i64exit_ph10_reg_r2 * main_quantlexiti_209_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_211_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %211 = mul nsw i32 %ph1.0, %209*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_211_reg_r0 <= main_quantlexiti_211_r0;
		if (start == 1'b0 && ^(main_quantlexiti_211_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_211_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_211_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %211 = mul nsw i32 %ph1.0, %209*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_211_reg_r1 <= main_quantlexiti_211_r1;
		if (start == 1'b0 && ^(main_quantlexiti_211_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_211_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_211_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %211 = mul nsw i32 %ph1.0, %209*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_211_reg_r2 <= main_quantlexiti_211_r2;
		if (start == 1'b0 && ^(main_quantlexiti_211_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_211_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %212 = icmp sgt i32 %211, -1*/
		main_quantlexiti_212_r0 = ($signed(main_quantlexiti_211_reg_r0) > $signed(-32'd1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %212 = icmp sgt i32 %211, -1*/
		main_quantlexiti_212_r1 = ($signed(main_quantlexiti_211_reg_r1) > $signed(-32'd1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %212 = icmp sgt i32 %211, -1*/
		main_quantlexiti_212_r2 = ($signed(main_quantlexiti_211_reg_r2) > $signed(-32'd1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %213 = sub nsw i32 0, %210*/
		main_quantlexiti_213_r0 = (32'd0 - main_quantlexiti_210_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %213 = sub nsw i32 0, %210*/
		main_quantlexiti_213_r1 = (32'd0 - main_quantlexiti_210_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %213 = sub nsw i32 0, %210*/
		main_quantlexiti_213_r2 = (32'd0 - main_quantlexiti_210_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_213_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %213 = sub nsw i32 0, %210*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_213_reg_r0 <= main_quantlexiti_213_r0;
		if (start == 1'b0 && ^(main_quantlexiti_213_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_213_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_213_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %213 = sub nsw i32 0, %210*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_213_reg_r1 <= main_quantlexiti_213_r1;
		if (start == 1'b0 && ^(main_quantlexiti_213_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_213_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_213_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %213 = sub nsw i32 0, %210*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_213_reg_r2 <= main_quantlexiti_213_r2;
		if (start == 1'b0 && ^(main_quantlexiti_213_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_213_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i.i16 = select i1 %212, i32 %213, i32 %210*/
		main_quantlexiti_1ii16_r0 = (main_quantlexiti_212_r0 ? main_quantlexiti_213_reg_r0 : main_quantlexiti_210_reg_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i.i16 = select i1 %212, i32 %213, i32 %210*/
		main_quantlexiti_1ii16_r1 = (main_quantlexiti_212_r1 ? main_quantlexiti_213_reg_r1 : main_quantlexiti_210_reg_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i.i16 = select i1 %212, i32 %213, i32 %210*/
		main_quantlexiti_1ii16_r2 = (main_quantlexiti_212_r2 ? main_quantlexiti_213_reg_r2 : main_quantlexiti_210_reg_r2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %214 = ashr i32 %.1.i.i16, 7*/
		main_quantlexiti_214_r0 = ($signed(main_quantlexiti_1ii16_r0) >>> 32'd7);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %214 = ashr i32 %.1.i.i16, 7*/
		main_quantlexiti_214_r1 = ($signed(main_quantlexiti_1ii16_r1) >>> 32'd7);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %214 = ashr i32 %.1.i.i16, 7*/
		main_quantlexiti_214_r2 = ($signed(main_quantlexiti_1ii16_r2) >>> 32'd7);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %215 = mul nsw i32 %ph2.0, %209*/
		main_quantlexiti_215_r0 = (main_legup_memset_4_i64exit_ph20_reg_r0 * main_quantlexiti_209_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %215 = mul nsw i32 %ph2.0, %209*/
		main_quantlexiti_215_r1 = (main_legup_memset_4_i64exit_ph20_reg_r1 * main_quantlexiti_209_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %215 = mul nsw i32 %ph2.0, %209*/
		main_quantlexiti_215_r2 = (main_legup_memset_4_i64exit_ph20_reg_r2 * main_quantlexiti_209_r2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %216 = ashr i32 %215, 31*/
		main_quantlexiti_216_r0 = ($signed(main_quantlexiti_215_r0) >>> 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %216 = ashr i32 %215, 31*/
		main_quantlexiti_216_r1 = ($signed(main_quantlexiti_215_r1) >>> 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %216 = ashr i32 %215, 31*/
		main_quantlexiti_216_r2 = ($signed(main_quantlexiti_215_r2) >>> 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %217 = and i32 %216, -256*/
		main_quantlexiti_217_r0 = (main_quantlexiti_216_r0 & -32'd256);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %217 = and i32 %216, -256*/
		main_quantlexiti_217_r1 = (main_quantlexiti_216_r1 & -32'd256);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %217 = and i32 %216, -256*/
		main_quantlexiti_217_r2 = (main_quantlexiti_216_r2 & -32'd256);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %218 = or i32 %217, 128*/
		main_quantlexiti_218_r0 = (main_quantlexiti_217_r0 | 32'd128);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %218 = or i32 %217, 128*/
		main_quantlexiti_218_r1 = (main_quantlexiti_217_r1 | 32'd128);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %218 = or i32 %217, 128*/
		main_quantlexiti_218_r2 = (main_quantlexiti_217_r2 | 32'd128);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_218_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %218 = or i32 %217, 128*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_218_reg_r0 <= main_quantlexiti_218_r0;
		if (start == 1'b0 && ^(main_quantlexiti_218_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_218_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_218_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %218 = or i32 %217, 128*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_218_reg_r1 <= main_quantlexiti_218_r1;
		if (start == 1'b0 && ^(main_quantlexiti_218_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_218_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_218_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %218 = or i32 %217, 128*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_218_reg_r2 <= main_quantlexiti_218_r2;
		if (start == 1'b0 && ^(main_quantlexiti_218_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_218_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %219 = mul nsw i32 %ah2.0, 127*/
		main_quantlexiti_219_r0 = (main_legup_memset_4_i64exit_ah20_reg_r0 * 32'd127);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %219 = mul nsw i32 %ah2.0, 127*/
		main_quantlexiti_219_r1 = (main_legup_memset_4_i64exit_ah20_reg_r1 * 32'd127);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %219 = mul nsw i32 %ah2.0, 127*/
		main_quantlexiti_219_r2 = (main_legup_memset_4_i64exit_ah20_reg_r2 * 32'd127);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %220 = ashr i32 %219, 7*/
		main_quantlexiti_220_r0 = ($signed(main_quantlexiti_219_r0) >>> 32'd7);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %220 = ashr i32 %219, 7*/
		main_quantlexiti_220_r1 = ($signed(main_quantlexiti_219_r1) >>> 32'd7);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %220 = ashr i32 %219, 7*/
		main_quantlexiti_220_r2 = ($signed(main_quantlexiti_219_r2) >>> 32'd7);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_220_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %220 = ashr i32 %219, 7*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_220_reg_r0 <= main_quantlexiti_220_r0;
		if (start == 1'b0 && ^(main_quantlexiti_220_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_220_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_220_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %220 = ashr i32 %219, 7*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_220_reg_r1 <= main_quantlexiti_220_r1;
		if (start == 1'b0 && ^(main_quantlexiti_220_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_220_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_220_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %220 = ashr i32 %219, 7*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_220_reg_r2 <= main_quantlexiti_220_r2;
		if (start == 1'b0 && ^(main_quantlexiti_220_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_220_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i17 = add nsw i32 %214, %220*/
		main_quantlexiti_wd40ii17_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i17 = add nsw i32 %214, %220*/
		main_quantlexiti_wd40ii17_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i17 = add nsw i32 %214, %220*/
		main_quantlexiti_wd40ii17_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %wd4.0.i.i17 = add nsw i32 %214, %220*/
	main_quantlexiti_wd40ii17_reg_r0 = main_legup_memset_4_i64exit_55_reg_r0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %wd4.0.i.i17 = add nsw i32 %214, %220*/
	main_quantlexiti_wd40ii17_reg_r1 = main_legup_memset_4_i64exit_55_reg_r1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %wd4.0.i.i17 = add nsw i32 %214, %220*/
	main_quantlexiti_wd40ii17_reg_r2 = main_legup_memset_4_i64exit_55_reg_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %221 = add nsw i32 %wd4.0.i.i17, %218*/
		main_quantlexiti_221_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %221 = add nsw i32 %wd4.0.i.i17, %218*/
		main_quantlexiti_221_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %221 = add nsw i32 %wd4.0.i.i17, %218*/
		main_quantlexiti_221_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %222 = icmp sgt i32 %221, 12288*/
		main_quantlexiti_222_r0 = ($signed(main_quantlexiti_221_r0) > $signed(32'd12288));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %222 = icmp sgt i32 %221, 12288*/
		main_quantlexiti_222_r1 = ($signed(main_quantlexiti_221_r1) > $signed(32'd12288));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %222 = icmp sgt i32 %221, 12288*/
		main_quantlexiti_222_r2 = ($signed(main_quantlexiti_221_r2) > $signed(32'd12288));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i.i18 = select i1 %222, i32 12288, i32 %221*/
		main_quantlexiti_ii18_r0 = (main_quantlexiti_222_r0 ? 32'd12288 : main_quantlexiti_221_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i.i18 = select i1 %222, i32 12288, i32 %221*/
		main_quantlexiti_ii18_r1 = (main_quantlexiti_222_r1 ? 32'd12288 : main_quantlexiti_221_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i.i18 = select i1 %222, i32 12288, i32 %221*/
		main_quantlexiti_ii18_r2 = (main_quantlexiti_222_r2 ? 32'd12288 : main_quantlexiti_221_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_ii18_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %..i.i18 = select i1 %222, i32 12288, i32 %221*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_quantlexiti_ii18_reg_r0 <= main_quantlexiti_ii18_r0;
		if (start == 1'b0 && ^(main_quantlexiti_ii18_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ii18_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_ii18_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %..i.i18 = select i1 %222, i32 12288, i32 %221*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_quantlexiti_ii18_reg_r1 <= main_quantlexiti_ii18_r1;
		if (start == 1'b0 && ^(main_quantlexiti_ii18_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ii18_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_ii18_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %..i.i18 = select i1 %222, i32 12288, i32 %221*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_quantlexiti_ii18_reg_r2 <= main_quantlexiti_ii18_r2;
		if (start == 1'b0 && ^(main_quantlexiti_ii18_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ii18_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %223 = icmp slt i32 %..i.i18, -12288*/
		main_quantlexiti_223_r0 = ($signed(main_quantlexiti_ii18_reg_r0) < $signed(-32'd12288));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %223 = icmp slt i32 %..i.i18, -12288*/
		main_quantlexiti_223_r1 = ($signed(main_quantlexiti_ii18_reg_r1) < $signed(-32'd12288));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %223 = icmp slt i32 %..i.i18, -12288*/
		main_quantlexiti_223_r2 = ($signed(main_quantlexiti_ii18_reg_r2) < $signed(-32'd12288));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i.i19 = select i1 %223, i32 -12288, i32 %..i.i18*/
		main_quantlexiti_ii19_r0 = (main_quantlexiti_223_r0 ? -32'd12288 : main_quantlexiti_ii18_reg_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i.i19 = select i1 %223, i32 -12288, i32 %..i.i18*/
		main_quantlexiti_ii19_r1 = (main_quantlexiti_223_r1 ? -32'd12288 : main_quantlexiti_ii18_reg_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i.i19 = select i1 %223, i32 -12288, i32 %..i.i18*/
		main_quantlexiti_ii19_r2 = (main_quantlexiti_223_r2 ? -32'd12288 : main_quantlexiti_ii18_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_ii19_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %...i.i19 = select i1 %223, i32 -12288, i32 %..i.i18*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_ii19_reg_r0 <= main_quantlexiti_ii19_r0;
		if (start == 1'b0 && ^(main_quantlexiti_ii19_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ii19_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_ii19_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %...i.i19 = select i1 %223, i32 -12288, i32 %..i.i18*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_ii19_reg_r1 <= main_quantlexiti_ii19_r1;
		if (start == 1'b0 && ^(main_quantlexiti_ii19_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ii19_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_ii19_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %...i.i19 = select i1 %223, i32 -12288, i32 %..i.i18*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_ii19_reg_r2 <= main_quantlexiti_ii19_r2;
		if (start == 1'b0 && ^(main_quantlexiti_ii19_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ii19_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %224 = mul nsw i32 %ah1.0, 255*/
		main_quantlexiti_224_r0 = (main_legup_memset_4_i64exit_ah10_reg_r0 * 32'd255);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %224 = mul nsw i32 %ah1.0, 255*/
		main_quantlexiti_224_r1 = (main_legup_memset_4_i64exit_ah10_reg_r1 * 32'd255);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %224 = mul nsw i32 %ah1.0, 255*/
		main_quantlexiti_224_r2 = (main_legup_memset_4_i64exit_ah10_reg_r2 * 32'd255);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %225 = ashr i32 %224, 8*/
		main_quantlexiti_225_r0 = ($signed(main_quantlexiti_224_r0) >>> 32'd8);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %225 = ashr i32 %224, 8*/
		main_quantlexiti_225_r1 = ($signed(main_quantlexiti_224_r1) >>> 32'd8);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %225 = ashr i32 %224, 8*/
		main_quantlexiti_225_r2 = ($signed(main_quantlexiti_224_r2) >>> 32'd8);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_225_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %225 = ashr i32 %224, 8*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_225_reg_r0 <= main_quantlexiti_225_r0;
		if (start == 1'b0 && ^(main_quantlexiti_225_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_225_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_225_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %225 = ashr i32 %224, 8*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_225_reg_r1 <= main_quantlexiti_225_r1;
		if (start == 1'b0 && ^(main_quantlexiti_225_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_225_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_225_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %225 = ashr i32 %224, 8*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_225_reg_r2 <= main_quantlexiti_225_r2;
		if (start == 1'b0 && ^(main_quantlexiti_225_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_225_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %226 = ashr i32 %211, 31*/
		main_quantlexiti_226_r0 = ($signed(main_quantlexiti_211_r0) >>> 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %226 = ashr i32 %211, 31*/
		main_quantlexiti_226_r1 = ($signed(main_quantlexiti_211_r1) >>> 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %226 = ashr i32 %211, 31*/
		main_quantlexiti_226_r2 = ($signed(main_quantlexiti_211_r2) >>> 32'd31);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %227 = and i32 %226, -384*/
		main_quantlexiti_227_r0 = (main_quantlexiti_226_r0 & -32'd384);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %227 = and i32 %226, -384*/
		main_quantlexiti_227_r1 = (main_quantlexiti_226_r1 & -32'd384);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %227 = and i32 %226, -384*/
		main_quantlexiti_227_r2 = (main_quantlexiti_226_r2 & -32'd384);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_227_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %227 = and i32 %226, -384*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_227_reg_r0 <= main_quantlexiti_227_r0;
		if (start == 1'b0 && ^(main_quantlexiti_227_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_227_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_227_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %227 = and i32 %226, -384*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_227_reg_r1 <= main_quantlexiti_227_r1;
		if (start == 1'b0 && ^(main_quantlexiti_227_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_227_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_227_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %227 = and i32 %226, -384*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_227_reg_r2 <= main_quantlexiti_227_r2;
		if (start == 1'b0 && ^(main_quantlexiti_227_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_227_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %228 = add nsw i32 %225, 192*/
		main_quantlexiti_228_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %228 = add nsw i32 %225, 192*/
		main_quantlexiti_228_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %228 = add nsw i32 %225, 192*/
		main_quantlexiti_228_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %228 = add nsw i32 %225, 192*/
	main_quantlexiti_228_reg_r0 = main_legup_memset_4_i64exit_59_reg_r0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %228 = add nsw i32 %225, 192*/
	main_quantlexiti_228_reg_r1 = main_legup_memset_4_i64exit_59_reg_r1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %228 = add nsw i32 %225, 192*/
	main_quantlexiti_228_reg_r2 = main_legup_memset_4_i64exit_59_reg_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i20 = add nsw i32 %228, %227*/
		main_quantlexiti_apl10ii20_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i20 = add nsw i32 %228, %227*/
		main_quantlexiti_apl10ii20_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i20 = add nsw i32 %228, %227*/
		main_quantlexiti_apl10ii20_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %229 = sub nsw i32 15360, %...i.i19*/
		main_quantlexiti_229_r0 = (32'd15360 - main_quantlexiti_ii19_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %229 = sub nsw i32 15360, %...i.i19*/
		main_quantlexiti_229_r1 = (32'd15360 - main_quantlexiti_ii19_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %229 = sub nsw i32 15360, %...i.i19*/
		main_quantlexiti_229_r2 = (32'd15360 - main_quantlexiti_ii19_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_229_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %229 = sub nsw i32 15360, %...i.i19*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_229_reg_r0 <= main_quantlexiti_229_r0;
		if (start == 1'b0 && ^(main_quantlexiti_229_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_229_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_229_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %229 = sub nsw i32 15360, %...i.i19*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_229_reg_r1 <= main_quantlexiti_229_r1;
		if (start == 1'b0 && ^(main_quantlexiti_229_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_229_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_229_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %229 = sub nsw i32 15360, %...i.i19*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_229_reg_r2 <= main_quantlexiti_229_r2;
		if (start == 1'b0 && ^(main_quantlexiti_229_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_229_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %230 = icmp sgt i32 %apl1.0.i.i20, %229*/
		main_quantlexiti_230_r0 = ($signed(main_quantlexiti_apl10ii20_r0) > $signed(main_quantlexiti_229_reg_r0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %230 = icmp sgt i32 %apl1.0.i.i20, %229*/
		main_quantlexiti_230_r1 = ($signed(main_quantlexiti_apl10ii20_r1) > $signed(main_quantlexiti_229_reg_r1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %230 = icmp sgt i32 %apl1.0.i.i20, %229*/
		main_quantlexiti_230_r2 = ($signed(main_quantlexiti_apl10ii20_r2) > $signed(main_quantlexiti_229_reg_r2));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i.i21 = select i1 %230, i32 %229, i32 %apl1.0.i.i20*/
		main_quantlexiti_apl10ii21_r0 = (main_quantlexiti_230_r0 ? main_quantlexiti_229_reg_r0 : main_quantlexiti_apl10ii20_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i.i21 = select i1 %230, i32 %229, i32 %apl1.0.i.i20*/
		main_quantlexiti_apl10ii21_r1 = (main_quantlexiti_230_r1 ? main_quantlexiti_229_reg_r1 : main_quantlexiti_apl10ii20_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i.i21 = select i1 %230, i32 %229, i32 %apl1.0.i.i20*/
		main_quantlexiti_apl10ii21_r2 = (main_quantlexiti_230_r2 ? main_quantlexiti_229_reg_r2 : main_quantlexiti_apl10ii20_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_apl10ii21_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i.i21 = select i1 %230, i32 %229, i32 %apl1.0.i.i20*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_quantlexiti_apl10ii21_reg_r0 <= main_quantlexiti_apl10ii21_r0;
		if (start == 1'b0 && ^(main_quantlexiti_apl10ii21_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl10ii21_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_apl10ii21_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i.i21 = select i1 %230, i32 %229, i32 %apl1.0.i.i20*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_quantlexiti_apl10ii21_reg_r1 <= main_quantlexiti_apl10ii21_r1;
		if (start == 1'b0 && ^(main_quantlexiti_apl10ii21_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl10ii21_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_apl10ii21_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i.i21 = select i1 %230, i32 %229, i32 %apl1.0.i.i20*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_quantlexiti_apl10ii21_reg_r2 <= main_quantlexiti_apl10ii21_r2;
		if (start == 1'b0 && ^(main_quantlexiti_apl10ii21_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl10ii21_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %231 = sub nsw i32 0, %229*/
		main_quantlexiti_231_r0 = (32'd0 - main_quantlexiti_229_reg_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %231 = sub nsw i32 0, %229*/
		main_quantlexiti_231_r1 = (32'd0 - main_quantlexiti_229_reg_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %231 = sub nsw i32 0, %229*/
		main_quantlexiti_231_r2 = (32'd0 - main_quantlexiti_229_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_231_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %231 = sub nsw i32 0, %229*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_quantlexiti_231_reg_r0 <= main_quantlexiti_231_r0;
		if (start == 1'b0 && ^(main_quantlexiti_231_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_231_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_231_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %231 = sub nsw i32 0, %229*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_quantlexiti_231_reg_r1 <= main_quantlexiti_231_r1;
		if (start == 1'b0 && ^(main_quantlexiti_231_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_231_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_231_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %231 = sub nsw i32 0, %229*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_quantlexiti_231_reg_r2 <= main_quantlexiti_231_r2;
		if (start == 1'b0 && ^(main_quantlexiti_231_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_231_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %232 = shl nsw i32 %., 6*/
		main_quantlexiti_232_r0 = (main_quantlexiti__r0 <<< (32'd6 % 32));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %232 = shl nsw i32 %., 6*/
		main_quantlexiti_232_r1 = (main_quantlexiti__r1 <<< (32'd6 % 32));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %232 = shl nsw i32 %., 6*/
		main_quantlexiti_232_r2 = (main_quantlexiti__r2 <<< (32'd6 % 32));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %233 = or i32 %232, %ril.0.i.i*/
		main_quantlexiti_233_r0 = (main_quantlexiti_232_r0 | main_quantlexiti_ril0ii_reg_r0);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %233 = or i32 %232, %ril.0.i.i*/
		main_quantlexiti_233_r1 = (main_quantlexiti_232_r1 | main_quantlexiti_ril0ii_reg_r1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %233 = or i32 %232, %ril.0.i.i*/
		main_quantlexiti_233_r2 = (main_quantlexiti_232_r2 | main_quantlexiti_ril0ii_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_233_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %233 = or i32 %232, %ril.0.i.i*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_quantlexiti_233_reg_r0 <= main_quantlexiti_233_r0;
		if (start == 1'b0 && ^(main_quantlexiti_233_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_233_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_233_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %233 = or i32 %232, %ril.0.i.i*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_quantlexiti_233_reg_r1 <= main_quantlexiti_233_r1;
		if (start == 1'b0 && ^(main_quantlexiti_233_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_233_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_233_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %233 = or i32 %232, %ril.0.i.i*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_quantlexiti_233_reg_r2 <= main_quantlexiti_233_r2;
		if (start == 1'b0 && ^(main_quantlexiti_233_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_233_reg_r2"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_234_r0 = main_signed_divide_32_0_r0;
end
always @(*) begin
	main_quantlexiti_234_r1 = main_signed_divide_32_0_r1;
end
always @(*) begin
	main_quantlexiti_234_r2 = main_signed_divide_32_0_r2;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %235 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %234*/
		main_quantlexiti_235_r0 = (`TAG_g_compressed_a + (4 * main_quantlexiti_234_r0));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %235 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %234*/
		main_quantlexiti_235_r1 = (`TAG_g_compressed_a + (4 * main_quantlexiti_234_r1));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %235 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %234*/
		main_quantlexiti_235_r2 = (`TAG_g_compressed_a + (4 * main_quantlexiti_234_r2));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %236 = icmp slt i32 %30, 100*/
		main_quantlexiti_236_r0 = ($signed(main_legup_memset_4_i64exit_30_reg_r0) < $signed(32'd100));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %236 = icmp slt i32 %30, 100*/
		main_quantlexiti_236_r1 = ($signed(main_legup_memset_4_i64exit_30_reg_r1) < $signed(32'd100));
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %236 = icmp slt i32 %30, 100*/
		main_quantlexiti_236_r2 = ($signed(main_legup_memset_4_i64exit_30_reg_r2) < $signed(32'd100));
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_236_reg_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   %236 = icmp slt i32 %30, 100*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_236_reg_r0 <= main_quantlexiti_236_r0;
		if (start == 1'b0 && ^(main_quantlexiti_236_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_236_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_236_reg_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   %236 = icmp slt i32 %30, 100*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_236_reg_r1 <= main_quantlexiti_236_r1;
		if (start == 1'b0 && ^(main_quantlexiti_236_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_236_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_quantlexiti_236_reg_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   %236 = icmp slt i32 %30, 100*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_236_reg_r2 <= main_quantlexiti_236_r2;
		if (start == 1'b0 && ^(main_quantlexiti_236_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_236_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %237 = add nsw i32 %199, %187*/
		main_encodeexit_crit_edge_237_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %237 = add nsw i32 %199, %187*/
		main_encodeexit_crit_edge_237_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %237 = add nsw i32 %199, %187*/
		main_encodeexit_crit_edge_237_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %encode.exit._crit_edge*/
/*   %237 = add nsw i32 %199, %187*/
	main_encodeexit_crit_edge_237_reg_r0 = main_legup_memset_4_i64exit_61_reg_r0;
end
always @(*) begin
/* main: %encode.exit._crit_edge*/
/*   %237 = add nsw i32 %199, %187*/
	main_encodeexit_crit_edge_237_reg_r1 = main_legup_memset_4_i64exit_61_reg_r1;
end
always @(*) begin
/* main: %encode.exit._crit_edge*/
/*   %237 = add nsw i32 %199, %187*/
	main_encodeexit_crit_edge_237_reg_r2 = main_legup_memset_4_i64exit_61_reg_r2;
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %238 = icmp slt i32 %.apl1.0.i.i21, %231*/
		main_encodeexit_crit_edge_238_r0 = ($signed(main_quantlexiti_apl10ii21_reg_r0) < $signed(main_quantlexiti_231_reg_r0));
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %238 = icmp slt i32 %.apl1.0.i.i21, %231*/
		main_encodeexit_crit_edge_238_r1 = ($signed(main_quantlexiti_apl10ii21_reg_r1) < $signed(main_quantlexiti_231_reg_r1));
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %238 = icmp slt i32 %.apl1.0.i.i21, %231*/
		main_encodeexit_crit_edge_238_r2 = ($signed(main_quantlexiti_apl10ii21_reg_r2) < $signed(main_quantlexiti_231_reg_r2));
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i.i22 = select i1 %238, i32 %231, i32 %.apl1.0.i.i21*/
		main_encodeexit_crit_edge_apl12ii22_r0 = (main_encodeexit_crit_edge_238_r0 ? main_quantlexiti_231_reg_r0 : main_quantlexiti_apl10ii21_reg_r0);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i.i22 = select i1 %238, i32 %231, i32 %.apl1.0.i.i21*/
		main_encodeexit_crit_edge_apl12ii22_r1 = (main_encodeexit_crit_edge_238_r1 ? main_quantlexiti_231_reg_r1 : main_quantlexiti_apl10ii21_reg_r1);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i.i22 = select i1 %238, i32 %231, i32 %.apl1.0.i.i21*/
		main_encodeexit_crit_edge_apl12ii22_r2 = (main_encodeexit_crit_edge_238_r2 ? main_quantlexiti_231_reg_r2 : main_quantlexiti_apl10ii21_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_apl12ii22_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i.i22 = select i1 %238, i32 %231, i32 %.apl1.0.i.i21*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_apl12ii22_reg_r0 <= main_encodeexit_crit_edge_apl12ii22_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_apl12ii22_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_apl12ii22_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_apl12ii22_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i.i22 = select i1 %238, i32 %231, i32 %.apl1.0.i.i21*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_apl12ii22_reg_r1 <= main_encodeexit_crit_edge_apl12ii22_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_apl12ii22_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_apl12ii22_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_apl12ii22_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i.i22 = select i1 %238, i32 %231, i32 %.apl1.0.i.i21*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_apl12ii22_reg_r2 <= main_encodeexit_crit_edge_apl12ii22_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_apl12ii22_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_apl12ii22_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %239 = ashr i32 %...i2.i15, 11*/
		main_encodeexit_crit_edge_239_r0 = ($signed(main_quantlexiti_i2i15_reg_r0) >>> 32'd11);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %239 = ashr i32 %...i2.i15, 11*/
		main_encodeexit_crit_edge_239_r1 = ($signed(main_quantlexiti_i2i15_reg_r1) >>> 32'd11);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %239 = ashr i32 %...i2.i15, 11*/
		main_encodeexit_crit_edge_239_r2 = ($signed(main_quantlexiti_i2i15_reg_r2) >>> 32'd11);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %240 = sub i32 11, %239*/
		main_encodeexit_crit_edge_240_r0 = (32'd11 - main_encodeexit_crit_edge_239_r0);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %240 = sub i32 11, %239*/
		main_encodeexit_crit_edge_240_r1 = (32'd11 - main_encodeexit_crit_edge_239_r1);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %240 = sub i32 11, %239*/
		main_encodeexit_crit_edge_240_r2 = (32'd11 - main_encodeexit_crit_edge_239_r2);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %241 = ashr i32 %208, %240*/
		main_encodeexit_crit_edge_241_r0 = ($signed(main_quantlexiti_208_reg_r0) >>> main_encodeexit_crit_edge_240_r0);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %241 = ashr i32 %208, %240*/
		main_encodeexit_crit_edge_241_r1 = ($signed(main_quantlexiti_208_reg_r1) >>> main_encodeexit_crit_edge_240_r1);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %241 = ashr i32 %208, %240*/
		main_encodeexit_crit_edge_241_r2 = ($signed(main_quantlexiti_208_reg_r2) >>> main_encodeexit_crit_edge_240_r2);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %242 = shl i32 %241, 3*/
		main_encodeexit_crit_edge_242_r0 = (main_encodeexit_crit_edge_241_r0 <<< (32'd3 % 32));
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %242 = shl i32 %241, 3*/
		main_encodeexit_crit_edge_242_r1 = (main_encodeexit_crit_edge_241_r1 <<< (32'd3 % 32));
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %242 = shl i32 %241, 3*/
		main_encodeexit_crit_edge_242_r2 = (main_encodeexit_crit_edge_241_r2 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_242_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %242 = shl i32 %241, 3*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_242_reg_r0 <= main_encodeexit_crit_edge_242_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_242_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_242_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_242_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %242 = shl i32 %241, 3*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_242_reg_r1 <= main_encodeexit_crit_edge_242_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_242_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_242_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_242_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %242 = shl i32 %241, 3*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_242_reg_r2 <= main_encodeexit_crit_edge_242_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_242_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_242_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %243 = add nsw i32 %127, %109*/
		main_encodeexit_crit_edge_243_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %243 = add nsw i32 %127, %109*/
		main_encodeexit_crit_edge_243_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %243 = add nsw i32 %127, %109*/
		main_encodeexit_crit_edge_243_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %encode.exit._crit_edge*/
/*   %243 = add nsw i32 %127, %109*/
	main_encodeexit_crit_edge_243_reg_r0 = main_legup_memset_4_i64exit_55_reg_r0;
end
always @(*) begin
/* main: %encode.exit._crit_edge*/
/*   %243 = add nsw i32 %127, %109*/
	main_encodeexit_crit_edge_243_reg_r1 = main_legup_memset_4_i64exit_55_reg_r1;
end
always @(*) begin
/* main: %encode.exit._crit_edge*/
/*   %243 = add nsw i32 %127, %109*/
	main_encodeexit_crit_edge_243_reg_r2 = main_legup_memset_4_i64exit_55_reg_r2;
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %244 = icmp slt i32 %.apl1.0.i6.i10, %159*/
		main_encodeexit_crit_edge_244_r0 = ($signed(main_quantlexiti_apl10i6i10_reg_r0) < $signed(main_quantlexiti_159_reg_r0));
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %244 = icmp slt i32 %.apl1.0.i6.i10, %159*/
		main_encodeexit_crit_edge_244_r1 = ($signed(main_quantlexiti_apl10i6i10_reg_r1) < $signed(main_quantlexiti_159_reg_r1));
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %244 = icmp slt i32 %.apl1.0.i6.i10, %159*/
		main_encodeexit_crit_edge_244_r2 = ($signed(main_quantlexiti_apl10i6i10_reg_r2) < $signed(main_quantlexiti_159_reg_r2));
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i7.i11 = select i1 %244, i32 %159, i32 %.apl1.0.i6.i10*/
		main_encodeexit_crit_edge_apl12i7i11_r0 = (main_encodeexit_crit_edge_244_r0 ? main_quantlexiti_159_reg_r0 : main_quantlexiti_apl10i6i10_reg_r0);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i7.i11 = select i1 %244, i32 %159, i32 %.apl1.0.i6.i10*/
		main_encodeexit_crit_edge_apl12i7i11_r1 = (main_encodeexit_crit_edge_244_r1 ? main_quantlexiti_159_reg_r1 : main_quantlexiti_apl10i6i10_reg_r1);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i7.i11 = select i1 %244, i32 %159, i32 %.apl1.0.i6.i10*/
		main_encodeexit_crit_edge_apl12i7i11_r2 = (main_encodeexit_crit_edge_244_r2 ? main_quantlexiti_159_reg_r2 : main_quantlexiti_apl10i6i10_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_apl12i7i11_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i7.i11 = select i1 %244, i32 %159, i32 %.apl1.0.i6.i10*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_apl12i7i11_reg_r0 <= main_encodeexit_crit_edge_apl12i7i11_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_apl12i7i11_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_apl12i7i11_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_apl12i7i11_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i7.i11 = select i1 %244, i32 %159, i32 %.apl1.0.i6.i10*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_apl12i7i11_reg_r1 <= main_encodeexit_crit_edge_apl12i7i11_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_apl12i7i11_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_apl12i7i11_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_apl12i7i11_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i7.i11 = select i1 %244, i32 %159, i32 %.apl1.0.i6.i10*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_apl12i7i11_reg_r2 <= main_encodeexit_crit_edge_apl12i7i11_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_apl12i7i11_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_apl12i7i11_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %245 = ashr i32 %...i13.i4, 11*/
		main_encodeexit_crit_edge_245_r0 = ($signed(main_quantlexiti_i13i4_reg_r0) >>> 32'd11);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %245 = ashr i32 %...i13.i4, 11*/
		main_encodeexit_crit_edge_245_r1 = ($signed(main_quantlexiti_i13i4_reg_r1) >>> 32'd11);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %245 = ashr i32 %...i13.i4, 11*/
		main_encodeexit_crit_edge_245_r2 = ($signed(main_quantlexiti_i13i4_reg_r2) >>> 32'd11);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %246 = sub i32 9, %245*/
		main_encodeexit_crit_edge_246_r0 = (32'd9 - main_encodeexit_crit_edge_245_r0);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %246 = sub i32 9, %245*/
		main_encodeexit_crit_edge_246_r1 = (32'd9 - main_encodeexit_crit_edge_245_r1);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %246 = sub i32 9, %245*/
		main_encodeexit_crit_edge_246_r2 = (32'd9 - main_encodeexit_crit_edge_245_r2);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %247 = ashr i32 %136, %246*/
		main_encodeexit_crit_edge_247_r0 = ($signed(main_quantlexiti_136_reg_r0) >>> main_encodeexit_crit_edge_246_r0);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %247 = ashr i32 %136, %246*/
		main_encodeexit_crit_edge_247_r1 = ($signed(main_quantlexiti_136_reg_r1) >>> main_encodeexit_crit_edge_246_r1);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %247 = ashr i32 %136, %246*/
		main_encodeexit_crit_edge_247_r2 = ($signed(main_quantlexiti_136_reg_r2) >>> main_encodeexit_crit_edge_246_r2);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %248 = shl i32 %247, 3*/
		main_encodeexit_crit_edge_248_r0 = (main_encodeexit_crit_edge_247_r0 <<< (32'd3 % 32));
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %248 = shl i32 %247, 3*/
		main_encodeexit_crit_edge_248_r1 = (main_encodeexit_crit_edge_247_r1 <<< (32'd3 % 32));
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %248 = shl i32 %247, 3*/
		main_encodeexit_crit_edge_248_r2 = (main_encodeexit_crit_edge_247_r2 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_248_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %248 = shl i32 %247, 3*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_248_reg_r0 <= main_encodeexit_crit_edge_248_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_248_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_248_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_248_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %248 = shl i32 %247, 3*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_248_reg_r1 <= main_encodeexit_crit_edge_248_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_248_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_248_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_248_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %248 = shl i32 %247, 3*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_248_reg_r2 <= main_encodeexit_crit_edge_248_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_248_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_248_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre_r2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_pre_reg_r0 <= main_encodeexit_crit_edge_pre_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_pre_reg_r1 <= main_encodeexit_crit_edge_pre_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_pre_reg_r2 <= main_encodeexit_crit_edge_pre_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre37_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre37_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre37_r2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre37_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_pre37_reg_r0 <= main_encodeexit_crit_edge_pre37_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre37_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre37_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre37_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_pre37_reg_r1 <= main_encodeexit_crit_edge_pre37_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre37_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre37_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre37_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_pre37_reg_r2 <= main_encodeexit_crit_edge_pre37_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre37_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre37_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre38_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre38_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre38_r2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre38_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_pre38_reg_r0 <= main_encodeexit_crit_edge_pre38_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre38_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre38_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre38_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_pre38_reg_r1 <= main_encodeexit_crit_edge_pre38_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre38_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre38_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre38_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_pre38_reg_r2 <= main_encodeexit_crit_edge_pre38_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre38_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre38_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre39_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre39_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre39_r2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre39_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_pre39_reg_r0 <= main_encodeexit_crit_edge_pre39_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre39_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre39_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre39_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_pre39_reg_r1 <= main_encodeexit_crit_edge_pre39_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre39_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre39_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre39_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_pre39_reg_r2 <= main_encodeexit_crit_edge_pre39_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre39_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre39_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre40_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre40_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre40_r2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre40_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		main_encodeexit_crit_edge_pre40_reg_r0 <= main_encodeexit_crit_edge_pre40_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre40_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre40_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre40_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		main_encodeexit_crit_edge_pre40_reg_r1 <= main_encodeexit_crit_edge_pre40_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre40_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre40_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre40_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		main_encodeexit_crit_edge_pre40_reg_r2 <= main_encodeexit_crit_edge_pre40_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre40_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre40_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre41_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre41_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre41_r2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre41_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		main_encodeexit_crit_edge_pre41_reg_r0 <= main_encodeexit_crit_edge_pre41_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre41_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre41_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre41_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		main_encodeexit_crit_edge_pre41_reg_r1 <= main_encodeexit_crit_edge_pre41_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre41_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre41_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre41_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		main_encodeexit_crit_edge_pre41_reg_r2 <= main_encodeexit_crit_edge_pre41_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre41_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre41_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre42_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre42_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre42_r2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre42_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		main_encodeexit_crit_edge_pre42_reg_r0 <= main_encodeexit_crit_edge_pre42_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre42_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre42_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre42_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		main_encodeexit_crit_edge_pre42_reg_r1 <= main_encodeexit_crit_edge_pre42_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre42_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre42_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre42_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		main_encodeexit_crit_edge_pre42_reg_r2 <= main_encodeexit_crit_edge_pre42_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre42_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre42_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre43_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre43_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre43_r2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre43_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		main_encodeexit_crit_edge_pre43_reg_r0 <= main_encodeexit_crit_edge_pre43_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre43_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre43_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre43_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		main_encodeexit_crit_edge_pre43_reg_r1 <= main_encodeexit_crit_edge_pre43_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre43_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre43_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre43_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		main_encodeexit_crit_edge_pre43_reg_r2 <= main_encodeexit_crit_edge_pre43_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre43_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre43_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre44_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre44_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre44_r2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre44_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		main_encodeexit_crit_edge_pre44_reg_r0 <= main_encodeexit_crit_edge_pre44_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre44_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre44_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre44_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		main_encodeexit_crit_edge_pre44_reg_r1 <= main_encodeexit_crit_edge_pre44_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre44_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre44_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre44_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		main_encodeexit_crit_edge_pre44_reg_r2 <= main_encodeexit_crit_edge_pre44_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre44_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre44_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre45_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre45_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre45_r2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre45_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		main_encodeexit_crit_edge_pre45_reg_r0 <= main_encodeexit_crit_edge_pre45_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre45_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre45_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre45_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		main_encodeexit_crit_edge_pre45_reg_r1 <= main_encodeexit_crit_edge_pre45_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre45_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre45_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre45_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		main_encodeexit_crit_edge_pre45_reg_r2 <= main_encodeexit_crit_edge_pre45_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre45_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre45_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre46_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre46_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre46_r2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre46_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		main_encodeexit_crit_edge_pre46_reg_r0 <= main_encodeexit_crit_edge_pre46_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre46_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre46_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre46_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		main_encodeexit_crit_edge_pre46_reg_r1 <= main_encodeexit_crit_edge_pre46_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre46_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre46_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre46_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		main_encodeexit_crit_edge_pre46_reg_r2 <= main_encodeexit_crit_edge_pre46_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre46_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre46_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre47_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre47_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre47_r2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre47_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		main_encodeexit_crit_edge_pre47_reg_r0 <= main_encodeexit_crit_edge_pre47_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre47_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre47_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre47_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		main_encodeexit_crit_edge_pre47_reg_r1 <= main_encodeexit_crit_edge_pre47_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre47_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre47_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre47_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		main_encodeexit_crit_edge_pre47_reg_r2 <= main_encodeexit_crit_edge_pre47_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre47_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre47_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre48_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre48_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre48_r2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre48_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		main_encodeexit_crit_edge_pre48_reg_r0 <= main_encodeexit_crit_edge_pre48_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre48_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre48_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre48_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		main_encodeexit_crit_edge_pre48_reg_r1 <= main_encodeexit_crit_edge_pre48_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre48_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre48_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre48_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		main_encodeexit_crit_edge_pre48_reg_r2 <= main_encodeexit_crit_edge_pre48_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre48_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre48_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre49_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre49_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre49_r2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre49_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		main_encodeexit_crit_edge_pre49_reg_r0 <= main_encodeexit_crit_edge_pre49_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre49_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre49_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre49_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		main_encodeexit_crit_edge_pre49_reg_r1 <= main_encodeexit_crit_edge_pre49_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre49_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre49_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre49_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		main_encodeexit_crit_edge_pre49_reg_r2 <= main_encodeexit_crit_edge_pre49_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre49_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre49_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre50_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre50_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre50_r2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre50_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		main_encodeexit_crit_edge_pre50_reg_r0 <= main_encodeexit_crit_edge_pre50_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre50_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre50_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre50_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		main_encodeexit_crit_edge_pre50_reg_r1 <= main_encodeexit_crit_edge_pre50_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre50_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre50_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre50_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		main_encodeexit_crit_edge_pre50_reg_r2 <= main_encodeexit_crit_edge_pre50_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre50_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre50_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre51 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre51_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre51 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre51_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre51 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre51_r2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre51_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre51 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		main_encodeexit_crit_edge_pre51_reg_r0 <= main_encodeexit_crit_edge_pre51_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre51_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre51_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre51_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre51 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		main_encodeexit_crit_edge_pre51_reg_r1 <= main_encodeexit_crit_edge_pre51_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre51_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre51_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre51_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre51 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		main_encodeexit_crit_edge_pre51_reg_r2 <= main_encodeexit_crit_edge_pre51_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre51_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre51_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre52 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre52_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre52 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre52_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre52 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre52_r2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre52_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre52 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		main_encodeexit_crit_edge_pre52_reg_r0 <= main_encodeexit_crit_edge_pre52_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre52_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre52_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre52_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre52 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		main_encodeexit_crit_edge_pre52_reg_r1 <= main_encodeexit_crit_edge_pre52_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre52_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre52_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre52_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre52 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		main_encodeexit_crit_edge_pre52_reg_r2 <= main_encodeexit_crit_edge_pre52_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre52_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre52_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre53_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre53_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre53_r2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre53_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		main_encodeexit_crit_edge_pre53_reg_r0 <= main_encodeexit_crit_edge_pre53_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre53_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre53_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre53_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		main_encodeexit_crit_edge_pre53_reg_r1 <= main_encodeexit_crit_edge_pre53_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre53_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre53_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre53_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		main_encodeexit_crit_edge_pre53_reg_r2 <= main_encodeexit_crit_edge_pre53_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre53_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre53_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre54 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre54_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre54 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre54_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre54 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre54_r2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre54_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre54 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		main_encodeexit_crit_edge_pre54_reg_r0 <= main_encodeexit_crit_edge_pre54_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre54_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre54_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre54_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre54 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		main_encodeexit_crit_edge_pre54_reg_r1 <= main_encodeexit_crit_edge_pre54_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre54_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre54_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre54_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre54 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		main_encodeexit_crit_edge_pre54_reg_r2 <= main_encodeexit_crit_edge_pre54_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre54_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre54_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre55 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre55_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre55 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre55_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre55 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre55_r2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre55_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre55 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		main_encodeexit_crit_edge_pre55_reg_r0 <= main_encodeexit_crit_edge_pre55_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre55_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre55_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre55_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre55 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		main_encodeexit_crit_edge_pre55_reg_r1 <= main_encodeexit_crit_edge_pre55_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre55_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre55_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre55_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre55 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		main_encodeexit_crit_edge_pre55_reg_r2 <= main_encodeexit_crit_edge_pre55_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre55_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre55_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre56_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre56_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre56_r2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre56_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_102)) begin
		main_encodeexit_crit_edge_pre56_reg_r0 <= main_encodeexit_crit_edge_pre56_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre56_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre56_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre56_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_102)) begin
		main_encodeexit_crit_edge_pre56_reg_r1 <= main_encodeexit_crit_edge_pre56_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre56_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre56_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre56_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_102)) begin
		main_encodeexit_crit_edge_pre56_reg_r2 <= main_encodeexit_crit_edge_pre56_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre56_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre56_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre57 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre57_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre57 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre57_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre57 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre57_r2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre57_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre57 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_102)) begin
		main_encodeexit_crit_edge_pre57_reg_r0 <= main_encodeexit_crit_edge_pre57_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre57_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre57_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre57_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre57 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_102)) begin
		main_encodeexit_crit_edge_pre57_reg_r1 <= main_encodeexit_crit_edge_pre57_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre57_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre57_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_pre57_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %.pre57 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_102)) begin
		main_encodeexit_crit_edge_pre57_reg_r2 <= main_encodeexit_crit_edge_pre57_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre57_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre57_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre58 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre58_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre58 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre58_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre58 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre58_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre59_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre59_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre59_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp = mul i32 %.pre58, -44*/
		main_encodeexit_crit_edge_phitmp_r0 = (main_encodeexit_crit_edge_pre58_r0 * -32'd44);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp = mul i32 %.pre58, -44*/
		main_encodeexit_crit_edge_phitmp_r1 = (main_encodeexit_crit_edge_pre58_r1 * -32'd44);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp = mul i32 %.pre58, -44*/
		main_encodeexit_crit_edge_phitmp_r2 = (main_encodeexit_crit_edge_pre58_r2 * -32'd44);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp1 = mul i32 %.pre59, 12*/
		main_encodeexit_crit_edge_phitmp1_r0 = (main_encodeexit_crit_edge_pre59_r0 * 32'd12);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp1 = mul i32 %.pre59, 12*/
		main_encodeexit_crit_edge_phitmp1_r1 = (main_encodeexit_crit_edge_pre59_r1 * 32'd12);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp1 = mul i32 %.pre59, 12*/
		main_encodeexit_crit_edge_phitmp1_r2 = (main_encodeexit_crit_edge_pre59_r2 * 32'd12);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp2 = mul i32 %...i13.i4, 127*/
		main_encodeexit_crit_edge_phitmp2_r0 = (main_quantlexiti_i13i4_reg_r0 * 32'd127);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp2 = mul i32 %...i13.i4, 127*/
		main_encodeexit_crit_edge_phitmp2_r1 = (main_quantlexiti_i13i4_reg_r1 * 32'd127);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp2 = mul i32 %...i13.i4, 127*/
		main_encodeexit_crit_edge_phitmp2_r2 = (main_quantlexiti_i13i4_reg_r2 * 32'd127);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp3 = ashr i32 %phitmp2, 7*/
		main_encodeexit_crit_edge_phitmp3_r0 = ($signed(main_encodeexit_crit_edge_phitmp2_r0) >>> 32'd7);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp3 = ashr i32 %phitmp2, 7*/
		main_encodeexit_crit_edge_phitmp3_r1 = ($signed(main_encodeexit_crit_edge_phitmp2_r1) >>> 32'd7);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp3 = ashr i32 %phitmp2, 7*/
		main_encodeexit_crit_edge_phitmp3_r2 = ($signed(main_encodeexit_crit_edge_phitmp2_r2) >>> 32'd7);
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_phitmp3_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp3 = ashr i32 %phitmp2, 7*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_phitmp3_reg_r0 <= main_encodeexit_crit_edge_phitmp3_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp3_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp3_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_phitmp3_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp3 = ashr i32 %phitmp2, 7*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_phitmp3_reg_r1 <= main_encodeexit_crit_edge_phitmp3_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp3_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp3_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_phitmp3_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp3 = ashr i32 %phitmp2, 7*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_phitmp3_reg_r2 <= main_encodeexit_crit_edge_phitmp3_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp3_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp3_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp4 = mul i32 %...i2.i15, 127*/
		main_encodeexit_crit_edge_phitmp4_r0 = (main_quantlexiti_i2i15_reg_r0 * 32'd127);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp4 = mul i32 %...i2.i15, 127*/
		main_encodeexit_crit_edge_phitmp4_r1 = (main_quantlexiti_i2i15_reg_r1 * 32'd127);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp4 = mul i32 %...i2.i15, 127*/
		main_encodeexit_crit_edge_phitmp4_r2 = (main_quantlexiti_i2i15_reg_r2 * 32'd127);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp5 = ashr i32 %phitmp4, 7*/
		main_encodeexit_crit_edge_phitmp5_r0 = ($signed(main_encodeexit_crit_edge_phitmp4_r0) >>> 32'd7);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp5 = ashr i32 %phitmp4, 7*/
		main_encodeexit_crit_edge_phitmp5_r1 = ($signed(main_encodeexit_crit_edge_phitmp4_r1) >>> 32'd7);
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp5 = ashr i32 %phitmp4, 7*/
		main_encodeexit_crit_edge_phitmp5_r2 = ($signed(main_encodeexit_crit_edge_phitmp4_r2) >>> 32'd7);
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_phitmp5_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp5 = ashr i32 %phitmp4, 7*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_phitmp5_reg_r0 <= main_encodeexit_crit_edge_phitmp5_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp5_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp5_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_phitmp5_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp5 = ashr i32 %phitmp4, 7*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_phitmp5_reg_r1 <= main_encodeexit_crit_edge_phitmp5_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp5_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp5_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_phitmp5_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp5 = ashr i32 %phitmp4, 7*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_phitmp5_reg_r2 <= main_encodeexit_crit_edge_phitmp5_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp5_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp5_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
		main_encodeexit_crit_edge_indvarnext10_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
		main_encodeexit_crit_edge_indvarnext10_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
		main_encodeexit_crit_edge_indvarnext10_r2 = main_signed_add_32_1_r2;
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_indvarnext10_reg_r0 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		main_encodeexit_crit_edge_indvarnext10_reg_r0 <= main_encodeexit_crit_edge_indvarnext10_r0;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_indvarnext10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_indvarnext10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_indvarnext10_reg_r1 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		main_encodeexit_crit_edge_indvarnext10_reg_r1 <= main_encodeexit_crit_edge_indvarnext10_r1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_indvarnext10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_indvarnext10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_encodeexit_crit_edge_indvarnext10_reg_r2 <= 0;
	/* main: %encode.exit._crit_edge*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		main_encodeexit_crit_edge_indvarnext10_reg_r2 <= main_encodeexit_crit_edge_indvarnext10_r2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_indvarnext10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_indvarnext10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %249 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i32 0, i32 %ril.0.i.i*/
		main_preheaderipreheader_249_r0 = (`TAG_g_qq6_code6_table_a + (4 * main_quantlexiti_ril0ii_reg_r0));
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %249 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i32 0, i32 %ril.0.i.i*/
		main_preheaderipreheader_249_r1 = (`TAG_g_qq6_code6_table_a + (4 * main_quantlexiti_ril0ii_reg_r1));
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %249 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i32 0, i32 %ril.0.i.i*/
		main_preheaderipreheader_249_r2 = (`TAG_g_qq6_code6_table_a + (4 * main_quantlexiti_ril0ii_reg_r2));
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %250 = load i32* %249, align 4, !tbaa !1*/
		main_preheaderipreheader_250_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %250 = load i32* %249, align 4, !tbaa !1*/
		main_preheaderipreheader_250_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %250 = load i32* %249, align 4, !tbaa !1*/
		main_preheaderipreheader_250_r2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_preheaderipreheader_250_reg_r0 <= 0;
	/* main: %.preheader.i.preheader*/
	/*   %250 = load i32* %249, align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106)) begin
		main_preheaderipreheader_250_reg_r0 <= main_preheaderipreheader_250_r0;
		if (start == 1'b0 && ^(main_preheaderipreheader_250_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderipreheader_250_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderipreheader_250_reg_r1 <= 0;
	/* main: %.preheader.i.preheader*/
	/*   %250 = load i32* %249, align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106)) begin
		main_preheaderipreheader_250_reg_r1 <= main_preheaderipreheader_250_r1;
		if (start == 1'b0 && ^(main_preheaderipreheader_250_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderipreheader_250_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderipreheader_250_reg_r2 <= 0;
	/* main: %.preheader.i.preheader*/
	/*   %250 = load i32* %249, align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106)) begin
		main_preheaderipreheader_250_reg_r2 <= main_preheaderipreheader_250_r2;
		if (start == 1'b0 && ^(main_preheaderipreheader_250_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderipreheader_250_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_indvar_r0 = main_preheaderi_indvarnext_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_indvar_r1 = main_preheaderi_indvarnext_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_indvar_r2 = main_preheaderi_indvarnext_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_indvar_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar_reg_r0 <= main_preheaderi_indvar_r0;
		if (start == 1'b0 && ^(main_preheaderi_indvar_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_indvar_reg_r0 <= main_preheaderi_indvar_r0;
		if (start == 1'b0 && ^(main_preheaderi_indvar_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_indvar_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar_reg_r1 <= main_preheaderi_indvar_r1;
		if (start == 1'b0 && ^(main_preheaderi_indvar_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_indvar_reg_r1 <= main_preheaderi_indvar_r1;
		if (start == 1'b0 && ^(main_preheaderi_indvar_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_indvar_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar_reg_r2 <= main_preheaderi_indvar_r2;
		if (start == 1'b0 && ^(main_preheaderi_indvar_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_indvar_reg_r2 <= main_preheaderi_indvar_r2;
		if (start == 1'b0 && ^(main_preheaderi_indvar_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd100_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumd100_r0 = main_preheaderi_accumd90_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd100_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumd100_r1 = main_preheaderi_accumd90_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd100_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumd100_r2 = main_preheaderi_accumd90_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd100_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd100_reg_r0 <= main_preheaderi_accumd100_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd100_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd100_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumd100_reg_r0 <= main_preheaderi_accumd100_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd100_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd100_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd100_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd100_reg_r1 <= main_preheaderi_accumd100_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd100_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd100_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumd100_reg_r1 <= main_preheaderi_accumd100_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd100_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd100_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd100_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd100_reg_r2 <= main_preheaderi_accumd100_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd100_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd100_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumd100_reg_r2 <= main_preheaderi_accumd100_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd100_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd100_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd90_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumd90_r0 = main_preheaderi_accumd80_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd90_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumd90_r1 = main_preheaderi_accumd80_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd90_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumd90_r2 = main_preheaderi_accumd80_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd90_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd90_reg_r0 <= main_preheaderi_accumd90_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd90_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd90_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumd90_reg_r0 <= main_preheaderi_accumd90_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd90_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd90_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd90_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd90_reg_r1 <= main_preheaderi_accumd90_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd90_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd90_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumd90_reg_r1 <= main_preheaderi_accumd90_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd90_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd90_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd90_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd90_reg_r2 <= main_preheaderi_accumd90_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd90_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd90_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumd90_reg_r2 <= main_preheaderi_accumd90_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd90_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd90_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd80_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumd80_r0 = main_preheaderi_accumd70_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd80_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumd80_r1 = main_preheaderi_accumd70_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd80_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumd80_r2 = main_preheaderi_accumd70_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd80_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd80_reg_r0 <= main_preheaderi_accumd80_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd80_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd80_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumd80_reg_r0 <= main_preheaderi_accumd80_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd80_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd80_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd80_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd80_reg_r1 <= main_preheaderi_accumd80_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd80_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd80_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumd80_reg_r1 <= main_preheaderi_accumd80_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd80_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd80_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd80_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd80_reg_r2 <= main_preheaderi_accumd80_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd80_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd80_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumd80_reg_r2 <= main_preheaderi_accumd80_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd80_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd80_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd70_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumd70_r0 = main_preheaderi_accumd60_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd70_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumd70_r1 = main_preheaderi_accumd60_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd70_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumd70_r2 = main_preheaderi_accumd60_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd70_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd70_reg_r0 <= main_preheaderi_accumd70_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd70_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd70_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumd70_reg_r0 <= main_preheaderi_accumd70_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd70_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd70_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd70_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd70_reg_r1 <= main_preheaderi_accumd70_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd70_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd70_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumd70_reg_r1 <= main_preheaderi_accumd70_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd70_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd70_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd70_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd70_reg_r2 <= main_preheaderi_accumd70_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd70_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd70_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumd70_reg_r2 <= main_preheaderi_accumd70_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd70_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd70_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd60_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumd60_r0 = main_preheaderi_accumd50_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd60_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumd60_r1 = main_preheaderi_accumd50_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd60_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumd60_r2 = main_preheaderi_accumd50_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd60_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd60_reg_r0 <= main_preheaderi_accumd60_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd60_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd60_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumd60_reg_r0 <= main_preheaderi_accumd60_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd60_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd60_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd60_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd60_reg_r1 <= main_preheaderi_accumd60_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd60_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd60_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumd60_reg_r1 <= main_preheaderi_accumd60_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd60_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd60_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd60_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd60_reg_r2 <= main_preheaderi_accumd60_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd60_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd60_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumd60_reg_r2 <= main_preheaderi_accumd60_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd60_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd60_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd50_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumd50_r0 = main_preheaderi_accumd40_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd50_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumd50_r1 = main_preheaderi_accumd40_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd50_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumd50_r2 = main_preheaderi_accumd40_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd50_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd50_reg_r0 <= main_preheaderi_accumd50_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd50_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd50_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumd50_reg_r0 <= main_preheaderi_accumd50_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd50_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd50_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd50_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd50_reg_r1 <= main_preheaderi_accumd50_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd50_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd50_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumd50_reg_r1 <= main_preheaderi_accumd50_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd50_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd50_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd50_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd50_reg_r2 <= main_preheaderi_accumd50_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd50_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd50_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumd50_reg_r2 <= main_preheaderi_accumd50_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd50_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd50_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd40_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumd40_r0 = main_preheaderi_accumd30_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd40_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumd40_r1 = main_preheaderi_accumd30_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd40_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumd40_r2 = main_preheaderi_accumd30_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd40_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd40_reg_r0 <= main_preheaderi_accumd40_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd40_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd40_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumd40_reg_r0 <= main_preheaderi_accumd40_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd40_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd40_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd40_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd40_reg_r1 <= main_preheaderi_accumd40_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd40_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd40_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumd40_reg_r1 <= main_preheaderi_accumd40_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd40_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd40_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd40_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd40_reg_r2 <= main_preheaderi_accumd40_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd40_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd40_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumd40_reg_r2 <= main_preheaderi_accumd40_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd40_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd40_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd30_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumd30_r0 = main_preheaderi_accumd20_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd30_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumd30_r1 = main_preheaderi_accumd20_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd30_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumd30_r2 = main_preheaderi_accumd20_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd30_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd30_reg_r0 <= main_preheaderi_accumd30_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd30_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd30_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumd30_reg_r0 <= main_preheaderi_accumd30_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd30_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd30_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd30_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd30_reg_r1 <= main_preheaderi_accumd30_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd30_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd30_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumd30_reg_r1 <= main_preheaderi_accumd30_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd30_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd30_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd30_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd30_reg_r2 <= main_preheaderi_accumd30_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd30_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd30_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumd30_reg_r2 <= main_preheaderi_accumd30_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd30_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd30_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd20_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumd20_r0 = main_preheaderi_accumd10_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd20_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumd20_r1 = main_preheaderi_accumd10_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd20_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumd20_r2 = main_preheaderi_accumd10_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd20_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd20_reg_r0 <= main_preheaderi_accumd20_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd20_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumd20_reg_r0 <= main_preheaderi_accumd20_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd20_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd20_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd20_reg_r1 <= main_preheaderi_accumd20_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd20_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumd20_reg_r1 <= main_preheaderi_accumd20_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd20_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd20_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd20_reg_r2 <= main_preheaderi_accumd20_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd20_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumd20_reg_r2 <= main_preheaderi_accumd20_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd20_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd10_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumd10_r0 = main_preheaderi_accumd00_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd10_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumd10_r1 = main_preheaderi_accumd00_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd10_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumd10_r2 = main_preheaderi_accumd00_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd10_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd10_reg_r0 <= main_preheaderi_accumd10_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd10_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumd10_reg_r0 <= main_preheaderi_accumd10_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd10_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd10_reg_r1 <= main_preheaderi_accumd10_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd10_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumd10_reg_r1 <= main_preheaderi_accumd10_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd10_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd10_reg_r2 <= main_preheaderi_accumd10_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd10_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumd10_reg_r2 <= main_preheaderi_accumd10_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %406, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd00_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %406, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumd00_r0 = main_preheaderi_406_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %406, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd00_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %406, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumd00_r1 = main_preheaderi_406_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %406, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd00_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %406, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumd00_r2 = main_preheaderi_406_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd00_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %406, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd00_reg_r0 <= main_preheaderi_accumd00_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd00_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd00_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %406, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumd00_reg_r0 <= main_preheaderi_accumd00_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumd00_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd00_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd00_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %406, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd00_reg_r1 <= main_preheaderi_accumd00_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd00_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd00_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %406, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumd00_reg_r1 <= main_preheaderi_accumd00_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumd00_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd00_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumd00_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %406, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd00_reg_r2 <= main_preheaderi_accumd00_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd00_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd00_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %406, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumd00_reg_r2 <= main_preheaderi_accumd00_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumd00_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd00_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc100_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumc100_r0 = main_preheaderi_accumc90_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc100_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumc100_r1 = main_preheaderi_accumc90_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc100_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumc100_r2 = main_preheaderi_accumc90_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc100_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc100_reg_r0 <= main_preheaderi_accumc100_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc100_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc100_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumc100_reg_r0 <= main_preheaderi_accumc100_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc100_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc100_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc100_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc100_reg_r1 <= main_preheaderi_accumc100_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc100_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc100_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumc100_reg_r1 <= main_preheaderi_accumc100_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc100_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc100_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc100_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc100_reg_r2 <= main_preheaderi_accumc100_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc100_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc100_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumc100_reg_r2 <= main_preheaderi_accumc100_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc100_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc100_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc90_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumc90_r0 = main_preheaderi_accumc80_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc90_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumc90_r1 = main_preheaderi_accumc80_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc90_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumc90_r2 = main_preheaderi_accumc80_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc90_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc90_reg_r0 <= main_preheaderi_accumc90_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc90_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc90_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumc90_reg_r0 <= main_preheaderi_accumc90_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc90_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc90_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc90_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc90_reg_r1 <= main_preheaderi_accumc90_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc90_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc90_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumc90_reg_r1 <= main_preheaderi_accumc90_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc90_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc90_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc90_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc90_reg_r2 <= main_preheaderi_accumc90_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc90_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc90_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumc90_reg_r2 <= main_preheaderi_accumc90_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc90_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc90_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc80_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumc80_r0 = main_preheaderi_accumc70_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc80_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumc80_r1 = main_preheaderi_accumc70_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc80_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumc80_r2 = main_preheaderi_accumc70_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc80_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc80_reg_r0 <= main_preheaderi_accumc80_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc80_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc80_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumc80_reg_r0 <= main_preheaderi_accumc80_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc80_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc80_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc80_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc80_reg_r1 <= main_preheaderi_accumc80_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc80_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc80_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumc80_reg_r1 <= main_preheaderi_accumc80_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc80_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc80_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc80_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc80_reg_r2 <= main_preheaderi_accumc80_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc80_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc80_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumc80_reg_r2 <= main_preheaderi_accumc80_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc80_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc80_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc70_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumc70_r0 = main_preheaderi_accumc60_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc70_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumc70_r1 = main_preheaderi_accumc60_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc70_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumc70_r2 = main_preheaderi_accumc60_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc70_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc70_reg_r0 <= main_preheaderi_accumc70_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc70_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc70_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumc70_reg_r0 <= main_preheaderi_accumc70_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc70_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc70_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc70_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc70_reg_r1 <= main_preheaderi_accumc70_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc70_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc70_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumc70_reg_r1 <= main_preheaderi_accumc70_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc70_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc70_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc70_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc70_reg_r2 <= main_preheaderi_accumc70_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc70_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc70_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumc70_reg_r2 <= main_preheaderi_accumc70_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc70_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc70_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc60_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumc60_r0 = main_preheaderi_accumc50_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc60_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumc60_r1 = main_preheaderi_accumc50_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc60_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumc60_r2 = main_preheaderi_accumc50_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc60_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc60_reg_r0 <= main_preheaderi_accumc60_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc60_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc60_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumc60_reg_r0 <= main_preheaderi_accumc60_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc60_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc60_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc60_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc60_reg_r1 <= main_preheaderi_accumc60_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc60_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc60_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumc60_reg_r1 <= main_preheaderi_accumc60_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc60_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc60_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc60_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc60_reg_r2 <= main_preheaderi_accumc60_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc60_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc60_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumc60_reg_r2 <= main_preheaderi_accumc60_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc60_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc60_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc50_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumc50_r0 = main_preheaderi_accumc40_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc50_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumc50_r1 = main_preheaderi_accumc40_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc50_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumc50_r2 = main_preheaderi_accumc40_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc50_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc50_reg_r0 <= main_preheaderi_accumc50_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc50_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc50_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumc50_reg_r0 <= main_preheaderi_accumc50_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc50_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc50_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc50_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc50_reg_r1 <= main_preheaderi_accumc50_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc50_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc50_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumc50_reg_r1 <= main_preheaderi_accumc50_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc50_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc50_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc50_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc50_reg_r2 <= main_preheaderi_accumc50_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc50_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc50_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumc50_reg_r2 <= main_preheaderi_accumc50_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc50_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc50_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc40_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumc40_r0 = main_preheaderi_accumc30_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc40_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumc40_r1 = main_preheaderi_accumc30_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc40_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumc40_r2 = main_preheaderi_accumc30_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc40_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc40_reg_r0 <= main_preheaderi_accumc40_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc40_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc40_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumc40_reg_r0 <= main_preheaderi_accumc40_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc40_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc40_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc40_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc40_reg_r1 <= main_preheaderi_accumc40_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc40_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc40_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumc40_reg_r1 <= main_preheaderi_accumc40_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc40_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc40_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc40_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc40_reg_r2 <= main_preheaderi_accumc40_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc40_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc40_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumc40_reg_r2 <= main_preheaderi_accumc40_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc40_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc40_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc30_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumc30_r0 = main_preheaderi_accumc20_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc30_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumc30_r1 = main_preheaderi_accumc20_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc30_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumc30_r2 = main_preheaderi_accumc20_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc30_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc30_reg_r0 <= main_preheaderi_accumc30_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc30_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc30_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumc30_reg_r0 <= main_preheaderi_accumc30_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc30_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc30_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc30_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc30_reg_r1 <= main_preheaderi_accumc30_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc30_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc30_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumc30_reg_r1 <= main_preheaderi_accumc30_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc30_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc30_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc30_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc30_reg_r2 <= main_preheaderi_accumc30_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc30_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc30_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumc30_reg_r2 <= main_preheaderi_accumc30_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc30_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc30_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc20_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumc20_r0 = main_preheaderi_accumc10_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc20_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumc20_r1 = main_preheaderi_accumc10_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc20_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumc20_r2 = main_preheaderi_accumc10_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc20_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc20_reg_r0 <= main_preheaderi_accumc20_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc20_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumc20_reg_r0 <= main_preheaderi_accumc20_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc20_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc20_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc20_reg_r1 <= main_preheaderi_accumc20_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc20_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumc20_reg_r1 <= main_preheaderi_accumc20_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc20_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc20_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc20_reg_r2 <= main_preheaderi_accumc20_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc20_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumc20_reg_r2 <= main_preheaderi_accumc20_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc20_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc10_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumc10_r0 = main_preheaderi_accumc00_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc10_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumc10_r1 = main_preheaderi_accumc00_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc10_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumc10_r2 = main_preheaderi_accumc00_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc10_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc10_reg_r0 <= main_preheaderi_accumc10_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc10_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumc10_reg_r0 <= main_preheaderi_accumc10_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc10_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc10_reg_r1 <= main_preheaderi_accumc10_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc10_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumc10_reg_r1 <= main_preheaderi_accumc10_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc10_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc10_reg_r2 <= main_preheaderi_accumc10_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc10_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumc10_reg_r2 <= main_preheaderi_accumc10_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %405, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc00_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %405, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_accumc00_r0 = main_preheaderi_405_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %405, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc00_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %405, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_accumc00_r1 = main_preheaderi_405_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %405, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc00_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %405, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_accumc00_r2 = main_preheaderi_405_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc00_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %405, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc00_reg_r0 <= main_preheaderi_accumc00_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc00_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc00_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %405, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_accumc00_reg_r0 <= main_preheaderi_accumc00_r0;
		if (start == 1'b0 && ^(main_preheaderi_accumc00_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc00_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc00_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %405, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc00_reg_r1 <= main_preheaderi_accumc00_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc00_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc00_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %405, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_accumc00_reg_r1 <= main_preheaderi_accumc00_r1;
		if (start == 1'b0 && ^(main_preheaderi_accumc00_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc00_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_accumc00_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %405, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc00_reg_r2 <= main_preheaderi_accumc00_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc00_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc00_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %405, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_accumc00_reg_r2 <= main_preheaderi_accumc00_r2;
		if (start == 1'b0 && ^(main_preheaderi_accumc00_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc00_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph20_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_dec_ph20_r0 = main_preheaderi_dec_ph10_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph20_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_dec_ph20_r1 = main_preheaderi_dec_ph10_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph20_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_dec_ph20_r2 = main_preheaderi_dec_ph10_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_ph20_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph20_reg_r0 <= main_preheaderi_dec_ph20_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph20_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_dec_ph20_reg_r0 <= main_preheaderi_dec_ph20_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph20_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_ph20_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph20_reg_r1 <= main_preheaderi_dec_ph20_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph20_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_dec_ph20_reg_r1 <= main_preheaderi_dec_ph20_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph20_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_ph20_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph20_reg_r2 <= main_preheaderi_dec_ph20_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph20_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_dec_ph20_reg_r2 <= main_preheaderi_dec_ph20_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph20_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %380, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph10_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %380, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_dec_ph10_r0 = main_preheaderi_380_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %380, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph10_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %380, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_dec_ph10_r1 = main_preheaderi_380_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %380, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph10_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %380, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_dec_ph10_r2 = main_preheaderi_380_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_ph10_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %380, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph10_reg_r0 <= main_preheaderi_dec_ph10_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph10_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %380, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_dec_ph10_reg_r0 <= main_preheaderi_dec_ph10_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_ph10_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %380, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph10_reg_r1 <= main_preheaderi_dec_ph10_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph10_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %380, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_dec_ph10_reg_r1 <= main_preheaderi_dec_ph10_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_ph10_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %380, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph10_reg_r2 <= main_preheaderi_dec_ph10_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph10_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %380, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_dec_ph10_reg_r2 <= main_preheaderi_dec_ph10_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbh0_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_dec_nbh0_r0 = main_preheaderi_i2i_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbh0_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_dec_nbh0_r1 = main_preheaderi_i2i_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbh0_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_dec_nbh0_r2 = main_preheaderi_i2i_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_nbh0_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbh0_reg_r0 <= main_preheaderi_dec_nbh0_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbh0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbh0_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_dec_nbh0_reg_r0 <= main_preheaderi_dec_nbh0_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbh0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbh0_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_nbh0_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbh0_reg_r1 <= main_preheaderi_dec_nbh0_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbh0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbh0_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_dec_nbh0_reg_r1 <= main_preheaderi_dec_nbh0_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbh0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbh0_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_nbh0_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbh0_reg_r2 <= main_preheaderi_dec_nbh0_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbh0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbh0_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_dec_nbh0_reg_r2 <= main_preheaderi_dec_nbh0_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbh0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbh0_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %379, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_deth0_r0 = 32'd8;
	end
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %379, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_dec_deth0_r0 = main_preheaderi_379_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %379, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_deth0_r1 = 32'd8;
	end
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %379, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_dec_deth0_r1 = main_preheaderi_379_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %379, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_deth0_r2 = 32'd8;
	end
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %379, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_dec_deth0_r2 = main_preheaderi_379_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_deth0_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %379, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_deth0_reg_r0 <= main_preheaderi_dec_deth0_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_deth0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_deth0_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %379, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_dec_deth0_reg_r0 <= main_preheaderi_dec_deth0_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_deth0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_deth0_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_deth0_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %379, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_deth0_reg_r1 <= main_preheaderi_dec_deth0_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_deth0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_deth0_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %379, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_dec_deth0_reg_r1 <= main_preheaderi_dec_deth0_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_deth0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_deth0_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_deth0_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %379, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_deth0_reg_r2 <= main_preheaderi_dec_deth0_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_deth0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_deth0_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %379, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_dec_deth0_reg_r2 <= main_preheaderi_dec_deth0_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_deth0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_deth0_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah20_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_dec_ah20_r0 = main_preheaderi_ii_var1_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah20_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_dec_ah20_r1 = main_preheaderi_ii_var1_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah20_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_dec_ah20_r2 = main_preheaderi_ii_var1_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_ah20_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah20_reg_r0 <= main_preheaderi_dec_ah20_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah20_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_dec_ah20_reg_r0 <= main_preheaderi_dec_ah20_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah20_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_ah20_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah20_reg_r1 <= main_preheaderi_dec_ah20_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah20_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_dec_ah20_reg_r1 <= main_preheaderi_dec_ah20_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah20_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_ah20_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah20_reg_r2 <= main_preheaderi_dec_ah20_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah20_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_dec_ah20_reg_r2 <= main_preheaderi_dec_ah20_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah20_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh20_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_dec_rh20_r0 = main_preheaderi_dec_rh10_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh20_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_dec_rh20_r1 = main_preheaderi_dec_rh10_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh20_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_dec_rh20_r2 = main_preheaderi_dec_rh10_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_rh20_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh20_reg_r0 <= main_preheaderi_dec_rh20_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh20_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_dec_rh20_reg_r0 <= main_preheaderi_dec_rh20_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh20_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_rh20_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh20_reg_r1 <= main_preheaderi_dec_rh20_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh20_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_dec_rh20_reg_r1 <= main_preheaderi_dec_rh20_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh20_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_rh20_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh20_reg_r2 <= main_preheaderi_dec_rh20_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh20_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_dec_rh20_reg_r2 <= main_preheaderi_dec_rh20_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh20_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah10_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_dec_ah10_r0 = main_preheaderi_apl12ii_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah10_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_dec_ah10_r1 = main_preheaderi_apl12ii_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah10_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_dec_ah10_r2 = main_preheaderi_apl12ii_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_ah10_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah10_reg_r0 <= main_preheaderi_dec_ah10_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah10_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_dec_ah10_reg_r0 <= main_preheaderi_dec_ah10_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_ah10_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah10_reg_r1 <= main_preheaderi_dec_ah10_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah10_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_dec_ah10_reg_r1 <= main_preheaderi_dec_ah10_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_ah10_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah10_reg_r2 <= main_preheaderi_dec_ah10_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah10_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_dec_ah10_reg_r2 <= main_preheaderi_dec_ah10_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %404, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh10_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %404, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_dec_rh10_r0 = main_preheaderi_404_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %404, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh10_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %404, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_dec_rh10_r1 = main_preheaderi_404_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %404, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh10_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %404, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_dec_rh10_r2 = main_preheaderi_404_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_rh10_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %404, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh10_reg_r0 <= main_preheaderi_dec_rh10_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh10_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %404, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_dec_rh10_reg_r0 <= main_preheaderi_dec_rh10_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_rh10_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %404, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh10_reg_r1 <= main_preheaderi_dec_rh10_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh10_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %404, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_dec_rh10_reg_r1 <= main_preheaderi_dec_rh10_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_rh10_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %404, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh10_reg_r2 <= main_preheaderi_dec_rh10_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh10_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %404, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_dec_rh10_reg_r2 <= main_preheaderi_dec_rh10_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt20_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_dec_plt20_r0 = main_preheaderi_dec_plt10_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt20_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_dec_plt20_r1 = main_preheaderi_dec_plt10_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt20_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_dec_plt20_r2 = main_preheaderi_dec_plt10_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_plt20_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt20_reg_r0 <= main_preheaderi_dec_plt20_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt20_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_dec_plt20_reg_r0 <= main_preheaderi_dec_plt20_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt20_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_plt20_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt20_reg_r1 <= main_preheaderi_dec_plt20_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt20_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_dec_plt20_reg_r1 <= main_preheaderi_dec_plt20_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt20_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_plt20_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt20_reg_r2 <= main_preheaderi_dec_plt20_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt20_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_dec_plt20_reg_r2 <= main_preheaderi_dec_plt20_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt20_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %308, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt10_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %308, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_dec_plt10_r0 = main_preheaderi_308_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %308, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt10_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %308, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_dec_plt10_r1 = main_preheaderi_308_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %308, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt10_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %308, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_dec_plt10_r2 = main_preheaderi_308_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_plt10_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %308, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt10_reg_r0 <= main_preheaderi_dec_plt10_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt10_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %308, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_dec_plt10_reg_r0 <= main_preheaderi_dec_plt10_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_plt10_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %308, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt10_reg_r1 <= main_preheaderi_dec_plt10_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt10_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %308, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_dec_plt10_reg_r1 <= main_preheaderi_dec_plt10_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_plt10_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %308, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt10_reg_r2 <= main_preheaderi_dec_plt10_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt10_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %308, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_dec_plt10_reg_r2 <= main_preheaderi_dec_plt10_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbl0_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_dec_nbl0_r0 = main_preheaderi_i13i_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbl0_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_dec_nbl0_r1 = main_preheaderi_i13i_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbl0_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_dec_nbl0_r2 = main_preheaderi_i13i_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_nbl0_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbl0_reg_r0 <= main_preheaderi_dec_nbl0_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbl0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbl0_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_dec_nbl0_reg_r0 <= main_preheaderi_dec_nbl0_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbl0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbl0_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_nbl0_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbl0_reg_r1 <= main_preheaderi_dec_nbl0_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbl0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbl0_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_dec_nbl0_reg_r1 <= main_preheaderi_dec_nbl0_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbl0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbl0_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_nbl0_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbl0_reg_r2 <= main_preheaderi_dec_nbl0_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbl0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbl0_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_dec_nbl0_reg_r2 <= main_preheaderi_dec_nbl0_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbl0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbl0_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %307, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_detl0_r0 = 32'd32;
	end
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %307, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_dec_detl0_r0 = main_preheaderi_307_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %307, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_detl0_r1 = 32'd32;
	end
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %307, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_dec_detl0_r1 = main_preheaderi_307_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %307, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_detl0_r2 = 32'd32;
	end
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %307, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_dec_detl0_r2 = main_preheaderi_307_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_detl0_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %307, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_detl0_reg_r0 <= main_preheaderi_dec_detl0_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_detl0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_detl0_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %307, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_dec_detl0_reg_r0 <= main_preheaderi_dec_detl0_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_detl0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_detl0_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_detl0_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %307, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_detl0_reg_r1 <= main_preheaderi_dec_detl0_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_detl0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_detl0_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %307, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_dec_detl0_reg_r1 <= main_preheaderi_dec_detl0_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_detl0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_detl0_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_detl0_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %307, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_detl0_reg_r2 <= main_preheaderi_dec_detl0_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_detl0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_detl0_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %307, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_dec_detl0_reg_r2 <= main_preheaderi_dec_detl0_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_detl0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_detl0_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al20_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_dec_al20_r0 = main_preheaderi_i11i_var0_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al20_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_dec_al20_r1 = main_preheaderi_i11i_var0_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al20_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_dec_al20_r2 = main_preheaderi_i11i_var0_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_al20_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al20_reg_r0 <= main_preheaderi_dec_al20_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_al20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al20_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_dec_al20_reg_r0 <= main_preheaderi_dec_al20_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_al20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al20_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_al20_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al20_reg_r1 <= main_preheaderi_dec_al20_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_al20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al20_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_dec_al20_reg_r1 <= main_preheaderi_dec_al20_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_al20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al20_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_al20_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al20_reg_r2 <= main_preheaderi_dec_al20_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_al20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al20_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_dec_al20_reg_r2 <= main_preheaderi_dec_al20_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_al20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al20_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt20_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_dec_rlt20_r0 = main_preheaderi_dec_rlt10_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt20_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_dec_rlt20_r1 = main_preheaderi_dec_rlt10_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt20_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_dec_rlt20_r2 = main_preheaderi_dec_rlt10_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_rlt20_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt20_reg_r0 <= main_preheaderi_dec_rlt20_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt20_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_dec_rlt20_reg_r0 <= main_preheaderi_dec_rlt20_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt20_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt20_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_rlt20_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt20_reg_r1 <= main_preheaderi_dec_rlt20_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt20_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_dec_rlt20_reg_r1 <= main_preheaderi_dec_rlt20_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt20_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt20_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_rlt20_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt20_reg_r2 <= main_preheaderi_dec_rlt20_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt20_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_dec_rlt20_reg_r2 <= main_preheaderi_dec_rlt20_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt20_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt20_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al10_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_dec_al10_r0 = main_preheaderi_apl12i7i_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al10_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_dec_al10_r1 = main_preheaderi_apl12i7i_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al10_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_dec_al10_r2 = main_preheaderi_apl12i7i_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_al10_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al10_reg_r0 <= main_preheaderi_dec_al10_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_al10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al10_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_dec_al10_reg_r0 <= main_preheaderi_dec_al10_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_al10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_al10_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al10_reg_r1 <= main_preheaderi_dec_al10_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_al10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al10_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_dec_al10_reg_r1 <= main_preheaderi_dec_al10_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_al10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_al10_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al10_reg_r2 <= main_preheaderi_dec_al10_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_al10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al10_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_dec_al10_reg_r2 <= main_preheaderi_dec_al10_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_al10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %332, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt10_r0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %332, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) */ begin
		main_preheaderi_dec_rlt10_r0 = main_preheaderi_332_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %332, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt10_r1 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %332, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) */ begin
		main_preheaderi_dec_rlt10_r1 = main_preheaderi_332_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %332, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt10_r2 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %332, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) */ begin
		main_preheaderi_dec_rlt10_r2 = main_preheaderi_332_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_rlt10_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %332, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt10_reg_r0 <= main_preheaderi_dec_rlt10_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt10_reg_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %332, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r0 == 1'd0))) begin
		main_preheaderi_dec_rlt10_reg_r0 <= main_preheaderi_dec_rlt10_r0;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt10_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt10_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_rlt10_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %332, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt10_reg_r1 <= main_preheaderi_dec_rlt10_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt10_reg_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %332, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r1 == 1'd0))) begin
		main_preheaderi_dec_rlt10_reg_r1 <= main_preheaderi_dec_rlt10_r1;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt10_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt10_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_dec_rlt10_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %332, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderipreheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt10_reg_r2 <= main_preheaderi_dec_rlt10_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt10_reg_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %332, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_r2 == 1'd0))) begin
		main_preheaderi_dec_rlt10_reg_r2 <= main_preheaderi_dec_rlt10_r2;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt10_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt10_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %i.11.i = shl i32 %indvar, 1*/
		main_preheaderi_i11i_r0 = (main_preheaderi_indvar_reg_r0 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %i.11.i = shl i32 %indvar, 1*/
		main_preheaderi_i11i_r1 = (main_preheaderi_indvar_reg_r1 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %i.11.i = shl i32 %indvar, 1*/
		main_preheaderi_i11i_r2 = (main_preheaderi_indvar_reg_r2 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %251 = or i32 %i.11.i, 1*/
		main_preheaderi_251_r0 = (main_preheaderi_i11i_r0 | 32'd1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %251 = or i32 %i.11.i, 1*/
		main_preheaderi_251_r1 = (main_preheaderi_i11i_r1 | 32'd1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %251 = or i32 %i.11.i, 1*/
		main_preheaderi_251_r2 = (main_preheaderi_i11i_r2 | 32'd1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %scevgep6 = getelementptr [100 x i32]* @result, i32 0, i32 %251*/
		main_preheaderi_scevgep6_r0 = (`TAG_g_result_a + (4 * main_preheaderi_251_r0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %scevgep6 = getelementptr [100 x i32]* @result, i32 0, i32 %251*/
		main_preheaderi_scevgep6_r1 = (`TAG_g_result_a + (4 * main_preheaderi_251_r1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %scevgep6 = getelementptr [100 x i32]* @result, i32 0, i32 %251*/
		main_preheaderi_scevgep6_r2 = (`TAG_g_result_a + (4 * main_preheaderi_251_r2));
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_scevgep6_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %scevgep6 = getelementptr [100 x i32]* @result, i32 0, i32 %251*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_scevgep6_reg_r0 <= main_preheaderi_scevgep6_r0;
		if (start == 1'b0 && ^(main_preheaderi_scevgep6_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_scevgep6_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_scevgep6_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %scevgep6 = getelementptr [100 x i32]* @result, i32 0, i32 %251*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_scevgep6_reg_r1 <= main_preheaderi_scevgep6_r1;
		if (start == 1'b0 && ^(main_preheaderi_scevgep6_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_scevgep6_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_scevgep6_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %scevgep6 = getelementptr [100 x i32]* @result, i32 0, i32 %251*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_scevgep6_reg_r2 <= main_preheaderi_scevgep6_r2;
		if (start == 1'b0 && ^(main_preheaderi_scevgep6_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_scevgep6_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %scevgep7 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11.i*/
		main_preheaderi_scevgep7_r0 = (`TAG_g_result_a + (4 * main_preheaderi_i11i_r0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %scevgep7 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11.i*/
		main_preheaderi_scevgep7_r1 = (`TAG_g_result_a + (4 * main_preheaderi_i11i_r1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %scevgep7 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11.i*/
		main_preheaderi_scevgep7_r2 = (`TAG_g_result_a + (4 * main_preheaderi_i11i_r2));
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_scevgep7_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %scevgep7 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11.i*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_scevgep7_reg_r0 <= main_preheaderi_scevgep7_r0;
		if (start == 1'b0 && ^(main_preheaderi_scevgep7_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_scevgep7_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_scevgep7_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %scevgep7 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11.i*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_scevgep7_reg_r1 <= main_preheaderi_scevgep7_r1;
		if (start == 1'b0 && ^(main_preheaderi_scevgep7_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_scevgep7_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_scevgep7_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %scevgep7 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11.i*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_scevgep7_reg_r2 <= main_preheaderi_scevgep7_r2;
		if (start == 1'b0 && ^(main_preheaderi_scevgep7_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_scevgep7_reg_r2"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_252_r0 = main_signed_divide_32_0_r0;
end
always @(*) begin
	main_preheaderi_252_r1 = main_signed_divide_32_0_r1;
end
always @(*) begin
	main_preheaderi_252_r2 = main_signed_divide_32_0_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %253 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %252*/
		main_preheaderi_253_r0 = (`TAG_g_compressed_a + (4 * main_preheaderi_252_r0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %253 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %252*/
		main_preheaderi_253_r1 = (`TAG_g_compressed_a + (4 * main_preheaderi_252_r1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %253 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %252*/
		main_preheaderi_253_r2 = (`TAG_g_compressed_a + (4 * main_preheaderi_252_r2));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
		main_preheaderi_254_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
		main_preheaderi_254_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
		main_preheaderi_254_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %255 = ashr i32 %254, 6*/
		main_preheaderi_255_r0 = ($signed(main_preheaderi_254_r0) >>> 32'd6);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %255 = ashr i32 %254, 6*/
		main_preheaderi_255_r1 = ($signed(main_preheaderi_254_r1) >>> 32'd6);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %255 = ashr i32 %254, 6*/
		main_preheaderi_255_r2 = ($signed(main_preheaderi_254_r2) >>> 32'd6);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %256 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_256_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %256 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_256_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %256 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_256_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %257 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_257_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %257 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_257_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %257 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_257_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %258 = mul nsw i32 %257, %256*/
		main_preheaderi_258_r0 = (main_preheaderi_257_r0 * main_preheaderi_256_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %258 = mul nsw i32 %257, %256*/
		main_preheaderi_258_r1 = (main_preheaderi_257_r1 * main_preheaderi_256_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %258 = mul nsw i32 %257, %256*/
		main_preheaderi_258_r2 = (main_preheaderi_257_r2 * main_preheaderi_256_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_258_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %258 = mul nsw i32 %257, %256*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_258_reg_r0 <= main_preheaderi_258_r0;
		if (start == 1'b0 && ^(main_preheaderi_258_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_258_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_258_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %258 = mul nsw i32 %257, %256*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_258_reg_r1 <= main_preheaderi_258_r1;
		if (start == 1'b0 && ^(main_preheaderi_258_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_258_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_258_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %258 = mul nsw i32 %257, %256*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_258_reg_r2 <= main_preheaderi_258_r2;
		if (start == 1'b0 && ^(main_preheaderi_258_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_258_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %259 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_259_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %259 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_259_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %259 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_259_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %260 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_260_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %260 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_260_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %260 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_260_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %261 = mul nsw i32 %260, %259*/
		main_preheaderi_261_r0 = (main_preheaderi_260_r0 * main_preheaderi_259_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %261 = mul nsw i32 %260, %259*/
		main_preheaderi_261_r1 = (main_preheaderi_260_r1 * main_preheaderi_259_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %261 = mul nsw i32 %260, %259*/
		main_preheaderi_261_r2 = (main_preheaderi_260_r2 * main_preheaderi_259_r2);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %262 = add nsw i32 %261, %258*/
		main_preheaderi_262_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %262 = add nsw i32 %261, %258*/
		main_preheaderi_262_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %262 = add nsw i32 %261, %258*/
		main_preheaderi_262_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %262 = add nsw i32 %261, %258*/
	main_preheaderi_262_reg_r0 = main_legup_memset_4_i64exit_59_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %262 = add nsw i32 %261, %258*/
	main_preheaderi_262_reg_r1 = main_legup_memset_4_i64exit_59_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %262 = add nsw i32 %261, %258*/
	main_preheaderi_262_reg_r2 = main_legup_memset_4_i64exit_59_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_263_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_263_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_263_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %264 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_264_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %264 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_264_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %264 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_264_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %265 = mul nsw i32 %264, %263*/
		main_preheaderi_265_r0 = (main_preheaderi_264_r0 * main_preheaderi_263_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %265 = mul nsw i32 %264, %263*/
		main_preheaderi_265_r1 = (main_preheaderi_264_r1 * main_preheaderi_263_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %265 = mul nsw i32 %264, %263*/
		main_preheaderi_265_r2 = (main_preheaderi_264_r2 * main_preheaderi_263_r2);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %266 = add nsw i32 %262, %265*/
		main_preheaderi_266_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %266 = add nsw i32 %262, %265*/
		main_preheaderi_266_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %266 = add nsw i32 %262, %265*/
		main_preheaderi_266_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %266 = add nsw i32 %262, %265*/
	main_preheaderi_266_reg_r0 = main_legup_memset_4_i64exit_57_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %266 = add nsw i32 %262, %265*/
	main_preheaderi_266_reg_r1 = main_legup_memset_4_i64exit_57_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %266 = add nsw i32 %262, %265*/
	main_preheaderi_266_reg_r2 = main_legup_memset_4_i64exit_57_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %267 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_267_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %267 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_267_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %267 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_267_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_268_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_268_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_268_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %269 = mul nsw i32 %268, %267*/
		main_preheaderi_269_r0 = (main_preheaderi_268_r0 * main_preheaderi_267_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %269 = mul nsw i32 %268, %267*/
		main_preheaderi_269_r1 = (main_preheaderi_268_r1 * main_preheaderi_267_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %269 = mul nsw i32 %268, %267*/
		main_preheaderi_269_r2 = (main_preheaderi_268_r2 * main_preheaderi_267_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_269_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %269 = mul nsw i32 %268, %267*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_112)) begin
		main_preheaderi_269_reg_r0 <= main_preheaderi_269_r0;
		if (start == 1'b0 && ^(main_preheaderi_269_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_269_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_269_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %269 = mul nsw i32 %268, %267*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_112)) begin
		main_preheaderi_269_reg_r1 <= main_preheaderi_269_r1;
		if (start == 1'b0 && ^(main_preheaderi_269_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_269_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_269_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %269 = mul nsw i32 %268, %267*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_112)) begin
		main_preheaderi_269_reg_r2 <= main_preheaderi_269_r2;
		if (start == 1'b0 && ^(main_preheaderi_269_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_269_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %270 = add nsw i32 %266, %269*/
		main_preheaderi_270_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %270 = add nsw i32 %266, %269*/
		main_preheaderi_270_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %270 = add nsw i32 %266, %269*/
		main_preheaderi_270_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_271_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_271_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_271_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_272_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_272_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_272_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %273 = mul nsw i32 %272, %271*/
		main_preheaderi_273_r0 = (main_preheaderi_272_r0 * main_preheaderi_271_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %273 = mul nsw i32 %272, %271*/
		main_preheaderi_273_r1 = (main_preheaderi_272_r1 * main_preheaderi_271_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %273 = mul nsw i32 %272, %271*/
		main_preheaderi_273_r2 = (main_preheaderi_272_r2 * main_preheaderi_271_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_273_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %273 = mul nsw i32 %272, %271*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_113)) begin
		main_preheaderi_273_reg_r0 <= main_preheaderi_273_r0;
		if (start == 1'b0 && ^(main_preheaderi_273_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_273_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_273_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %273 = mul nsw i32 %272, %271*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_113)) begin
		main_preheaderi_273_reg_r1 <= main_preheaderi_273_r1;
		if (start == 1'b0 && ^(main_preheaderi_273_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_273_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_273_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %273 = mul nsw i32 %272, %271*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_113)) begin
		main_preheaderi_273_reg_r2 <= main_preheaderi_273_r2;
		if (start == 1'b0 && ^(main_preheaderi_273_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_273_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %270, %273*/
		main_preheaderi_274_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %270, %273*/
		main_preheaderi_274_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %270, %273*/
		main_preheaderi_274_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %274 = add nsw i32 %270, %273*/
	main_preheaderi_274_reg_r0 = main_legup_memset_4_i64exit_59_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %274 = add nsw i32 %270, %273*/
	main_preheaderi_274_reg_r1 = main_legup_memset_4_i64exit_59_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %274 = add nsw i32 %270, %273*/
	main_preheaderi_274_reg_r2 = main_legup_memset_4_i64exit_59_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_275_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_275_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_275_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_276_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_276_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_276_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %277 = mul nsw i32 %276, %275*/
		main_preheaderi_277_r0 = (main_preheaderi_276_r0 * main_preheaderi_275_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %277 = mul nsw i32 %276, %275*/
		main_preheaderi_277_r1 = (main_preheaderi_276_r1 * main_preheaderi_275_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %277 = mul nsw i32 %276, %275*/
		main_preheaderi_277_r2 = (main_preheaderi_276_r2 * main_preheaderi_275_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_277_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %277 = mul nsw i32 %276, %275*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_114)) begin
		main_preheaderi_277_reg_r0 <= main_preheaderi_277_r0;
		if (start == 1'b0 && ^(main_preheaderi_277_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_277_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_277_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %277 = mul nsw i32 %276, %275*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_114)) begin
		main_preheaderi_277_reg_r1 <= main_preheaderi_277_r1;
		if (start == 1'b0 && ^(main_preheaderi_277_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_277_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_277_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %277 = mul nsw i32 %276, %275*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_114)) begin
		main_preheaderi_277_reg_r2 <= main_preheaderi_277_r2;
		if (start == 1'b0 && ^(main_preheaderi_277_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_277_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
		main_preheaderi_278_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
		main_preheaderi_278_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
		main_preheaderi_278_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %279 = ashr i32 %278, 14*/
		main_preheaderi_279_r0 = ($signed(main_preheaderi_278_r0) >>> 32'd14);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %279 = ashr i32 %278, 14*/
		main_preheaderi_279_r1 = ($signed(main_preheaderi_278_r1) >>> 32'd14);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %279 = ashr i32 %278, 14*/
		main_preheaderi_279_r2 = ($signed(main_preheaderi_278_r2) >>> 32'd14);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_279_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %279 = ashr i32 %278, 14*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_preheaderi_279_reg_r0 <= main_preheaderi_279_r0;
		if (start == 1'b0 && ^(main_preheaderi_279_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_279_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_279_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %279 = ashr i32 %278, 14*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_preheaderi_279_reg_r1 <= main_preheaderi_279_r1;
		if (start == 1'b0 && ^(main_preheaderi_279_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_279_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_279_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %279 = ashr i32 %278, 14*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_preheaderi_279_reg_r2 <= main_preheaderi_279_r2;
		if (start == 1'b0 && ^(main_preheaderi_279_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_279_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %280 = mul i32 %dec_al1.0, %dec_rlt1.0*/
		main_preheaderi_280_r0 = (main_preheaderi_dec_al10_reg_r0 * main_preheaderi_dec_rlt10_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %280 = mul i32 %dec_al1.0, %dec_rlt1.0*/
		main_preheaderi_280_r1 = (main_preheaderi_dec_al10_reg_r1 * main_preheaderi_dec_rlt10_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %280 = mul i32 %dec_al1.0, %dec_rlt1.0*/
		main_preheaderi_280_r2 = (main_preheaderi_dec_al10_reg_r2 * main_preheaderi_dec_rlt10_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_280_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %280 = mul i32 %dec_al1.0, %dec_rlt1.0*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_280_reg_r0 <= main_preheaderi_280_r0;
		if (start == 1'b0 && ^(main_preheaderi_280_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_280_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_280_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %280 = mul i32 %dec_al1.0, %dec_rlt1.0*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_280_reg_r1 <= main_preheaderi_280_r1;
		if (start == 1'b0 && ^(main_preheaderi_280_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_280_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_280_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %280 = mul i32 %dec_al1.0, %dec_rlt1.0*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_280_reg_r2 <= main_preheaderi_280_r2;
		if (start == 1'b0 && ^(main_preheaderi_280_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_280_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %281 = mul i32 %dec_al2.0, %dec_rlt2.0*/
		main_preheaderi_281_r0 = (main_preheaderi_dec_al20_reg_r0 * main_preheaderi_dec_rlt20_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %281 = mul i32 %dec_al2.0, %dec_rlt2.0*/
		main_preheaderi_281_r1 = (main_preheaderi_dec_al20_reg_r1 * main_preheaderi_dec_rlt20_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %281 = mul i32 %dec_al2.0, %dec_rlt2.0*/
		main_preheaderi_281_r2 = (main_preheaderi_dec_al20_reg_r2 * main_preheaderi_dec_rlt20_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_281_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %281 = mul i32 %dec_al2.0, %dec_rlt2.0*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_281_reg_r0 <= main_preheaderi_281_r0;
		if (start == 1'b0 && ^(main_preheaderi_281_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_281_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_281_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %281 = mul i32 %dec_al2.0, %dec_rlt2.0*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_281_reg_r1 <= main_preheaderi_281_r1;
		if (start == 1'b0 && ^(main_preheaderi_281_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_281_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_281_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %281 = mul i32 %dec_al2.0, %dec_rlt2.0*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_281_reg_r2 <= main_preheaderi_281_r2;
		if (start == 1'b0 && ^(main_preheaderi_281_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_281_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %tmp.i.i = add i32 %281, %280*/
		main_preheaderi_tmpii_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %tmp.i.i = add i32 %281, %280*/
		main_preheaderi_tmpii_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %tmp.i.i = add i32 %281, %280*/
		main_preheaderi_tmpii_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %tmp1.i.i = shl i32 %tmp.i.i, 1*/
		main_preheaderi_tmp1ii_r0 = (main_preheaderi_tmpii_r0 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %tmp1.i.i = shl i32 %tmp.i.i, 1*/
		main_preheaderi_tmp1ii_r1 = (main_preheaderi_tmpii_r1 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %tmp1.i.i = shl i32 %tmp.i.i, 1*/
		main_preheaderi_tmp1ii_r2 = (main_preheaderi_tmpii_r2 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %282 = ashr i32 %tmp1.i.i, 15*/
		main_preheaderi_282_r0 = ($signed(main_preheaderi_tmp1ii_r0) >>> 32'd15);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %282 = ashr i32 %tmp1.i.i, 15*/
		main_preheaderi_282_r1 = ($signed(main_preheaderi_tmp1ii_r1) >>> 32'd15);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %282 = ashr i32 %tmp1.i.i, 15*/
		main_preheaderi_282_r2 = ($signed(main_preheaderi_tmp1ii_r2) >>> 32'd15);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %282, %279*/
		main_preheaderi_283_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %282, %279*/
		main_preheaderi_283_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %282, %279*/
		main_preheaderi_283_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %283 = add nsw i32 %282, %279*/
	main_preheaderi_283_reg_r0 = main_legup_memset_4_i64exit_59_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %283 = add nsw i32 %282, %279*/
	main_preheaderi_283_reg_r1 = main_legup_memset_4_i64exit_59_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %283 = add nsw i32 %282, %279*/
	main_preheaderi_283_reg_r2 = main_legup_memset_4_i64exit_59_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %284 = lshr i32 %254, 2*/
		main_preheaderi_284_r0 = (main_preheaderi_254_r0 >>> (32'd2 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %284 = lshr i32 %254, 2*/
		main_preheaderi_284_r1 = (main_preheaderi_254_r1 >>> (32'd2 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %284 = lshr i32 %254, 2*/
		main_preheaderi_284_r2 = (main_preheaderi_254_r2 >>> (32'd2 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %285 = and i32 %284, 15*/
		main_preheaderi_285_r0 = (main_preheaderi_284_r0 & 32'd15);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %285 = and i32 %284, 15*/
		main_preheaderi_285_r1 = (main_preheaderi_284_r1 & 32'd15);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %285 = and i32 %284, 15*/
		main_preheaderi_285_r2 = (main_preheaderi_284_r2 & 32'd15);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %286 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %285*/
		main_preheaderi_286_r0 = (`TAG_g_qq4_code4_table_a + (4 * main_preheaderi_285_r0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %286 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %285*/
		main_preheaderi_286_r1 = (`TAG_g_qq4_code4_table_a + (4 * main_preheaderi_285_r1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %286 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %285*/
		main_preheaderi_286_r2 = (`TAG_g_qq4_code4_table_a + (4 * main_preheaderi_285_r2));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %287 = load i32* %286, align 4, !tbaa !1*/
		main_preheaderi_287_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %287 = load i32* %286, align 4, !tbaa !1*/
		main_preheaderi_287_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %287 = load i32* %286, align 4, !tbaa !1*/
		main_preheaderi_287_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %288 = mul nsw i32 %287, %dec_detl.0*/
		main_preheaderi_288_r0 = (main_preheaderi_287_r0 * main_preheaderi_dec_detl0_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %288 = mul nsw i32 %287, %dec_detl.0*/
		main_preheaderi_288_r1 = (main_preheaderi_287_r1 * main_preheaderi_dec_detl0_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %288 = mul nsw i32 %287, %dec_detl.0*/
		main_preheaderi_288_r2 = (main_preheaderi_287_r2 * main_preheaderi_dec_detl0_reg_r2);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %289 = ashr i32 %288, 15*/
		main_preheaderi_289_r0 = ($signed(main_preheaderi_288_r0) >>> 32'd15);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %289 = ashr i32 %288, 15*/
		main_preheaderi_289_r1 = ($signed(main_preheaderi_288_r1) >>> 32'd15);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %289 = ashr i32 %288, 15*/
		main_preheaderi_289_r2 = ($signed(main_preheaderi_288_r2) >>> 32'd15);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_289_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %289 = ashr i32 %288, 15*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_289_reg_r0 <= main_preheaderi_289_r0;
		if (start == 1'b0 && ^(main_preheaderi_289_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_289_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_289_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %289 = ashr i32 %288, 15*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_289_reg_r1 <= main_preheaderi_289_r1;
		if (start == 1'b0 && ^(main_preheaderi_289_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_289_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_289_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %289 = ashr i32 %288, 15*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_289_reg_r2 <= main_preheaderi_289_r2;
		if (start == 1'b0 && ^(main_preheaderi_289_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_289_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %290 = mul nsw i32 %250, %dec_detl.0*/
		main_preheaderi_290_r0 = (main_preheaderipreheader_250_reg_r0 * main_preheaderi_dec_detl0_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %290 = mul nsw i32 %250, %dec_detl.0*/
		main_preheaderi_290_r1 = (main_preheaderipreheader_250_reg_r1 * main_preheaderi_dec_detl0_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %290 = mul nsw i32 %250, %dec_detl.0*/
		main_preheaderi_290_r2 = (main_preheaderipreheader_250_reg_r2 * main_preheaderi_dec_detl0_reg_r2);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %291 = ashr i32 %290, 15*/
		main_preheaderi_291_r0 = ($signed(main_preheaderi_290_r0) >>> 32'd15);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %291 = ashr i32 %290, 15*/
		main_preheaderi_291_r1 = ($signed(main_preheaderi_290_r1) >>> 32'd15);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %291 = ashr i32 %290, 15*/
		main_preheaderi_291_r2 = ($signed(main_preheaderi_290_r2) >>> 32'd15);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_291_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %291 = ashr i32 %290, 15*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_291_reg_r0 <= main_preheaderi_291_r0;
		if (start == 1'b0 && ^(main_preheaderi_291_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_291_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_291_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %291 = ashr i32 %290, 15*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_291_reg_r1 <= main_preheaderi_291_r1;
		if (start == 1'b0 && ^(main_preheaderi_291_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_291_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_291_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %291 = ashr i32 %290, 15*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_291_reg_r2 <= main_preheaderi_291_r2;
		if (start == 1'b0 && ^(main_preheaderi_291_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_291_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %292 = add nsw i32 %291, %283*/
		main_preheaderi_292_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %292 = add nsw i32 %291, %283*/
		main_preheaderi_292_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %292 = add nsw i32 %291, %283*/
		main_preheaderi_292_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %292 = add nsw i32 %291, %283*/
	main_preheaderi_292_reg_r0 = main_legup_memset_4_i64exit_57_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %292 = add nsw i32 %291, %283*/
	main_preheaderi_292_reg_r1 = main_legup_memset_4_i64exit_57_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %292 = add nsw i32 %291, %283*/
	main_preheaderi_292_reg_r2 = main_legup_memset_4_i64exit_57_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %293 = mul nsw i32 %dec_nbl.0, 127*/
		main_preheaderi_293_r0 = (main_preheaderi_dec_nbl0_reg_r0 * 32'd127);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %293 = mul nsw i32 %dec_nbl.0, 127*/
		main_preheaderi_293_r1 = (main_preheaderi_dec_nbl0_reg_r1 * 32'd127);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %293 = mul nsw i32 %dec_nbl.0, 127*/
		main_preheaderi_293_r2 = (main_preheaderi_dec_nbl0_reg_r2 * 32'd127);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %294 = ashr i32 %293, 7*/
		main_preheaderi_294_r0 = ($signed(main_preheaderi_293_r0) >>> 32'd7);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %294 = ashr i32 %293, 7*/
		main_preheaderi_294_r1 = ($signed(main_preheaderi_293_r1) >>> 32'd7);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %294 = ashr i32 %293, 7*/
		main_preheaderi_294_r2 = ($signed(main_preheaderi_293_r2) >>> 32'd7);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_294_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %294 = ashr i32 %293, 7*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_294_reg_r0 <= main_preheaderi_294_r0;
		if (start == 1'b0 && ^(main_preheaderi_294_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_294_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_294_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %294 = ashr i32 %293, 7*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_294_reg_r1 <= main_preheaderi_294_r1;
		if (start == 1'b0 && ^(main_preheaderi_294_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_294_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_294_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %294 = ashr i32 %293, 7*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_294_reg_r2 <= main_preheaderi_294_r2;
		if (start == 1'b0 && ^(main_preheaderi_294_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_294_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %295 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %285*/
		main_preheaderi_295_r0 = (`TAG_g_wl_code_table_a + (4 * main_preheaderi_285_r0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %295 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %285*/
		main_preheaderi_295_r1 = (`TAG_g_wl_code_table_a + (4 * main_preheaderi_285_r1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %295 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %285*/
		main_preheaderi_295_r2 = (`TAG_g_wl_code_table_a + (4 * main_preheaderi_285_r2));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %296 = load i32* %295, align 4, !tbaa !1*/
		main_preheaderi_296_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %296 = load i32* %295, align 4, !tbaa !1*/
		main_preheaderi_296_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %296 = load i32* %295, align 4, !tbaa !1*/
		main_preheaderi_296_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %297 = add nsw i32 %294, %296*/
		main_preheaderi_297_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %297 = add nsw i32 %294, %296*/
		main_preheaderi_297_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %297 = add nsw i32 %294, %296*/
		main_preheaderi_297_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %298 = icmp slt i32 %297, 0*/
		main_preheaderi_298_r0 = ($signed(main_preheaderi_297_r0) < $signed(32'd0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %298 = icmp slt i32 %297, 0*/
		main_preheaderi_298_r1 = ($signed(main_preheaderi_297_r1) < $signed(32'd0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %298 = icmp slt i32 %297, 0*/
		main_preheaderi_298_r2 = ($signed(main_preheaderi_297_r2) < $signed(32'd0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i12.i = select i1 %298, i32 0, i32 %297*/
		main_preheaderi_i12i_r0 = (main_preheaderi_298_r0 ? 32'd0 : main_preheaderi_297_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i12.i = select i1 %298, i32 0, i32 %297*/
		main_preheaderi_i12i_r1 = (main_preheaderi_298_r1 ? 32'd0 : main_preheaderi_297_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i12.i = select i1 %298, i32 0, i32 %297*/
		main_preheaderi_i12i_r2 = (main_preheaderi_298_r2 ? 32'd0 : main_preheaderi_297_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i12i_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %..i12.i = select i1 %298, i32 0, i32 %297*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_i12i_reg_r0 <= main_preheaderi_i12i_r0;
		if (start == 1'b0 && ^(main_preheaderi_i12i_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i12i_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i12i_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %..i12.i = select i1 %298, i32 0, i32 %297*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_i12i_reg_r1 <= main_preheaderi_i12i_r1;
		if (start == 1'b0 && ^(main_preheaderi_i12i_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i12i_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i12i_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %..i12.i = select i1 %298, i32 0, i32 %297*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_i12i_reg_r2 <= main_preheaderi_i12i_r2;
		if (start == 1'b0 && ^(main_preheaderi_i12i_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i12i_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %299 = icmp sgt i32 %..i12.i, 18432*/
		main_preheaderi_299_r0 = ($signed(main_preheaderi_i12i_reg_r0) > $signed(32'd18432));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %299 = icmp sgt i32 %..i12.i, 18432*/
		main_preheaderi_299_r1 = ($signed(main_preheaderi_i12i_reg_r1) > $signed(32'd18432));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %299 = icmp sgt i32 %..i12.i, 18432*/
		main_preheaderi_299_r2 = ($signed(main_preheaderi_i12i_reg_r2) > $signed(32'd18432));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i13.i = select i1 %299, i32 18432, i32 %..i12.i*/
		main_preheaderi_i13i_r0 = (main_preheaderi_299_r0 ? 32'd18432 : main_preheaderi_i12i_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i13.i = select i1 %299, i32 18432, i32 %..i12.i*/
		main_preheaderi_i13i_r1 = (main_preheaderi_299_r1 ? 32'd18432 : main_preheaderi_i12i_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i13.i = select i1 %299, i32 18432, i32 %..i12.i*/
		main_preheaderi_i13i_r2 = (main_preheaderi_299_r2 ? 32'd18432 : main_preheaderi_i12i_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i13i_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %...i13.i = select i1 %299, i32 18432, i32 %..i12.i*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_i13i_reg_r0 <= main_preheaderi_i13i_r0;
		if (start == 1'b0 && ^(main_preheaderi_i13i_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i13i_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i13i_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %...i13.i = select i1 %299, i32 18432, i32 %..i12.i*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_i13i_reg_r1 <= main_preheaderi_i13i_r1;
		if (start == 1'b0 && ^(main_preheaderi_i13i_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i13i_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i13i_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %...i13.i = select i1 %299, i32 18432, i32 %..i12.i*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_i13i_reg_r2 <= main_preheaderi_i13i_r2;
		if (start == 1'b0 && ^(main_preheaderi_i13i_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i13i_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %300 = lshr i32 %...i13.i, 6*/
		main_preheaderi_300_r0 = (main_preheaderi_i13i_r0 >>> (32'd6 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %300 = lshr i32 %...i13.i, 6*/
		main_preheaderi_300_r1 = (main_preheaderi_i13i_r1 >>> (32'd6 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %300 = lshr i32 %...i13.i, 6*/
		main_preheaderi_300_r2 = (main_preheaderi_i13i_r2 >>> (32'd6 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %301 = and i32 %300, 31*/
		main_preheaderi_301_r0 = (main_preheaderi_300_r0 & 32'd31);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %301 = and i32 %300, 31*/
		main_preheaderi_301_r1 = (main_preheaderi_300_r1 & 32'd31);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %301 = and i32 %300, 31*/
		main_preheaderi_301_r2 = (main_preheaderi_300_r2 & 32'd31);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_301_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %301 = and i32 %300, 31*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_301_reg_r0 <= main_preheaderi_301_r0;
		if (start == 1'b0 && ^(main_preheaderi_301_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_301_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_301_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %301 = and i32 %300, 31*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_301_reg_r1 <= main_preheaderi_301_r1;
		if (start == 1'b0 && ^(main_preheaderi_301_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_301_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_301_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %301 = and i32 %300, 31*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_301_reg_r2 <= main_preheaderi_301_r2;
		if (start == 1'b0 && ^(main_preheaderi_301_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_301_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %302 = ashr i32 %...i13.i, 11*/
		main_preheaderi_302_r0 = ($signed(main_preheaderi_i13i_r0) >>> 32'd11);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %302 = ashr i32 %...i13.i, 11*/
		main_preheaderi_302_r1 = ($signed(main_preheaderi_i13i_r1) >>> 32'd11);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %302 = ashr i32 %...i13.i, 11*/
		main_preheaderi_302_r2 = ($signed(main_preheaderi_i13i_r2) >>> 32'd11);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %303 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %301*/
		main_preheaderi_303_r0 = (`TAG_g_ilb_table_a + (4 * main_preheaderi_301_reg_r0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %303 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %301*/
		main_preheaderi_303_r1 = (`TAG_g_ilb_table_a + (4 * main_preheaderi_301_reg_r1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %303 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %301*/
		main_preheaderi_303_r2 = (`TAG_g_ilb_table_a + (4 * main_preheaderi_301_reg_r2));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %304 = load i32* %303, align 4, !tbaa !1*/
		main_preheaderi_304_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %304 = load i32* %303, align 4, !tbaa !1*/
		main_preheaderi_304_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %304 = load i32* %303, align 4, !tbaa !1*/
		main_preheaderi_304_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %305 = sub i32 9, %302*/
		main_preheaderi_305_r0 = (32'd9 - main_preheaderi_302_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %305 = sub i32 9, %302*/
		main_preheaderi_305_r1 = (32'd9 - main_preheaderi_302_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %305 = sub i32 9, %302*/
		main_preheaderi_305_r2 = (32'd9 - main_preheaderi_302_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_305_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %305 = sub i32 9, %302*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_305_reg_r0 <= main_preheaderi_305_r0;
		if (start == 1'b0 && ^(main_preheaderi_305_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_305_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_305_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %305 = sub i32 9, %302*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_305_reg_r1 <= main_preheaderi_305_r1;
		if (start == 1'b0 && ^(main_preheaderi_305_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_305_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_305_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %305 = sub i32 9, %302*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_305_reg_r2 <= main_preheaderi_305_r2;
		if (start == 1'b0 && ^(main_preheaderi_305_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_305_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %306 = ashr i32 %304, %305*/
		main_preheaderi_306_r0 = ($signed(main_preheaderi_304_r0) >>> main_preheaderi_305_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %306 = ashr i32 %304, %305*/
		main_preheaderi_306_r1 = ($signed(main_preheaderi_304_r1) >>> main_preheaderi_305_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %306 = ashr i32 %304, %305*/
		main_preheaderi_306_r2 = ($signed(main_preheaderi_304_r2) >>> main_preheaderi_305_reg_r2);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %307 = shl i32 %306, 3*/
		main_preheaderi_307_r0 = (main_preheaderi_306_r0 <<< (32'd3 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %307 = shl i32 %306, 3*/
		main_preheaderi_307_r1 = (main_preheaderi_306_r1 <<< (32'd3 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %307 = shl i32 %306, 3*/
		main_preheaderi_307_r2 = (main_preheaderi_306_r2 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_307_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %307 = shl i32 %306, 3*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_307_reg_r0 <= main_preheaderi_307_r0;
		if (start == 1'b0 && ^(main_preheaderi_307_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_307_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_307_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %307 = shl i32 %306, 3*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_307_reg_r1 <= main_preheaderi_307_r1;
		if (start == 1'b0 && ^(main_preheaderi_307_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_307_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_307_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %307 = shl i32 %306, 3*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_307_reg_r2 <= main_preheaderi_307_r2;
		if (start == 1'b0 && ^(main_preheaderi_307_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_307_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %308 = add nsw i32 %279, %289*/
		main_preheaderi_308_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %308 = add nsw i32 %279, %289*/
		main_preheaderi_308_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %308 = add nsw i32 %279, %289*/
		main_preheaderi_308_r2 = main_signed_add_32_0_r2;
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_308_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %308 = add nsw i32 %279, %289*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_308_reg_r0 <= main_preheaderi_308_r0;
		if (start == 1'b0 && ^(main_preheaderi_308_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_308_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_308_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %308 = add nsw i32 %279, %289*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_308_reg_r1 <= main_preheaderi_308_r1;
		if (start == 1'b0 && ^(main_preheaderi_308_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_308_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_308_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %308 = add nsw i32 %279, %289*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_308_reg_r2 <= main_preheaderi_308_r2;
		if (start == 1'b0 && ^(main_preheaderi_308_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_308_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %309 = shl nsw i32 %dec_al1.0, 2*/
		main_preheaderi_309_r0 = (main_preheaderi_dec_al10_reg_r0 <<< (32'd2 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %309 = shl nsw i32 %dec_al1.0, 2*/
		main_preheaderi_309_r1 = (main_preheaderi_dec_al10_reg_r1 <<< (32'd2 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %309 = shl nsw i32 %dec_al1.0, 2*/
		main_preheaderi_309_r2 = (main_preheaderi_dec_al10_reg_r2 <<< (32'd2 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_309_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %309 = shl nsw i32 %dec_al1.0, 2*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_309_reg_r0 <= main_preheaderi_309_r0;
		if (start == 1'b0 && ^(main_preheaderi_309_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_309_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_309_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %309 = shl nsw i32 %dec_al1.0, 2*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_309_reg_r1 <= main_preheaderi_309_r1;
		if (start == 1'b0 && ^(main_preheaderi_309_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_309_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_309_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %309 = shl nsw i32 %dec_al1.0, 2*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_309_reg_r2 <= main_preheaderi_309_r2;
		if (start == 1'b0 && ^(main_preheaderi_309_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_309_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %310 = mul nsw i32 %dec_plt1.0, %308*/
		main_preheaderi_310_r0 = (main_preheaderi_dec_plt10_reg_r0 * main_preheaderi_308_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %310 = mul nsw i32 %dec_plt1.0, %308*/
		main_preheaderi_310_r1 = (main_preheaderi_dec_plt10_reg_r1 * main_preheaderi_308_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %310 = mul nsw i32 %dec_plt1.0, %308*/
		main_preheaderi_310_r2 = (main_preheaderi_dec_plt10_reg_r2 * main_preheaderi_308_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_310_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %310 = mul nsw i32 %dec_plt1.0, %308*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_310_reg_r0 <= main_preheaderi_310_r0;
		if (start == 1'b0 && ^(main_preheaderi_310_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_310_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_310_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %310 = mul nsw i32 %dec_plt1.0, %308*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_310_reg_r1 <= main_preheaderi_310_r1;
		if (start == 1'b0 && ^(main_preheaderi_310_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_310_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_310_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %310 = mul nsw i32 %dec_plt1.0, %308*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_310_reg_r2 <= main_preheaderi_310_r2;
		if (start == 1'b0 && ^(main_preheaderi_310_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_310_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %311 = icmp sgt i32 %310, -1*/
		main_preheaderi_311_r0 = ($signed(main_preheaderi_310_reg_r0) > $signed(-32'd1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %311 = icmp sgt i32 %310, -1*/
		main_preheaderi_311_r1 = ($signed(main_preheaderi_310_reg_r1) > $signed(-32'd1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %311 = icmp sgt i32 %310, -1*/
		main_preheaderi_311_r2 = ($signed(main_preheaderi_310_reg_r2) > $signed(-32'd1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %312 = sub nsw i32 0, %309*/
		main_preheaderi_312_r0 = (32'd0 - main_preheaderi_309_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %312 = sub nsw i32 0, %309*/
		main_preheaderi_312_r1 = (32'd0 - main_preheaderi_309_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %312 = sub nsw i32 0, %309*/
		main_preheaderi_312_r2 = (32'd0 - main_preheaderi_309_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_312_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %312 = sub nsw i32 0, %309*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_312_reg_r0 <= main_preheaderi_312_r0;
		if (start == 1'b0 && ^(main_preheaderi_312_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_312_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_312_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %312 = sub nsw i32 0, %309*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_312_reg_r1 <= main_preheaderi_312_r1;
		if (start == 1'b0 && ^(main_preheaderi_312_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_312_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_312_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %312 = sub nsw i32 0, %309*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_312_reg_r2 <= main_preheaderi_312_r2;
		if (start == 1'b0 && ^(main_preheaderi_312_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_312_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.1.i8.i = select i1 %311, i32 %312, i32 %309*/
		main_preheaderi_1i8i_r0 = (main_preheaderi_311_r0 ? main_preheaderi_312_reg_r0 : main_preheaderi_309_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.1.i8.i = select i1 %311, i32 %312, i32 %309*/
		main_preheaderi_1i8i_r1 = (main_preheaderi_311_r1 ? main_preheaderi_312_reg_r1 : main_preheaderi_309_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.1.i8.i = select i1 %311, i32 %312, i32 %309*/
		main_preheaderi_1i8i_r2 = (main_preheaderi_311_r2 ? main_preheaderi_312_reg_r2 : main_preheaderi_309_reg_r2);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %313 = ashr i32 %.1.i8.i, 7*/
		main_preheaderi_313_r0 = ($signed(main_preheaderi_1i8i_r0) >>> 32'd7);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %313 = ashr i32 %.1.i8.i, 7*/
		main_preheaderi_313_r1 = ($signed(main_preheaderi_1i8i_r1) >>> 32'd7);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %313 = ashr i32 %.1.i8.i, 7*/
		main_preheaderi_313_r2 = ($signed(main_preheaderi_1i8i_r2) >>> 32'd7);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_313_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %313 = ashr i32 %.1.i8.i, 7*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_preheaderi_313_reg_r0 <= main_preheaderi_313_r0;
		if (start == 1'b0 && ^(main_preheaderi_313_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_313_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_313_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %313 = ashr i32 %.1.i8.i, 7*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_preheaderi_313_reg_r1 <= main_preheaderi_313_r1;
		if (start == 1'b0 && ^(main_preheaderi_313_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_313_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_313_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %313 = ashr i32 %.1.i8.i, 7*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_preheaderi_313_reg_r2 <= main_preheaderi_313_r2;
		if (start == 1'b0 && ^(main_preheaderi_313_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_313_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %314 = mul nsw i32 %dec_plt2.0, %308*/
		main_preheaderi_314_r0 = (main_preheaderi_dec_plt20_reg_r0 * main_preheaderi_308_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %314 = mul nsw i32 %dec_plt2.0, %308*/
		main_preheaderi_314_r1 = (main_preheaderi_dec_plt20_reg_r1 * main_preheaderi_308_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %314 = mul nsw i32 %dec_plt2.0, %308*/
		main_preheaderi_314_r2 = (main_preheaderi_dec_plt20_reg_r2 * main_preheaderi_308_r2);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %315 = ashr i32 %314, 31*/
		main_preheaderi_315_r0 = ($signed(main_preheaderi_314_r0) >>> 32'd31);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %315 = ashr i32 %314, 31*/
		main_preheaderi_315_r1 = ($signed(main_preheaderi_314_r1) >>> 32'd31);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %315 = ashr i32 %314, 31*/
		main_preheaderi_315_r2 = ($signed(main_preheaderi_314_r2) >>> 32'd31);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %316 = and i32 %315, -256*/
		main_preheaderi_316_r0 = (main_preheaderi_315_r0 & -32'd256);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %316 = and i32 %315, -256*/
		main_preheaderi_316_r1 = (main_preheaderi_315_r1 & -32'd256);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %316 = and i32 %315, -256*/
		main_preheaderi_316_r2 = (main_preheaderi_315_r2 & -32'd256);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %317 = or i32 %316, 128*/
		main_preheaderi_317_r0 = (main_preheaderi_316_r0 | 32'd128);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %317 = or i32 %316, 128*/
		main_preheaderi_317_r1 = (main_preheaderi_316_r1 | 32'd128);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %317 = or i32 %316, 128*/
		main_preheaderi_317_r2 = (main_preheaderi_316_r2 | 32'd128);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_317_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %317 = or i32 %316, 128*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_317_reg_r0 <= main_preheaderi_317_r0;
		if (start == 1'b0 && ^(main_preheaderi_317_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_317_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_317_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %317 = or i32 %316, 128*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_317_reg_r1 <= main_preheaderi_317_r1;
		if (start == 1'b0 && ^(main_preheaderi_317_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_317_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_317_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %317 = or i32 %316, 128*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_317_reg_r2 <= main_preheaderi_317_r2;
		if (start == 1'b0 && ^(main_preheaderi_317_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_317_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %318 = mul nsw i32 %dec_al2.0, 127*/
		main_preheaderi_318_r0 = (main_preheaderi_dec_al20_reg_r0 * 32'd127);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %318 = mul nsw i32 %dec_al2.0, 127*/
		main_preheaderi_318_r1 = (main_preheaderi_dec_al20_reg_r1 * 32'd127);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %318 = mul nsw i32 %dec_al2.0, 127*/
		main_preheaderi_318_r2 = (main_preheaderi_dec_al20_reg_r2 * 32'd127);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %319 = ashr i32 %318, 7*/
		main_preheaderi_319_r0 = ($signed(main_preheaderi_318_r0) >>> 32'd7);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %319 = ashr i32 %318, 7*/
		main_preheaderi_319_r1 = ($signed(main_preheaderi_318_r1) >>> 32'd7);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %319 = ashr i32 %318, 7*/
		main_preheaderi_319_r2 = ($signed(main_preheaderi_318_r2) >>> 32'd7);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_319_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %319 = ashr i32 %318, 7*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_319_reg_r0 <= main_preheaderi_319_r0;
		if (start == 1'b0 && ^(main_preheaderi_319_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_319_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_319_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %319 = ashr i32 %318, 7*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_319_reg_r1 <= main_preheaderi_319_r1;
		if (start == 1'b0 && ^(main_preheaderi_319_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_319_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_319_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %319 = ashr i32 %318, 7*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_319_reg_r2 <= main_preheaderi_319_r2;
		if (start == 1'b0 && ^(main_preheaderi_319_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_319_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
		main_preheaderi_wd40i9i_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
		main_preheaderi_wd40i9i_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
		main_preheaderi_wd40i9i_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
	main_preheaderi_wd40i9i_reg_r0 = main_legup_memset_4_i64exit_57_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
	main_preheaderi_wd40i9i_reg_r1 = main_legup_memset_4_i64exit_57_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
	main_preheaderi_wd40i9i_reg_r2 = main_legup_memset_4_i64exit_57_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %320 = add nsw i32 %wd4.0.i9.i, %317*/
		main_preheaderi_320_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %320 = add nsw i32 %wd4.0.i9.i, %317*/
		main_preheaderi_320_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %320 = add nsw i32 %wd4.0.i9.i, %317*/
		main_preheaderi_320_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %321 = icmp sgt i32 %320, 12288*/
		main_preheaderi_321_r0 = ($signed(main_preheaderi_320_r0) > $signed(32'd12288));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %321 = icmp sgt i32 %320, 12288*/
		main_preheaderi_321_r1 = ($signed(main_preheaderi_320_r1) > $signed(32'd12288));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %321 = icmp sgt i32 %320, 12288*/
		main_preheaderi_321_r2 = ($signed(main_preheaderi_320_r2) > $signed(32'd12288));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i10.i = select i1 %321, i32 12288, i32 %320*/
		main_preheaderi_i10i_r0 = (main_preheaderi_321_r0 ? 32'd12288 : main_preheaderi_320_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i10.i = select i1 %321, i32 12288, i32 %320*/
		main_preheaderi_i10i_r1 = (main_preheaderi_321_r1 ? 32'd12288 : main_preheaderi_320_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i10.i = select i1 %321, i32 12288, i32 %320*/
		main_preheaderi_i10i_r2 = (main_preheaderi_321_r2 ? 32'd12288 : main_preheaderi_320_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i10i_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %..i10.i = select i1 %321, i32 12288, i32 %320*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_preheaderi_i10i_reg_r0 <= main_preheaderi_i10i_r0;
		if (start == 1'b0 && ^(main_preheaderi_i10i_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i10i_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i10i_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %..i10.i = select i1 %321, i32 12288, i32 %320*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_preheaderi_i10i_reg_r1 <= main_preheaderi_i10i_r1;
		if (start == 1'b0 && ^(main_preheaderi_i10i_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i10i_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i10i_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %..i10.i = select i1 %321, i32 12288, i32 %320*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_preheaderi_i10i_reg_r2 <= main_preheaderi_i10i_r2;
		if (start == 1'b0 && ^(main_preheaderi_i10i_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i10i_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %322 = icmp slt i32 %..i10.i, -12288*/
		main_preheaderi_322_r0 = ($signed(main_preheaderi_i10i_reg_r0) < $signed(-32'd12288));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %322 = icmp slt i32 %..i10.i, -12288*/
		main_preheaderi_322_r1 = ($signed(main_preheaderi_i10i_reg_r1) < $signed(-32'd12288));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %322 = icmp slt i32 %..i10.i, -12288*/
		main_preheaderi_322_r2 = ($signed(main_preheaderi_i10i_reg_r2) < $signed(-32'd12288));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i11.i = select i1 %322, i32 -12288, i32 %..i10.i*/
		main_preheaderi_i11i_var0_r0 = (main_preheaderi_322_r0 ? -32'd12288 : main_preheaderi_i10i_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i11.i = select i1 %322, i32 -12288, i32 %..i10.i*/
		main_preheaderi_i11i_var0_r1 = (main_preheaderi_322_r1 ? -32'd12288 : main_preheaderi_i10i_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i11.i = select i1 %322, i32 -12288, i32 %..i10.i*/
		main_preheaderi_i11i_var0_r2 = (main_preheaderi_322_r2 ? -32'd12288 : main_preheaderi_i10i_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i11i_var0_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %...i11.i = select i1 %322, i32 -12288, i32 %..i10.i*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_preheaderi_i11i_var0_reg_r0 <= main_preheaderi_i11i_var0_r0;
		if (start == 1'b0 && ^(main_preheaderi_i11i_var0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i11i_var0_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i11i_var0_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %...i11.i = select i1 %322, i32 -12288, i32 %..i10.i*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_preheaderi_i11i_var0_reg_r1 <= main_preheaderi_i11i_var0_r1;
		if (start == 1'b0 && ^(main_preheaderi_i11i_var0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i11i_var0_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i11i_var0_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %...i11.i = select i1 %322, i32 -12288, i32 %..i10.i*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_preheaderi_i11i_var0_reg_r2 <= main_preheaderi_i11i_var0_r2;
		if (start == 1'b0 && ^(main_preheaderi_i11i_var0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i11i_var0_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %323 = mul nsw i32 %dec_al1.0, 255*/
		main_preheaderi_323_r0 = (main_preheaderi_dec_al10_reg_r0 * 32'd255);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %323 = mul nsw i32 %dec_al1.0, 255*/
		main_preheaderi_323_r1 = (main_preheaderi_dec_al10_reg_r1 * 32'd255);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %323 = mul nsw i32 %dec_al1.0, 255*/
		main_preheaderi_323_r2 = (main_preheaderi_dec_al10_reg_r2 * 32'd255);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %324 = ashr i32 %323, 8*/
		main_preheaderi_324_r0 = ($signed(main_preheaderi_323_r0) >>> 32'd8);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %324 = ashr i32 %323, 8*/
		main_preheaderi_324_r1 = ($signed(main_preheaderi_323_r1) >>> 32'd8);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %324 = ashr i32 %323, 8*/
		main_preheaderi_324_r2 = ($signed(main_preheaderi_323_r2) >>> 32'd8);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_324_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %324 = ashr i32 %323, 8*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_324_reg_r0 <= main_preheaderi_324_r0;
		if (start == 1'b0 && ^(main_preheaderi_324_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_324_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_324_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %324 = ashr i32 %323, 8*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_324_reg_r1 <= main_preheaderi_324_r1;
		if (start == 1'b0 && ^(main_preheaderi_324_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_324_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_324_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %324 = ashr i32 %323, 8*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_324_reg_r2 <= main_preheaderi_324_r2;
		if (start == 1'b0 && ^(main_preheaderi_324_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_324_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %325 = ashr i32 %310, 31*/
		main_preheaderi_325_r0 = ($signed(main_preheaderi_310_r0) >>> 32'd31);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %325 = ashr i32 %310, 31*/
		main_preheaderi_325_r1 = ($signed(main_preheaderi_310_r1) >>> 32'd31);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %325 = ashr i32 %310, 31*/
		main_preheaderi_325_r2 = ($signed(main_preheaderi_310_r2) >>> 32'd31);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %326 = and i32 %325, -384*/
		main_preheaderi_326_r0 = (main_preheaderi_325_r0 & -32'd384);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %326 = and i32 %325, -384*/
		main_preheaderi_326_r1 = (main_preheaderi_325_r1 & -32'd384);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %326 = and i32 %325, -384*/
		main_preheaderi_326_r2 = (main_preheaderi_325_r2 & -32'd384);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_326_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %326 = and i32 %325, -384*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_326_reg_r0 <= main_preheaderi_326_r0;
		if (start == 1'b0 && ^(main_preheaderi_326_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_326_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_326_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %326 = and i32 %325, -384*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_326_reg_r1 <= main_preheaderi_326_r1;
		if (start == 1'b0 && ^(main_preheaderi_326_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_326_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_326_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %326 = and i32 %325, -384*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_326_reg_r2 <= main_preheaderi_326_r2;
		if (start == 1'b0 && ^(main_preheaderi_326_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_326_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %327 = add nsw i32 %324, 192*/
		main_preheaderi_327_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %327 = add nsw i32 %324, 192*/
		main_preheaderi_327_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %327 = add nsw i32 %324, 192*/
		main_preheaderi_327_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %327 = add nsw i32 %324, 192*/
	main_preheaderi_327_reg_r0 = main_legup_memset_4_i64exit_57_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %327 = add nsw i32 %324, 192*/
	main_preheaderi_327_reg_r1 = main_legup_memset_4_i64exit_57_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %327 = add nsw i32 %324, 192*/
	main_preheaderi_327_reg_r2 = main_legup_memset_4_i64exit_57_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.0.i5.i = add nsw i32 %327, %326*/
		main_preheaderi_apl10i5i_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.0.i5.i = add nsw i32 %327, %326*/
		main_preheaderi_apl10i5i_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.0.i5.i = add nsw i32 %327, %326*/
		main_preheaderi_apl10i5i_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %328 = sub nsw i32 15360, %...i11.i*/
		main_preheaderi_328_r0 = (32'd15360 - main_preheaderi_i11i_var0_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %328 = sub nsw i32 15360, %...i11.i*/
		main_preheaderi_328_r1 = (32'd15360 - main_preheaderi_i11i_var0_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %328 = sub nsw i32 15360, %...i11.i*/
		main_preheaderi_328_r2 = (32'd15360 - main_preheaderi_i11i_var0_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_328_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %328 = sub nsw i32 15360, %...i11.i*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_preheaderi_328_reg_r0 <= main_preheaderi_328_r0;
		if (start == 1'b0 && ^(main_preheaderi_328_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_328_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_328_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %328 = sub nsw i32 15360, %...i11.i*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_preheaderi_328_reg_r1 <= main_preheaderi_328_r1;
		if (start == 1'b0 && ^(main_preheaderi_328_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_328_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_328_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %328 = sub nsw i32 15360, %...i11.i*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_preheaderi_328_reg_r2 <= main_preheaderi_328_r2;
		if (start == 1'b0 && ^(main_preheaderi_328_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_328_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %329 = icmp sgt i32 %apl1.0.i5.i, %328*/
		main_preheaderi_329_r0 = ($signed(main_preheaderi_apl10i5i_r0) > $signed(main_preheaderi_328_reg_r0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %329 = icmp sgt i32 %apl1.0.i5.i, %328*/
		main_preheaderi_329_r1 = ($signed(main_preheaderi_apl10i5i_r1) > $signed(main_preheaderi_328_reg_r1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %329 = icmp sgt i32 %apl1.0.i5.i, %328*/
		main_preheaderi_329_r2 = ($signed(main_preheaderi_apl10i5i_r2) > $signed(main_preheaderi_328_reg_r2));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i6.i = select i1 %329, i32 %328, i32 %apl1.0.i5.i*/
		main_preheaderi_apl10i6i_r0 = (main_preheaderi_329_r0 ? main_preheaderi_328_reg_r0 : main_preheaderi_apl10i5i_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i6.i = select i1 %329, i32 %328, i32 %apl1.0.i5.i*/
		main_preheaderi_apl10i6i_r1 = (main_preheaderi_329_r1 ? main_preheaderi_328_reg_r1 : main_preheaderi_apl10i5i_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i6.i = select i1 %329, i32 %328, i32 %apl1.0.i5.i*/
		main_preheaderi_apl10i6i_r2 = (main_preheaderi_329_r2 ? main_preheaderi_328_reg_r2 : main_preheaderi_apl10i5i_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_apl10i6i_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %.apl1.0.i6.i = select i1 %329, i32 %328, i32 %apl1.0.i5.i*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_preheaderi_apl10i6i_reg_r0 <= main_preheaderi_apl10i6i_r0;
		if (start == 1'b0 && ^(main_preheaderi_apl10i6i_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl10i6i_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_apl10i6i_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %.apl1.0.i6.i = select i1 %329, i32 %328, i32 %apl1.0.i5.i*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_preheaderi_apl10i6i_reg_r1 <= main_preheaderi_apl10i6i_r1;
		if (start == 1'b0 && ^(main_preheaderi_apl10i6i_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl10i6i_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_apl10i6i_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %.apl1.0.i6.i = select i1 %329, i32 %328, i32 %apl1.0.i5.i*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_preheaderi_apl10i6i_reg_r2 <= main_preheaderi_apl10i6i_r2;
		if (start == 1'b0 && ^(main_preheaderi_apl10i6i_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl10i6i_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %330 = sub nsw i32 0, %328*/
		main_preheaderi_330_r0 = (32'd0 - main_preheaderi_328_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %330 = sub nsw i32 0, %328*/
		main_preheaderi_330_r1 = (32'd0 - main_preheaderi_328_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %330 = sub nsw i32 0, %328*/
		main_preheaderi_330_r2 = (32'd0 - main_preheaderi_328_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_330_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %330 = sub nsw i32 0, %328*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_preheaderi_330_reg_r0 <= main_preheaderi_330_r0;
		if (start == 1'b0 && ^(main_preheaderi_330_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_330_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_330_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %330 = sub nsw i32 0, %328*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_preheaderi_330_reg_r1 <= main_preheaderi_330_r1;
		if (start == 1'b0 && ^(main_preheaderi_330_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_330_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_330_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %330 = sub nsw i32 0, %328*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_preheaderi_330_reg_r2 <= main_preheaderi_330_r2;
		if (start == 1'b0 && ^(main_preheaderi_330_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_330_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %331 = icmp slt i32 %.apl1.0.i6.i, %330*/
		main_preheaderi_331_r0 = ($signed(main_preheaderi_apl10i6i_reg_r0) < $signed(main_preheaderi_330_reg_r0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %331 = icmp slt i32 %.apl1.0.i6.i, %330*/
		main_preheaderi_331_r1 = ($signed(main_preheaderi_apl10i6i_reg_r1) < $signed(main_preheaderi_330_reg_r1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %331 = icmp slt i32 %.apl1.0.i6.i, %330*/
		main_preheaderi_331_r2 = ($signed(main_preheaderi_apl10i6i_reg_r2) < $signed(main_preheaderi_330_reg_r2));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i7.i = select i1 %331, i32 %330, i32 %.apl1.0.i6.i*/
		main_preheaderi_apl12i7i_r0 = (main_preheaderi_331_r0 ? main_preheaderi_330_reg_r0 : main_preheaderi_apl10i6i_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i7.i = select i1 %331, i32 %330, i32 %.apl1.0.i6.i*/
		main_preheaderi_apl12i7i_r1 = (main_preheaderi_331_r1 ? main_preheaderi_330_reg_r1 : main_preheaderi_apl10i6i_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i7.i = select i1 %331, i32 %330, i32 %.apl1.0.i6.i*/
		main_preheaderi_apl12i7i_r2 = (main_preheaderi_331_r2 ? main_preheaderi_330_reg_r2 : main_preheaderi_apl10i6i_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_apl12i7i_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %apl1.2.i7.i = select i1 %331, i32 %330, i32 %.apl1.0.i6.i*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_preheaderi_apl12i7i_reg_r0 <= main_preheaderi_apl12i7i_r0;
		if (start == 1'b0 && ^(main_preheaderi_apl12i7i_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl12i7i_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_apl12i7i_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %apl1.2.i7.i = select i1 %331, i32 %330, i32 %.apl1.0.i6.i*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_preheaderi_apl12i7i_reg_r1 <= main_preheaderi_apl12i7i_r1;
		if (start == 1'b0 && ^(main_preheaderi_apl12i7i_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl12i7i_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_apl12i7i_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %apl1.2.i7.i = select i1 %331, i32 %330, i32 %.apl1.0.i6.i*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_preheaderi_apl12i7i_reg_r2 <= main_preheaderi_apl12i7i_r2;
		if (start == 1'b0 && ^(main_preheaderi_apl12i7i_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl12i7i_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %332 = add nsw i32 %289, %283*/
		main_preheaderi_332_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %332 = add nsw i32 %289, %283*/
		main_preheaderi_332_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %332 = add nsw i32 %289, %283*/
		main_preheaderi_332_r2 = main_signed_add_32_0_r2;
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_332_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %332 = add nsw i32 %289, %283*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_preheaderi_332_reg_r0 <= main_preheaderi_332_r0;
		if (start == 1'b0 && ^(main_preheaderi_332_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_332_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_332_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %332 = add nsw i32 %289, %283*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_preheaderi_332_reg_r1 <= main_preheaderi_332_r1;
		if (start == 1'b0 && ^(main_preheaderi_332_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_332_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_332_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %332 = add nsw i32 %289, %283*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_preheaderi_332_reg_r2 <= main_preheaderi_332_r2;
		if (start == 1'b0 && ^(main_preheaderi_332_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_332_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %333 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_333_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %333 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_333_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %333 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_333_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_334_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_334_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_334_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %335 = mul nsw i32 %334, %333*/
		main_preheaderi_335_r0 = (main_preheaderi_334_r0 * main_preheaderi_333_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %335 = mul nsw i32 %334, %333*/
		main_preheaderi_335_r1 = (main_preheaderi_334_r1 * main_preheaderi_333_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %335 = mul nsw i32 %334, %333*/
		main_preheaderi_335_r2 = (main_preheaderi_334_r2 * main_preheaderi_333_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_335_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %335 = mul nsw i32 %334, %333*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_335_reg_r0 <= main_preheaderi_335_r0;
		if (start == 1'b0 && ^(main_preheaderi_335_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_335_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_335_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %335 = mul nsw i32 %334, %333*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_335_reg_r1 <= main_preheaderi_335_r1;
		if (start == 1'b0 && ^(main_preheaderi_335_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_335_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_335_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %335 = mul nsw i32 %334, %333*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_335_reg_r2 <= main_preheaderi_335_r2;
		if (start == 1'b0 && ^(main_preheaderi_335_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_335_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %336 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_336_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %336 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_336_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %336 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_336_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %337 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_337_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %337 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_337_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %337 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_337_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %338 = mul nsw i32 %337, %336*/
		main_preheaderi_338_r0 = (main_preheaderi_337_r0 * main_preheaderi_336_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %338 = mul nsw i32 %337, %336*/
		main_preheaderi_338_r1 = (main_preheaderi_337_r1 * main_preheaderi_336_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %338 = mul nsw i32 %337, %336*/
		main_preheaderi_338_r2 = (main_preheaderi_337_r2 * main_preheaderi_336_r2);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %338, %335*/
		main_preheaderi_339_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %338, %335*/
		main_preheaderi_339_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %338, %335*/
		main_preheaderi_339_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %339 = add nsw i32 %338, %335*/
	main_preheaderi_339_reg_r0 = main_legup_memset_4_i64exit_30_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %339 = add nsw i32 %338, %335*/
	main_preheaderi_339_reg_r1 = main_legup_memset_4_i64exit_30_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %339 = add nsw i32 %338, %335*/
	main_preheaderi_339_reg_r2 = main_legup_memset_4_i64exit_30_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %340 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_340_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %340 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_340_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %340 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_340_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %341 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_341_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %341 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_341_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %341 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_341_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %342 = mul nsw i32 %341, %340*/
		main_preheaderi_342_r0 = (main_preheaderi_341_r0 * main_preheaderi_340_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %342 = mul nsw i32 %341, %340*/
		main_preheaderi_342_r1 = (main_preheaderi_341_r1 * main_preheaderi_340_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %342 = mul nsw i32 %341, %340*/
		main_preheaderi_342_r2 = (main_preheaderi_341_r2 * main_preheaderi_340_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_342_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %342 = mul nsw i32 %341, %340*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_preheaderi_342_reg_r0 <= main_preheaderi_342_r0;
		if (start == 1'b0 && ^(main_preheaderi_342_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_342_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_342_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %342 = mul nsw i32 %341, %340*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_preheaderi_342_reg_r1 <= main_preheaderi_342_r1;
		if (start == 1'b0 && ^(main_preheaderi_342_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_342_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_342_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %342 = mul nsw i32 %341, %340*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_preheaderi_342_reg_r2 <= main_preheaderi_342_r2;
		if (start == 1'b0 && ^(main_preheaderi_342_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_342_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %343 = add nsw i32 %339, %342*/
		main_preheaderi_343_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %343 = add nsw i32 %339, %342*/
		main_preheaderi_343_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %343 = add nsw i32 %339, %342*/
		main_preheaderi_343_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %344 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_344_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %344 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_344_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %344 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_344_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %345 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_345_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %345 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_345_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %345 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_345_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %346 = mul nsw i32 %345, %344*/
		main_preheaderi_346_r0 = (main_preheaderi_345_r0 * main_preheaderi_344_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %346 = mul nsw i32 %345, %344*/
		main_preheaderi_346_r1 = (main_preheaderi_345_r1 * main_preheaderi_344_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %346 = mul nsw i32 %345, %344*/
		main_preheaderi_346_r2 = (main_preheaderi_345_r2 * main_preheaderi_344_r2);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %347 = add nsw i32 %343, %346*/
		main_preheaderi_347_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %347 = add nsw i32 %343, %346*/
		main_preheaderi_347_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %347 = add nsw i32 %343, %346*/
		main_preheaderi_347_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %347 = add nsw i32 %343, %346*/
	main_preheaderi_347_reg_r0 = main_quantlexiti_137_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %347 = add nsw i32 %343, %346*/
	main_preheaderi_347_reg_r1 = main_quantlexiti_137_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %347 = add nsw i32 %343, %346*/
	main_preheaderi_347_reg_r2 = main_quantlexiti_137_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %348 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_348_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %348 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_348_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %348 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_348_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %349 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_349_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %349 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_349_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %349 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_349_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %350 = mul nsw i32 %349, %348*/
		main_preheaderi_350_r0 = (main_preheaderi_349_r0 * main_preheaderi_348_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %350 = mul nsw i32 %349, %348*/
		main_preheaderi_350_r1 = (main_preheaderi_349_r1 * main_preheaderi_348_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %350 = mul nsw i32 %349, %348*/
		main_preheaderi_350_r2 = (main_preheaderi_349_r2 * main_preheaderi_348_r2);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %347, %350*/
		main_preheaderi_351_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %347, %350*/
		main_preheaderi_351_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %347, %350*/
		main_preheaderi_351_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %351 = add nsw i32 %347, %350*/
	main_preheaderi_351_reg_r0 = main_legup_memset_4_i64exit_43_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %351 = add nsw i32 %347, %350*/
	main_preheaderi_351_reg_r1 = main_legup_memset_4_i64exit_43_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %351 = add nsw i32 %347, %350*/
	main_preheaderi_351_reg_r2 = main_legup_memset_4_i64exit_43_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_352_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_352_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_352_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_353_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_353_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_353_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %354 = mul nsw i32 %353, %352*/
		main_preheaderi_354_r0 = (main_preheaderi_353_r0 * main_preheaderi_352_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %354 = mul nsw i32 %353, %352*/
		main_preheaderi_354_r1 = (main_preheaderi_353_r1 * main_preheaderi_352_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %354 = mul nsw i32 %353, %352*/
		main_preheaderi_354_r2 = (main_preheaderi_353_r2 * main_preheaderi_352_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_354_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %354 = mul nsw i32 %353, %352*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_354_reg_r0 <= main_preheaderi_354_r0;
		if (start == 1'b0 && ^(main_preheaderi_354_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_354_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_354_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %354 = mul nsw i32 %353, %352*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_354_reg_r1 <= main_preheaderi_354_r1;
		if (start == 1'b0 && ^(main_preheaderi_354_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_354_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_354_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %354 = mul nsw i32 %353, %352*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_354_reg_r2 <= main_preheaderi_354_r2;
		if (start == 1'b0 && ^(main_preheaderi_354_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_354_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %355 = add nsw i32 %351, %354*/
		main_preheaderi_355_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %355 = add nsw i32 %351, %354*/
		main_preheaderi_355_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %355 = add nsw i32 %351, %354*/
		main_preheaderi_355_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %356 = ashr i32 %355, 14*/
		main_preheaderi_356_r0 = ($signed(main_preheaderi_355_r0) >>> 32'd14);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %356 = ashr i32 %355, 14*/
		main_preheaderi_356_r1 = ($signed(main_preheaderi_355_r1) >>> 32'd14);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %356 = ashr i32 %355, 14*/
		main_preheaderi_356_r2 = ($signed(main_preheaderi_355_r2) >>> 32'd14);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_356_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %356 = ashr i32 %355, 14*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_356_reg_r0 <= main_preheaderi_356_r0;
		if (start == 1'b0 && ^(main_preheaderi_356_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_356_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_356_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %356 = ashr i32 %355, 14*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_356_reg_r1 <= main_preheaderi_356_r1;
		if (start == 1'b0 && ^(main_preheaderi_356_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_356_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_356_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %356 = ashr i32 %355, 14*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_356_reg_r2 <= main_preheaderi_356_r2;
		if (start == 1'b0 && ^(main_preheaderi_356_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_356_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %357 = mul i32 %dec_ah1.0, %dec_rh1.0*/
		main_preheaderi_357_r0 = (main_preheaderi_dec_ah10_reg_r0 * main_preheaderi_dec_rh10_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %357 = mul i32 %dec_ah1.0, %dec_rh1.0*/
		main_preheaderi_357_r1 = (main_preheaderi_dec_ah10_reg_r1 * main_preheaderi_dec_rh10_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %357 = mul i32 %dec_ah1.0, %dec_rh1.0*/
		main_preheaderi_357_r2 = (main_preheaderi_dec_ah10_reg_r2 * main_preheaderi_dec_rh10_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_357_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %357 = mul i32 %dec_ah1.0, %dec_rh1.0*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_357_reg_r0 <= main_preheaderi_357_r0;
		if (start == 1'b0 && ^(main_preheaderi_357_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_357_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_357_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %357 = mul i32 %dec_ah1.0, %dec_rh1.0*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_357_reg_r1 <= main_preheaderi_357_r1;
		if (start == 1'b0 && ^(main_preheaderi_357_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_357_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_357_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %357 = mul i32 %dec_ah1.0, %dec_rh1.0*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_357_reg_r2 <= main_preheaderi_357_r2;
		if (start == 1'b0 && ^(main_preheaderi_357_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_357_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %358 = mul i32 %dec_ah2.0, %dec_rh2.0*/
		main_preheaderi_358_r0 = (main_preheaderi_dec_ah20_reg_r0 * main_preheaderi_dec_rh20_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %358 = mul i32 %dec_ah2.0, %dec_rh2.0*/
		main_preheaderi_358_r1 = (main_preheaderi_dec_ah20_reg_r1 * main_preheaderi_dec_rh20_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %358 = mul i32 %dec_ah2.0, %dec_rh2.0*/
		main_preheaderi_358_r2 = (main_preheaderi_dec_ah20_reg_r2 * main_preheaderi_dec_rh20_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_358_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %358 = mul i32 %dec_ah2.0, %dec_rh2.0*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_358_reg_r0 <= main_preheaderi_358_r0;
		if (start == 1'b0 && ^(main_preheaderi_358_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_358_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_358_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %358 = mul i32 %dec_ah2.0, %dec_rh2.0*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_358_reg_r1 <= main_preheaderi_358_r1;
		if (start == 1'b0 && ^(main_preheaderi_358_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_358_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_358_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %358 = mul i32 %dec_ah2.0, %dec_rh2.0*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_358_reg_r2 <= main_preheaderi_358_r2;
		if (start == 1'b0 && ^(main_preheaderi_358_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_358_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %tmp.i3.i = add i32 %358, %357*/
		main_preheaderi_tmpi3i_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %tmp.i3.i = add i32 %358, %357*/
		main_preheaderi_tmpi3i_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %tmp.i3.i = add i32 %358, %357*/
		main_preheaderi_tmpi3i_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %tmp1.i4.i = shl i32 %tmp.i3.i, 1*/
		main_preheaderi_tmp1i4i_r0 = (main_preheaderi_tmpi3i_r0 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %tmp1.i4.i = shl i32 %tmp.i3.i, 1*/
		main_preheaderi_tmp1i4i_r1 = (main_preheaderi_tmpi3i_r1 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %tmp1.i4.i = shl i32 %tmp.i3.i, 1*/
		main_preheaderi_tmp1i4i_r2 = (main_preheaderi_tmpi3i_r2 <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %359 = ashr i32 %tmp1.i4.i, 15*/
		main_preheaderi_359_r0 = ($signed(main_preheaderi_tmp1i4i_r0) >>> 32'd15);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %359 = ashr i32 %tmp1.i4.i, 15*/
		main_preheaderi_359_r1 = ($signed(main_preheaderi_tmp1i4i_r1) >>> 32'd15);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %359 = ashr i32 %tmp1.i4.i, 15*/
		main_preheaderi_359_r2 = ($signed(main_preheaderi_tmp1i4i_r2) >>> 32'd15);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %360 = add nsw i32 %359, %356*/
		main_preheaderi_360_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %360 = add nsw i32 %359, %356*/
		main_preheaderi_360_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %360 = add nsw i32 %359, %356*/
		main_preheaderi_360_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %360 = add nsw i32 %359, %356*/
	main_preheaderi_360_reg_r0 = main_quantlexiti_137_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %360 = add nsw i32 %359, %356*/
	main_preheaderi_360_reg_r1 = main_quantlexiti_137_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %360 = add nsw i32 %359, %356*/
	main_preheaderi_360_reg_r2 = main_quantlexiti_137_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %361 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %255*/
		main_preheaderi_361_r0 = (`TAG_g_qq2_code2_table_a + (4 * main_preheaderi_255_r0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %361 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %255*/
		main_preheaderi_361_r1 = (`TAG_g_qq2_code2_table_a + (4 * main_preheaderi_255_r1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %361 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %255*/
		main_preheaderi_361_r2 = (`TAG_g_qq2_code2_table_a + (4 * main_preheaderi_255_r2));
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_361_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %361 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %255*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_361_reg_r0 <= main_preheaderi_361_r0;
		if (start == 1'b0 && ^(main_preheaderi_361_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_361_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_361_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %361 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %255*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_361_reg_r1 <= main_preheaderi_361_r1;
		if (start == 1'b0 && ^(main_preheaderi_361_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_361_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_361_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %361 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %255*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_361_reg_r2 <= main_preheaderi_361_r2;
		if (start == 1'b0 && ^(main_preheaderi_361_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_361_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %362 = load i32* %361, align 4, !tbaa !1*/
		main_preheaderi_362_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %362 = load i32* %361, align 4, !tbaa !1*/
		main_preheaderi_362_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %362 = load i32* %361, align 4, !tbaa !1*/
		main_preheaderi_362_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %363 = mul nsw i32 %362, %dec_deth.0*/
		main_preheaderi_363_r0 = (main_preheaderi_362_r0 * main_preheaderi_dec_deth0_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %363 = mul nsw i32 %362, %dec_deth.0*/
		main_preheaderi_363_r1 = (main_preheaderi_362_r1 * main_preheaderi_dec_deth0_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %363 = mul nsw i32 %362, %dec_deth.0*/
		main_preheaderi_363_r2 = (main_preheaderi_362_r2 * main_preheaderi_dec_deth0_reg_r2);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %364 = ashr i32 %363, 15*/
		main_preheaderi_364_r0 = ($signed(main_preheaderi_363_r0) >>> 32'd15);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %364 = ashr i32 %363, 15*/
		main_preheaderi_364_r1 = ($signed(main_preheaderi_363_r1) >>> 32'd15);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %364 = ashr i32 %363, 15*/
		main_preheaderi_364_r2 = ($signed(main_preheaderi_363_r2) >>> 32'd15);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_364_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %364 = ashr i32 %363, 15*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_364_reg_r0 <= main_preheaderi_364_r0;
		if (start == 1'b0 && ^(main_preheaderi_364_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_364_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_364_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %364 = ashr i32 %363, 15*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_364_reg_r1 <= main_preheaderi_364_r1;
		if (start == 1'b0 && ^(main_preheaderi_364_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_364_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_364_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %364 = ashr i32 %363, 15*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_364_reg_r2 <= main_preheaderi_364_r2;
		if (start == 1'b0 && ^(main_preheaderi_364_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_364_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %365 = mul nsw i32 %dec_nbh.0, 127*/
		main_preheaderi_365_r0 = (main_preheaderi_dec_nbh0_reg_r0 * 32'd127);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %365 = mul nsw i32 %dec_nbh.0, 127*/
		main_preheaderi_365_r1 = (main_preheaderi_dec_nbh0_reg_r1 * 32'd127);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %365 = mul nsw i32 %dec_nbh.0, 127*/
		main_preheaderi_365_r2 = (main_preheaderi_dec_nbh0_reg_r2 * 32'd127);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %366 = ashr i32 %365, 7*/
		main_preheaderi_366_r0 = ($signed(main_preheaderi_365_r0) >>> 32'd7);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %366 = ashr i32 %365, 7*/
		main_preheaderi_366_r1 = ($signed(main_preheaderi_365_r1) >>> 32'd7);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %366 = ashr i32 %365, 7*/
		main_preheaderi_366_r2 = ($signed(main_preheaderi_365_r2) >>> 32'd7);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_366_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %366 = ashr i32 %365, 7*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_366_reg_r0 <= main_preheaderi_366_r0;
		if (start == 1'b0 && ^(main_preheaderi_366_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_366_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_366_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %366 = ashr i32 %365, 7*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_366_reg_r1 <= main_preheaderi_366_r1;
		if (start == 1'b0 && ^(main_preheaderi_366_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_366_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_366_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %366 = ashr i32 %365, 7*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_366_reg_r2 <= main_preheaderi_366_r2;
		if (start == 1'b0 && ^(main_preheaderi_366_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_366_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %367 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %255*/
		main_preheaderi_367_r0 = (`TAG_g_wh_code_table_a + (4 * main_preheaderi_255_r0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %367 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %255*/
		main_preheaderi_367_r1 = (`TAG_g_wh_code_table_a + (4 * main_preheaderi_255_r1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %367 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %255*/
		main_preheaderi_367_r2 = (`TAG_g_wh_code_table_a + (4 * main_preheaderi_255_r2));
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_367_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %367 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %255*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_367_reg_r0 <= main_preheaderi_367_r0;
		if (start == 1'b0 && ^(main_preheaderi_367_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_367_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_367_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %367 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %255*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_367_reg_r1 <= main_preheaderi_367_r1;
		if (start == 1'b0 && ^(main_preheaderi_367_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_367_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_367_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %367 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %255*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_367_reg_r2 <= main_preheaderi_367_r2;
		if (start == 1'b0 && ^(main_preheaderi_367_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_367_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
		main_preheaderi_368_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
		main_preheaderi_368_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
		main_preheaderi_368_r2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_368_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_368_reg_r0 <= main_preheaderi_368_r0;
		if (start == 1'b0 && ^(main_preheaderi_368_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_368_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_368_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_368_reg_r1 <= main_preheaderi_368_r1;
		if (start == 1'b0 && ^(main_preheaderi_368_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_368_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_368_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_368_reg_r2 <= main_preheaderi_368_r2;
		if (start == 1'b0 && ^(main_preheaderi_368_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_368_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %369 = add nsw i32 %366, %368*/
		main_preheaderi_369_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %369 = add nsw i32 %366, %368*/
		main_preheaderi_369_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %369 = add nsw i32 %366, %368*/
		main_preheaderi_369_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %370 = icmp slt i32 %369, 0*/
		main_preheaderi_370_r0 = ($signed(main_preheaderi_369_r0) < $signed(32'd0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %370 = icmp slt i32 %369, 0*/
		main_preheaderi_370_r1 = ($signed(main_preheaderi_369_r1) < $signed(32'd0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %370 = icmp slt i32 %369, 0*/
		main_preheaderi_370_r2 = ($signed(main_preheaderi_369_r2) < $signed(32'd0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i1.i = select i1 %370, i32 0, i32 %369*/
		main_preheaderi_i1i_r0 = (main_preheaderi_370_r0 ? 32'd0 : main_preheaderi_369_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i1.i = select i1 %370, i32 0, i32 %369*/
		main_preheaderi_i1i_r1 = (main_preheaderi_370_r1 ? 32'd0 : main_preheaderi_369_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i1.i = select i1 %370, i32 0, i32 %369*/
		main_preheaderi_i1i_r2 = (main_preheaderi_370_r2 ? 32'd0 : main_preheaderi_369_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i1i_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %..i1.i = select i1 %370, i32 0, i32 %369*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_preheaderi_i1i_reg_r0 <= main_preheaderi_i1i_r0;
		if (start == 1'b0 && ^(main_preheaderi_i1i_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i1i_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i1i_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %..i1.i = select i1 %370, i32 0, i32 %369*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_preheaderi_i1i_reg_r1 <= main_preheaderi_i1i_r1;
		if (start == 1'b0 && ^(main_preheaderi_i1i_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i1i_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i1i_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %..i1.i = select i1 %370, i32 0, i32 %369*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_preheaderi_i1i_reg_r2 <= main_preheaderi_i1i_r2;
		if (start == 1'b0 && ^(main_preheaderi_i1i_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i1i_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %371 = icmp sgt i32 %..i1.i, 22528*/
		main_preheaderi_371_r0 = ($signed(main_preheaderi_i1i_reg_r0) > $signed(32'd22528));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %371 = icmp sgt i32 %..i1.i, 22528*/
		main_preheaderi_371_r1 = ($signed(main_preheaderi_i1i_reg_r1) > $signed(32'd22528));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %371 = icmp sgt i32 %..i1.i, 22528*/
		main_preheaderi_371_r2 = ($signed(main_preheaderi_i1i_reg_r2) > $signed(32'd22528));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i2.i = select i1 %371, i32 22528, i32 %..i1.i*/
		main_preheaderi_i2i_r0 = (main_preheaderi_371_r0 ? 32'd22528 : main_preheaderi_i1i_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i2.i = select i1 %371, i32 22528, i32 %..i1.i*/
		main_preheaderi_i2i_r1 = (main_preheaderi_371_r1 ? 32'd22528 : main_preheaderi_i1i_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i2.i = select i1 %371, i32 22528, i32 %..i1.i*/
		main_preheaderi_i2i_r2 = (main_preheaderi_371_r2 ? 32'd22528 : main_preheaderi_i1i_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i2i_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %...i2.i = select i1 %371, i32 22528, i32 %..i1.i*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_i2i_reg_r0 <= main_preheaderi_i2i_r0;
		if (start == 1'b0 && ^(main_preheaderi_i2i_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i2i_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i2i_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %...i2.i = select i1 %371, i32 22528, i32 %..i1.i*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_i2i_reg_r1 <= main_preheaderi_i2i_r1;
		if (start == 1'b0 && ^(main_preheaderi_i2i_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i2i_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_i2i_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %...i2.i = select i1 %371, i32 22528, i32 %..i1.i*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_i2i_reg_r2 <= main_preheaderi_i2i_r2;
		if (start == 1'b0 && ^(main_preheaderi_i2i_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i2i_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %372 = lshr i32 %...i2.i, 6*/
		main_preheaderi_372_r0 = (main_preheaderi_i2i_r0 >>> (32'd6 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %372 = lshr i32 %...i2.i, 6*/
		main_preheaderi_372_r1 = (main_preheaderi_i2i_r1 >>> (32'd6 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %372 = lshr i32 %...i2.i, 6*/
		main_preheaderi_372_r2 = (main_preheaderi_i2i_r2 >>> (32'd6 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %373 = and i32 %372, 31*/
		main_preheaderi_373_r0 = (main_preheaderi_372_r0 & 32'd31);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %373 = and i32 %372, 31*/
		main_preheaderi_373_r1 = (main_preheaderi_372_r1 & 32'd31);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %373 = and i32 %372, 31*/
		main_preheaderi_373_r2 = (main_preheaderi_372_r2 & 32'd31);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_373_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %373 = and i32 %372, 31*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_373_reg_r0 <= main_preheaderi_373_r0;
		if (start == 1'b0 && ^(main_preheaderi_373_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_373_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_373_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %373 = and i32 %372, 31*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_373_reg_r1 <= main_preheaderi_373_r1;
		if (start == 1'b0 && ^(main_preheaderi_373_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_373_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_373_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %373 = and i32 %372, 31*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_373_reg_r2 <= main_preheaderi_373_r2;
		if (start == 1'b0 && ^(main_preheaderi_373_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_373_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %374 = ashr i32 %...i2.i, 11*/
		main_preheaderi_374_r0 = ($signed(main_preheaderi_i2i_r0) >>> 32'd11);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %374 = ashr i32 %...i2.i, 11*/
		main_preheaderi_374_r1 = ($signed(main_preheaderi_i2i_r1) >>> 32'd11);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %374 = ashr i32 %...i2.i, 11*/
		main_preheaderi_374_r2 = ($signed(main_preheaderi_i2i_r2) >>> 32'd11);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %375 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %373*/
		main_preheaderi_375_r0 = (`TAG_g_ilb_table_a + (4 * main_preheaderi_373_reg_r0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %375 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %373*/
		main_preheaderi_375_r1 = (`TAG_g_ilb_table_a + (4 * main_preheaderi_373_reg_r1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %375 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %373*/
		main_preheaderi_375_r2 = (`TAG_g_ilb_table_a + (4 * main_preheaderi_373_reg_r2));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %376 = load i32* %375, align 4, !tbaa !1*/
		main_preheaderi_376_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %376 = load i32* %375, align 4, !tbaa !1*/
		main_preheaderi_376_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %376 = load i32* %375, align 4, !tbaa !1*/
		main_preheaderi_376_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %377 = sub i32 11, %374*/
		main_preheaderi_377_r0 = (32'd11 - main_preheaderi_374_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %377 = sub i32 11, %374*/
		main_preheaderi_377_r1 = (32'd11 - main_preheaderi_374_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %377 = sub i32 11, %374*/
		main_preheaderi_377_r2 = (32'd11 - main_preheaderi_374_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_377_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %377 = sub i32 11, %374*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_377_reg_r0 <= main_preheaderi_377_r0;
		if (start == 1'b0 && ^(main_preheaderi_377_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_377_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_377_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %377 = sub i32 11, %374*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_377_reg_r1 <= main_preheaderi_377_r1;
		if (start == 1'b0 && ^(main_preheaderi_377_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_377_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_377_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %377 = sub i32 11, %374*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_377_reg_r2 <= main_preheaderi_377_r2;
		if (start == 1'b0 && ^(main_preheaderi_377_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_377_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %378 = ashr i32 %376, %377*/
		main_preheaderi_378_r0 = ($signed(main_preheaderi_376_r0) >>> main_preheaderi_377_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %378 = ashr i32 %376, %377*/
		main_preheaderi_378_r1 = ($signed(main_preheaderi_376_r1) >>> main_preheaderi_377_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %378 = ashr i32 %376, %377*/
		main_preheaderi_378_r2 = ($signed(main_preheaderi_376_r2) >>> main_preheaderi_377_reg_r2);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %379 = shl i32 %378, 3*/
		main_preheaderi_379_r0 = (main_preheaderi_378_r0 <<< (32'd3 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %379 = shl i32 %378, 3*/
		main_preheaderi_379_r1 = (main_preheaderi_378_r1 <<< (32'd3 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %379 = shl i32 %378, 3*/
		main_preheaderi_379_r2 = (main_preheaderi_378_r2 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_379_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %379 = shl i32 %378, 3*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_preheaderi_379_reg_r0 <= main_preheaderi_379_r0;
		if (start == 1'b0 && ^(main_preheaderi_379_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_379_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_379_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %379 = shl i32 %378, 3*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_preheaderi_379_reg_r1 <= main_preheaderi_379_r1;
		if (start == 1'b0 && ^(main_preheaderi_379_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_379_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_379_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %379 = shl i32 %378, 3*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_preheaderi_379_reg_r2 <= main_preheaderi_379_r2;
		if (start == 1'b0 && ^(main_preheaderi_379_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_379_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %380 = add nsw i32 %356, %364*/
		main_preheaderi_380_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %380 = add nsw i32 %356, %364*/
		main_preheaderi_380_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %380 = add nsw i32 %356, %364*/
		main_preheaderi_380_r2 = main_signed_add_32_1_r2;
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_380_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %380 = add nsw i32 %356, %364*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_380_reg_r0 <= main_preheaderi_380_r0;
		if (start == 1'b0 && ^(main_preheaderi_380_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_380_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_380_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %380 = add nsw i32 %356, %364*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_380_reg_r1 <= main_preheaderi_380_r1;
		if (start == 1'b0 && ^(main_preheaderi_380_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_380_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_380_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %380 = add nsw i32 %356, %364*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_380_reg_r2 <= main_preheaderi_380_r2;
		if (start == 1'b0 && ^(main_preheaderi_380_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_380_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %381 = shl nsw i32 %dec_ah1.0, 2*/
		main_preheaderi_381_r0 = (main_preheaderi_dec_ah10_reg_r0 <<< (32'd2 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %381 = shl nsw i32 %dec_ah1.0, 2*/
		main_preheaderi_381_r1 = (main_preheaderi_dec_ah10_reg_r1 <<< (32'd2 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %381 = shl nsw i32 %dec_ah1.0, 2*/
		main_preheaderi_381_r2 = (main_preheaderi_dec_ah10_reg_r2 <<< (32'd2 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_381_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %381 = shl nsw i32 %dec_ah1.0, 2*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_381_reg_r0 <= main_preheaderi_381_r0;
		if (start == 1'b0 && ^(main_preheaderi_381_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_381_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_381_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %381 = shl nsw i32 %dec_ah1.0, 2*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_381_reg_r1 <= main_preheaderi_381_r1;
		if (start == 1'b0 && ^(main_preheaderi_381_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_381_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_381_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %381 = shl nsw i32 %dec_ah1.0, 2*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_381_reg_r2 <= main_preheaderi_381_r2;
		if (start == 1'b0 && ^(main_preheaderi_381_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_381_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %382 = mul nsw i32 %dec_ph1.0, %380*/
		main_preheaderi_382_r0 = (main_preheaderi_dec_ph10_reg_r0 * main_preheaderi_380_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %382 = mul nsw i32 %dec_ph1.0, %380*/
		main_preheaderi_382_r1 = (main_preheaderi_dec_ph10_reg_r1 * main_preheaderi_380_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %382 = mul nsw i32 %dec_ph1.0, %380*/
		main_preheaderi_382_r2 = (main_preheaderi_dec_ph10_reg_r2 * main_preheaderi_380_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_382_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %382 = mul nsw i32 %dec_ph1.0, %380*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_382_reg_r0 <= main_preheaderi_382_r0;
		if (start == 1'b0 && ^(main_preheaderi_382_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_382_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_382_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %382 = mul nsw i32 %dec_ph1.0, %380*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_382_reg_r1 <= main_preheaderi_382_r1;
		if (start == 1'b0 && ^(main_preheaderi_382_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_382_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_382_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %382 = mul nsw i32 %dec_ph1.0, %380*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_382_reg_r2 <= main_preheaderi_382_r2;
		if (start == 1'b0 && ^(main_preheaderi_382_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_382_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %383 = icmp sgt i32 %382, -1*/
		main_preheaderi_383_r0 = ($signed(main_preheaderi_382_reg_r0) > $signed(-32'd1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %383 = icmp sgt i32 %382, -1*/
		main_preheaderi_383_r1 = ($signed(main_preheaderi_382_reg_r1) > $signed(-32'd1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %383 = icmp sgt i32 %382, -1*/
		main_preheaderi_383_r2 = ($signed(main_preheaderi_382_reg_r2) > $signed(-32'd1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %384 = sub nsw i32 0, %381*/
		main_preheaderi_384_r0 = (32'd0 - main_preheaderi_381_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %384 = sub nsw i32 0, %381*/
		main_preheaderi_384_r1 = (32'd0 - main_preheaderi_381_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %384 = sub nsw i32 0, %381*/
		main_preheaderi_384_r2 = (32'd0 - main_preheaderi_381_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_384_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %384 = sub nsw i32 0, %381*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_384_reg_r0 <= main_preheaderi_384_r0;
		if (start == 1'b0 && ^(main_preheaderi_384_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_384_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_384_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %384 = sub nsw i32 0, %381*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_384_reg_r1 <= main_preheaderi_384_r1;
		if (start == 1'b0 && ^(main_preheaderi_384_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_384_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_384_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %384 = sub nsw i32 0, %381*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_384_reg_r2 <= main_preheaderi_384_r2;
		if (start == 1'b0 && ^(main_preheaderi_384_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_384_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.1.i.i = select i1 %383, i32 %384, i32 %381*/
		main_preheaderi_1ii_r0 = (main_preheaderi_383_r0 ? main_preheaderi_384_reg_r0 : main_preheaderi_381_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.1.i.i = select i1 %383, i32 %384, i32 %381*/
		main_preheaderi_1ii_r1 = (main_preheaderi_383_r1 ? main_preheaderi_384_reg_r1 : main_preheaderi_381_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.1.i.i = select i1 %383, i32 %384, i32 %381*/
		main_preheaderi_1ii_r2 = (main_preheaderi_383_r2 ? main_preheaderi_384_reg_r2 : main_preheaderi_381_reg_r2);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %385 = ashr i32 %.1.i.i, 7*/
		main_preheaderi_385_r0 = ($signed(main_preheaderi_1ii_r0) >>> 32'd7);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %385 = ashr i32 %.1.i.i, 7*/
		main_preheaderi_385_r1 = ($signed(main_preheaderi_1ii_r1) >>> 32'd7);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %385 = ashr i32 %.1.i.i, 7*/
		main_preheaderi_385_r2 = ($signed(main_preheaderi_1ii_r2) >>> 32'd7);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_385_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %385 = ashr i32 %.1.i.i, 7*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_preheaderi_385_reg_r0 <= main_preheaderi_385_r0;
		if (start == 1'b0 && ^(main_preheaderi_385_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_385_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_385_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %385 = ashr i32 %.1.i.i, 7*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_preheaderi_385_reg_r1 <= main_preheaderi_385_r1;
		if (start == 1'b0 && ^(main_preheaderi_385_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_385_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_385_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %385 = ashr i32 %.1.i.i, 7*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_preheaderi_385_reg_r2 <= main_preheaderi_385_r2;
		if (start == 1'b0 && ^(main_preheaderi_385_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_385_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %386 = mul nsw i32 %dec_ph2.0, %380*/
		main_preheaderi_386_r0 = (main_preheaderi_dec_ph20_reg_r0 * main_preheaderi_380_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %386 = mul nsw i32 %dec_ph2.0, %380*/
		main_preheaderi_386_r1 = (main_preheaderi_dec_ph20_reg_r1 * main_preheaderi_380_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %386 = mul nsw i32 %dec_ph2.0, %380*/
		main_preheaderi_386_r2 = (main_preheaderi_dec_ph20_reg_r2 * main_preheaderi_380_r2);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %387 = ashr i32 %386, 31*/
		main_preheaderi_387_r0 = ($signed(main_preheaderi_386_r0) >>> 32'd31);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %387 = ashr i32 %386, 31*/
		main_preheaderi_387_r1 = ($signed(main_preheaderi_386_r1) >>> 32'd31);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %387 = ashr i32 %386, 31*/
		main_preheaderi_387_r2 = ($signed(main_preheaderi_386_r2) >>> 32'd31);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %388 = and i32 %387, -256*/
		main_preheaderi_388_r0 = (main_preheaderi_387_r0 & -32'd256);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %388 = and i32 %387, -256*/
		main_preheaderi_388_r1 = (main_preheaderi_387_r1 & -32'd256);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %388 = and i32 %387, -256*/
		main_preheaderi_388_r2 = (main_preheaderi_387_r2 & -32'd256);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %389 = or i32 %388, 128*/
		main_preheaderi_389_r0 = (main_preheaderi_388_r0 | 32'd128);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %389 = or i32 %388, 128*/
		main_preheaderi_389_r1 = (main_preheaderi_388_r1 | 32'd128);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %389 = or i32 %388, 128*/
		main_preheaderi_389_r2 = (main_preheaderi_388_r2 | 32'd128);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_389_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %389 = or i32 %388, 128*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_389_reg_r0 <= main_preheaderi_389_r0;
		if (start == 1'b0 && ^(main_preheaderi_389_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_389_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_389_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %389 = or i32 %388, 128*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_389_reg_r1 <= main_preheaderi_389_r1;
		if (start == 1'b0 && ^(main_preheaderi_389_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_389_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_389_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %389 = or i32 %388, 128*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_389_reg_r2 <= main_preheaderi_389_r2;
		if (start == 1'b0 && ^(main_preheaderi_389_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_389_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %390 = mul nsw i32 %dec_ah2.0, 127*/
		main_preheaderi_390_r0 = (main_preheaderi_dec_ah20_reg_r0 * 32'd127);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %390 = mul nsw i32 %dec_ah2.0, 127*/
		main_preheaderi_390_r1 = (main_preheaderi_dec_ah20_reg_r1 * 32'd127);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %390 = mul nsw i32 %dec_ah2.0, 127*/
		main_preheaderi_390_r2 = (main_preheaderi_dec_ah20_reg_r2 * 32'd127);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %391 = ashr i32 %390, 7*/
		main_preheaderi_391_r0 = ($signed(main_preheaderi_390_r0) >>> 32'd7);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %391 = ashr i32 %390, 7*/
		main_preheaderi_391_r1 = ($signed(main_preheaderi_390_r1) >>> 32'd7);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %391 = ashr i32 %390, 7*/
		main_preheaderi_391_r2 = ($signed(main_preheaderi_390_r2) >>> 32'd7);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_391_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %391 = ashr i32 %390, 7*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_391_reg_r0 <= main_preheaderi_391_r0;
		if (start == 1'b0 && ^(main_preheaderi_391_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_391_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_391_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %391 = ashr i32 %390, 7*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_391_reg_r1 <= main_preheaderi_391_r1;
		if (start == 1'b0 && ^(main_preheaderi_391_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_391_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_391_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %391 = ashr i32 %390, 7*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_391_reg_r2 <= main_preheaderi_391_r2;
		if (start == 1'b0 && ^(main_preheaderi_391_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_391_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %385, %391*/
		main_preheaderi_wd40ii_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %385, %391*/
		main_preheaderi_wd40ii_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %385, %391*/
		main_preheaderi_wd40ii_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %wd4.0.i.i = add nsw i32 %385, %391*/
	main_preheaderi_wd40ii_reg_r0 = main_quantlexiti_137_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %wd4.0.i.i = add nsw i32 %385, %391*/
	main_preheaderi_wd40ii_reg_r1 = main_quantlexiti_137_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %wd4.0.i.i = add nsw i32 %385, %391*/
	main_preheaderi_wd40ii_reg_r2 = main_quantlexiti_137_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %392 = add nsw i32 %wd4.0.i.i, %389*/
		main_preheaderi_392_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %392 = add nsw i32 %wd4.0.i.i, %389*/
		main_preheaderi_392_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %392 = add nsw i32 %wd4.0.i.i, %389*/
		main_preheaderi_392_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %393 = icmp sgt i32 %392, 12288*/
		main_preheaderi_393_r0 = ($signed(main_preheaderi_392_r0) > $signed(32'd12288));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %393 = icmp sgt i32 %392, 12288*/
		main_preheaderi_393_r1 = ($signed(main_preheaderi_392_r1) > $signed(32'd12288));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %393 = icmp sgt i32 %392, 12288*/
		main_preheaderi_393_r2 = ($signed(main_preheaderi_392_r2) > $signed(32'd12288));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i.i = select i1 %393, i32 12288, i32 %392*/
		main_preheaderi_ii_r0 = (main_preheaderi_393_r0 ? 32'd12288 : main_preheaderi_392_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i.i = select i1 %393, i32 12288, i32 %392*/
		main_preheaderi_ii_r1 = (main_preheaderi_393_r1 ? 32'd12288 : main_preheaderi_392_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i.i = select i1 %393, i32 12288, i32 %392*/
		main_preheaderi_ii_r2 = (main_preheaderi_393_r2 ? 32'd12288 : main_preheaderi_392_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_ii_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %..i.i = select i1 %393, i32 12288, i32 %392*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_preheaderi_ii_reg_r0 <= main_preheaderi_ii_r0;
		if (start == 1'b0 && ^(main_preheaderi_ii_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_ii_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_ii_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %..i.i = select i1 %393, i32 12288, i32 %392*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_preheaderi_ii_reg_r1 <= main_preheaderi_ii_r1;
		if (start == 1'b0 && ^(main_preheaderi_ii_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_ii_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_ii_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %..i.i = select i1 %393, i32 12288, i32 %392*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_preheaderi_ii_reg_r2 <= main_preheaderi_ii_r2;
		if (start == 1'b0 && ^(main_preheaderi_ii_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_ii_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %394 = icmp slt i32 %..i.i, -12288*/
		main_preheaderi_394_r0 = ($signed(main_preheaderi_ii_reg_r0) < $signed(-32'd12288));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %394 = icmp slt i32 %..i.i, -12288*/
		main_preheaderi_394_r1 = ($signed(main_preheaderi_ii_reg_r1) < $signed(-32'd12288));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %394 = icmp slt i32 %..i.i, -12288*/
		main_preheaderi_394_r2 = ($signed(main_preheaderi_ii_reg_r2) < $signed(-32'd12288));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i.i = select i1 %394, i32 -12288, i32 %..i.i*/
		main_preheaderi_ii_var1_r0 = (main_preheaderi_394_r0 ? -32'd12288 : main_preheaderi_ii_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i.i = select i1 %394, i32 -12288, i32 %..i.i*/
		main_preheaderi_ii_var1_r1 = (main_preheaderi_394_r1 ? -32'd12288 : main_preheaderi_ii_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i.i = select i1 %394, i32 -12288, i32 %..i.i*/
		main_preheaderi_ii_var1_r2 = (main_preheaderi_394_r2 ? -32'd12288 : main_preheaderi_ii_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_ii_var1_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %...i.i = select i1 %394, i32 -12288, i32 %..i.i*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_preheaderi_ii_var1_reg_r0 <= main_preheaderi_ii_var1_r0;
		if (start == 1'b0 && ^(main_preheaderi_ii_var1_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_ii_var1_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_ii_var1_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %...i.i = select i1 %394, i32 -12288, i32 %..i.i*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_preheaderi_ii_var1_reg_r1 <= main_preheaderi_ii_var1_r1;
		if (start == 1'b0 && ^(main_preheaderi_ii_var1_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_ii_var1_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_ii_var1_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %...i.i = select i1 %394, i32 -12288, i32 %..i.i*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_preheaderi_ii_var1_reg_r2 <= main_preheaderi_ii_var1_r2;
		if (start == 1'b0 && ^(main_preheaderi_ii_var1_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_ii_var1_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %395 = mul nsw i32 %dec_ah1.0, 255*/
		main_preheaderi_395_r0 = (main_preheaderi_dec_ah10_reg_r0 * 32'd255);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %395 = mul nsw i32 %dec_ah1.0, 255*/
		main_preheaderi_395_r1 = (main_preheaderi_dec_ah10_reg_r1 * 32'd255);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %395 = mul nsw i32 %dec_ah1.0, 255*/
		main_preheaderi_395_r2 = (main_preheaderi_dec_ah10_reg_r2 * 32'd255);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %396 = ashr i32 %395, 8*/
		main_preheaderi_396_r0 = ($signed(main_preheaderi_395_r0) >>> 32'd8);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %396 = ashr i32 %395, 8*/
		main_preheaderi_396_r1 = ($signed(main_preheaderi_395_r1) >>> 32'd8);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %396 = ashr i32 %395, 8*/
		main_preheaderi_396_r2 = ($signed(main_preheaderi_395_r2) >>> 32'd8);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_396_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %396 = ashr i32 %395, 8*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_396_reg_r0 <= main_preheaderi_396_r0;
		if (start == 1'b0 && ^(main_preheaderi_396_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_396_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_396_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %396 = ashr i32 %395, 8*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_396_reg_r1 <= main_preheaderi_396_r1;
		if (start == 1'b0 && ^(main_preheaderi_396_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_396_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_396_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %396 = ashr i32 %395, 8*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_396_reg_r2 <= main_preheaderi_396_r2;
		if (start == 1'b0 && ^(main_preheaderi_396_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_396_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %397 = ashr i32 %382, 31*/
		main_preheaderi_397_r0 = ($signed(main_preheaderi_382_r0) >>> 32'd31);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %397 = ashr i32 %382, 31*/
		main_preheaderi_397_r1 = ($signed(main_preheaderi_382_r1) >>> 32'd31);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %397 = ashr i32 %382, 31*/
		main_preheaderi_397_r2 = ($signed(main_preheaderi_382_r2) >>> 32'd31);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %398 = and i32 %397, -384*/
		main_preheaderi_398_r0 = (main_preheaderi_397_r0 & -32'd384);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %398 = and i32 %397, -384*/
		main_preheaderi_398_r1 = (main_preheaderi_397_r1 & -32'd384);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %398 = and i32 %397, -384*/
		main_preheaderi_398_r2 = (main_preheaderi_397_r2 & -32'd384);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_398_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %398 = and i32 %397, -384*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_398_reg_r0 <= main_preheaderi_398_r0;
		if (start == 1'b0 && ^(main_preheaderi_398_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_398_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_398_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %398 = and i32 %397, -384*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_398_reg_r1 <= main_preheaderi_398_r1;
		if (start == 1'b0 && ^(main_preheaderi_398_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_398_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_398_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %398 = and i32 %397, -384*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_398_reg_r2 <= main_preheaderi_398_r2;
		if (start == 1'b0 && ^(main_preheaderi_398_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_398_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %399 = add nsw i32 %396, 192*/
		main_preheaderi_399_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %399 = add nsw i32 %396, 192*/
		main_preheaderi_399_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %399 = add nsw i32 %396, 192*/
		main_preheaderi_399_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %399 = add nsw i32 %396, 192*/
	main_preheaderi_399_reg_r0 = main_legup_memset_4_i64exit_109_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %399 = add nsw i32 %396, 192*/
	main_preheaderi_399_reg_r1 = main_legup_memset_4_i64exit_109_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %399 = add nsw i32 %396, 192*/
	main_preheaderi_399_reg_r2 = main_legup_memset_4_i64exit_109_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %399, %398*/
		main_preheaderi_apl10ii_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %399, %398*/
		main_preheaderi_apl10ii_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %399, %398*/
		main_preheaderi_apl10ii_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %400 = sub nsw i32 15360, %...i.i*/
		main_preheaderi_400_r0 = (32'd15360 - main_preheaderi_ii_var1_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %400 = sub nsw i32 15360, %...i.i*/
		main_preheaderi_400_r1 = (32'd15360 - main_preheaderi_ii_var1_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %400 = sub nsw i32 15360, %...i.i*/
		main_preheaderi_400_r2 = (32'd15360 - main_preheaderi_ii_var1_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_400_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %400 = sub nsw i32 15360, %...i.i*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_preheaderi_400_reg_r0 <= main_preheaderi_400_r0;
		if (start == 1'b0 && ^(main_preheaderi_400_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_400_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_400_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %400 = sub nsw i32 15360, %...i.i*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_preheaderi_400_reg_r1 <= main_preheaderi_400_r1;
		if (start == 1'b0 && ^(main_preheaderi_400_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_400_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_400_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %400 = sub nsw i32 15360, %...i.i*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_preheaderi_400_reg_r2 <= main_preheaderi_400_r2;
		if (start == 1'b0 && ^(main_preheaderi_400_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_400_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %401 = icmp sgt i32 %apl1.0.i.i, %400*/
		main_preheaderi_401_r0 = ($signed(main_preheaderi_apl10ii_r0) > $signed(main_preheaderi_400_reg_r0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %401 = icmp sgt i32 %apl1.0.i.i, %400*/
		main_preheaderi_401_r1 = ($signed(main_preheaderi_apl10ii_r1) > $signed(main_preheaderi_400_reg_r1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %401 = icmp sgt i32 %apl1.0.i.i, %400*/
		main_preheaderi_401_r2 = ($signed(main_preheaderi_apl10ii_r2) > $signed(main_preheaderi_400_reg_r2));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i.i = select i1 %401, i32 %400, i32 %apl1.0.i.i*/
		main_preheaderi_apl10ii_var2_r0 = (main_preheaderi_401_r0 ? main_preheaderi_400_reg_r0 : main_preheaderi_apl10ii_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i.i = select i1 %401, i32 %400, i32 %apl1.0.i.i*/
		main_preheaderi_apl10ii_var2_r1 = (main_preheaderi_401_r1 ? main_preheaderi_400_reg_r1 : main_preheaderi_apl10ii_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i.i = select i1 %401, i32 %400, i32 %apl1.0.i.i*/
		main_preheaderi_apl10ii_var2_r2 = (main_preheaderi_401_r2 ? main_preheaderi_400_reg_r2 : main_preheaderi_apl10ii_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_apl10ii_var2_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %.apl1.0.i.i = select i1 %401, i32 %400, i32 %apl1.0.i.i*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_preheaderi_apl10ii_var2_reg_r0 <= main_preheaderi_apl10ii_var2_r0;
		if (start == 1'b0 && ^(main_preheaderi_apl10ii_var2_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl10ii_var2_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_apl10ii_var2_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %.apl1.0.i.i = select i1 %401, i32 %400, i32 %apl1.0.i.i*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_preheaderi_apl10ii_var2_reg_r1 <= main_preheaderi_apl10ii_var2_r1;
		if (start == 1'b0 && ^(main_preheaderi_apl10ii_var2_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl10ii_var2_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_apl10ii_var2_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %.apl1.0.i.i = select i1 %401, i32 %400, i32 %apl1.0.i.i*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_preheaderi_apl10ii_var2_reg_r2 <= main_preheaderi_apl10ii_var2_r2;
		if (start == 1'b0 && ^(main_preheaderi_apl10ii_var2_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl10ii_var2_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %402 = sub nsw i32 0, %400*/
		main_preheaderi_402_r0 = (32'd0 - main_preheaderi_400_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %402 = sub nsw i32 0, %400*/
		main_preheaderi_402_r1 = (32'd0 - main_preheaderi_400_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %402 = sub nsw i32 0, %400*/
		main_preheaderi_402_r2 = (32'd0 - main_preheaderi_400_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_402_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %402 = sub nsw i32 0, %400*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_preheaderi_402_reg_r0 <= main_preheaderi_402_r0;
		if (start == 1'b0 && ^(main_preheaderi_402_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_402_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_402_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %402 = sub nsw i32 0, %400*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_preheaderi_402_reg_r1 <= main_preheaderi_402_r1;
		if (start == 1'b0 && ^(main_preheaderi_402_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_402_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_402_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %402 = sub nsw i32 0, %400*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_preheaderi_402_reg_r2 <= main_preheaderi_402_r2;
		if (start == 1'b0 && ^(main_preheaderi_402_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_402_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %403 = icmp slt i32 %.apl1.0.i.i, %402*/
		main_preheaderi_403_r0 = ($signed(main_preheaderi_apl10ii_var2_reg_r0) < $signed(main_preheaderi_402_reg_r0));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %403 = icmp slt i32 %.apl1.0.i.i, %402*/
		main_preheaderi_403_r1 = ($signed(main_preheaderi_apl10ii_var2_reg_r1) < $signed(main_preheaderi_402_reg_r1));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %403 = icmp slt i32 %.apl1.0.i.i, %402*/
		main_preheaderi_403_r2 = ($signed(main_preheaderi_apl10ii_var2_reg_r2) < $signed(main_preheaderi_402_reg_r2));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i.i = select i1 %403, i32 %402, i32 %.apl1.0.i.i*/
		main_preheaderi_apl12ii_r0 = (main_preheaderi_403_r0 ? main_preheaderi_402_reg_r0 : main_preheaderi_apl10ii_var2_reg_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i.i = select i1 %403, i32 %402, i32 %.apl1.0.i.i*/
		main_preheaderi_apl12ii_r1 = (main_preheaderi_403_r1 ? main_preheaderi_402_reg_r1 : main_preheaderi_apl10ii_var2_reg_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i.i = select i1 %403, i32 %402, i32 %.apl1.0.i.i*/
		main_preheaderi_apl12ii_r2 = (main_preheaderi_403_r2 ? main_preheaderi_402_reg_r2 : main_preheaderi_apl10ii_var2_reg_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_apl12ii_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %apl1.2.i.i = select i1 %403, i32 %402, i32 %.apl1.0.i.i*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_preheaderi_apl12ii_reg_r0 <= main_preheaderi_apl12ii_r0;
		if (start == 1'b0 && ^(main_preheaderi_apl12ii_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl12ii_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_apl12ii_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %apl1.2.i.i = select i1 %403, i32 %402, i32 %.apl1.0.i.i*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_preheaderi_apl12ii_reg_r1 <= main_preheaderi_apl12ii_r1;
		if (start == 1'b0 && ^(main_preheaderi_apl12ii_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl12ii_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_apl12ii_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %apl1.2.i.i = select i1 %403, i32 %402, i32 %.apl1.0.i.i*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_preheaderi_apl12ii_reg_r2 <= main_preheaderi_apl12ii_r2;
		if (start == 1'b0 && ^(main_preheaderi_apl12ii_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl12ii_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %404 = add nsw i32 %364, %360*/
		main_preheaderi_404_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %404 = add nsw i32 %364, %360*/
		main_preheaderi_404_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %404 = add nsw i32 %364, %360*/
		main_preheaderi_404_r2 = main_signed_add_32_1_r2;
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_404_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %404 = add nsw i32 %364, %360*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_preheaderi_404_reg_r0 <= main_preheaderi_404_r0;
		if (start == 1'b0 && ^(main_preheaderi_404_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_404_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_404_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %404 = add nsw i32 %364, %360*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_preheaderi_404_reg_r1 <= main_preheaderi_404_r1;
		if (start == 1'b0 && ^(main_preheaderi_404_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_404_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_404_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %404 = add nsw i32 %364, %360*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_preheaderi_404_reg_r2 <= main_preheaderi_404_r2;
		if (start == 1'b0 && ^(main_preheaderi_404_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_404_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %405 = sub nsw i32 %292, %404*/
		main_preheaderi_405_r0 = (main_preheaderi_292_reg_r0 - main_preheaderi_404_r0);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %405 = sub nsw i32 %292, %404*/
		main_preheaderi_405_r1 = (main_preheaderi_292_reg_r1 - main_preheaderi_404_r1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %405 = sub nsw i32 %292, %404*/
		main_preheaderi_405_r2 = (main_preheaderi_292_reg_r2 - main_preheaderi_404_r2);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_405_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %405 = sub nsw i32 %292, %404*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_preheaderi_405_reg_r0 <= main_preheaderi_405_r0;
		if (start == 1'b0 && ^(main_preheaderi_405_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_405_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_405_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %405 = sub nsw i32 %292, %404*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_preheaderi_405_reg_r1 <= main_preheaderi_405_r1;
		if (start == 1'b0 && ^(main_preheaderi_405_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_405_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_405_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %405 = sub nsw i32 %292, %404*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_preheaderi_405_reg_r2 <= main_preheaderi_405_r2;
		if (start == 1'b0 && ^(main_preheaderi_405_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_405_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %406 = add nsw i32 %404, %292*/
		main_preheaderi_406_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %406 = add nsw i32 %404, %292*/
		main_preheaderi_406_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %406 = add nsw i32 %404, %292*/
		main_preheaderi_406_r2 = main_signed_add_32_0_r2;
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_406_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %406 = add nsw i32 %404, %292*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_preheaderi_406_reg_r0 <= main_preheaderi_406_r0;
		if (start == 1'b0 && ^(main_preheaderi_406_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_406_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_406_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %406 = add nsw i32 %404, %292*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_preheaderi_406_reg_r1 <= main_preheaderi_406_r1;
		if (start == 1'b0 && ^(main_preheaderi_406_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_406_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_406_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %406 = add nsw i32 %404, %292*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_preheaderi_406_reg_r2 <= main_preheaderi_406_r2;
		if (start == 1'b0 && ^(main_preheaderi_406_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_406_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %407 = mul nsw i32 %405, 12*/
		main_preheaderi_407_r0 = (main_preheaderi_405_reg_r0 * 32'd12);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %407 = mul nsw i32 %405, 12*/
		main_preheaderi_407_r1 = (main_preheaderi_405_reg_r1 * 32'd12);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %407 = mul nsw i32 %405, 12*/
		main_preheaderi_407_r2 = (main_preheaderi_405_reg_r2 * 32'd12);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_407_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %407 = mul nsw i32 %405, 12*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_407_reg_r0 <= main_preheaderi_407_r0;
		if (start == 1'b0 && ^(main_preheaderi_407_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_407_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_407_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %407 = mul nsw i32 %405, 12*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_407_reg_r1 <= main_preheaderi_407_r1;
		if (start == 1'b0 && ^(main_preheaderi_407_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_407_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_407_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %407 = mul nsw i32 %405, 12*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_preheaderi_407_reg_r2 <= main_preheaderi_407_r2;
		if (start == 1'b0 && ^(main_preheaderi_407_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_407_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %408 = mul nsw i32 %406, -44*/
		main_preheaderi_408_r0 = (main_preheaderi_406_r0 * -32'd44);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %408 = mul nsw i32 %406, -44*/
		main_preheaderi_408_r1 = (main_preheaderi_406_r1 * -32'd44);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %408 = mul nsw i32 %406, -44*/
		main_preheaderi_408_r2 = (main_preheaderi_406_r2 * -32'd44);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_408_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %408 = mul nsw i32 %406, -44*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_preheaderi_408_reg_r0 <= main_preheaderi_408_r0;
		if (start == 1'b0 && ^(main_preheaderi_408_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_408_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_408_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %408 = mul nsw i32 %406, -44*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_preheaderi_408_reg_r1 <= main_preheaderi_408_r1;
		if (start == 1'b0 && ^(main_preheaderi_408_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_408_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_408_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %408 = mul nsw i32 %406, -44*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_preheaderi_408_reg_r2 <= main_preheaderi_408_r2;
		if (start == 1'b0 && ^(main_preheaderi_408_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_408_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %409 = mul nsw i32 %accumc.0.0, -44*/
		main_preheaderi_409_r0 = (main_preheaderi_accumc00_reg_r0 * -32'd44);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %409 = mul nsw i32 %accumc.0.0, -44*/
		main_preheaderi_409_r1 = (main_preheaderi_accumc00_reg_r1 * -32'd44);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %409 = mul nsw i32 %accumc.0.0, -44*/
		main_preheaderi_409_r2 = (main_preheaderi_accumc00_reg_r2 * -32'd44);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_409_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %409 = mul nsw i32 %accumc.0.0, -44*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_409_reg_r0 <= main_preheaderi_409_r0;
		if (start == 1'b0 && ^(main_preheaderi_409_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_409_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_409_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %409 = mul nsw i32 %accumc.0.0, -44*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_409_reg_r1 <= main_preheaderi_409_r1;
		if (start == 1'b0 && ^(main_preheaderi_409_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_409_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_409_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %409 = mul nsw i32 %accumc.0.0, -44*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_409_reg_r2 <= main_preheaderi_409_r2;
		if (start == 1'b0 && ^(main_preheaderi_409_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_409_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %410 = add nsw i32 %409, %407*/
		main_preheaderi_410_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %410 = add nsw i32 %409, %407*/
		main_preheaderi_410_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %410 = add nsw i32 %409, %407*/
		main_preheaderi_410_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %410 = add nsw i32 %409, %407*/
	main_preheaderi_410_reg_r0 = main_quantlexiti_137_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %410 = add nsw i32 %409, %407*/
	main_preheaderi_410_reg_r1 = main_quantlexiti_137_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %410 = add nsw i32 %409, %407*/
	main_preheaderi_410_reg_r2 = main_quantlexiti_137_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %411 = mul nsw i32 %accumd.0.0, 212*/
		main_preheaderi_411_r0 = (main_preheaderi_accumd00_reg_r0 * 32'd212);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %411 = mul nsw i32 %accumd.0.0, 212*/
		main_preheaderi_411_r1 = (main_preheaderi_accumd00_reg_r1 * 32'd212);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %411 = mul nsw i32 %accumd.0.0, 212*/
		main_preheaderi_411_r2 = (main_preheaderi_accumd00_reg_r2 * 32'd212);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_411_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %411 = mul nsw i32 %accumd.0.0, 212*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_411_reg_r0 <= main_preheaderi_411_r0;
		if (start == 1'b0 && ^(main_preheaderi_411_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_411_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_411_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %411 = mul nsw i32 %accumd.0.0, 212*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_411_reg_r1 <= main_preheaderi_411_r1;
		if (start == 1'b0 && ^(main_preheaderi_411_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_411_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_411_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %411 = mul nsw i32 %accumd.0.0, 212*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_411_reg_r2 <= main_preheaderi_411_r2;
		if (start == 1'b0 && ^(main_preheaderi_411_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_411_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %412 = add nsw i32 %411, %408*/
		main_preheaderi_412_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %412 = add nsw i32 %411, %408*/
		main_preheaderi_412_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %412 = add nsw i32 %411, %408*/
		main_preheaderi_412_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %412 = add nsw i32 %411, %408*/
	main_preheaderi_412_reg_r0 = main_legup_memset_4_i64exit_61_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %412 = add nsw i32 %411, %408*/
	main_preheaderi_412_reg_r1 = main_legup_memset_4_i64exit_61_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %412 = add nsw i32 %411, %408*/
	main_preheaderi_412_reg_r2 = main_legup_memset_4_i64exit_61_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %413 = mul nsw i32 %accumc.1.0, 48*/
		main_preheaderi_413_r0 = (main_preheaderi_accumc10_reg_r0 * 32'd48);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %413 = mul nsw i32 %accumc.1.0, 48*/
		main_preheaderi_413_r1 = (main_preheaderi_accumc10_reg_r1 * 32'd48);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %413 = mul nsw i32 %accumc.1.0, 48*/
		main_preheaderi_413_r2 = (main_preheaderi_accumc10_reg_r2 * 32'd48);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_413_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %413 = mul nsw i32 %accumc.1.0, 48*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_413_reg_r0 <= main_preheaderi_413_r0;
		if (start == 1'b0 && ^(main_preheaderi_413_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_413_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_413_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %413 = mul nsw i32 %accumc.1.0, 48*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_413_reg_r1 <= main_preheaderi_413_r1;
		if (start == 1'b0 && ^(main_preheaderi_413_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_413_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_413_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %413 = mul nsw i32 %accumc.1.0, 48*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_413_reg_r2 <= main_preheaderi_413_r2;
		if (start == 1'b0 && ^(main_preheaderi_413_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_413_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %414 = add nsw i32 %413, %410*/
		main_preheaderi_414_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %414 = add nsw i32 %413, %410*/
		main_preheaderi_414_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %414 = add nsw i32 %413, %410*/
		main_preheaderi_414_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %414 = add nsw i32 %413, %410*/
	main_preheaderi_414_reg_r0 = main_legup_memset_4_i64exit_43_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %414 = add nsw i32 %413, %410*/
	main_preheaderi_414_reg_r1 = main_legup_memset_4_i64exit_43_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %414 = add nsw i32 %413, %410*/
	main_preheaderi_414_reg_r2 = main_legup_memset_4_i64exit_43_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %415 = mul nsw i32 %accumd.1.0, -624*/
		main_preheaderi_415_r0 = (main_preheaderi_accumd10_reg_r0 * -32'd624);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %415 = mul nsw i32 %accumd.1.0, -624*/
		main_preheaderi_415_r1 = (main_preheaderi_accumd10_reg_r1 * -32'd624);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %415 = mul nsw i32 %accumd.1.0, -624*/
		main_preheaderi_415_r2 = (main_preheaderi_accumd10_reg_r2 * -32'd624);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_415_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %415 = mul nsw i32 %accumd.1.0, -624*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_415_reg_r0 <= main_preheaderi_415_r0;
		if (start == 1'b0 && ^(main_preheaderi_415_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_415_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_415_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %415 = mul nsw i32 %accumd.1.0, -624*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_415_reg_r1 <= main_preheaderi_415_r1;
		if (start == 1'b0 && ^(main_preheaderi_415_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_415_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_415_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %415 = mul nsw i32 %accumd.1.0, -624*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_415_reg_r2 <= main_preheaderi_415_r2;
		if (start == 1'b0 && ^(main_preheaderi_415_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_415_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %416 = add nsw i32 %415, %412*/
		main_preheaderi_416_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %416 = add nsw i32 %415, %412*/
		main_preheaderi_416_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %416 = add nsw i32 %415, %412*/
		main_preheaderi_416_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %416 = add nsw i32 %415, %412*/
	main_preheaderi_416_reg_r0 = main_legup_memset_4_i64exit_55_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %416 = add nsw i32 %415, %412*/
	main_preheaderi_416_reg_r1 = main_legup_memset_4_i64exit_55_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %416 = add nsw i32 %415, %412*/
	main_preheaderi_416_reg_r2 = main_legup_memset_4_i64exit_55_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %417 = shl nsw i32 %accumc.2.0, 7*/
		main_preheaderi_417_r0 = (main_preheaderi_accumc20_reg_r0 <<< (32'd7 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %417 = shl nsw i32 %accumc.2.0, 7*/
		main_preheaderi_417_r1 = (main_preheaderi_accumc20_reg_r1 <<< (32'd7 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %417 = shl nsw i32 %accumc.2.0, 7*/
		main_preheaderi_417_r2 = (main_preheaderi_accumc20_reg_r2 <<< (32'd7 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_417_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %417 = shl nsw i32 %accumc.2.0, 7*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_417_reg_r0 <= main_preheaderi_417_r0;
		if (start == 1'b0 && ^(main_preheaderi_417_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_417_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_417_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %417 = shl nsw i32 %accumc.2.0, 7*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_417_reg_r1 <= main_preheaderi_417_r1;
		if (start == 1'b0 && ^(main_preheaderi_417_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_417_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_417_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %417 = shl nsw i32 %accumc.2.0, 7*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_417_reg_r2 <= main_preheaderi_417_r2;
		if (start == 1'b0 && ^(main_preheaderi_417_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_417_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %418 = add nsw i32 %417, %414*/
		main_preheaderi_418_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %418 = add nsw i32 %417, %414*/
		main_preheaderi_418_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %418 = add nsw i32 %417, %414*/
		main_preheaderi_418_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %418 = add nsw i32 %417, %414*/
	main_preheaderi_418_reg_r0 = main_legup_memset_4_i64exit_109_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %418 = add nsw i32 %417, %414*/
	main_preheaderi_418_reg_r1 = main_legup_memset_4_i64exit_109_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %418 = add nsw i32 %417, %414*/
	main_preheaderi_418_reg_r2 = main_legup_memset_4_i64exit_109_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %419 = mul nsw i32 %accumd.2.0, 1448*/
		main_preheaderi_419_r0 = (main_preheaderi_accumd20_reg_r0 * 32'd1448);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %419 = mul nsw i32 %accumd.2.0, 1448*/
		main_preheaderi_419_r1 = (main_preheaderi_accumd20_reg_r1 * 32'd1448);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %419 = mul nsw i32 %accumd.2.0, 1448*/
		main_preheaderi_419_r2 = (main_preheaderi_accumd20_reg_r2 * 32'd1448);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_419_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %419 = mul nsw i32 %accumd.2.0, 1448*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_419_reg_r0 <= main_preheaderi_419_r0;
		if (start == 1'b0 && ^(main_preheaderi_419_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_419_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_419_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %419 = mul nsw i32 %accumd.2.0, 1448*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_419_reg_r1 <= main_preheaderi_419_r1;
		if (start == 1'b0 && ^(main_preheaderi_419_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_419_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_419_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %419 = mul nsw i32 %accumd.2.0, 1448*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_419_reg_r2 <= main_preheaderi_419_r2;
		if (start == 1'b0 && ^(main_preheaderi_419_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_419_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %419, %416*/
		main_preheaderi_420_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %419, %416*/
		main_preheaderi_420_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %419, %416*/
		main_preheaderi_420_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %420 = add nsw i32 %419, %416*/
	main_preheaderi_420_reg_r0 = main_legup_memset_4_i64exit_57_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %420 = add nsw i32 %419, %416*/
	main_preheaderi_420_reg_r1 = main_legup_memset_4_i64exit_57_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %420 = add nsw i32 %419, %416*/
	main_preheaderi_420_reg_r2 = main_legup_memset_4_i64exit_57_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %421 = mul nsw i32 %accumc.3.0, -840*/
		main_preheaderi_421_r0 = (main_preheaderi_accumc30_reg_r0 * -32'd840);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %421 = mul nsw i32 %accumc.3.0, -840*/
		main_preheaderi_421_r1 = (main_preheaderi_accumc30_reg_r1 * -32'd840);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %421 = mul nsw i32 %accumc.3.0, -840*/
		main_preheaderi_421_r2 = (main_preheaderi_accumc30_reg_r2 * -32'd840);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_421_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %421 = mul nsw i32 %accumc.3.0, -840*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_421_reg_r0 <= main_preheaderi_421_r0;
		if (start == 1'b0 && ^(main_preheaderi_421_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_421_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_421_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %421 = mul nsw i32 %accumc.3.0, -840*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_421_reg_r1 <= main_preheaderi_421_r1;
		if (start == 1'b0 && ^(main_preheaderi_421_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_421_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_421_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %421 = mul nsw i32 %accumc.3.0, -840*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_421_reg_r2 <= main_preheaderi_421_r2;
		if (start == 1'b0 && ^(main_preheaderi_421_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_421_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %422 = add nsw i32 %421, %418*/
		main_preheaderi_422_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %422 = add nsw i32 %421, %418*/
		main_preheaderi_422_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %422 = add nsw i32 %421, %418*/
		main_preheaderi_422_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %422 = add nsw i32 %421, %418*/
	main_preheaderi_422_reg_r0 = main_quantlexiti_137_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %422 = add nsw i32 %421, %418*/
	main_preheaderi_422_reg_r1 = main_quantlexiti_137_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %422 = add nsw i32 %421, %418*/
	main_preheaderi_422_reg_r2 = main_quantlexiti_137_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %423 = mul nsw i32 %accumd.3.0, -3220*/
		main_preheaderi_423_r0 = (main_preheaderi_accumd30_reg_r0 * -32'd3220);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %423 = mul nsw i32 %accumd.3.0, -3220*/
		main_preheaderi_423_r1 = (main_preheaderi_accumd30_reg_r1 * -32'd3220);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %423 = mul nsw i32 %accumd.3.0, -3220*/
		main_preheaderi_423_r2 = (main_preheaderi_accumd30_reg_r2 * -32'd3220);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_423_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %423 = mul nsw i32 %accumd.3.0, -3220*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_423_reg_r0 <= main_preheaderi_423_r0;
		if (start == 1'b0 && ^(main_preheaderi_423_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_423_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_423_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %423 = mul nsw i32 %accumd.3.0, -3220*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_423_reg_r1 <= main_preheaderi_423_r1;
		if (start == 1'b0 && ^(main_preheaderi_423_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_423_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_423_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %423 = mul nsw i32 %accumd.3.0, -3220*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_423_reg_r2 <= main_preheaderi_423_r2;
		if (start == 1'b0 && ^(main_preheaderi_423_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_423_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %424 = add nsw i32 %423, %420*/
		main_preheaderi_424_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %424 = add nsw i32 %423, %420*/
		main_preheaderi_424_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %424 = add nsw i32 %423, %420*/
		main_preheaderi_424_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %424 = add nsw i32 %423, %420*/
	main_preheaderi_424_reg_r0 = main_legup_memset_4_i64exit_61_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %424 = add nsw i32 %423, %420*/
	main_preheaderi_424_reg_r1 = main_legup_memset_4_i64exit_61_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %424 = add nsw i32 %423, %420*/
	main_preheaderi_424_reg_r2 = main_legup_memset_4_i64exit_61_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %425 = mul nsw i32 %accumc.4.0, 3804*/
		main_preheaderi_425_r0 = (main_preheaderi_accumc40_reg_r0 * 32'd3804);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %425 = mul nsw i32 %accumc.4.0, 3804*/
		main_preheaderi_425_r1 = (main_preheaderi_accumc40_reg_r1 * 32'd3804);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %425 = mul nsw i32 %accumc.4.0, 3804*/
		main_preheaderi_425_r2 = (main_preheaderi_accumc40_reg_r2 * 32'd3804);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_425_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %425 = mul nsw i32 %accumc.4.0, 3804*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_425_reg_r0 <= main_preheaderi_425_r0;
		if (start == 1'b0 && ^(main_preheaderi_425_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_425_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_425_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %425 = mul nsw i32 %accumc.4.0, 3804*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_425_reg_r1 <= main_preheaderi_425_r1;
		if (start == 1'b0 && ^(main_preheaderi_425_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_425_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_425_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %425 = mul nsw i32 %accumc.4.0, 3804*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_425_reg_r2 <= main_preheaderi_425_r2;
		if (start == 1'b0 && ^(main_preheaderi_425_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_425_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %426 = add nsw i32 %425, %422*/
		main_preheaderi_426_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %426 = add nsw i32 %425, %422*/
		main_preheaderi_426_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %426 = add nsw i32 %425, %422*/
		main_preheaderi_426_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %426 = add nsw i32 %425, %422*/
	main_preheaderi_426_reg_r0 = main_legup_memset_4_i64exit_43_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %426 = add nsw i32 %425, %422*/
	main_preheaderi_426_reg_r1 = main_legup_memset_4_i64exit_43_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %426 = add nsw i32 %425, %422*/
	main_preheaderi_426_reg_r2 = main_legup_memset_4_i64exit_43_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %427 = mul nsw i32 %accumd.4.0, 15504*/
		main_preheaderi_427_r0 = (main_preheaderi_accumd40_reg_r0 * 32'd15504);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %427 = mul nsw i32 %accumd.4.0, 15504*/
		main_preheaderi_427_r1 = (main_preheaderi_accumd40_reg_r1 * 32'd15504);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %427 = mul nsw i32 %accumd.4.0, 15504*/
		main_preheaderi_427_r2 = (main_preheaderi_accumd40_reg_r2 * 32'd15504);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_427_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %427 = mul nsw i32 %accumd.4.0, 15504*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_427_reg_r0 <= main_preheaderi_427_r0;
		if (start == 1'b0 && ^(main_preheaderi_427_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_427_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_427_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %427 = mul nsw i32 %accumd.4.0, 15504*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_427_reg_r1 <= main_preheaderi_427_r1;
		if (start == 1'b0 && ^(main_preheaderi_427_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_427_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_427_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %427 = mul nsw i32 %accumd.4.0, 15504*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_427_reg_r2 <= main_preheaderi_427_r2;
		if (start == 1'b0 && ^(main_preheaderi_427_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_427_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %428 = add nsw i32 %427, %424*/
		main_preheaderi_428_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %428 = add nsw i32 %427, %424*/
		main_preheaderi_428_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %428 = add nsw i32 %427, %424*/
		main_preheaderi_428_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %428 = add nsw i32 %427, %424*/
	main_preheaderi_428_reg_r0 = main_legup_memset_4_i64exit_30_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %428 = add nsw i32 %427, %424*/
	main_preheaderi_428_reg_r1 = main_legup_memset_4_i64exit_30_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %428 = add nsw i32 %427, %424*/
	main_preheaderi_428_reg_r2 = main_legup_memset_4_i64exit_30_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %429 = mul nsw i32 %accumc.5.0, 15504*/
		main_preheaderi_429_r0 = (main_preheaderi_accumc50_reg_r0 * 32'd15504);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %429 = mul nsw i32 %accumc.5.0, 15504*/
		main_preheaderi_429_r1 = (main_preheaderi_accumc50_reg_r1 * 32'd15504);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %429 = mul nsw i32 %accumc.5.0, 15504*/
		main_preheaderi_429_r2 = (main_preheaderi_accumc50_reg_r2 * 32'd15504);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_429_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %429 = mul nsw i32 %accumc.5.0, 15504*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_429_reg_r0 <= main_preheaderi_429_r0;
		if (start == 1'b0 && ^(main_preheaderi_429_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_429_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_429_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %429 = mul nsw i32 %accumc.5.0, 15504*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_429_reg_r1 <= main_preheaderi_429_r1;
		if (start == 1'b0 && ^(main_preheaderi_429_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_429_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_429_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %429 = mul nsw i32 %accumc.5.0, 15504*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_429_reg_r2 <= main_preheaderi_429_r2;
		if (start == 1'b0 && ^(main_preheaderi_429_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_429_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %430 = add nsw i32 %429, %426*/
		main_preheaderi_430_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %430 = add nsw i32 %429, %426*/
		main_preheaderi_430_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %430 = add nsw i32 %429, %426*/
		main_preheaderi_430_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %430 = add nsw i32 %429, %426*/
	main_preheaderi_430_reg_r0 = main_legup_memset_4_i64exit_55_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %430 = add nsw i32 %429, %426*/
	main_preheaderi_430_reg_r1 = main_legup_memset_4_i64exit_55_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %430 = add nsw i32 %429, %426*/
	main_preheaderi_430_reg_r2 = main_legup_memset_4_i64exit_55_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %431 = mul nsw i32 %accumd.5.0, 3804*/
		main_preheaderi_431_r0 = (main_preheaderi_accumd50_reg_r0 * 32'd3804);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %431 = mul nsw i32 %accumd.5.0, 3804*/
		main_preheaderi_431_r1 = (main_preheaderi_accumd50_reg_r1 * 32'd3804);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %431 = mul nsw i32 %accumd.5.0, 3804*/
		main_preheaderi_431_r2 = (main_preheaderi_accumd50_reg_r2 * 32'd3804);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_431_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %431 = mul nsw i32 %accumd.5.0, 3804*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_431_reg_r0 <= main_preheaderi_431_r0;
		if (start == 1'b0 && ^(main_preheaderi_431_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_431_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_431_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %431 = mul nsw i32 %accumd.5.0, 3804*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_431_reg_r1 <= main_preheaderi_431_r1;
		if (start == 1'b0 && ^(main_preheaderi_431_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_431_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_431_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %431 = mul nsw i32 %accumd.5.0, 3804*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_431_reg_r2 <= main_preheaderi_431_r2;
		if (start == 1'b0 && ^(main_preheaderi_431_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_431_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %432 = add nsw i32 %431, %428*/
		main_preheaderi_432_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %432 = add nsw i32 %431, %428*/
		main_preheaderi_432_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %432 = add nsw i32 %431, %428*/
		main_preheaderi_432_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %432 = add nsw i32 %431, %428*/
	main_preheaderi_432_reg_r0 = main_legup_memset_4_i64exit_57_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %432 = add nsw i32 %431, %428*/
	main_preheaderi_432_reg_r1 = main_legup_memset_4_i64exit_57_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %432 = add nsw i32 %431, %428*/
	main_preheaderi_432_reg_r2 = main_legup_memset_4_i64exit_57_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %433 = mul nsw i32 %accumc.6.0, -3220*/
		main_preheaderi_433_r0 = (main_preheaderi_accumc60_reg_r0 * -32'd3220);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %433 = mul nsw i32 %accumc.6.0, -3220*/
		main_preheaderi_433_r1 = (main_preheaderi_accumc60_reg_r1 * -32'd3220);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %433 = mul nsw i32 %accumc.6.0, -3220*/
		main_preheaderi_433_r2 = (main_preheaderi_accumc60_reg_r2 * -32'd3220);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_433_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %433 = mul nsw i32 %accumc.6.0, -3220*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_433_reg_r0 <= main_preheaderi_433_r0;
		if (start == 1'b0 && ^(main_preheaderi_433_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_433_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_433_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %433 = mul nsw i32 %accumc.6.0, -3220*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_433_reg_r1 <= main_preheaderi_433_r1;
		if (start == 1'b0 && ^(main_preheaderi_433_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_433_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_433_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %433 = mul nsw i32 %accumc.6.0, -3220*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_433_reg_r2 <= main_preheaderi_433_r2;
		if (start == 1'b0 && ^(main_preheaderi_433_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_433_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %434 = add nsw i32 %433, %430*/
		main_preheaderi_434_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %434 = add nsw i32 %433, %430*/
		main_preheaderi_434_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %434 = add nsw i32 %433, %430*/
		main_preheaderi_434_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %434 = add nsw i32 %433, %430*/
	main_preheaderi_434_reg_r0 = main_quantlexiti_137_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %434 = add nsw i32 %433, %430*/
	main_preheaderi_434_reg_r1 = main_quantlexiti_137_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %434 = add nsw i32 %433, %430*/
	main_preheaderi_434_reg_r2 = main_quantlexiti_137_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %435 = mul nsw i32 %accumd.6.0, -840*/
		main_preheaderi_435_r0 = (main_preheaderi_accumd60_reg_r0 * -32'd840);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %435 = mul nsw i32 %accumd.6.0, -840*/
		main_preheaderi_435_r1 = (main_preheaderi_accumd60_reg_r1 * -32'd840);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %435 = mul nsw i32 %accumd.6.0, -840*/
		main_preheaderi_435_r2 = (main_preheaderi_accumd60_reg_r2 * -32'd840);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_435_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %435 = mul nsw i32 %accumd.6.0, -840*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_435_reg_r0 <= main_preheaderi_435_r0;
		if (start == 1'b0 && ^(main_preheaderi_435_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_435_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_435_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %435 = mul nsw i32 %accumd.6.0, -840*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_435_reg_r1 <= main_preheaderi_435_r1;
		if (start == 1'b0 && ^(main_preheaderi_435_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_435_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_435_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %435 = mul nsw i32 %accumd.6.0, -840*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_435_reg_r2 <= main_preheaderi_435_r2;
		if (start == 1'b0 && ^(main_preheaderi_435_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_435_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %436 = add nsw i32 %435, %432*/
		main_preheaderi_436_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %436 = add nsw i32 %435, %432*/
		main_preheaderi_436_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %436 = add nsw i32 %435, %432*/
		main_preheaderi_436_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %436 = add nsw i32 %435, %432*/
	main_preheaderi_436_reg_r0 = main_legup_memset_4_i64exit_61_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %436 = add nsw i32 %435, %432*/
	main_preheaderi_436_reg_r1 = main_legup_memset_4_i64exit_61_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %436 = add nsw i32 %435, %432*/
	main_preheaderi_436_reg_r2 = main_legup_memset_4_i64exit_61_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %437 = mul nsw i32 %accumc.7.0, 1448*/
		main_preheaderi_437_r0 = (main_preheaderi_accumc70_reg_r0 * 32'd1448);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %437 = mul nsw i32 %accumc.7.0, 1448*/
		main_preheaderi_437_r1 = (main_preheaderi_accumc70_reg_r1 * 32'd1448);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %437 = mul nsw i32 %accumc.7.0, 1448*/
		main_preheaderi_437_r2 = (main_preheaderi_accumc70_reg_r2 * 32'd1448);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_437_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %437 = mul nsw i32 %accumc.7.0, 1448*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_437_reg_r0 <= main_preheaderi_437_r0;
		if (start == 1'b0 && ^(main_preheaderi_437_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_437_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_437_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %437 = mul nsw i32 %accumc.7.0, 1448*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_437_reg_r1 <= main_preheaderi_437_r1;
		if (start == 1'b0 && ^(main_preheaderi_437_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_437_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_437_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %437 = mul nsw i32 %accumc.7.0, 1448*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_437_reg_r2 <= main_preheaderi_437_r2;
		if (start == 1'b0 && ^(main_preheaderi_437_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_437_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %438 = add nsw i32 %437, %434*/
		main_preheaderi_438_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %438 = add nsw i32 %437, %434*/
		main_preheaderi_438_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %438 = add nsw i32 %437, %434*/
		main_preheaderi_438_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %438 = add nsw i32 %437, %434*/
	main_preheaderi_438_reg_r0 = main_legup_memset_4_i64exit_43_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %438 = add nsw i32 %437, %434*/
	main_preheaderi_438_reg_r1 = main_legup_memset_4_i64exit_43_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %438 = add nsw i32 %437, %434*/
	main_preheaderi_438_reg_r2 = main_legup_memset_4_i64exit_43_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %439 = shl nsw i32 %accumd.7.0, 7*/
		main_preheaderi_439_r0 = (main_preheaderi_accumd70_reg_r0 <<< (32'd7 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %439 = shl nsw i32 %accumd.7.0, 7*/
		main_preheaderi_439_r1 = (main_preheaderi_accumd70_reg_r1 <<< (32'd7 % 32));
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %439 = shl nsw i32 %accumd.7.0, 7*/
		main_preheaderi_439_r2 = (main_preheaderi_accumd70_reg_r2 <<< (32'd7 % 32));
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_439_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %439 = shl nsw i32 %accumd.7.0, 7*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_439_reg_r0 <= main_preheaderi_439_r0;
		if (start == 1'b0 && ^(main_preheaderi_439_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_439_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_439_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %439 = shl nsw i32 %accumd.7.0, 7*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_439_reg_r1 <= main_preheaderi_439_r1;
		if (start == 1'b0 && ^(main_preheaderi_439_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_439_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_439_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %439 = shl nsw i32 %accumd.7.0, 7*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_439_reg_r2 <= main_preheaderi_439_r2;
		if (start == 1'b0 && ^(main_preheaderi_439_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_439_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %440 = add nsw i32 %439, %436*/
		main_preheaderi_440_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %440 = add nsw i32 %439, %436*/
		main_preheaderi_440_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %440 = add nsw i32 %439, %436*/
		main_preheaderi_440_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %440 = add nsw i32 %439, %436*/
	main_preheaderi_440_reg_r0 = main_quantlexiti_137_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %440 = add nsw i32 %439, %436*/
	main_preheaderi_440_reg_r1 = main_quantlexiti_137_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %440 = add nsw i32 %439, %436*/
	main_preheaderi_440_reg_r2 = main_quantlexiti_137_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %441 = mul nsw i32 %accumc.8.0, -624*/
		main_preheaderi_441_r0 = (main_preheaderi_accumc80_reg_r0 * -32'd624);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %441 = mul nsw i32 %accumc.8.0, -624*/
		main_preheaderi_441_r1 = (main_preheaderi_accumc80_reg_r1 * -32'd624);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %441 = mul nsw i32 %accumc.8.0, -624*/
		main_preheaderi_441_r2 = (main_preheaderi_accumc80_reg_r2 * -32'd624);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_441_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %441 = mul nsw i32 %accumc.8.0, -624*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_441_reg_r0 <= main_preheaderi_441_r0;
		if (start == 1'b0 && ^(main_preheaderi_441_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_441_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_441_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %441 = mul nsw i32 %accumc.8.0, -624*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_441_reg_r1 <= main_preheaderi_441_r1;
		if (start == 1'b0 && ^(main_preheaderi_441_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_441_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_441_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %441 = mul nsw i32 %accumc.8.0, -624*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_441_reg_r2 <= main_preheaderi_441_r2;
		if (start == 1'b0 && ^(main_preheaderi_441_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_441_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %442 = add nsw i32 %441, %438*/
		main_preheaderi_442_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %442 = add nsw i32 %441, %438*/
		main_preheaderi_442_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %442 = add nsw i32 %441, %438*/
		main_preheaderi_442_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %442 = add nsw i32 %441, %438*/
	main_preheaderi_442_reg_r0 = main_legup_memset_4_i64exit_55_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %442 = add nsw i32 %441, %438*/
	main_preheaderi_442_reg_r1 = main_legup_memset_4_i64exit_55_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %442 = add nsw i32 %441, %438*/
	main_preheaderi_442_reg_r2 = main_legup_memset_4_i64exit_55_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %443 = mul nsw i32 %accumd.8.0, 48*/
		main_preheaderi_443_r0 = (main_preheaderi_accumd80_reg_r0 * 32'd48);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %443 = mul nsw i32 %accumd.8.0, 48*/
		main_preheaderi_443_r1 = (main_preheaderi_accumd80_reg_r1 * 32'd48);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %443 = mul nsw i32 %accumd.8.0, 48*/
		main_preheaderi_443_r2 = (main_preheaderi_accumd80_reg_r2 * 32'd48);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_443_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %443 = mul nsw i32 %accumd.8.0, 48*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_443_reg_r0 <= main_preheaderi_443_r0;
		if (start == 1'b0 && ^(main_preheaderi_443_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_443_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_443_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %443 = mul nsw i32 %accumd.8.0, 48*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_443_reg_r1 <= main_preheaderi_443_r1;
		if (start == 1'b0 && ^(main_preheaderi_443_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_443_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_443_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %443 = mul nsw i32 %accumd.8.0, 48*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_443_reg_r2 <= main_preheaderi_443_r2;
		if (start == 1'b0 && ^(main_preheaderi_443_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_443_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %444 = add nsw i32 %443, %440*/
		main_preheaderi_444_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %444 = add nsw i32 %443, %440*/
		main_preheaderi_444_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %444 = add nsw i32 %443, %440*/
		main_preheaderi_444_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %444 = add nsw i32 %443, %440*/
	main_preheaderi_444_reg_r0 = main_legup_memset_4_i64exit_57_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %444 = add nsw i32 %443, %440*/
	main_preheaderi_444_reg_r1 = main_legup_memset_4_i64exit_57_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %444 = add nsw i32 %443, %440*/
	main_preheaderi_444_reg_r2 = main_legup_memset_4_i64exit_57_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %445 = mul nsw i32 %accumc.9.0, 212*/
		main_preheaderi_445_r0 = (main_preheaderi_accumc90_reg_r0 * 32'd212);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %445 = mul nsw i32 %accumc.9.0, 212*/
		main_preheaderi_445_r1 = (main_preheaderi_accumc90_reg_r1 * 32'd212);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %445 = mul nsw i32 %accumc.9.0, 212*/
		main_preheaderi_445_r2 = (main_preheaderi_accumc90_reg_r2 * 32'd212);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_445_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %445 = mul nsw i32 %accumc.9.0, 212*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_445_reg_r0 <= main_preheaderi_445_r0;
		if (start == 1'b0 && ^(main_preheaderi_445_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_445_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_445_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %445 = mul nsw i32 %accumc.9.0, 212*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_445_reg_r1 <= main_preheaderi_445_r1;
		if (start == 1'b0 && ^(main_preheaderi_445_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_445_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_445_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %445 = mul nsw i32 %accumc.9.0, 212*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_445_reg_r2 <= main_preheaderi_445_r2;
		if (start == 1'b0 && ^(main_preheaderi_445_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_445_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %446 = add nsw i32 %445, %442*/
		main_preheaderi_446_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %446 = add nsw i32 %445, %442*/
		main_preheaderi_446_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %446 = add nsw i32 %445, %442*/
		main_preheaderi_446_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %446 = add nsw i32 %445, %442*/
	main_preheaderi_446_reg_r0 = main_legup_memset_4_i64exit_43_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %446 = add nsw i32 %445, %442*/
	main_preheaderi_446_reg_r1 = main_legup_memset_4_i64exit_43_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %446 = add nsw i32 %445, %442*/
	main_preheaderi_446_reg_r2 = main_legup_memset_4_i64exit_43_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %447 = mul nsw i32 %accumd.9.0, -44*/
		main_preheaderi_447_r0 = (main_preheaderi_accumd90_reg_r0 * -32'd44);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %447 = mul nsw i32 %accumd.9.0, -44*/
		main_preheaderi_447_r1 = (main_preheaderi_accumd90_reg_r1 * -32'd44);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %447 = mul nsw i32 %accumd.9.0, -44*/
		main_preheaderi_447_r2 = (main_preheaderi_accumd90_reg_r2 * -32'd44);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_447_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %447 = mul nsw i32 %accumd.9.0, -44*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_447_reg_r0 <= main_preheaderi_447_r0;
		if (start == 1'b0 && ^(main_preheaderi_447_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_447_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_447_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %447 = mul nsw i32 %accumd.9.0, -44*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_447_reg_r1 <= main_preheaderi_447_r1;
		if (start == 1'b0 && ^(main_preheaderi_447_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_447_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_447_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %447 = mul nsw i32 %accumd.9.0, -44*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_447_reg_r2 <= main_preheaderi_447_r2;
		if (start == 1'b0 && ^(main_preheaderi_447_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_447_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %448 = add nsw i32 %447, %444*/
		main_preheaderi_448_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %448 = add nsw i32 %447, %444*/
		main_preheaderi_448_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %448 = add nsw i32 %447, %444*/
		main_preheaderi_448_r2 = main_signed_add_32_0_r2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %448 = add nsw i32 %447, %444*/
	main_preheaderi_448_reg_r0 = main_legup_memset_4_i64exit_61_reg_r0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %448 = add nsw i32 %447, %444*/
	main_preheaderi_448_reg_r1 = main_legup_memset_4_i64exit_61_reg_r1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %448 = add nsw i32 %447, %444*/
	main_preheaderi_448_reg_r2 = main_legup_memset_4_i64exit_61_reg_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %449 = mul nsw i32 %accumc.10.0, -44*/
		main_preheaderi_449_r0 = (main_preheaderi_accumc100_reg_r0 * -32'd44);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %449 = mul nsw i32 %accumc.10.0, -44*/
		main_preheaderi_449_r1 = (main_preheaderi_accumc100_reg_r1 * -32'd44);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %449 = mul nsw i32 %accumc.10.0, -44*/
		main_preheaderi_449_r2 = (main_preheaderi_accumc100_reg_r2 * -32'd44);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_449_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %449 = mul nsw i32 %accumc.10.0, -44*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_449_reg_r0 <= main_preheaderi_449_r0;
		if (start == 1'b0 && ^(main_preheaderi_449_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_449_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_449_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %449 = mul nsw i32 %accumc.10.0, -44*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_449_reg_r1 <= main_preheaderi_449_r1;
		if (start == 1'b0 && ^(main_preheaderi_449_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_449_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_449_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %449 = mul nsw i32 %accumc.10.0, -44*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_449_reg_r2 <= main_preheaderi_449_r2;
		if (start == 1'b0 && ^(main_preheaderi_449_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_449_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %449, %446*/
		main_preheaderi_450_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %449, %446*/
		main_preheaderi_450_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %449, %446*/
		main_preheaderi_450_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %451 = mul nsw i32 %accumd.10.0, 12*/
		main_preheaderi_451_r0 = (main_preheaderi_accumd100_reg_r0 * 32'd12);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %451 = mul nsw i32 %accumd.10.0, 12*/
		main_preheaderi_451_r1 = (main_preheaderi_accumd100_reg_r1 * 32'd12);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %451 = mul nsw i32 %accumd.10.0, 12*/
		main_preheaderi_451_r2 = (main_preheaderi_accumd100_reg_r2 * 32'd12);
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_451_reg_r0 <= 0;
	/* main: %.preheader.i*/
	/*   %451 = mul nsw i32 %accumd.10.0, 12*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_451_reg_r0 <= main_preheaderi_451_r0;
		if (start == 1'b0 && ^(main_preheaderi_451_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_451_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_451_reg_r1 <= 0;
	/* main: %.preheader.i*/
	/*   %451 = mul nsw i32 %accumd.10.0, 12*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_451_reg_r1 <= main_preheaderi_451_r1;
		if (start == 1'b0 && ^(main_preheaderi_451_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_451_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheaderi_451_reg_r2 <= 0;
	/* main: %.preheader.i*/
	/*   %451 = mul nsw i32 %accumd.10.0, 12*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_451_reg_r2 <= main_preheaderi_451_r2;
		if (start == 1'b0 && ^(main_preheaderi_451_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_451_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %452 = add nsw i32 %451, %448*/
		main_preheaderi_452_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %452 = add nsw i32 %451, %448*/
		main_preheaderi_452_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %452 = add nsw i32 %451, %448*/
		main_preheaderi_452_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %453 = ashr i32 %450, 14*/
		main_preheaderi_453_r0 = ($signed(main_preheaderi_450_r0) >>> 32'd14);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %453 = ashr i32 %450, 14*/
		main_preheaderi_453_r1 = ($signed(main_preheaderi_450_r1) >>> 32'd14);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %453 = ashr i32 %450, 14*/
		main_preheaderi_453_r2 = ($signed(main_preheaderi_450_r2) >>> 32'd14);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %454 = ashr i32 %452, 14*/
		main_preheaderi_454_r0 = ($signed(main_preheaderi_452_r0) >>> 32'd14);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %454 = ashr i32 %452, 14*/
		main_preheaderi_454_r1 = ($signed(main_preheaderi_452_r1) >>> 32'd14);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %454 = ashr i32 %452, 14*/
		main_preheaderi_454_r2 = ($signed(main_preheaderi_452_r2) >>> 32'd14);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_preheaderi_indvarnext_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_preheaderi_indvarnext_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_preheaderi_indvarnext_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %exitcond5 = icmp eq i32 %indvar.next, 50*/
		main_preheaderi_exitcond5_r0 = (main_preheaderi_indvarnext_r0 == 32'd50);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %exitcond5 = icmp eq i32 %indvar.next, 50*/
		main_preheaderi_exitcond5_r1 = (main_preheaderi_indvarnext_r1 == 32'd50);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %exitcond5 = icmp eq i32 %indvar.next, 50*/
		main_preheaderi_exitcond5_r2 = (main_preheaderi_indvarnext_r2 == 32'd50);
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_adpcm_mainexitpreheader_179) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result04_r0 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_adpcm_mainexit_182) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg_r0 == 1'd0))) */ begin
		main_adpcm_mainexit_main_result04_r0 = main_adpcm_mainexit_main_result0_r0;
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_adpcm_mainexitpreheader_179) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result04_r1 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_adpcm_mainexit_182) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg_r1 == 1'd0))) */ begin
		main_adpcm_mainexit_main_result04_r1 = main_adpcm_mainexit_main_result0_r1;
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_adpcm_mainexitpreheader_179) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result04_r2 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_adpcm_mainexit_182) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg_r2 == 1'd0))) */ begin
		main_adpcm_mainexit_main_result04_r2 = main_adpcm_mainexit_main_result0_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_adpcm_mainexit_main_result04_reg_r0 <= 0;
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_adpcm_mainexitpreheader_179) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result04_reg_r0 <= main_adpcm_mainexit_main_result04_r0;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result04_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result04_reg_r0"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_adpcm_mainexit_182) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg_r0 == 1'd0))) begin
		main_adpcm_mainexit_main_result04_reg_r0 <= main_adpcm_mainexit_main_result04_r0;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result04_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result04_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_adpcm_mainexit_main_result04_reg_r1 <= 0;
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_adpcm_mainexitpreheader_179) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result04_reg_r1 <= main_adpcm_mainexit_main_result04_r1;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result04_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result04_reg_r1"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_adpcm_mainexit_182) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg_r1 == 1'd0))) begin
		main_adpcm_mainexit_main_result04_reg_r1 <= main_adpcm_mainexit_main_result04_r1;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result04_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result04_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_adpcm_mainexit_main_result04_reg_r2 <= 0;
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_adpcm_mainexitpreheader_179) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result04_reg_r2 <= main_adpcm_mainexit_main_result04_r2;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result04_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result04_reg_r2"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_adpcm_mainexit_182) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg_r2 == 1'd0))) begin
		main_adpcm_mainexit_main_result04_reg_r2 <= main_adpcm_mainexit_main_result04_r2;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result04_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result04_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %459, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_adpcm_mainexitpreheader_179) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_i03_r0 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %459, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_adpcm_mainexit_182) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg_r0 == 1'd0))) */ begin
		main_adpcm_mainexit_i03_r0 = main_adpcm_mainexit_459_reg_r0;
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %459, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_adpcm_mainexitpreheader_179) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_i03_r1 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %459, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_adpcm_mainexit_182) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg_r1 == 1'd0))) */ begin
		main_adpcm_mainexit_i03_r1 = main_adpcm_mainexit_459_reg_r1;
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %459, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_adpcm_mainexitpreheader_179) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_i03_r2 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %459, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_adpcm_mainexit_182) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg_r2 == 1'd0))) */ begin
		main_adpcm_mainexit_i03_r2 = main_adpcm_mainexit_459_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_adpcm_mainexit_i03_reg_r0 <= 0;
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %459, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_adpcm_mainexitpreheader_179) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_i03_reg_r0 <= main_adpcm_mainexit_i03_r0;
		if (start == 1'b0 && ^(main_adpcm_mainexit_i03_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_i03_reg_r0"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %459, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_adpcm_mainexit_182) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg_r0 == 1'd0))) begin
		main_adpcm_mainexit_i03_reg_r0 <= main_adpcm_mainexit_i03_r0;
		if (start == 1'b0 && ^(main_adpcm_mainexit_i03_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_i03_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_adpcm_mainexit_i03_reg_r1 <= 0;
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %459, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_adpcm_mainexitpreheader_179) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_i03_reg_r1 <= main_adpcm_mainexit_i03_r1;
		if (start == 1'b0 && ^(main_adpcm_mainexit_i03_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_i03_reg_r1"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %459, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_adpcm_mainexit_182) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg_r1 == 1'd0))) begin
		main_adpcm_mainexit_i03_reg_r1 <= main_adpcm_mainexit_i03_r1;
		if (start == 1'b0 && ^(main_adpcm_mainexit_i03_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_i03_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_adpcm_mainexit_i03_reg_r2 <= 0;
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %459, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_adpcm_mainexitpreheader_179) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_i03_reg_r2 <= main_adpcm_mainexit_i03_r2;
		if (start == 1'b0 && ^(main_adpcm_mainexit_i03_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_i03_reg_r2"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %459, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_adpcm_mainexit_182) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg_r2 == 1'd0))) begin
		main_adpcm_mainexit_i03_reg_r2 <= main_adpcm_mainexit_i03_r2;
		if (start == 1'b0 && ^(main_adpcm_mainexit_i03_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_i03_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep3 = getelementptr [100 x i32]* @test_compressed, i32 0, i32 %i.03*/
		main_adpcm_mainexit_scevgep3_r0 = (`TAG_g_test_compressed_a + (4 * main_adpcm_mainexit_i03_reg_r0));
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep3 = getelementptr [100 x i32]* @test_compressed, i32 0, i32 %i.03*/
		main_adpcm_mainexit_scevgep3_r1 = (`TAG_g_test_compressed_a + (4 * main_adpcm_mainexit_i03_reg_r1));
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep3 = getelementptr [100 x i32]* @test_compressed, i32 0, i32 %i.03*/
		main_adpcm_mainexit_scevgep3_r2 = (`TAG_g_test_compressed_a + (4 * main_adpcm_mainexit_i03_reg_r2));
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep4 = getelementptr [100 x i32]* @compressed, i32 0, i32 %i.03*/
		main_adpcm_mainexit_scevgep4_r0 = (`TAG_g_compressed_a + (4 * main_adpcm_mainexit_i03_reg_r0));
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep4 = getelementptr [100 x i32]* @compressed, i32 0, i32 %i.03*/
		main_adpcm_mainexit_scevgep4_r1 = (`TAG_g_compressed_a + (4 * main_adpcm_mainexit_i03_reg_r1));
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep4 = getelementptr [100 x i32]* @compressed, i32 0, i32 %i.03*/
		main_adpcm_mainexit_scevgep4_r2 = (`TAG_g_compressed_a + (4 * main_adpcm_mainexit_i03_reg_r2));
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %455 = load i32* %scevgep4, align 4, !tbaa !1*/
		main_adpcm_mainexit_455_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %455 = load i32* %scevgep4, align 4, !tbaa !1*/
		main_adpcm_mainexit_455_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %455 = load i32* %scevgep4, align 4, !tbaa !1*/
		main_adpcm_mainexit_455_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %456 = load i32* %scevgep3, align 4, !tbaa !1*/
		main_adpcm_mainexit_456_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %456 = load i32* %scevgep3, align 4, !tbaa !1*/
		main_adpcm_mainexit_456_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %456 = load i32* %scevgep3, align 4, !tbaa !1*/
		main_adpcm_mainexit_456_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %457 = icmp eq i32 %455, %456*/
		main_adpcm_mainexit_457_r0 = (main_adpcm_mainexit_455_r0 == main_adpcm_mainexit_456_r0);
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %457 = icmp eq i32 %455, %456*/
		main_adpcm_mainexit_457_r1 = (main_adpcm_mainexit_455_r1 == main_adpcm_mainexit_456_r1);
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %457 = icmp eq i32 %455, %456*/
		main_adpcm_mainexit_457_r2 = (main_adpcm_mainexit_455_r2 == main_adpcm_mainexit_456_r2);
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %458 = zext i1 %457 to i32*/
		main_adpcm_mainexit_458_r0 = main_adpcm_mainexit_457_r0;
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %458 = zext i1 %457 to i32*/
		main_adpcm_mainexit_458_r1 = main_adpcm_mainexit_457_r1;
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %458 = zext i1 %457 to i32*/
		main_adpcm_mainexit_458_r2 = main_adpcm_mainexit_457_r2;
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %458, %main_result.04*/
		main_adpcm_mainexit_main_result0_r0 = main_signed_add_32_0_r0;
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %458, %main_result.04*/
		main_adpcm_mainexit_main_result0_r1 = main_signed_add_32_0_r1;
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %458, %main_result.04*/
		main_adpcm_mainexit_main_result0_r2 = main_signed_add_32_0_r2;
end
always @(posedge clk) begin
	if (reset)
		main_adpcm_mainexit_main_result0_reg_r0 <= 0;
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %458, %main_result.04*/
	else if((cur_state_v0 == LEGUP_F_main_BB_adpcm_mainexit_182)) begin
		main_adpcm_mainexit_main_result0_reg_r0 <= main_adpcm_mainexit_main_result0_r0;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result0_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result0_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_adpcm_mainexit_main_result0_reg_r1 <= 0;
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %458, %main_result.04*/
	else if((cur_state_v1 == LEGUP_F_main_BB_adpcm_mainexit_182)) begin
		main_adpcm_mainexit_main_result0_reg_r1 <= main_adpcm_mainexit_main_result0_r1;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result0_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result0_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_adpcm_mainexit_main_result0_reg_r2 <= 0;
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %458, %main_result.04*/
	else if((cur_state_v2 == LEGUP_F_main_BB_adpcm_mainexit_182)) begin
		main_adpcm_mainexit_main_result0_reg_r2 <= main_adpcm_mainexit_main_result0_r2;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result0_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result0_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %459 = add nsw i32 %i.03, 1*/
		main_adpcm_mainexit_459_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %459 = add nsw i32 %i.03, 1*/
		main_adpcm_mainexit_459_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %459 = add nsw i32 %i.03, 1*/
		main_adpcm_mainexit_459_r2 = main_signed_add_32_1_r2;
end
always @(posedge clk) begin
	if (reset)
		main_adpcm_mainexit_459_reg_r0 <= 0;
	/* main: %adpcm_main.exit*/
	/*   %459 = add nsw i32 %i.03, 1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_adpcm_mainexit_459_reg_r0 <= main_adpcm_mainexit_459_r0;
		if (start == 1'b0 && ^(main_adpcm_mainexit_459_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_459_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_adpcm_mainexit_459_reg_r1 <= 0;
	/* main: %adpcm_main.exit*/
	/*   %459 = add nsw i32 %i.03, 1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_adpcm_mainexit_459_reg_r1 <= main_adpcm_mainexit_459_r1;
		if (start == 1'b0 && ^(main_adpcm_mainexit_459_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_459_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_adpcm_mainexit_459_reg_r2 <= 0;
	/* main: %adpcm_main.exit*/
	/*   %459 = add nsw i32 %i.03, 1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_adpcm_mainexit_459_reg_r2 <= main_adpcm_mainexit_459_r2;
		if (start == 1'b0 && ^(main_adpcm_mainexit_459_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_459_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %459, 50*/
		main_adpcm_mainexit_exitcond_r0 = (main_adpcm_mainexit_459_r0 == 32'd50);
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %459, 50*/
		main_adpcm_mainexit_exitcond_r1 = (main_adpcm_mainexit_459_r1 == 32'd50);
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %459, 50*/
		main_adpcm_mainexit_exitcond_r2 = (main_adpcm_mainexit_459_r2 == 32'd50);
end
always @(posedge clk) begin
	if (reset)
		main_adpcm_mainexit_exitcond_reg_r0 <= 0;
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %459, 50*/
	else if((cur_state_v0 == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_adpcm_mainexit_exitcond_reg_r0 <= main_adpcm_mainexit_exitcond_r0;
		if (start == 1'b0 && ^(main_adpcm_mainexit_exitcond_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_exitcond_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_adpcm_mainexit_exitcond_reg_r1 <= 0;
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %459, 50*/
	else if((cur_state_v1 == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_adpcm_mainexit_exitcond_reg_r1 <= main_adpcm_mainexit_exitcond_r1;
		if (start == 1'b0 && ^(main_adpcm_mainexit_exitcond_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_exitcond_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_adpcm_mainexit_exitcond_reg_r2 <= 0;
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %459, 50*/
	else if((cur_state_v2 == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_adpcm_mainexit_exitcond_reg_r2 <= main_adpcm_mainexit_exitcond_r2;
		if (start == 1'b0 && ^(main_adpcm_mainexit_exitcond_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_exitcond_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderpreheader_183) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result22_r0 = main_adpcm_mainexit_main_result0_reg_r0;
	end
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheader_186) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg_r0 == 1'd0))) */ begin
		main_preheader_main_result22_r0 = main_preheader_main_result2_r0;
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderpreheader_183) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result22_r1 = main_adpcm_mainexit_main_result0_reg_r1;
	end
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheader_186) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg_r1 == 1'd0))) */ begin
		main_preheader_main_result22_r1 = main_preheader_main_result2_r1;
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderpreheader_183) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result22_r2 = main_adpcm_mainexit_main_result0_reg_r2;
	end
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheader_186) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg_r2 == 1'd0))) */ begin
		main_preheader_main_result22_r2 = main_preheader_main_result2_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheader_main_result22_reg_r0 <= 0;
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderpreheader_183) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result22_reg_r0 <= main_preheader_main_result22_r0;
		if (start == 1'b0 && ^(main_preheader_main_result22_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result22_reg_r0"); $finish; end
	end
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheader_186) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg_r0 == 1'd0))) begin
		main_preheader_main_result22_reg_r0 <= main_preheader_main_result22_r0;
		if (start == 1'b0 && ^(main_preheader_main_result22_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result22_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheader_main_result22_reg_r1 <= 0;
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderpreheader_183) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result22_reg_r1 <= main_preheader_main_result22_r1;
		if (start == 1'b0 && ^(main_preheader_main_result22_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result22_reg_r1"); $finish; end
	end
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheader_186) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg_r1 == 1'd0))) begin
		main_preheader_main_result22_reg_r1 <= main_preheader_main_result22_r1;
		if (start == 1'b0 && ^(main_preheader_main_result22_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result22_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheader_main_result22_reg_r2 <= 0;
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderpreheader_183) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result22_reg_r2 <= main_preheader_main_result22_r2;
		if (start == 1'b0 && ^(main_preheader_main_result22_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result22_reg_r2"); $finish; end
	end
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheader_186) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg_r2 == 1'd0))) begin
		main_preheader_main_result22_reg_r2 <= main_preheader_main_result22_r2;
		if (start == 1'b0 && ^(main_preheader_main_result22_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result22_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %464, %.preheader ], [ 0, %.preheader.preheader ]*/
	if (((cur_state_v0 == LEGUP_F_main_BB_preheaderpreheader_183) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_i11_r0 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %464, %.preheader ], [ 0, %.preheader.preheader ]*/
	else /* if ((((cur_state_v0 == LEGUP_F_main_BB_preheader_186) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg_r0 == 1'd0))) */ begin
		main_preheader_i11_r0 = main_preheader_464_reg_r0;
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %464, %.preheader ], [ 0, %.preheader.preheader ]*/
	if (((cur_state_v1 == LEGUP_F_main_BB_preheaderpreheader_183) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_i11_r1 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %464, %.preheader ], [ 0, %.preheader.preheader ]*/
	else /* if ((((cur_state_v1 == LEGUP_F_main_BB_preheader_186) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg_r1 == 1'd0))) */ begin
		main_preheader_i11_r1 = main_preheader_464_reg_r1;
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %464, %.preheader ], [ 0, %.preheader.preheader ]*/
	if (((cur_state_v2 == LEGUP_F_main_BB_preheaderpreheader_183) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_i11_r2 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %464, %.preheader ], [ 0, %.preheader.preheader ]*/
	else /* if ((((cur_state_v2 == LEGUP_F_main_BB_preheader_186) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg_r2 == 1'd0))) */ begin
		main_preheader_i11_r2 = main_preheader_464_reg_r2;
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheader_i11_reg_r0 <= 0;
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %464, %.preheader ], [ 0, %.preheader.preheader ]*/
	else if(((cur_state_v0 == LEGUP_F_main_BB_preheaderpreheader_183) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_i11_reg_r0 <= main_preheader_i11_r0;
		if (start == 1'b0 && ^(main_preheader_i11_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i11_reg_r0"); $finish; end
	end
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %464, %.preheader ], [ 0, %.preheader.preheader ]*/
	else if((((cur_state_v0 == LEGUP_F_main_BB_preheader_186) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg_r0 == 1'd0))) begin
		main_preheader_i11_reg_r0 <= main_preheader_i11_r0;
		if (start == 1'b0 && ^(main_preheader_i11_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i11_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheader_i11_reg_r1 <= 0;
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %464, %.preheader ], [ 0, %.preheader.preheader ]*/
	else if(((cur_state_v1 == LEGUP_F_main_BB_preheaderpreheader_183) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_i11_reg_r1 <= main_preheader_i11_r1;
		if (start == 1'b0 && ^(main_preheader_i11_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i11_reg_r1"); $finish; end
	end
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %464, %.preheader ], [ 0, %.preheader.preheader ]*/
	else if((((cur_state_v1 == LEGUP_F_main_BB_preheader_186) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg_r1 == 1'd0))) begin
		main_preheader_i11_reg_r1 <= main_preheader_i11_r1;
		if (start == 1'b0 && ^(main_preheader_i11_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i11_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheader_i11_reg_r2 <= 0;
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %464, %.preheader ], [ 0, %.preheader.preheader ]*/
	else if(((cur_state_v2 == LEGUP_F_main_BB_preheaderpreheader_183) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_i11_reg_r2 <= main_preheader_i11_r2;
		if (start == 1'b0 && ^(main_preheader_i11_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i11_reg_r2"); $finish; end
	end
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %464, %.preheader ], [ 0, %.preheader.preheader ]*/
	else if((((cur_state_v2 == LEGUP_F_main_BB_preheader_186) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg_r2 == 1'd0))) begin
		main_preheader_i11_reg_r2 <= main_preheader_i11_r2;
		if (start == 1'b0 && ^(main_preheader_i11_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i11_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep = getelementptr [100 x i32]* @test_result, i32 0, i32 %i.11*/
		main_preheader_scevgep_r0 = (`TAG_g_test_result_a + (4 * main_preheader_i11_reg_r0));
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep = getelementptr [100 x i32]* @test_result, i32 0, i32 %i.11*/
		main_preheader_scevgep_r1 = (`TAG_g_test_result_a + (4 * main_preheader_i11_reg_r1));
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep = getelementptr [100 x i32]* @test_result, i32 0, i32 %i.11*/
		main_preheader_scevgep_r2 = (`TAG_g_test_result_a + (4 * main_preheader_i11_reg_r2));
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep2 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11*/
		main_preheader_scevgep2_r0 = (`TAG_g_result_a + (4 * main_preheader_i11_reg_r0));
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep2 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11*/
		main_preheader_scevgep2_r1 = (`TAG_g_result_a + (4 * main_preheader_i11_reg_r1));
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep2 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11*/
		main_preheader_scevgep2_r2 = (`TAG_g_result_a + (4 * main_preheader_i11_reg_r2));
end
always @(*) begin
	/* main: %.preheader*/
	/*   %460 = load i32* %scevgep2, align 4, !tbaa !1*/
		main_preheader_460_r0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader*/
	/*   %460 = load i32* %scevgep2, align 4, !tbaa !1*/
		main_preheader_460_r1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader*/
	/*   %460 = load i32* %scevgep2, align 4, !tbaa !1*/
		main_preheader_460_r2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader*/
	/*   %461 = load i32* %scevgep, align 4, !tbaa !1*/
		main_preheader_461_r0 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader*/
	/*   %461 = load i32* %scevgep, align 4, !tbaa !1*/
		main_preheader_461_r1 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader*/
	/*   %461 = load i32* %scevgep, align 4, !tbaa !1*/
		main_preheader_461_r2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %.preheader*/
	/*   %462 = icmp eq i32 %460, %461*/
		main_preheader_462_r0 = (main_preheader_460_r0 == main_preheader_461_r0);
end
always @(*) begin
	/* main: %.preheader*/
	/*   %462 = icmp eq i32 %460, %461*/
		main_preheader_462_r1 = (main_preheader_460_r1 == main_preheader_461_r1);
end
always @(*) begin
	/* main: %.preheader*/
	/*   %462 = icmp eq i32 %460, %461*/
		main_preheader_462_r2 = (main_preheader_460_r2 == main_preheader_461_r2);
end
always @(*) begin
	/* main: %.preheader*/
	/*   %463 = zext i1 %462 to i32*/
		main_preheader_463_r0 = main_preheader_462_r0;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %463 = zext i1 %462 to i32*/
		main_preheader_463_r1 = main_preheader_462_r1;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %463 = zext i1 %462 to i32*/
		main_preheader_463_r2 = main_preheader_462_r2;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
		main_preheader_main_result2_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
		main_preheader_main_result2_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
		main_preheader_main_result2_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader*/
/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
	main_preheader_main_result2_reg_r0 = main_legup_memset_4_i64exit_59_reg_r0;
end
always @(*) begin
/* main: %.preheader*/
/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
	main_preheader_main_result2_reg_r1 = main_legup_memset_4_i64exit_59_reg_r1;
end
always @(*) begin
/* main: %.preheader*/
/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
	main_preheader_main_result2_reg_r2 = main_legup_memset_4_i64exit_59_reg_r2;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %464 = add nsw i32 %i.11, 1*/
		main_preheader_464_r0 = main_signed_add_32_1_r0;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %464 = add nsw i32 %i.11, 1*/
		main_preheader_464_r1 = main_signed_add_32_1_r1;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %464 = add nsw i32 %i.11, 1*/
		main_preheader_464_r2 = main_signed_add_32_1_r2;
end
always @(*) begin
/* main: %.preheader*/
/*   %464 = add nsw i32 %i.11, 1*/
	main_preheader_464_reg_r0 = main_quantlexiti_137_reg_r0;
end
always @(*) begin
/* main: %.preheader*/
/*   %464 = add nsw i32 %i.11, 1*/
	main_preheader_464_reg_r1 = main_quantlexiti_137_reg_r1;
end
always @(*) begin
/* main: %.preheader*/
/*   %464 = add nsw i32 %i.11, 1*/
	main_preheader_464_reg_r2 = main_quantlexiti_137_reg_r2;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %exitcond1 = icmp eq i32 %464, 100*/
		main_preheader_exitcond1_r0 = (main_preheader_464_r0 == 32'd100);
end
always @(*) begin
	/* main: %.preheader*/
	/*   %exitcond1 = icmp eq i32 %464, 100*/
		main_preheader_exitcond1_r1 = (main_preheader_464_r1 == 32'd100);
end
always @(*) begin
	/* main: %.preheader*/
	/*   %exitcond1 = icmp eq i32 %464, 100*/
		main_preheader_exitcond1_r2 = (main_preheader_464_r2 == 32'd100);
end
always @(posedge clk) begin
	if (reset)
		main_preheader_exitcond1_reg_r0 <= 0;
	/* main: %.preheader*/
	/*   %exitcond1 = icmp eq i32 %464, 100*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheader_184)) begin
		main_preheader_exitcond1_reg_r0 <= main_preheader_exitcond1_r0;
		if (start == 1'b0 && ^(main_preheader_exitcond1_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_exitcond1_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheader_exitcond1_reg_r1 <= 0;
	/* main: %.preheader*/
	/*   %exitcond1 = icmp eq i32 %464, 100*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheader_184)) begin
		main_preheader_exitcond1_reg_r1 <= main_preheader_exitcond1_r1;
		if (start == 1'b0 && ^(main_preheader_exitcond1_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_exitcond1_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		main_preheader_exitcond1_reg_r2 <= 0;
	/* main: %.preheader*/
	/*   %exitcond1 = icmp eq i32 %464, 100*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheader_184)) begin
		main_preheader_exitcond1_reg_r2 <= main_preheader_exitcond1_r2;
		if (start == 1'b0 && ^(main_preheader_exitcond1_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_exitcond1_reg_r2"); $finish; end
	end
end
always @(*) begin
	/* main: %465*/
	/*   %467 = icmp eq i32 %.main_result.2, 150*/
		main_465_467_r0 = (main_preheader_main_result2_reg_r0 == 32'd150);
end
always @(*) begin
	/* main: %465*/
	/*   %467 = icmp eq i32 %.main_result.2, 150*/
		main_465_467_r1 = (main_preheader_main_result2_reg_r1 == 32'd150);
end
always @(*) begin
	/* main: %465*/
	/*   %467 = icmp eq i32 %.main_result.2, 150*/
		main_465_467_r2 = (main_preheader_main_result2_reg_r2 == 32'd150);
end
always @(posedge clk) begin
	if (reset)
		upzero_start_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_63)) begin
		upzero_start_r0 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r0"); $finish; end
	end
	else if((cur_state_v0 == LEGUP_function_call_64)) begin
		upzero_start_r0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_82)) begin
		upzero_start_r0 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r0"); $finish; end
	end
	else if((cur_state_v0 == LEGUP_function_call_83)) begin
		upzero_start_r0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_147)) begin
		upzero_start_r0 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r0"); $finish; end
	end
	else if((cur_state_v0 == LEGUP_function_call_148)) begin
		upzero_start_r0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_163)) begin
		upzero_start_r0 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r0"); $finish; end
	end
	else if((cur_state_v0 == LEGUP_function_call_164)) begin
		upzero_start_r0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_start_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_63)) begin
		upzero_start_r1 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r1"); $finish; end
	end
	else if((cur_state_v1 == LEGUP_function_call_64)) begin
		upzero_start_r1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_82)) begin
		upzero_start_r1 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r1"); $finish; end
	end
	else if((cur_state_v1 == LEGUP_function_call_83)) begin
		upzero_start_r1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_147)) begin
		upzero_start_r1 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r1"); $finish; end
	end
	else if((cur_state_v1 == LEGUP_function_call_148)) begin
		upzero_start_r1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_163)) begin
		upzero_start_r1 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r1"); $finish; end
	end
	else if((cur_state_v1 == LEGUP_function_call_164)) begin
		upzero_start_r1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_start_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_63)) begin
		upzero_start_r2 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r2"); $finish; end
	end
	else if((cur_state_v2 == LEGUP_function_call_64)) begin
		upzero_start_r2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_82)) begin
		upzero_start_r2 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r2"); $finish; end
	end
	else if((cur_state_v2 == LEGUP_function_call_83)) begin
		upzero_start_r2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_147)) begin
		upzero_start_r2 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r2"); $finish; end
	end
	else if((cur_state_v2 == LEGUP_function_call_148)) begin
		upzero_start_r2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_163)) begin
		upzero_start_r2 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r2"); $finish; end
	end
	else if((cur_state_v2 == LEGUP_function_call_164)) begin
		upzero_start_r2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start_r2"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_arg_dlt_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_63)) begin
		upzero_arg_dlt_r0 <= main_quantlexiti_127_reg_r0;
		if (start == 1'b0 && ^(main_quantlexiti_127_reg_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_82)) begin
		upzero_arg_dlt_r0 <= main_quantlexiti_199_reg_r0;
		if (start == 1'b0 && ^(main_quantlexiti_199_reg_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_147)) begin
		upzero_arg_dlt_r0 <= main_preheaderi_289_reg_r0;
		if (start == 1'b0 && ^(main_preheaderi_289_reg_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_163)) begin
		upzero_arg_dlt_r0 <= main_preheaderi_364_reg_r0;
		if (start == 1'b0 && ^(main_preheaderi_364_reg_r0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_arg_dlt_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_63)) begin
		upzero_arg_dlt_r1 <= main_quantlexiti_127_reg_r1;
		if (start == 1'b0 && ^(main_quantlexiti_127_reg_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_82)) begin
		upzero_arg_dlt_r1 <= main_quantlexiti_199_reg_r1;
		if (start == 1'b0 && ^(main_quantlexiti_199_reg_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_147)) begin
		upzero_arg_dlt_r1 <= main_preheaderi_289_reg_r1;
		if (start == 1'b0 && ^(main_preheaderi_289_reg_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_163)) begin
		upzero_arg_dlt_r1 <= main_preheaderi_364_reg_r1;
		if (start == 1'b0 && ^(main_preheaderi_364_reg_r1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_arg_dlt_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_63)) begin
		upzero_arg_dlt_r2 <= main_quantlexiti_127_reg_r2;
		if (start == 1'b0 && ^(main_quantlexiti_127_reg_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_82)) begin
		upzero_arg_dlt_r2 <= main_quantlexiti_199_reg_r2;
		if (start == 1'b0 && ^(main_quantlexiti_199_reg_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_147)) begin
		upzero_arg_dlt_r2 <= main_preheaderi_289_reg_r2;
		if (start == 1'b0 && ^(main_preheaderi_289_reg_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_163)) begin
		upzero_arg_dlt_r2 <= main_preheaderi_364_reg_r2;
		if (start == 1'b0 && ^(main_preheaderi_364_reg_r2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt_r2"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_arg_dlti_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_63)) begin
		upzero_arg_dlti_r0 <= `TAG_g_delay_dltx_a;
		if (start == 1'b0 && ^(`TAG_g_delay_dltx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_82)) begin
		upzero_arg_dlti_r0 <= `TAG_g_delay_dhx_a;
		if (start == 1'b0 && ^(`TAG_g_delay_dhx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_147)) begin
		upzero_arg_dlti_r0 <= `TAG_g_dec_del_dltx_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_dltx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_163)) begin
		upzero_arg_dlti_r0 <= `TAG_g_dec_del_dhx_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_dhx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_arg_dlti_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_63)) begin
		upzero_arg_dlti_r1 <= `TAG_g_delay_dltx_a;
		if (start == 1'b0 && ^(`TAG_g_delay_dltx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_82)) begin
		upzero_arg_dlti_r1 <= `TAG_g_delay_dhx_a;
		if (start == 1'b0 && ^(`TAG_g_delay_dhx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_147)) begin
		upzero_arg_dlti_r1 <= `TAG_g_dec_del_dltx_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_dltx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_163)) begin
		upzero_arg_dlti_r1 <= `TAG_g_dec_del_dhx_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_dhx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_arg_dlti_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_63)) begin
		upzero_arg_dlti_r2 <= `TAG_g_delay_dltx_a;
		if (start == 1'b0 && ^(`TAG_g_delay_dltx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_82)) begin
		upzero_arg_dlti_r2 <= `TAG_g_delay_dhx_a;
		if (start == 1'b0 && ^(`TAG_g_delay_dhx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_147)) begin
		upzero_arg_dlti_r2 <= `TAG_g_dec_del_dltx_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_dltx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_163)) begin
		upzero_arg_dlti_r2 <= `TAG_g_dec_del_dhx_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_dhx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti_r2"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_arg_bli_r0 <= 0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_63)) begin
		upzero_arg_bli_r0 <= `TAG_g_delay_bpl_a;
		if (start == 1'b0 && ^(`TAG_g_delay_bpl_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli_r0"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_82)) begin
		upzero_arg_bli_r0 <= `TAG_g_delay_bph_a;
		if (start == 1'b0 && ^(`TAG_g_delay_bph_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_147)) begin
		upzero_arg_bli_r0 <= `TAG_g_dec_del_bpl_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_bpl_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli_r0"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v0 == LEGUP_F_main_BB_preheaderi_163)) begin
		upzero_arg_bli_r0 <= `TAG_g_dec_del_bph_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_bph_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_arg_bli_r1 <= 0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_63)) begin
		upzero_arg_bli_r1 <= `TAG_g_delay_bpl_a;
		if (start == 1'b0 && ^(`TAG_g_delay_bpl_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli_r1"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_82)) begin
		upzero_arg_bli_r1 <= `TAG_g_delay_bph_a;
		if (start == 1'b0 && ^(`TAG_g_delay_bph_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_147)) begin
		upzero_arg_bli_r1 <= `TAG_g_dec_del_bpl_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_bpl_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli_r1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v1 == LEGUP_F_main_BB_preheaderi_163)) begin
		upzero_arg_bli_r1 <= `TAG_g_dec_del_bph_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_bph_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_arg_bli_r2 <= 0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_63)) begin
		upzero_arg_bli_r2 <= `TAG_g_delay_bpl_a;
		if (start == 1'b0 && ^(`TAG_g_delay_bpl_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli_r2"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_82)) begin
		upzero_arg_bli_r2 <= `TAG_g_delay_bph_a;
		if (start == 1'b0 && ^(`TAG_g_delay_bph_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_147)) begin
		upzero_arg_bli_r2 <= `TAG_g_dec_del_bpl_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_bpl_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli_r2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	else if((cur_state_v2 == LEGUP_F_main_BB_preheaderi_163)) begin
		upzero_arg_bli_r2 <= `TAG_g_dec_del_bph_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_bph_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli_r2"); $finish; end
	end
end
always @(*) begin
	upzero_finish_final_r0 = upzero_finish_reg_r0;
end
always @(*) begin
	upzero_finish_final_r1 = upzero_finish_reg_r1;
end
always @(*) begin
	upzero_finish_final_r2 = upzero_finish_reg_r2;
end
always @(posedge clk) begin
	if (reset)
		upzero_finish_reg_r0 <= 0;
	else if((reset | (cur_state_v0 == LEGUP_F_main_BB_quantlexiti_63))) begin
		upzero_finish_reg_r0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r0"); $finish; end
	end
	else if(upzero_finish_r0) begin
		upzero_finish_reg_r0 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r0"); $finish; end
	end
	else if((reset | (cur_state_v0 == LEGUP_F_main_BB_quantlexiti_82))) begin
		upzero_finish_reg_r0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r0"); $finish; end
	end
	else if(upzero_finish_r0) begin
		upzero_finish_reg_r0 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r0"); $finish; end
	end
	else if((reset | (cur_state_v0 == LEGUP_F_main_BB_preheaderi_147))) begin
		upzero_finish_reg_r0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r0"); $finish; end
	end
	else if(upzero_finish_r0) begin
		upzero_finish_reg_r0 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r0"); $finish; end
	end
	else if((reset | (cur_state_v0 == LEGUP_F_main_BB_preheaderi_163))) begin
		upzero_finish_reg_r0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r0"); $finish; end
	end
	else if(upzero_finish_r0) begin
		upzero_finish_reg_r0 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_finish_reg_r1 <= 0;
	else if((reset | (cur_state_v1 == LEGUP_F_main_BB_quantlexiti_63))) begin
		upzero_finish_reg_r1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r1"); $finish; end
	end
	else if(upzero_finish_r1) begin
		upzero_finish_reg_r1 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r1"); $finish; end
	end
	else if((reset | (cur_state_v1 == LEGUP_F_main_BB_quantlexiti_82))) begin
		upzero_finish_reg_r1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r1"); $finish; end
	end
	else if(upzero_finish_r1) begin
		upzero_finish_reg_r1 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r1"); $finish; end
	end
	else if((reset | (cur_state_v1 == LEGUP_F_main_BB_preheaderi_147))) begin
		upzero_finish_reg_r1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r1"); $finish; end
	end
	else if(upzero_finish_r1) begin
		upzero_finish_reg_r1 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r1"); $finish; end
	end
	else if((reset | (cur_state_v1 == LEGUP_F_main_BB_preheaderi_163))) begin
		upzero_finish_reg_r1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r1"); $finish; end
	end
	else if(upzero_finish_r1) begin
		upzero_finish_reg_r1 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r1"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset)
		upzero_finish_reg_r2 <= 0;
	else if((reset | (cur_state_v2 == LEGUP_F_main_BB_quantlexiti_63))) begin
		upzero_finish_reg_r2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r2"); $finish; end
	end
	else if(upzero_finish_r2) begin
		upzero_finish_reg_r2 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r2"); $finish; end
	end
	else if((reset | (cur_state_v2 == LEGUP_F_main_BB_quantlexiti_82))) begin
		upzero_finish_reg_r2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r2"); $finish; end
	end
	else if(upzero_finish_r2) begin
		upzero_finish_reg_r2 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r2"); $finish; end
	end
	else if((reset | (cur_state_v2 == LEGUP_F_main_BB_preheaderi_147))) begin
		upzero_finish_reg_r2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r2"); $finish; end
	end
	else if(upzero_finish_r2) begin
		upzero_finish_reg_r2 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r2"); $finish; end
	end
	else if((reset | (cur_state_v2 == LEGUP_F_main_BB_preheaderi_163))) begin
		upzero_finish_reg_r2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r2"); $finish; end
	end
	else if(upzero_finish_r2) begin
		upzero_finish_reg_r2 <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg_r2"); $finish; end
	end
end
always @(*) begin
	legup_function_call_r0 = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state_v0 == LEGUP_function_call_64)) begin
		legup_function_call_r0 = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state_v0 == LEGUP_function_call_83)) begin
		legup_function_call_r0 = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state_v0 == LEGUP_function_call_148)) begin
		legup_function_call_r0 = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state_v0 == LEGUP_function_call_164)) begin
		legup_function_call_r0 = 1'd1;
	end
end
always @(*) begin
	legup_function_call_r1 = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state_v1 == LEGUP_function_call_64)) begin
		legup_function_call_r1 = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state_v1 == LEGUP_function_call_83)) begin
		legup_function_call_r1 = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state_v1 == LEGUP_function_call_148)) begin
		legup_function_call_r1 = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state_v1 == LEGUP_function_call_164)) begin
		legup_function_call_r1 = 1'd1;
	end
end
always @(*) begin
	legup_function_call_r2 = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state_v2 == LEGUP_function_call_64)) begin
		legup_function_call_r2 = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state_v2 == LEGUP_function_call_83)) begin
		legup_function_call_r2 = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state_v2 == LEGUP_function_call_148)) begin
		legup_function_call_r2 = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state_v2 == LEGUP_function_call_164)) begin
		legup_function_call_r2 = 1'd1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = add nsw i32 %36, %34*/
	if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_36_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = add nsw i32 %40, %37*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_40_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = add nsw i32 %44, %41*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_44_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = add nsw i32 %48, %45*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_48_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = add nsw i32 %52, %49*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_52_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = add nsw i32 %56, %53*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_56_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = add nsw i32 %60, %57*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_60_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = add nsw i32 %64, %61*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_64_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = add nsw i32 %68, %65*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_68_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = add nsw i32 %87, %84*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_87_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = add nsw i32 %72, %69*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_72_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = add nsw i32 %74, %71*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_74_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %77 = add nsw i32 %6, %75*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_6_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = add nsw i32 %96, %99*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_96_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp.i.i1 = add i32 %107, %106*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_107_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = add i32 %i.02.i, 2*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_i02i_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %130 = add nsw i32 %nbl.0, %129*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_nbl0_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %170 = add nsw i32 %166, %169*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_signed_add_32_0_op0_r0 = main_quantlexiti_166_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %178 = add nsw i32 %174, %177*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_signed_add_32_0_op0_r0 = main_quantlexiti_174_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %182 = add nsw i32 %178, %181*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_signed_add_32_0_op0_r0 = main_quantlexiti_178_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %. = add nsw i32 %190, %..v*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_signed_add_32_0_op0_r0 = main_quantlexiti_190_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %202 = add nsw i32 %nbh.0, %201*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_signed_add_32_0_op0_r0 = main_legup_memset_4_i64exit_nbh0_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %149 = add nsw i32 %wd4.0.i9.i6, %146*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_signed_add_32_0_op0_r0 = main_quantlexiti_wd40i9i6_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %156 = add nsw i32 %153, 192*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_signed_add_32_0_op0_r0 = main_quantlexiti_153_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i5.i9 = add nsw i32 %156, %155*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_signed_add_32_0_op0_r0 = main_quantlexiti_156_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i20 = add nsw i32 %228, %227*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_signed_add_32_0_op0_r0 = main_quantlexiti_228_reg_r0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %237 = add nsw i32 %199, %187*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_signed_add_32_0_op0_r0 = main_quantlexiti_199_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %266 = add nsw i32 %262, %265*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_111)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_262_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %338, %335*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_152)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_338_r0;
	end
	/* main: %.preheader.i*/
	/*   %270 = add nsw i32 %266, %269*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_266_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %343 = add nsw i32 %339, %342*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_339_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_274_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %tmp.i.i = add i32 %281, %280*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_281_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %292 = add nsw i32 %291, %283*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_291_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %tmp.i3.i = add i32 %358, %357*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_358_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %369 = add nsw i32 %366, %368*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_366_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %308 = add nsw i32 %279, %289*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_279_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %406 = add nsw i32 %404, %292*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_404_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %412 = add nsw i32 %411, %408*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_411_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_313_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %320 = add nsw i32 %wd4.0.i9.i, %317*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_wd40i9i_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %392 = add nsw i32 %wd4.0.i.i, %389*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_wd40ii_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %419, %416*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_419_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %424 = add nsw i32 %423, %420*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_423_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %428 = add nsw i32 %427, %424*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_427_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %432 = add nsw i32 %431, %428*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_431_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %436 = add nsw i32 %435, %432*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_435_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %327 = add nsw i32 %324, 192*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_324_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i5.i = add nsw i32 %327, %326*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_327_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %399, %398*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_399_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %444 = add nsw i32 %443, %440*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_443_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %448 = add nsw i32 %447, %444*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_447_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %332 = add nsw i32 %289, %283*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_signed_add_32_0_op0_r0 = main_preheaderi_289_reg_r0;
	end
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %458, %main_result.04*/
	else /* if ((cur_state_v0 == LEGUP_F_main_BB_adpcm_mainexit_182)) */ begin
		main_signed_add_32_0_op0_r0 = main_adpcm_mainexit_458_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = add nsw i32 %36, %34*/
	if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_36_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = add nsw i32 %40, %37*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_40_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = add nsw i32 %44, %41*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_44_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = add nsw i32 %48, %45*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_48_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = add nsw i32 %52, %49*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_52_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = add nsw i32 %56, %53*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_56_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = add nsw i32 %60, %57*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_60_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = add nsw i32 %64, %61*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_64_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = add nsw i32 %68, %65*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_68_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = add nsw i32 %87, %84*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_87_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = add nsw i32 %72, %69*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_72_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = add nsw i32 %74, %71*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_74_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %77 = add nsw i32 %6, %75*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_6_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = add nsw i32 %96, %99*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_96_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp.i.i1 = add i32 %107, %106*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_107_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = add i32 %i.02.i, 2*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_i02i_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %130 = add nsw i32 %nbl.0, %129*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_nbl0_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %170 = add nsw i32 %166, %169*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_signed_add_32_0_op0_r1 = main_quantlexiti_166_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %178 = add nsw i32 %174, %177*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_signed_add_32_0_op0_r1 = main_quantlexiti_174_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %182 = add nsw i32 %178, %181*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_signed_add_32_0_op0_r1 = main_quantlexiti_178_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %. = add nsw i32 %190, %..v*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_signed_add_32_0_op0_r1 = main_quantlexiti_190_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %202 = add nsw i32 %nbh.0, %201*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_signed_add_32_0_op0_r1 = main_legup_memset_4_i64exit_nbh0_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %149 = add nsw i32 %wd4.0.i9.i6, %146*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_signed_add_32_0_op0_r1 = main_quantlexiti_wd40i9i6_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %156 = add nsw i32 %153, 192*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_signed_add_32_0_op0_r1 = main_quantlexiti_153_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i5.i9 = add nsw i32 %156, %155*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_signed_add_32_0_op0_r1 = main_quantlexiti_156_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i20 = add nsw i32 %228, %227*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_signed_add_32_0_op0_r1 = main_quantlexiti_228_reg_r1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %237 = add nsw i32 %199, %187*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_signed_add_32_0_op0_r1 = main_quantlexiti_199_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %266 = add nsw i32 %262, %265*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_111)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_262_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %338, %335*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_152)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_338_r1;
	end
	/* main: %.preheader.i*/
	/*   %270 = add nsw i32 %266, %269*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_266_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %343 = add nsw i32 %339, %342*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_339_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_274_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %tmp.i.i = add i32 %281, %280*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_281_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %292 = add nsw i32 %291, %283*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_291_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %tmp.i3.i = add i32 %358, %357*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_358_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %369 = add nsw i32 %366, %368*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_366_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %308 = add nsw i32 %279, %289*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_279_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %406 = add nsw i32 %404, %292*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_404_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %412 = add nsw i32 %411, %408*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_411_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_313_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %320 = add nsw i32 %wd4.0.i9.i, %317*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_wd40i9i_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %392 = add nsw i32 %wd4.0.i.i, %389*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_wd40ii_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %419, %416*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_419_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %424 = add nsw i32 %423, %420*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_423_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %428 = add nsw i32 %427, %424*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_427_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %432 = add nsw i32 %431, %428*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_431_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %436 = add nsw i32 %435, %432*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_435_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %327 = add nsw i32 %324, 192*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_324_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i5.i = add nsw i32 %327, %326*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_327_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %399, %398*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_399_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %444 = add nsw i32 %443, %440*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_443_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %448 = add nsw i32 %447, %444*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_447_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %332 = add nsw i32 %289, %283*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_signed_add_32_0_op0_r1 = main_preheaderi_289_reg_r1;
	end
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %458, %main_result.04*/
	else /* if ((cur_state_v1 == LEGUP_F_main_BB_adpcm_mainexit_182)) */ begin
		main_signed_add_32_0_op0_r1 = main_adpcm_mainexit_458_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = add nsw i32 %36, %34*/
	if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_36_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = add nsw i32 %40, %37*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_40_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = add nsw i32 %44, %41*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_44_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = add nsw i32 %48, %45*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_48_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = add nsw i32 %52, %49*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_52_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = add nsw i32 %56, %53*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_56_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = add nsw i32 %60, %57*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_60_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = add nsw i32 %64, %61*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_64_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = add nsw i32 %68, %65*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_68_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = add nsw i32 %87, %84*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_87_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = add nsw i32 %72, %69*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_72_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = add nsw i32 %74, %71*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_74_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %77 = add nsw i32 %6, %75*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_6_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = add nsw i32 %96, %99*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_96_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp.i.i1 = add i32 %107, %106*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_107_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = add i32 %i.02.i, 2*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_i02i_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %130 = add nsw i32 %nbl.0, %129*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_nbl0_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %170 = add nsw i32 %166, %169*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_signed_add_32_0_op0_r2 = main_quantlexiti_166_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %178 = add nsw i32 %174, %177*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_signed_add_32_0_op0_r2 = main_quantlexiti_174_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %182 = add nsw i32 %178, %181*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_signed_add_32_0_op0_r2 = main_quantlexiti_178_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %. = add nsw i32 %190, %..v*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_signed_add_32_0_op0_r2 = main_quantlexiti_190_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %202 = add nsw i32 %nbh.0, %201*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_signed_add_32_0_op0_r2 = main_legup_memset_4_i64exit_nbh0_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %149 = add nsw i32 %wd4.0.i9.i6, %146*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_signed_add_32_0_op0_r2 = main_quantlexiti_wd40i9i6_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %156 = add nsw i32 %153, 192*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_signed_add_32_0_op0_r2 = main_quantlexiti_153_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i5.i9 = add nsw i32 %156, %155*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_signed_add_32_0_op0_r2 = main_quantlexiti_156_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i20 = add nsw i32 %228, %227*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_signed_add_32_0_op0_r2 = main_quantlexiti_228_reg_r2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %237 = add nsw i32 %199, %187*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_signed_add_32_0_op0_r2 = main_quantlexiti_199_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %266 = add nsw i32 %262, %265*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_111)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_262_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %338, %335*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_152)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_338_r2;
	end
	/* main: %.preheader.i*/
	/*   %270 = add nsw i32 %266, %269*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_266_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %343 = add nsw i32 %339, %342*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_339_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_274_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %tmp.i.i = add i32 %281, %280*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_281_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %292 = add nsw i32 %291, %283*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_291_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %tmp.i3.i = add i32 %358, %357*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_358_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %369 = add nsw i32 %366, %368*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_366_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %308 = add nsw i32 %279, %289*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_279_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %406 = add nsw i32 %404, %292*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_404_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %412 = add nsw i32 %411, %408*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_411_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_313_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %320 = add nsw i32 %wd4.0.i9.i, %317*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_wd40i9i_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %392 = add nsw i32 %wd4.0.i.i, %389*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_wd40ii_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %419, %416*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_419_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %424 = add nsw i32 %423, %420*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_423_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %428 = add nsw i32 %427, %424*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_427_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %432 = add nsw i32 %431, %428*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_431_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %436 = add nsw i32 %435, %432*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_435_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %327 = add nsw i32 %324, 192*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_324_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i5.i = add nsw i32 %327, %326*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_327_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %399, %398*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_399_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %444 = add nsw i32 %443, %440*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_443_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %448 = add nsw i32 %447, %444*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_447_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %332 = add nsw i32 %289, %283*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_signed_add_32_0_op0_r2 = main_preheaderi_289_reg_r2;
	end
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %458, %main_result.04*/
	else /* if ((cur_state_v2 == LEGUP_F_main_BB_adpcm_mainexit_182)) */ begin
		main_signed_add_32_0_op0_r2 = main_adpcm_mainexit_458_r2;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = add nsw i32 %36, %34*/
	if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_signed_add_32_0_op1_r0 = main_legup_memset_4_i64exit_34_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = add nsw i32 %40, %37*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_signed_add_32_0_op1_r0 = main_legup_memset_4_i64exit_37_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = add nsw i32 %44, %41*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_signed_add_32_0_op1_r0 = main_legup_memset_4_i64exit_41_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = add nsw i32 %48, %45*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_signed_add_32_0_op1_r0 = main_legup_memset_4_i64exit_45_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = add nsw i32 %52, %49*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_signed_add_32_0_op1_r0 = main_legup_memset_4_i64exit_49_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = add nsw i32 %56, %53*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_signed_add_32_0_op1_r0 = main_legup_memset_4_i64exit_53_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = add nsw i32 %60, %57*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_signed_add_32_0_op1_r0 = main_legup_memset_4_i64exit_57_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = add nsw i32 %64, %61*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_signed_add_32_0_op1_r0 = main_legup_memset_4_i64exit_61_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = add nsw i32 %68, %65*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_signed_add_32_0_op1_r0 = main_legup_memset_4_i64exit_65_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = add nsw i32 %87, %84*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_signed_add_32_0_op1_r0 = main_legup_memset_4_i64exit_84_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = add nsw i32 %72, %69*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_signed_add_32_0_op1_r0 = main_legup_memset_4_i64exit_69_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = add nsw i32 %74, %71*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_signed_add_32_0_op1_r0 = main_legup_memset_4_i64exit_71_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %77 = add nsw i32 %6, %75*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_signed_add_32_0_op1_r0 = main_legup_memset_4_i64exit_75_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = add nsw i32 %96, %99*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_signed_add_32_0_op1_r0 = main_legup_memset_4_i64exit_99_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp.i.i1 = add i32 %107, %106*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_signed_add_32_0_op1_r0 = main_legup_memset_4_i64exit_106_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = add i32 %i.02.i, 2*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		main_signed_add_32_0_op1_r0 = 32'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %130 = add nsw i32 %nbl.0, %129*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_signed_add_32_0_op1_r0 = main_quantlexiti_129_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %170 = add nsw i32 %166, %169*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_signed_add_32_0_op1_r0 = main_quantlexiti_169_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %178 = add nsw i32 %174, %177*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_signed_add_32_0_op1_r0 = main_quantlexiti_177_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %182 = add nsw i32 %178, %181*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_signed_add_32_0_op1_r0 = main_quantlexiti_181_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %. = add nsw i32 %190, %..v*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_signed_add_32_0_op1_r0 = main_quantlexiti_v_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %202 = add nsw i32 %nbh.0, %201*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_signed_add_32_0_op1_r0 = main_quantlexiti_201_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %149 = add nsw i32 %wd4.0.i9.i6, %146*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_signed_add_32_0_op1_r0 = main_quantlexiti_146_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %156 = add nsw i32 %153, 192*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_signed_add_32_0_op1_r0 = 32'd192;
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i5.i9 = add nsw i32 %156, %155*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_signed_add_32_0_op1_r0 = main_quantlexiti_155_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i20 = add nsw i32 %228, %227*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_signed_add_32_0_op1_r0 = main_quantlexiti_227_reg_r0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %237 = add nsw i32 %199, %187*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_signed_add_32_0_op1_r0 = main_quantlexiti_187_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %266 = add nsw i32 %262, %265*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_111)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_265_r0;
	end
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %338, %335*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_152)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_335_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %270 = add nsw i32 %266, %269*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_269_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %343 = add nsw i32 %339, %342*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_342_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_277_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %tmp.i.i = add i32 %281, %280*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_280_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %292 = add nsw i32 %291, %283*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_283_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %tmp.i3.i = add i32 %358, %357*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_357_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %369 = add nsw i32 %366, %368*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_368_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %308 = add nsw i32 %279, %289*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_289_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %406 = add nsw i32 %404, %292*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_292_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %412 = add nsw i32 %411, %408*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_408_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_319_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %320 = add nsw i32 %wd4.0.i9.i, %317*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_317_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %392 = add nsw i32 %wd4.0.i.i, %389*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_389_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %419, %416*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_416_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %424 = add nsw i32 %423, %420*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_420_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %428 = add nsw i32 %427, %424*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_424_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %432 = add nsw i32 %431, %428*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_428_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %436 = add nsw i32 %435, %432*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_432_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %327 = add nsw i32 %324, 192*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_signed_add_32_0_op1_r0 = 32'd192;
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i5.i = add nsw i32 %327, %326*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_326_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %399, %398*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_398_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %444 = add nsw i32 %443, %440*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_440_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %448 = add nsw i32 %447, %444*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_444_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %332 = add nsw i32 %289, %283*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_signed_add_32_0_op1_r0 = main_preheaderi_283_reg_r0;
	end
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %458, %main_result.04*/
	else /* if ((cur_state_v0 == LEGUP_F_main_BB_adpcm_mainexit_182)) */ begin
		main_signed_add_32_0_op1_r0 = main_adpcm_mainexit_main_result04_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = add nsw i32 %36, %34*/
	if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_signed_add_32_0_op1_r1 = main_legup_memset_4_i64exit_34_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = add nsw i32 %40, %37*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_signed_add_32_0_op1_r1 = main_legup_memset_4_i64exit_37_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = add nsw i32 %44, %41*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_signed_add_32_0_op1_r1 = main_legup_memset_4_i64exit_41_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = add nsw i32 %48, %45*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_signed_add_32_0_op1_r1 = main_legup_memset_4_i64exit_45_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = add nsw i32 %52, %49*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_signed_add_32_0_op1_r1 = main_legup_memset_4_i64exit_49_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = add nsw i32 %56, %53*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_signed_add_32_0_op1_r1 = main_legup_memset_4_i64exit_53_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = add nsw i32 %60, %57*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_signed_add_32_0_op1_r1 = main_legup_memset_4_i64exit_57_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = add nsw i32 %64, %61*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_signed_add_32_0_op1_r1 = main_legup_memset_4_i64exit_61_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = add nsw i32 %68, %65*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_signed_add_32_0_op1_r1 = main_legup_memset_4_i64exit_65_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = add nsw i32 %87, %84*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_signed_add_32_0_op1_r1 = main_legup_memset_4_i64exit_84_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = add nsw i32 %72, %69*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_signed_add_32_0_op1_r1 = main_legup_memset_4_i64exit_69_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = add nsw i32 %74, %71*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_signed_add_32_0_op1_r1 = main_legup_memset_4_i64exit_71_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %77 = add nsw i32 %6, %75*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_signed_add_32_0_op1_r1 = main_legup_memset_4_i64exit_75_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = add nsw i32 %96, %99*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_signed_add_32_0_op1_r1 = main_legup_memset_4_i64exit_99_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp.i.i1 = add i32 %107, %106*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_signed_add_32_0_op1_r1 = main_legup_memset_4_i64exit_106_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = add i32 %i.02.i, 2*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		main_signed_add_32_0_op1_r1 = 32'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %130 = add nsw i32 %nbl.0, %129*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_signed_add_32_0_op1_r1 = main_quantlexiti_129_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %170 = add nsw i32 %166, %169*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_signed_add_32_0_op1_r1 = main_quantlexiti_169_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %178 = add nsw i32 %174, %177*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_signed_add_32_0_op1_r1 = main_quantlexiti_177_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %182 = add nsw i32 %178, %181*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_signed_add_32_0_op1_r1 = main_quantlexiti_181_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %. = add nsw i32 %190, %..v*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_signed_add_32_0_op1_r1 = main_quantlexiti_v_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %202 = add nsw i32 %nbh.0, %201*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_signed_add_32_0_op1_r1 = main_quantlexiti_201_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %149 = add nsw i32 %wd4.0.i9.i6, %146*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_signed_add_32_0_op1_r1 = main_quantlexiti_146_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %156 = add nsw i32 %153, 192*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_signed_add_32_0_op1_r1 = 32'd192;
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i5.i9 = add nsw i32 %156, %155*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_signed_add_32_0_op1_r1 = main_quantlexiti_155_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i20 = add nsw i32 %228, %227*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_signed_add_32_0_op1_r1 = main_quantlexiti_227_reg_r1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %237 = add nsw i32 %199, %187*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_signed_add_32_0_op1_r1 = main_quantlexiti_187_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %266 = add nsw i32 %262, %265*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_111)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_265_r1;
	end
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %338, %335*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_152)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_335_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %270 = add nsw i32 %266, %269*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_269_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %343 = add nsw i32 %339, %342*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_342_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_277_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %tmp.i.i = add i32 %281, %280*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_280_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %292 = add nsw i32 %291, %283*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_283_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %tmp.i3.i = add i32 %358, %357*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_357_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %369 = add nsw i32 %366, %368*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_368_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %308 = add nsw i32 %279, %289*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_289_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %406 = add nsw i32 %404, %292*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_292_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %412 = add nsw i32 %411, %408*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_408_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_319_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %320 = add nsw i32 %wd4.0.i9.i, %317*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_317_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %392 = add nsw i32 %wd4.0.i.i, %389*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_389_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %419, %416*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_416_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %424 = add nsw i32 %423, %420*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_420_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %428 = add nsw i32 %427, %424*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_424_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %432 = add nsw i32 %431, %428*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_428_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %436 = add nsw i32 %435, %432*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_432_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %327 = add nsw i32 %324, 192*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_signed_add_32_0_op1_r1 = 32'd192;
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i5.i = add nsw i32 %327, %326*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_326_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %399, %398*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_398_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %444 = add nsw i32 %443, %440*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_440_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %448 = add nsw i32 %447, %444*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_444_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %332 = add nsw i32 %289, %283*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_signed_add_32_0_op1_r1 = main_preheaderi_283_reg_r1;
	end
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %458, %main_result.04*/
	else /* if ((cur_state_v1 == LEGUP_F_main_BB_adpcm_mainexit_182)) */ begin
		main_signed_add_32_0_op1_r1 = main_adpcm_mainexit_main_result04_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = add nsw i32 %36, %34*/
	if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_signed_add_32_0_op1_r2 = main_legup_memset_4_i64exit_34_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = add nsw i32 %40, %37*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_signed_add_32_0_op1_r2 = main_legup_memset_4_i64exit_37_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = add nsw i32 %44, %41*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_signed_add_32_0_op1_r2 = main_legup_memset_4_i64exit_41_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = add nsw i32 %48, %45*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_signed_add_32_0_op1_r2 = main_legup_memset_4_i64exit_45_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = add nsw i32 %52, %49*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_signed_add_32_0_op1_r2 = main_legup_memset_4_i64exit_49_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = add nsw i32 %56, %53*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_signed_add_32_0_op1_r2 = main_legup_memset_4_i64exit_53_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = add nsw i32 %60, %57*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_signed_add_32_0_op1_r2 = main_legup_memset_4_i64exit_57_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = add nsw i32 %64, %61*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_signed_add_32_0_op1_r2 = main_legup_memset_4_i64exit_61_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = add nsw i32 %68, %65*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_signed_add_32_0_op1_r2 = main_legup_memset_4_i64exit_65_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = add nsw i32 %87, %84*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_signed_add_32_0_op1_r2 = main_legup_memset_4_i64exit_84_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = add nsw i32 %72, %69*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_signed_add_32_0_op1_r2 = main_legup_memset_4_i64exit_69_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = add nsw i32 %74, %71*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_signed_add_32_0_op1_r2 = main_legup_memset_4_i64exit_71_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %77 = add nsw i32 %6, %75*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_signed_add_32_0_op1_r2 = main_legup_memset_4_i64exit_75_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = add nsw i32 %96, %99*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_signed_add_32_0_op1_r2 = main_legup_memset_4_i64exit_99_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp.i.i1 = add i32 %107, %106*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_signed_add_32_0_op1_r2 = main_legup_memset_4_i64exit_106_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = add i32 %i.02.i, 2*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		main_signed_add_32_0_op1_r2 = 32'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %130 = add nsw i32 %nbl.0, %129*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_59)) begin
		main_signed_add_32_0_op1_r2 = main_quantlexiti_129_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %170 = add nsw i32 %166, %169*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_signed_add_32_0_op1_r2 = main_quantlexiti_169_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %178 = add nsw i32 %174, %177*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_signed_add_32_0_op1_r2 = main_quantlexiti_177_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %182 = add nsw i32 %178, %181*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_signed_add_32_0_op1_r2 = main_quantlexiti_181_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %. = add nsw i32 %190, %..v*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_signed_add_32_0_op1_r2 = main_quantlexiti_v_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %202 = add nsw i32 %nbh.0, %201*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_signed_add_32_0_op1_r2 = main_quantlexiti_201_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %149 = add nsw i32 %wd4.0.i9.i6, %146*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_signed_add_32_0_op1_r2 = main_quantlexiti_146_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %156 = add nsw i32 %153, 192*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_signed_add_32_0_op1_r2 = 32'd192;
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i5.i9 = add nsw i32 %156, %155*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_signed_add_32_0_op1_r2 = main_quantlexiti_155_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i20 = add nsw i32 %228, %227*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_signed_add_32_0_op1_r2 = main_quantlexiti_227_reg_r2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %237 = add nsw i32 %199, %187*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_signed_add_32_0_op1_r2 = main_quantlexiti_187_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %266 = add nsw i32 %262, %265*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_111)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_265_r2;
	end
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %338, %335*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_152)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_335_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %270 = add nsw i32 %266, %269*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_269_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %343 = add nsw i32 %339, %342*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_342_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_277_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %tmp.i.i = add i32 %281, %280*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_280_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %292 = add nsw i32 %291, %283*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_283_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %tmp.i3.i = add i32 %358, %357*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_357_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %369 = add nsw i32 %366, %368*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_368_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %308 = add nsw i32 %279, %289*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_289_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %406 = add nsw i32 %404, %292*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_292_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %412 = add nsw i32 %411, %408*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_408_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_319_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %320 = add nsw i32 %wd4.0.i9.i, %317*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_317_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %392 = add nsw i32 %wd4.0.i.i, %389*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_389_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %419, %416*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_416_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %424 = add nsw i32 %423, %420*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_420_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %428 = add nsw i32 %427, %424*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_424_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %432 = add nsw i32 %431, %428*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_428_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %436 = add nsw i32 %435, %432*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_432_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %327 = add nsw i32 %324, 192*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_signed_add_32_0_op1_r2 = 32'd192;
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i5.i = add nsw i32 %327, %326*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_326_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %399, %398*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_398_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %444 = add nsw i32 %443, %440*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_440_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %448 = add nsw i32 %447, %444*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_444_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %332 = add nsw i32 %289, %283*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_signed_add_32_0_op1_r2 = main_preheaderi_283_reg_r2;
	end
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %458, %main_result.04*/
	else /* if ((cur_state_v2 == LEGUP_F_main_BB_adpcm_mainexit_182)) */ begin
		main_signed_add_32_0_op1_r2 = main_adpcm_mainexit_main_result04_reg_r2;
	end
end
always @(*) begin
	main_signed_add_32_0_r0 = (main_signed_add_32_0_op0_r0 + main_signed_add_32_0_op1_r0);
end
always @(*) begin
	main_signed_add_32_0_r1 = (main_signed_add_32_0_op0_r1 + main_signed_add_32_0_op1_r1);
end
always @(*) begin
	main_signed_add_32_0_r2 = (main_signed_add_32_0_op0_r2 + main_signed_add_32_0_op1_r2);
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = add nsw i32 %38, %35*/
	if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_38_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = add nsw i32 %42, %39*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_42_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = add nsw i32 %46, %43*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_46_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = add nsw i32 %50, %47*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_50_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = add nsw i32 %54, %51*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_54_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = add nsw i32 %58, %55*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_58_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = add nsw i32 %62, %59*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_62_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %67 = add nsw i32 %66, %63*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_66_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = add nsw i32 %70, %67*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_70_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = add nsw i32 %88, %91*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_88_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = add nsw i32 %92, %95*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_92_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %76 = add nsw i32 %7, %73*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_7_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %78 = add nsw i32 %77, %76*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_77_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = add nsw i32 %100, %103*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_100_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = add nsw i32 %108, %105*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_108_r0;
	end
	/* main: %113*/
	/*   %114 = add nsw i32 %117, 1*/
	else if ((cur_state_v0 == LEGUP_F_main_BB__113_50)) begin
		main_signed_add_32_1_op0_r0 = main_116_117_reg_r0;
	end
	/* main: %116*/
	/*   %118 = add i32 %117, 1*/
	else if ((cur_state_v0 == LEGUP_F_main_BB__116_51)) begin
		main_signed_add_32_1_op0_r0 = main_116_117_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %166 = add nsw i32 %165, %162*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_signed_add_32_1_op0_r0 = main_quantlexiti_165_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %174 = add nsw i32 %170, %173*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_add_32_1_op0_r0 = main_quantlexiti_170_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %tmp.i3.i12 = add i32 %185, %184*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_signed_add_32_1_op0_r0 = main_quantlexiti_185_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %187 = add nsw i32 %186, %183*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_signed_add_32_1_op0_r0 = main_quantlexiti_186_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %137 = add nsw i32 %105, %127*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_105_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i9.i6 = add nsw i32 %142, %148*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_signed_add_32_1_op0_r0 = main_quantlexiti_142_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %209 = add nsw i32 %183, %199*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_signed_add_32_1_op0_r0 = main_quantlexiti_183_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i17 = add nsw i32 %214, %220*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_signed_add_32_1_op0_r0 = main_quantlexiti_214_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %221 = add nsw i32 %wd4.0.i.i17, %218*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_signed_add_32_1_op0_r0 = main_quantlexiti_wd40ii17_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %228 = add nsw i32 %225, 192*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_signed_add_32_1_op0_r0 = main_quantlexiti_225_reg_r0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %243 = add nsw i32 %127, %109*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_signed_add_32_1_op0_r0 = main_quantlexiti_127_reg_r0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		main_signed_add_32_1_op0_r0 = main_legup_memset_4_i64exit_indvar9_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %262 = add nsw i32 %261, %258*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_110)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_261_r0;
	end
	/* main: %.preheader.i*/
	/*   %297 = add nsw i32 %294, %296*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_143)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_294_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %270, %273*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_270_r0;
	end
	/* main: %.preheader.i*/
	/*   %347 = add nsw i32 %343, %346*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_343_r0;
	end
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %347, %350*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_347_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %282, %279*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_282_r0;
	end
	/* main: %.preheader.i*/
	/*   %355 = add nsw i32 %351, %354*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_351_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %360 = add nsw i32 %359, %356*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_359_r0;
	end
	/* main: %.preheader.i*/
	/*   %404 = add nsw i32 %364, %360*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_364_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %380 = add nsw i32 %356, %364*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_356_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %410 = add nsw i32 %409, %407*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_409_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %414 = add nsw i32 %413, %410*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_413_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %416 = add nsw i32 %415, %412*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_415_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %385, %391*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_385_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %418 = add nsw i32 %417, %414*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_417_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %422 = add nsw i32 %421, %418*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_421_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %426 = add nsw i32 %425, %422*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_425_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %430 = add nsw i32 %429, %426*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_429_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %434 = add nsw i32 %433, %430*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_433_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %438 = add nsw i32 %437, %434*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_437_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %440 = add nsw i32 %439, %436*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_439_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %399 = add nsw i32 %396, 192*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_396_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %442 = add nsw i32 %441, %438*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_441_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %446 = add nsw i32 %445, %442*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_445_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %449, %446*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_449_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %452 = add nsw i32 %451, %448*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_451_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178)) begin
		main_signed_add_32_1_op0_r0 = main_preheaderi_indvar_reg_r0;
	end
	/* main: %adpcm_main.exit*/
	/*   %459 = add nsw i32 %i.03, 1*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_signed_add_32_1_op0_r0 = main_adpcm_mainexit_i03_reg_r0;
	end
	/* main: %.preheader*/
	/*   %464 = add nsw i32 %i.11, 1*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheader_184)) begin
		main_signed_add_32_1_op0_r0 = main_preheader_i11_reg_r0;
	end
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
	else /* if ((cur_state_v0 == LEGUP_F_main_BB_preheader_186)) */ begin
		main_signed_add_32_1_op0_r0 = main_preheader_463_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = add nsw i32 %38, %35*/
	if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_38_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = add nsw i32 %42, %39*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_42_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = add nsw i32 %46, %43*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_46_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = add nsw i32 %50, %47*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_50_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = add nsw i32 %54, %51*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_54_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = add nsw i32 %58, %55*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_58_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = add nsw i32 %62, %59*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_62_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %67 = add nsw i32 %66, %63*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_66_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = add nsw i32 %70, %67*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_70_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = add nsw i32 %88, %91*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_88_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = add nsw i32 %92, %95*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_92_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %76 = add nsw i32 %7, %73*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_7_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %78 = add nsw i32 %77, %76*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_77_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = add nsw i32 %100, %103*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_100_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = add nsw i32 %108, %105*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_108_r1;
	end
	/* main: %113*/
	/*   %114 = add nsw i32 %117, 1*/
	else if ((cur_state_v1 == LEGUP_F_main_BB__113_50)) begin
		main_signed_add_32_1_op0_r1 = main_116_117_reg_r1;
	end
	/* main: %116*/
	/*   %118 = add i32 %117, 1*/
	else if ((cur_state_v1 == LEGUP_F_main_BB__116_51)) begin
		main_signed_add_32_1_op0_r1 = main_116_117_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %166 = add nsw i32 %165, %162*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_signed_add_32_1_op0_r1 = main_quantlexiti_165_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %174 = add nsw i32 %170, %173*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_add_32_1_op0_r1 = main_quantlexiti_170_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %tmp.i3.i12 = add i32 %185, %184*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_signed_add_32_1_op0_r1 = main_quantlexiti_185_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %187 = add nsw i32 %186, %183*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_signed_add_32_1_op0_r1 = main_quantlexiti_186_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %137 = add nsw i32 %105, %127*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_105_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i9.i6 = add nsw i32 %142, %148*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_signed_add_32_1_op0_r1 = main_quantlexiti_142_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %209 = add nsw i32 %183, %199*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_signed_add_32_1_op0_r1 = main_quantlexiti_183_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i17 = add nsw i32 %214, %220*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_signed_add_32_1_op0_r1 = main_quantlexiti_214_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %221 = add nsw i32 %wd4.0.i.i17, %218*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_signed_add_32_1_op0_r1 = main_quantlexiti_wd40ii17_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %228 = add nsw i32 %225, 192*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_signed_add_32_1_op0_r1 = main_quantlexiti_225_reg_r1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %243 = add nsw i32 %127, %109*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_signed_add_32_1_op0_r1 = main_quantlexiti_127_reg_r1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		main_signed_add_32_1_op0_r1 = main_legup_memset_4_i64exit_indvar9_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %262 = add nsw i32 %261, %258*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_110)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_261_r1;
	end
	/* main: %.preheader.i*/
	/*   %297 = add nsw i32 %294, %296*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_143)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_294_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %270, %273*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_270_r1;
	end
	/* main: %.preheader.i*/
	/*   %347 = add nsw i32 %343, %346*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_343_r1;
	end
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %347, %350*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_347_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %282, %279*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_282_r1;
	end
	/* main: %.preheader.i*/
	/*   %355 = add nsw i32 %351, %354*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_351_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %360 = add nsw i32 %359, %356*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_359_r1;
	end
	/* main: %.preheader.i*/
	/*   %404 = add nsw i32 %364, %360*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_364_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %380 = add nsw i32 %356, %364*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_356_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %410 = add nsw i32 %409, %407*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_409_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %414 = add nsw i32 %413, %410*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_413_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %416 = add nsw i32 %415, %412*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_415_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %385, %391*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_385_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %418 = add nsw i32 %417, %414*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_417_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %422 = add nsw i32 %421, %418*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_421_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %426 = add nsw i32 %425, %422*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_425_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %430 = add nsw i32 %429, %426*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_429_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %434 = add nsw i32 %433, %430*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_433_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %438 = add nsw i32 %437, %434*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_437_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %440 = add nsw i32 %439, %436*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_439_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %399 = add nsw i32 %396, 192*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_396_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %442 = add nsw i32 %441, %438*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_441_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %446 = add nsw i32 %445, %442*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_445_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %449, %446*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_449_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %452 = add nsw i32 %451, %448*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_451_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178)) begin
		main_signed_add_32_1_op0_r1 = main_preheaderi_indvar_reg_r1;
	end
	/* main: %adpcm_main.exit*/
	/*   %459 = add nsw i32 %i.03, 1*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_signed_add_32_1_op0_r1 = main_adpcm_mainexit_i03_reg_r1;
	end
	/* main: %.preheader*/
	/*   %464 = add nsw i32 %i.11, 1*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheader_184)) begin
		main_signed_add_32_1_op0_r1 = main_preheader_i11_reg_r1;
	end
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
	else /* if ((cur_state_v1 == LEGUP_F_main_BB_preheader_186)) */ begin
		main_signed_add_32_1_op0_r1 = main_preheader_463_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = add nsw i32 %38, %35*/
	if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_38_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = add nsw i32 %42, %39*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_42_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = add nsw i32 %46, %43*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_46_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = add nsw i32 %50, %47*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_50_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = add nsw i32 %54, %51*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_54_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = add nsw i32 %58, %55*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_58_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = add nsw i32 %62, %59*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_62_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %67 = add nsw i32 %66, %63*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_66_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = add nsw i32 %70, %67*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_70_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = add nsw i32 %88, %91*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_88_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = add nsw i32 %92, %95*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_92_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %76 = add nsw i32 %7, %73*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_7_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %78 = add nsw i32 %77, %76*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_77_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = add nsw i32 %100, %103*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_100_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = add nsw i32 %108, %105*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_108_r2;
	end
	/* main: %113*/
	/*   %114 = add nsw i32 %117, 1*/
	else if ((cur_state_v2 == LEGUP_F_main_BB__113_50)) begin
		main_signed_add_32_1_op0_r2 = main_116_117_reg_r2;
	end
	/* main: %116*/
	/*   %118 = add i32 %117, 1*/
	else if ((cur_state_v2 == LEGUP_F_main_BB__116_51)) begin
		main_signed_add_32_1_op0_r2 = main_116_117_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %166 = add nsw i32 %165, %162*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_signed_add_32_1_op0_r2 = main_quantlexiti_165_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %174 = add nsw i32 %170, %173*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_add_32_1_op0_r2 = main_quantlexiti_170_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %tmp.i3.i12 = add i32 %185, %184*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_signed_add_32_1_op0_r2 = main_quantlexiti_185_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %187 = add nsw i32 %186, %183*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_signed_add_32_1_op0_r2 = main_quantlexiti_186_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %137 = add nsw i32 %105, %127*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_105_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i9.i6 = add nsw i32 %142, %148*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_signed_add_32_1_op0_r2 = main_quantlexiti_142_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %209 = add nsw i32 %183, %199*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_signed_add_32_1_op0_r2 = main_quantlexiti_183_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i17 = add nsw i32 %214, %220*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_signed_add_32_1_op0_r2 = main_quantlexiti_214_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %221 = add nsw i32 %wd4.0.i.i17, %218*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_signed_add_32_1_op0_r2 = main_quantlexiti_wd40ii17_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %228 = add nsw i32 %225, 192*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_signed_add_32_1_op0_r2 = main_quantlexiti_225_reg_r2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %243 = add nsw i32 %127, %109*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_signed_add_32_1_op0_r2 = main_quantlexiti_127_reg_r2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		main_signed_add_32_1_op0_r2 = main_legup_memset_4_i64exit_indvar9_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %262 = add nsw i32 %261, %258*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_110)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_261_r2;
	end
	/* main: %.preheader.i*/
	/*   %297 = add nsw i32 %294, %296*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_143)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_294_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %270, %273*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_270_r2;
	end
	/* main: %.preheader.i*/
	/*   %347 = add nsw i32 %343, %346*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_343_r2;
	end
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %347, %350*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_347_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %282, %279*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_282_r2;
	end
	/* main: %.preheader.i*/
	/*   %355 = add nsw i32 %351, %354*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_351_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %360 = add nsw i32 %359, %356*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_359_r2;
	end
	/* main: %.preheader.i*/
	/*   %404 = add nsw i32 %364, %360*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_364_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %380 = add nsw i32 %356, %364*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_356_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %410 = add nsw i32 %409, %407*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_409_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %414 = add nsw i32 %413, %410*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_413_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %416 = add nsw i32 %415, %412*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_415_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %385, %391*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_385_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %418 = add nsw i32 %417, %414*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_417_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %422 = add nsw i32 %421, %418*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_421_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %426 = add nsw i32 %425, %422*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_425_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %430 = add nsw i32 %429, %426*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_429_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %434 = add nsw i32 %433, %430*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_433_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %438 = add nsw i32 %437, %434*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_437_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %440 = add nsw i32 %439, %436*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_439_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %399 = add nsw i32 %396, 192*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_396_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %442 = add nsw i32 %441, %438*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_441_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %446 = add nsw i32 %445, %442*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_445_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %449, %446*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_449_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %452 = add nsw i32 %451, %448*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_451_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178)) begin
		main_signed_add_32_1_op0_r2 = main_preheaderi_indvar_reg_r2;
	end
	/* main: %adpcm_main.exit*/
	/*   %459 = add nsw i32 %i.03, 1*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_signed_add_32_1_op0_r2 = main_adpcm_mainexit_i03_reg_r2;
	end
	/* main: %.preheader*/
	/*   %464 = add nsw i32 %i.11, 1*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheader_184)) begin
		main_signed_add_32_1_op0_r2 = main_preheader_i11_reg_r2;
	end
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
	else /* if ((cur_state_v2 == LEGUP_F_main_BB_preheader_186)) */ begin
		main_signed_add_32_1_op0_r2 = main_preheader_463_r2;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = add nsw i32 %38, %35*/
	if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_signed_add_32_1_op1_r0 = main_legup_memset_4_i64exit_35_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = add nsw i32 %42, %39*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_signed_add_32_1_op1_r0 = main_legup_memset_4_i64exit_39_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = add nsw i32 %46, %43*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_signed_add_32_1_op1_r0 = main_legup_memset_4_i64exit_43_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = add nsw i32 %50, %47*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_signed_add_32_1_op1_r0 = main_legup_memset_4_i64exit_47_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = add nsw i32 %54, %51*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_signed_add_32_1_op1_r0 = main_legup_memset_4_i64exit_51_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = add nsw i32 %58, %55*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_signed_add_32_1_op1_r0 = main_legup_memset_4_i64exit_55_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = add nsw i32 %62, %59*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_signed_add_32_1_op1_r0 = main_legup_memset_4_i64exit_59_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %67 = add nsw i32 %66, %63*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_signed_add_32_1_op1_r0 = main_legup_memset_4_i64exit_63_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = add nsw i32 %70, %67*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_signed_add_32_1_op1_r0 = main_legup_memset_4_i64exit_67_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = add nsw i32 %88, %91*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_signed_add_32_1_op1_r0 = main_legup_memset_4_i64exit_91_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = add nsw i32 %92, %95*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_signed_add_32_1_op1_r0 = main_legup_memset_4_i64exit_95_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %76 = add nsw i32 %7, %73*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_signed_add_32_1_op1_r0 = main_legup_memset_4_i64exit_73_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %78 = add nsw i32 %77, %76*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_signed_add_32_1_op1_r0 = main_legup_memset_4_i64exit_76_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = add nsw i32 %100, %103*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_signed_add_32_1_op1_r0 = main_legup_memset_4_i64exit_103_reg_r0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = add nsw i32 %108, %105*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_signed_add_32_1_op1_r0 = main_legup_memset_4_i64exit_105_reg_r0;
	end
	/* main: %113*/
	/*   %114 = add nsw i32 %117, 1*/
	else if ((cur_state_v0 == LEGUP_F_main_BB__113_50)) begin
		main_signed_add_32_1_op1_r0 = 32'd1;
	end
	/* main: %116*/
	/*   %118 = add i32 %117, 1*/
	else if ((cur_state_v0 == LEGUP_F_main_BB__116_51)) begin
		main_signed_add_32_1_op1_r0 = 32'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %166 = add nsw i32 %165, %162*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_signed_add_32_1_op1_r0 = main_quantlexiti_162_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %174 = add nsw i32 %170, %173*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_add_32_1_op1_r0 = main_quantlexiti_173_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %tmp.i3.i12 = add i32 %185, %184*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_signed_add_32_1_op1_r0 = main_quantlexiti_184_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %187 = add nsw i32 %186, %183*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_signed_add_32_1_op1_r0 = main_quantlexiti_183_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %137 = add nsw i32 %105, %127*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_signed_add_32_1_op1_r0 = main_quantlexiti_127_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i9.i6 = add nsw i32 %142, %148*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_signed_add_32_1_op1_r0 = main_quantlexiti_148_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %209 = add nsw i32 %183, %199*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_signed_add_32_1_op1_r0 = main_quantlexiti_199_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i17 = add nsw i32 %214, %220*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_signed_add_32_1_op1_r0 = main_quantlexiti_220_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %221 = add nsw i32 %wd4.0.i.i17, %218*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_signed_add_32_1_op1_r0 = main_quantlexiti_218_reg_r0;
	end
	/* main: %quantl.exit.i*/
	/*   %228 = add nsw i32 %225, 192*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_signed_add_32_1_op1_r0 = 32'd192;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %243 = add nsw i32 %127, %109*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_signed_add_32_1_op1_r0 = main_legup_memset_4_i64exit_109_reg_r0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		main_signed_add_32_1_op1_r0 = 32'd1;
	end
	/* main: %.preheader.i*/
	/*   %262 = add nsw i32 %261, %258*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_110)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_258_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %297 = add nsw i32 %294, %296*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_143)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_296_r0;
	end
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %270, %273*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_273_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %347 = add nsw i32 %343, %346*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_346_r0;
	end
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %347, %350*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_350_r0;
	end
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %282, %279*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_279_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %355 = add nsw i32 %351, %354*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_354_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %360 = add nsw i32 %359, %356*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_356_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %404 = add nsw i32 %364, %360*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_360_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %380 = add nsw i32 %356, %364*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_364_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %410 = add nsw i32 %409, %407*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_407_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %414 = add nsw i32 %413, %410*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_410_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %416 = add nsw i32 %415, %412*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_412_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %385, %391*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_391_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %418 = add nsw i32 %417, %414*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_414_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %422 = add nsw i32 %421, %418*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_418_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %426 = add nsw i32 %425, %422*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_422_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %430 = add nsw i32 %429, %426*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_426_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %434 = add nsw i32 %433, %430*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_430_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %438 = add nsw i32 %437, %434*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_434_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %440 = add nsw i32 %439, %436*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_436_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %399 = add nsw i32 %396, 192*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_signed_add_32_1_op1_r0 = 32'd192;
	end
	/* main: %.preheader.i*/
	/*   %442 = add nsw i32 %441, %438*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_438_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %446 = add nsw i32 %445, %442*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_442_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %449, %446*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_446_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %452 = add nsw i32 %451, %448*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_signed_add_32_1_op1_r0 = main_preheaderi_448_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_178)) begin
		main_signed_add_32_1_op1_r0 = 32'd1;
	end
	/* main: %adpcm_main.exit*/
	/*   %459 = add nsw i32 %i.03, 1*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_signed_add_32_1_op1_r0 = 32'd1;
	end
	/* main: %.preheader*/
	/*   %464 = add nsw i32 %i.11, 1*/
	else if ((cur_state_v0 == LEGUP_F_main_BB_preheader_184)) begin
		main_signed_add_32_1_op1_r0 = 32'd1;
	end
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
	else /* if ((cur_state_v0 == LEGUP_F_main_BB_preheader_186)) */ begin
		main_signed_add_32_1_op1_r0 = main_preheader_main_result22_reg_r0;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = add nsw i32 %38, %35*/
	if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_signed_add_32_1_op1_r1 = main_legup_memset_4_i64exit_35_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = add nsw i32 %42, %39*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_signed_add_32_1_op1_r1 = main_legup_memset_4_i64exit_39_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = add nsw i32 %46, %43*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_signed_add_32_1_op1_r1 = main_legup_memset_4_i64exit_43_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = add nsw i32 %50, %47*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_signed_add_32_1_op1_r1 = main_legup_memset_4_i64exit_47_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = add nsw i32 %54, %51*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_signed_add_32_1_op1_r1 = main_legup_memset_4_i64exit_51_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = add nsw i32 %58, %55*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_signed_add_32_1_op1_r1 = main_legup_memset_4_i64exit_55_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = add nsw i32 %62, %59*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_signed_add_32_1_op1_r1 = main_legup_memset_4_i64exit_59_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %67 = add nsw i32 %66, %63*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_signed_add_32_1_op1_r1 = main_legup_memset_4_i64exit_63_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = add nsw i32 %70, %67*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_signed_add_32_1_op1_r1 = main_legup_memset_4_i64exit_67_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = add nsw i32 %88, %91*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_signed_add_32_1_op1_r1 = main_legup_memset_4_i64exit_91_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = add nsw i32 %92, %95*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_signed_add_32_1_op1_r1 = main_legup_memset_4_i64exit_95_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %76 = add nsw i32 %7, %73*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_signed_add_32_1_op1_r1 = main_legup_memset_4_i64exit_73_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %78 = add nsw i32 %77, %76*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_signed_add_32_1_op1_r1 = main_legup_memset_4_i64exit_76_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = add nsw i32 %100, %103*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_signed_add_32_1_op1_r1 = main_legup_memset_4_i64exit_103_reg_r1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = add nsw i32 %108, %105*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_signed_add_32_1_op1_r1 = main_legup_memset_4_i64exit_105_reg_r1;
	end
	/* main: %113*/
	/*   %114 = add nsw i32 %117, 1*/
	else if ((cur_state_v1 == LEGUP_F_main_BB__113_50)) begin
		main_signed_add_32_1_op1_r1 = 32'd1;
	end
	/* main: %116*/
	/*   %118 = add i32 %117, 1*/
	else if ((cur_state_v1 == LEGUP_F_main_BB__116_51)) begin
		main_signed_add_32_1_op1_r1 = 32'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %166 = add nsw i32 %165, %162*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_signed_add_32_1_op1_r1 = main_quantlexiti_162_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %174 = add nsw i32 %170, %173*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_add_32_1_op1_r1 = main_quantlexiti_173_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %tmp.i3.i12 = add i32 %185, %184*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_signed_add_32_1_op1_r1 = main_quantlexiti_184_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %187 = add nsw i32 %186, %183*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_signed_add_32_1_op1_r1 = main_quantlexiti_183_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %137 = add nsw i32 %105, %127*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_signed_add_32_1_op1_r1 = main_quantlexiti_127_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i9.i6 = add nsw i32 %142, %148*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_signed_add_32_1_op1_r1 = main_quantlexiti_148_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %209 = add nsw i32 %183, %199*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_signed_add_32_1_op1_r1 = main_quantlexiti_199_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i17 = add nsw i32 %214, %220*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_signed_add_32_1_op1_r1 = main_quantlexiti_220_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %221 = add nsw i32 %wd4.0.i.i17, %218*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_signed_add_32_1_op1_r1 = main_quantlexiti_218_reg_r1;
	end
	/* main: %quantl.exit.i*/
	/*   %228 = add nsw i32 %225, 192*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_signed_add_32_1_op1_r1 = 32'd192;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %243 = add nsw i32 %127, %109*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_signed_add_32_1_op1_r1 = main_legup_memset_4_i64exit_109_reg_r1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		main_signed_add_32_1_op1_r1 = 32'd1;
	end
	/* main: %.preheader.i*/
	/*   %262 = add nsw i32 %261, %258*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_110)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_258_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %297 = add nsw i32 %294, %296*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_143)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_296_r1;
	end
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %270, %273*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_273_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %347 = add nsw i32 %343, %346*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_346_r1;
	end
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %347, %350*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_350_r1;
	end
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %282, %279*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_279_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %355 = add nsw i32 %351, %354*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_354_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %360 = add nsw i32 %359, %356*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_356_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %404 = add nsw i32 %364, %360*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_360_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %380 = add nsw i32 %356, %364*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_364_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %410 = add nsw i32 %409, %407*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_407_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %414 = add nsw i32 %413, %410*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_410_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %416 = add nsw i32 %415, %412*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_412_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %385, %391*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_391_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %418 = add nsw i32 %417, %414*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_414_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %422 = add nsw i32 %421, %418*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_418_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %426 = add nsw i32 %425, %422*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_422_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %430 = add nsw i32 %429, %426*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_426_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %434 = add nsw i32 %433, %430*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_430_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %438 = add nsw i32 %437, %434*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_434_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %440 = add nsw i32 %439, %436*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_436_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %399 = add nsw i32 %396, 192*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_signed_add_32_1_op1_r1 = 32'd192;
	end
	/* main: %.preheader.i*/
	/*   %442 = add nsw i32 %441, %438*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_438_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %446 = add nsw i32 %445, %442*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_442_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %449, %446*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_446_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %452 = add nsw i32 %451, %448*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_signed_add_32_1_op1_r1 = main_preheaderi_448_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_178)) begin
		main_signed_add_32_1_op1_r1 = 32'd1;
	end
	/* main: %adpcm_main.exit*/
	/*   %459 = add nsw i32 %i.03, 1*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_signed_add_32_1_op1_r1 = 32'd1;
	end
	/* main: %.preheader*/
	/*   %464 = add nsw i32 %i.11, 1*/
	else if ((cur_state_v1 == LEGUP_F_main_BB_preheader_184)) begin
		main_signed_add_32_1_op1_r1 = 32'd1;
	end
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
	else /* if ((cur_state_v1 == LEGUP_F_main_BB_preheader_186)) */ begin
		main_signed_add_32_1_op1_r1 = main_preheader_main_result22_reg_r1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = add nsw i32 %38, %35*/
	if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_signed_add_32_1_op1_r2 = main_legup_memset_4_i64exit_35_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = add nsw i32 %42, %39*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_signed_add_32_1_op1_r2 = main_legup_memset_4_i64exit_39_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = add nsw i32 %46, %43*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_signed_add_32_1_op1_r2 = main_legup_memset_4_i64exit_43_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = add nsw i32 %50, %47*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_signed_add_32_1_op1_r2 = main_legup_memset_4_i64exit_47_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = add nsw i32 %54, %51*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_signed_add_32_1_op1_r2 = main_legup_memset_4_i64exit_51_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = add nsw i32 %58, %55*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_signed_add_32_1_op1_r2 = main_legup_memset_4_i64exit_55_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = add nsw i32 %62, %59*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_signed_add_32_1_op1_r2 = main_legup_memset_4_i64exit_59_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %67 = add nsw i32 %66, %63*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_signed_add_32_1_op1_r2 = main_legup_memset_4_i64exit_63_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = add nsw i32 %70, %67*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_signed_add_32_1_op1_r2 = main_legup_memset_4_i64exit_67_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = add nsw i32 %88, %91*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		main_signed_add_32_1_op1_r2 = main_legup_memset_4_i64exit_91_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = add nsw i32 %92, %95*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		main_signed_add_32_1_op1_r2 = main_legup_memset_4_i64exit_95_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %76 = add nsw i32 %7, %73*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		main_signed_add_32_1_op1_r2 = main_legup_memset_4_i64exit_73_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %78 = add nsw i32 %77, %76*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		main_signed_add_32_1_op1_r2 = main_legup_memset_4_i64exit_76_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = add nsw i32 %100, %103*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		main_signed_add_32_1_op1_r2 = main_legup_memset_4_i64exit_103_reg_r2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = add nsw i32 %108, %105*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		main_signed_add_32_1_op1_r2 = main_legup_memset_4_i64exit_105_reg_r2;
	end
	/* main: %113*/
	/*   %114 = add nsw i32 %117, 1*/
	else if ((cur_state_v2 == LEGUP_F_main_BB__113_50)) begin
		main_signed_add_32_1_op1_r2 = 32'd1;
	end
	/* main: %116*/
	/*   %118 = add i32 %117, 1*/
	else if ((cur_state_v2 == LEGUP_F_main_BB__116_51)) begin
		main_signed_add_32_1_op1_r2 = 32'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %166 = add nsw i32 %165, %162*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_signed_add_32_1_op1_r2 = main_quantlexiti_162_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %174 = add nsw i32 %170, %173*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_add_32_1_op1_r2 = main_quantlexiti_173_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %tmp.i3.i12 = add i32 %185, %184*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_signed_add_32_1_op1_r2 = main_quantlexiti_184_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %187 = add nsw i32 %186, %183*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_signed_add_32_1_op1_r2 = main_quantlexiti_183_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %137 = add nsw i32 %105, %127*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_signed_add_32_1_op1_r2 = main_quantlexiti_127_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i9.i6 = add nsw i32 %142, %148*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_signed_add_32_1_op1_r2 = main_quantlexiti_148_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %209 = add nsw i32 %183, %199*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_signed_add_32_1_op1_r2 = main_quantlexiti_199_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i17 = add nsw i32 %214, %220*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_signed_add_32_1_op1_r2 = main_quantlexiti_220_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %221 = add nsw i32 %wd4.0.i.i17, %218*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_signed_add_32_1_op1_r2 = main_quantlexiti_218_reg_r2;
	end
	/* main: %quantl.exit.i*/
	/*   %228 = add nsw i32 %225, 192*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_signed_add_32_1_op1_r2 = 32'd192;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %243 = add nsw i32 %127, %109*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_signed_add_32_1_op1_r2 = main_legup_memset_4_i64exit_109_reg_r2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		main_signed_add_32_1_op1_r2 = 32'd1;
	end
	/* main: %.preheader.i*/
	/*   %262 = add nsw i32 %261, %258*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_110)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_258_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %297 = add nsw i32 %294, %296*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_143)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_296_r2;
	end
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %270, %273*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_153)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_273_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %347 = add nsw i32 %343, %346*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_346_r2;
	end
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %347, %350*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_155)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_350_r2;
	end
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %282, %279*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_279_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %355 = add nsw i32 %351, %354*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_157)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_354_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %360 = add nsw i32 %359, %356*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_158)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_356_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %404 = add nsw i32 %364, %360*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_159)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_360_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %380 = add nsw i32 %356, %364*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_160)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_364_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %410 = add nsw i32 %409, %407*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_161)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_407_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %414 = add nsw i32 %413, %410*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_162)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_410_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %416 = add nsw i32 %415, %412*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_163)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_412_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %385, %391*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_165)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_391_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %418 = add nsw i32 %417, %414*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_166)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_414_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %422 = add nsw i32 %421, %418*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_167)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_418_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %426 = add nsw i32 %425, %422*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_168)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_422_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %430 = add nsw i32 %429, %426*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_169)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_426_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %434 = add nsw i32 %433, %430*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_170)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_430_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %438 = add nsw i32 %437, %434*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_171)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_434_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %440 = add nsw i32 %439, %436*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_172)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_436_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %399 = add nsw i32 %396, 192*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_173)) begin
		main_signed_add_32_1_op1_r2 = 32'd192;
	end
	/* main: %.preheader.i*/
	/*   %442 = add nsw i32 %441, %438*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_174)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_438_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %446 = add nsw i32 %445, %442*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_175)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_442_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %449, %446*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_176)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_446_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %452 = add nsw i32 %451, %448*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_177)) begin
		main_signed_add_32_1_op1_r2 = main_preheaderi_448_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_178)) begin
		main_signed_add_32_1_op1_r2 = 32'd1;
	end
	/* main: %adpcm_main.exit*/
	/*   %459 = add nsw i32 %i.03, 1*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_signed_add_32_1_op1_r2 = 32'd1;
	end
	/* main: %.preheader*/
	/*   %464 = add nsw i32 %i.11, 1*/
	else if ((cur_state_v2 == LEGUP_F_main_BB_preheader_184)) begin
		main_signed_add_32_1_op1_r2 = 32'd1;
	end
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
	else /* if ((cur_state_v2 == LEGUP_F_main_BB_preheader_186)) */ begin
		main_signed_add_32_1_op1_r2 = main_preheader_main_result22_reg_r2;
	end
end
always @(*) begin
	main_signed_add_32_1_r0 = (main_signed_add_32_1_op0_r0 + main_signed_add_32_1_op1_r0);
end
always @(*) begin
	main_signed_add_32_1_r1 = (main_signed_add_32_1_op0_r1 + main_signed_add_32_1_op1_r1);
end
always @(*) begin
	main_signed_add_32_1_r2 = (main_signed_add_32_1_op0_r2 + main_signed_add_32_1_op1_r2);
end
always @(*) begin
	/* main: %2*/
	/*   %4 = add i64 %3, zext (i32 ptrtoint ([24 x i32]* @tqmf to i32) to i64)*/
		main_signed_add_64_0_op0_r0 = main_2_3_r0;
end
always @(*) begin
	/* main: %2*/
	/*   %4 = add i64 %3, zext (i32 ptrtoint ([24 x i32]* @tqmf to i32) to i64)*/
		main_signed_add_64_0_op0_r1 = main_2_3_r1;
end
always @(*) begin
	/* main: %2*/
	/*   %4 = add i64 %3, zext (i32 ptrtoint ([24 x i32]* @tqmf to i32) to i64)*/
		main_signed_add_64_0_op0_r2 = main_2_3_r2;
end
always @(*) begin
	/* main: %2*/
	/*   %4 = add i64 %3, zext (i32 ptrtoint ([24 x i32]* @tqmf to i32) to i64)*/
if (reset) begin main_signed_add_64_0_op1_r0 = 0; end
		main_signed_add_64_0_op1_r0 = `TAG_g_tqmf_a;
end
always @(*) begin
	/* main: %2*/
	/*   %4 = add i64 %3, zext (i32 ptrtoint ([24 x i32]* @tqmf to i32) to i64)*/
if (reset) begin main_signed_add_64_0_op1_r1 = 0; end
		main_signed_add_64_0_op1_r1 = `TAG_g_tqmf_a;
end
always @(*) begin
	/* main: %2*/
	/*   %4 = add i64 %3, zext (i32 ptrtoint ([24 x i32]* @tqmf to i32) to i64)*/
if (reset) begin main_signed_add_64_0_op1_r2 = 0; end
		main_signed_add_64_0_op1_r2 = `TAG_g_tqmf_a;
end
always @(*) begin
	main_signed_add_64_0_r0 = (main_signed_add_64_0_op0_r0 + main_signed_add_64_0_op1_r0);
end
always @(*) begin
	main_signed_add_64_0_r1 = (main_signed_add_64_0_op0_r1 + main_signed_add_64_0_op1_r1);
end
always @(*) begin
	main_signed_add_64_0_r2 = (main_signed_add_64_0_op0_r2 + main_signed_add_64_0_op1_r2);
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next14 = add i64 %indvar13, 1*/
		main_signed_add_64_1_op0_r0 = main_1_indvar13_reg_r0;
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next14 = add i64 %indvar13, 1*/
		main_signed_add_64_1_op0_r1 = main_1_indvar13_reg_r1;
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next14 = add i64 %indvar13, 1*/
		main_signed_add_64_1_op0_r2 = main_1_indvar13_reg_r2;
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next14 = add i64 %indvar13, 1*/
if (reset) begin main_signed_add_64_1_op1_r0 = 0; end
		main_signed_add_64_1_op1_r0 = 64'd1;
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next14 = add i64 %indvar13, 1*/
if (reset) begin main_signed_add_64_1_op1_r1 = 0; end
		main_signed_add_64_1_op1_r1 = 64'd1;
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next14 = add i64 %indvar13, 1*/
if (reset) begin main_signed_add_64_1_op1_r2 = 0; end
		main_signed_add_64_1_op1_r2 = 64'd1;
end
always @(*) begin
	main_signed_add_64_1_r0 = (main_signed_add_64_1_op0_r0 + main_signed_add_64_1_op1_r0);
end
always @(*) begin
	main_signed_add_64_1_r1 = (main_signed_add_64_1_op0_r1 + main_signed_add_64_1_op1_r1);
end
always @(*) begin
	main_signed_add_64_1_r2 = (main_signed_add_64_1_op0_r2 + main_signed_add_64_1_op1_r2);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %234 = sdiv i32 %i.02.i, 2*/
	if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_signed_divide_32_0_op0_r0 = main_legup_memset_4_i64exit_i02i_reg_r0;
	end
	/* main: %.preheader.i*/
	/*   %252 = sdiv i32 %i.11.i, 2*/
	else /* if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) */ begin
		main_signed_divide_32_0_op0_r0 = main_preheaderi_i11i_r0;
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %234 = sdiv i32 %i.02.i, 2*/
	if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_signed_divide_32_0_op0_r1 = main_legup_memset_4_i64exit_i02i_reg_r1;
	end
	/* main: %.preheader.i*/
	/*   %252 = sdiv i32 %i.11.i, 2*/
	else /* if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) */ begin
		main_signed_divide_32_0_op0_r1 = main_preheaderi_i11i_r1;
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %234 = sdiv i32 %i.02.i, 2*/
	if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_signed_divide_32_0_op0_r2 = main_legup_memset_4_i64exit_i02i_reg_r2;
	end
	/* main: %.preheader.i*/
	/*   %252 = sdiv i32 %i.11.i, 2*/
	else /* if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) */ begin
		main_signed_divide_32_0_op0_r2 = main_preheaderi_i11i_r2;
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %234 = sdiv i32 %i.02.i, 2*/
	if ((cur_state_v0 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_signed_divide_32_0_op1_r0 = 32'd2;
	end
	/* main: %.preheader.i*/
	/*   %252 = sdiv i32 %i.11.i, 2*/
	else /* if ((cur_state_v0 == LEGUP_F_main_BB_preheaderi_107)) */ begin
		main_signed_divide_32_0_op1_r0 = 32'd2;
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %234 = sdiv i32 %i.02.i, 2*/
	if ((cur_state_v1 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_signed_divide_32_0_op1_r1 = 32'd2;
	end
	/* main: %.preheader.i*/
	/*   %252 = sdiv i32 %i.11.i, 2*/
	else /* if ((cur_state_v1 == LEGUP_F_main_BB_preheaderi_107)) */ begin
		main_signed_divide_32_0_op1_r1 = 32'd2;
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %234 = sdiv i32 %i.02.i, 2*/
	if ((cur_state_v2 == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_signed_divide_32_0_op1_r2 = 32'd2;
	end
	/* main: %.preheader.i*/
	/*   %252 = sdiv i32 %i.11.i, 2*/
	else /* if ((cur_state_v2 == LEGUP_F_main_BB_preheaderi_107)) */ begin
		main_signed_divide_32_0_op1_r2 = 32'd2;
	end
end
always @(*) begin
	lpm_divide_main_preheaderi_252_en_r0 = ((memory_controller_waitrequest == 1'd0) & (legup_function_call_r0 == 1'd0));
end
always @(*) begin
	lpm_divide_main_preheaderi_252_en_r1 = ((memory_controller_waitrequest == 1'd0) & (legup_function_call_r1 == 1'd0));
end
always @(*) begin
	lpm_divide_main_preheaderi_252_en_r2 = ((memory_controller_waitrequest == 1'd0) & (legup_function_call_r2 == 1'd0));
end
always @(*) begin
	lpm_divide_main_preheaderi_252_out_r0 = lpm_divide_main_preheaderi_252_temp_out_r0;
end
always @(*) begin
	lpm_divide_main_preheaderi_252_out_r1 = lpm_divide_main_preheaderi_252_temp_out_r1;
end
always @(*) begin
	lpm_divide_main_preheaderi_252_out_r2 = lpm_divide_main_preheaderi_252_temp_out_r2;
end
always @(*) begin
	main_signed_divide_32_0_r0 = lpm_divide_main_preheaderi_252_out_r0;
end
always @(*) begin
	main_signed_divide_32_0_r1 = lpm_divide_main_preheaderi_252_out_r1;
end
always @(*) begin
	main_signed_divide_32_0_r2 = lpm_divide_main_preheaderi_252_out_r2;
end


//voter
always @(*) begin
	for(i=0; i<=7; i=i+1) begin
	cur_state[i]
		= (cur_state_r0[i]==cur_state_r1[i])? cur_state_r0[i]
		: cur_state_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=63; i=i+1) begin
	main_1_indvar13[i]
		= (main_1_indvar13_r0[i]==main_1_indvar13_r1[i])? main_1_indvar13_r0[i]
		: main_1_indvar13_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=63; i=i+1) begin
	main_1_indvar13_reg[i]
		= (main_1_indvar13_reg_r0[i]==main_1_indvar13_reg_r1[i])? main_1_indvar13_reg_r0[i]
		: main_1_indvar13_reg_r2[i];
	end
end
always @(*) begin
	main_1_exitcond15
		= (main_1_exitcond15_r0==main_1_exitcond15_r1)? main_1_exitcond15_r0
		: main_1_exitcond15_r2;
end
always @(*) begin
	for(i=0; i<=63; i=i+1) begin
	main_2_3[i]
		= (main_2_3_r0[i]==main_2_3_r1[i])? main_2_3_r0[i]
		: main_2_3_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=63; i=i+1) begin
	main_2_4[i]
		= (main_2_4_r0[i]==main_2_4_r1[i])? main_2_4_r0[i]
		: main_2_4_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_2_5[i]
		= (main_2_5_r0[i]==main_2_5_r1[i])? main_2_5_r0[i]
		: main_2_5_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_2_si0[i]
		= (main_2_si0_r0[i]==main_2_si0_r1[i])? main_2_si0_r0[i]
		: main_2_si0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=63; i=i+1) begin
	main_2_indvarnext14[i]
		= (main_2_indvarnext14_r0[i]==main_2_indvarnext14_r1[i])? main_2_indvarnext14_r0[i]
		: main_2_indvarnext14_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=63; i=i+1) begin
	main_2_indvarnext14_reg[i]
		= (main_2_indvarnext14_reg_r0[i]==main_2_indvarnext14_reg_r1[i])? main_2_indvarnext14_reg_r0[i]
		: main_2_indvarnext14_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_indvar9[i]
		= (main_legup_memset_4_i64exit_indvar9_r0[i]==main_legup_memset_4_i64exit_indvar9_r1[i])? main_legup_memset_4_i64exit_indvar9_r0[i]
		: main_legup_memset_4_i64exit_indvar9_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_indvar9_reg[i]
		= (main_legup_memset_4_i64exit_indvar9_reg_r0[i]==main_legup_memset_4_i64exit_indvar9_reg_r1[i])? main_legup_memset_4_i64exit_indvar9_reg_r0[i]
		: main_legup_memset_4_i64exit_indvar9_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_6[i]
		= (main_legup_memset_4_i64exit_6_r0[i]==main_legup_memset_4_i64exit_6_r1[i])? main_legup_memset_4_i64exit_6_r0[i]
		: main_legup_memset_4_i64exit_6_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_6_reg[i]
		= (main_legup_memset_4_i64exit_6_reg_r0[i]==main_legup_memset_4_i64exit_6_reg_r1[i])? main_legup_memset_4_i64exit_6_reg_r0[i]
		: main_legup_memset_4_i64exit_6_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_7[i]
		= (main_legup_memset_4_i64exit_7_r0[i]==main_legup_memset_4_i64exit_7_r1[i])? main_legup_memset_4_i64exit_7_r0[i]
		: main_legup_memset_4_i64exit_7_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_7_reg[i]
		= (main_legup_memset_4_i64exit_7_reg_r0[i]==main_legup_memset_4_i64exit_7_reg_r1[i])? main_legup_memset_4_i64exit_7_reg_r0[i]
		: main_legup_memset_4_i64exit_7_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_8[i]
		= (main_legup_memset_4_i64exit_8_r0[i]==main_legup_memset_4_i64exit_8_r1[i])? main_legup_memset_4_i64exit_8_r0[i]
		: main_legup_memset_4_i64exit_8_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_8_reg[i]
		= (main_legup_memset_4_i64exit_8_reg_r0[i]==main_legup_memset_4_i64exit_8_reg_r1[i])? main_legup_memset_4_i64exit_8_reg_r0[i]
		: main_legup_memset_4_i64exit_8_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_9[i]
		= (main_legup_memset_4_i64exit_9_r0[i]==main_legup_memset_4_i64exit_9_r1[i])? main_legup_memset_4_i64exit_9_r0[i]
		: main_legup_memset_4_i64exit_9_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_9_reg[i]
		= (main_legup_memset_4_i64exit_9_reg_r0[i]==main_legup_memset_4_i64exit_9_reg_r1[i])? main_legup_memset_4_i64exit_9_reg_r0[i]
		: main_legup_memset_4_i64exit_9_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_10[i]
		= (main_legup_memset_4_i64exit_10_r0[i]==main_legup_memset_4_i64exit_10_r1[i])? main_legup_memset_4_i64exit_10_r0[i]
		: main_legup_memset_4_i64exit_10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_10_reg[i]
		= (main_legup_memset_4_i64exit_10_reg_r0[i]==main_legup_memset_4_i64exit_10_reg_r1[i])? main_legup_memset_4_i64exit_10_reg_r0[i]
		: main_legup_memset_4_i64exit_10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_11[i]
		= (main_legup_memset_4_i64exit_11_r0[i]==main_legup_memset_4_i64exit_11_r1[i])? main_legup_memset_4_i64exit_11_r0[i]
		: main_legup_memset_4_i64exit_11_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_11_reg[i]
		= (main_legup_memset_4_i64exit_11_reg_r0[i]==main_legup_memset_4_i64exit_11_reg_r1[i])? main_legup_memset_4_i64exit_11_reg_r0[i]
		: main_legup_memset_4_i64exit_11_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_12[i]
		= (main_legup_memset_4_i64exit_12_r0[i]==main_legup_memset_4_i64exit_12_r1[i])? main_legup_memset_4_i64exit_12_r0[i]
		: main_legup_memset_4_i64exit_12_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_12_reg[i]
		= (main_legup_memset_4_i64exit_12_reg_r0[i]==main_legup_memset_4_i64exit_12_reg_r1[i])? main_legup_memset_4_i64exit_12_reg_r0[i]
		: main_legup_memset_4_i64exit_12_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_13[i]
		= (main_legup_memset_4_i64exit_13_r0[i]==main_legup_memset_4_i64exit_13_r1[i])? main_legup_memset_4_i64exit_13_r0[i]
		: main_legup_memset_4_i64exit_13_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_13_reg[i]
		= (main_legup_memset_4_i64exit_13_reg_r0[i]==main_legup_memset_4_i64exit_13_reg_r1[i])? main_legup_memset_4_i64exit_13_reg_r0[i]
		: main_legup_memset_4_i64exit_13_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_14[i]
		= (main_legup_memset_4_i64exit_14_r0[i]==main_legup_memset_4_i64exit_14_r1[i])? main_legup_memset_4_i64exit_14_r0[i]
		: main_legup_memset_4_i64exit_14_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_14_reg[i]
		= (main_legup_memset_4_i64exit_14_reg_r0[i]==main_legup_memset_4_i64exit_14_reg_r1[i])? main_legup_memset_4_i64exit_14_reg_r0[i]
		: main_legup_memset_4_i64exit_14_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_15[i]
		= (main_legup_memset_4_i64exit_15_r0[i]==main_legup_memset_4_i64exit_15_r1[i])? main_legup_memset_4_i64exit_15_r0[i]
		: main_legup_memset_4_i64exit_15_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_15_reg[i]
		= (main_legup_memset_4_i64exit_15_reg_r0[i]==main_legup_memset_4_i64exit_15_reg_r1[i])? main_legup_memset_4_i64exit_15_reg_r0[i]
		: main_legup_memset_4_i64exit_15_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_16[i]
		= (main_legup_memset_4_i64exit_16_r0[i]==main_legup_memset_4_i64exit_16_r1[i])? main_legup_memset_4_i64exit_16_r0[i]
		: main_legup_memset_4_i64exit_16_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_16_reg[i]
		= (main_legup_memset_4_i64exit_16_reg_r0[i]==main_legup_memset_4_i64exit_16_reg_r1[i])? main_legup_memset_4_i64exit_16_reg_r0[i]
		: main_legup_memset_4_i64exit_16_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_17[i]
		= (main_legup_memset_4_i64exit_17_r0[i]==main_legup_memset_4_i64exit_17_r1[i])? main_legup_memset_4_i64exit_17_r0[i]
		: main_legup_memset_4_i64exit_17_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_17_reg[i]
		= (main_legup_memset_4_i64exit_17_reg_r0[i]==main_legup_memset_4_i64exit_17_reg_r1[i])? main_legup_memset_4_i64exit_17_reg_r0[i]
		: main_legup_memset_4_i64exit_17_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_18[i]
		= (main_legup_memset_4_i64exit_18_r0[i]==main_legup_memset_4_i64exit_18_r1[i])? main_legup_memset_4_i64exit_18_r0[i]
		: main_legup_memset_4_i64exit_18_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_18_reg[i]
		= (main_legup_memset_4_i64exit_18_reg_r0[i]==main_legup_memset_4_i64exit_18_reg_r1[i])? main_legup_memset_4_i64exit_18_reg_r0[i]
		: main_legup_memset_4_i64exit_18_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_19[i]
		= (main_legup_memset_4_i64exit_19_r0[i]==main_legup_memset_4_i64exit_19_r1[i])? main_legup_memset_4_i64exit_19_r0[i]
		: main_legup_memset_4_i64exit_19_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_19_reg[i]
		= (main_legup_memset_4_i64exit_19_reg_r0[i]==main_legup_memset_4_i64exit_19_reg_r1[i])? main_legup_memset_4_i64exit_19_reg_r0[i]
		: main_legup_memset_4_i64exit_19_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_20[i]
		= (main_legup_memset_4_i64exit_20_r0[i]==main_legup_memset_4_i64exit_20_r1[i])? main_legup_memset_4_i64exit_20_r0[i]
		: main_legup_memset_4_i64exit_20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_20_reg[i]
		= (main_legup_memset_4_i64exit_20_reg_r0[i]==main_legup_memset_4_i64exit_20_reg_r1[i])? main_legup_memset_4_i64exit_20_reg_r0[i]
		: main_legup_memset_4_i64exit_20_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_21[i]
		= (main_legup_memset_4_i64exit_21_r0[i]==main_legup_memset_4_i64exit_21_r1[i])? main_legup_memset_4_i64exit_21_r0[i]
		: main_legup_memset_4_i64exit_21_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_21_reg[i]
		= (main_legup_memset_4_i64exit_21_reg_r0[i]==main_legup_memset_4_i64exit_21_reg_r1[i])? main_legup_memset_4_i64exit_21_reg_r0[i]
		: main_legup_memset_4_i64exit_21_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_22[i]
		= (main_legup_memset_4_i64exit_22_r0[i]==main_legup_memset_4_i64exit_22_r1[i])? main_legup_memset_4_i64exit_22_r0[i]
		: main_legup_memset_4_i64exit_22_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_22_reg[i]
		= (main_legup_memset_4_i64exit_22_reg_r0[i]==main_legup_memset_4_i64exit_22_reg_r1[i])? main_legup_memset_4_i64exit_22_reg_r0[i]
		: main_legup_memset_4_i64exit_22_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_23[i]
		= (main_legup_memset_4_i64exit_23_r0[i]==main_legup_memset_4_i64exit_23_r1[i])? main_legup_memset_4_i64exit_23_r0[i]
		: main_legup_memset_4_i64exit_23_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_23_reg[i]
		= (main_legup_memset_4_i64exit_23_reg_r0[i]==main_legup_memset_4_i64exit_23_reg_r1[i])? main_legup_memset_4_i64exit_23_reg_r0[i]
		: main_legup_memset_4_i64exit_23_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_24[i]
		= (main_legup_memset_4_i64exit_24_r0[i]==main_legup_memset_4_i64exit_24_r1[i])? main_legup_memset_4_i64exit_24_r0[i]
		: main_legup_memset_4_i64exit_24_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_24_reg[i]
		= (main_legup_memset_4_i64exit_24_reg_r0[i]==main_legup_memset_4_i64exit_24_reg_r1[i])? main_legup_memset_4_i64exit_24_reg_r0[i]
		: main_legup_memset_4_i64exit_24_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_25[i]
		= (main_legup_memset_4_i64exit_25_r0[i]==main_legup_memset_4_i64exit_25_r1[i])? main_legup_memset_4_i64exit_25_r0[i]
		: main_legup_memset_4_i64exit_25_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_25_reg[i]
		= (main_legup_memset_4_i64exit_25_reg_r0[i]==main_legup_memset_4_i64exit_25_reg_r1[i])? main_legup_memset_4_i64exit_25_reg_r0[i]
		: main_legup_memset_4_i64exit_25_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_26[i]
		= (main_legup_memset_4_i64exit_26_r0[i]==main_legup_memset_4_i64exit_26_r1[i])? main_legup_memset_4_i64exit_26_r0[i]
		: main_legup_memset_4_i64exit_26_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_26_reg[i]
		= (main_legup_memset_4_i64exit_26_reg_r0[i]==main_legup_memset_4_i64exit_26_reg_r1[i])? main_legup_memset_4_i64exit_26_reg_r0[i]
		: main_legup_memset_4_i64exit_26_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_27[i]
		= (main_legup_memset_4_i64exit_27_r0[i]==main_legup_memset_4_i64exit_27_r1[i])? main_legup_memset_4_i64exit_27_r0[i]
		: main_legup_memset_4_i64exit_27_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_27_reg[i]
		= (main_legup_memset_4_i64exit_27_reg_r0[i]==main_legup_memset_4_i64exit_27_reg_r1[i])? main_legup_memset_4_i64exit_27_reg_r0[i]
		: main_legup_memset_4_i64exit_27_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_28[i]
		= (main_legup_memset_4_i64exit_28_r0[i]==main_legup_memset_4_i64exit_28_r1[i])? main_legup_memset_4_i64exit_28_r0[i]
		: main_legup_memset_4_i64exit_28_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_28_reg[i]
		= (main_legup_memset_4_i64exit_28_reg_r0[i]==main_legup_memset_4_i64exit_28_reg_r1[i])? main_legup_memset_4_i64exit_28_reg_r0[i]
		: main_legup_memset_4_i64exit_28_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_29[i]
		= (main_legup_memset_4_i64exit_29_r0[i]==main_legup_memset_4_i64exit_29_r1[i])? main_legup_memset_4_i64exit_29_r0[i]
		: main_legup_memset_4_i64exit_29_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_29_reg[i]
		= (main_legup_memset_4_i64exit_29_reg_r0[i]==main_legup_memset_4_i64exit_29_reg_r1[i])? main_legup_memset_4_i64exit_29_reg_r0[i]
		: main_legup_memset_4_i64exit_29_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_ph20[i]
		= (main_legup_memset_4_i64exit_ph20_r0[i]==main_legup_memset_4_i64exit_ph20_r1[i])? main_legup_memset_4_i64exit_ph20_r0[i]
		: main_legup_memset_4_i64exit_ph20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_ph20_reg[i]
		= (main_legup_memset_4_i64exit_ph20_reg_r0[i]==main_legup_memset_4_i64exit_ph20_reg_r1[i])? main_legup_memset_4_i64exit_ph20_reg_r0[i]
		: main_legup_memset_4_i64exit_ph20_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_ph10[i]
		= (main_legup_memset_4_i64exit_ph10_r0[i]==main_legup_memset_4_i64exit_ph10_r1[i])? main_legup_memset_4_i64exit_ph10_r0[i]
		: main_legup_memset_4_i64exit_ph10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_ph10_reg[i]
		= (main_legup_memset_4_i64exit_ph10_reg_r0[i]==main_legup_memset_4_i64exit_ph10_reg_r1[i])? main_legup_memset_4_i64exit_ph10_reg_r0[i]
		: main_legup_memset_4_i64exit_ph10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_nbh0[i]
		= (main_legup_memset_4_i64exit_nbh0_r0[i]==main_legup_memset_4_i64exit_nbh0_r1[i])? main_legup_memset_4_i64exit_nbh0_r0[i]
		: main_legup_memset_4_i64exit_nbh0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_nbh0_reg[i]
		= (main_legup_memset_4_i64exit_nbh0_reg_r0[i]==main_legup_memset_4_i64exit_nbh0_reg_r1[i])? main_legup_memset_4_i64exit_nbh0_reg_r0[i]
		: main_legup_memset_4_i64exit_nbh0_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_deth0[i]
		= (main_legup_memset_4_i64exit_deth0_r0[i]==main_legup_memset_4_i64exit_deth0_r1[i])? main_legup_memset_4_i64exit_deth0_r0[i]
		: main_legup_memset_4_i64exit_deth0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_deth0_reg[i]
		= (main_legup_memset_4_i64exit_deth0_reg_r0[i]==main_legup_memset_4_i64exit_deth0_reg_r1[i])? main_legup_memset_4_i64exit_deth0_reg_r0[i]
		: main_legup_memset_4_i64exit_deth0_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_ah20[i]
		= (main_legup_memset_4_i64exit_ah20_r0[i]==main_legup_memset_4_i64exit_ah20_r1[i])? main_legup_memset_4_i64exit_ah20_r0[i]
		: main_legup_memset_4_i64exit_ah20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_ah20_reg[i]
		= (main_legup_memset_4_i64exit_ah20_reg_r0[i]==main_legup_memset_4_i64exit_ah20_reg_r1[i])? main_legup_memset_4_i64exit_ah20_reg_r0[i]
		: main_legup_memset_4_i64exit_ah20_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_rh20[i]
		= (main_legup_memset_4_i64exit_rh20_r0[i]==main_legup_memset_4_i64exit_rh20_r1[i])? main_legup_memset_4_i64exit_rh20_r0[i]
		: main_legup_memset_4_i64exit_rh20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_rh20_reg[i]
		= (main_legup_memset_4_i64exit_rh20_reg_r0[i]==main_legup_memset_4_i64exit_rh20_reg_r1[i])? main_legup_memset_4_i64exit_rh20_reg_r0[i]
		: main_legup_memset_4_i64exit_rh20_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_ah10[i]
		= (main_legup_memset_4_i64exit_ah10_r0[i]==main_legup_memset_4_i64exit_ah10_r1[i])? main_legup_memset_4_i64exit_ah10_r0[i]
		: main_legup_memset_4_i64exit_ah10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_ah10_reg[i]
		= (main_legup_memset_4_i64exit_ah10_reg_r0[i]==main_legup_memset_4_i64exit_ah10_reg_r1[i])? main_legup_memset_4_i64exit_ah10_reg_r0[i]
		: main_legup_memset_4_i64exit_ah10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_rh10[i]
		= (main_legup_memset_4_i64exit_rh10_r0[i]==main_legup_memset_4_i64exit_rh10_r1[i])? main_legup_memset_4_i64exit_rh10_r0[i]
		: main_legup_memset_4_i64exit_rh10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_rh10_reg[i]
		= (main_legup_memset_4_i64exit_rh10_reg_r0[i]==main_legup_memset_4_i64exit_rh10_reg_r1[i])? main_legup_memset_4_i64exit_rh10_reg_r0[i]
		: main_legup_memset_4_i64exit_rh10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_plt20[i]
		= (main_legup_memset_4_i64exit_plt20_r0[i]==main_legup_memset_4_i64exit_plt20_r1[i])? main_legup_memset_4_i64exit_plt20_r0[i]
		: main_legup_memset_4_i64exit_plt20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_plt20_reg[i]
		= (main_legup_memset_4_i64exit_plt20_reg_r0[i]==main_legup_memset_4_i64exit_plt20_reg_r1[i])? main_legup_memset_4_i64exit_plt20_reg_r0[i]
		: main_legup_memset_4_i64exit_plt20_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_plt10[i]
		= (main_legup_memset_4_i64exit_plt10_r0[i]==main_legup_memset_4_i64exit_plt10_r1[i])? main_legup_memset_4_i64exit_plt10_r0[i]
		: main_legup_memset_4_i64exit_plt10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_plt10_reg[i]
		= (main_legup_memset_4_i64exit_plt10_reg_r0[i]==main_legup_memset_4_i64exit_plt10_reg_r1[i])? main_legup_memset_4_i64exit_plt10_reg_r0[i]
		: main_legup_memset_4_i64exit_plt10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_nbl0[i]
		= (main_legup_memset_4_i64exit_nbl0_r0[i]==main_legup_memset_4_i64exit_nbl0_r1[i])? main_legup_memset_4_i64exit_nbl0_r0[i]
		: main_legup_memset_4_i64exit_nbl0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_nbl0_reg[i]
		= (main_legup_memset_4_i64exit_nbl0_reg_r0[i]==main_legup_memset_4_i64exit_nbl0_reg_r1[i])? main_legup_memset_4_i64exit_nbl0_reg_r0[i]
		: main_legup_memset_4_i64exit_nbl0_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_detl0[i]
		= (main_legup_memset_4_i64exit_detl0_r0[i]==main_legup_memset_4_i64exit_detl0_r1[i])? main_legup_memset_4_i64exit_detl0_r0[i]
		: main_legup_memset_4_i64exit_detl0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_detl0_reg[i]
		= (main_legup_memset_4_i64exit_detl0_reg_r0[i]==main_legup_memset_4_i64exit_detl0_reg_r1[i])? main_legup_memset_4_i64exit_detl0_reg_r0[i]
		: main_legup_memset_4_i64exit_detl0_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_al20[i]
		= (main_legup_memset_4_i64exit_al20_r0[i]==main_legup_memset_4_i64exit_al20_r1[i])? main_legup_memset_4_i64exit_al20_r0[i]
		: main_legup_memset_4_i64exit_al20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_al20_reg[i]
		= (main_legup_memset_4_i64exit_al20_reg_r0[i]==main_legup_memset_4_i64exit_al20_reg_r1[i])? main_legup_memset_4_i64exit_al20_reg_r0[i]
		: main_legup_memset_4_i64exit_al20_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_rlt20[i]
		= (main_legup_memset_4_i64exit_rlt20_r0[i]==main_legup_memset_4_i64exit_rlt20_r1[i])? main_legup_memset_4_i64exit_rlt20_r0[i]
		: main_legup_memset_4_i64exit_rlt20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_rlt20_reg[i]
		= (main_legup_memset_4_i64exit_rlt20_reg_r0[i]==main_legup_memset_4_i64exit_rlt20_reg_r1[i])? main_legup_memset_4_i64exit_rlt20_reg_r0[i]
		: main_legup_memset_4_i64exit_rlt20_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_al10[i]
		= (main_legup_memset_4_i64exit_al10_r0[i]==main_legup_memset_4_i64exit_al10_r1[i])? main_legup_memset_4_i64exit_al10_r0[i]
		: main_legup_memset_4_i64exit_al10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_al10_reg[i]
		= (main_legup_memset_4_i64exit_al10_reg_r0[i]==main_legup_memset_4_i64exit_al10_reg_r1[i])? main_legup_memset_4_i64exit_al10_reg_r0[i]
		: main_legup_memset_4_i64exit_al10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_rlt10[i]
		= (main_legup_memset_4_i64exit_rlt10_r0[i]==main_legup_memset_4_i64exit_rlt10_r1[i])? main_legup_memset_4_i64exit_rlt10_r0[i]
		: main_legup_memset_4_i64exit_rlt10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_rlt10_reg[i]
		= (main_legup_memset_4_i64exit_rlt10_reg_r0[i]==main_legup_memset_4_i64exit_rlt10_reg_r1[i])? main_legup_memset_4_i64exit_rlt10_reg_r0[i]
		: main_legup_memset_4_i64exit_rlt10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_i02i[i]
		= (main_legup_memset_4_i64exit_i02i_r0[i]==main_legup_memset_4_i64exit_i02i_r1[i])? main_legup_memset_4_i64exit_i02i_r0[i]
		: main_legup_memset_4_i64exit_i02i_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_i02i_reg[i]
		= (main_legup_memset_4_i64exit_i02i_reg_r0[i]==main_legup_memset_4_i64exit_i02i_reg_r1[i])? main_legup_memset_4_i64exit_i02i_reg_r0[i]
		: main_legup_memset_4_i64exit_i02i_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_30[i]
		= (main_legup_memset_4_i64exit_30_r0[i]==main_legup_memset_4_i64exit_30_r1[i])? main_legup_memset_4_i64exit_30_r0[i]
		: main_legup_memset_4_i64exit_30_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_30_reg[i]
		= (main_legup_memset_4_i64exit_30_reg_r0[i]==main_legup_memset_4_i64exit_30_reg_r1[i])? main_legup_memset_4_i64exit_30_reg_r0[i]
		: main_legup_memset_4_i64exit_30_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_31[i]
		= (main_legup_memset_4_i64exit_31_r0[i]==main_legup_memset_4_i64exit_31_r1[i])? main_legup_memset_4_i64exit_31_r0[i]
		: main_legup_memset_4_i64exit_31_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_legup_memset_4_i64exit_scevgep11[i]
		= (main_legup_memset_4_i64exit_scevgep11_r0[i]==main_legup_memset_4_i64exit_scevgep11_r1[i])? main_legup_memset_4_i64exit_scevgep11_r0[i]
		: main_legup_memset_4_i64exit_scevgep11_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_legup_memset_4_i64exit_scevgep11_reg[i]
		= (main_legup_memset_4_i64exit_scevgep11_reg_r0[i]==main_legup_memset_4_i64exit_scevgep11_reg_r1[i])? main_legup_memset_4_i64exit_scevgep11_reg_r0[i]
		: main_legup_memset_4_i64exit_scevgep11_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_legup_memset_4_i64exit_scevgep12[i]
		= (main_legup_memset_4_i64exit_scevgep12_r0[i]==main_legup_memset_4_i64exit_scevgep12_r1[i])? main_legup_memset_4_i64exit_scevgep12_r0[i]
		: main_legup_memset_4_i64exit_scevgep12_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_legup_memset_4_i64exit_scevgep12_reg[i]
		= (main_legup_memset_4_i64exit_scevgep12_reg_r0[i]==main_legup_memset_4_i64exit_scevgep12_reg_r1[i])? main_legup_memset_4_i64exit_scevgep12_reg_r0[i]
		: main_legup_memset_4_i64exit_scevgep12_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_32[i]
		= (main_legup_memset_4_i64exit_32_r0[i]==main_legup_memset_4_i64exit_32_r1[i])? main_legup_memset_4_i64exit_32_r0[i]
		: main_legup_memset_4_i64exit_32_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_32_reg[i]
		= (main_legup_memset_4_i64exit_32_reg_r0[i]==main_legup_memset_4_i64exit_32_reg_r1[i])? main_legup_memset_4_i64exit_32_reg_r0[i]
		: main_legup_memset_4_i64exit_32_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_33[i]
		= (main_legup_memset_4_i64exit_33_r0[i]==main_legup_memset_4_i64exit_33_r1[i])? main_legup_memset_4_i64exit_33_r0[i]
		: main_legup_memset_4_i64exit_33_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_33_reg[i]
		= (main_legup_memset_4_i64exit_33_reg_r0[i]==main_legup_memset_4_i64exit_33_reg_r1[i])? main_legup_memset_4_i64exit_33_reg_r0[i]
		: main_legup_memset_4_i64exit_33_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_34[i]
		= (main_legup_memset_4_i64exit_34_r0[i]==main_legup_memset_4_i64exit_34_r1[i])? main_legup_memset_4_i64exit_34_r0[i]
		: main_legup_memset_4_i64exit_34_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_35[i]
		= (main_legup_memset_4_i64exit_35_r0[i]==main_legup_memset_4_i64exit_35_r1[i])? main_legup_memset_4_i64exit_35_r0[i]
		: main_legup_memset_4_i64exit_35_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_36[i]
		= (main_legup_memset_4_i64exit_36_r0[i]==main_legup_memset_4_i64exit_36_r1[i])? main_legup_memset_4_i64exit_36_r0[i]
		: main_legup_memset_4_i64exit_36_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_37[i]
		= (main_legup_memset_4_i64exit_37_r0[i]==main_legup_memset_4_i64exit_37_r1[i])? main_legup_memset_4_i64exit_37_r0[i]
		: main_legup_memset_4_i64exit_37_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_37_reg[i]
		= (main_legup_memset_4_i64exit_37_reg_r0[i]==main_legup_memset_4_i64exit_37_reg_r1[i])? main_legup_memset_4_i64exit_37_reg_r0[i]
		: main_legup_memset_4_i64exit_37_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_38[i]
		= (main_legup_memset_4_i64exit_38_r0[i]==main_legup_memset_4_i64exit_38_r1[i])? main_legup_memset_4_i64exit_38_r0[i]
		: main_legup_memset_4_i64exit_38_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_39[i]
		= (main_legup_memset_4_i64exit_39_r0[i]==main_legup_memset_4_i64exit_39_r1[i])? main_legup_memset_4_i64exit_39_r0[i]
		: main_legup_memset_4_i64exit_39_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_39_reg[i]
		= (main_legup_memset_4_i64exit_39_reg_r0[i]==main_legup_memset_4_i64exit_39_reg_r1[i])? main_legup_memset_4_i64exit_39_reg_r0[i]
		: main_legup_memset_4_i64exit_39_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_40[i]
		= (main_legup_memset_4_i64exit_40_r0[i]==main_legup_memset_4_i64exit_40_r1[i])? main_legup_memset_4_i64exit_40_r0[i]
		: main_legup_memset_4_i64exit_40_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_40_reg[i]
		= (main_legup_memset_4_i64exit_40_reg_r0[i]==main_legup_memset_4_i64exit_40_reg_r1[i])? main_legup_memset_4_i64exit_40_reg_r0[i]
		: main_legup_memset_4_i64exit_40_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_41[i]
		= (main_legup_memset_4_i64exit_41_r0[i]==main_legup_memset_4_i64exit_41_r1[i])? main_legup_memset_4_i64exit_41_r0[i]
		: main_legup_memset_4_i64exit_41_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_41_reg[i]
		= (main_legup_memset_4_i64exit_41_reg_r0[i]==main_legup_memset_4_i64exit_41_reg_r1[i])? main_legup_memset_4_i64exit_41_reg_r0[i]
		: main_legup_memset_4_i64exit_41_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_42[i]
		= (main_legup_memset_4_i64exit_42_r0[i]==main_legup_memset_4_i64exit_42_r1[i])? main_legup_memset_4_i64exit_42_r0[i]
		: main_legup_memset_4_i64exit_42_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_42_reg[i]
		= (main_legup_memset_4_i64exit_42_reg_r0[i]==main_legup_memset_4_i64exit_42_reg_r1[i])? main_legup_memset_4_i64exit_42_reg_r0[i]
		: main_legup_memset_4_i64exit_42_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_43[i]
		= (main_legup_memset_4_i64exit_43_r0[i]==main_legup_memset_4_i64exit_43_r1[i])? main_legup_memset_4_i64exit_43_r0[i]
		: main_legup_memset_4_i64exit_43_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_43_reg[i]
		= (main_legup_memset_4_i64exit_43_reg_r0[i]==main_legup_memset_4_i64exit_43_reg_r1[i])? main_legup_memset_4_i64exit_43_reg_r0[i]
		: main_legup_memset_4_i64exit_43_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_44[i]
		= (main_legup_memset_4_i64exit_44_r0[i]==main_legup_memset_4_i64exit_44_r1[i])? main_legup_memset_4_i64exit_44_r0[i]
		: main_legup_memset_4_i64exit_44_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_44_reg[i]
		= (main_legup_memset_4_i64exit_44_reg_r0[i]==main_legup_memset_4_i64exit_44_reg_r1[i])? main_legup_memset_4_i64exit_44_reg_r0[i]
		: main_legup_memset_4_i64exit_44_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_45[i]
		= (main_legup_memset_4_i64exit_45_r0[i]==main_legup_memset_4_i64exit_45_r1[i])? main_legup_memset_4_i64exit_45_r0[i]
		: main_legup_memset_4_i64exit_45_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_45_reg[i]
		= (main_legup_memset_4_i64exit_45_reg_r0[i]==main_legup_memset_4_i64exit_45_reg_r1[i])? main_legup_memset_4_i64exit_45_reg_r0[i]
		: main_legup_memset_4_i64exit_45_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_46[i]
		= (main_legup_memset_4_i64exit_46_r0[i]==main_legup_memset_4_i64exit_46_r1[i])? main_legup_memset_4_i64exit_46_r0[i]
		: main_legup_memset_4_i64exit_46_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_46_reg[i]
		= (main_legup_memset_4_i64exit_46_reg_r0[i]==main_legup_memset_4_i64exit_46_reg_r1[i])? main_legup_memset_4_i64exit_46_reg_r0[i]
		: main_legup_memset_4_i64exit_46_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_47[i]
		= (main_legup_memset_4_i64exit_47_r0[i]==main_legup_memset_4_i64exit_47_r1[i])? main_legup_memset_4_i64exit_47_r0[i]
		: main_legup_memset_4_i64exit_47_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_47_reg[i]
		= (main_legup_memset_4_i64exit_47_reg_r0[i]==main_legup_memset_4_i64exit_47_reg_r1[i])? main_legup_memset_4_i64exit_47_reg_r0[i]
		: main_legup_memset_4_i64exit_47_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_48[i]
		= (main_legup_memset_4_i64exit_48_r0[i]==main_legup_memset_4_i64exit_48_r1[i])? main_legup_memset_4_i64exit_48_r0[i]
		: main_legup_memset_4_i64exit_48_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_48_reg[i]
		= (main_legup_memset_4_i64exit_48_reg_r0[i]==main_legup_memset_4_i64exit_48_reg_r1[i])? main_legup_memset_4_i64exit_48_reg_r0[i]
		: main_legup_memset_4_i64exit_48_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_49[i]
		= (main_legup_memset_4_i64exit_49_r0[i]==main_legup_memset_4_i64exit_49_r1[i])? main_legup_memset_4_i64exit_49_r0[i]
		: main_legup_memset_4_i64exit_49_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_49_reg[i]
		= (main_legup_memset_4_i64exit_49_reg_r0[i]==main_legup_memset_4_i64exit_49_reg_r1[i])? main_legup_memset_4_i64exit_49_reg_r0[i]
		: main_legup_memset_4_i64exit_49_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_50[i]
		= (main_legup_memset_4_i64exit_50_r0[i]==main_legup_memset_4_i64exit_50_r1[i])? main_legup_memset_4_i64exit_50_r0[i]
		: main_legup_memset_4_i64exit_50_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_50_reg[i]
		= (main_legup_memset_4_i64exit_50_reg_r0[i]==main_legup_memset_4_i64exit_50_reg_r1[i])? main_legup_memset_4_i64exit_50_reg_r0[i]
		: main_legup_memset_4_i64exit_50_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_51[i]
		= (main_legup_memset_4_i64exit_51_r0[i]==main_legup_memset_4_i64exit_51_r1[i])? main_legup_memset_4_i64exit_51_r0[i]
		: main_legup_memset_4_i64exit_51_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_51_reg[i]
		= (main_legup_memset_4_i64exit_51_reg_r0[i]==main_legup_memset_4_i64exit_51_reg_r1[i])? main_legup_memset_4_i64exit_51_reg_r0[i]
		: main_legup_memset_4_i64exit_51_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_52[i]
		= (main_legup_memset_4_i64exit_52_r0[i]==main_legup_memset_4_i64exit_52_r1[i])? main_legup_memset_4_i64exit_52_r0[i]
		: main_legup_memset_4_i64exit_52_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_52_reg[i]
		= (main_legup_memset_4_i64exit_52_reg_r0[i]==main_legup_memset_4_i64exit_52_reg_r1[i])? main_legup_memset_4_i64exit_52_reg_r0[i]
		: main_legup_memset_4_i64exit_52_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_53[i]
		= (main_legup_memset_4_i64exit_53_r0[i]==main_legup_memset_4_i64exit_53_r1[i])? main_legup_memset_4_i64exit_53_r0[i]
		: main_legup_memset_4_i64exit_53_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_53_reg[i]
		= (main_legup_memset_4_i64exit_53_reg_r0[i]==main_legup_memset_4_i64exit_53_reg_r1[i])? main_legup_memset_4_i64exit_53_reg_r0[i]
		: main_legup_memset_4_i64exit_53_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_54[i]
		= (main_legup_memset_4_i64exit_54_r0[i]==main_legup_memset_4_i64exit_54_r1[i])? main_legup_memset_4_i64exit_54_r0[i]
		: main_legup_memset_4_i64exit_54_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_54_reg[i]
		= (main_legup_memset_4_i64exit_54_reg_r0[i]==main_legup_memset_4_i64exit_54_reg_r1[i])? main_legup_memset_4_i64exit_54_reg_r0[i]
		: main_legup_memset_4_i64exit_54_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_55[i]
		= (main_legup_memset_4_i64exit_55_r0[i]==main_legup_memset_4_i64exit_55_r1[i])? main_legup_memset_4_i64exit_55_r0[i]
		: main_legup_memset_4_i64exit_55_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_55_reg[i]
		= (main_legup_memset_4_i64exit_55_reg_r0[i]==main_legup_memset_4_i64exit_55_reg_r1[i])? main_legup_memset_4_i64exit_55_reg_r0[i]
		: main_legup_memset_4_i64exit_55_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_56[i]
		= (main_legup_memset_4_i64exit_56_r0[i]==main_legup_memset_4_i64exit_56_r1[i])? main_legup_memset_4_i64exit_56_r0[i]
		: main_legup_memset_4_i64exit_56_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_56_reg[i]
		= (main_legup_memset_4_i64exit_56_reg_r0[i]==main_legup_memset_4_i64exit_56_reg_r1[i])? main_legup_memset_4_i64exit_56_reg_r0[i]
		: main_legup_memset_4_i64exit_56_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_57[i]
		= (main_legup_memset_4_i64exit_57_r0[i]==main_legup_memset_4_i64exit_57_r1[i])? main_legup_memset_4_i64exit_57_r0[i]
		: main_legup_memset_4_i64exit_57_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_57_reg[i]
		= (main_legup_memset_4_i64exit_57_reg_r0[i]==main_legup_memset_4_i64exit_57_reg_r1[i])? main_legup_memset_4_i64exit_57_reg_r0[i]
		: main_legup_memset_4_i64exit_57_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_58[i]
		= (main_legup_memset_4_i64exit_58_r0[i]==main_legup_memset_4_i64exit_58_r1[i])? main_legup_memset_4_i64exit_58_r0[i]
		: main_legup_memset_4_i64exit_58_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_58_reg[i]
		= (main_legup_memset_4_i64exit_58_reg_r0[i]==main_legup_memset_4_i64exit_58_reg_r1[i])? main_legup_memset_4_i64exit_58_reg_r0[i]
		: main_legup_memset_4_i64exit_58_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_59[i]
		= (main_legup_memset_4_i64exit_59_r0[i]==main_legup_memset_4_i64exit_59_r1[i])? main_legup_memset_4_i64exit_59_r0[i]
		: main_legup_memset_4_i64exit_59_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_59_reg[i]
		= (main_legup_memset_4_i64exit_59_reg_r0[i]==main_legup_memset_4_i64exit_59_reg_r1[i])? main_legup_memset_4_i64exit_59_reg_r0[i]
		: main_legup_memset_4_i64exit_59_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_60[i]
		= (main_legup_memset_4_i64exit_60_r0[i]==main_legup_memset_4_i64exit_60_r1[i])? main_legup_memset_4_i64exit_60_r0[i]
		: main_legup_memset_4_i64exit_60_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_60_reg[i]
		= (main_legup_memset_4_i64exit_60_reg_r0[i]==main_legup_memset_4_i64exit_60_reg_r1[i])? main_legup_memset_4_i64exit_60_reg_r0[i]
		: main_legup_memset_4_i64exit_60_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_61[i]
		= (main_legup_memset_4_i64exit_61_r0[i]==main_legup_memset_4_i64exit_61_r1[i])? main_legup_memset_4_i64exit_61_r0[i]
		: main_legup_memset_4_i64exit_61_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_61_reg[i]
		= (main_legup_memset_4_i64exit_61_reg_r0[i]==main_legup_memset_4_i64exit_61_reg_r1[i])? main_legup_memset_4_i64exit_61_reg_r0[i]
		: main_legup_memset_4_i64exit_61_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_62[i]
		= (main_legup_memset_4_i64exit_62_r0[i]==main_legup_memset_4_i64exit_62_r1[i])? main_legup_memset_4_i64exit_62_r0[i]
		: main_legup_memset_4_i64exit_62_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_62_reg[i]
		= (main_legup_memset_4_i64exit_62_reg_r0[i]==main_legup_memset_4_i64exit_62_reg_r1[i])? main_legup_memset_4_i64exit_62_reg_r0[i]
		: main_legup_memset_4_i64exit_62_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_63[i]
		= (main_legup_memset_4_i64exit_63_r0[i]==main_legup_memset_4_i64exit_63_r1[i])? main_legup_memset_4_i64exit_63_r0[i]
		: main_legup_memset_4_i64exit_63_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_63_reg[i]
		= (main_legup_memset_4_i64exit_63_reg_r0[i]==main_legup_memset_4_i64exit_63_reg_r1[i])? main_legup_memset_4_i64exit_63_reg_r0[i]
		: main_legup_memset_4_i64exit_63_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_64[i]
		= (main_legup_memset_4_i64exit_64_r0[i]==main_legup_memset_4_i64exit_64_r1[i])? main_legup_memset_4_i64exit_64_r0[i]
		: main_legup_memset_4_i64exit_64_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_64_reg[i]
		= (main_legup_memset_4_i64exit_64_reg_r0[i]==main_legup_memset_4_i64exit_64_reg_r1[i])? main_legup_memset_4_i64exit_64_reg_r0[i]
		: main_legup_memset_4_i64exit_64_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_65[i]
		= (main_legup_memset_4_i64exit_65_r0[i]==main_legup_memset_4_i64exit_65_r1[i])? main_legup_memset_4_i64exit_65_r0[i]
		: main_legup_memset_4_i64exit_65_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_65_reg[i]
		= (main_legup_memset_4_i64exit_65_reg_r0[i]==main_legup_memset_4_i64exit_65_reg_r1[i])? main_legup_memset_4_i64exit_65_reg_r0[i]
		: main_legup_memset_4_i64exit_65_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_66[i]
		= (main_legup_memset_4_i64exit_66_r0[i]==main_legup_memset_4_i64exit_66_r1[i])? main_legup_memset_4_i64exit_66_r0[i]
		: main_legup_memset_4_i64exit_66_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_66_reg[i]
		= (main_legup_memset_4_i64exit_66_reg_r0[i]==main_legup_memset_4_i64exit_66_reg_r1[i])? main_legup_memset_4_i64exit_66_reg_r0[i]
		: main_legup_memset_4_i64exit_66_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_67[i]
		= (main_legup_memset_4_i64exit_67_r0[i]==main_legup_memset_4_i64exit_67_r1[i])? main_legup_memset_4_i64exit_67_r0[i]
		: main_legup_memset_4_i64exit_67_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_67_reg[i]
		= (main_legup_memset_4_i64exit_67_reg_r0[i]==main_legup_memset_4_i64exit_67_reg_r1[i])? main_legup_memset_4_i64exit_67_reg_r0[i]
		: main_legup_memset_4_i64exit_67_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_68[i]
		= (main_legup_memset_4_i64exit_68_r0[i]==main_legup_memset_4_i64exit_68_r1[i])? main_legup_memset_4_i64exit_68_r0[i]
		: main_legup_memset_4_i64exit_68_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_68_reg[i]
		= (main_legup_memset_4_i64exit_68_reg_r0[i]==main_legup_memset_4_i64exit_68_reg_r1[i])? main_legup_memset_4_i64exit_68_reg_r0[i]
		: main_legup_memset_4_i64exit_68_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_69[i]
		= (main_legup_memset_4_i64exit_69_r0[i]==main_legup_memset_4_i64exit_69_r1[i])? main_legup_memset_4_i64exit_69_r0[i]
		: main_legup_memset_4_i64exit_69_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_69_reg[i]
		= (main_legup_memset_4_i64exit_69_reg_r0[i]==main_legup_memset_4_i64exit_69_reg_r1[i])? main_legup_memset_4_i64exit_69_reg_r0[i]
		: main_legup_memset_4_i64exit_69_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_70[i]
		= (main_legup_memset_4_i64exit_70_r0[i]==main_legup_memset_4_i64exit_70_r1[i])? main_legup_memset_4_i64exit_70_r0[i]
		: main_legup_memset_4_i64exit_70_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_70_reg[i]
		= (main_legup_memset_4_i64exit_70_reg_r0[i]==main_legup_memset_4_i64exit_70_reg_r1[i])? main_legup_memset_4_i64exit_70_reg_r0[i]
		: main_legup_memset_4_i64exit_70_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_71[i]
		= (main_legup_memset_4_i64exit_71_r0[i]==main_legup_memset_4_i64exit_71_r1[i])? main_legup_memset_4_i64exit_71_r0[i]
		: main_legup_memset_4_i64exit_71_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_71_reg[i]
		= (main_legup_memset_4_i64exit_71_reg_r0[i]==main_legup_memset_4_i64exit_71_reg_r1[i])? main_legup_memset_4_i64exit_71_reg_r0[i]
		: main_legup_memset_4_i64exit_71_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_72[i]
		= (main_legup_memset_4_i64exit_72_r0[i]==main_legup_memset_4_i64exit_72_r1[i])? main_legup_memset_4_i64exit_72_r0[i]
		: main_legup_memset_4_i64exit_72_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_72_reg[i]
		= (main_legup_memset_4_i64exit_72_reg_r0[i]==main_legup_memset_4_i64exit_72_reg_r1[i])? main_legup_memset_4_i64exit_72_reg_r0[i]
		: main_legup_memset_4_i64exit_72_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_73[i]
		= (main_legup_memset_4_i64exit_73_r0[i]==main_legup_memset_4_i64exit_73_r1[i])? main_legup_memset_4_i64exit_73_r0[i]
		: main_legup_memset_4_i64exit_73_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_73_reg[i]
		= (main_legup_memset_4_i64exit_73_reg_r0[i]==main_legup_memset_4_i64exit_73_reg_r1[i])? main_legup_memset_4_i64exit_73_reg_r0[i]
		: main_legup_memset_4_i64exit_73_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_74[i]
		= (main_legup_memset_4_i64exit_74_r0[i]==main_legup_memset_4_i64exit_74_r1[i])? main_legup_memset_4_i64exit_74_r0[i]
		: main_legup_memset_4_i64exit_74_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_74_reg[i]
		= (main_legup_memset_4_i64exit_74_reg_r0[i]==main_legup_memset_4_i64exit_74_reg_r1[i])? main_legup_memset_4_i64exit_74_reg_r0[i]
		: main_legup_memset_4_i64exit_74_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_75[i]
		= (main_legup_memset_4_i64exit_75_r0[i]==main_legup_memset_4_i64exit_75_r1[i])? main_legup_memset_4_i64exit_75_r0[i]
		: main_legup_memset_4_i64exit_75_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_75_reg[i]
		= (main_legup_memset_4_i64exit_75_reg_r0[i]==main_legup_memset_4_i64exit_75_reg_r1[i])? main_legup_memset_4_i64exit_75_reg_r0[i]
		: main_legup_memset_4_i64exit_75_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_76[i]
		= (main_legup_memset_4_i64exit_76_r0[i]==main_legup_memset_4_i64exit_76_r1[i])? main_legup_memset_4_i64exit_76_r0[i]
		: main_legup_memset_4_i64exit_76_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_76_reg[i]
		= (main_legup_memset_4_i64exit_76_reg_r0[i]==main_legup_memset_4_i64exit_76_reg_r1[i])? main_legup_memset_4_i64exit_76_reg_r0[i]
		: main_legup_memset_4_i64exit_76_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_77[i]
		= (main_legup_memset_4_i64exit_77_r0[i]==main_legup_memset_4_i64exit_77_r1[i])? main_legup_memset_4_i64exit_77_r0[i]
		: main_legup_memset_4_i64exit_77_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_78[i]
		= (main_legup_memset_4_i64exit_78_r0[i]==main_legup_memset_4_i64exit_78_r1[i])? main_legup_memset_4_i64exit_78_r0[i]
		: main_legup_memset_4_i64exit_78_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_79[i]
		= (main_legup_memset_4_i64exit_79_r0[i]==main_legup_memset_4_i64exit_79_r1[i])? main_legup_memset_4_i64exit_79_r0[i]
		: main_legup_memset_4_i64exit_79_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_79_reg[i]
		= (main_legup_memset_4_i64exit_79_reg_r0[i]==main_legup_memset_4_i64exit_79_reg_r1[i])? main_legup_memset_4_i64exit_79_reg_r0[i]
		: main_legup_memset_4_i64exit_79_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_80[i]
		= (main_legup_memset_4_i64exit_80_r0[i]==main_legup_memset_4_i64exit_80_r1[i])? main_legup_memset_4_i64exit_80_r0[i]
		: main_legup_memset_4_i64exit_80_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_81[i]
		= (main_legup_memset_4_i64exit_81_r0[i]==main_legup_memset_4_i64exit_81_r1[i])? main_legup_memset_4_i64exit_81_r0[i]
		: main_legup_memset_4_i64exit_81_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_81_reg[i]
		= (main_legup_memset_4_i64exit_81_reg_r0[i]==main_legup_memset_4_i64exit_81_reg_r1[i])? main_legup_memset_4_i64exit_81_reg_r0[i]
		: main_legup_memset_4_i64exit_81_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_82[i]
		= (main_legup_memset_4_i64exit_82_r0[i]==main_legup_memset_4_i64exit_82_r1[i])? main_legup_memset_4_i64exit_82_r0[i]
		: main_legup_memset_4_i64exit_82_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_83[i]
		= (main_legup_memset_4_i64exit_83_r0[i]==main_legup_memset_4_i64exit_83_r1[i])? main_legup_memset_4_i64exit_83_r0[i]
		: main_legup_memset_4_i64exit_83_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_84[i]
		= (main_legup_memset_4_i64exit_84_r0[i]==main_legup_memset_4_i64exit_84_r1[i])? main_legup_memset_4_i64exit_84_r0[i]
		: main_legup_memset_4_i64exit_84_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_84_reg[i]
		= (main_legup_memset_4_i64exit_84_reg_r0[i]==main_legup_memset_4_i64exit_84_reg_r1[i])? main_legup_memset_4_i64exit_84_reg_r0[i]
		: main_legup_memset_4_i64exit_84_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_85[i]
		= (main_legup_memset_4_i64exit_85_r0[i]==main_legup_memset_4_i64exit_85_r1[i])? main_legup_memset_4_i64exit_85_r0[i]
		: main_legup_memset_4_i64exit_85_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_86[i]
		= (main_legup_memset_4_i64exit_86_r0[i]==main_legup_memset_4_i64exit_86_r1[i])? main_legup_memset_4_i64exit_86_r0[i]
		: main_legup_memset_4_i64exit_86_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_87[i]
		= (main_legup_memset_4_i64exit_87_r0[i]==main_legup_memset_4_i64exit_87_r1[i])? main_legup_memset_4_i64exit_87_r0[i]
		: main_legup_memset_4_i64exit_87_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_87_reg[i]
		= (main_legup_memset_4_i64exit_87_reg_r0[i]==main_legup_memset_4_i64exit_87_reg_r1[i])? main_legup_memset_4_i64exit_87_reg_r0[i]
		: main_legup_memset_4_i64exit_87_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_88[i]
		= (main_legup_memset_4_i64exit_88_r0[i]==main_legup_memset_4_i64exit_88_r1[i])? main_legup_memset_4_i64exit_88_r0[i]
		: main_legup_memset_4_i64exit_88_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_89[i]
		= (main_legup_memset_4_i64exit_89_r0[i]==main_legup_memset_4_i64exit_89_r1[i])? main_legup_memset_4_i64exit_89_r0[i]
		: main_legup_memset_4_i64exit_89_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_90[i]
		= (main_legup_memset_4_i64exit_90_r0[i]==main_legup_memset_4_i64exit_90_r1[i])? main_legup_memset_4_i64exit_90_r0[i]
		: main_legup_memset_4_i64exit_90_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_91[i]
		= (main_legup_memset_4_i64exit_91_r0[i]==main_legup_memset_4_i64exit_91_r1[i])? main_legup_memset_4_i64exit_91_r0[i]
		: main_legup_memset_4_i64exit_91_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_91_reg[i]
		= (main_legup_memset_4_i64exit_91_reg_r0[i]==main_legup_memset_4_i64exit_91_reg_r1[i])? main_legup_memset_4_i64exit_91_reg_r0[i]
		: main_legup_memset_4_i64exit_91_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_92[i]
		= (main_legup_memset_4_i64exit_92_r0[i]==main_legup_memset_4_i64exit_92_r1[i])? main_legup_memset_4_i64exit_92_r0[i]
		: main_legup_memset_4_i64exit_92_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_92_reg[i]
		= (main_legup_memset_4_i64exit_92_reg_r0[i]==main_legup_memset_4_i64exit_92_reg_r1[i])? main_legup_memset_4_i64exit_92_reg_r0[i]
		: main_legup_memset_4_i64exit_92_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_93[i]
		= (main_legup_memset_4_i64exit_93_r0[i]==main_legup_memset_4_i64exit_93_r1[i])? main_legup_memset_4_i64exit_93_r0[i]
		: main_legup_memset_4_i64exit_93_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_94[i]
		= (main_legup_memset_4_i64exit_94_r0[i]==main_legup_memset_4_i64exit_94_r1[i])? main_legup_memset_4_i64exit_94_r0[i]
		: main_legup_memset_4_i64exit_94_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_95[i]
		= (main_legup_memset_4_i64exit_95_r0[i]==main_legup_memset_4_i64exit_95_r1[i])? main_legup_memset_4_i64exit_95_r0[i]
		: main_legup_memset_4_i64exit_95_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_95_reg[i]
		= (main_legup_memset_4_i64exit_95_reg_r0[i]==main_legup_memset_4_i64exit_95_reg_r1[i])? main_legup_memset_4_i64exit_95_reg_r0[i]
		: main_legup_memset_4_i64exit_95_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_96[i]
		= (main_legup_memset_4_i64exit_96_r0[i]==main_legup_memset_4_i64exit_96_r1[i])? main_legup_memset_4_i64exit_96_r0[i]
		: main_legup_memset_4_i64exit_96_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_96_reg[i]
		= (main_legup_memset_4_i64exit_96_reg_r0[i]==main_legup_memset_4_i64exit_96_reg_r1[i])? main_legup_memset_4_i64exit_96_reg_r0[i]
		: main_legup_memset_4_i64exit_96_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_97[i]
		= (main_legup_memset_4_i64exit_97_r0[i]==main_legup_memset_4_i64exit_97_r1[i])? main_legup_memset_4_i64exit_97_r0[i]
		: main_legup_memset_4_i64exit_97_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_98[i]
		= (main_legup_memset_4_i64exit_98_r0[i]==main_legup_memset_4_i64exit_98_r1[i])? main_legup_memset_4_i64exit_98_r0[i]
		: main_legup_memset_4_i64exit_98_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_99[i]
		= (main_legup_memset_4_i64exit_99_r0[i]==main_legup_memset_4_i64exit_99_r1[i])? main_legup_memset_4_i64exit_99_r0[i]
		: main_legup_memset_4_i64exit_99_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_99_reg[i]
		= (main_legup_memset_4_i64exit_99_reg_r0[i]==main_legup_memset_4_i64exit_99_reg_r1[i])? main_legup_memset_4_i64exit_99_reg_r0[i]
		: main_legup_memset_4_i64exit_99_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_100[i]
		= (main_legup_memset_4_i64exit_100_r0[i]==main_legup_memset_4_i64exit_100_r1[i])? main_legup_memset_4_i64exit_100_r0[i]
		: main_legup_memset_4_i64exit_100_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_101[i]
		= (main_legup_memset_4_i64exit_101_r0[i]==main_legup_memset_4_i64exit_101_r1[i])? main_legup_memset_4_i64exit_101_r0[i]
		: main_legup_memset_4_i64exit_101_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_102[i]
		= (main_legup_memset_4_i64exit_102_r0[i]==main_legup_memset_4_i64exit_102_r1[i])? main_legup_memset_4_i64exit_102_r0[i]
		: main_legup_memset_4_i64exit_102_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_103[i]
		= (main_legup_memset_4_i64exit_103_r0[i]==main_legup_memset_4_i64exit_103_r1[i])? main_legup_memset_4_i64exit_103_r0[i]
		: main_legup_memset_4_i64exit_103_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_103_reg[i]
		= (main_legup_memset_4_i64exit_103_reg_r0[i]==main_legup_memset_4_i64exit_103_reg_r1[i])? main_legup_memset_4_i64exit_103_reg_r0[i]
		: main_legup_memset_4_i64exit_103_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_104[i]
		= (main_legup_memset_4_i64exit_104_r0[i]==main_legup_memset_4_i64exit_104_r1[i])? main_legup_memset_4_i64exit_104_r0[i]
		: main_legup_memset_4_i64exit_104_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_105[i]
		= (main_legup_memset_4_i64exit_105_r0[i]==main_legup_memset_4_i64exit_105_r1[i])? main_legup_memset_4_i64exit_105_r0[i]
		: main_legup_memset_4_i64exit_105_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_105_reg[i]
		= (main_legup_memset_4_i64exit_105_reg_r0[i]==main_legup_memset_4_i64exit_105_reg_r1[i])? main_legup_memset_4_i64exit_105_reg_r0[i]
		: main_legup_memset_4_i64exit_105_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_106[i]
		= (main_legup_memset_4_i64exit_106_r0[i]==main_legup_memset_4_i64exit_106_r1[i])? main_legup_memset_4_i64exit_106_r0[i]
		: main_legup_memset_4_i64exit_106_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_106_reg[i]
		= (main_legup_memset_4_i64exit_106_reg_r0[i]==main_legup_memset_4_i64exit_106_reg_r1[i])? main_legup_memset_4_i64exit_106_reg_r0[i]
		: main_legup_memset_4_i64exit_106_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_107[i]
		= (main_legup_memset_4_i64exit_107_r0[i]==main_legup_memset_4_i64exit_107_r1[i])? main_legup_memset_4_i64exit_107_r0[i]
		: main_legup_memset_4_i64exit_107_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_107_reg[i]
		= (main_legup_memset_4_i64exit_107_reg_r0[i]==main_legup_memset_4_i64exit_107_reg_r1[i])? main_legup_memset_4_i64exit_107_reg_r0[i]
		: main_legup_memset_4_i64exit_107_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_tmpii1[i]
		= (main_legup_memset_4_i64exit_tmpii1_r0[i]==main_legup_memset_4_i64exit_tmpii1_r1[i])? main_legup_memset_4_i64exit_tmpii1_r0[i]
		: main_legup_memset_4_i64exit_tmpii1_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_tmp1ii2[i]
		= (main_legup_memset_4_i64exit_tmp1ii2_r0[i]==main_legup_memset_4_i64exit_tmp1ii2_r1[i])? main_legup_memset_4_i64exit_tmp1ii2_r0[i]
		: main_legup_memset_4_i64exit_tmp1ii2_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_108[i]
		= (main_legup_memset_4_i64exit_108_r0[i]==main_legup_memset_4_i64exit_108_r1[i])? main_legup_memset_4_i64exit_108_r0[i]
		: main_legup_memset_4_i64exit_108_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_109[i]
		= (main_legup_memset_4_i64exit_109_r0[i]==main_legup_memset_4_i64exit_109_r1[i])? main_legup_memset_4_i64exit_109_r0[i]
		: main_legup_memset_4_i64exit_109_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_109_reg[i]
		= (main_legup_memset_4_i64exit_109_reg_r0[i]==main_legup_memset_4_i64exit_109_reg_r1[i])? main_legup_memset_4_i64exit_109_reg_r0[i]
		: main_legup_memset_4_i64exit_109_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_110[i]
		= (main_legup_memset_4_i64exit_110_r0[i]==main_legup_memset_4_i64exit_110_r1[i])? main_legup_memset_4_i64exit_110_r0[i]
		: main_legup_memset_4_i64exit_110_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_110_reg[i]
		= (main_legup_memset_4_i64exit_110_reg_r0[i]==main_legup_memset_4_i64exit_110_reg_r1[i])? main_legup_memset_4_i64exit_110_reg_r0[i]
		: main_legup_memset_4_i64exit_110_reg_r2[i];
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_111
		= (main_legup_memset_4_i64exit_111_r0==main_legup_memset_4_i64exit_111_r1)? main_legup_memset_4_i64exit_111_r0
		: main_legup_memset_4_i64exit_111_r2;
end
always @(*) begin
	main_legup_memset_4_i64exit_111_reg
		= (main_legup_memset_4_i64exit_111_reg_r0==main_legup_memset_4_i64exit_111_reg_r1)? main_legup_memset_4_i64exit_111_reg_r0
		: main_legup_memset_4_i64exit_111_reg_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_112[i]
		= (main_legup_memset_4_i64exit_112_r0[i]==main_legup_memset_4_i64exit_112_r1[i])? main_legup_memset_4_i64exit_112_r0[i]
		: main_legup_memset_4_i64exit_112_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_m0iii[i]
		= (main_legup_memset_4_i64exit_m0iii_r0[i]==main_legup_memset_4_i64exit_m0iii_r1[i])? main_legup_memset_4_i64exit_m0iii_r0[i]
		: main_legup_memset_4_i64exit_m0iii_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_legup_memset_4_i64exit_m0iii_reg[i]
		= (main_legup_memset_4_i64exit_m0iii_reg_r0[i]==main_legup_memset_4_i64exit_m0iii_reg_r1[i])? main_legup_memset_4_i64exit_m0iii_reg_r0[i]
		: main_legup_memset_4_i64exit_m0iii_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_113_114[i]
		= (main_113_114_r0[i]==main_113_114_r1[i])? main_113_114_r0[i]
		: main_113_114_r2[i];
	end
end
always @(*) begin
	main_113_115
		= (main_113_115_r0==main_113_115_r1)? main_113_115_r0
		: main_113_115_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_116_117[i]
		= (main_116_117_r0[i]==main_116_117_r1[i])? main_116_117_r0[i]
		: main_116_117_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_116_117_reg[i]
		= (main_116_117_reg_r0[i]==main_116_117_reg_r1[i])? main_116_117_reg_r0[i]
		: main_116_117_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_116_118[i]
		= (main_116_118_r0[i]==main_116_118_r1[i])? main_116_118_r0[i]
		: main_116_118_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_116_118_reg[i]
		= (main_116_118_reg_r0[i]==main_116_118_reg_r1[i])? main_116_118_reg_r0[i]
		: main_116_118_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_116_scevgep8[i]
		= (main_116_scevgep8_r0[i]==main_116_scevgep8_r1[i])? main_116_scevgep8_r0[i]
		: main_116_scevgep8_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_116_119[i]
		= (main_116_119_r0[i]==main_116_119_r1[i])? main_116_119_r0[i]
		: main_116_119_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_116_120[i]
		= (main_116_120_r0[i]==main_116_120_r1[i])? main_116_120_r0[i]
		: main_116_120_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_116_121[i]
		= (main_116_121_r0[i]==main_116_121_r1[i])? main_116_121_r0[i]
		: main_116_121_r2[i];
	end
end
always @(*) begin
	main_116_122
		= (main_116_122_r0==main_116_122_r1)? main_116_122_r0
		: main_116_122_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_mil0lcssaii[i]
		= (main_quantlexiti_mil0lcssaii_r0[i]==main_quantlexiti_mil0lcssaii_r1[i])? main_quantlexiti_mil0lcssaii_r0[i]
		: main_quantlexiti_mil0lcssaii_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_mil0lcssaii_reg[i]
		= (main_quantlexiti_mil0lcssaii_reg_r0[i]==main_quantlexiti_mil0lcssaii_reg_r1[i])? main_quantlexiti_mil0lcssaii_reg_r0[i]
		: main_quantlexiti_mil0lcssaii_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_quantlexiti_quant26bt_posquant26bt_negii[i]
		= (main_quantlexiti_quant26bt_posquant26bt_negii_r0[i]==main_quantlexiti_quant26bt_posquant26bt_negii_r1[i])? main_quantlexiti_quant26bt_posquant26bt_negii_r0[i]
		: main_quantlexiti_quant26bt_posquant26bt_negii_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_quantlexiti_quant26bt_posquant26bt_negii_reg[i]
		= (main_quantlexiti_quant26bt_posquant26bt_negii_reg_r0[i]==main_quantlexiti_quant26bt_posquant26bt_negii_reg_r1[i])? main_quantlexiti_quant26bt_posquant26bt_negii_reg_r0[i]
		: main_quantlexiti_quant26bt_posquant26bt_negii_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_quantlexiti_ril0inii[i]
		= (main_quantlexiti_ril0inii_r0[i]==main_quantlexiti_ril0inii_r1[i])? main_quantlexiti_ril0inii_r0[i]
		: main_quantlexiti_ril0inii_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_ril0ii[i]
		= (main_quantlexiti_ril0ii_r0[i]==main_quantlexiti_ril0ii_r1[i])? main_quantlexiti_ril0ii_r0[i]
		: main_quantlexiti_ril0ii_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_ril0ii_reg[i]
		= (main_quantlexiti_ril0ii_reg_r0[i]==main_quantlexiti_ril0ii_reg_r1[i])? main_quantlexiti_ril0ii_reg_r0[i]
		: main_quantlexiti_ril0ii_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_123[i]
		= (main_quantlexiti_123_r0[i]==main_quantlexiti_123_r1[i])? main_quantlexiti_123_r0[i]
		: main_quantlexiti_123_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_quantlexiti_124[i]
		= (main_quantlexiti_124_r0[i]==main_quantlexiti_124_r1[i])? main_quantlexiti_124_r0[i]
		: main_quantlexiti_124_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_125[i]
		= (main_quantlexiti_125_r0[i]==main_quantlexiti_125_r1[i])? main_quantlexiti_125_r0[i]
		: main_quantlexiti_125_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_126[i]
		= (main_quantlexiti_126_r0[i]==main_quantlexiti_126_r1[i])? main_quantlexiti_126_r0[i]
		: main_quantlexiti_126_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_127[i]
		= (main_quantlexiti_127_r0[i]==main_quantlexiti_127_r1[i])? main_quantlexiti_127_r0[i]
		: main_quantlexiti_127_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_127_reg[i]
		= (main_quantlexiti_127_reg_r0[i]==main_quantlexiti_127_reg_r1[i])? main_quantlexiti_127_reg_r0[i]
		: main_quantlexiti_127_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_quantlexiti_128[i]
		= (main_quantlexiti_128_r0[i]==main_quantlexiti_128_r1[i])? main_quantlexiti_128_r0[i]
		: main_quantlexiti_128_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_129[i]
		= (main_quantlexiti_129_r0[i]==main_quantlexiti_129_r1[i])? main_quantlexiti_129_r0[i]
		: main_quantlexiti_129_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_130[i]
		= (main_quantlexiti_130_r0[i]==main_quantlexiti_130_r1[i])? main_quantlexiti_130_r0[i]
		: main_quantlexiti_130_r2[i];
	end
end
always @(*) begin
	main_quantlexiti_131
		= (main_quantlexiti_131_r0==main_quantlexiti_131_r1)? main_quantlexiti_131_r0
		: main_quantlexiti_131_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_i12i3[i]
		= (main_quantlexiti_i12i3_r0[i]==main_quantlexiti_i12i3_r1[i])? main_quantlexiti_i12i3_r0[i]
		: main_quantlexiti_i12i3_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_i12i3_reg[i]
		= (main_quantlexiti_i12i3_reg_r0[i]==main_quantlexiti_i12i3_reg_r1[i])? main_quantlexiti_i12i3_reg_r0[i]
		: main_quantlexiti_i12i3_reg_r2[i];
	end
end
always @(*) begin
	main_quantlexiti_132
		= (main_quantlexiti_132_r0==main_quantlexiti_132_r1)? main_quantlexiti_132_r0
		: main_quantlexiti_132_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_i13i4[i]
		= (main_quantlexiti_i13i4_r0[i]==main_quantlexiti_i13i4_r1[i])? main_quantlexiti_i13i4_r0[i]
		: main_quantlexiti_i13i4_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_i13i4_reg[i]
		= (main_quantlexiti_i13i4_reg_r0[i]==main_quantlexiti_i13i4_reg_r1[i])? main_quantlexiti_i13i4_reg_r0[i]
		: main_quantlexiti_i13i4_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_133[i]
		= (main_quantlexiti_133_r0[i]==main_quantlexiti_133_r1[i])? main_quantlexiti_133_r0[i]
		: main_quantlexiti_133_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_134[i]
		= (main_quantlexiti_134_r0[i]==main_quantlexiti_134_r1[i])? main_quantlexiti_134_r0[i]
		: main_quantlexiti_134_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_134_reg[i]
		= (main_quantlexiti_134_reg_r0[i]==main_quantlexiti_134_reg_r1[i])? main_quantlexiti_134_reg_r0[i]
		: main_quantlexiti_134_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_quantlexiti_135[i]
		= (main_quantlexiti_135_r0[i]==main_quantlexiti_135_r1[i])? main_quantlexiti_135_r0[i]
		: main_quantlexiti_135_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_136[i]
		= (main_quantlexiti_136_r0[i]==main_quantlexiti_136_r1[i])? main_quantlexiti_136_r0[i]
		: main_quantlexiti_136_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_136_reg[i]
		= (main_quantlexiti_136_reg_r0[i]==main_quantlexiti_136_reg_r1[i])? main_quantlexiti_136_reg_r0[i]
		: main_quantlexiti_136_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_137[i]
		= (main_quantlexiti_137_r0[i]==main_quantlexiti_137_r1[i])? main_quantlexiti_137_r0[i]
		: main_quantlexiti_137_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_137_reg[i]
		= (main_quantlexiti_137_reg_r0[i]==main_quantlexiti_137_reg_r1[i])? main_quantlexiti_137_reg_r0[i]
		: main_quantlexiti_137_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_138[i]
		= (main_quantlexiti_138_r0[i]==main_quantlexiti_138_r1[i])? main_quantlexiti_138_r0[i]
		: main_quantlexiti_138_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_138_reg[i]
		= (main_quantlexiti_138_reg_r0[i]==main_quantlexiti_138_reg_r1[i])? main_quantlexiti_138_reg_r0[i]
		: main_quantlexiti_138_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_139[i]
		= (main_quantlexiti_139_r0[i]==main_quantlexiti_139_r1[i])? main_quantlexiti_139_r0[i]
		: main_quantlexiti_139_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_139_reg[i]
		= (main_quantlexiti_139_reg_r0[i]==main_quantlexiti_139_reg_r1[i])? main_quantlexiti_139_reg_r0[i]
		: main_quantlexiti_139_reg_r2[i];
	end
end
always @(*) begin
	main_quantlexiti_140
		= (main_quantlexiti_140_r0==main_quantlexiti_140_r1)? main_quantlexiti_140_r0
		: main_quantlexiti_140_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_141[i]
		= (main_quantlexiti_141_r0[i]==main_quantlexiti_141_r1[i])? main_quantlexiti_141_r0[i]
		: main_quantlexiti_141_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_141_reg[i]
		= (main_quantlexiti_141_reg_r0[i]==main_quantlexiti_141_reg_r1[i])? main_quantlexiti_141_reg_r0[i]
		: main_quantlexiti_141_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_1i8i5[i]
		= (main_quantlexiti_1i8i5_r0[i]==main_quantlexiti_1i8i5_r1[i])? main_quantlexiti_1i8i5_r0[i]
		: main_quantlexiti_1i8i5_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_142[i]
		= (main_quantlexiti_142_r0[i]==main_quantlexiti_142_r1[i])? main_quantlexiti_142_r0[i]
		: main_quantlexiti_142_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_143[i]
		= (main_quantlexiti_143_r0[i]==main_quantlexiti_143_r1[i])? main_quantlexiti_143_r0[i]
		: main_quantlexiti_143_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_144[i]
		= (main_quantlexiti_144_r0[i]==main_quantlexiti_144_r1[i])? main_quantlexiti_144_r0[i]
		: main_quantlexiti_144_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_145[i]
		= (main_quantlexiti_145_r0[i]==main_quantlexiti_145_r1[i])? main_quantlexiti_145_r0[i]
		: main_quantlexiti_145_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_146[i]
		= (main_quantlexiti_146_r0[i]==main_quantlexiti_146_r1[i])? main_quantlexiti_146_r0[i]
		: main_quantlexiti_146_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_146_reg[i]
		= (main_quantlexiti_146_reg_r0[i]==main_quantlexiti_146_reg_r1[i])? main_quantlexiti_146_reg_r0[i]
		: main_quantlexiti_146_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_147[i]
		= (main_quantlexiti_147_r0[i]==main_quantlexiti_147_r1[i])? main_quantlexiti_147_r0[i]
		: main_quantlexiti_147_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_148[i]
		= (main_quantlexiti_148_r0[i]==main_quantlexiti_148_r1[i])? main_quantlexiti_148_r0[i]
		: main_quantlexiti_148_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_148_reg[i]
		= (main_quantlexiti_148_reg_r0[i]==main_quantlexiti_148_reg_r1[i])? main_quantlexiti_148_reg_r0[i]
		: main_quantlexiti_148_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_wd40i9i6[i]
		= (main_quantlexiti_wd40i9i6_r0[i]==main_quantlexiti_wd40i9i6_r1[i])? main_quantlexiti_wd40i9i6_r0[i]
		: main_quantlexiti_wd40i9i6_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_wd40i9i6_reg[i]
		= (main_quantlexiti_wd40i9i6_reg_r0[i]==main_quantlexiti_wd40i9i6_reg_r1[i])? main_quantlexiti_wd40i9i6_reg_r0[i]
		: main_quantlexiti_wd40i9i6_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_149[i]
		= (main_quantlexiti_149_r0[i]==main_quantlexiti_149_r1[i])? main_quantlexiti_149_r0[i]
		: main_quantlexiti_149_r2[i];
	end
end
always @(*) begin
	main_quantlexiti_150
		= (main_quantlexiti_150_r0==main_quantlexiti_150_r1)? main_quantlexiti_150_r0
		: main_quantlexiti_150_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_i10i7[i]
		= (main_quantlexiti_i10i7_r0[i]==main_quantlexiti_i10i7_r1[i])? main_quantlexiti_i10i7_r0[i]
		: main_quantlexiti_i10i7_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_i10i7_reg[i]
		= (main_quantlexiti_i10i7_reg_r0[i]==main_quantlexiti_i10i7_reg_r1[i])? main_quantlexiti_i10i7_reg_r0[i]
		: main_quantlexiti_i10i7_reg_r2[i];
	end
end
always @(*) begin
	main_quantlexiti_151
		= (main_quantlexiti_151_r0==main_quantlexiti_151_r1)? main_quantlexiti_151_r0
		: main_quantlexiti_151_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_i11i8[i]
		= (main_quantlexiti_i11i8_r0[i]==main_quantlexiti_i11i8_r1[i])? main_quantlexiti_i11i8_r0[i]
		: main_quantlexiti_i11i8_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_i11i8_reg[i]
		= (main_quantlexiti_i11i8_reg_r0[i]==main_quantlexiti_i11i8_reg_r1[i])? main_quantlexiti_i11i8_reg_r0[i]
		: main_quantlexiti_i11i8_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_152[i]
		= (main_quantlexiti_152_r0[i]==main_quantlexiti_152_r1[i])? main_quantlexiti_152_r0[i]
		: main_quantlexiti_152_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_153[i]
		= (main_quantlexiti_153_r0[i]==main_quantlexiti_153_r1[i])? main_quantlexiti_153_r0[i]
		: main_quantlexiti_153_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_153_reg[i]
		= (main_quantlexiti_153_reg_r0[i]==main_quantlexiti_153_reg_r1[i])? main_quantlexiti_153_reg_r0[i]
		: main_quantlexiti_153_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_154[i]
		= (main_quantlexiti_154_r0[i]==main_quantlexiti_154_r1[i])? main_quantlexiti_154_r0[i]
		: main_quantlexiti_154_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_155[i]
		= (main_quantlexiti_155_r0[i]==main_quantlexiti_155_r1[i])? main_quantlexiti_155_r0[i]
		: main_quantlexiti_155_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_155_reg[i]
		= (main_quantlexiti_155_reg_r0[i]==main_quantlexiti_155_reg_r1[i])? main_quantlexiti_155_reg_r0[i]
		: main_quantlexiti_155_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_156[i]
		= (main_quantlexiti_156_r0[i]==main_quantlexiti_156_r1[i])? main_quantlexiti_156_r0[i]
		: main_quantlexiti_156_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_156_reg[i]
		= (main_quantlexiti_156_reg_r0[i]==main_quantlexiti_156_reg_r1[i])? main_quantlexiti_156_reg_r0[i]
		: main_quantlexiti_156_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_apl10i5i9[i]
		= (main_quantlexiti_apl10i5i9_r0[i]==main_quantlexiti_apl10i5i9_r1[i])? main_quantlexiti_apl10i5i9_r0[i]
		: main_quantlexiti_apl10i5i9_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_157[i]
		= (main_quantlexiti_157_r0[i]==main_quantlexiti_157_r1[i])? main_quantlexiti_157_r0[i]
		: main_quantlexiti_157_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_157_reg[i]
		= (main_quantlexiti_157_reg_r0[i]==main_quantlexiti_157_reg_r1[i])? main_quantlexiti_157_reg_r0[i]
		: main_quantlexiti_157_reg_r2[i];
	end
end
always @(*) begin
	main_quantlexiti_158
		= (main_quantlexiti_158_r0==main_quantlexiti_158_r1)? main_quantlexiti_158_r0
		: main_quantlexiti_158_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_apl10i6i10[i]
		= (main_quantlexiti_apl10i6i10_r0[i]==main_quantlexiti_apl10i6i10_r1[i])? main_quantlexiti_apl10i6i10_r0[i]
		: main_quantlexiti_apl10i6i10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_apl10i6i10_reg[i]
		= (main_quantlexiti_apl10i6i10_reg_r0[i]==main_quantlexiti_apl10i6i10_reg_r1[i])? main_quantlexiti_apl10i6i10_reg_r0[i]
		: main_quantlexiti_apl10i6i10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_159[i]
		= (main_quantlexiti_159_r0[i]==main_quantlexiti_159_r1[i])? main_quantlexiti_159_r0[i]
		: main_quantlexiti_159_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_159_reg[i]
		= (main_quantlexiti_159_reg_r0[i]==main_quantlexiti_159_reg_r1[i])? main_quantlexiti_159_reg_r0[i]
		: main_quantlexiti_159_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_160[i]
		= (main_quantlexiti_160_r0[i]==main_quantlexiti_160_r1[i])? main_quantlexiti_160_r0[i]
		: main_quantlexiti_160_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_161[i]
		= (main_quantlexiti_161_r0[i]==main_quantlexiti_161_r1[i])? main_quantlexiti_161_r0[i]
		: main_quantlexiti_161_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_162[i]
		= (main_quantlexiti_162_r0[i]==main_quantlexiti_162_r1[i])? main_quantlexiti_162_r0[i]
		: main_quantlexiti_162_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_162_reg[i]
		= (main_quantlexiti_162_reg_r0[i]==main_quantlexiti_162_reg_r1[i])? main_quantlexiti_162_reg_r0[i]
		: main_quantlexiti_162_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_163[i]
		= (main_quantlexiti_163_r0[i]==main_quantlexiti_163_r1[i])? main_quantlexiti_163_r0[i]
		: main_quantlexiti_163_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_164[i]
		= (main_quantlexiti_164_r0[i]==main_quantlexiti_164_r1[i])? main_quantlexiti_164_r0[i]
		: main_quantlexiti_164_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_165[i]
		= (main_quantlexiti_165_r0[i]==main_quantlexiti_165_r1[i])? main_quantlexiti_165_r0[i]
		: main_quantlexiti_165_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_166[i]
		= (main_quantlexiti_166_r0[i]==main_quantlexiti_166_r1[i])? main_quantlexiti_166_r0[i]
		: main_quantlexiti_166_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_166_reg[i]
		= (main_quantlexiti_166_reg_r0[i]==main_quantlexiti_166_reg_r1[i])? main_quantlexiti_166_reg_r0[i]
		: main_quantlexiti_166_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_167[i]
		= (main_quantlexiti_167_r0[i]==main_quantlexiti_167_r1[i])? main_quantlexiti_167_r0[i]
		: main_quantlexiti_167_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_168[i]
		= (main_quantlexiti_168_r0[i]==main_quantlexiti_168_r1[i])? main_quantlexiti_168_r0[i]
		: main_quantlexiti_168_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_169[i]
		= (main_quantlexiti_169_r0[i]==main_quantlexiti_169_r1[i])? main_quantlexiti_169_r0[i]
		: main_quantlexiti_169_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_170[i]
		= (main_quantlexiti_170_r0[i]==main_quantlexiti_170_r1[i])? main_quantlexiti_170_r0[i]
		: main_quantlexiti_170_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_170_reg[i]
		= (main_quantlexiti_170_reg_r0[i]==main_quantlexiti_170_reg_r1[i])? main_quantlexiti_170_reg_r0[i]
		: main_quantlexiti_170_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_171[i]
		= (main_quantlexiti_171_r0[i]==main_quantlexiti_171_r1[i])? main_quantlexiti_171_r0[i]
		: main_quantlexiti_171_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_172[i]
		= (main_quantlexiti_172_r0[i]==main_quantlexiti_172_r1[i])? main_quantlexiti_172_r0[i]
		: main_quantlexiti_172_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_173[i]
		= (main_quantlexiti_173_r0[i]==main_quantlexiti_173_r1[i])? main_quantlexiti_173_r0[i]
		: main_quantlexiti_173_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_174[i]
		= (main_quantlexiti_174_r0[i]==main_quantlexiti_174_r1[i])? main_quantlexiti_174_r0[i]
		: main_quantlexiti_174_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_174_reg[i]
		= (main_quantlexiti_174_reg_r0[i]==main_quantlexiti_174_reg_r1[i])? main_quantlexiti_174_reg_r0[i]
		: main_quantlexiti_174_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_175[i]
		= (main_quantlexiti_175_r0[i]==main_quantlexiti_175_r1[i])? main_quantlexiti_175_r0[i]
		: main_quantlexiti_175_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_176[i]
		= (main_quantlexiti_176_r0[i]==main_quantlexiti_176_r1[i])? main_quantlexiti_176_r0[i]
		: main_quantlexiti_176_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_177[i]
		= (main_quantlexiti_177_r0[i]==main_quantlexiti_177_r1[i])? main_quantlexiti_177_r0[i]
		: main_quantlexiti_177_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_178[i]
		= (main_quantlexiti_178_r0[i]==main_quantlexiti_178_r1[i])? main_quantlexiti_178_r0[i]
		: main_quantlexiti_178_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_178_reg[i]
		= (main_quantlexiti_178_reg_r0[i]==main_quantlexiti_178_reg_r1[i])? main_quantlexiti_178_reg_r0[i]
		: main_quantlexiti_178_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_179[i]
		= (main_quantlexiti_179_r0[i]==main_quantlexiti_179_r1[i])? main_quantlexiti_179_r0[i]
		: main_quantlexiti_179_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_180[i]
		= (main_quantlexiti_180_r0[i]==main_quantlexiti_180_r1[i])? main_quantlexiti_180_r0[i]
		: main_quantlexiti_180_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_181[i]
		= (main_quantlexiti_181_r0[i]==main_quantlexiti_181_r1[i])? main_quantlexiti_181_r0[i]
		: main_quantlexiti_181_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_182[i]
		= (main_quantlexiti_182_r0[i]==main_quantlexiti_182_r1[i])? main_quantlexiti_182_r0[i]
		: main_quantlexiti_182_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_183[i]
		= (main_quantlexiti_183_r0[i]==main_quantlexiti_183_r1[i])? main_quantlexiti_183_r0[i]
		: main_quantlexiti_183_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_183_reg[i]
		= (main_quantlexiti_183_reg_r0[i]==main_quantlexiti_183_reg_r1[i])? main_quantlexiti_183_reg_r0[i]
		: main_quantlexiti_183_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_184[i]
		= (main_quantlexiti_184_r0[i]==main_quantlexiti_184_r1[i])? main_quantlexiti_184_r0[i]
		: main_quantlexiti_184_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_184_reg[i]
		= (main_quantlexiti_184_reg_r0[i]==main_quantlexiti_184_reg_r1[i])? main_quantlexiti_184_reg_r0[i]
		: main_quantlexiti_184_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_185[i]
		= (main_quantlexiti_185_r0[i]==main_quantlexiti_185_r1[i])? main_quantlexiti_185_r0[i]
		: main_quantlexiti_185_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_185_reg[i]
		= (main_quantlexiti_185_reg_r0[i]==main_quantlexiti_185_reg_r1[i])? main_quantlexiti_185_reg_r0[i]
		: main_quantlexiti_185_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_tmpi3i12[i]
		= (main_quantlexiti_tmpi3i12_r0[i]==main_quantlexiti_tmpi3i12_r1[i])? main_quantlexiti_tmpi3i12_r0[i]
		: main_quantlexiti_tmpi3i12_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_tmp1i4i13[i]
		= (main_quantlexiti_tmp1i4i13_r0[i]==main_quantlexiti_tmp1i4i13_r1[i])? main_quantlexiti_tmp1i4i13_r0[i]
		: main_quantlexiti_tmp1i4i13_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_186[i]
		= (main_quantlexiti_186_r0[i]==main_quantlexiti_186_r1[i])? main_quantlexiti_186_r0[i]
		: main_quantlexiti_186_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_186_reg[i]
		= (main_quantlexiti_186_reg_r0[i]==main_quantlexiti_186_reg_r1[i])? main_quantlexiti_186_reg_r0[i]
		: main_quantlexiti_186_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_187[i]
		= (main_quantlexiti_187_r0[i]==main_quantlexiti_187_r1[i])? main_quantlexiti_187_r0[i]
		: main_quantlexiti_187_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_187_reg[i]
		= (main_quantlexiti_187_reg_r0[i]==main_quantlexiti_187_reg_r1[i])? main_quantlexiti_187_reg_r0[i]
		: main_quantlexiti_187_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_188[i]
		= (main_quantlexiti_188_r0[i]==main_quantlexiti_188_r1[i])? main_quantlexiti_188_r0[i]
		: main_quantlexiti_188_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_188_reg[i]
		= (main_quantlexiti_188_reg_r0[i]==main_quantlexiti_188_reg_r1[i])? main_quantlexiti_188_reg_r0[i]
		: main_quantlexiti_188_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_189[i]
		= (main_quantlexiti_189_r0[i]==main_quantlexiti_189_r1[i])? main_quantlexiti_189_r0[i]
		: main_quantlexiti_189_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_190[i]
		= (main_quantlexiti_190_r0[i]==main_quantlexiti_190_r1[i])? main_quantlexiti_190_r0[i]
		: main_quantlexiti_190_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_190_reg[i]
		= (main_quantlexiti_190_reg_r0[i]==main_quantlexiti_190_reg_r1[i])? main_quantlexiti_190_reg_r0[i]
		: main_quantlexiti_190_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_191[i]
		= (main_quantlexiti_191_r0[i]==main_quantlexiti_191_r1[i])? main_quantlexiti_191_r0[i]
		: main_quantlexiti_191_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_192[i]
		= (main_quantlexiti_192_r0[i]==main_quantlexiti_192_r1[i])? main_quantlexiti_192_r0[i]
		: main_quantlexiti_192_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_192_reg[i]
		= (main_quantlexiti_192_reg_r0[i]==main_quantlexiti_192_reg_r1[i])? main_quantlexiti_192_reg_r0[i]
		: main_quantlexiti_192_reg_r2[i];
	end
end
always @(*) begin
	main_quantlexiti_193
		= (main_quantlexiti_193_r0==main_quantlexiti_193_r1)? main_quantlexiti_193_r0
		: main_quantlexiti_193_r2;
end
always @(*) begin
	main_quantlexiti_193_reg
		= (main_quantlexiti_193_reg_r0==main_quantlexiti_193_reg_r1)? main_quantlexiti_193_reg_r0
		: main_quantlexiti_193_reg_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_194[i]
		= (main_quantlexiti_194_r0[i]==main_quantlexiti_194_r1[i])? main_quantlexiti_194_r0[i]
		: main_quantlexiti_194_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_194_reg[i]
		= (main_quantlexiti_194_reg_r0[i]==main_quantlexiti_194_reg_r1[i])? main_quantlexiti_194_reg_r0[i]
		: main_quantlexiti_194_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_m0ii[i]
		= (main_quantlexiti_m0ii_r0[i]==main_quantlexiti_m0ii_r1[i])? main_quantlexiti_m0ii_r0[i]
		: main_quantlexiti_m0ii_r2[i];
	end
end
always @(*) begin
	main_quantlexiti_195
		= (main_quantlexiti_195_r0==main_quantlexiti_195_r1)? main_quantlexiti_195_r0
		: main_quantlexiti_195_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_v[i]
		= (main_quantlexiti_v_r0[i]==main_quantlexiti_v_r1[i])? main_quantlexiti_v_r0[i]
		: main_quantlexiti_v_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_v_reg[i]
		= (main_quantlexiti_v_reg_r0[i]==main_quantlexiti_v_reg_r1[i])? main_quantlexiti_v_reg_r0[i]
		: main_quantlexiti_v_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_[i]
		= (main_quantlexiti__r0[i]==main_quantlexiti__r1[i])? main_quantlexiti__r0[i]
		: main_quantlexiti__r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti__reg[i]
		= (main_quantlexiti__reg_r0[i]==main_quantlexiti__reg_r1[i])? main_quantlexiti__reg_r0[i]
		: main_quantlexiti__reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_quantlexiti_196[i]
		= (main_quantlexiti_196_r0[i]==main_quantlexiti_196_r1[i])? main_quantlexiti_196_r0[i]
		: main_quantlexiti_196_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_197[i]
		= (main_quantlexiti_197_r0[i]==main_quantlexiti_197_r1[i])? main_quantlexiti_197_r0[i]
		: main_quantlexiti_197_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_198[i]
		= (main_quantlexiti_198_r0[i]==main_quantlexiti_198_r1[i])? main_quantlexiti_198_r0[i]
		: main_quantlexiti_198_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_199[i]
		= (main_quantlexiti_199_r0[i]==main_quantlexiti_199_r1[i])? main_quantlexiti_199_r0[i]
		: main_quantlexiti_199_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_199_reg[i]
		= (main_quantlexiti_199_reg_r0[i]==main_quantlexiti_199_reg_r1[i])? main_quantlexiti_199_reg_r0[i]
		: main_quantlexiti_199_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_quantlexiti_200[i]
		= (main_quantlexiti_200_r0[i]==main_quantlexiti_200_r1[i])? main_quantlexiti_200_r0[i]
		: main_quantlexiti_200_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_201[i]
		= (main_quantlexiti_201_r0[i]==main_quantlexiti_201_r1[i])? main_quantlexiti_201_r0[i]
		: main_quantlexiti_201_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_202[i]
		= (main_quantlexiti_202_r0[i]==main_quantlexiti_202_r1[i])? main_quantlexiti_202_r0[i]
		: main_quantlexiti_202_r2[i];
	end
end
always @(*) begin
	main_quantlexiti_203
		= (main_quantlexiti_203_r0==main_quantlexiti_203_r1)? main_quantlexiti_203_r0
		: main_quantlexiti_203_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_i1i14[i]
		= (main_quantlexiti_i1i14_r0[i]==main_quantlexiti_i1i14_r1[i])? main_quantlexiti_i1i14_r0[i]
		: main_quantlexiti_i1i14_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_i1i14_reg[i]
		= (main_quantlexiti_i1i14_reg_r0[i]==main_quantlexiti_i1i14_reg_r1[i])? main_quantlexiti_i1i14_reg_r0[i]
		: main_quantlexiti_i1i14_reg_r2[i];
	end
end
always @(*) begin
	main_quantlexiti_204
		= (main_quantlexiti_204_r0==main_quantlexiti_204_r1)? main_quantlexiti_204_r0
		: main_quantlexiti_204_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_i2i15[i]
		= (main_quantlexiti_i2i15_r0[i]==main_quantlexiti_i2i15_r1[i])? main_quantlexiti_i2i15_r0[i]
		: main_quantlexiti_i2i15_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_i2i15_reg[i]
		= (main_quantlexiti_i2i15_reg_r0[i]==main_quantlexiti_i2i15_reg_r1[i])? main_quantlexiti_i2i15_reg_r0[i]
		: main_quantlexiti_i2i15_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_205[i]
		= (main_quantlexiti_205_r0[i]==main_quantlexiti_205_r1[i])? main_quantlexiti_205_r0[i]
		: main_quantlexiti_205_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_206[i]
		= (main_quantlexiti_206_r0[i]==main_quantlexiti_206_r1[i])? main_quantlexiti_206_r0[i]
		: main_quantlexiti_206_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_206_reg[i]
		= (main_quantlexiti_206_reg_r0[i]==main_quantlexiti_206_reg_r1[i])? main_quantlexiti_206_reg_r0[i]
		: main_quantlexiti_206_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_quantlexiti_207[i]
		= (main_quantlexiti_207_r0[i]==main_quantlexiti_207_r1[i])? main_quantlexiti_207_r0[i]
		: main_quantlexiti_207_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_208[i]
		= (main_quantlexiti_208_r0[i]==main_quantlexiti_208_r1[i])? main_quantlexiti_208_r0[i]
		: main_quantlexiti_208_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_208_reg[i]
		= (main_quantlexiti_208_reg_r0[i]==main_quantlexiti_208_reg_r1[i])? main_quantlexiti_208_reg_r0[i]
		: main_quantlexiti_208_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_209[i]
		= (main_quantlexiti_209_r0[i]==main_quantlexiti_209_r1[i])? main_quantlexiti_209_r0[i]
		: main_quantlexiti_209_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_209_reg[i]
		= (main_quantlexiti_209_reg_r0[i]==main_quantlexiti_209_reg_r1[i])? main_quantlexiti_209_reg_r0[i]
		: main_quantlexiti_209_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_210[i]
		= (main_quantlexiti_210_r0[i]==main_quantlexiti_210_r1[i])? main_quantlexiti_210_r0[i]
		: main_quantlexiti_210_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_210_reg[i]
		= (main_quantlexiti_210_reg_r0[i]==main_quantlexiti_210_reg_r1[i])? main_quantlexiti_210_reg_r0[i]
		: main_quantlexiti_210_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_211[i]
		= (main_quantlexiti_211_r0[i]==main_quantlexiti_211_r1[i])? main_quantlexiti_211_r0[i]
		: main_quantlexiti_211_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_211_reg[i]
		= (main_quantlexiti_211_reg_r0[i]==main_quantlexiti_211_reg_r1[i])? main_quantlexiti_211_reg_r0[i]
		: main_quantlexiti_211_reg_r2[i];
	end
end
always @(*) begin
	main_quantlexiti_212
		= (main_quantlexiti_212_r0==main_quantlexiti_212_r1)? main_quantlexiti_212_r0
		: main_quantlexiti_212_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_213[i]
		= (main_quantlexiti_213_r0[i]==main_quantlexiti_213_r1[i])? main_quantlexiti_213_r0[i]
		: main_quantlexiti_213_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_213_reg[i]
		= (main_quantlexiti_213_reg_r0[i]==main_quantlexiti_213_reg_r1[i])? main_quantlexiti_213_reg_r0[i]
		: main_quantlexiti_213_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_1ii16[i]
		= (main_quantlexiti_1ii16_r0[i]==main_quantlexiti_1ii16_r1[i])? main_quantlexiti_1ii16_r0[i]
		: main_quantlexiti_1ii16_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_214[i]
		= (main_quantlexiti_214_r0[i]==main_quantlexiti_214_r1[i])? main_quantlexiti_214_r0[i]
		: main_quantlexiti_214_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_215[i]
		= (main_quantlexiti_215_r0[i]==main_quantlexiti_215_r1[i])? main_quantlexiti_215_r0[i]
		: main_quantlexiti_215_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_216[i]
		= (main_quantlexiti_216_r0[i]==main_quantlexiti_216_r1[i])? main_quantlexiti_216_r0[i]
		: main_quantlexiti_216_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_217[i]
		= (main_quantlexiti_217_r0[i]==main_quantlexiti_217_r1[i])? main_quantlexiti_217_r0[i]
		: main_quantlexiti_217_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_218[i]
		= (main_quantlexiti_218_r0[i]==main_quantlexiti_218_r1[i])? main_quantlexiti_218_r0[i]
		: main_quantlexiti_218_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_218_reg[i]
		= (main_quantlexiti_218_reg_r0[i]==main_quantlexiti_218_reg_r1[i])? main_quantlexiti_218_reg_r0[i]
		: main_quantlexiti_218_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_219[i]
		= (main_quantlexiti_219_r0[i]==main_quantlexiti_219_r1[i])? main_quantlexiti_219_r0[i]
		: main_quantlexiti_219_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_220[i]
		= (main_quantlexiti_220_r0[i]==main_quantlexiti_220_r1[i])? main_quantlexiti_220_r0[i]
		: main_quantlexiti_220_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_220_reg[i]
		= (main_quantlexiti_220_reg_r0[i]==main_quantlexiti_220_reg_r1[i])? main_quantlexiti_220_reg_r0[i]
		: main_quantlexiti_220_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_wd40ii17[i]
		= (main_quantlexiti_wd40ii17_r0[i]==main_quantlexiti_wd40ii17_r1[i])? main_quantlexiti_wd40ii17_r0[i]
		: main_quantlexiti_wd40ii17_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_wd40ii17_reg[i]
		= (main_quantlexiti_wd40ii17_reg_r0[i]==main_quantlexiti_wd40ii17_reg_r1[i])? main_quantlexiti_wd40ii17_reg_r0[i]
		: main_quantlexiti_wd40ii17_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_221[i]
		= (main_quantlexiti_221_r0[i]==main_quantlexiti_221_r1[i])? main_quantlexiti_221_r0[i]
		: main_quantlexiti_221_r2[i];
	end
end
always @(*) begin
	main_quantlexiti_222
		= (main_quantlexiti_222_r0==main_quantlexiti_222_r1)? main_quantlexiti_222_r0
		: main_quantlexiti_222_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_ii18[i]
		= (main_quantlexiti_ii18_r0[i]==main_quantlexiti_ii18_r1[i])? main_quantlexiti_ii18_r0[i]
		: main_quantlexiti_ii18_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_ii18_reg[i]
		= (main_quantlexiti_ii18_reg_r0[i]==main_quantlexiti_ii18_reg_r1[i])? main_quantlexiti_ii18_reg_r0[i]
		: main_quantlexiti_ii18_reg_r2[i];
	end
end
always @(*) begin
	main_quantlexiti_223
		= (main_quantlexiti_223_r0==main_quantlexiti_223_r1)? main_quantlexiti_223_r0
		: main_quantlexiti_223_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_ii19[i]
		= (main_quantlexiti_ii19_r0[i]==main_quantlexiti_ii19_r1[i])? main_quantlexiti_ii19_r0[i]
		: main_quantlexiti_ii19_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_ii19_reg[i]
		= (main_quantlexiti_ii19_reg_r0[i]==main_quantlexiti_ii19_reg_r1[i])? main_quantlexiti_ii19_reg_r0[i]
		: main_quantlexiti_ii19_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_224[i]
		= (main_quantlexiti_224_r0[i]==main_quantlexiti_224_r1[i])? main_quantlexiti_224_r0[i]
		: main_quantlexiti_224_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_225[i]
		= (main_quantlexiti_225_r0[i]==main_quantlexiti_225_r1[i])? main_quantlexiti_225_r0[i]
		: main_quantlexiti_225_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_225_reg[i]
		= (main_quantlexiti_225_reg_r0[i]==main_quantlexiti_225_reg_r1[i])? main_quantlexiti_225_reg_r0[i]
		: main_quantlexiti_225_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_226[i]
		= (main_quantlexiti_226_r0[i]==main_quantlexiti_226_r1[i])? main_quantlexiti_226_r0[i]
		: main_quantlexiti_226_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_227[i]
		= (main_quantlexiti_227_r0[i]==main_quantlexiti_227_r1[i])? main_quantlexiti_227_r0[i]
		: main_quantlexiti_227_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_227_reg[i]
		= (main_quantlexiti_227_reg_r0[i]==main_quantlexiti_227_reg_r1[i])? main_quantlexiti_227_reg_r0[i]
		: main_quantlexiti_227_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_228[i]
		= (main_quantlexiti_228_r0[i]==main_quantlexiti_228_r1[i])? main_quantlexiti_228_r0[i]
		: main_quantlexiti_228_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_228_reg[i]
		= (main_quantlexiti_228_reg_r0[i]==main_quantlexiti_228_reg_r1[i])? main_quantlexiti_228_reg_r0[i]
		: main_quantlexiti_228_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_apl10ii20[i]
		= (main_quantlexiti_apl10ii20_r0[i]==main_quantlexiti_apl10ii20_r1[i])? main_quantlexiti_apl10ii20_r0[i]
		: main_quantlexiti_apl10ii20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_229[i]
		= (main_quantlexiti_229_r0[i]==main_quantlexiti_229_r1[i])? main_quantlexiti_229_r0[i]
		: main_quantlexiti_229_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_229_reg[i]
		= (main_quantlexiti_229_reg_r0[i]==main_quantlexiti_229_reg_r1[i])? main_quantlexiti_229_reg_r0[i]
		: main_quantlexiti_229_reg_r2[i];
	end
end
always @(*) begin
	main_quantlexiti_230
		= (main_quantlexiti_230_r0==main_quantlexiti_230_r1)? main_quantlexiti_230_r0
		: main_quantlexiti_230_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_apl10ii21[i]
		= (main_quantlexiti_apl10ii21_r0[i]==main_quantlexiti_apl10ii21_r1[i])? main_quantlexiti_apl10ii21_r0[i]
		: main_quantlexiti_apl10ii21_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_apl10ii21_reg[i]
		= (main_quantlexiti_apl10ii21_reg_r0[i]==main_quantlexiti_apl10ii21_reg_r1[i])? main_quantlexiti_apl10ii21_reg_r0[i]
		: main_quantlexiti_apl10ii21_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_231[i]
		= (main_quantlexiti_231_r0[i]==main_quantlexiti_231_r1[i])? main_quantlexiti_231_r0[i]
		: main_quantlexiti_231_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_231_reg[i]
		= (main_quantlexiti_231_reg_r0[i]==main_quantlexiti_231_reg_r1[i])? main_quantlexiti_231_reg_r0[i]
		: main_quantlexiti_231_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_232[i]
		= (main_quantlexiti_232_r0[i]==main_quantlexiti_232_r1[i])? main_quantlexiti_232_r0[i]
		: main_quantlexiti_232_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_233[i]
		= (main_quantlexiti_233_r0[i]==main_quantlexiti_233_r1[i])? main_quantlexiti_233_r0[i]
		: main_quantlexiti_233_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_233_reg[i]
		= (main_quantlexiti_233_reg_r0[i]==main_quantlexiti_233_reg_r1[i])? main_quantlexiti_233_reg_r0[i]
		: main_quantlexiti_233_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_quantlexiti_234[i]
		= (main_quantlexiti_234_r0[i]==main_quantlexiti_234_r1[i])? main_quantlexiti_234_r0[i]
		: main_quantlexiti_234_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_quantlexiti_235[i]
		= (main_quantlexiti_235_r0[i]==main_quantlexiti_235_r1[i])? main_quantlexiti_235_r0[i]
		: main_quantlexiti_235_r2[i];
	end
end
always @(*) begin
	main_quantlexiti_236
		= (main_quantlexiti_236_r0==main_quantlexiti_236_r1)? main_quantlexiti_236_r0
		: main_quantlexiti_236_r2;
end
always @(*) begin
	main_quantlexiti_236_reg
		= (main_quantlexiti_236_reg_r0==main_quantlexiti_236_reg_r1)? main_quantlexiti_236_reg_r0
		: main_quantlexiti_236_reg_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_237[i]
		= (main_encodeexit_crit_edge_237_r0[i]==main_encodeexit_crit_edge_237_r1[i])? main_encodeexit_crit_edge_237_r0[i]
		: main_encodeexit_crit_edge_237_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_237_reg[i]
		= (main_encodeexit_crit_edge_237_reg_r0[i]==main_encodeexit_crit_edge_237_reg_r1[i])? main_encodeexit_crit_edge_237_reg_r0[i]
		: main_encodeexit_crit_edge_237_reg_r2[i];
	end
end
always @(*) begin
	main_encodeexit_crit_edge_238
		= (main_encodeexit_crit_edge_238_r0==main_encodeexit_crit_edge_238_r1)? main_encodeexit_crit_edge_238_r0
		: main_encodeexit_crit_edge_238_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_apl12ii22[i]
		= (main_encodeexit_crit_edge_apl12ii22_r0[i]==main_encodeexit_crit_edge_apl12ii22_r1[i])? main_encodeexit_crit_edge_apl12ii22_r0[i]
		: main_encodeexit_crit_edge_apl12ii22_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_apl12ii22_reg[i]
		= (main_encodeexit_crit_edge_apl12ii22_reg_r0[i]==main_encodeexit_crit_edge_apl12ii22_reg_r1[i])? main_encodeexit_crit_edge_apl12ii22_reg_r0[i]
		: main_encodeexit_crit_edge_apl12ii22_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_239[i]
		= (main_encodeexit_crit_edge_239_r0[i]==main_encodeexit_crit_edge_239_r1[i])? main_encodeexit_crit_edge_239_r0[i]
		: main_encodeexit_crit_edge_239_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_240[i]
		= (main_encodeexit_crit_edge_240_r0[i]==main_encodeexit_crit_edge_240_r1[i])? main_encodeexit_crit_edge_240_r0[i]
		: main_encodeexit_crit_edge_240_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_241[i]
		= (main_encodeexit_crit_edge_241_r0[i]==main_encodeexit_crit_edge_241_r1[i])? main_encodeexit_crit_edge_241_r0[i]
		: main_encodeexit_crit_edge_241_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_242[i]
		= (main_encodeexit_crit_edge_242_r0[i]==main_encodeexit_crit_edge_242_r1[i])? main_encodeexit_crit_edge_242_r0[i]
		: main_encodeexit_crit_edge_242_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_242_reg[i]
		= (main_encodeexit_crit_edge_242_reg_r0[i]==main_encodeexit_crit_edge_242_reg_r1[i])? main_encodeexit_crit_edge_242_reg_r0[i]
		: main_encodeexit_crit_edge_242_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_243[i]
		= (main_encodeexit_crit_edge_243_r0[i]==main_encodeexit_crit_edge_243_r1[i])? main_encodeexit_crit_edge_243_r0[i]
		: main_encodeexit_crit_edge_243_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_243_reg[i]
		= (main_encodeexit_crit_edge_243_reg_r0[i]==main_encodeexit_crit_edge_243_reg_r1[i])? main_encodeexit_crit_edge_243_reg_r0[i]
		: main_encodeexit_crit_edge_243_reg_r2[i];
	end
end
always @(*) begin
	main_encodeexit_crit_edge_244
		= (main_encodeexit_crit_edge_244_r0==main_encodeexit_crit_edge_244_r1)? main_encodeexit_crit_edge_244_r0
		: main_encodeexit_crit_edge_244_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_apl12i7i11[i]
		= (main_encodeexit_crit_edge_apl12i7i11_r0[i]==main_encodeexit_crit_edge_apl12i7i11_r1[i])? main_encodeexit_crit_edge_apl12i7i11_r0[i]
		: main_encodeexit_crit_edge_apl12i7i11_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_apl12i7i11_reg[i]
		= (main_encodeexit_crit_edge_apl12i7i11_reg_r0[i]==main_encodeexit_crit_edge_apl12i7i11_reg_r1[i])? main_encodeexit_crit_edge_apl12i7i11_reg_r0[i]
		: main_encodeexit_crit_edge_apl12i7i11_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_245[i]
		= (main_encodeexit_crit_edge_245_r0[i]==main_encodeexit_crit_edge_245_r1[i])? main_encodeexit_crit_edge_245_r0[i]
		: main_encodeexit_crit_edge_245_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_246[i]
		= (main_encodeexit_crit_edge_246_r0[i]==main_encodeexit_crit_edge_246_r1[i])? main_encodeexit_crit_edge_246_r0[i]
		: main_encodeexit_crit_edge_246_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_247[i]
		= (main_encodeexit_crit_edge_247_r0[i]==main_encodeexit_crit_edge_247_r1[i])? main_encodeexit_crit_edge_247_r0[i]
		: main_encodeexit_crit_edge_247_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_248[i]
		= (main_encodeexit_crit_edge_248_r0[i]==main_encodeexit_crit_edge_248_r1[i])? main_encodeexit_crit_edge_248_r0[i]
		: main_encodeexit_crit_edge_248_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_248_reg[i]
		= (main_encodeexit_crit_edge_248_reg_r0[i]==main_encodeexit_crit_edge_248_reg_r1[i])? main_encodeexit_crit_edge_248_reg_r0[i]
		: main_encodeexit_crit_edge_248_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre[i]
		= (main_encodeexit_crit_edge_pre_r0[i]==main_encodeexit_crit_edge_pre_r1[i])? main_encodeexit_crit_edge_pre_r0[i]
		: main_encodeexit_crit_edge_pre_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre_reg[i]
		= (main_encodeexit_crit_edge_pre_reg_r0[i]==main_encodeexit_crit_edge_pre_reg_r1[i])? main_encodeexit_crit_edge_pre_reg_r0[i]
		: main_encodeexit_crit_edge_pre_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre37[i]
		= (main_encodeexit_crit_edge_pre37_r0[i]==main_encodeexit_crit_edge_pre37_r1[i])? main_encodeexit_crit_edge_pre37_r0[i]
		: main_encodeexit_crit_edge_pre37_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre37_reg[i]
		= (main_encodeexit_crit_edge_pre37_reg_r0[i]==main_encodeexit_crit_edge_pre37_reg_r1[i])? main_encodeexit_crit_edge_pre37_reg_r0[i]
		: main_encodeexit_crit_edge_pre37_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre38[i]
		= (main_encodeexit_crit_edge_pre38_r0[i]==main_encodeexit_crit_edge_pre38_r1[i])? main_encodeexit_crit_edge_pre38_r0[i]
		: main_encodeexit_crit_edge_pre38_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre38_reg[i]
		= (main_encodeexit_crit_edge_pre38_reg_r0[i]==main_encodeexit_crit_edge_pre38_reg_r1[i])? main_encodeexit_crit_edge_pre38_reg_r0[i]
		: main_encodeexit_crit_edge_pre38_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre39[i]
		= (main_encodeexit_crit_edge_pre39_r0[i]==main_encodeexit_crit_edge_pre39_r1[i])? main_encodeexit_crit_edge_pre39_r0[i]
		: main_encodeexit_crit_edge_pre39_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre39_reg[i]
		= (main_encodeexit_crit_edge_pre39_reg_r0[i]==main_encodeexit_crit_edge_pre39_reg_r1[i])? main_encodeexit_crit_edge_pre39_reg_r0[i]
		: main_encodeexit_crit_edge_pre39_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre40[i]
		= (main_encodeexit_crit_edge_pre40_r0[i]==main_encodeexit_crit_edge_pre40_r1[i])? main_encodeexit_crit_edge_pre40_r0[i]
		: main_encodeexit_crit_edge_pre40_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre40_reg[i]
		= (main_encodeexit_crit_edge_pre40_reg_r0[i]==main_encodeexit_crit_edge_pre40_reg_r1[i])? main_encodeexit_crit_edge_pre40_reg_r0[i]
		: main_encodeexit_crit_edge_pre40_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre41[i]
		= (main_encodeexit_crit_edge_pre41_r0[i]==main_encodeexit_crit_edge_pre41_r1[i])? main_encodeexit_crit_edge_pre41_r0[i]
		: main_encodeexit_crit_edge_pre41_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre41_reg[i]
		= (main_encodeexit_crit_edge_pre41_reg_r0[i]==main_encodeexit_crit_edge_pre41_reg_r1[i])? main_encodeexit_crit_edge_pre41_reg_r0[i]
		: main_encodeexit_crit_edge_pre41_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre42[i]
		= (main_encodeexit_crit_edge_pre42_r0[i]==main_encodeexit_crit_edge_pre42_r1[i])? main_encodeexit_crit_edge_pre42_r0[i]
		: main_encodeexit_crit_edge_pre42_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre42_reg[i]
		= (main_encodeexit_crit_edge_pre42_reg_r0[i]==main_encodeexit_crit_edge_pre42_reg_r1[i])? main_encodeexit_crit_edge_pre42_reg_r0[i]
		: main_encodeexit_crit_edge_pre42_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre43[i]
		= (main_encodeexit_crit_edge_pre43_r0[i]==main_encodeexit_crit_edge_pre43_r1[i])? main_encodeexit_crit_edge_pre43_r0[i]
		: main_encodeexit_crit_edge_pre43_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre43_reg[i]
		= (main_encodeexit_crit_edge_pre43_reg_r0[i]==main_encodeexit_crit_edge_pre43_reg_r1[i])? main_encodeexit_crit_edge_pre43_reg_r0[i]
		: main_encodeexit_crit_edge_pre43_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre44[i]
		= (main_encodeexit_crit_edge_pre44_r0[i]==main_encodeexit_crit_edge_pre44_r1[i])? main_encodeexit_crit_edge_pre44_r0[i]
		: main_encodeexit_crit_edge_pre44_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre44_reg[i]
		= (main_encodeexit_crit_edge_pre44_reg_r0[i]==main_encodeexit_crit_edge_pre44_reg_r1[i])? main_encodeexit_crit_edge_pre44_reg_r0[i]
		: main_encodeexit_crit_edge_pre44_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre45[i]
		= (main_encodeexit_crit_edge_pre45_r0[i]==main_encodeexit_crit_edge_pre45_r1[i])? main_encodeexit_crit_edge_pre45_r0[i]
		: main_encodeexit_crit_edge_pre45_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre45_reg[i]
		= (main_encodeexit_crit_edge_pre45_reg_r0[i]==main_encodeexit_crit_edge_pre45_reg_r1[i])? main_encodeexit_crit_edge_pre45_reg_r0[i]
		: main_encodeexit_crit_edge_pre45_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre46[i]
		= (main_encodeexit_crit_edge_pre46_r0[i]==main_encodeexit_crit_edge_pre46_r1[i])? main_encodeexit_crit_edge_pre46_r0[i]
		: main_encodeexit_crit_edge_pre46_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre46_reg[i]
		= (main_encodeexit_crit_edge_pre46_reg_r0[i]==main_encodeexit_crit_edge_pre46_reg_r1[i])? main_encodeexit_crit_edge_pre46_reg_r0[i]
		: main_encodeexit_crit_edge_pre46_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre47[i]
		= (main_encodeexit_crit_edge_pre47_r0[i]==main_encodeexit_crit_edge_pre47_r1[i])? main_encodeexit_crit_edge_pre47_r0[i]
		: main_encodeexit_crit_edge_pre47_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre47_reg[i]
		= (main_encodeexit_crit_edge_pre47_reg_r0[i]==main_encodeexit_crit_edge_pre47_reg_r1[i])? main_encodeexit_crit_edge_pre47_reg_r0[i]
		: main_encodeexit_crit_edge_pre47_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre48[i]
		= (main_encodeexit_crit_edge_pre48_r0[i]==main_encodeexit_crit_edge_pre48_r1[i])? main_encodeexit_crit_edge_pre48_r0[i]
		: main_encodeexit_crit_edge_pre48_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre48_reg[i]
		= (main_encodeexit_crit_edge_pre48_reg_r0[i]==main_encodeexit_crit_edge_pre48_reg_r1[i])? main_encodeexit_crit_edge_pre48_reg_r0[i]
		: main_encodeexit_crit_edge_pre48_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre49[i]
		= (main_encodeexit_crit_edge_pre49_r0[i]==main_encodeexit_crit_edge_pre49_r1[i])? main_encodeexit_crit_edge_pre49_r0[i]
		: main_encodeexit_crit_edge_pre49_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre49_reg[i]
		= (main_encodeexit_crit_edge_pre49_reg_r0[i]==main_encodeexit_crit_edge_pre49_reg_r1[i])? main_encodeexit_crit_edge_pre49_reg_r0[i]
		: main_encodeexit_crit_edge_pre49_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre50[i]
		= (main_encodeexit_crit_edge_pre50_r0[i]==main_encodeexit_crit_edge_pre50_r1[i])? main_encodeexit_crit_edge_pre50_r0[i]
		: main_encodeexit_crit_edge_pre50_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre50_reg[i]
		= (main_encodeexit_crit_edge_pre50_reg_r0[i]==main_encodeexit_crit_edge_pre50_reg_r1[i])? main_encodeexit_crit_edge_pre50_reg_r0[i]
		: main_encodeexit_crit_edge_pre50_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre51[i]
		= (main_encodeexit_crit_edge_pre51_r0[i]==main_encodeexit_crit_edge_pre51_r1[i])? main_encodeexit_crit_edge_pre51_r0[i]
		: main_encodeexit_crit_edge_pre51_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre51_reg[i]
		= (main_encodeexit_crit_edge_pre51_reg_r0[i]==main_encodeexit_crit_edge_pre51_reg_r1[i])? main_encodeexit_crit_edge_pre51_reg_r0[i]
		: main_encodeexit_crit_edge_pre51_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre52[i]
		= (main_encodeexit_crit_edge_pre52_r0[i]==main_encodeexit_crit_edge_pre52_r1[i])? main_encodeexit_crit_edge_pre52_r0[i]
		: main_encodeexit_crit_edge_pre52_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre52_reg[i]
		= (main_encodeexit_crit_edge_pre52_reg_r0[i]==main_encodeexit_crit_edge_pre52_reg_r1[i])? main_encodeexit_crit_edge_pre52_reg_r0[i]
		: main_encodeexit_crit_edge_pre52_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre53[i]
		= (main_encodeexit_crit_edge_pre53_r0[i]==main_encodeexit_crit_edge_pre53_r1[i])? main_encodeexit_crit_edge_pre53_r0[i]
		: main_encodeexit_crit_edge_pre53_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre53_reg[i]
		= (main_encodeexit_crit_edge_pre53_reg_r0[i]==main_encodeexit_crit_edge_pre53_reg_r1[i])? main_encodeexit_crit_edge_pre53_reg_r0[i]
		: main_encodeexit_crit_edge_pre53_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre54[i]
		= (main_encodeexit_crit_edge_pre54_r0[i]==main_encodeexit_crit_edge_pre54_r1[i])? main_encodeexit_crit_edge_pre54_r0[i]
		: main_encodeexit_crit_edge_pre54_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre54_reg[i]
		= (main_encodeexit_crit_edge_pre54_reg_r0[i]==main_encodeexit_crit_edge_pre54_reg_r1[i])? main_encodeexit_crit_edge_pre54_reg_r0[i]
		: main_encodeexit_crit_edge_pre54_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre55[i]
		= (main_encodeexit_crit_edge_pre55_r0[i]==main_encodeexit_crit_edge_pre55_r1[i])? main_encodeexit_crit_edge_pre55_r0[i]
		: main_encodeexit_crit_edge_pre55_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre55_reg[i]
		= (main_encodeexit_crit_edge_pre55_reg_r0[i]==main_encodeexit_crit_edge_pre55_reg_r1[i])? main_encodeexit_crit_edge_pre55_reg_r0[i]
		: main_encodeexit_crit_edge_pre55_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre56[i]
		= (main_encodeexit_crit_edge_pre56_r0[i]==main_encodeexit_crit_edge_pre56_r1[i])? main_encodeexit_crit_edge_pre56_r0[i]
		: main_encodeexit_crit_edge_pre56_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre56_reg[i]
		= (main_encodeexit_crit_edge_pre56_reg_r0[i]==main_encodeexit_crit_edge_pre56_reg_r1[i])? main_encodeexit_crit_edge_pre56_reg_r0[i]
		: main_encodeexit_crit_edge_pre56_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre57[i]
		= (main_encodeexit_crit_edge_pre57_r0[i]==main_encodeexit_crit_edge_pre57_r1[i])? main_encodeexit_crit_edge_pre57_r0[i]
		: main_encodeexit_crit_edge_pre57_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre57_reg[i]
		= (main_encodeexit_crit_edge_pre57_reg_r0[i]==main_encodeexit_crit_edge_pre57_reg_r1[i])? main_encodeexit_crit_edge_pre57_reg_r0[i]
		: main_encodeexit_crit_edge_pre57_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre58[i]
		= (main_encodeexit_crit_edge_pre58_r0[i]==main_encodeexit_crit_edge_pre58_r1[i])? main_encodeexit_crit_edge_pre58_r0[i]
		: main_encodeexit_crit_edge_pre58_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_pre59[i]
		= (main_encodeexit_crit_edge_pre59_r0[i]==main_encodeexit_crit_edge_pre59_r1[i])? main_encodeexit_crit_edge_pre59_r0[i]
		: main_encodeexit_crit_edge_pre59_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_phitmp[i]
		= (main_encodeexit_crit_edge_phitmp_r0[i]==main_encodeexit_crit_edge_phitmp_r1[i])? main_encodeexit_crit_edge_phitmp_r0[i]
		: main_encodeexit_crit_edge_phitmp_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_phitmp1[i]
		= (main_encodeexit_crit_edge_phitmp1_r0[i]==main_encodeexit_crit_edge_phitmp1_r1[i])? main_encodeexit_crit_edge_phitmp1_r0[i]
		: main_encodeexit_crit_edge_phitmp1_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_phitmp2[i]
		= (main_encodeexit_crit_edge_phitmp2_r0[i]==main_encodeexit_crit_edge_phitmp2_r1[i])? main_encodeexit_crit_edge_phitmp2_r0[i]
		: main_encodeexit_crit_edge_phitmp2_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_phitmp3[i]
		= (main_encodeexit_crit_edge_phitmp3_r0[i]==main_encodeexit_crit_edge_phitmp3_r1[i])? main_encodeexit_crit_edge_phitmp3_r0[i]
		: main_encodeexit_crit_edge_phitmp3_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_phitmp3_reg[i]
		= (main_encodeexit_crit_edge_phitmp3_reg_r0[i]==main_encodeexit_crit_edge_phitmp3_reg_r1[i])? main_encodeexit_crit_edge_phitmp3_reg_r0[i]
		: main_encodeexit_crit_edge_phitmp3_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_phitmp4[i]
		= (main_encodeexit_crit_edge_phitmp4_r0[i]==main_encodeexit_crit_edge_phitmp4_r1[i])? main_encodeexit_crit_edge_phitmp4_r0[i]
		: main_encodeexit_crit_edge_phitmp4_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_phitmp5[i]
		= (main_encodeexit_crit_edge_phitmp5_r0[i]==main_encodeexit_crit_edge_phitmp5_r1[i])? main_encodeexit_crit_edge_phitmp5_r0[i]
		: main_encodeexit_crit_edge_phitmp5_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_phitmp5_reg[i]
		= (main_encodeexit_crit_edge_phitmp5_reg_r0[i]==main_encodeexit_crit_edge_phitmp5_reg_r1[i])? main_encodeexit_crit_edge_phitmp5_reg_r0[i]
		: main_encodeexit_crit_edge_phitmp5_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_indvarnext10[i]
		= (main_encodeexit_crit_edge_indvarnext10_r0[i]==main_encodeexit_crit_edge_indvarnext10_r1[i])? main_encodeexit_crit_edge_indvarnext10_r0[i]
		: main_encodeexit_crit_edge_indvarnext10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_encodeexit_crit_edge_indvarnext10_reg[i]
		= (main_encodeexit_crit_edge_indvarnext10_reg_r0[i]==main_encodeexit_crit_edge_indvarnext10_reg_r1[i])? main_encodeexit_crit_edge_indvarnext10_reg_r0[i]
		: main_encodeexit_crit_edge_indvarnext10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_preheaderipreheader_249[i]
		= (main_preheaderipreheader_249_r0[i]==main_preheaderipreheader_249_r1[i])? main_preheaderipreheader_249_r0[i]
		: main_preheaderipreheader_249_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderipreheader_250[i]
		= (main_preheaderipreheader_250_r0[i]==main_preheaderipreheader_250_r1[i])? main_preheaderipreheader_250_r0[i]
		: main_preheaderipreheader_250_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderipreheader_250_reg[i]
		= (main_preheaderipreheader_250_reg_r0[i]==main_preheaderipreheader_250_reg_r1[i])? main_preheaderipreheader_250_reg_r0[i]
		: main_preheaderipreheader_250_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_indvar[i]
		= (main_preheaderi_indvar_r0[i]==main_preheaderi_indvar_r1[i])? main_preheaderi_indvar_r0[i]
		: main_preheaderi_indvar_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_indvar_reg[i]
		= (main_preheaderi_indvar_reg_r0[i]==main_preheaderi_indvar_reg_r1[i])? main_preheaderi_indvar_reg_r0[i]
		: main_preheaderi_indvar_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd100[i]
		= (main_preheaderi_accumd100_r0[i]==main_preheaderi_accumd100_r1[i])? main_preheaderi_accumd100_r0[i]
		: main_preheaderi_accumd100_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd100_reg[i]
		= (main_preheaderi_accumd100_reg_r0[i]==main_preheaderi_accumd100_reg_r1[i])? main_preheaderi_accumd100_reg_r0[i]
		: main_preheaderi_accumd100_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd90[i]
		= (main_preheaderi_accumd90_r0[i]==main_preheaderi_accumd90_r1[i])? main_preheaderi_accumd90_r0[i]
		: main_preheaderi_accumd90_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd90_reg[i]
		= (main_preheaderi_accumd90_reg_r0[i]==main_preheaderi_accumd90_reg_r1[i])? main_preheaderi_accumd90_reg_r0[i]
		: main_preheaderi_accumd90_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd80[i]
		= (main_preheaderi_accumd80_r0[i]==main_preheaderi_accumd80_r1[i])? main_preheaderi_accumd80_r0[i]
		: main_preheaderi_accumd80_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd80_reg[i]
		= (main_preheaderi_accumd80_reg_r0[i]==main_preheaderi_accumd80_reg_r1[i])? main_preheaderi_accumd80_reg_r0[i]
		: main_preheaderi_accumd80_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd70[i]
		= (main_preheaderi_accumd70_r0[i]==main_preheaderi_accumd70_r1[i])? main_preheaderi_accumd70_r0[i]
		: main_preheaderi_accumd70_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd70_reg[i]
		= (main_preheaderi_accumd70_reg_r0[i]==main_preheaderi_accumd70_reg_r1[i])? main_preheaderi_accumd70_reg_r0[i]
		: main_preheaderi_accumd70_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd60[i]
		= (main_preheaderi_accumd60_r0[i]==main_preheaderi_accumd60_r1[i])? main_preheaderi_accumd60_r0[i]
		: main_preheaderi_accumd60_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd60_reg[i]
		= (main_preheaderi_accumd60_reg_r0[i]==main_preheaderi_accumd60_reg_r1[i])? main_preheaderi_accumd60_reg_r0[i]
		: main_preheaderi_accumd60_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd50[i]
		= (main_preheaderi_accumd50_r0[i]==main_preheaderi_accumd50_r1[i])? main_preheaderi_accumd50_r0[i]
		: main_preheaderi_accumd50_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd50_reg[i]
		= (main_preheaderi_accumd50_reg_r0[i]==main_preheaderi_accumd50_reg_r1[i])? main_preheaderi_accumd50_reg_r0[i]
		: main_preheaderi_accumd50_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd40[i]
		= (main_preheaderi_accumd40_r0[i]==main_preheaderi_accumd40_r1[i])? main_preheaderi_accumd40_r0[i]
		: main_preheaderi_accumd40_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd40_reg[i]
		= (main_preheaderi_accumd40_reg_r0[i]==main_preheaderi_accumd40_reg_r1[i])? main_preheaderi_accumd40_reg_r0[i]
		: main_preheaderi_accumd40_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd30[i]
		= (main_preheaderi_accumd30_r0[i]==main_preheaderi_accumd30_r1[i])? main_preheaderi_accumd30_r0[i]
		: main_preheaderi_accumd30_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd30_reg[i]
		= (main_preheaderi_accumd30_reg_r0[i]==main_preheaderi_accumd30_reg_r1[i])? main_preheaderi_accumd30_reg_r0[i]
		: main_preheaderi_accumd30_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd20[i]
		= (main_preheaderi_accumd20_r0[i]==main_preheaderi_accumd20_r1[i])? main_preheaderi_accumd20_r0[i]
		: main_preheaderi_accumd20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd20_reg[i]
		= (main_preheaderi_accumd20_reg_r0[i]==main_preheaderi_accumd20_reg_r1[i])? main_preheaderi_accumd20_reg_r0[i]
		: main_preheaderi_accumd20_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd10[i]
		= (main_preheaderi_accumd10_r0[i]==main_preheaderi_accumd10_r1[i])? main_preheaderi_accumd10_r0[i]
		: main_preheaderi_accumd10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd10_reg[i]
		= (main_preheaderi_accumd10_reg_r0[i]==main_preheaderi_accumd10_reg_r1[i])? main_preheaderi_accumd10_reg_r0[i]
		: main_preheaderi_accumd10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd00[i]
		= (main_preheaderi_accumd00_r0[i]==main_preheaderi_accumd00_r1[i])? main_preheaderi_accumd00_r0[i]
		: main_preheaderi_accumd00_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumd00_reg[i]
		= (main_preheaderi_accumd00_reg_r0[i]==main_preheaderi_accumd00_reg_r1[i])? main_preheaderi_accumd00_reg_r0[i]
		: main_preheaderi_accumd00_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc100[i]
		= (main_preheaderi_accumc100_r0[i]==main_preheaderi_accumc100_r1[i])? main_preheaderi_accumc100_r0[i]
		: main_preheaderi_accumc100_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc100_reg[i]
		= (main_preheaderi_accumc100_reg_r0[i]==main_preheaderi_accumc100_reg_r1[i])? main_preheaderi_accumc100_reg_r0[i]
		: main_preheaderi_accumc100_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc90[i]
		= (main_preheaderi_accumc90_r0[i]==main_preheaderi_accumc90_r1[i])? main_preheaderi_accumc90_r0[i]
		: main_preheaderi_accumc90_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc90_reg[i]
		= (main_preheaderi_accumc90_reg_r0[i]==main_preheaderi_accumc90_reg_r1[i])? main_preheaderi_accumc90_reg_r0[i]
		: main_preheaderi_accumc90_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc80[i]
		= (main_preheaderi_accumc80_r0[i]==main_preheaderi_accumc80_r1[i])? main_preheaderi_accumc80_r0[i]
		: main_preheaderi_accumc80_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc80_reg[i]
		= (main_preheaderi_accumc80_reg_r0[i]==main_preheaderi_accumc80_reg_r1[i])? main_preheaderi_accumc80_reg_r0[i]
		: main_preheaderi_accumc80_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc70[i]
		= (main_preheaderi_accumc70_r0[i]==main_preheaderi_accumc70_r1[i])? main_preheaderi_accumc70_r0[i]
		: main_preheaderi_accumc70_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc70_reg[i]
		= (main_preheaderi_accumc70_reg_r0[i]==main_preheaderi_accumc70_reg_r1[i])? main_preheaderi_accumc70_reg_r0[i]
		: main_preheaderi_accumc70_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc60[i]
		= (main_preheaderi_accumc60_r0[i]==main_preheaderi_accumc60_r1[i])? main_preheaderi_accumc60_r0[i]
		: main_preheaderi_accumc60_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc60_reg[i]
		= (main_preheaderi_accumc60_reg_r0[i]==main_preheaderi_accumc60_reg_r1[i])? main_preheaderi_accumc60_reg_r0[i]
		: main_preheaderi_accumc60_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc50[i]
		= (main_preheaderi_accumc50_r0[i]==main_preheaderi_accumc50_r1[i])? main_preheaderi_accumc50_r0[i]
		: main_preheaderi_accumc50_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc50_reg[i]
		= (main_preheaderi_accumc50_reg_r0[i]==main_preheaderi_accumc50_reg_r1[i])? main_preheaderi_accumc50_reg_r0[i]
		: main_preheaderi_accumc50_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc40[i]
		= (main_preheaderi_accumc40_r0[i]==main_preheaderi_accumc40_r1[i])? main_preheaderi_accumc40_r0[i]
		: main_preheaderi_accumc40_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc40_reg[i]
		= (main_preheaderi_accumc40_reg_r0[i]==main_preheaderi_accumc40_reg_r1[i])? main_preheaderi_accumc40_reg_r0[i]
		: main_preheaderi_accumc40_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc30[i]
		= (main_preheaderi_accumc30_r0[i]==main_preheaderi_accumc30_r1[i])? main_preheaderi_accumc30_r0[i]
		: main_preheaderi_accumc30_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc30_reg[i]
		= (main_preheaderi_accumc30_reg_r0[i]==main_preheaderi_accumc30_reg_r1[i])? main_preheaderi_accumc30_reg_r0[i]
		: main_preheaderi_accumc30_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc20[i]
		= (main_preheaderi_accumc20_r0[i]==main_preheaderi_accumc20_r1[i])? main_preheaderi_accumc20_r0[i]
		: main_preheaderi_accumc20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc20_reg[i]
		= (main_preheaderi_accumc20_reg_r0[i]==main_preheaderi_accumc20_reg_r1[i])? main_preheaderi_accumc20_reg_r0[i]
		: main_preheaderi_accumc20_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc10[i]
		= (main_preheaderi_accumc10_r0[i]==main_preheaderi_accumc10_r1[i])? main_preheaderi_accumc10_r0[i]
		: main_preheaderi_accumc10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc10_reg[i]
		= (main_preheaderi_accumc10_reg_r0[i]==main_preheaderi_accumc10_reg_r1[i])? main_preheaderi_accumc10_reg_r0[i]
		: main_preheaderi_accumc10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc00[i]
		= (main_preheaderi_accumc00_r0[i]==main_preheaderi_accumc00_r1[i])? main_preheaderi_accumc00_r0[i]
		: main_preheaderi_accumc00_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_accumc00_reg[i]
		= (main_preheaderi_accumc00_reg_r0[i]==main_preheaderi_accumc00_reg_r1[i])? main_preheaderi_accumc00_reg_r0[i]
		: main_preheaderi_accumc00_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_ph20[i]
		= (main_preheaderi_dec_ph20_r0[i]==main_preheaderi_dec_ph20_r1[i])? main_preheaderi_dec_ph20_r0[i]
		: main_preheaderi_dec_ph20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_ph20_reg[i]
		= (main_preheaderi_dec_ph20_reg_r0[i]==main_preheaderi_dec_ph20_reg_r1[i])? main_preheaderi_dec_ph20_reg_r0[i]
		: main_preheaderi_dec_ph20_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_ph10[i]
		= (main_preheaderi_dec_ph10_r0[i]==main_preheaderi_dec_ph10_r1[i])? main_preheaderi_dec_ph10_r0[i]
		: main_preheaderi_dec_ph10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_ph10_reg[i]
		= (main_preheaderi_dec_ph10_reg_r0[i]==main_preheaderi_dec_ph10_reg_r1[i])? main_preheaderi_dec_ph10_reg_r0[i]
		: main_preheaderi_dec_ph10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_nbh0[i]
		= (main_preheaderi_dec_nbh0_r0[i]==main_preheaderi_dec_nbh0_r1[i])? main_preheaderi_dec_nbh0_r0[i]
		: main_preheaderi_dec_nbh0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_nbh0_reg[i]
		= (main_preheaderi_dec_nbh0_reg_r0[i]==main_preheaderi_dec_nbh0_reg_r1[i])? main_preheaderi_dec_nbh0_reg_r0[i]
		: main_preheaderi_dec_nbh0_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_deth0[i]
		= (main_preheaderi_dec_deth0_r0[i]==main_preheaderi_dec_deth0_r1[i])? main_preheaderi_dec_deth0_r0[i]
		: main_preheaderi_dec_deth0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_deth0_reg[i]
		= (main_preheaderi_dec_deth0_reg_r0[i]==main_preheaderi_dec_deth0_reg_r1[i])? main_preheaderi_dec_deth0_reg_r0[i]
		: main_preheaderi_dec_deth0_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_ah20[i]
		= (main_preheaderi_dec_ah20_r0[i]==main_preheaderi_dec_ah20_r1[i])? main_preheaderi_dec_ah20_r0[i]
		: main_preheaderi_dec_ah20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_ah20_reg[i]
		= (main_preheaderi_dec_ah20_reg_r0[i]==main_preheaderi_dec_ah20_reg_r1[i])? main_preheaderi_dec_ah20_reg_r0[i]
		: main_preheaderi_dec_ah20_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_rh20[i]
		= (main_preheaderi_dec_rh20_r0[i]==main_preheaderi_dec_rh20_r1[i])? main_preheaderi_dec_rh20_r0[i]
		: main_preheaderi_dec_rh20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_rh20_reg[i]
		= (main_preheaderi_dec_rh20_reg_r0[i]==main_preheaderi_dec_rh20_reg_r1[i])? main_preheaderi_dec_rh20_reg_r0[i]
		: main_preheaderi_dec_rh20_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_ah10[i]
		= (main_preheaderi_dec_ah10_r0[i]==main_preheaderi_dec_ah10_r1[i])? main_preheaderi_dec_ah10_r0[i]
		: main_preheaderi_dec_ah10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_ah10_reg[i]
		= (main_preheaderi_dec_ah10_reg_r0[i]==main_preheaderi_dec_ah10_reg_r1[i])? main_preheaderi_dec_ah10_reg_r0[i]
		: main_preheaderi_dec_ah10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_rh10[i]
		= (main_preheaderi_dec_rh10_r0[i]==main_preheaderi_dec_rh10_r1[i])? main_preheaderi_dec_rh10_r0[i]
		: main_preheaderi_dec_rh10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_rh10_reg[i]
		= (main_preheaderi_dec_rh10_reg_r0[i]==main_preheaderi_dec_rh10_reg_r1[i])? main_preheaderi_dec_rh10_reg_r0[i]
		: main_preheaderi_dec_rh10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_plt20[i]
		= (main_preheaderi_dec_plt20_r0[i]==main_preheaderi_dec_plt20_r1[i])? main_preheaderi_dec_plt20_r0[i]
		: main_preheaderi_dec_plt20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_plt20_reg[i]
		= (main_preheaderi_dec_plt20_reg_r0[i]==main_preheaderi_dec_plt20_reg_r1[i])? main_preheaderi_dec_plt20_reg_r0[i]
		: main_preheaderi_dec_plt20_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_plt10[i]
		= (main_preheaderi_dec_plt10_r0[i]==main_preheaderi_dec_plt10_r1[i])? main_preheaderi_dec_plt10_r0[i]
		: main_preheaderi_dec_plt10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_plt10_reg[i]
		= (main_preheaderi_dec_plt10_reg_r0[i]==main_preheaderi_dec_plt10_reg_r1[i])? main_preheaderi_dec_plt10_reg_r0[i]
		: main_preheaderi_dec_plt10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_nbl0[i]
		= (main_preheaderi_dec_nbl0_r0[i]==main_preheaderi_dec_nbl0_r1[i])? main_preheaderi_dec_nbl0_r0[i]
		: main_preheaderi_dec_nbl0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_nbl0_reg[i]
		= (main_preheaderi_dec_nbl0_reg_r0[i]==main_preheaderi_dec_nbl0_reg_r1[i])? main_preheaderi_dec_nbl0_reg_r0[i]
		: main_preheaderi_dec_nbl0_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_detl0[i]
		= (main_preheaderi_dec_detl0_r0[i]==main_preheaderi_dec_detl0_r1[i])? main_preheaderi_dec_detl0_r0[i]
		: main_preheaderi_dec_detl0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_detl0_reg[i]
		= (main_preheaderi_dec_detl0_reg_r0[i]==main_preheaderi_dec_detl0_reg_r1[i])? main_preheaderi_dec_detl0_reg_r0[i]
		: main_preheaderi_dec_detl0_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_al20[i]
		= (main_preheaderi_dec_al20_r0[i]==main_preheaderi_dec_al20_r1[i])? main_preheaderi_dec_al20_r0[i]
		: main_preheaderi_dec_al20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_al20_reg[i]
		= (main_preheaderi_dec_al20_reg_r0[i]==main_preheaderi_dec_al20_reg_r1[i])? main_preheaderi_dec_al20_reg_r0[i]
		: main_preheaderi_dec_al20_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_rlt20[i]
		= (main_preheaderi_dec_rlt20_r0[i]==main_preheaderi_dec_rlt20_r1[i])? main_preheaderi_dec_rlt20_r0[i]
		: main_preheaderi_dec_rlt20_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_rlt20_reg[i]
		= (main_preheaderi_dec_rlt20_reg_r0[i]==main_preheaderi_dec_rlt20_reg_r1[i])? main_preheaderi_dec_rlt20_reg_r0[i]
		: main_preheaderi_dec_rlt20_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_al10[i]
		= (main_preheaderi_dec_al10_r0[i]==main_preheaderi_dec_al10_r1[i])? main_preheaderi_dec_al10_r0[i]
		: main_preheaderi_dec_al10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_al10_reg[i]
		= (main_preheaderi_dec_al10_reg_r0[i]==main_preheaderi_dec_al10_reg_r1[i])? main_preheaderi_dec_al10_reg_r0[i]
		: main_preheaderi_dec_al10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_rlt10[i]
		= (main_preheaderi_dec_rlt10_r0[i]==main_preheaderi_dec_rlt10_r1[i])? main_preheaderi_dec_rlt10_r0[i]
		: main_preheaderi_dec_rlt10_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_dec_rlt10_reg[i]
		= (main_preheaderi_dec_rlt10_reg_r0[i]==main_preheaderi_dec_rlt10_reg_r1[i])? main_preheaderi_dec_rlt10_reg_r0[i]
		: main_preheaderi_dec_rlt10_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_i11i[i]
		= (main_preheaderi_i11i_r0[i]==main_preheaderi_i11i_r1[i])? main_preheaderi_i11i_r0[i]
		: main_preheaderi_i11i_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_251[i]
		= (main_preheaderi_251_r0[i]==main_preheaderi_251_r1[i])? main_preheaderi_251_r0[i]
		: main_preheaderi_251_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_preheaderi_scevgep6[i]
		= (main_preheaderi_scevgep6_r0[i]==main_preheaderi_scevgep6_r1[i])? main_preheaderi_scevgep6_r0[i]
		: main_preheaderi_scevgep6_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_preheaderi_scevgep6_reg[i]
		= (main_preheaderi_scevgep6_reg_r0[i]==main_preheaderi_scevgep6_reg_r1[i])? main_preheaderi_scevgep6_reg_r0[i]
		: main_preheaderi_scevgep6_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_preheaderi_scevgep7[i]
		= (main_preheaderi_scevgep7_r0[i]==main_preheaderi_scevgep7_r1[i])? main_preheaderi_scevgep7_r0[i]
		: main_preheaderi_scevgep7_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_preheaderi_scevgep7_reg[i]
		= (main_preheaderi_scevgep7_reg_r0[i]==main_preheaderi_scevgep7_reg_r1[i])? main_preheaderi_scevgep7_reg_r0[i]
		: main_preheaderi_scevgep7_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_252[i]
		= (main_preheaderi_252_r0[i]==main_preheaderi_252_r1[i])? main_preheaderi_252_r0[i]
		: main_preheaderi_252_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_preheaderi_253[i]
		= (main_preheaderi_253_r0[i]==main_preheaderi_253_r1[i])? main_preheaderi_253_r0[i]
		: main_preheaderi_253_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_254[i]
		= (main_preheaderi_254_r0[i]==main_preheaderi_254_r1[i])? main_preheaderi_254_r0[i]
		: main_preheaderi_254_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_255[i]
		= (main_preheaderi_255_r0[i]==main_preheaderi_255_r1[i])? main_preheaderi_255_r0[i]
		: main_preheaderi_255_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_256[i]
		= (main_preheaderi_256_r0[i]==main_preheaderi_256_r1[i])? main_preheaderi_256_r0[i]
		: main_preheaderi_256_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_257[i]
		= (main_preheaderi_257_r0[i]==main_preheaderi_257_r1[i])? main_preheaderi_257_r0[i]
		: main_preheaderi_257_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_258[i]
		= (main_preheaderi_258_r0[i]==main_preheaderi_258_r1[i])? main_preheaderi_258_r0[i]
		: main_preheaderi_258_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_258_reg[i]
		= (main_preheaderi_258_reg_r0[i]==main_preheaderi_258_reg_r1[i])? main_preheaderi_258_reg_r0[i]
		: main_preheaderi_258_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_259[i]
		= (main_preheaderi_259_r0[i]==main_preheaderi_259_r1[i])? main_preheaderi_259_r0[i]
		: main_preheaderi_259_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_260[i]
		= (main_preheaderi_260_r0[i]==main_preheaderi_260_r1[i])? main_preheaderi_260_r0[i]
		: main_preheaderi_260_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_261[i]
		= (main_preheaderi_261_r0[i]==main_preheaderi_261_r1[i])? main_preheaderi_261_r0[i]
		: main_preheaderi_261_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_262[i]
		= (main_preheaderi_262_r0[i]==main_preheaderi_262_r1[i])? main_preheaderi_262_r0[i]
		: main_preheaderi_262_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_262_reg[i]
		= (main_preheaderi_262_reg_r0[i]==main_preheaderi_262_reg_r1[i])? main_preheaderi_262_reg_r0[i]
		: main_preheaderi_262_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_263[i]
		= (main_preheaderi_263_r0[i]==main_preheaderi_263_r1[i])? main_preheaderi_263_r0[i]
		: main_preheaderi_263_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_264[i]
		= (main_preheaderi_264_r0[i]==main_preheaderi_264_r1[i])? main_preheaderi_264_r0[i]
		: main_preheaderi_264_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_265[i]
		= (main_preheaderi_265_r0[i]==main_preheaderi_265_r1[i])? main_preheaderi_265_r0[i]
		: main_preheaderi_265_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_266[i]
		= (main_preheaderi_266_r0[i]==main_preheaderi_266_r1[i])? main_preheaderi_266_r0[i]
		: main_preheaderi_266_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_266_reg[i]
		= (main_preheaderi_266_reg_r0[i]==main_preheaderi_266_reg_r1[i])? main_preheaderi_266_reg_r0[i]
		: main_preheaderi_266_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_267[i]
		= (main_preheaderi_267_r0[i]==main_preheaderi_267_r1[i])? main_preheaderi_267_r0[i]
		: main_preheaderi_267_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_268[i]
		= (main_preheaderi_268_r0[i]==main_preheaderi_268_r1[i])? main_preheaderi_268_r0[i]
		: main_preheaderi_268_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_269[i]
		= (main_preheaderi_269_r0[i]==main_preheaderi_269_r1[i])? main_preheaderi_269_r0[i]
		: main_preheaderi_269_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_269_reg[i]
		= (main_preheaderi_269_reg_r0[i]==main_preheaderi_269_reg_r1[i])? main_preheaderi_269_reg_r0[i]
		: main_preheaderi_269_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_270[i]
		= (main_preheaderi_270_r0[i]==main_preheaderi_270_r1[i])? main_preheaderi_270_r0[i]
		: main_preheaderi_270_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_271[i]
		= (main_preheaderi_271_r0[i]==main_preheaderi_271_r1[i])? main_preheaderi_271_r0[i]
		: main_preheaderi_271_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_272[i]
		= (main_preheaderi_272_r0[i]==main_preheaderi_272_r1[i])? main_preheaderi_272_r0[i]
		: main_preheaderi_272_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_273[i]
		= (main_preheaderi_273_r0[i]==main_preheaderi_273_r1[i])? main_preheaderi_273_r0[i]
		: main_preheaderi_273_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_273_reg[i]
		= (main_preheaderi_273_reg_r0[i]==main_preheaderi_273_reg_r1[i])? main_preheaderi_273_reg_r0[i]
		: main_preheaderi_273_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_274[i]
		= (main_preheaderi_274_r0[i]==main_preheaderi_274_r1[i])? main_preheaderi_274_r0[i]
		: main_preheaderi_274_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_274_reg[i]
		= (main_preheaderi_274_reg_r0[i]==main_preheaderi_274_reg_r1[i])? main_preheaderi_274_reg_r0[i]
		: main_preheaderi_274_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_275[i]
		= (main_preheaderi_275_r0[i]==main_preheaderi_275_r1[i])? main_preheaderi_275_r0[i]
		: main_preheaderi_275_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_276[i]
		= (main_preheaderi_276_r0[i]==main_preheaderi_276_r1[i])? main_preheaderi_276_r0[i]
		: main_preheaderi_276_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_277[i]
		= (main_preheaderi_277_r0[i]==main_preheaderi_277_r1[i])? main_preheaderi_277_r0[i]
		: main_preheaderi_277_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_277_reg[i]
		= (main_preheaderi_277_reg_r0[i]==main_preheaderi_277_reg_r1[i])? main_preheaderi_277_reg_r0[i]
		: main_preheaderi_277_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_278[i]
		= (main_preheaderi_278_r0[i]==main_preheaderi_278_r1[i])? main_preheaderi_278_r0[i]
		: main_preheaderi_278_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_279[i]
		= (main_preheaderi_279_r0[i]==main_preheaderi_279_r1[i])? main_preheaderi_279_r0[i]
		: main_preheaderi_279_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_279_reg[i]
		= (main_preheaderi_279_reg_r0[i]==main_preheaderi_279_reg_r1[i])? main_preheaderi_279_reg_r0[i]
		: main_preheaderi_279_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_280[i]
		= (main_preheaderi_280_r0[i]==main_preheaderi_280_r1[i])? main_preheaderi_280_r0[i]
		: main_preheaderi_280_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_280_reg[i]
		= (main_preheaderi_280_reg_r0[i]==main_preheaderi_280_reg_r1[i])? main_preheaderi_280_reg_r0[i]
		: main_preheaderi_280_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_281[i]
		= (main_preheaderi_281_r0[i]==main_preheaderi_281_r1[i])? main_preheaderi_281_r0[i]
		: main_preheaderi_281_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_281_reg[i]
		= (main_preheaderi_281_reg_r0[i]==main_preheaderi_281_reg_r1[i])? main_preheaderi_281_reg_r0[i]
		: main_preheaderi_281_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_tmpii[i]
		= (main_preheaderi_tmpii_r0[i]==main_preheaderi_tmpii_r1[i])? main_preheaderi_tmpii_r0[i]
		: main_preheaderi_tmpii_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_tmp1ii[i]
		= (main_preheaderi_tmp1ii_r0[i]==main_preheaderi_tmp1ii_r1[i])? main_preheaderi_tmp1ii_r0[i]
		: main_preheaderi_tmp1ii_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_282[i]
		= (main_preheaderi_282_r0[i]==main_preheaderi_282_r1[i])? main_preheaderi_282_r0[i]
		: main_preheaderi_282_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_283[i]
		= (main_preheaderi_283_r0[i]==main_preheaderi_283_r1[i])? main_preheaderi_283_r0[i]
		: main_preheaderi_283_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_283_reg[i]
		= (main_preheaderi_283_reg_r0[i]==main_preheaderi_283_reg_r1[i])? main_preheaderi_283_reg_r0[i]
		: main_preheaderi_283_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_284[i]
		= (main_preheaderi_284_r0[i]==main_preheaderi_284_r1[i])? main_preheaderi_284_r0[i]
		: main_preheaderi_284_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_285[i]
		= (main_preheaderi_285_r0[i]==main_preheaderi_285_r1[i])? main_preheaderi_285_r0[i]
		: main_preheaderi_285_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_preheaderi_286[i]
		= (main_preheaderi_286_r0[i]==main_preheaderi_286_r1[i])? main_preheaderi_286_r0[i]
		: main_preheaderi_286_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_287[i]
		= (main_preheaderi_287_r0[i]==main_preheaderi_287_r1[i])? main_preheaderi_287_r0[i]
		: main_preheaderi_287_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_288[i]
		= (main_preheaderi_288_r0[i]==main_preheaderi_288_r1[i])? main_preheaderi_288_r0[i]
		: main_preheaderi_288_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_289[i]
		= (main_preheaderi_289_r0[i]==main_preheaderi_289_r1[i])? main_preheaderi_289_r0[i]
		: main_preheaderi_289_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_289_reg[i]
		= (main_preheaderi_289_reg_r0[i]==main_preheaderi_289_reg_r1[i])? main_preheaderi_289_reg_r0[i]
		: main_preheaderi_289_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_290[i]
		= (main_preheaderi_290_r0[i]==main_preheaderi_290_r1[i])? main_preheaderi_290_r0[i]
		: main_preheaderi_290_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_291[i]
		= (main_preheaderi_291_r0[i]==main_preheaderi_291_r1[i])? main_preheaderi_291_r0[i]
		: main_preheaderi_291_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_291_reg[i]
		= (main_preheaderi_291_reg_r0[i]==main_preheaderi_291_reg_r1[i])? main_preheaderi_291_reg_r0[i]
		: main_preheaderi_291_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_292[i]
		= (main_preheaderi_292_r0[i]==main_preheaderi_292_r1[i])? main_preheaderi_292_r0[i]
		: main_preheaderi_292_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_292_reg[i]
		= (main_preheaderi_292_reg_r0[i]==main_preheaderi_292_reg_r1[i])? main_preheaderi_292_reg_r0[i]
		: main_preheaderi_292_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_293[i]
		= (main_preheaderi_293_r0[i]==main_preheaderi_293_r1[i])? main_preheaderi_293_r0[i]
		: main_preheaderi_293_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_294[i]
		= (main_preheaderi_294_r0[i]==main_preheaderi_294_r1[i])? main_preheaderi_294_r0[i]
		: main_preheaderi_294_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_294_reg[i]
		= (main_preheaderi_294_reg_r0[i]==main_preheaderi_294_reg_r1[i])? main_preheaderi_294_reg_r0[i]
		: main_preheaderi_294_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_preheaderi_295[i]
		= (main_preheaderi_295_r0[i]==main_preheaderi_295_r1[i])? main_preheaderi_295_r0[i]
		: main_preheaderi_295_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_296[i]
		= (main_preheaderi_296_r0[i]==main_preheaderi_296_r1[i])? main_preheaderi_296_r0[i]
		: main_preheaderi_296_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_297[i]
		= (main_preheaderi_297_r0[i]==main_preheaderi_297_r1[i])? main_preheaderi_297_r0[i]
		: main_preheaderi_297_r2[i];
	end
end
always @(*) begin
	main_preheaderi_298
		= (main_preheaderi_298_r0==main_preheaderi_298_r1)? main_preheaderi_298_r0
		: main_preheaderi_298_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_i12i[i]
		= (main_preheaderi_i12i_r0[i]==main_preheaderi_i12i_r1[i])? main_preheaderi_i12i_r0[i]
		: main_preheaderi_i12i_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_i12i_reg[i]
		= (main_preheaderi_i12i_reg_r0[i]==main_preheaderi_i12i_reg_r1[i])? main_preheaderi_i12i_reg_r0[i]
		: main_preheaderi_i12i_reg_r2[i];
	end
end
always @(*) begin
	main_preheaderi_299
		= (main_preheaderi_299_r0==main_preheaderi_299_r1)? main_preheaderi_299_r0
		: main_preheaderi_299_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_i13i[i]
		= (main_preheaderi_i13i_r0[i]==main_preheaderi_i13i_r1[i])? main_preheaderi_i13i_r0[i]
		: main_preheaderi_i13i_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_i13i_reg[i]
		= (main_preheaderi_i13i_reg_r0[i]==main_preheaderi_i13i_reg_r1[i])? main_preheaderi_i13i_reg_r0[i]
		: main_preheaderi_i13i_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_300[i]
		= (main_preheaderi_300_r0[i]==main_preheaderi_300_r1[i])? main_preheaderi_300_r0[i]
		: main_preheaderi_300_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_301[i]
		= (main_preheaderi_301_r0[i]==main_preheaderi_301_r1[i])? main_preheaderi_301_r0[i]
		: main_preheaderi_301_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_301_reg[i]
		= (main_preheaderi_301_reg_r0[i]==main_preheaderi_301_reg_r1[i])? main_preheaderi_301_reg_r0[i]
		: main_preheaderi_301_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_302[i]
		= (main_preheaderi_302_r0[i]==main_preheaderi_302_r1[i])? main_preheaderi_302_r0[i]
		: main_preheaderi_302_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_preheaderi_303[i]
		= (main_preheaderi_303_r0[i]==main_preheaderi_303_r1[i])? main_preheaderi_303_r0[i]
		: main_preheaderi_303_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_304[i]
		= (main_preheaderi_304_r0[i]==main_preheaderi_304_r1[i])? main_preheaderi_304_r0[i]
		: main_preheaderi_304_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_305[i]
		= (main_preheaderi_305_r0[i]==main_preheaderi_305_r1[i])? main_preheaderi_305_r0[i]
		: main_preheaderi_305_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_305_reg[i]
		= (main_preheaderi_305_reg_r0[i]==main_preheaderi_305_reg_r1[i])? main_preheaderi_305_reg_r0[i]
		: main_preheaderi_305_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_306[i]
		= (main_preheaderi_306_r0[i]==main_preheaderi_306_r1[i])? main_preheaderi_306_r0[i]
		: main_preheaderi_306_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_307[i]
		= (main_preheaderi_307_r0[i]==main_preheaderi_307_r1[i])? main_preheaderi_307_r0[i]
		: main_preheaderi_307_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_307_reg[i]
		= (main_preheaderi_307_reg_r0[i]==main_preheaderi_307_reg_r1[i])? main_preheaderi_307_reg_r0[i]
		: main_preheaderi_307_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_308[i]
		= (main_preheaderi_308_r0[i]==main_preheaderi_308_r1[i])? main_preheaderi_308_r0[i]
		: main_preheaderi_308_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_308_reg[i]
		= (main_preheaderi_308_reg_r0[i]==main_preheaderi_308_reg_r1[i])? main_preheaderi_308_reg_r0[i]
		: main_preheaderi_308_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_309[i]
		= (main_preheaderi_309_r0[i]==main_preheaderi_309_r1[i])? main_preheaderi_309_r0[i]
		: main_preheaderi_309_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_309_reg[i]
		= (main_preheaderi_309_reg_r0[i]==main_preheaderi_309_reg_r1[i])? main_preheaderi_309_reg_r0[i]
		: main_preheaderi_309_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_310[i]
		= (main_preheaderi_310_r0[i]==main_preheaderi_310_r1[i])? main_preheaderi_310_r0[i]
		: main_preheaderi_310_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_310_reg[i]
		= (main_preheaderi_310_reg_r0[i]==main_preheaderi_310_reg_r1[i])? main_preheaderi_310_reg_r0[i]
		: main_preheaderi_310_reg_r2[i];
	end
end
always @(*) begin
	main_preheaderi_311
		= (main_preheaderi_311_r0==main_preheaderi_311_r1)? main_preheaderi_311_r0
		: main_preheaderi_311_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_312[i]
		= (main_preheaderi_312_r0[i]==main_preheaderi_312_r1[i])? main_preheaderi_312_r0[i]
		: main_preheaderi_312_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_312_reg[i]
		= (main_preheaderi_312_reg_r0[i]==main_preheaderi_312_reg_r1[i])? main_preheaderi_312_reg_r0[i]
		: main_preheaderi_312_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_1i8i[i]
		= (main_preheaderi_1i8i_r0[i]==main_preheaderi_1i8i_r1[i])? main_preheaderi_1i8i_r0[i]
		: main_preheaderi_1i8i_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_313[i]
		= (main_preheaderi_313_r0[i]==main_preheaderi_313_r1[i])? main_preheaderi_313_r0[i]
		: main_preheaderi_313_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_313_reg[i]
		= (main_preheaderi_313_reg_r0[i]==main_preheaderi_313_reg_r1[i])? main_preheaderi_313_reg_r0[i]
		: main_preheaderi_313_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_314[i]
		= (main_preheaderi_314_r0[i]==main_preheaderi_314_r1[i])? main_preheaderi_314_r0[i]
		: main_preheaderi_314_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_315[i]
		= (main_preheaderi_315_r0[i]==main_preheaderi_315_r1[i])? main_preheaderi_315_r0[i]
		: main_preheaderi_315_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_316[i]
		= (main_preheaderi_316_r0[i]==main_preheaderi_316_r1[i])? main_preheaderi_316_r0[i]
		: main_preheaderi_316_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_317[i]
		= (main_preheaderi_317_r0[i]==main_preheaderi_317_r1[i])? main_preheaderi_317_r0[i]
		: main_preheaderi_317_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_317_reg[i]
		= (main_preheaderi_317_reg_r0[i]==main_preheaderi_317_reg_r1[i])? main_preheaderi_317_reg_r0[i]
		: main_preheaderi_317_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_318[i]
		= (main_preheaderi_318_r0[i]==main_preheaderi_318_r1[i])? main_preheaderi_318_r0[i]
		: main_preheaderi_318_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_319[i]
		= (main_preheaderi_319_r0[i]==main_preheaderi_319_r1[i])? main_preheaderi_319_r0[i]
		: main_preheaderi_319_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_319_reg[i]
		= (main_preheaderi_319_reg_r0[i]==main_preheaderi_319_reg_r1[i])? main_preheaderi_319_reg_r0[i]
		: main_preheaderi_319_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_wd40i9i[i]
		= (main_preheaderi_wd40i9i_r0[i]==main_preheaderi_wd40i9i_r1[i])? main_preheaderi_wd40i9i_r0[i]
		: main_preheaderi_wd40i9i_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_wd40i9i_reg[i]
		= (main_preheaderi_wd40i9i_reg_r0[i]==main_preheaderi_wd40i9i_reg_r1[i])? main_preheaderi_wd40i9i_reg_r0[i]
		: main_preheaderi_wd40i9i_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_320[i]
		= (main_preheaderi_320_r0[i]==main_preheaderi_320_r1[i])? main_preheaderi_320_r0[i]
		: main_preheaderi_320_r2[i];
	end
end
always @(*) begin
	main_preheaderi_321
		= (main_preheaderi_321_r0==main_preheaderi_321_r1)? main_preheaderi_321_r0
		: main_preheaderi_321_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_i10i[i]
		= (main_preheaderi_i10i_r0[i]==main_preheaderi_i10i_r1[i])? main_preheaderi_i10i_r0[i]
		: main_preheaderi_i10i_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_i10i_reg[i]
		= (main_preheaderi_i10i_reg_r0[i]==main_preheaderi_i10i_reg_r1[i])? main_preheaderi_i10i_reg_r0[i]
		: main_preheaderi_i10i_reg_r2[i];
	end
end
always @(*) begin
	main_preheaderi_322
		= (main_preheaderi_322_r0==main_preheaderi_322_r1)? main_preheaderi_322_r0
		: main_preheaderi_322_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_i11i_var0[i]
		= (main_preheaderi_i11i_var0_r0[i]==main_preheaderi_i11i_var0_r1[i])? main_preheaderi_i11i_var0_r0[i]
		: main_preheaderi_i11i_var0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_i11i_var0_reg[i]
		= (main_preheaderi_i11i_var0_reg_r0[i]==main_preheaderi_i11i_var0_reg_r1[i])? main_preheaderi_i11i_var0_reg_r0[i]
		: main_preheaderi_i11i_var0_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_323[i]
		= (main_preheaderi_323_r0[i]==main_preheaderi_323_r1[i])? main_preheaderi_323_r0[i]
		: main_preheaderi_323_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_324[i]
		= (main_preheaderi_324_r0[i]==main_preheaderi_324_r1[i])? main_preheaderi_324_r0[i]
		: main_preheaderi_324_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_324_reg[i]
		= (main_preheaderi_324_reg_r0[i]==main_preheaderi_324_reg_r1[i])? main_preheaderi_324_reg_r0[i]
		: main_preheaderi_324_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_325[i]
		= (main_preheaderi_325_r0[i]==main_preheaderi_325_r1[i])? main_preheaderi_325_r0[i]
		: main_preheaderi_325_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_326[i]
		= (main_preheaderi_326_r0[i]==main_preheaderi_326_r1[i])? main_preheaderi_326_r0[i]
		: main_preheaderi_326_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_326_reg[i]
		= (main_preheaderi_326_reg_r0[i]==main_preheaderi_326_reg_r1[i])? main_preheaderi_326_reg_r0[i]
		: main_preheaderi_326_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_327[i]
		= (main_preheaderi_327_r0[i]==main_preheaderi_327_r1[i])? main_preheaderi_327_r0[i]
		: main_preheaderi_327_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_327_reg[i]
		= (main_preheaderi_327_reg_r0[i]==main_preheaderi_327_reg_r1[i])? main_preheaderi_327_reg_r0[i]
		: main_preheaderi_327_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_apl10i5i[i]
		= (main_preheaderi_apl10i5i_r0[i]==main_preheaderi_apl10i5i_r1[i])? main_preheaderi_apl10i5i_r0[i]
		: main_preheaderi_apl10i5i_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_328[i]
		= (main_preheaderi_328_r0[i]==main_preheaderi_328_r1[i])? main_preheaderi_328_r0[i]
		: main_preheaderi_328_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_328_reg[i]
		= (main_preheaderi_328_reg_r0[i]==main_preheaderi_328_reg_r1[i])? main_preheaderi_328_reg_r0[i]
		: main_preheaderi_328_reg_r2[i];
	end
end
always @(*) begin
	main_preheaderi_329
		= (main_preheaderi_329_r0==main_preheaderi_329_r1)? main_preheaderi_329_r0
		: main_preheaderi_329_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_apl10i6i[i]
		= (main_preheaderi_apl10i6i_r0[i]==main_preheaderi_apl10i6i_r1[i])? main_preheaderi_apl10i6i_r0[i]
		: main_preheaderi_apl10i6i_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_apl10i6i_reg[i]
		= (main_preheaderi_apl10i6i_reg_r0[i]==main_preheaderi_apl10i6i_reg_r1[i])? main_preheaderi_apl10i6i_reg_r0[i]
		: main_preheaderi_apl10i6i_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_330[i]
		= (main_preheaderi_330_r0[i]==main_preheaderi_330_r1[i])? main_preheaderi_330_r0[i]
		: main_preheaderi_330_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_330_reg[i]
		= (main_preheaderi_330_reg_r0[i]==main_preheaderi_330_reg_r1[i])? main_preheaderi_330_reg_r0[i]
		: main_preheaderi_330_reg_r2[i];
	end
end
always @(*) begin
	main_preheaderi_331
		= (main_preheaderi_331_r0==main_preheaderi_331_r1)? main_preheaderi_331_r0
		: main_preheaderi_331_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_apl12i7i[i]
		= (main_preheaderi_apl12i7i_r0[i]==main_preheaderi_apl12i7i_r1[i])? main_preheaderi_apl12i7i_r0[i]
		: main_preheaderi_apl12i7i_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_apl12i7i_reg[i]
		= (main_preheaderi_apl12i7i_reg_r0[i]==main_preheaderi_apl12i7i_reg_r1[i])? main_preheaderi_apl12i7i_reg_r0[i]
		: main_preheaderi_apl12i7i_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_332[i]
		= (main_preheaderi_332_r0[i]==main_preheaderi_332_r1[i])? main_preheaderi_332_r0[i]
		: main_preheaderi_332_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_332_reg[i]
		= (main_preheaderi_332_reg_r0[i]==main_preheaderi_332_reg_r1[i])? main_preheaderi_332_reg_r0[i]
		: main_preheaderi_332_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_333[i]
		= (main_preheaderi_333_r0[i]==main_preheaderi_333_r1[i])? main_preheaderi_333_r0[i]
		: main_preheaderi_333_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_334[i]
		= (main_preheaderi_334_r0[i]==main_preheaderi_334_r1[i])? main_preheaderi_334_r0[i]
		: main_preheaderi_334_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_335[i]
		= (main_preheaderi_335_r0[i]==main_preheaderi_335_r1[i])? main_preheaderi_335_r0[i]
		: main_preheaderi_335_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_335_reg[i]
		= (main_preheaderi_335_reg_r0[i]==main_preheaderi_335_reg_r1[i])? main_preheaderi_335_reg_r0[i]
		: main_preheaderi_335_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_336[i]
		= (main_preheaderi_336_r0[i]==main_preheaderi_336_r1[i])? main_preheaderi_336_r0[i]
		: main_preheaderi_336_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_337[i]
		= (main_preheaderi_337_r0[i]==main_preheaderi_337_r1[i])? main_preheaderi_337_r0[i]
		: main_preheaderi_337_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_338[i]
		= (main_preheaderi_338_r0[i]==main_preheaderi_338_r1[i])? main_preheaderi_338_r0[i]
		: main_preheaderi_338_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_339[i]
		= (main_preheaderi_339_r0[i]==main_preheaderi_339_r1[i])? main_preheaderi_339_r0[i]
		: main_preheaderi_339_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_339_reg[i]
		= (main_preheaderi_339_reg_r0[i]==main_preheaderi_339_reg_r1[i])? main_preheaderi_339_reg_r0[i]
		: main_preheaderi_339_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_340[i]
		= (main_preheaderi_340_r0[i]==main_preheaderi_340_r1[i])? main_preheaderi_340_r0[i]
		: main_preheaderi_340_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_341[i]
		= (main_preheaderi_341_r0[i]==main_preheaderi_341_r1[i])? main_preheaderi_341_r0[i]
		: main_preheaderi_341_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_342[i]
		= (main_preheaderi_342_r0[i]==main_preheaderi_342_r1[i])? main_preheaderi_342_r0[i]
		: main_preheaderi_342_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_342_reg[i]
		= (main_preheaderi_342_reg_r0[i]==main_preheaderi_342_reg_r1[i])? main_preheaderi_342_reg_r0[i]
		: main_preheaderi_342_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_343[i]
		= (main_preheaderi_343_r0[i]==main_preheaderi_343_r1[i])? main_preheaderi_343_r0[i]
		: main_preheaderi_343_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_344[i]
		= (main_preheaderi_344_r0[i]==main_preheaderi_344_r1[i])? main_preheaderi_344_r0[i]
		: main_preheaderi_344_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_345[i]
		= (main_preheaderi_345_r0[i]==main_preheaderi_345_r1[i])? main_preheaderi_345_r0[i]
		: main_preheaderi_345_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_346[i]
		= (main_preheaderi_346_r0[i]==main_preheaderi_346_r1[i])? main_preheaderi_346_r0[i]
		: main_preheaderi_346_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_347[i]
		= (main_preheaderi_347_r0[i]==main_preheaderi_347_r1[i])? main_preheaderi_347_r0[i]
		: main_preheaderi_347_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_347_reg[i]
		= (main_preheaderi_347_reg_r0[i]==main_preheaderi_347_reg_r1[i])? main_preheaderi_347_reg_r0[i]
		: main_preheaderi_347_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_348[i]
		= (main_preheaderi_348_r0[i]==main_preheaderi_348_r1[i])? main_preheaderi_348_r0[i]
		: main_preheaderi_348_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_349[i]
		= (main_preheaderi_349_r0[i]==main_preheaderi_349_r1[i])? main_preheaderi_349_r0[i]
		: main_preheaderi_349_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_350[i]
		= (main_preheaderi_350_r0[i]==main_preheaderi_350_r1[i])? main_preheaderi_350_r0[i]
		: main_preheaderi_350_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_351[i]
		= (main_preheaderi_351_r0[i]==main_preheaderi_351_r1[i])? main_preheaderi_351_r0[i]
		: main_preheaderi_351_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_351_reg[i]
		= (main_preheaderi_351_reg_r0[i]==main_preheaderi_351_reg_r1[i])? main_preheaderi_351_reg_r0[i]
		: main_preheaderi_351_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_352[i]
		= (main_preheaderi_352_r0[i]==main_preheaderi_352_r1[i])? main_preheaderi_352_r0[i]
		: main_preheaderi_352_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_353[i]
		= (main_preheaderi_353_r0[i]==main_preheaderi_353_r1[i])? main_preheaderi_353_r0[i]
		: main_preheaderi_353_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_354[i]
		= (main_preheaderi_354_r0[i]==main_preheaderi_354_r1[i])? main_preheaderi_354_r0[i]
		: main_preheaderi_354_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_354_reg[i]
		= (main_preheaderi_354_reg_r0[i]==main_preheaderi_354_reg_r1[i])? main_preheaderi_354_reg_r0[i]
		: main_preheaderi_354_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_355[i]
		= (main_preheaderi_355_r0[i]==main_preheaderi_355_r1[i])? main_preheaderi_355_r0[i]
		: main_preheaderi_355_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_356[i]
		= (main_preheaderi_356_r0[i]==main_preheaderi_356_r1[i])? main_preheaderi_356_r0[i]
		: main_preheaderi_356_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_356_reg[i]
		= (main_preheaderi_356_reg_r0[i]==main_preheaderi_356_reg_r1[i])? main_preheaderi_356_reg_r0[i]
		: main_preheaderi_356_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_357[i]
		= (main_preheaderi_357_r0[i]==main_preheaderi_357_r1[i])? main_preheaderi_357_r0[i]
		: main_preheaderi_357_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_357_reg[i]
		= (main_preheaderi_357_reg_r0[i]==main_preheaderi_357_reg_r1[i])? main_preheaderi_357_reg_r0[i]
		: main_preheaderi_357_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_358[i]
		= (main_preheaderi_358_r0[i]==main_preheaderi_358_r1[i])? main_preheaderi_358_r0[i]
		: main_preheaderi_358_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_358_reg[i]
		= (main_preheaderi_358_reg_r0[i]==main_preheaderi_358_reg_r1[i])? main_preheaderi_358_reg_r0[i]
		: main_preheaderi_358_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_tmpi3i[i]
		= (main_preheaderi_tmpi3i_r0[i]==main_preheaderi_tmpi3i_r1[i])? main_preheaderi_tmpi3i_r0[i]
		: main_preheaderi_tmpi3i_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_tmp1i4i[i]
		= (main_preheaderi_tmp1i4i_r0[i]==main_preheaderi_tmp1i4i_r1[i])? main_preheaderi_tmp1i4i_r0[i]
		: main_preheaderi_tmp1i4i_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_359[i]
		= (main_preheaderi_359_r0[i]==main_preheaderi_359_r1[i])? main_preheaderi_359_r0[i]
		: main_preheaderi_359_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_360[i]
		= (main_preheaderi_360_r0[i]==main_preheaderi_360_r1[i])? main_preheaderi_360_r0[i]
		: main_preheaderi_360_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_360_reg[i]
		= (main_preheaderi_360_reg_r0[i]==main_preheaderi_360_reg_r1[i])? main_preheaderi_360_reg_r0[i]
		: main_preheaderi_360_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_preheaderi_361[i]
		= (main_preheaderi_361_r0[i]==main_preheaderi_361_r1[i])? main_preheaderi_361_r0[i]
		: main_preheaderi_361_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_preheaderi_361_reg[i]
		= (main_preheaderi_361_reg_r0[i]==main_preheaderi_361_reg_r1[i])? main_preheaderi_361_reg_r0[i]
		: main_preheaderi_361_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_362[i]
		= (main_preheaderi_362_r0[i]==main_preheaderi_362_r1[i])? main_preheaderi_362_r0[i]
		: main_preheaderi_362_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_363[i]
		= (main_preheaderi_363_r0[i]==main_preheaderi_363_r1[i])? main_preheaderi_363_r0[i]
		: main_preheaderi_363_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_364[i]
		= (main_preheaderi_364_r0[i]==main_preheaderi_364_r1[i])? main_preheaderi_364_r0[i]
		: main_preheaderi_364_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_364_reg[i]
		= (main_preheaderi_364_reg_r0[i]==main_preheaderi_364_reg_r1[i])? main_preheaderi_364_reg_r0[i]
		: main_preheaderi_364_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_365[i]
		= (main_preheaderi_365_r0[i]==main_preheaderi_365_r1[i])? main_preheaderi_365_r0[i]
		: main_preheaderi_365_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_366[i]
		= (main_preheaderi_366_r0[i]==main_preheaderi_366_r1[i])? main_preheaderi_366_r0[i]
		: main_preheaderi_366_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_366_reg[i]
		= (main_preheaderi_366_reg_r0[i]==main_preheaderi_366_reg_r1[i])? main_preheaderi_366_reg_r0[i]
		: main_preheaderi_366_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_preheaderi_367[i]
		= (main_preheaderi_367_r0[i]==main_preheaderi_367_r1[i])? main_preheaderi_367_r0[i]
		: main_preheaderi_367_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_preheaderi_367_reg[i]
		= (main_preheaderi_367_reg_r0[i]==main_preheaderi_367_reg_r1[i])? main_preheaderi_367_reg_r0[i]
		: main_preheaderi_367_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_368[i]
		= (main_preheaderi_368_r0[i]==main_preheaderi_368_r1[i])? main_preheaderi_368_r0[i]
		: main_preheaderi_368_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_368_reg[i]
		= (main_preheaderi_368_reg_r0[i]==main_preheaderi_368_reg_r1[i])? main_preheaderi_368_reg_r0[i]
		: main_preheaderi_368_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_369[i]
		= (main_preheaderi_369_r0[i]==main_preheaderi_369_r1[i])? main_preheaderi_369_r0[i]
		: main_preheaderi_369_r2[i];
	end
end
always @(*) begin
	main_preheaderi_370
		= (main_preheaderi_370_r0==main_preheaderi_370_r1)? main_preheaderi_370_r0
		: main_preheaderi_370_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_i1i[i]
		= (main_preheaderi_i1i_r0[i]==main_preheaderi_i1i_r1[i])? main_preheaderi_i1i_r0[i]
		: main_preheaderi_i1i_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_i1i_reg[i]
		= (main_preheaderi_i1i_reg_r0[i]==main_preheaderi_i1i_reg_r1[i])? main_preheaderi_i1i_reg_r0[i]
		: main_preheaderi_i1i_reg_r2[i];
	end
end
always @(*) begin
	main_preheaderi_371
		= (main_preheaderi_371_r0==main_preheaderi_371_r1)? main_preheaderi_371_r0
		: main_preheaderi_371_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_i2i[i]
		= (main_preheaderi_i2i_r0[i]==main_preheaderi_i2i_r1[i])? main_preheaderi_i2i_r0[i]
		: main_preheaderi_i2i_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_i2i_reg[i]
		= (main_preheaderi_i2i_reg_r0[i]==main_preheaderi_i2i_reg_r1[i])? main_preheaderi_i2i_reg_r0[i]
		: main_preheaderi_i2i_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_372[i]
		= (main_preheaderi_372_r0[i]==main_preheaderi_372_r1[i])? main_preheaderi_372_r0[i]
		: main_preheaderi_372_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_373[i]
		= (main_preheaderi_373_r0[i]==main_preheaderi_373_r1[i])? main_preheaderi_373_r0[i]
		: main_preheaderi_373_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_373_reg[i]
		= (main_preheaderi_373_reg_r0[i]==main_preheaderi_373_reg_r1[i])? main_preheaderi_373_reg_r0[i]
		: main_preheaderi_373_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_374[i]
		= (main_preheaderi_374_r0[i]==main_preheaderi_374_r1[i])? main_preheaderi_374_r0[i]
		: main_preheaderi_374_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_preheaderi_375[i]
		= (main_preheaderi_375_r0[i]==main_preheaderi_375_r1[i])? main_preheaderi_375_r0[i]
		: main_preheaderi_375_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_376[i]
		= (main_preheaderi_376_r0[i]==main_preheaderi_376_r1[i])? main_preheaderi_376_r0[i]
		: main_preheaderi_376_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_377[i]
		= (main_preheaderi_377_r0[i]==main_preheaderi_377_r1[i])? main_preheaderi_377_r0[i]
		: main_preheaderi_377_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_377_reg[i]
		= (main_preheaderi_377_reg_r0[i]==main_preheaderi_377_reg_r1[i])? main_preheaderi_377_reg_r0[i]
		: main_preheaderi_377_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_378[i]
		= (main_preheaderi_378_r0[i]==main_preheaderi_378_r1[i])? main_preheaderi_378_r0[i]
		: main_preheaderi_378_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_379[i]
		= (main_preheaderi_379_r0[i]==main_preheaderi_379_r1[i])? main_preheaderi_379_r0[i]
		: main_preheaderi_379_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_379_reg[i]
		= (main_preheaderi_379_reg_r0[i]==main_preheaderi_379_reg_r1[i])? main_preheaderi_379_reg_r0[i]
		: main_preheaderi_379_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_380[i]
		= (main_preheaderi_380_r0[i]==main_preheaderi_380_r1[i])? main_preheaderi_380_r0[i]
		: main_preheaderi_380_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_380_reg[i]
		= (main_preheaderi_380_reg_r0[i]==main_preheaderi_380_reg_r1[i])? main_preheaderi_380_reg_r0[i]
		: main_preheaderi_380_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_381[i]
		= (main_preheaderi_381_r0[i]==main_preheaderi_381_r1[i])? main_preheaderi_381_r0[i]
		: main_preheaderi_381_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_381_reg[i]
		= (main_preheaderi_381_reg_r0[i]==main_preheaderi_381_reg_r1[i])? main_preheaderi_381_reg_r0[i]
		: main_preheaderi_381_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_382[i]
		= (main_preheaderi_382_r0[i]==main_preheaderi_382_r1[i])? main_preheaderi_382_r0[i]
		: main_preheaderi_382_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_382_reg[i]
		= (main_preheaderi_382_reg_r0[i]==main_preheaderi_382_reg_r1[i])? main_preheaderi_382_reg_r0[i]
		: main_preheaderi_382_reg_r2[i];
	end
end
always @(*) begin
	main_preheaderi_383
		= (main_preheaderi_383_r0==main_preheaderi_383_r1)? main_preheaderi_383_r0
		: main_preheaderi_383_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_384[i]
		= (main_preheaderi_384_r0[i]==main_preheaderi_384_r1[i])? main_preheaderi_384_r0[i]
		: main_preheaderi_384_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_384_reg[i]
		= (main_preheaderi_384_reg_r0[i]==main_preheaderi_384_reg_r1[i])? main_preheaderi_384_reg_r0[i]
		: main_preheaderi_384_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_1ii[i]
		= (main_preheaderi_1ii_r0[i]==main_preheaderi_1ii_r1[i])? main_preheaderi_1ii_r0[i]
		: main_preheaderi_1ii_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_385[i]
		= (main_preheaderi_385_r0[i]==main_preheaderi_385_r1[i])? main_preheaderi_385_r0[i]
		: main_preheaderi_385_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_385_reg[i]
		= (main_preheaderi_385_reg_r0[i]==main_preheaderi_385_reg_r1[i])? main_preheaderi_385_reg_r0[i]
		: main_preheaderi_385_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_386[i]
		= (main_preheaderi_386_r0[i]==main_preheaderi_386_r1[i])? main_preheaderi_386_r0[i]
		: main_preheaderi_386_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_387[i]
		= (main_preheaderi_387_r0[i]==main_preheaderi_387_r1[i])? main_preheaderi_387_r0[i]
		: main_preheaderi_387_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_388[i]
		= (main_preheaderi_388_r0[i]==main_preheaderi_388_r1[i])? main_preheaderi_388_r0[i]
		: main_preheaderi_388_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_389[i]
		= (main_preheaderi_389_r0[i]==main_preheaderi_389_r1[i])? main_preheaderi_389_r0[i]
		: main_preheaderi_389_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_389_reg[i]
		= (main_preheaderi_389_reg_r0[i]==main_preheaderi_389_reg_r1[i])? main_preheaderi_389_reg_r0[i]
		: main_preheaderi_389_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_390[i]
		= (main_preheaderi_390_r0[i]==main_preheaderi_390_r1[i])? main_preheaderi_390_r0[i]
		: main_preheaderi_390_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_391[i]
		= (main_preheaderi_391_r0[i]==main_preheaderi_391_r1[i])? main_preheaderi_391_r0[i]
		: main_preheaderi_391_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_391_reg[i]
		= (main_preheaderi_391_reg_r0[i]==main_preheaderi_391_reg_r1[i])? main_preheaderi_391_reg_r0[i]
		: main_preheaderi_391_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_wd40ii[i]
		= (main_preheaderi_wd40ii_r0[i]==main_preheaderi_wd40ii_r1[i])? main_preheaderi_wd40ii_r0[i]
		: main_preheaderi_wd40ii_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_wd40ii_reg[i]
		= (main_preheaderi_wd40ii_reg_r0[i]==main_preheaderi_wd40ii_reg_r1[i])? main_preheaderi_wd40ii_reg_r0[i]
		: main_preheaderi_wd40ii_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_392[i]
		= (main_preheaderi_392_r0[i]==main_preheaderi_392_r1[i])? main_preheaderi_392_r0[i]
		: main_preheaderi_392_r2[i];
	end
end
always @(*) begin
	main_preheaderi_393
		= (main_preheaderi_393_r0==main_preheaderi_393_r1)? main_preheaderi_393_r0
		: main_preheaderi_393_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_ii[i]
		= (main_preheaderi_ii_r0[i]==main_preheaderi_ii_r1[i])? main_preheaderi_ii_r0[i]
		: main_preheaderi_ii_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_ii_reg[i]
		= (main_preheaderi_ii_reg_r0[i]==main_preheaderi_ii_reg_r1[i])? main_preheaderi_ii_reg_r0[i]
		: main_preheaderi_ii_reg_r2[i];
	end
end
always @(*) begin
	main_preheaderi_394
		= (main_preheaderi_394_r0==main_preheaderi_394_r1)? main_preheaderi_394_r0
		: main_preheaderi_394_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_ii_var1[i]
		= (main_preheaderi_ii_var1_r0[i]==main_preheaderi_ii_var1_r1[i])? main_preheaderi_ii_var1_r0[i]
		: main_preheaderi_ii_var1_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_ii_var1_reg[i]
		= (main_preheaderi_ii_var1_reg_r0[i]==main_preheaderi_ii_var1_reg_r1[i])? main_preheaderi_ii_var1_reg_r0[i]
		: main_preheaderi_ii_var1_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_395[i]
		= (main_preheaderi_395_r0[i]==main_preheaderi_395_r1[i])? main_preheaderi_395_r0[i]
		: main_preheaderi_395_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_396[i]
		= (main_preheaderi_396_r0[i]==main_preheaderi_396_r1[i])? main_preheaderi_396_r0[i]
		: main_preheaderi_396_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_396_reg[i]
		= (main_preheaderi_396_reg_r0[i]==main_preheaderi_396_reg_r1[i])? main_preheaderi_396_reg_r0[i]
		: main_preheaderi_396_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_397[i]
		= (main_preheaderi_397_r0[i]==main_preheaderi_397_r1[i])? main_preheaderi_397_r0[i]
		: main_preheaderi_397_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_398[i]
		= (main_preheaderi_398_r0[i]==main_preheaderi_398_r1[i])? main_preheaderi_398_r0[i]
		: main_preheaderi_398_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_398_reg[i]
		= (main_preheaderi_398_reg_r0[i]==main_preheaderi_398_reg_r1[i])? main_preheaderi_398_reg_r0[i]
		: main_preheaderi_398_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_399[i]
		= (main_preheaderi_399_r0[i]==main_preheaderi_399_r1[i])? main_preheaderi_399_r0[i]
		: main_preheaderi_399_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_399_reg[i]
		= (main_preheaderi_399_reg_r0[i]==main_preheaderi_399_reg_r1[i])? main_preheaderi_399_reg_r0[i]
		: main_preheaderi_399_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_apl10ii[i]
		= (main_preheaderi_apl10ii_r0[i]==main_preheaderi_apl10ii_r1[i])? main_preheaderi_apl10ii_r0[i]
		: main_preheaderi_apl10ii_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_400[i]
		= (main_preheaderi_400_r0[i]==main_preheaderi_400_r1[i])? main_preheaderi_400_r0[i]
		: main_preheaderi_400_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_400_reg[i]
		= (main_preheaderi_400_reg_r0[i]==main_preheaderi_400_reg_r1[i])? main_preheaderi_400_reg_r0[i]
		: main_preheaderi_400_reg_r2[i];
	end
end
always @(*) begin
	main_preheaderi_401
		= (main_preheaderi_401_r0==main_preheaderi_401_r1)? main_preheaderi_401_r0
		: main_preheaderi_401_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_apl10ii_var2[i]
		= (main_preheaderi_apl10ii_var2_r0[i]==main_preheaderi_apl10ii_var2_r1[i])? main_preheaderi_apl10ii_var2_r0[i]
		: main_preheaderi_apl10ii_var2_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_apl10ii_var2_reg[i]
		= (main_preheaderi_apl10ii_var2_reg_r0[i]==main_preheaderi_apl10ii_var2_reg_r1[i])? main_preheaderi_apl10ii_var2_reg_r0[i]
		: main_preheaderi_apl10ii_var2_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_402[i]
		= (main_preheaderi_402_r0[i]==main_preheaderi_402_r1[i])? main_preheaderi_402_r0[i]
		: main_preheaderi_402_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_402_reg[i]
		= (main_preheaderi_402_reg_r0[i]==main_preheaderi_402_reg_r1[i])? main_preheaderi_402_reg_r0[i]
		: main_preheaderi_402_reg_r2[i];
	end
end
always @(*) begin
	main_preheaderi_403
		= (main_preheaderi_403_r0==main_preheaderi_403_r1)? main_preheaderi_403_r0
		: main_preheaderi_403_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_apl12ii[i]
		= (main_preheaderi_apl12ii_r0[i]==main_preheaderi_apl12ii_r1[i])? main_preheaderi_apl12ii_r0[i]
		: main_preheaderi_apl12ii_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_apl12ii_reg[i]
		= (main_preheaderi_apl12ii_reg_r0[i]==main_preheaderi_apl12ii_reg_r1[i])? main_preheaderi_apl12ii_reg_r0[i]
		: main_preheaderi_apl12ii_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_404[i]
		= (main_preheaderi_404_r0[i]==main_preheaderi_404_r1[i])? main_preheaderi_404_r0[i]
		: main_preheaderi_404_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_404_reg[i]
		= (main_preheaderi_404_reg_r0[i]==main_preheaderi_404_reg_r1[i])? main_preheaderi_404_reg_r0[i]
		: main_preheaderi_404_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_405[i]
		= (main_preheaderi_405_r0[i]==main_preheaderi_405_r1[i])? main_preheaderi_405_r0[i]
		: main_preheaderi_405_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_405_reg[i]
		= (main_preheaderi_405_reg_r0[i]==main_preheaderi_405_reg_r1[i])? main_preheaderi_405_reg_r0[i]
		: main_preheaderi_405_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_406[i]
		= (main_preheaderi_406_r0[i]==main_preheaderi_406_r1[i])? main_preheaderi_406_r0[i]
		: main_preheaderi_406_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_406_reg[i]
		= (main_preheaderi_406_reg_r0[i]==main_preheaderi_406_reg_r1[i])? main_preheaderi_406_reg_r0[i]
		: main_preheaderi_406_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_407[i]
		= (main_preheaderi_407_r0[i]==main_preheaderi_407_r1[i])? main_preheaderi_407_r0[i]
		: main_preheaderi_407_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_407_reg[i]
		= (main_preheaderi_407_reg_r0[i]==main_preheaderi_407_reg_r1[i])? main_preheaderi_407_reg_r0[i]
		: main_preheaderi_407_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_408[i]
		= (main_preheaderi_408_r0[i]==main_preheaderi_408_r1[i])? main_preheaderi_408_r0[i]
		: main_preheaderi_408_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_408_reg[i]
		= (main_preheaderi_408_reg_r0[i]==main_preheaderi_408_reg_r1[i])? main_preheaderi_408_reg_r0[i]
		: main_preheaderi_408_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_409[i]
		= (main_preheaderi_409_r0[i]==main_preheaderi_409_r1[i])? main_preheaderi_409_r0[i]
		: main_preheaderi_409_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_409_reg[i]
		= (main_preheaderi_409_reg_r0[i]==main_preheaderi_409_reg_r1[i])? main_preheaderi_409_reg_r0[i]
		: main_preheaderi_409_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_410[i]
		= (main_preheaderi_410_r0[i]==main_preheaderi_410_r1[i])? main_preheaderi_410_r0[i]
		: main_preheaderi_410_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_410_reg[i]
		= (main_preheaderi_410_reg_r0[i]==main_preheaderi_410_reg_r1[i])? main_preheaderi_410_reg_r0[i]
		: main_preheaderi_410_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_411[i]
		= (main_preheaderi_411_r0[i]==main_preheaderi_411_r1[i])? main_preheaderi_411_r0[i]
		: main_preheaderi_411_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_411_reg[i]
		= (main_preheaderi_411_reg_r0[i]==main_preheaderi_411_reg_r1[i])? main_preheaderi_411_reg_r0[i]
		: main_preheaderi_411_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_412[i]
		= (main_preheaderi_412_r0[i]==main_preheaderi_412_r1[i])? main_preheaderi_412_r0[i]
		: main_preheaderi_412_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_412_reg[i]
		= (main_preheaderi_412_reg_r0[i]==main_preheaderi_412_reg_r1[i])? main_preheaderi_412_reg_r0[i]
		: main_preheaderi_412_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_413[i]
		= (main_preheaderi_413_r0[i]==main_preheaderi_413_r1[i])? main_preheaderi_413_r0[i]
		: main_preheaderi_413_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_413_reg[i]
		= (main_preheaderi_413_reg_r0[i]==main_preheaderi_413_reg_r1[i])? main_preheaderi_413_reg_r0[i]
		: main_preheaderi_413_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_414[i]
		= (main_preheaderi_414_r0[i]==main_preheaderi_414_r1[i])? main_preheaderi_414_r0[i]
		: main_preheaderi_414_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_414_reg[i]
		= (main_preheaderi_414_reg_r0[i]==main_preheaderi_414_reg_r1[i])? main_preheaderi_414_reg_r0[i]
		: main_preheaderi_414_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_415[i]
		= (main_preheaderi_415_r0[i]==main_preheaderi_415_r1[i])? main_preheaderi_415_r0[i]
		: main_preheaderi_415_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_415_reg[i]
		= (main_preheaderi_415_reg_r0[i]==main_preheaderi_415_reg_r1[i])? main_preheaderi_415_reg_r0[i]
		: main_preheaderi_415_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_416[i]
		= (main_preheaderi_416_r0[i]==main_preheaderi_416_r1[i])? main_preheaderi_416_r0[i]
		: main_preheaderi_416_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_416_reg[i]
		= (main_preheaderi_416_reg_r0[i]==main_preheaderi_416_reg_r1[i])? main_preheaderi_416_reg_r0[i]
		: main_preheaderi_416_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_417[i]
		= (main_preheaderi_417_r0[i]==main_preheaderi_417_r1[i])? main_preheaderi_417_r0[i]
		: main_preheaderi_417_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_417_reg[i]
		= (main_preheaderi_417_reg_r0[i]==main_preheaderi_417_reg_r1[i])? main_preheaderi_417_reg_r0[i]
		: main_preheaderi_417_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_418[i]
		= (main_preheaderi_418_r0[i]==main_preheaderi_418_r1[i])? main_preheaderi_418_r0[i]
		: main_preheaderi_418_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_418_reg[i]
		= (main_preheaderi_418_reg_r0[i]==main_preheaderi_418_reg_r1[i])? main_preheaderi_418_reg_r0[i]
		: main_preheaderi_418_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_419[i]
		= (main_preheaderi_419_r0[i]==main_preheaderi_419_r1[i])? main_preheaderi_419_r0[i]
		: main_preheaderi_419_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_419_reg[i]
		= (main_preheaderi_419_reg_r0[i]==main_preheaderi_419_reg_r1[i])? main_preheaderi_419_reg_r0[i]
		: main_preheaderi_419_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_420[i]
		= (main_preheaderi_420_r0[i]==main_preheaderi_420_r1[i])? main_preheaderi_420_r0[i]
		: main_preheaderi_420_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_420_reg[i]
		= (main_preheaderi_420_reg_r0[i]==main_preheaderi_420_reg_r1[i])? main_preheaderi_420_reg_r0[i]
		: main_preheaderi_420_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_421[i]
		= (main_preheaderi_421_r0[i]==main_preheaderi_421_r1[i])? main_preheaderi_421_r0[i]
		: main_preheaderi_421_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_421_reg[i]
		= (main_preheaderi_421_reg_r0[i]==main_preheaderi_421_reg_r1[i])? main_preheaderi_421_reg_r0[i]
		: main_preheaderi_421_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_422[i]
		= (main_preheaderi_422_r0[i]==main_preheaderi_422_r1[i])? main_preheaderi_422_r0[i]
		: main_preheaderi_422_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_422_reg[i]
		= (main_preheaderi_422_reg_r0[i]==main_preheaderi_422_reg_r1[i])? main_preheaderi_422_reg_r0[i]
		: main_preheaderi_422_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_423[i]
		= (main_preheaderi_423_r0[i]==main_preheaderi_423_r1[i])? main_preheaderi_423_r0[i]
		: main_preheaderi_423_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_423_reg[i]
		= (main_preheaderi_423_reg_r0[i]==main_preheaderi_423_reg_r1[i])? main_preheaderi_423_reg_r0[i]
		: main_preheaderi_423_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_424[i]
		= (main_preheaderi_424_r0[i]==main_preheaderi_424_r1[i])? main_preheaderi_424_r0[i]
		: main_preheaderi_424_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_424_reg[i]
		= (main_preheaderi_424_reg_r0[i]==main_preheaderi_424_reg_r1[i])? main_preheaderi_424_reg_r0[i]
		: main_preheaderi_424_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_425[i]
		= (main_preheaderi_425_r0[i]==main_preheaderi_425_r1[i])? main_preheaderi_425_r0[i]
		: main_preheaderi_425_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_425_reg[i]
		= (main_preheaderi_425_reg_r0[i]==main_preheaderi_425_reg_r1[i])? main_preheaderi_425_reg_r0[i]
		: main_preheaderi_425_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_426[i]
		= (main_preheaderi_426_r0[i]==main_preheaderi_426_r1[i])? main_preheaderi_426_r0[i]
		: main_preheaderi_426_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_426_reg[i]
		= (main_preheaderi_426_reg_r0[i]==main_preheaderi_426_reg_r1[i])? main_preheaderi_426_reg_r0[i]
		: main_preheaderi_426_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_427[i]
		= (main_preheaderi_427_r0[i]==main_preheaderi_427_r1[i])? main_preheaderi_427_r0[i]
		: main_preheaderi_427_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_427_reg[i]
		= (main_preheaderi_427_reg_r0[i]==main_preheaderi_427_reg_r1[i])? main_preheaderi_427_reg_r0[i]
		: main_preheaderi_427_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_428[i]
		= (main_preheaderi_428_r0[i]==main_preheaderi_428_r1[i])? main_preheaderi_428_r0[i]
		: main_preheaderi_428_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_428_reg[i]
		= (main_preheaderi_428_reg_r0[i]==main_preheaderi_428_reg_r1[i])? main_preheaderi_428_reg_r0[i]
		: main_preheaderi_428_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_429[i]
		= (main_preheaderi_429_r0[i]==main_preheaderi_429_r1[i])? main_preheaderi_429_r0[i]
		: main_preheaderi_429_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_429_reg[i]
		= (main_preheaderi_429_reg_r0[i]==main_preheaderi_429_reg_r1[i])? main_preheaderi_429_reg_r0[i]
		: main_preheaderi_429_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_430[i]
		= (main_preheaderi_430_r0[i]==main_preheaderi_430_r1[i])? main_preheaderi_430_r0[i]
		: main_preheaderi_430_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_430_reg[i]
		= (main_preheaderi_430_reg_r0[i]==main_preheaderi_430_reg_r1[i])? main_preheaderi_430_reg_r0[i]
		: main_preheaderi_430_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_431[i]
		= (main_preheaderi_431_r0[i]==main_preheaderi_431_r1[i])? main_preheaderi_431_r0[i]
		: main_preheaderi_431_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_431_reg[i]
		= (main_preheaderi_431_reg_r0[i]==main_preheaderi_431_reg_r1[i])? main_preheaderi_431_reg_r0[i]
		: main_preheaderi_431_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_432[i]
		= (main_preheaderi_432_r0[i]==main_preheaderi_432_r1[i])? main_preheaderi_432_r0[i]
		: main_preheaderi_432_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_432_reg[i]
		= (main_preheaderi_432_reg_r0[i]==main_preheaderi_432_reg_r1[i])? main_preheaderi_432_reg_r0[i]
		: main_preheaderi_432_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_433[i]
		= (main_preheaderi_433_r0[i]==main_preheaderi_433_r1[i])? main_preheaderi_433_r0[i]
		: main_preheaderi_433_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_433_reg[i]
		= (main_preheaderi_433_reg_r0[i]==main_preheaderi_433_reg_r1[i])? main_preheaderi_433_reg_r0[i]
		: main_preheaderi_433_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_434[i]
		= (main_preheaderi_434_r0[i]==main_preheaderi_434_r1[i])? main_preheaderi_434_r0[i]
		: main_preheaderi_434_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_434_reg[i]
		= (main_preheaderi_434_reg_r0[i]==main_preheaderi_434_reg_r1[i])? main_preheaderi_434_reg_r0[i]
		: main_preheaderi_434_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_435[i]
		= (main_preheaderi_435_r0[i]==main_preheaderi_435_r1[i])? main_preheaderi_435_r0[i]
		: main_preheaderi_435_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_435_reg[i]
		= (main_preheaderi_435_reg_r0[i]==main_preheaderi_435_reg_r1[i])? main_preheaderi_435_reg_r0[i]
		: main_preheaderi_435_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_436[i]
		= (main_preheaderi_436_r0[i]==main_preheaderi_436_r1[i])? main_preheaderi_436_r0[i]
		: main_preheaderi_436_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_436_reg[i]
		= (main_preheaderi_436_reg_r0[i]==main_preheaderi_436_reg_r1[i])? main_preheaderi_436_reg_r0[i]
		: main_preheaderi_436_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_437[i]
		= (main_preheaderi_437_r0[i]==main_preheaderi_437_r1[i])? main_preheaderi_437_r0[i]
		: main_preheaderi_437_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_437_reg[i]
		= (main_preheaderi_437_reg_r0[i]==main_preheaderi_437_reg_r1[i])? main_preheaderi_437_reg_r0[i]
		: main_preheaderi_437_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_438[i]
		= (main_preheaderi_438_r0[i]==main_preheaderi_438_r1[i])? main_preheaderi_438_r0[i]
		: main_preheaderi_438_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_438_reg[i]
		= (main_preheaderi_438_reg_r0[i]==main_preheaderi_438_reg_r1[i])? main_preheaderi_438_reg_r0[i]
		: main_preheaderi_438_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_439[i]
		= (main_preheaderi_439_r0[i]==main_preheaderi_439_r1[i])? main_preheaderi_439_r0[i]
		: main_preheaderi_439_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_439_reg[i]
		= (main_preheaderi_439_reg_r0[i]==main_preheaderi_439_reg_r1[i])? main_preheaderi_439_reg_r0[i]
		: main_preheaderi_439_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_440[i]
		= (main_preheaderi_440_r0[i]==main_preheaderi_440_r1[i])? main_preheaderi_440_r0[i]
		: main_preheaderi_440_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_440_reg[i]
		= (main_preheaderi_440_reg_r0[i]==main_preheaderi_440_reg_r1[i])? main_preheaderi_440_reg_r0[i]
		: main_preheaderi_440_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_441[i]
		= (main_preheaderi_441_r0[i]==main_preheaderi_441_r1[i])? main_preheaderi_441_r0[i]
		: main_preheaderi_441_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_441_reg[i]
		= (main_preheaderi_441_reg_r0[i]==main_preheaderi_441_reg_r1[i])? main_preheaderi_441_reg_r0[i]
		: main_preheaderi_441_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_442[i]
		= (main_preheaderi_442_r0[i]==main_preheaderi_442_r1[i])? main_preheaderi_442_r0[i]
		: main_preheaderi_442_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_442_reg[i]
		= (main_preheaderi_442_reg_r0[i]==main_preheaderi_442_reg_r1[i])? main_preheaderi_442_reg_r0[i]
		: main_preheaderi_442_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_443[i]
		= (main_preheaderi_443_r0[i]==main_preheaderi_443_r1[i])? main_preheaderi_443_r0[i]
		: main_preheaderi_443_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_443_reg[i]
		= (main_preheaderi_443_reg_r0[i]==main_preheaderi_443_reg_r1[i])? main_preheaderi_443_reg_r0[i]
		: main_preheaderi_443_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_444[i]
		= (main_preheaderi_444_r0[i]==main_preheaderi_444_r1[i])? main_preheaderi_444_r0[i]
		: main_preheaderi_444_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_444_reg[i]
		= (main_preheaderi_444_reg_r0[i]==main_preheaderi_444_reg_r1[i])? main_preheaderi_444_reg_r0[i]
		: main_preheaderi_444_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_445[i]
		= (main_preheaderi_445_r0[i]==main_preheaderi_445_r1[i])? main_preheaderi_445_r0[i]
		: main_preheaderi_445_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_445_reg[i]
		= (main_preheaderi_445_reg_r0[i]==main_preheaderi_445_reg_r1[i])? main_preheaderi_445_reg_r0[i]
		: main_preheaderi_445_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_446[i]
		= (main_preheaderi_446_r0[i]==main_preheaderi_446_r1[i])? main_preheaderi_446_r0[i]
		: main_preheaderi_446_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_446_reg[i]
		= (main_preheaderi_446_reg_r0[i]==main_preheaderi_446_reg_r1[i])? main_preheaderi_446_reg_r0[i]
		: main_preheaderi_446_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_447[i]
		= (main_preheaderi_447_r0[i]==main_preheaderi_447_r1[i])? main_preheaderi_447_r0[i]
		: main_preheaderi_447_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_447_reg[i]
		= (main_preheaderi_447_reg_r0[i]==main_preheaderi_447_reg_r1[i])? main_preheaderi_447_reg_r0[i]
		: main_preheaderi_447_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_448[i]
		= (main_preheaderi_448_r0[i]==main_preheaderi_448_r1[i])? main_preheaderi_448_r0[i]
		: main_preheaderi_448_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_448_reg[i]
		= (main_preheaderi_448_reg_r0[i]==main_preheaderi_448_reg_r1[i])? main_preheaderi_448_reg_r0[i]
		: main_preheaderi_448_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_449[i]
		= (main_preheaderi_449_r0[i]==main_preheaderi_449_r1[i])? main_preheaderi_449_r0[i]
		: main_preheaderi_449_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_449_reg[i]
		= (main_preheaderi_449_reg_r0[i]==main_preheaderi_449_reg_r1[i])? main_preheaderi_449_reg_r0[i]
		: main_preheaderi_449_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_450[i]
		= (main_preheaderi_450_r0[i]==main_preheaderi_450_r1[i])? main_preheaderi_450_r0[i]
		: main_preheaderi_450_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_451[i]
		= (main_preheaderi_451_r0[i]==main_preheaderi_451_r1[i])? main_preheaderi_451_r0[i]
		: main_preheaderi_451_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_451_reg[i]
		= (main_preheaderi_451_reg_r0[i]==main_preheaderi_451_reg_r1[i])? main_preheaderi_451_reg_r0[i]
		: main_preheaderi_451_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_452[i]
		= (main_preheaderi_452_r0[i]==main_preheaderi_452_r1[i])? main_preheaderi_452_r0[i]
		: main_preheaderi_452_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_453[i]
		= (main_preheaderi_453_r0[i]==main_preheaderi_453_r1[i])? main_preheaderi_453_r0[i]
		: main_preheaderi_453_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_454[i]
		= (main_preheaderi_454_r0[i]==main_preheaderi_454_r1[i])? main_preheaderi_454_r0[i]
		: main_preheaderi_454_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheaderi_indvarnext[i]
		= (main_preheaderi_indvarnext_r0[i]==main_preheaderi_indvarnext_r1[i])? main_preheaderi_indvarnext_r0[i]
		: main_preheaderi_indvarnext_r2[i];
	end
end
always @(*) begin
	main_preheaderi_exitcond5
		= (main_preheaderi_exitcond5_r0==main_preheaderi_exitcond5_r1)? main_preheaderi_exitcond5_r0
		: main_preheaderi_exitcond5_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_adpcm_mainexit_main_result04[i]
		= (main_adpcm_mainexit_main_result04_r0[i]==main_adpcm_mainexit_main_result04_r1[i])? main_adpcm_mainexit_main_result04_r0[i]
		: main_adpcm_mainexit_main_result04_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_adpcm_mainexit_main_result04_reg[i]
		= (main_adpcm_mainexit_main_result04_reg_r0[i]==main_adpcm_mainexit_main_result04_reg_r1[i])? main_adpcm_mainexit_main_result04_reg_r0[i]
		: main_adpcm_mainexit_main_result04_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_adpcm_mainexit_i03[i]
		= (main_adpcm_mainexit_i03_r0[i]==main_adpcm_mainexit_i03_r1[i])? main_adpcm_mainexit_i03_r0[i]
		: main_adpcm_mainexit_i03_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_adpcm_mainexit_i03_reg[i]
		= (main_adpcm_mainexit_i03_reg_r0[i]==main_adpcm_mainexit_i03_reg_r1[i])? main_adpcm_mainexit_i03_reg_r0[i]
		: main_adpcm_mainexit_i03_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_adpcm_mainexit_scevgep3[i]
		= (main_adpcm_mainexit_scevgep3_r0[i]==main_adpcm_mainexit_scevgep3_r1[i])? main_adpcm_mainexit_scevgep3_r0[i]
		: main_adpcm_mainexit_scevgep3_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_adpcm_mainexit_scevgep4[i]
		= (main_adpcm_mainexit_scevgep4_r0[i]==main_adpcm_mainexit_scevgep4_r1[i])? main_adpcm_mainexit_scevgep4_r0[i]
		: main_adpcm_mainexit_scevgep4_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_adpcm_mainexit_455[i]
		= (main_adpcm_mainexit_455_r0[i]==main_adpcm_mainexit_455_r1[i])? main_adpcm_mainexit_455_r0[i]
		: main_adpcm_mainexit_455_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_adpcm_mainexit_456[i]
		= (main_adpcm_mainexit_456_r0[i]==main_adpcm_mainexit_456_r1[i])? main_adpcm_mainexit_456_r0[i]
		: main_adpcm_mainexit_456_r2[i];
	end
end
always @(*) begin
	main_adpcm_mainexit_457
		= (main_adpcm_mainexit_457_r0==main_adpcm_mainexit_457_r1)? main_adpcm_mainexit_457_r0
		: main_adpcm_mainexit_457_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_adpcm_mainexit_458[i]
		= (main_adpcm_mainexit_458_r0[i]==main_adpcm_mainexit_458_r1[i])? main_adpcm_mainexit_458_r0[i]
		: main_adpcm_mainexit_458_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_adpcm_mainexit_main_result0[i]
		= (main_adpcm_mainexit_main_result0_r0[i]==main_adpcm_mainexit_main_result0_r1[i])? main_adpcm_mainexit_main_result0_r0[i]
		: main_adpcm_mainexit_main_result0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_adpcm_mainexit_main_result0_reg[i]
		= (main_adpcm_mainexit_main_result0_reg_r0[i]==main_adpcm_mainexit_main_result0_reg_r1[i])? main_adpcm_mainexit_main_result0_reg_r0[i]
		: main_adpcm_mainexit_main_result0_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_adpcm_mainexit_459[i]
		= (main_adpcm_mainexit_459_r0[i]==main_adpcm_mainexit_459_r1[i])? main_adpcm_mainexit_459_r0[i]
		: main_adpcm_mainexit_459_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_adpcm_mainexit_459_reg[i]
		= (main_adpcm_mainexit_459_reg_r0[i]==main_adpcm_mainexit_459_reg_r1[i])? main_adpcm_mainexit_459_reg_r0[i]
		: main_adpcm_mainexit_459_reg_r2[i];
	end
end
always @(*) begin
	main_adpcm_mainexit_exitcond
		= (main_adpcm_mainexit_exitcond_r0==main_adpcm_mainexit_exitcond_r1)? main_adpcm_mainexit_exitcond_r0
		: main_adpcm_mainexit_exitcond_r2;
end
always @(*) begin
	main_adpcm_mainexit_exitcond_reg
		= (main_adpcm_mainexit_exitcond_reg_r0==main_adpcm_mainexit_exitcond_reg_r1)? main_adpcm_mainexit_exitcond_reg_r0
		: main_adpcm_mainexit_exitcond_reg_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheader_main_result22[i]
		= (main_preheader_main_result22_r0[i]==main_preheader_main_result22_r1[i])? main_preheader_main_result22_r0[i]
		: main_preheader_main_result22_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheader_main_result22_reg[i]
		= (main_preheader_main_result22_reg_r0[i]==main_preheader_main_result22_reg_r1[i])? main_preheader_main_result22_reg_r0[i]
		: main_preheader_main_result22_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheader_i11[i]
		= (main_preheader_i11_r0[i]==main_preheader_i11_r1[i])? main_preheader_i11_r0[i]
		: main_preheader_i11_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheader_i11_reg[i]
		= (main_preheader_i11_reg_r0[i]==main_preheader_i11_reg_r1[i])? main_preheader_i11_reg_r0[i]
		: main_preheader_i11_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_preheader_scevgep[i]
		= (main_preheader_scevgep_r0[i]==main_preheader_scevgep_r1[i])? main_preheader_scevgep_r0[i]
		: main_preheader_scevgep_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	main_preheader_scevgep2[i]
		= (main_preheader_scevgep2_r0[i]==main_preheader_scevgep2_r1[i])? main_preheader_scevgep2_r0[i]
		: main_preheader_scevgep2_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheader_460[i]
		= (main_preheader_460_r0[i]==main_preheader_460_r1[i])? main_preheader_460_r0[i]
		: main_preheader_460_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheader_461[i]
		= (main_preheader_461_r0[i]==main_preheader_461_r1[i])? main_preheader_461_r0[i]
		: main_preheader_461_r2[i];
	end
end
always @(*) begin
	main_preheader_462
		= (main_preheader_462_r0==main_preheader_462_r1)? main_preheader_462_r0
		: main_preheader_462_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheader_463[i]
		= (main_preheader_463_r0[i]==main_preheader_463_r1[i])? main_preheader_463_r0[i]
		: main_preheader_463_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheader_main_result2[i]
		= (main_preheader_main_result2_r0[i]==main_preheader_main_result2_r1[i])? main_preheader_main_result2_r0[i]
		: main_preheader_main_result2_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheader_main_result2_reg[i]
		= (main_preheader_main_result2_reg_r0[i]==main_preheader_main_result2_reg_r1[i])? main_preheader_main_result2_reg_r0[i]
		: main_preheader_main_result2_reg_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheader_464[i]
		= (main_preheader_464_r0[i]==main_preheader_464_r1[i])? main_preheader_464_r0[i]
		: main_preheader_464_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_preheader_464_reg[i]
		= (main_preheader_464_reg_r0[i]==main_preheader_464_reg_r1[i])? main_preheader_464_reg_r0[i]
		: main_preheader_464_reg_r2[i];
	end
end
always @(*) begin
	main_preheader_exitcond1
		= (main_preheader_exitcond1_r0==main_preheader_exitcond1_r1)? main_preheader_exitcond1_r0
		: main_preheader_exitcond1_r2;
end
always @(*) begin
	main_preheader_exitcond1_reg
		= (main_preheader_exitcond1_reg_r0==main_preheader_exitcond1_reg_r1)? main_preheader_exitcond1_reg_r0
		: main_preheader_exitcond1_reg_r2;
end
always @(*) begin
	main_465_467
		= (main_465_467_r0==main_465_467_r1)? main_465_467_r0
		: main_465_467_r2;
end
always @(*) begin
	upzero_start
		= (upzero_start_r0==upzero_start_r1)? upzero_start_r0
		: upzero_start_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	upzero_arg_dlt[i]
		= (upzero_arg_dlt_r0[i]==upzero_arg_dlt_r1[i])? upzero_arg_dlt_r0[i]
		: upzero_arg_dlt_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_arg_dlti[i]
		= (upzero_arg_dlti_r0[i]==upzero_arg_dlti_r1[i])? upzero_arg_dlti_r0[i]
		: upzero_arg_dlti_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=`MEMORY_CONTROLLER_ADDR_SIZE-1; i=i+1) begin
	upzero_arg_bli[i]
		= (upzero_arg_bli_r0[i]==upzero_arg_bli_r1[i])? upzero_arg_bli_r0[i]
		: upzero_arg_bli_r2[i];
	end
end
always @(*) begin
	upzero_finish_final
		= (upzero_finish_final_r0==upzero_finish_final_r1)? upzero_finish_final_r0
		: upzero_finish_final_r2;
end
always @(*) begin
	upzero_finish_reg
		= (upzero_finish_reg_r0==upzero_finish_reg_r1)? upzero_finish_reg_r0
		: upzero_finish_reg_r2;
end
always @(*) begin
	legup_function_call
		= (legup_function_call_r0==legup_function_call_r1)? legup_function_call_r0
		: legup_function_call_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_signed_add_32_0_op0[i]
		= (main_signed_add_32_0_op0_r0[i]==main_signed_add_32_0_op0_r1[i])? main_signed_add_32_0_op0_r0[i]
		: main_signed_add_32_0_op0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_signed_add_32_0_op1[i]
		= (main_signed_add_32_0_op1_r0[i]==main_signed_add_32_0_op1_r1[i])? main_signed_add_32_0_op1_r0[i]
		: main_signed_add_32_0_op1_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_signed_add_32_0[i]
		= (main_signed_add_32_0_r0[i]==main_signed_add_32_0_r1[i])? main_signed_add_32_0_r0[i]
		: main_signed_add_32_0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_signed_add_32_1_op0[i]
		= (main_signed_add_32_1_op0_r0[i]==main_signed_add_32_1_op0_r1[i])? main_signed_add_32_1_op0_r0[i]
		: main_signed_add_32_1_op0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_signed_add_32_1_op1[i]
		= (main_signed_add_32_1_op1_r0[i]==main_signed_add_32_1_op1_r1[i])? main_signed_add_32_1_op1_r0[i]
		: main_signed_add_32_1_op1_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_signed_add_32_1[i]
		= (main_signed_add_32_1_r0[i]==main_signed_add_32_1_r1[i])? main_signed_add_32_1_r0[i]
		: main_signed_add_32_1_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=63; i=i+1) begin
	main_signed_add_64_0_op0[i]
		= (main_signed_add_64_0_op0_r0[i]==main_signed_add_64_0_op0_r1[i])? main_signed_add_64_0_op0_r0[i]
		: main_signed_add_64_0_op0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=63; i=i+1) begin
	main_signed_add_64_0_op1[i]
		= (main_signed_add_64_0_op1_r0[i]==main_signed_add_64_0_op1_r1[i])? main_signed_add_64_0_op1_r0[i]
		: main_signed_add_64_0_op1_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=63; i=i+1) begin
	main_signed_add_64_0[i]
		= (main_signed_add_64_0_r0[i]==main_signed_add_64_0_r1[i])? main_signed_add_64_0_r0[i]
		: main_signed_add_64_0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=63; i=i+1) begin
	main_signed_add_64_1_op0[i]
		= (main_signed_add_64_1_op0_r0[i]==main_signed_add_64_1_op0_r1[i])? main_signed_add_64_1_op0_r0[i]
		: main_signed_add_64_1_op0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=63; i=i+1) begin
	main_signed_add_64_1_op1[i]
		= (main_signed_add_64_1_op1_r0[i]==main_signed_add_64_1_op1_r1[i])? main_signed_add_64_1_op1_r0[i]
		: main_signed_add_64_1_op1_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=63; i=i+1) begin
	main_signed_add_64_1[i]
		= (main_signed_add_64_1_r0[i]==main_signed_add_64_1_r1[i])? main_signed_add_64_1_r0[i]
		: main_signed_add_64_1_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_signed_divide_32_0_op0[i]
		= (main_signed_divide_32_0_op0_r0[i]==main_signed_divide_32_0_op0_r1[i])? main_signed_divide_32_0_op0_r0[i]
		: main_signed_divide_32_0_op0_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_signed_divide_32_0_op1[i]
		= (main_signed_divide_32_0_op1_r0[i]==main_signed_divide_32_0_op1_r1[i])? main_signed_divide_32_0_op1_r0[i]
		: main_signed_divide_32_0_op1_r2[i];
	end
end
always @(*) begin
	lpm_divide_main_preheaderi_252_en
		= (lpm_divide_main_preheaderi_252_en_r0==lpm_divide_main_preheaderi_252_en_r1)? lpm_divide_main_preheaderi_252_en_r0
		: lpm_divide_main_preheaderi_252_en_r2;
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	lpm_divide_main_preheaderi_252_out[i]
		= (lpm_divide_main_preheaderi_252_out_r0[i]==lpm_divide_main_preheaderi_252_out_r1[i])? lpm_divide_main_preheaderi_252_out_r0[i]
		: lpm_divide_main_preheaderi_252_out_r2[i];
	end
end
always @(*) begin
	for(i=0; i<=31; i=i+1) begin
	main_signed_divide_32_0[i]
		= (main_signed_divide_32_0_r0[i]==main_signed_divide_32_0_r1[i])? main_signed_divide_32_0_r0[i]
		: main_signed_divide_32_0_r2[i];
	end
end


//port drive
always @(posedge clk) begin
	if (reset)
		finish <= 0;
	else if((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %472*/
	/*   ret i32 %.main_result.2*/
	else if((cur_state == LEGUP_F_main_BB__472_190)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %85 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %89 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %97 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %101 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %8, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %10, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %12, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %18, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %22, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %24, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_46)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %28, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_47)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %32, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_48)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %125 = load i32* %124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %160 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %163 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %167 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %171 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %175 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %179 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %208 = load i32* %207, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre52 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre54 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre58 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.preheader*/
	/*   %250 = load i32* %249, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_104)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %256 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %259 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %267 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %287 = load i32* %286, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %333 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %336 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %340 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %344 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %348 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %362 = load i32* %361, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %376 = load i32* %375, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_161)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   store i32 %454, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_177)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %adpcm_main.exit*/
	/*   %455 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %460 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_184)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_delay_dltx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_a = `TAG_g_dec_del_dltx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a + (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a + (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a + (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a + (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a + (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a + (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a + (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a + (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a + (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a + (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_a = `TAG_g_delay_bpl_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_a = `TAG_g_dec_del_bpl_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a + (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a + (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a + (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a + (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a + (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a + (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a + (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a + (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a + (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a + (4 * 32'd5));
	end
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		memory_controller_address_a = main_2_si0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_address_a = `TAG_g_delay_bpl_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %85 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a + (4 * 32'd1));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %89 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a + (4 * 32'd2));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a + (4 * 32'd3));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %97 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a + (4 * 32'd4));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %101 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a + (4 * 32'd5));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		memory_controller_address_a = main_legup_memset_4_i64exit_scevgep12_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %8, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd23));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %10, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd21));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %12, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd19));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd17));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd15));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %18, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd13));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd11));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %22, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd9));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %24, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd7));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_46)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd5));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %28, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_47)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd3));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %32, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_48)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd1));
	end
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		memory_controller_address_a = main_quantlexiti_ril0inii;
	end
	/* main: %quantl.exit.i*/
	/*   %125 = load i32* %124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		memory_controller_address_a = main_quantlexiti_124;
	end
	/* main: %quantl.exit.i*/
	/*   %160 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_address_a = `TAG_g_delay_bph_a;
	end
	/* main: %quantl.exit.i*/
	/*   %163 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a + (4 * 32'd1));
	end
	/* main: %quantl.exit.i*/
	/*   %167 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a + (4 * 32'd2));
	end
	/* main: %quantl.exit.i*/
	/*   %171 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a + (4 * 32'd3));
	end
	/* main: %quantl.exit.i*/
	/*   %175 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a + (4 * 32'd4));
	end
	/* main: %quantl.exit.i*/
	/*   %179 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a + (4 * 32'd5));
	end
	/* main: %quantl.exit.i*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		memory_controller_address_a = main_quantlexiti_196;
	end
	/* main: %quantl.exit.i*/
	/*   %208 = load i32* %207, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		memory_controller_address_a = main_quantlexiti_207;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		memory_controller_address_a = `TAG_g_tqmf_a;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd2));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd4));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd6));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd8));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd10));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd12));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd14));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre52 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd16));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre54 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd18));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd20));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre58 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd22));
	end
	/* main: %.preheader.i.preheader*/
	/*   %250 = load i32* %249, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_104)) begin
		memory_controller_address_a = main_preheaderipreheader_249;
	end
	/* main: %.preheader.i*/
	/*   %256 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_address_a = `TAG_g_dec_del_bpl_a;
	end
	/* main: %.preheader.i*/
	/*   %259 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a + (4 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a + (4 * 32'd2));
	end
	/* main: %.preheader.i*/
	/*   %267 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a + (4 * 32'd3));
	end
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a + (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a + (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		memory_controller_address_a = main_preheaderi_253;
	end
	/* main: %.preheader.i*/
	/*   %287 = load i32* %286, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		memory_controller_address_a = main_preheaderi_286;
	end
	/* main: %.preheader.i*/
	/*   %333 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_address_a = `TAG_g_dec_del_bph_a;
	end
	/* main: %.preheader.i*/
	/*   %336 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a + (4 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %340 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a + (4 * 32'd2));
	end
	/* main: %.preheader.i*/
	/*   %344 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a + (4 * 32'd3));
	end
	/* main: %.preheader.i*/
	/*   %348 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a + (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a + (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %362 = load i32* %361, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		memory_controller_address_a = main_preheaderi_361_reg;
	end
	/* main: %.preheader.i*/
	/*   %376 = load i32* %375, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_161)) begin
		memory_controller_address_a = main_preheaderi_375;
	end
	/* main: %.preheader.i*/
	/*   store i32 %454, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_177)) begin
		memory_controller_address_a = main_preheaderi_scevgep6_reg;
	end
	/* main: %adpcm_main.exit*/
	/*   %455 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		memory_controller_address_a = main_adpcm_mainexit_scevgep4;
	end
	/* main: %.preheader*/
	/*   %460 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_184)) begin
		memory_controller_address_a = main_preheader_scevgep2;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %85 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %89 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %97 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %101 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %8, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %10, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %12, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %18, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %22, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %24, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_46)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %28, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_47)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %32, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_48)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %125 = load i32* %124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %160 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %163 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %167 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %171 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %175 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %179 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %208 = load i32* %207, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre52 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre54 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre58 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i.preheader*/
	/*   %250 = load i32* %249, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_104)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %256 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %259 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %267 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %287 = load i32* %286, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %333 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %336 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %340 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %344 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %348 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %362 = load i32* %361, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %376 = load i32* %375, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_161)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   store i32 %454, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_177)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %adpcm_main.exit*/
	/*   %455 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %460 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_184)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %8, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_in_a = main_legup_memset_4_i64exit_8_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %10, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_in_a = main_legup_memset_4_i64exit_10_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %12, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_in_a = main_legup_memset_4_i64exit_12_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_in_a = main_legup_memset_4_i64exit_14_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		memory_controller_in_a = main_legup_memset_4_i64exit_16_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %18, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		memory_controller_in_a = main_legup_memset_4_i64exit_18_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		memory_controller_in_a = main_legup_memset_4_i64exit_20_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %22, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		memory_controller_in_a = main_legup_memset_4_i64exit_22_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %24, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		memory_controller_in_a = main_legup_memset_4_i64exit_24_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_46)) begin
		memory_controller_in_a = main_legup_memset_4_i64exit_26_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %28, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_47)) begin
		memory_controller_in_a = main_legup_memset_4_i64exit_28_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %32, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_48)) begin
		memory_controller_in_a = main_legup_memset_4_i64exit_32_reg;
	end
	/* main: %.preheader.i*/
	/*   store i32 %454, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_177)) begin
		memory_controller_in_a = main_preheaderi_454;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %85 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %89 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %97 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %101 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %8, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %10, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %12, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %18, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %22, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %24, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_46)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %28, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_47)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %32, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_48)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %125 = load i32* %124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %160 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %163 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %167 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %171 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %175 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %179 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %208 = load i32* %207, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre52 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre54 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre58 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.preheader*/
	/*   %250 = load i32* %249, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_104)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %256 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %259 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %267 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %287 = load i32* %286, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %333 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %336 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %340 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %344 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %348 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %362 = load i32* %361, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %376 = load i32* %375, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_161)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   store i32 %454, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_177)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %adpcm_main.exit*/
	/*   %455 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader*/
	/*   %460 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_184)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %9, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %11, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %13, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %15, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %19, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %21, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %25, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %27, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_46)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_47)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %33, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_48)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %116*/
	/*   %119 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__116_51)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %129 = load i32* %128, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %201 = load i32* %200, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   store i32 %233, i32* %235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre51 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre55 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre57 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %257 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %260 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %264 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %296 = load i32* %295, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %304 = load i32* %303, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %337 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %341 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %345 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %349 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   store i32 %453, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_176)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %adpcm_main.exit*/
	/*   %456 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader*/
	/*   %461 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_184)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_b = `TAG_g_delay_dhx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_b = `TAG_g_dec_del_dhx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a + (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a + (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a + (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a + (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a + (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a + (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a + (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a + (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a + (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a + (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_b = `TAG_g_delay_bph_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_b = `TAG_g_dec_del_bph_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a + (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a + (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a + (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a + (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a + (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a + (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a + (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a + (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a + (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a + (4 * 32'd5));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_address_b = `TAG_g_delay_dltx_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a + (4 * 32'd1));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a + (4 * 32'd2));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a + (4 * 32'd3));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a + (4 * 32'd4));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a + (4 * 32'd5));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		memory_controller_address_b = main_legup_memset_4_i64exit_scevgep11_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %9, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd22));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %11, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd20));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %13, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd18));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %15, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd16));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd14));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %19, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd12));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %21, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd10));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd8));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %25, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd6));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %27, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_46)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd4));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_47)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd2));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %33, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_48)) begin
		memory_controller_address_b = `TAG_g_tqmf_a;
	end
	/* main: %116*/
	/*   %119 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__116_51)) begin
		memory_controller_address_b = main_116_scevgep8;
	end
	/* main: %quantl.exit.i*/
	/*   %129 = load i32* %128, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		memory_controller_address_b = main_quantlexiti_128;
	end
	/* main: %quantl.exit.i*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_address_b = main_quantlexiti_135;
	end
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_address_b = `TAG_g_delay_dhx_a;
	end
	/* main: %quantl.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a + (4 * 32'd1));
	end
	/* main: %quantl.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a + (4 * 32'd2));
	end
	/* main: %quantl.exit.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a + (4 * 32'd3));
	end
	/* main: %quantl.exit.i*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a + (4 * 32'd4));
	end
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a + (4 * 32'd5));
	end
	/* main: %quantl.exit.i*/
	/*   %201 = load i32* %200, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		memory_controller_address_b = main_quantlexiti_200;
	end
	/* main: %quantl.exit.i*/
	/*   store i32 %233, i32* %235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		memory_controller_address_b = main_quantlexiti_235;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd1));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd3));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd5));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd7));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd9));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd11));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd13));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre51 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd15));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd17));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre55 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd19));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre57 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd21));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd23));
	end
	/* main: %.preheader.i*/
	/*   %257 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_address_b = `TAG_g_dec_del_dltx_a;
	end
	/* main: %.preheader.i*/
	/*   %260 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a + (4 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %264 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a + (4 * 32'd2));
	end
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a + (4 * 32'd3));
	end
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a + (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a + (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %296 = load i32* %295, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		memory_controller_address_b = main_preheaderi_295;
	end
	/* main: %.preheader.i*/
	/*   %304 = load i32* %303, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_address_b = main_preheaderi_303;
	end
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_address_b = `TAG_g_dec_del_dhx_a;
	end
	/* main: %.preheader.i*/
	/*   %337 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a + (4 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %341 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a + (4 * 32'd2));
	end
	/* main: %.preheader.i*/
	/*   %345 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a + (4 * 32'd3));
	end
	/* main: %.preheader.i*/
	/*   %349 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a + (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a + (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		memory_controller_address_b = main_preheaderi_367_reg;
	end
	/* main: %.preheader.i*/
	/*   store i32 %453, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_176)) begin
		memory_controller_address_b = main_preheaderi_scevgep7_reg;
	end
	/* main: %adpcm_main.exit*/
	/*   %456 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		memory_controller_address_b = main_adpcm_mainexit_scevgep3;
	end
	/* main: %.preheader*/
	/*   %461 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_184)) begin
		memory_controller_address_b = main_preheader_scevgep;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %9, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %11, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %13, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %15, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %19, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %21, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %25, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %27, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_46)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_47)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %33, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_48)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %116*/
	/*   %119 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__116_51)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %129 = load i32* %128, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %201 = load i32* %200, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   store i32 %233, i32* %235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre51 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre55 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre57 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %257 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %260 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %264 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %296 = load i32* %295, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %304 = load i32* %303, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %337 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %341 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %345 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %349 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   store i32 %453, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_176)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %adpcm_main.exit*/
	/*   %456 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %461 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_184)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %9, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_in_b = main_legup_memset_4_i64exit_9_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %11, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_in_b = main_legup_memset_4_i64exit_11_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %13, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_in_b = main_legup_memset_4_i64exit_13_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %15, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_in_b = main_legup_memset_4_i64exit_15_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		memory_controller_in_b = main_legup_memset_4_i64exit_17_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %19, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		memory_controller_in_b = main_legup_memset_4_i64exit_19_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %21, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		memory_controller_in_b = main_legup_memset_4_i64exit_21_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		memory_controller_in_b = main_legup_memset_4_i64exit_23_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %25, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		memory_controller_in_b = main_legup_memset_4_i64exit_25_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %27, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_46)) begin
		memory_controller_in_b = main_legup_memset_4_i64exit_27_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_47)) begin
		memory_controller_in_b = main_legup_memset_4_i64exit_29_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %33, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_48)) begin
		memory_controller_in_b = main_legup_memset_4_i64exit_33_reg;
	end
	/* main: %quantl.exit.i*/
	/*   store i32 %233, i32* %235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		memory_controller_in_b = main_quantlexiti_233_reg;
	end
	/* main: %.preheader.i*/
	/*   store i32 %453, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_176)) begin
		memory_controller_in_b = main_preheaderi_453;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %199, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_148)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %9, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %11, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %13, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %15, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %19, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_42)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %21, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_43)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_44)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %25, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_45)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %27, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_46)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_47)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %33, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_48)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %116*/
	/*   %119 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__116_51)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %129 = load i32* %128, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_57)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %201 = load i32* %200, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   store i32 %233, i32* %235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre51 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre55 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre57 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %257 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %260 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %264 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %296 = load i32* %295, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %304 = load i32* %303, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %337 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %341 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %345 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %349 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   store i32 %453, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_176)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %adpcm_main.exit*/
	/*   %456 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader*/
	/*   %461 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_184)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if (reset)
		return_val <= 0;
	else if((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %472*/
	/*   ret i32 %.main_result.2*/
	else if((cur_state == LEGUP_F_main_BB__472_190)) begin
		return_val <= main_preheader_main_result2_reg;
		if (start == 1'b0 && ^(main_preheader_main_result2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../../boards/CycloneII/DE2/top.v


module de2(
	input         iCLK_50,
	input  [17:0] iSW,
	input  [ 3:0] iKEY,
	output [17:0] oLEDR,
	output [ 8:0] oLEDG,
	output [ 7:0] oHEX0_D,
	output [ 7:0] oHEX1_D,
	output [ 7:0] oHEX2_D,
	output [ 7:0] oHEX3_D,
	output [ 7:0] oHEX4_D,
	output [ 7:0] oHEX5_D,
	output [ 7:0] oHEX6_D,
	output [ 7:0] oHEX7_D
	//output [19:0] oSRAM_A,
	//output        oSRAM_ADSC_N,
	//output        oSRAM_ADSP_N,
	//output        oSRAM_ADV_N,
	//output [ 3:0] oSRAM_BE_N,
	//output        oSRAM_CE1_N,
	//output        oSRAM_CE2,
	//output        oSRAM_CE3_N,
	//output        oSRAM_CLK,
	//inout  [ 3:0] SRAM_DPA,
	//inout  [31:0] SRAM_DQ,
	//output        oSRAM_GW_N,
	//output        oSRAM_OE_N,
	//output        oSRAM_WE_N
);

wire clk;
wire nReset = iKEY[0];

assign clk = iCLK_50;
//clockGen clockGen(
//	.inclk0(iCLK_50),
//	.c0(clk)
//);

reg [3:0] rKEY, rKEY_d1;
always @(posedge clk or negedge nReset) begin
	if(!nReset) begin
		rKEY <= 0;
		rKEY_d1 <= 0;
	end
	else begin
		rKEY <= ~iKEY;
		rKEY_d1 <= rKEY;
	end
end

wire start = rKEY[1] & ~rKEY_d1[1];
wire finish;
wire [31:0] return_val;
wire reset = ~nReset;

reg        rFinish;
reg [31:0] rRet;
always @(posedge clk or negedge nReset) begin
	if(!nReset) begin
		rRet <= 0;
		rFinish <= 0;
	end
	else if(finish) begin
		rRet <= return_val;
		rFinish <= 1;
	end
end

assign oLEDG[8] = rFinish;

assign oHEX7_D = HEX2SEG(rRet[4*7+3:4*7]);
assign oHEX6_D = HEX2SEG(rRet[4*6+3:4*6]);
assign oHEX5_D = HEX2SEG(rRet[4*5+3:4*5]);
assign oHEX4_D = HEX2SEG(rRet[4*4+3:4*4]);
assign oHEX3_D = HEX2SEG(rRet[4*3+3:4*3]);
assign oHEX2_D = HEX2SEG(rRet[4*2+3:4*2]);
assign oHEX1_D = HEX2SEG(rRet[4*1+3:4*1]);
assign oHEX0_D = HEX2SEG(rRet[4*0+3:4*0]);

top top_inst(
	.clk(clk),
	.reset(reset),
	.finish(finish),
	.return_val(return_val),
	.start(start)
);

function [7:0] HEX2SEG;
	input [3:0] num;
begin
	if     (num==4'h0) HEX2SEG = 8'b11000000;
	else if(num==4'h1) HEX2SEG = 8'b11111001;
	else if(num==4'h2) HEX2SEG = 8'b10100100;
	else if(num==4'h3) HEX2SEG = 8'b10110000;
	else if(num==4'h4) HEX2SEG = 8'b10011001;
	else if(num==4'h5) HEX2SEG = 8'b10010010;
	else if(num==4'h6) HEX2SEG = 8'b10000010;
	else if(num==4'h7) HEX2SEG = 8'b11111000;
	else if(num==4'h8) HEX2SEG = 8'b10000000;
	else if(num==4'h9) HEX2SEG = 8'b10010000;
	else if(num==4'hA) HEX2SEG = 8'b10001000;
	else if(num==4'hb) HEX2SEG = 8'b10000011;
	else if(num==4'hC) HEX2SEG = 8'b11000110;
	else if(num==4'hd) HEX2SEG = 8'b10100001;
	else if(num==4'hE) HEX2SEG = 8'b10000110;
	else if(num==4'hF) HEX2SEG = 8'b10001110;
	else               HEX2SEG = 8'b11111111;
end
endfunction

endmodule


module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

integer i;
reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);





//voter


//port drive

initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
