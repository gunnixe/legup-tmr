//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Wed Nov 16 11:06:04 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Nov 19 13:01:30 2016
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: upzero
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 2                             
signed_add_32                 1                             
--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 2                             
signed_add_32                 2                             
signed_add_64                 2                             
signed_divide_32              1                             

Running Bipartite Weighted Matching on function: upzero
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %2 = load i32* %dlti, align ... (idx: 0)        0                             0                             
  %7 = load i32* %bli, align 4... (idx: 1)        0                             0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %2 = load i32* %dlti, align ... (idx: 0)        1                             0                             
  %7 = load i32* %bli, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %2 = load i32* %dlti, align ... (idx: 0) -> upzero_mem_dual_port_0 (mux inputs: 0)
  %7 = load i32* %bli, align 4... (idx: 1) -> upzero_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %10, i32* %bli, al... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %10, i32* %bli, al... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %10, i32* %bli, al... (idx: 0)        5                             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %10, i32* %bli, al... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %10, i32* %bli, al... (idx: 0) -> upzero_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  upzero_signed_add_32_0        
  %10 = add nsw i32 %6, %9 (idx: 0)               20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_signed_add_32_0        
  %10 = add nsw i32 %6, %9 (idx: 0)               1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %10 = add nsw i32 %6, %9 (idx: 0) -> upzero_signed_add_32_0 (mux inputs: 2)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %12 = load i32* %11, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %12 = load i32* %11, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_1
  %18 = load i32* %17, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %18 = load i32* %17, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %12 = load i32* %11, align 4... (idx: 0)        6                             5                             
  %18 = load i32* %17, align 4... (idx: 1)        6                             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %12 = load i32* %11, align 4... (idx: 0)        1                             0                             
  %18 = load i32* %17, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %12 = load i32* %11, align 4... (idx: 0) -> upzero_mem_dual_port_0 (mux inputs: 2)
  %18 = load i32* %17, align 4... (idx: 1) -> upzero_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %21, i32* %17, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %21, i32* %17, ali... can share an input with another operation already assigned to upzero_mem_dual_port_1
  store i32 %21, i32* %17, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %21, i32* %17, ali... (idx: 0)        17                            6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %21, i32* %17, ali... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %21, i32* %17, ali... (idx: 0) -> upzero_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %21 = add nsw i32 %16, %20 can share an output register with another operation already assigned to upzero_signed_add_32_0
                                                  upzero_signed_add_32_0        
  %21 = add nsw i32 %16, %20 (idx: 0)             17                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_signed_add_32_0        
  %21 = add nsw i32 %16, %20 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %21 = add nsw i32 %16, %20 (idx: 0) -> upzero_signed_add_32_0 (mux inputs: 4)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %23 = load i32* %22, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %23 = load i32* %22, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_1
  %29 = load i32* %28, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %29 = load i32* %28, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %23 = load i32* %22, align 4... (idx: 0)        7                             7                             
  %29 = load i32* %28, align 4... (idx: 1)        7                             7                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %23 = load i32* %22, align 4... (idx: 0)        1                             0                             
  %29 = load i32* %28, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %23 = load i32* %22, align 4... (idx: 0) -> upzero_mem_dual_port_0 (mux inputs: 3)
  %29 = load i32* %28, align 4... (idx: 1) -> upzero_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %32, i32* %28, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %32, i32* %28, ali... can share an input with another operation already assigned to upzero_mem_dual_port_1
  store i32 %32, i32* %28, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %32, i32* %28, ali... (idx: 0)        18                            8                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %32, i32* %28, ali... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %32, i32* %28, ali... (idx: 0) -> upzero_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %32 = add nsw i32 %27, %31 can share an output register with another operation already assigned to upzero_signed_add_32_0
                                                  upzero_signed_add_32_0        
  %32 = add nsw i32 %27, %31 (idx: 0)             19                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_signed_add_32_0        
  %32 = add nsw i32 %27, %31 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %32 = add nsw i32 %27, %31 (idx: 0) -> upzero_signed_add_32_0 (mux inputs: 6)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %34 = load i32* %33, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %34 = load i32* %33, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_1
  %40 = load i32* %39, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %40 = load i32* %39, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %34 = load i32* %33, align 4... (idx: 0)        8                             9                             
  %40 = load i32* %39, align 4... (idx: 1)        8                             9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %34 = load i32* %33, align 4... (idx: 0)        1                             0                             
  %40 = load i32* %39, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %34 = load i32* %33, align 4... (idx: 0) -> upzero_mem_dual_port_0 (mux inputs: 4)
  %40 = load i32* %39, align 4... (idx: 1) -> upzero_mem_dual_port_1 (mux inputs: 5)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %43, i32* %39, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %43, i32* %39, ali... can share an input with another operation already assigned to upzero_mem_dual_port_1
  store i32 %43, i32* %39, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %43, i32* %39, ali... (idx: 0)        19                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %43, i32* %39, ali... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %43, i32* %39, ali... (idx: 0) -> upzero_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %43 = add nsw i32 %38, %42 can share an output register with another operation already assigned to upzero_signed_add_32_0
                                                  upzero_signed_add_32_0        
  %43 = add nsw i32 %38, %42 (idx: 0)             21                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_signed_add_32_0        
  %43 = add nsw i32 %38, %42 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %43 = add nsw i32 %38, %42 (idx: 0) -> upzero_signed_add_32_0 (mux inputs: 8)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %45 = load i32* %44, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %45 = load i32* %44, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_1
  %51 = load i32* %50, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %51 = load i32* %50, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %45 = load i32* %44, align 4... (idx: 0)        9                             11                            
  %51 = load i32* %50, align 4... (idx: 1)        9                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %45 = load i32* %44, align 4... (idx: 0)        1                             0                             
  %51 = load i32* %50, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %45 = load i32* %44, align 4... (idx: 0) -> upzero_mem_dual_port_0 (mux inputs: 5)
  %51 = load i32* %50, align 4... (idx: 1) -> upzero_mem_dual_port_1 (mux inputs: 7)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %54, i32* %50, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %54, i32* %50, ali... can share an input with another operation already assigned to upzero_mem_dual_port_1
  store i32 %54, i32* %50, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %54, i32* %50, ali... (idx: 0)        20                            12                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %54, i32* %50, ali... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %54, i32* %50, ali... (idx: 0) -> upzero_mem_dual_port_1 (mux inputs: 8)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %54 = add nsw i32 %49, %53 can share an output register with another operation already assigned to upzero_signed_add_32_0
                                                  upzero_signed_add_32_0        
  %54 = add nsw i32 %49, %53 (idx: 0)             23                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_signed_add_32_0        
  %54 = add nsw i32 %49, %53 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %54 = add nsw i32 %49, %53 (idx: 0) -> upzero_signed_add_32_0 (mux inputs: 10)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %56 = load i32* %55, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %56 = load i32* %55, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_1
  %62 = load i32* %61, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %62 = load i32* %61, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %56 = load i32* %55, align 4... (idx: 0)        10                            13                            
  %62 = load i32* %61, align 4... (idx: 1)        10                            13                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %56 = load i32* %55, align 4... (idx: 0)        1                             0                             
  %62 = load i32* %61, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %56 = load i32* %55, align 4... (idx: 0) -> upzero_mem_dual_port_0 (mux inputs: 6)
  %62 = load i32* %61, align 4... (idx: 1) -> upzero_mem_dual_port_1 (mux inputs: 9)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %65, i32* %61, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %65, i32* %61, ali... can share an input with another operation already assigned to upzero_mem_dual_port_1
  store i32 %65, i32* %61, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %65, i32* %61, ali... (idx: 0)        21                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %65, i32* %61, ali... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %65, i32* %61, ali... (idx: 0) -> upzero_mem_dual_port_1 (mux inputs: 10)
State: LEGUP_F_upzero_BB_preheader1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %65 = add nsw i32 %60, %64 can share an output register with another operation already assigned to upzero_signed_add_32_0
                                                  upzero_signed_add_32_0        
  %65 = add nsw i32 %60, %64 (idx: 0)             25                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_signed_add_32_0        
  %65 = add nsw i32 %60, %64 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %65 = add nsw i32 %60, %64 (idx: 0) -> upzero_signed_add_32_0 (mux inputs: 12)
State: LEGUP_F_upzero_BB_preheader
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %66 = load i32* %bli, align ... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %66 = load i32* %bli, align ... can share an output register with another operation already assigned to upzero_mem_dual_port_1
  %70 = load i32* %69, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %70 = load i32* %69, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %66 = load i32* %bli, align ... (idx: 0)        1                             5                             
  %70 = load i32* %69, align 4... (idx: 1)        11                            15                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %66 = load i32* %bli, align ... (idx: 0)        1                             0                             
  %70 = load i32* %69, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %66 = load i32* %bli, align ... (idx: 0) -> upzero_mem_dual_port_0 (mux inputs: 6)
  %70 = load i32* %69, align 4... (idx: 1) -> upzero_mem_dual_port_1 (mux inputs: 11)
State: LEGUP_F_upzero_BB_preheader
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %74 = load i32* %73, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %74 = load i32* %73, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_1
  %78 = load i32* %77, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %78 = load i32* %77, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %74 = load i32* %73, align 4... (idx: 0)        11                            16                            
  %78 = load i32* %77, align 4... (idx: 1)        11                            16                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %74 = load i32* %73, align 4... (idx: 0)        1                             0                             
  %78 = load i32* %77, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %74 = load i32* %73, align 4... (idx: 0) -> upzero_mem_dual_port_0 (mux inputs: 7)
  %78 = load i32* %77, align 4... (idx: 1) -> upzero_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_upzero_BB_preheader
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %82 = load i32* %81, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %82 = load i32* %81, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_1
  %86 = load i32* %85, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %86 = load i32* %85, align 4... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %82 = load i32* %81, align 4... (idx: 0)        12                            17                            
  %86 = load i32* %85, align 4... (idx: 1)        12                            17                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %82 = load i32* %81, align 4... (idx: 0)        1                             0                             
  %86 = load i32* %85, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %82 = load i32* %81, align 4... (idx: 0) -> upzero_mem_dual_port_0 (mux inputs: 8)
  %86 = load i32* %85, align 4... (idx: 1) -> upzero_mem_dual_port_1 (mux inputs: 13)
State: LEGUP_F_upzero_BB_preheader
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %68, i32* %bli, al... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %68, i32* %bli, al... can share an output register with another operation already assigned to upzero_mem_dual_port_1
  store i32 %72, i32* %69, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %72, i32* %69, ali... can share an input with another operation already assigned to upzero_mem_dual_port_1
  store i32 %72, i32* %69, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %68, i32* %bli, al... (idx: 0)        13                            18                            
  store i32 %72, i32* %69, ali... (idx: 1)        23                            18                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %68, i32* %bli, al... (idx: 0)        1                             0                             
  store i32 %72, i32* %69, ali... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %68, i32* %bli, al... (idx: 0) -> upzero_mem_dual_port_0 (mux inputs: 9)
  store i32 %72, i32* %69, ali... (idx: 1) -> upzero_mem_dual_port_1 (mux inputs: 14)
State: LEGUP_F_upzero_BB_preheader
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %76, i32* %73, ali... can share an input with another operation already assigned to upzero_mem_dual_port_0
  store i32 %76, i32* %73, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %76, i32* %73, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_1
  store i32 %80, i32* %77, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %80, i32* %77, ali... can share an input with another operation already assigned to upzero_mem_dual_port_1
  store i32 %80, i32* %77, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %76, i32* %73, ali... (idx: 0)        14                            29                            
  store i32 %80, i32* %77, ali... (idx: 1)        24                            19                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %76, i32* %73, ali... (idx: 0)        1                             0                             
  store i32 %80, i32* %77, ali... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %76, i32* %73, ali... (idx: 0) -> upzero_mem_dual_port_0 (mux inputs: 10)
  store i32 %80, i32* %77, ali... (idx: 1) -> upzero_mem_dual_port_1 (mux inputs: 15)
State: LEGUP_F_upzero_BB_preheader
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %84, i32* %81, ali... can share an input with another operation already assigned to upzero_mem_dual_port_0
  store i32 %84, i32* %81, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %84, i32* %81, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_1
  store i32 %88, i32* %85, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %88, i32* %85, ali... can share an input with another operation already assigned to upzero_mem_dual_port_1
  store i32 %88, i32* %85, ali... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %84, i32* %81, ali... (idx: 0)        15                            30                            
  store i32 %88, i32* %85, ali... (idx: 1)        25                            20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %84, i32* %81, ali... (idx: 0)        1                             0                             
  store i32 %88, i32* %85, ali... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %84, i32* %81, ali... (idx: 0) -> upzero_mem_dual_port_0 (mux inputs: 11)
  store i32 %88, i32* %85, ali... (idx: 1) -> upzero_mem_dual_port_1 (mux inputs: 16)
State: LEGUP_F_upzero_BB__89
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %90 = load i32* %.pre-phi, a... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %90 = load i32* %.pre-phi, a... can share an output register with another operation already assigned to upzero_mem_dual_port_1
  %91 = load i32* %.pre-phi10,... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %91 = load i32* %.pre-phi10,... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %90 = load i32* %.pre-phi, a... (idx: 0)        16                            21                            
  %91 = load i32* %.pre-phi10,... (idx: 1)        16                            21                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %90 = load i32* %.pre-phi, a... (idx: 0)        1                             0                             
  %91 = load i32* %.pre-phi10,... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %90 = load i32* %.pre-phi, a... (idx: 0) -> upzero_mem_dual_port_0 (mux inputs: 12)
  %91 = load i32* %.pre-phi10,... (idx: 1) -> upzero_mem_dual_port_1 (mux inputs: 17)
State: LEGUP_F_upzero_BB__89
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %92 = load i32* %.pre-phi12,... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %92 = load i32* %.pre-phi12,... can share an output register with another operation already assigned to upzero_mem_dual_port_1
  %93 = load i32* %dlti, align... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  %93 = load i32* %dlti, align... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %92 = load i32* %.pre-phi12,... (idx: 0)        17                            22                            
  %93 = load i32* %dlti, align... (idx: 1)        7                             12                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  %92 = load i32* %.pre-phi12,... (idx: 0)        1                             0                             
  %93 = load i32* %dlti, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %92 = load i32* %.pre-phi12,... (idx: 0) -> upzero_mem_dual_port_0 (mux inputs: 13)
  %93 = load i32* %dlti, align... (idx: 1) -> upzero_mem_dual_port_1 (mux inputs: 17)
State: LEGUP_F_upzero_BB__89
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %90, i32* %.pre-ph... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %90, i32* %.pre-ph... can share an output register with another operation already assigned to upzero_mem_dual_port_1
  store i32 %91, i32* %.pre-ph... can share an input with another operation already assigned to upzero_mem_dual_port_0
  store i32 %91, i32* %.pre-ph... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %91, i32* %.pre-ph... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %90, i32* %.pre-ph... (idx: 0)        28                            32                            
  store i32 %91, i32* %.pre-ph... (idx: 1)        18                            32                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %90, i32* %.pre-ph... (idx: 0)        0                             1                             
  store i32 %91, i32* %.pre-ph... (idx: 1)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %91, i32* %.pre-ph... (idx: 1) -> upzero_mem_dual_port_0 (mux inputs: 14)
  store i32 %90, i32* %.pre-ph... (idx: 0) -> upzero_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_upzero_BB__89
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %92, i32* %.pre-ph... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %92, i32* %.pre-ph... can share an input with another operation already assigned to upzero_mem_dual_port_1
  store i32 %92, i32* %.pre-ph... can share an output register with another operation already assigned to upzero_mem_dual_port_1
  store i32 %93, i32* %.pre-ph... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %93, i32* %.pre-ph... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %92, i32* %.pre-ph... (idx: 0)        29                            24                            
  store i32 %93, i32* %.pre-ph... (idx: 1)        29                            34                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %92, i32* %.pre-ph... (idx: 0)        0                             1                             
  store i32 %93, i32* %.pre-ph... (idx: 1)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %93, i32* %.pre-ph... (idx: 1) -> upzero_mem_dual_port_0 (mux inputs: 16)
  store i32 %92, i32* %.pre-ph... (idx: 0) -> upzero_mem_dual_port_1 (mux inputs: 20)
State: LEGUP_F_upzero_BB__89
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %dlt, i32* %dlti, ... can share an output register with another operation already assigned to upzero_mem_dual_port_0
  store i32 %dlt, i32* %dlti, ... can share an output register with another operation already assigned to upzero_mem_dual_port_1
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %dlt, i32* %dlti, ... (idx: 0)        11                            15                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  upzero_mem_dual_port_0        upzero_mem_dual_port_1        
  store i32 %dlt, i32* %dlti, ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %dlt, i32* %dlti, ... (idx: 0) -> upzero_mem_dual_port_0 (mux inputs: 16)

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        0                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        -5                            -5                            
  store i32 0, i32* getelement... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* getelement... (idx: 0)        1                             0                             
  store i32 0, i32* getelement... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 0, i32* getelement... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__2
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* %s.i.0, al... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* %s.i.0, al... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* %s.i.0, al... (idx: 0)        5                             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* %s.i.0, al... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* %s.i.0, al... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__2
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          
  %4 = add i64 %3, zext (i32 p... (idx: 0)        10                            10                            
  %indvar.next14 = add i64 %in... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_64_0          main_signed_add_64_1          
  %4 = add i64 %3, zext (i32 p... (idx: 0)        1                             0                             
  %indvar.next14 = add i64 %in... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = add i64 %3, zext (i32 p... (idx: 0) -> main_signed_add_64_0 (mux inputs: 1)
  %indvar.next14 = add i64 %in... (idx: 1) -> main_signed_add_64_1 (mux inputs: 1)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %82 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %82 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %83 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %83 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %82 = load i32* getelementpt... (idx: 0)        -4                            -5                            
  %83 = load i32* getelementpt... (idx: 1)        -4                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %82 = load i32* getelementpt... (idx: 0)        1                             0                             
  %83 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %82 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %83 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %37 = add nsw i32 %36, %34 (idx: 0)             20                            20                            
  %39 = add nsw i32 %38, %35 (idx: 1)             20                            20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %37 = add nsw i32 %36, %34 (idx: 0)             1                             0                             
  %39 = add nsw i32 %38, %35 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %37 = add nsw i32 %36, %34 (idx: 0) -> main_signed_add_32_0 (mux inputs: 2)
  %39 = add nsw i32 %38, %35 (idx: 1) -> main_signed_add_32_1 (mux inputs: 2)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %85 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %85 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %86 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %86 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %85 = load i32* getelementpt... (idx: 0)        -4                            -5                            
  %86 = load i32* getelementpt... (idx: 1)        -4                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %85 = load i32* getelementpt... (idx: 0)        1                             0                             
  %86 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %85 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %86 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %41 = add nsw i32 %40, %37 (idx: 0)             22                            22                            
  %43 = add nsw i32 %42, %39 (idx: 1)             22                            22                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %41 = add nsw i32 %40, %37 (idx: 0)             1                             0                             
  %43 = add nsw i32 %42, %39 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %41 = add nsw i32 %40, %37 (idx: 0) -> main_signed_add_32_0 (mux inputs: 4)
  %43 = add nsw i32 %42, %39 (idx: 1) -> main_signed_add_32_1 (mux inputs: 4)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %89 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %89 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %90 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %90 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %89 = load i32* getelementpt... (idx: 0)        -4                            -5                            
  %90 = load i32* getelementpt... (idx: 1)        -4                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %89 = load i32* getelementpt... (idx: 0)        1                             0                             
  %90 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %89 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %90 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %45 = add nsw i32 %44, %41 can share an output register with another operation already assigned to main_signed_add_32_0
  %45 = add nsw i32 %44, %41 can share an output register with another operation already assigned to main_signed_add_32_1
  %47 = add nsw i32 %46, %43 can share an output register with another operation already assigned to main_signed_add_32_0
  %47 = add nsw i32 %46, %43 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %45 = add nsw i32 %44, %41 (idx: 0)             19                            19                            
  %47 = add nsw i32 %46, %43 (idx: 1)             19                            19                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %45 = add nsw i32 %44, %41 (idx: 0)             1                             0                             
  %47 = add nsw i32 %46, %43 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %45 = add nsw i32 %44, %41 (idx: 0) -> main_signed_add_32_0 (mux inputs: 6)
  %47 = add nsw i32 %46, %43 (idx: 1) -> main_signed_add_32_1 (mux inputs: 6)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %93 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %93 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %94 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %94 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %93 = load i32* getelementpt... (idx: 0)        -4                            -5                            
  %94 = load i32* getelementpt... (idx: 1)        -4                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %93 = load i32* getelementpt... (idx: 0)        1                             0                             
  %94 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %93 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %94 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %49 = add nsw i32 %48, %45 can share an output register with another operation already assigned to main_signed_add_32_0
  %49 = add nsw i32 %48, %45 can share an output register with another operation already assigned to main_signed_add_32_1
  %51 = add nsw i32 %50, %47 can share an output register with another operation already assigned to main_signed_add_32_0
  %51 = add nsw i32 %50, %47 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %49 = add nsw i32 %48, %45 (idx: 0)             21                            21                            
  %51 = add nsw i32 %50, %47 (idx: 1)             21                            21                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %49 = add nsw i32 %48, %45 (idx: 0)             1                             0                             
  %51 = add nsw i32 %50, %47 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %49 = add nsw i32 %48, %45 (idx: 0) -> main_signed_add_32_0 (mux inputs: 8)
  %51 = add nsw i32 %50, %47 (idx: 1) -> main_signed_add_32_1 (mux inputs: 8)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %97 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %97 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
  %98 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_0
  %98 = load i32* getelementpt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %97 = load i32* getelementpt... (idx: 0)        -4                            -5                            
  %98 = load i32* getelementpt... (idx: 1)        -4                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %97 = load i32* getelementpt... (idx: 0)        1                             0                             
  %98 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %97 = load i32* getelementpt... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %98 = load i32* getelementpt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %53 = add nsw i32 %52, %49 can share an output register with another operation already assigned to main_signed_add_32_0
  %53 = add nsw i32 %52, %49 can share an output register with another operation already assigned to main_signed_add_32_1
  %55 = add nsw i32 %54, %51 can share an output register with another operation already assigned to main_signed_add_32_0
  %55 = add nsw i32 %54, %51 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %53 = add nsw i32 %52, %49 (idx: 0)             23                            23                            
  %55 = add nsw i32 %54, %51 (idx: 1)             23                            23                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %53 = add nsw i32 %52, %49 (idx: 0)             1                             0                             
  %55 = add nsw i32 %54, %51 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %53 = add nsw i32 %52, %49 (idx: 0) -> main_signed_add_32_0 (mux inputs: 10)
  %55 = add nsw i32 %54, %51 (idx: 1) -> main_signed_add_32_1 (mux inputs: 10)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %101 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %101 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %102 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %102 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %101 = load i32* getelementp... (idx: 0)        -4                            -5                            
  %102 = load i32* getelementp... (idx: 1)        -4                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %101 = load i32* getelementp... (idx: 0)        1                             0                             
  %102 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %101 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
  %102 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %57 = add nsw i32 %56, %53 can share an output register with another operation already assigned to main_signed_add_32_0
  %57 = add nsw i32 %56, %53 can share an output register with another operation already assigned to main_signed_add_32_1
  %59 = add nsw i32 %58, %55 can share an output register with another operation already assigned to main_signed_add_32_0
  %59 = add nsw i32 %58, %55 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %57 = add nsw i32 %56, %53 (idx: 0)             25                            25                            
  %59 = add nsw i32 %58, %55 (idx: 1)             25                            25                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %57 = add nsw i32 %56, %53 (idx: 0)             1                             0                             
  %59 = add nsw i32 %58, %55 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %57 = add nsw i32 %56, %53 (idx: 0) -> main_signed_add_32_0 (mux inputs: 12)
  %59 = add nsw i32 %58, %55 (idx: 1) -> main_signed_add_32_1 (mux inputs: 12)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %32 = load i32* %scevgep12, ... can share an output register with another operation already assigned to main_mem_dual_port_0
  %32 = load i32* %scevgep12, ... can share an output register with another operation already assigned to main_mem_dual_port_1
  %33 = load i32* %scevgep11, ... can share an output register with another operation already assigned to main_mem_dual_port_0
  %33 = load i32* %scevgep11, ... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %32 = load i32* %scevgep12, ... (idx: 0)        6                             5                             
  %33 = load i32* %scevgep11, ... (idx: 1)        6                             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %32 = load i32* %scevgep12, ... (idx: 0)        1                             0                             
  %33 = load i32* %scevgep11, ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %32 = load i32* %scevgep12, ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 2)
  %33 = load i32* %scevgep11, ... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %61 = add nsw i32 %60, %57 can share an output register with another operation already assigned to main_signed_add_32_0
  %61 = add nsw i32 %60, %57 can share an output register with another operation already assigned to main_signed_add_32_1
  %63 = add nsw i32 %62, %59 can share an output register with another operation already assigned to main_signed_add_32_0
  %63 = add nsw i32 %62, %59 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %61 = add nsw i32 %60, %57 (idx: 0)             27                            27                            
  %63 = add nsw i32 %62, %59 (idx: 1)             27                            27                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %61 = add nsw i32 %60, %57 (idx: 0)             1                             0                             
  %63 = add nsw i32 %62, %59 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %61 = add nsw i32 %60, %57 (idx: 0) -> main_signed_add_32_0 (mux inputs: 14)
  %63 = add nsw i32 %62, %59 (idx: 1) -> main_signed_add_32_1 (mux inputs: 14)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %8, i32* getelemen... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %8, i32* getelemen... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 %9, i32* getelemen... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %9, i32* getelemen... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %8, i32* getelemen... (idx: 0)        7                             6                             
  store i32 %9, i32* getelemen... (idx: 1)        7                             6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %8, i32* getelemen... (idx: 0)        1                             0                             
  store i32 %9, i32* getelemen... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %8, i32* getelemen... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 3)
  store i32 %9, i32* getelemen... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %65 = add nsw i32 %64, %61 can share an output register with another operation already assigned to main_signed_add_32_0
  %65 = add nsw i32 %64, %61 can share an output register with another operation already assigned to main_signed_add_32_1
  %67 = add nsw i32 %66, %63 can share an output register with another operation already assigned to main_signed_add_32_0
  %67 = add nsw i32 %66, %63 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %65 = add nsw i32 %64, %61 (idx: 0)             29                            29                            
  %67 = add nsw i32 %66, %63 (idx: 1)             29                            29                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %65 = add nsw i32 %64, %61 (idx: 0)             1                             0                             
  %67 = add nsw i32 %66, %63 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %65 = add nsw i32 %64, %61 (idx: 0) -> main_signed_add_32_0 (mux inputs: 16)
  %67 = add nsw i32 %66, %63 (idx: 1) -> main_signed_add_32_1 (mux inputs: 16)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %10, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %10, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 %11, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %11, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %10, i32* geteleme... (idx: 0)        8                             7                             
  store i32 %11, i32* geteleme... (idx: 1)        8                             7                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %10, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %11, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %10, i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 4)
  store i32 %11, i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %69 = add nsw i32 %68, %65 can share an output register with another operation already assigned to main_signed_add_32_0
  %69 = add nsw i32 %68, %65 can share an output register with another operation already assigned to main_signed_add_32_1
  %71 = add nsw i32 %70, %67 can share an output register with another operation already assigned to main_signed_add_32_0
  %71 = add nsw i32 %70, %67 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %69 = add nsw i32 %68, %65 (idx: 0)             31                            31                            
  %71 = add nsw i32 %70, %67 (idx: 1)             31                            31                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %69 = add nsw i32 %68, %65 (idx: 0)             1                             0                             
  %71 = add nsw i32 %70, %67 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %69 = add nsw i32 %68, %65 (idx: 0) -> main_signed_add_32_0 (mux inputs: 18)
  %71 = add nsw i32 %70, %67 (idx: 1) -> main_signed_add_32_1 (mux inputs: 18)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %12, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %12, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 %13, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %13, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %12, i32* geteleme... (idx: 0)        9                             8                             
  store i32 %13, i32* geteleme... (idx: 1)        9                             8                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %12, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %13, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %12, i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 5)
  store i32 %13, i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %88 = add nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_add_32_0
  %88 = add nsw i32 %87, %84 can share an output register with another operation already assigned to main_signed_add_32_1
  %92 = add nsw i32 %88, %91 can share an output register with another operation already assigned to main_signed_add_32_0
  %92 = add nsw i32 %88, %91 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %88 = add nsw i32 %87, %84 (idx: 0)             33                            33                            
  %92 = add nsw i32 %88, %91 (idx: 1)             33                            33                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %88 = add nsw i32 %87, %84 (idx: 0)             1                             0                             
  %92 = add nsw i32 %88, %91 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %88 = add nsw i32 %87, %84 (idx: 0) -> main_signed_add_32_0 (mux inputs: 20)
  %92 = add nsw i32 %88, %91 (idx: 1) -> main_signed_add_32_1 (mux inputs: 20)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %14, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %14, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 %15, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %15, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %14, i32* geteleme... (idx: 0)        10                            9                             
  store i32 %15, i32* geteleme... (idx: 1)        10                            9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %14, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %15, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %14, i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 6)
  store i32 %15, i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 5)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %73 = add nsw i32 %72, %69 can share an output register with another operation already assigned to main_signed_add_32_0
  %73 = add nsw i32 %72, %69 can share an output register with another operation already assigned to main_signed_add_32_1
  %96 = add nsw i32 %92, %95 can share an output register with another operation already assigned to main_signed_add_32_0
  %96 = add nsw i32 %92, %95 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %73 = add nsw i32 %72, %69 (idx: 0)             35                            35                            
  %96 = add nsw i32 %92, %95 (idx: 1)             35                            35                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %73 = add nsw i32 %72, %69 (idx: 0)             1                             0                             
  %96 = add nsw i32 %92, %95 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %73 = add nsw i32 %72, %69 (idx: 0) -> main_signed_add_32_0 (mux inputs: 22)
  %96 = add nsw i32 %92, %95 (idx: 1) -> main_signed_add_32_1 (mux inputs: 22)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %16, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %16, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 %17, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %17, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %16, i32* geteleme... (idx: 0)        11                            10                            
  store i32 %17, i32* geteleme... (idx: 1)        11                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %16, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %17, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %16, i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 7)
  store i32 %17, i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %75 = add nsw i32 %74, %71 can share an output register with another operation already assigned to main_signed_add_32_0
  %75 = add nsw i32 %74, %71 can share an output register with another operation already assigned to main_signed_add_32_1
  %76 = add nsw i32 %7, %73 can share an output register with another operation already assigned to main_signed_add_32_0
  %76 = add nsw i32 %7, %73 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %75 = add nsw i32 %74, %71 (idx: 0)             37                            37                            
  %76 = add nsw i32 %7, %73 (idx: 1)              37                            37                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %75 = add nsw i32 %74, %71 (idx: 0)             1                             0                             
  %76 = add nsw i32 %7, %73 (idx: 1)              0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %75 = add nsw i32 %74, %71 (idx: 0) -> main_signed_add_32_0 (mux inputs: 24)
  %76 = add nsw i32 %7, %73 (idx: 1) -> main_signed_add_32_1 (mux inputs: 24)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %18, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %18, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 %19, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %19, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %18, i32* geteleme... (idx: 0)        12                            11                            
  store i32 %19, i32* geteleme... (idx: 1)        12                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %18, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %19, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %18, i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 8)
  store i32 %19, i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 7)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %77 = add nsw i32 %6, %75 can share an output register with another operation already assigned to main_signed_add_32_0
  %77 = add nsw i32 %6, %75 can share an output register with another operation already assigned to main_signed_add_32_1
  %78 = add nsw i32 %77, %76 can share an output register with another operation already assigned to main_signed_add_32_0
  %78 = add nsw i32 %77, %76 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %77 = add nsw i32 %6, %75 (idx: 0)              39                            39                            
  %78 = add nsw i32 %77, %76 (idx: 1)             39                            39                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %77 = add nsw i32 %6, %75 (idx: 0)              1                             0                             
  %78 = add nsw i32 %77, %76 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %77 = add nsw i32 %6, %75 (idx: 0) -> main_signed_add_32_0 (mux inputs: 26)
  %78 = add nsw i32 %77, %76 (idx: 1) -> main_signed_add_32_1 (mux inputs: 26)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %20, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %20, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 %21, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %21, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %20, i32* geteleme... (idx: 0)        13                            12                            
  store i32 %21, i32* geteleme... (idx: 1)        13                            12                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %20, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %21, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %20, i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 9)
  store i32 %21, i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 8)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %100 = add nsw i32 %96, %99 can share an output register with another operation already assigned to main_signed_add_32_0
  %100 = add nsw i32 %96, %99 can share an output register with another operation already assigned to main_signed_add_32_1
  %104 = add nsw i32 %100, %10... can share an output register with another operation already assigned to main_signed_add_32_0
  %104 = add nsw i32 %100, %10... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %100 = add nsw i32 %96, %99 (idx: 0)            41                            41                            
  %104 = add nsw i32 %100, %10... (idx: 1)        41                            41                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %100 = add nsw i32 %96, %99 (idx: 0)            1                             0                             
  %104 = add nsw i32 %100, %10... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %100 = add nsw i32 %96, %99 (idx: 0) -> main_signed_add_32_0 (mux inputs: 28)
  %104 = add nsw i32 %100, %10... (idx: 1) -> main_signed_add_32_1 (mux inputs: 28)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %22, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %22, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 %23, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %23, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %22, i32* geteleme... (idx: 0)        14                            13                            
  store i32 %23, i32* geteleme... (idx: 1)        14                            13                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %22, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %23, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %22, i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 10)
  store i32 %23, i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 9)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %tmp.i.i1 = add i32 %107, %1... can share an output register with another operation already assigned to main_signed_add_32_0
  %tmp.i.i1 = add i32 %107, %1... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %tmp.i.i1 = add i32 %107, %1... (idx: 0)        43                            43                            
  %109 = add nsw i32 %108, %10... (idx: 1)        48                            48                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %tmp.i.i1 = add i32 %107, %1... (idx: 0)        1                             0                             
  %109 = add nsw i32 %108, %10... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %tmp.i.i1 = add i32 %107, %1... (idx: 0) -> main_signed_add_32_0 (mux inputs: 30)
  %109 = add nsw i32 %108, %10... (idx: 1) -> main_signed_add_32_1 (mux inputs: 30)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %24, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %24, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 %25, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %25, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %24, i32* geteleme... (idx: 0)        15                            14                            
  store i32 %25, i32* geteleme... (idx: 1)        15                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %24, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %25, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %24, i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 11)
  store i32 %25, i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 10)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %30 = add i32 %i.02.i, 2 (idx: 0)               40                            40                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %30 = add i32 %i.02.i, 2 (idx: 0)               1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %30 = add i32 %i.02.i, 2 (idx: 0) -> main_signed_add_32_0 (mux inputs: 31)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %26, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %26, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 %27, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %27, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %26, i32* geteleme... (idx: 0)        16                            15                            
  store i32 %27, i32* geteleme... (idx: 1)        16                            15                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %26, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %27, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %26, i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 12)
  store i32 %27, i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 11)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %28, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %28, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 %29, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %29, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %28, i32* geteleme... (idx: 0)        17                            16                            
  store i32 %29, i32* geteleme... (idx: 1)        17                            16                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %28, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %29, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %28, i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 13)
  store i32 %29, i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_main_BB_legup_memset_4_i64exit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %32, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %32, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 %33, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %33, i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %32, i32* geteleme... (idx: 0)        18                            17                            
  store i32 %33, i32* geteleme... (idx: 1)        18                            17                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %32, i32* geteleme... (idx: 0)        1                             0                             
  store i32 %33, i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %32, i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 14)
  store i32 %33, i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 13)
State: LEGUP_F_main_BB__113
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %114 = add nsw i32 %117, 1 (idx: 0)             41                            40                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %114 = add nsw i32 %117, 1 (idx: 0)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %114 = add nsw i32 %117, 1 (idx: 0) -> main_signed_add_32_1 (mux inputs: 31)
State: LEGUP_F_main_BB__116
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %119 = load i32* %scevgep8, ... can share an output register with another operation already assigned to main_mem_dual_port_0
  %119 = load i32* %scevgep8, ... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %119 = load i32* %scevgep8, ... (idx: 0)        19                            18                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %119 = load i32* %scevgep8, ... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %119 = load i32* %scevgep8, ... (idx: 0) -> main_mem_dual_port_1 (mux inputs: 14)
State: LEGUP_F_main_BB__116
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %118 = add i32 %117, 1 can share an output register with another operation already assigned to main_signed_add_32_0
  %118 = add i32 %117, 1 can share an input with another operation already assigned to main_signed_add_32_1
  %118 = add i32 %117, 1 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %118 = add i32 %117, 1 (idx: 0)                 36                            26                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %118 = add i32 %117, 1 (idx: 0)                 0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %118 = add i32 %117, 1 (idx: 0) -> main_signed_add_32_1 (mux inputs: 31)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_divide_32
Weight matrix for operation/function unit matching:
                                                  main_signed_divide_32_0       
  %234 = sdiv i32 %i.02.i, 2 (idx: 0)             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_divide_32_0       
  %234 = sdiv i32 %i.02.i, 2 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %234 = sdiv i32 %i.02.i, 2 (idx: 0) -> main_signed_divide_32_0 (mux inputs: 1)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %ril.0.i.i = load i32* %ril.... can share an output register with another operation already assigned to main_mem_dual_port_0
  %ril.0.i.i = load i32* %ril.... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %ril.0.i.i = load i32* %ril.... (idx: 0)        19                            19                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %ril.0.i.i = load i32* %ril.... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %ril.0.i.i = load i32* %ril.... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 15)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %125 = load i32* %124, align... can share an output register with another operation already assigned to main_mem_dual_port_0
  %125 = load i32* %124, align... can share an output register with another operation already assigned to main_mem_dual_port_1
  %129 = load i32* %128, align... can share an output register with another operation already assigned to main_mem_dual_port_0
  %129 = load i32* %128, align... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %125 = load i32* %124, align... (idx: 0)        20                            19                            
  %129 = load i32* %128, align... (idx: 1)        20                            19                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %125 = load i32* %124, align... (idx: 0)        1                             0                             
  %129 = load i32* %128, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %125 = load i32* %124, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 16)
  %129 = load i32* %128, align... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 15)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %130 = add nsw i32 %nbl.0, %... can share an output register with another operation already assigned to main_signed_add_32_0
  %130 = add nsw i32 %nbl.0, %... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %130 = add nsw i32 %nbl.0, %... (idx: 0)        46                            46                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %130 = add nsw i32 %nbl.0, %... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %130 = add nsw i32 %nbl.0, %... (idx: 0) -> main_signed_add_32_0 (mux inputs: 33)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %136 = load i32* %135, align... can share an output register with another operation already assigned to main_mem_dual_port_0
  %136 = load i32* %135, align... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %136 = load i32* %135, align... (idx: 0)        21                            20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %136 = load i32* %135, align... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %136 = load i32* %135, align... (idx: 0) -> main_mem_dual_port_1 (mux inputs: 16)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %160 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %160 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %161 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %161 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %160 = load i32* getelementp... (idx: 0)        11                            11                            
  %161 = load i32* getelementp... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %160 = load i32* getelementp... (idx: 0)        1                             0                             
  %161 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %160 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 16)
  %161 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 16)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %163 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %163 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %164 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %164 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %163 = load i32* getelementp... (idx: 0)        11                            11                            
  %164 = load i32* getelementp... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %163 = load i32* getelementp... (idx: 0)        1                             0                             
  %164 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %163 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 16)
  %164 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 16)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %167 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %167 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %168 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %168 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %167 = load i32* getelementp... (idx: 0)        11                            11                            
  %168 = load i32* getelementp... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %167 = load i32* getelementp... (idx: 0)        1                             0                             
  %168 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %167 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 16)
  %168 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 16)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %171 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %171 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %172 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %172 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %171 = load i32* getelementp... (idx: 0)        11                            11                            
  %172 = load i32* getelementp... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %171 = load i32* getelementp... (idx: 0)        1                             0                             
  %172 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %171 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 16)
  %172 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 16)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %166 = add nsw i32 %165, %16... can share an output register with another operation already assigned to main_signed_add_32_0
  %166 = add nsw i32 %165, %16... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %166 = add nsw i32 %165, %16... (idx: 0)        48                            46                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %166 = add nsw i32 %165, %16... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %166 = add nsw i32 %165, %16... (idx: 0) -> main_signed_add_32_1 (mux inputs: 33)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %175 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %175 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %176 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %176 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %175 = load i32* getelementp... (idx: 0)        11                            11                            
  %176 = load i32* getelementp... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %175 = load i32* getelementp... (idx: 0)        1                             0                             
  %176 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %175 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 16)
  %176 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 16)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %170 = add nsw i32 %166, %16... can share an output register with another operation already assigned to main_signed_add_32_0
  %170 = add nsw i32 %166, %16... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %170 = add nsw i32 %166, %16... (idx: 0)        48                            48                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %170 = add nsw i32 %166, %16... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %170 = add nsw i32 %166, %16... (idx: 0) -> main_signed_add_32_0 (mux inputs: 35)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %179 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %179 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %180 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %180 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %179 = load i32* getelementp... (idx: 0)        11                            11                            
  %180 = load i32* getelementp... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %179 = load i32* getelementp... (idx: 0)        1                             0                             
  %180 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %179 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 16)
  %180 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 16)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %174 = add nsw i32 %170, %17... can share an output register with another operation already assigned to main_signed_add_32_0
  %174 = add nsw i32 %170, %17... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %174 = add nsw i32 %170, %17... (idx: 0)        50                            48                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %174 = add nsw i32 %170, %17... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %174 = add nsw i32 %170, %17... (idx: 0) -> main_signed_add_32_1 (mux inputs: 35)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %178 = add nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_add_32_0
  %178 = add nsw i32 %174, %17... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %178 = add nsw i32 %174, %17... (idx: 0)        50                            50                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %178 = add nsw i32 %174, %17... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %178 = add nsw i32 %174, %17... (idx: 0) -> main_signed_add_32_0 (mux inputs: 37)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %182 = add nsw i32 %178, %18... can share an output register with another operation already assigned to main_signed_add_32_0
  %182 = add nsw i32 %178, %18... can share an output register with another operation already assigned to main_signed_add_32_1
  %tmp.i3.i12 = add i32 %185, ... can share an output register with another operation already assigned to main_signed_add_32_0
  %tmp.i3.i12 = add i32 %185, ... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %182 = add nsw i32 %178, %18... (idx: 0)        52                            50                            
  %tmp.i3.i12 = add i32 %185, ... (idx: 1)        52                            50                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %182 = add nsw i32 %178, %18... (idx: 0)        1                             0                             
  %tmp.i3.i12 = add i32 %185, ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %182 = add nsw i32 %178, %18... (idx: 0) -> main_signed_add_32_0 (mux inputs: 39)
  %tmp.i3.i12 = add i32 %185, ... (idx: 1) -> main_signed_add_32_1 (mux inputs: 37)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %187 = add nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_add_32_0
  %187 = add nsw i32 %186, %18... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %187 = add nsw i32 %186, %18... (idx: 0)        54                            52                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %187 = add nsw i32 %186, %18... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %187 = add nsw i32 %186, %18... (idx: 0) -> main_signed_add_32_1 (mux inputs: 39)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %. = add nsw i32 %190, %..v can share an output register with another operation already assigned to main_signed_add_32_0
  %. = add nsw i32 %190, %..v can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %. = add nsw i32 %190, %..v (idx: 0)            54                            54                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %. = add nsw i32 %190, %..v (idx: 0)            1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %. = add nsw i32 %190, %..v (idx: 0) -> main_signed_add_32_0 (mux inputs: 41)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %197 = load i32* %196, align... can share an output register with another operation already assigned to main_mem_dual_port_0
  %197 = load i32* %196, align... can share an output register with another operation already assigned to main_mem_dual_port_1
  %201 = load i32* %200, align... can share an output register with another operation already assigned to main_mem_dual_port_0
  %201 = load i32* %200, align... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %197 = load i32* %196, align... (idx: 0)        21                            21                            
  %201 = load i32* %200, align... (idx: 1)        21                            21                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %197 = load i32* %196, align... (idx: 0)        1                             0                             
  %201 = load i32* %200, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %197 = load i32* %196, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 17)
  %201 = load i32* %200, align... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 17)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %137 = add nsw i32 %105, %12... can share an input with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %137 = add nsw i32 %105, %12... (idx: 0)        61                            49                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %137 = add nsw i32 %105, %12... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %137 = add nsw i32 %105, %12... (idx: 0) -> main_signed_add_32_1 (mux inputs: 40)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_0
  %wd4.0.i9.i6 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %wd4.0.i9.i6 = add nsw i32 %... (idx: 0)        56                            55                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %wd4.0.i9.i6 = add nsw i32 %... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %wd4.0.i9.i6 = add nsw i32 %... (idx: 0) -> main_signed_add_32_1 (mux inputs: 42)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %202 = add nsw i32 %nbh.0, %... can share an output register with another operation already assigned to main_signed_add_32_0
  %202 = add nsw i32 %nbh.0, %... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %202 = add nsw i32 %nbh.0, %... (idx: 0)        56                            57                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %202 = add nsw i32 %nbh.0, %... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %202 = add nsw i32 %nbh.0, %... (idx: 0) -> main_signed_add_32_0 (mux inputs: 43)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %209 = add nsw i32 %183, %19... can share an input with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %209 = add nsw i32 %183, %19... (idx: 0)        63                            52                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %209 = add nsw i32 %183, %19... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %209 = add nsw i32 %183, %19... (idx: 0) -> main_signed_add_32_1 (mux inputs: 43)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %208 = load i32* %207, align... can share an output register with another operation already assigned to main_mem_dual_port_0
  %208 = load i32* %207, align... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %208 = load i32* %207, align... (idx: 0)        22                            22                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %208 = load i32* %207, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %208 = load i32* %207, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 18)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %149 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_0
  %149 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_1
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_0
  %wd4.0.i.i17 = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %149 = add nsw i32 %wd4.0.i9... (idx: 0)        58                            58                            
  %wd4.0.i.i17 = add nsw i32 %... (idx: 1)        58                            58                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %149 = add nsw i32 %wd4.0.i9... (idx: 0)        1                             0                             
  %wd4.0.i.i17 = add nsw i32 %... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %149 = add nsw i32 %wd4.0.i9... (idx: 0) -> main_signed_add_32_0 (mux inputs: 45)
  %wd4.0.i.i17 = add nsw i32 %... (idx: 1) -> main_signed_add_32_1 (mux inputs: 45)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %156 = add nsw i32 %153, 192 can share an output register with another operation already assigned to main_signed_add_32_0
  %156 = add nsw i32 %153, 192 can share an output register with another operation already assigned to main_signed_add_32_1
  %221 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_0
  %221 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %156 = add nsw i32 %153, 192 (idx: 0)           50                            50                            
  %221 = add nsw i32 %wd4.0.i.... (idx: 1)        60                            60                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %156 = add nsw i32 %153, 192 (idx: 0)           1                             0                             
  %221 = add nsw i32 %wd4.0.i.... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %156 = add nsw i32 %153, 192 (idx: 0) -> main_signed_add_32_0 (mux inputs: 46)
  %221 = add nsw i32 %wd4.0.i.... (idx: 1) -> main_signed_add_32_1 (mux inputs: 47)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_0
  %apl1.0.i5.i9 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_1
  %228 = add nsw i32 %225, 192 can share an output register with another operation already assigned to main_signed_add_32_0
  %228 = add nsw i32 %225, 192 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %apl1.0.i5.i9 = add nsw i32 ... (idx: 0)        61                            62                            
  %228 = add nsw i32 %225, 192 (idx: 1)           51                            52                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %apl1.0.i5.i9 = add nsw i32 ... (idx: 0)        1                             0                             
  %228 = add nsw i32 %225, 192 (idx: 1)           0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %apl1.0.i5.i9 = add nsw i32 ... (idx: 0) -> main_signed_add_32_0 (mux inputs: 48)
  %228 = add nsw i32 %225, 192 (idx: 1) -> main_signed_add_32_1 (mux inputs: 48)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_0
  %apl1.0.i.i20 = add nsw i32 ... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %apl1.0.i.i20 = add nsw i32 ... (idx: 0)        63                            63                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %apl1.0.i.i20 = add nsw i32 ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %apl1.0.i.i20 = add nsw i32 ... (idx: 0) -> main_signed_add_32_0 (mux inputs: 50)
State: LEGUP_F_main_BB_quantlexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %233, i32* %235, a... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %233, i32* %235, a... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %233, i32* %235, a... (idx: 0)        33                            32                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %233, i32* %235, a... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %233, i32* %235, a... (idx: 0) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre = load i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre = load i32* getelement... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre37 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre37 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre = load i32* getelement... (idx: 0)        13                            14                            
  %.pre37 = load i32* geteleme... (idx: 1)        13                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre = load i32* getelement... (idx: 0)        1                             0                             
  %.pre37 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre = load i32* getelement... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 18)
  %.pre37 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %237 = add nsw i32 %199, %18... can share an output register with another operation already assigned to main_signed_add_32_0
  %237 = add nsw i32 %199, %18... can share an input with another operation already assigned to main_signed_add_32_1
  %237 = add nsw i32 %199, %18... can share an output register with another operation already assigned to main_signed_add_32_1
  %243 = add nsw i32 %127, %10... can share an output register with another operation already assigned to main_signed_add_32_0
  %243 = add nsw i32 %127, %10... can share an input with another operation already assigned to main_signed_add_32_1
  %243 = add nsw i32 %127, %10... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %237 = add nsw i32 %199, %18... (idx: 0)        65                            53                            
  %243 = add nsw i32 %127, %10... (idx: 1)        65                            53                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %237 = add nsw i32 %199, %18... (idx: 0)        1                             0                             
  %243 = add nsw i32 %127, %10... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %237 = add nsw i32 %199, %18... (idx: 0) -> main_signed_add_32_0 (mux inputs: 52)
  %243 = add nsw i32 %127, %10... (idx: 1) -> main_signed_add_32_1 (mux inputs: 49)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre38 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre38 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre39 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre39 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre38 = load i32* geteleme... (idx: 0)        13                            14                            
  %.pre39 = load i32* geteleme... (idx: 1)        13                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre38 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre39 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre38 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 18)
  %.pre39 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %indvar.next10 = add i32 %in... can share an output register with another operation already assigned to main_signed_add_32_0
  %indvar.next10 = add i32 %in... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %indvar.next10 = add i32 %in... (idx: 0)        57                            54                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %indvar.next10 = add i32 %in... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %indvar.next10 = add i32 %in... (idx: 0) -> main_signed_add_32_1 (mux inputs: 50)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre40 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre40 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre41 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre41 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre40 = load i32* geteleme... (idx: 0)        13                            14                            
  %.pre41 = load i32* geteleme... (idx: 1)        13                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre40 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre41 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre40 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 18)
  %.pre41 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre42 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre42 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre43 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre43 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre42 = load i32* geteleme... (idx: 0)        13                            14                            
  %.pre43 = load i32* geteleme... (idx: 1)        13                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre42 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre43 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre42 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 18)
  %.pre43 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre44 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre44 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre45 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre45 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre44 = load i32* geteleme... (idx: 0)        13                            14                            
  %.pre45 = load i32* geteleme... (idx: 1)        13                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre44 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre45 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre44 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 18)
  %.pre45 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre46 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre46 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre47 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre47 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre46 = load i32* geteleme... (idx: 0)        13                            14                            
  %.pre47 = load i32* geteleme... (idx: 1)        13                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre46 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre47 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre46 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 18)
  %.pre47 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre48 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre48 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre49 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre49 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre48 = load i32* geteleme... (idx: 0)        13                            14                            
  %.pre49 = load i32* geteleme... (idx: 1)        13                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre48 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre49 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre48 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 18)
  %.pre49 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre50 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre50 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre51 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre51 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre50 = load i32* geteleme... (idx: 0)        13                            14                            
  %.pre51 = load i32* geteleme... (idx: 1)        13                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre50 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre51 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre50 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 18)
  %.pre51 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre52 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre52 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre53 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre53 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre52 = load i32* geteleme... (idx: 0)        13                            14                            
  %.pre53 = load i32* geteleme... (idx: 1)        13                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre52 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre53 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre52 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 18)
  %.pre53 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre54 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre54 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre55 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre55 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre54 = load i32* geteleme... (idx: 0)        13                            14                            
  %.pre55 = load i32* geteleme... (idx: 1)        13                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre54 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre55 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre54 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 18)
  %.pre55 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre56 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre56 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre57 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre57 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre56 = load i32* geteleme... (idx: 0)        13                            14                            
  %.pre57 = load i32* geteleme... (idx: 1)        13                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre56 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre57 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre56 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 18)
  %.pre57 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_encodeexit_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre58 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre58 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre59 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre59 = load i32* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre58 = load i32* geteleme... (idx: 0)        13                            14                            
  %.pre59 = load i32* geteleme... (idx: 1)        13                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre58 = load i32* geteleme... (idx: 0)        1                             0                             
  %.pre59 = load i32* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre58 = load i32* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 18)
  %.pre59 = load i32* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_preheaderipreheader
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %250 = load i32* %249, align... can share an output register with another operation already assigned to main_mem_dual_port_0
  %250 = load i32* %249, align... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %250 = load i32* %249, align... (idx: 0)        23                            24                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %250 = load i32* %249, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %250 = load i32* %249, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 19)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %256 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %256 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %257 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %257 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %256 = load i32* getelementp... (idx: 0)        14                            14                            
  %257 = load i32* getelementp... (idx: 1)        14                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %256 = load i32* getelementp... (idx: 0)        1                             0                             
  %257 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %256 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 19)
  %257 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_divide_32
Weight matrix for operation/function unit matching:
  %252 = sdiv i32 %i.11.i, 2 can share an output register with another operation already assigned to main_signed_divide_32_0
                                                  main_signed_divide_32_0       
  %252 = sdiv i32 %i.11.i, 2 (idx: 0)             6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_divide_32_0       
  %252 = sdiv i32 %i.11.i, 2 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %252 = sdiv i32 %i.11.i, 2 (idx: 0) -> main_signed_divide_32_0 (mux inputs: 2)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %259 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %259 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %260 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %260 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %259 = load i32* getelementp... (idx: 0)        14                            14                            
  %260 = load i32* getelementp... (idx: 1)        14                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %259 = load i32* getelementp... (idx: 0)        1                             0                             
  %260 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %259 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 19)
  %260 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %263 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %263 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %264 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %264 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %263 = load i32* getelementp... (idx: 0)        14                            14                            
  %264 = load i32* getelementp... (idx: 1)        14                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %263 = load i32* getelementp... (idx: 0)        1                             0                             
  %264 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %263 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 19)
  %264 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %267 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %267 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %268 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %268 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %267 = load i32* getelementp... (idx: 0)        14                            14                            
  %268 = load i32* getelementp... (idx: 1)        14                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %267 = load i32* getelementp... (idx: 0)        1                             0                             
  %268 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %267 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 19)
  %268 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %262 = add nsw i32 %261, %25... can share an output register with another operation already assigned to main_signed_add_32_0
  %262 = add nsw i32 %261, %25... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %262 = add nsw i32 %261, %25... (idx: 0)        67                            65                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %262 = add nsw i32 %261, %25... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %262 = add nsw i32 %261, %25... (idx: 0) -> main_signed_add_32_1 (mux inputs: 52)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %271 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %271 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %272 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %272 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %271 = load i32* getelementp... (idx: 0)        14                            14                            
  %272 = load i32* getelementp... (idx: 1)        14                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %271 = load i32* getelementp... (idx: 0)        1                             0                             
  %272 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %271 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 19)
  %272 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %266 = add nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_add_32_0
  %266 = add nsw i32 %262, %26... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %266 = add nsw i32 %262, %26... (idx: 0)        67                            67                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %266 = add nsw i32 %262, %26... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %266 = add nsw i32 %262, %26... (idx: 0) -> main_signed_add_32_0 (mux inputs: 54)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %275 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %275 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %276 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %276 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %275 = load i32* getelementp... (idx: 0)        14                            14                            
  %276 = load i32* getelementp... (idx: 1)        14                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %275 = load i32* getelementp... (idx: 0)        1                             0                             
  %276 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %275 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 19)
  %276 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %254 = load i32* %253, align... can share an output register with another operation already assigned to main_mem_dual_port_0
  %254 = load i32* %253, align... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %254 = load i32* %253, align... (idx: 0)        24                            24                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %254 = load i32* %253, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %254 = load i32* %253, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 20)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %287 = load i32* %286, align... can share an output register with another operation already assigned to main_mem_dual_port_0
  %287 = load i32* %286, align... can share an output register with another operation already assigned to main_mem_dual_port_1
  %296 = load i32* %295, align... can share an output register with another operation already assigned to main_mem_dual_port_0
  %296 = load i32* %295, align... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %287 = load i32* %286, align... (idx: 0)        25                            24                            
  %296 = load i32* %295, align... (idx: 1)        25                            24                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %287 = load i32* %286, align... (idx: 0)        1                             0                             
  %296 = load i32* %295, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %287 = load i32* %286, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 21)
  %296 = load i32* %295, align... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 20)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %297 = add nsw i32 %294, %29... can share an output register with another operation already assigned to main_signed_add_32_0
  %297 = add nsw i32 %294, %29... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %297 = add nsw i32 %294, %29... (idx: 0)        69                            67                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %297 = add nsw i32 %294, %29... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %297 = add nsw i32 %294, %29... (idx: 0) -> main_signed_add_32_1 (mux inputs: 54)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %304 = load i32* %303, align... can share an output register with another operation already assigned to main_mem_dual_port_0
  %304 = load i32* %303, align... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %304 = load i32* %303, align... (idx: 0)        26                            25                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %304 = load i32* %303, align... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %304 = load i32* %303, align... (idx: 0) -> main_mem_dual_port_1 (mux inputs: 21)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %333 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %333 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %334 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %334 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %333 = load i32* getelementp... (idx: 0)        16                            16                            
  %334 = load i32* getelementp... (idx: 1)        16                            16                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %333 = load i32* getelementp... (idx: 0)        1                             0                             
  %334 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %333 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 21)
  %334 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 21)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %336 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %336 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %337 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %337 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %336 = load i32* getelementp... (idx: 0)        16                            16                            
  %337 = load i32* getelementp... (idx: 1)        16                            16                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %336 = load i32* getelementp... (idx: 0)        1                             0                             
  %337 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %336 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 21)
  %337 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 21)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %340 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %340 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %341 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %341 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %340 = load i32* getelementp... (idx: 0)        16                            16                            
  %341 = load i32* getelementp... (idx: 1)        16                            16                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %340 = load i32* getelementp... (idx: 0)        1                             0                             
  %341 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %340 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 21)
  %341 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 21)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %344 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %344 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %345 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %345 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %344 = load i32* getelementp... (idx: 0)        16                            16                            
  %345 = load i32* getelementp... (idx: 1)        16                            16                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %344 = load i32* getelementp... (idx: 0)        1                             0                             
  %345 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %344 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 21)
  %345 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 21)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %339 = add nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_add_32_0
  %339 = add nsw i32 %338, %33... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %339 = add nsw i32 %338, %33... (idx: 0)        69                            69                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %339 = add nsw i32 %338, %33... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %339 = add nsw i32 %338, %33... (idx: 0) -> main_signed_add_32_0 (mux inputs: 56)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %348 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %348 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %349 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %349 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %348 = load i32* getelementp... (idx: 0)        16                            16                            
  %349 = load i32* getelementp... (idx: 1)        16                            16                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %348 = load i32* getelementp... (idx: 0)        1                             0                             
  %349 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %348 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 21)
  %349 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 21)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %270 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_0
  %270 = add nsw i32 %266, %26... can share an output register with another operation already assigned to main_signed_add_32_1
  %274 = add nsw i32 %270, %27... can share an output register with another operation already assigned to main_signed_add_32_0
  %274 = add nsw i32 %270, %27... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %270 = add nsw i32 %266, %26... (idx: 0)        71                            69                            
  %274 = add nsw i32 %270, %27... (idx: 1)        71                            69                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %270 = add nsw i32 %266, %26... (idx: 0)        1                             0                             
  %274 = add nsw i32 %270, %27... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %270 = add nsw i32 %266, %26... (idx: 0) -> main_signed_add_32_0 (mux inputs: 58)
  %274 = add nsw i32 %270, %27... (idx: 1) -> main_signed_add_32_1 (mux inputs: 56)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %352 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %352 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
  %353 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_0
  %353 = load i32* getelementp... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %352 = load i32* getelementp... (idx: 0)        16                            16                            
  %353 = load i32* getelementp... (idx: 1)        16                            16                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %352 = load i32* getelementp... (idx: 0)        1                             0                             
  %353 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %352 = load i32* getelementp... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 21)
  %353 = load i32* getelementp... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 21)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %343 = add nsw i32 %339, %34... can share an output register with another operation already assigned to main_signed_add_32_0
  %343 = add nsw i32 %339, %34... can share an output register with another operation already assigned to main_signed_add_32_1
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_0
  %347 = add nsw i32 %343, %34... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %343 = add nsw i32 %339, %34... (idx: 0)        73                            71                            
  %347 = add nsw i32 %343, %34... (idx: 1)        73                            71                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %343 = add nsw i32 %339, %34... (idx: 0)        1                             0                             
  %347 = add nsw i32 %343, %34... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %343 = add nsw i32 %339, %34... (idx: 0) -> main_signed_add_32_0 (mux inputs: 60)
  %347 = add nsw i32 %343, %34... (idx: 1) -> main_signed_add_32_1 (mux inputs: 58)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %362 = load i32* %361, align... can share an output register with another operation already assigned to main_mem_dual_port_0
  %362 = load i32* %361, align... can share an output register with another operation already assigned to main_mem_dual_port_1
  %368 = load i32* %367, align... can share an output register with another operation already assigned to main_mem_dual_port_0
  %368 = load i32* %367, align... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %362 = load i32* %361, align... (idx: 0)        26                            26                            
  %368 = load i32* %367, align... (idx: 1)        26                            26                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %362 = load i32* %361, align... (idx: 0)        1                             0                             
  %368 = load i32* %367, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %362 = load i32* %361, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 22)
  %368 = load i32* %367, align... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 22)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %278 = add nsw i32 %274, %27... can share an output register with another operation already assigned to main_signed_add_32_0
  %278 = add nsw i32 %274, %27... can share an output register with another operation already assigned to main_signed_add_32_1
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_0
  %351 = add nsw i32 %347, %35... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %278 = add nsw i32 %274, %27... (idx: 0)        75                            73                            
  %351 = add nsw i32 %347, %35... (idx: 1)        75                            73                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %278 = add nsw i32 %274, %27... (idx: 0)        1                             0                             
  %351 = add nsw i32 %347, %35... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %278 = add nsw i32 %274, %27... (idx: 0) -> main_signed_add_32_0 (mux inputs: 62)
  %351 = add nsw i32 %347, %35... (idx: 1) -> main_signed_add_32_1 (mux inputs: 60)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %tmp.i.i = add i32 %281, %28... can share an output register with another operation already assigned to main_signed_add_32_0
  %tmp.i.i = add i32 %281, %28... can share an output register with another operation already assigned to main_signed_add_32_1
  %283 = add nsw i32 %282, %27... can share an output register with another operation already assigned to main_signed_add_32_0
  %283 = add nsw i32 %282, %27... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %tmp.i.i = add i32 %281, %28... (idx: 0)        77                            75                            
  %283 = add nsw i32 %282, %27... (idx: 1)        77                            75                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %tmp.i.i = add i32 %281, %28... (idx: 0)        1                             0                             
  %283 = add nsw i32 %282, %27... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %tmp.i.i = add i32 %281, %28... (idx: 0) -> main_signed_add_32_0 (mux inputs: 64)
  %283 = add nsw i32 %282, %27... (idx: 1) -> main_signed_add_32_1 (mux inputs: 62)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %292 = add nsw i32 %291, %28... can share an output register with another operation already assigned to main_signed_add_32_0
  %292 = add nsw i32 %291, %28... can share an output register with another operation already assigned to main_signed_add_32_1
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_0
  %355 = add nsw i32 %351, %35... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %292 = add nsw i32 %291, %28... (idx: 0)        79                            77                            
  %355 = add nsw i32 %351, %35... (idx: 1)        79                            77                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %292 = add nsw i32 %291, %28... (idx: 0)        1                             0                             
  %355 = add nsw i32 %351, %35... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %292 = add nsw i32 %291, %28... (idx: 0) -> main_signed_add_32_0 (mux inputs: 66)
  %355 = add nsw i32 %351, %35... (idx: 1) -> main_signed_add_32_1 (mux inputs: 64)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %tmp.i3.i = add i32 %358, %3... can share an output register with another operation already assigned to main_signed_add_32_0
  %tmp.i3.i = add i32 %358, %3... can share an output register with another operation already assigned to main_signed_add_32_1
  %360 = add nsw i32 %359, %35... can share an output register with another operation already assigned to main_signed_add_32_0
  %360 = add nsw i32 %359, %35... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %tmp.i3.i = add i32 %358, %3... (idx: 0)        81                            79                            
  %360 = add nsw i32 %359, %35... (idx: 1)        81                            79                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %tmp.i3.i = add i32 %358, %3... (idx: 0)        1                             0                             
  %360 = add nsw i32 %359, %35... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %tmp.i3.i = add i32 %358, %3... (idx: 0) -> main_signed_add_32_0 (mux inputs: 68)
  %360 = add nsw i32 %359, %35... (idx: 1) -> main_signed_add_32_1 (mux inputs: 66)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %369 = add nsw i32 %366, %36... can share an output register with another operation already assigned to main_signed_add_32_0
  %369 = add nsw i32 %366, %36... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %369 = add nsw i32 %366, %36... (idx: 0)        83                            81                            
  %404 = add nsw i32 %364, %36... (idx: 1)        88                            86                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %369 = add nsw i32 %366, %36... (idx: 0)        1                             0                             
  %404 = add nsw i32 %364, %36... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %369 = add nsw i32 %366, %36... (idx: 0) -> main_signed_add_32_0 (mux inputs: 70)
  %404 = add nsw i32 %364, %36... (idx: 1) -> main_signed_add_32_1 (mux inputs: 68)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %308 = add nsw i32 %279, %28... can share an input with another operation already assigned to main_signed_add_32_1
  %380 = add nsw i32 %356, %36... can share an input with another operation already assigned to main_signed_add_32_1
  %380 = add nsw i32 %356, %36... can share an input with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %308 = add nsw i32 %279, %28... (idx: 0)        90                            78                            
  %380 = add nsw i32 %356, %36... (idx: 1)        90                            68                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %308 = add nsw i32 %279, %28... (idx: 0)        1                             0                             
  %380 = add nsw i32 %356, %36... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %308 = add nsw i32 %279, %28... (idx: 0) -> main_signed_add_32_0 (mux inputs: 72)
  %380 = add nsw i32 %356, %36... (idx: 1) -> main_signed_add_32_1 (mux inputs: 68)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %376 = load i32* %375, align... can share an output register with another operation already assigned to main_mem_dual_port_0
  %376 = load i32* %375, align... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %376 = load i32* %375, align... (idx: 0)        27                            27                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %376 = load i32* %375, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %376 = load i32* %375, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 23)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %410 = add nsw i32 %409, %40... can share an output register with another operation already assigned to main_signed_add_32_0
  %410 = add nsw i32 %409, %40... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %406 = add nsw i32 %404, %29... (idx: 0)        92                            88                            
  %410 = add nsw i32 %409, %40... (idx: 1)        87                            83                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %406 = add nsw i32 %404, %29... (idx: 0)        1                             0                             
  %410 = add nsw i32 %409, %40... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %406 = add nsw i32 %404, %29... (idx: 0) -> main_signed_add_32_0 (mux inputs: 74)
  %410 = add nsw i32 %409, %40... (idx: 1) -> main_signed_add_32_1 (mux inputs: 70)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %412 = add nsw i32 %411, %40... can share an output register with another operation already assigned to main_signed_add_32_0
  %412 = add nsw i32 %411, %40... can share an output register with another operation already assigned to main_signed_add_32_1
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_0
  %414 = add nsw i32 %413, %41... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %412 = add nsw i32 %411, %40... (idx: 0)        89                            85                            
  %414 = add nsw i32 %413, %41... (idx: 1)        89                            85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %412 = add nsw i32 %411, %40... (idx: 0)        1                             0                             
  %414 = add nsw i32 %413, %41... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %412 = add nsw i32 %411, %40... (idx: 0) -> main_signed_add_32_0 (mux inputs: 76)
  %414 = add nsw i32 %413, %41... (idx: 1) -> main_signed_add_32_1 (mux inputs: 72)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_0
  %wd4.0.i9.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_1
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_0
  %416 = add nsw i32 %415, %41... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %wd4.0.i9.i = add nsw i32 %3... (idx: 0)        91                            87                            
  %416 = add nsw i32 %415, %41... (idx: 1)        91                            87                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %wd4.0.i9.i = add nsw i32 %3... (idx: 0)        1                             0                             
  %416 = add nsw i32 %415, %41... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %wd4.0.i9.i = add nsw i32 %3... (idx: 0) -> main_signed_add_32_0 (mux inputs: 78)
  %416 = add nsw i32 %415, %41... (idx: 1) -> main_signed_add_32_1 (mux inputs: 74)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %320 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_0
  %320 = add nsw i32 %wd4.0.i9... can share an output register with another operation already assigned to main_signed_add_32_1
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_0
  %wd4.0.i.i = add nsw i32 %38... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %320 = add nsw i32 %wd4.0.i9... (idx: 0)        93                            89                            
  %wd4.0.i.i = add nsw i32 %38... (idx: 1)        93                            89                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %320 = add nsw i32 %wd4.0.i9... (idx: 0)        1                             0                             
  %wd4.0.i.i = add nsw i32 %38... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %320 = add nsw i32 %wd4.0.i9... (idx: 0) -> main_signed_add_32_0 (mux inputs: 80)
  %wd4.0.i.i = add nsw i32 %38... (idx: 1) -> main_signed_add_32_1 (mux inputs: 76)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %392 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_0
  %392 = add nsw i32 %wd4.0.i.... can share an output register with another operation already assigned to main_signed_add_32_1
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_0
  %418 = add nsw i32 %417, %41... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %392 = add nsw i32 %wd4.0.i.... (idx: 0)        95                            91                            
  %418 = add nsw i32 %417, %41... (idx: 1)        95                            91                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %392 = add nsw i32 %wd4.0.i.... (idx: 0)        1                             0                             
  %418 = add nsw i32 %417, %41... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %392 = add nsw i32 %wd4.0.i.... (idx: 0) -> main_signed_add_32_0 (mux inputs: 82)
  %418 = add nsw i32 %417, %41... (idx: 1) -> main_signed_add_32_1 (mux inputs: 78)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_0
  %420 = add nsw i32 %419, %41... can share an output register with another operation already assigned to main_signed_add_32_1
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_0
  %422 = add nsw i32 %421, %41... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %420 = add nsw i32 %419, %41... (idx: 0)        97                            93                            
  %422 = add nsw i32 %421, %41... (idx: 1)        97                            93                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %420 = add nsw i32 %419, %41... (idx: 0)        1                             0                             
  %422 = add nsw i32 %421, %41... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %420 = add nsw i32 %419, %41... (idx: 0) -> main_signed_add_32_0 (mux inputs: 84)
  %422 = add nsw i32 %421, %41... (idx: 1) -> main_signed_add_32_1 (mux inputs: 80)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_0
  %424 = add nsw i32 %423, %42... can share an output register with another operation already assigned to main_signed_add_32_1
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_0
  %426 = add nsw i32 %425, %42... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %424 = add nsw i32 %423, %42... (idx: 0)        99                            95                            
  %426 = add nsw i32 %425, %42... (idx: 1)        99                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %424 = add nsw i32 %423, %42... (idx: 0)        1                             0                             
  %426 = add nsw i32 %425, %42... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %424 = add nsw i32 %423, %42... (idx: 0) -> main_signed_add_32_0 (mux inputs: 86)
  %426 = add nsw i32 %425, %42... (idx: 1) -> main_signed_add_32_1 (mux inputs: 82)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_0
  %428 = add nsw i32 %427, %42... can share an output register with another operation already assigned to main_signed_add_32_1
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_0
  %430 = add nsw i32 %429, %42... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %428 = add nsw i32 %427, %42... (idx: 0)        101                           97                            
  %430 = add nsw i32 %429, %42... (idx: 1)        101                           97                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %428 = add nsw i32 %427, %42... (idx: 0)        1                             0                             
  %430 = add nsw i32 %429, %42... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %428 = add nsw i32 %427, %42... (idx: 0) -> main_signed_add_32_0 (mux inputs: 88)
  %430 = add nsw i32 %429, %42... (idx: 1) -> main_signed_add_32_1 (mux inputs: 84)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_0
  %432 = add nsw i32 %431, %42... can share an output register with another operation already assigned to main_signed_add_32_1
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_0
  %434 = add nsw i32 %433, %43... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %432 = add nsw i32 %431, %42... (idx: 0)        103                           99                            
  %434 = add nsw i32 %433, %43... (idx: 1)        103                           99                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %432 = add nsw i32 %431, %42... (idx: 0)        1                             0                             
  %434 = add nsw i32 %433, %43... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %432 = add nsw i32 %431, %42... (idx: 0) -> main_signed_add_32_0 (mux inputs: 90)
  %434 = add nsw i32 %433, %43... (idx: 1) -> main_signed_add_32_1 (mux inputs: 86)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_0
  %436 = add nsw i32 %435, %43... can share an output register with another operation already assigned to main_signed_add_32_1
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_0
  %438 = add nsw i32 %437, %43... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %436 = add nsw i32 %435, %43... (idx: 0)        105                           101                           
  %438 = add nsw i32 %437, %43... (idx: 1)        105                           101                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %436 = add nsw i32 %435, %43... (idx: 0)        1                             0                             
  %438 = add nsw i32 %437, %43... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %436 = add nsw i32 %435, %43... (idx: 0) -> main_signed_add_32_0 (mux inputs: 92)
  %438 = add nsw i32 %437, %43... (idx: 1) -> main_signed_add_32_1 (mux inputs: 88)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %327 = add nsw i32 %324, 192 can share an output register with another operation already assigned to main_signed_add_32_0
  %327 = add nsw i32 %324, 192 can share an output register with another operation already assigned to main_signed_add_32_1
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_0
  %440 = add nsw i32 %439, %43... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %327 = add nsw i32 %324, 192 (idx: 0)           97                            93                            
  %440 = add nsw i32 %439, %43... (idx: 1)        107                           103                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %327 = add nsw i32 %324, 192 (idx: 0)           1                             0                             
  %440 = add nsw i32 %439, %43... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %327 = add nsw i32 %324, 192 (idx: 0) -> main_signed_add_32_0 (mux inputs: 93)
  %440 = add nsw i32 %439, %43... (idx: 1) -> main_signed_add_32_1 (mux inputs: 90)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_0
  %apl1.0.i5.i = add nsw i32 %... can share an output register with another operation already assigned to main_signed_add_32_1
  %399 = add nsw i32 %396, 192 can share an output register with another operation already assigned to main_signed_add_32_0
  %399 = add nsw i32 %396, 192 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %apl1.0.i5.i = add nsw i32 %... (idx: 0)        108                           105                           
  %399 = add nsw i32 %396, 192 (idx: 1)           98                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %apl1.0.i5.i = add nsw i32 %... (idx: 0)        1                             0                             
  %399 = add nsw i32 %396, 192 (idx: 1)           0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %apl1.0.i5.i = add nsw i32 %... (idx: 0) -> main_signed_add_32_0 (mux inputs: 95)
  %399 = add nsw i32 %396, 192 (idx: 1) -> main_signed_add_32_1 (mux inputs: 91)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %apl1.0.i.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_0
  %apl1.0.i.i = add nsw i32 %3... can share an output register with another operation already assigned to main_signed_add_32_1
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_0
  %442 = add nsw i32 %441, %43... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %apl1.0.i.i = add nsw i32 %3... (idx: 0)        110                           106                           
  %442 = add nsw i32 %441, %43... (idx: 1)        110                           106                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %apl1.0.i.i = add nsw i32 %3... (idx: 0)        1                             0                             
  %442 = add nsw i32 %441, %43... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %apl1.0.i.i = add nsw i32 %3... (idx: 0) -> main_signed_add_32_0 (mux inputs: 97)
  %442 = add nsw i32 %441, %43... (idx: 1) -> main_signed_add_32_1 (mux inputs: 93)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_0
  %444 = add nsw i32 %443, %44... can share an output register with another operation already assigned to main_signed_add_32_1
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_0
  %446 = add nsw i32 %445, %44... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %444 = add nsw i32 %443, %44... (idx: 0)        112                           108                           
  %446 = add nsw i32 %445, %44... (idx: 1)        112                           108                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %444 = add nsw i32 %443, %44... (idx: 0)        1                             0                             
  %446 = add nsw i32 %445, %44... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %444 = add nsw i32 %443, %44... (idx: 0) -> main_signed_add_32_0 (mux inputs: 99)
  %446 = add nsw i32 %445, %44... (idx: 1) -> main_signed_add_32_1 (mux inputs: 95)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %453, i32* %scevge... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %453, i32* %scevge... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %453, i32* %scevge... (idx: 0)        38                            37                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %453, i32* %scevge... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %453, i32* %scevge... (idx: 0) -> main_mem_dual_port_1 (mux inputs: 24)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_0
  %448 = add nsw i32 %447, %44... can share an output register with another operation already assigned to main_signed_add_32_1
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_0
  %450 = add nsw i32 %449, %44... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %448 = add nsw i32 %447, %44... (idx: 0)        114                           110                           
  %450 = add nsw i32 %449, %44... (idx: 1)        114                           110                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %448 = add nsw i32 %447, %44... (idx: 0)        1                             0                             
  %450 = add nsw i32 %449, %44... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %448 = add nsw i32 %447, %44... (idx: 0) -> main_signed_add_32_0 (mux inputs: 101)
  %450 = add nsw i32 %449, %44... (idx: 1) -> main_signed_add_32_1 (mux inputs: 97)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %454, i32* %scevge... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %454, i32* %scevge... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %454, i32* %scevge... (idx: 0)        38                            39                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %454, i32* %scevge... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %454, i32* %scevge... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 25)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %332 = add nsw i32 %289, %28... can share an input with another operation already assigned to main_signed_add_32_0
  %332 = add nsw i32 %289, %28... can share an input with another operation already assigned to main_signed_add_32_0
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_0
  %452 = add nsw i32 %451, %44... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %332 = add nsw i32 %289, %28... (idx: 0)        101                           117                           
  %452 = add nsw i32 %451, %44... (idx: 1)        116                           112                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %332 = add nsw i32 %289, %28... (idx: 0)        1                             0                             
  %452 = add nsw i32 %451, %44... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %332 = add nsw i32 %289, %28... (idx: 0) -> main_signed_add_32_0 (mux inputs: 101)
  %452 = add nsw i32 %451, %44... (idx: 1) -> main_signed_add_32_1 (mux inputs: 99)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %indvar.next = add i32 %indv... (idx: 0)        111                           109                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %indvar.next = add i32 %indv... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %indvar.next = add i32 %indv... (idx: 0) -> main_signed_add_32_1 (mux inputs: 100)
State: LEGUP_F_main_BB_adpcm_mainexit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %455 = load i32* %scevgep4, ... can share an output register with another operation already assigned to main_mem_dual_port_0
  %455 = load i32* %scevgep4, ... can share an output register with another operation already assigned to main_mem_dual_port_1
  %456 = load i32* %scevgep3, ... can share an output register with another operation already assigned to main_mem_dual_port_0
  %456 = load i32* %scevgep3, ... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %455 = load i32* %scevgep4, ... (idx: 0)        30                            29                            
  %456 = load i32* %scevgep3, ... (idx: 1)        30                            29                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %455 = load i32* %scevgep4, ... (idx: 0)        1                             0                             
  %456 = load i32* %scevgep3, ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %455 = load i32* %scevgep4, ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 26)
  %456 = load i32* %scevgep3, ... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 25)
State: LEGUP_F_main_BB_adpcm_mainexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %459 = add nsw i32 %i.03, 1 (idx: 0)            111                           110                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %459 = add nsw i32 %i.03, 1 (idx: 0)            0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %459 = add nsw i32 %i.03, 1 (idx: 0) -> main_signed_add_32_1 (mux inputs: 101)
State: LEGUP_F_main_BB_adpcm_mainexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %.main_result.0 = add nsw i3... (idx: 0)        121                           121                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %.main_result.0 = add nsw i3... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.main_result.0 = add nsw i3... (idx: 0) -> main_signed_add_32_0 (mux inputs: 103)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %460 = load i32* %scevgep2, ... can share an output register with another operation already assigned to main_mem_dual_port_0
  %460 = load i32* %scevgep2, ... can share an output register with another operation already assigned to main_mem_dual_port_1
  %461 = load i32* %scevgep, a... can share an output register with another operation already assigned to main_mem_dual_port_0
  %461 = load i32* %scevgep, a... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %460 = load i32* %scevgep2, ... (idx: 0)        31                            30                            
  %461 = load i32* %scevgep, a... (idx: 1)        31                            30                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %460 = load i32* %scevgep2, ... (idx: 0)        1                             0                             
  %461 = load i32* %scevgep, a... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %460 = load i32* %scevgep2, ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 27)
  %461 = load i32* %scevgep, a... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 26)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %464 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_0
  %464 = add nsw i32 %i.11, 1 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %464 = add nsw i32 %i.11, 1 (idx: 0)            108                           106                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %464 = add nsw i32 %i.11, 1 (idx: 0)            0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %464 = add nsw i32 %i.11, 1 (idx: 0) -> main_signed_add_32_1 (mux inputs: 102)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_0
  %.main_result.2 = add nsw i3... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %.main_result.2 = add nsw i3... (idx: 0)        118                           117                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %.main_result.2 = add nsw i3... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.main_result.2 = add nsw i3... (idx: 0) -> main_signed_add_32_1 (mux inputs: 104)

